
JAllenLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a7c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012dc  08008c2c  08008c2c  00009c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f08  08009f08  0000b080  2**0
                  CONTENTS
  4 .ARM          00000008  08009f08  08009f08  0000af08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f10  08009f10  0000b080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f10  08009f10  0000af10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f14  08009f14  0000af14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08009f18  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b080  2**0
                  CONTENTS
 10 .bss          00025e50  20000080  20000080  0000b080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025ed0  20025ed0  0000b080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c9c  00000000  00000000  0000b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003419  00000000  00000000  0001fd4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  00023168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f80  00000000  00000000  00024580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026dda  00000000  00000000  00025500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001974f  00000000  00000000  0004c2da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e12e8  00000000  00000000  00065a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00146d11  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ed4  00000000  00000000  00146d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0014cc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008c14 	.word	0x08008c14

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08008c14 	.word	0x08008c14

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <applicationInit>:
static STMPE811_TouchData StaticTouchData;
static EXTI_HandleTypeDef LCDTouchIRQ;

void LCDTouchScreenInterruptGPIOInit(void);

void applicationInit(){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	//applicationInterruptInit();
	object_Select();
 8000594:	f000 fd5e 	bl	8001054 <object_Select>
	addScheduledEvent(MATRIX_UPDATE_EVENT);
 8000598:	2004      	movs	r0, #4
 800059a:	f001 fc0f 	bl	8001dbc <addScheduledEvent>

	LTCD__Init();
 800059e:	f000 f9db 	bl	8000958 <LTCD__Init>
	LTCD_Layer_Init(0);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 f998 	bl	80008d8 <LTCD_Layer_Init>
	LCD_Clear(0,LCD_COLOR_WHITE);
 80005a8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005ac:	2000      	movs	r0, #0
 80005ae:	f000 fa4f 	bl	8000a50 <LCD_Clear>

	InitializeLCDTouch();
 80005b2:	f000 fb25 	bl	8000c00 <InitializeLCDTouch>
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005b6:	4b03      	ldr	r3, [pc, #12]	@ (80005c4 <applicationInit+0x34>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	719a      	strb	r2, [r3, #6]
	LCDTouchScreenInterruptGPIOInit();
 80005bc:	f000 f804 	bl	80005c8 <LCDTouchScreenInterruptGPIOInit>
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	2000009c 	.word	0x2000009c

080005c8 <LCDTouchScreenInterruptGPIOInit>:


void LCDTouchScreenInterruptGPIOInit(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 80005dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005e0:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005e2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80005e6:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ec:	2302      	movs	r3, #2
 80005ee:	613b      	str	r3, [r7, #16]

    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	4b0d      	ldr	r3, [pc, #52]	@ (800062c <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f8:	4a0c      	ldr	r2, [pc, #48]	@ (800062c <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005fa:	f043 0301 	orr.w	r3, r3, #1
 80005fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000600:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000604:	f003 0301 	and.w	r3, r3, #1
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]

    // GPIO Init
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	4619      	mov	r1, r3
 8000610:	4807      	ldr	r0, [pc, #28]	@ (8000630 <LCDTouchScreenInterruptGPIOInit+0x68>)
 8000612:	f003 fbf9 	bl	8003e08 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000616:	2028      	movs	r0, #40	@ 0x28
 8000618:	f003 fba7 	bl	8003d6a <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 800061c:	4b05      	ldr	r3, [pc, #20]	@ (8000634 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 800061e:	4a06      	ldr	r2, [pc, #24]	@ (8000638 <LCDTouchScreenInterruptGPIOInit+0x70>)
 8000620:	601a      	str	r2, [r3, #0]

}
 8000622:	bf00      	nop
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40020000 	.word	0x40020000
 8000634:	200000a4 	.word	0x200000a4
 8000638:	0600000f 	.word	0x0600000f

0800063c <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 8000642:	2028      	movs	r0, #40	@ 0x28
 8000644:	f003 fb9f 	bl	8003d86 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 8000648:	2300      	movs	r3, #0
 800064a:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 800064c:	4b37      	ldr	r3, [pc, #220]	@ (800072c <EXTI15_10_IRQHandler+0xf0>)
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000652:	e006      	b.n	8000662 <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 8000654:	204c      	movs	r0, #76	@ 0x4c
 8000656:	f002 feb2 	bl	80033be <STMPE811_Read>
 800065a:	4603      	mov	r3, r0
 800065c:	461a      	mov	r2, r3
 800065e:	4b33      	ldr	r3, [pc, #204]	@ (800072c <EXTI15_10_IRQHandler+0xf0>)
 8000660:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000662:	4b32      	ldr	r3, [pc, #200]	@ (800072c <EXTI15_10_IRQHandler+0xf0>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d0f4      	beq.n	8000654 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 800066a:	200a      	movs	r0, #10
 800066c:	f000 fade 	bl	8000c2c <ReadRegisterFromTouchModule>
 8000670:	4603      	mov	r3, r0
 8000672:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 8000674:	2100      	movs	r1, #0
 8000676:	200a      	movs	r0, #10
 8000678:	f000 fae6 	bl	8000c48 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 800067c:	200b      	movs	r0, #11
 800067e:	f000 fad5 	bl	8000c2c <ReadRegisterFromTouchModule>
 8000682:	4603      	mov	r3, r0
 8000684:	461a      	mov	r2, r3
 8000686:	4b2a      	ldr	r3, [pc, #168]	@ (8000730 <EXTI15_10_IRQHandler+0xf4>)
 8000688:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 800068a:	4b29      	ldr	r3, [pc, #164]	@ (8000730 <EXTI15_10_IRQHandler+0xf4>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000694:	797b      	ldrb	r3, [r7, #5]
 8000696:	4619      	mov	r1, r3
 8000698:	200b      	movs	r0, #11
 800069a:	f000 fad5 	bl	8000c48 <WriteDataToTouchModule>

	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 800069e:	2040      	movs	r0, #64	@ 0x40
 80006a0:	f000 fac4 	bl	8000c2c <ReadRegisterFromTouchModule>
 80006a4:	4603      	mov	r3, r0
 80006a6:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 80006a8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	da01      	bge.n	80006b4 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 80006b0:	2301      	movs	r3, #1
 80006b2:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d014      	beq.n	80006e4 <EXTI15_10_IRQHandler+0xa8>
	{
		printf("\nPressed");
 80006ba:	481e      	ldr	r0, [pc, #120]	@ (8000734 <EXTI15_10_IRQHandler+0xf8>)
 80006bc:	f007 fbe0 	bl	8007e80 <iprintf>
		// May need to do numerous retries?
		DetermineTouchPosition(&StaticTouchData);
 80006c0:	481d      	ldr	r0, [pc, #116]	@ (8000738 <EXTI15_10_IRQHandler+0xfc>)
 80006c2:	f000 faa8 	bl	8000c16 <DetermineTouchPosition>
		/* Touch valid */
		shift_Left(StaticTouchData.x);
 80006c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000738 <EXTI15_10_IRQHandler+0xfc>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 fd5e 	bl	800118c <shift_Left>
		printf("\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
 80006d0:	4b19      	ldr	r3, [pc, #100]	@ (8000738 <EXTI15_10_IRQHandler+0xfc>)
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	4619      	mov	r1, r3
 80006d6:	4b18      	ldr	r3, [pc, #96]	@ (8000738 <EXTI15_10_IRQHandler+0xfc>)
 80006d8:	885b      	ldrh	r3, [r3, #2]
 80006da:	461a      	mov	r2, r3
 80006dc:	4817      	ldr	r0, [pc, #92]	@ (800073c <EXTI15_10_IRQHandler+0x100>)
 80006de:	f007 fbcf 	bl	8007e80 <iprintf>
 80006e2:	e002      	b.n	80006ea <EXTI15_10_IRQHandler+0xae>
		//LCD_Clear(0, LCD_COLOR_RED);

	}else{

		/* Touch not pressed */
		printf("\nNot pressed \n");
 80006e4:	4816      	ldr	r0, [pc, #88]	@ (8000740 <EXTI15_10_IRQHandler+0x104>)
 80006e6:	f007 fc33 	bl	8007f50 <puts>
		//LCD_Clear(0, LCD_COLOR_GREEN);
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 80006ea:	2101      	movs	r1, #1
 80006ec:	204b      	movs	r0, #75	@ 0x4b
 80006ee:	f002 fe77 	bl	80033e0 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 80006f2:	2100      	movs	r1, #0
 80006f4:	204b      	movs	r0, #75	@ 0x4b
 80006f6:	f002 fe73 	bl	80033e0 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 80006fa:	79bb      	ldrb	r3, [r7, #6]
 80006fc:	4619      	mov	r1, r3
 80006fe:	200a      	movs	r0, #10
 8000700:	f000 faa2 	bl	8000c48 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 8000704:	2103      	movs	r1, #3
 8000706:	480f      	ldr	r0, [pc, #60]	@ (8000744 <EXTI15_10_IRQHandler+0x108>)
 8000708:	f003 fb66 	bl	8003dd8 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 800070c:	2028      	movs	r0, #40	@ 0x28
 800070e:	f003 fb54 	bl	8003dba <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000712:	2028      	movs	r0, #40	@ 0x28
 8000714:	f003 fb29 	bl	8003d6a <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000718:	797b      	ldrb	r3, [r7, #5]
 800071a:	4619      	mov	r1, r3
 800071c:	200b      	movs	r0, #11
 800071e:	f000 fa93 	bl	8000c48 <WriteDataToTouchModule>

}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200000b0 	.word	0x200000b0
 8000730:	200000ac 	.word	0x200000ac
 8000734:	08008c2c 	.word	0x08008c2c
 8000738:	2000009c 	.word	0x2000009c
 800073c:	08008c38 	.word	0x08008c38
 8000740:	08008c4c 	.word	0x08008c4c
 8000744:	200000a4 	.word	0x200000a4

08000748 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08c      	sub	sp, #48	@ 0x30
 800074c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
 8000752:	4b5a      	ldr	r3, [pc, #360]	@ (80008bc <LCD_GPIO_Init+0x174>)
 8000754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000756:	4a59      	ldr	r2, [pc, #356]	@ (80008bc <LCD_GPIO_Init+0x174>)
 8000758:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800075c:	6453      	str	r3, [r2, #68]	@ 0x44
 800075e:	4b57      	ldr	r3, [pc, #348]	@ (80008bc <LCD_GPIO_Init+0x174>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000762:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000766:	61bb      	str	r3, [r7, #24]
 8000768:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
 800076e:	4b53      	ldr	r3, [pc, #332]	@ (80008bc <LCD_GPIO_Init+0x174>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a52      	ldr	r2, [pc, #328]	@ (80008bc <LCD_GPIO_Init+0x174>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b50      	ldr	r3, [pc, #320]	@ (80008bc <LCD_GPIO_Init+0x174>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	617b      	str	r3, [r7, #20]
 8000784:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	613b      	str	r3, [r7, #16]
 800078a:	4b4c      	ldr	r3, [pc, #304]	@ (80008bc <LCD_GPIO_Init+0x174>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a4b      	ldr	r2, [pc, #300]	@ (80008bc <LCD_GPIO_Init+0x174>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b49      	ldr	r3, [pc, #292]	@ (80008bc <LCD_GPIO_Init+0x174>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	613b      	str	r3, [r7, #16]
 80007a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	4b45      	ldr	r3, [pc, #276]	@ (80008bc <LCD_GPIO_Init+0x174>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a44      	ldr	r2, [pc, #272]	@ (80008bc <LCD_GPIO_Init+0x174>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b42      	ldr	r3, [pc, #264]	@ (80008bc <LCD_GPIO_Init+0x174>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
 80007c2:	4b3e      	ldr	r3, [pc, #248]	@ (80008bc <LCD_GPIO_Init+0x174>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a3d      	ldr	r2, [pc, #244]	@ (80008bc <LCD_GPIO_Init+0x174>)
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b3b      	ldr	r3, [pc, #236]	@ (80008bc <LCD_GPIO_Init+0x174>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b37      	ldr	r3, [pc, #220]	@ (80008bc <LCD_GPIO_Init+0x174>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a36      	ldr	r2, [pc, #216]	@ (80008bc <LCD_GPIO_Init+0x174>)
 80007e4:	f043 0320 	orr.w	r3, r3, #32
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b34      	ldr	r3, [pc, #208]	@ (80008bc <LCD_GPIO_Init+0x174>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0320 	and.w	r3, r3, #32
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b30      	ldr	r3, [pc, #192]	@ (80008bc <LCD_GPIO_Init+0x174>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a2f      	ldr	r2, [pc, #188]	@ (80008bc <LCD_GPIO_Init+0x174>)
 8000800:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b2d      	ldr	r3, [pc, #180]	@ (80008bc <LCD_GPIO_Init+0x174>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000812:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000816:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000818:	2302      	movs	r3, #2
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000820:	2302      	movs	r3, #2
 8000822:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000824:	230e      	movs	r3, #14
 8000826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4619      	mov	r1, r3
 800082e:	4824      	ldr	r0, [pc, #144]	@ (80008c0 <LCD_GPIO_Init+0x178>)
 8000830:	f003 faea 	bl	8003e08 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000834:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000838:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	4619      	mov	r1, r3
 8000840:	4820      	ldr	r0, [pc, #128]	@ (80008c4 <LCD_GPIO_Init+0x17c>)
 8000842:	f003 fae1 	bl	8003e08 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000846:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800084a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800084c:	f107 031c 	add.w	r3, r7, #28
 8000850:	4619      	mov	r1, r3
 8000852:	481d      	ldr	r0, [pc, #116]	@ (80008c8 <LCD_GPIO_Init+0x180>)
 8000854:	f003 fad8 	bl	8003e08 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000858:	2348      	movs	r3, #72	@ 0x48
 800085a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	481a      	ldr	r0, [pc, #104]	@ (80008cc <LCD_GPIO_Init+0x184>)
 8000864:	f003 fad0 	bl	8003e08 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000868:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800086c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	4816      	ldr	r0, [pc, #88]	@ (80008d0 <LCD_GPIO_Init+0x188>)
 8000876:	f003 fac7 	bl	8003e08 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800087a:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 800087e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4813      	ldr	r0, [pc, #76]	@ (80008d4 <LCD_GPIO_Init+0x18c>)
 8000888:	f003 fabe 	bl	8003e08 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 800088c:	2303      	movs	r3, #3
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000890:	2309      	movs	r3, #9
 8000892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	480a      	ldr	r0, [pc, #40]	@ (80008c4 <LCD_GPIO_Init+0x17c>)
 800089c:	f003 fab4 	bl	8003e08 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80008a0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4809      	ldr	r0, [pc, #36]	@ (80008d4 <LCD_GPIO_Init+0x18c>)
 80008ae:	f003 faab 	bl	8003e08 <HAL_GPIO_Init>
}
 80008b2:	bf00      	nop
 80008b4:	3730      	adds	r7, #48	@ 0x30
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40020000 	.word	0x40020000
 80008c4:	40020400 	.word	0x40020400
 80008c8:	40020800 	.word	0x40020800
 80008cc:	40020c00 	.word	0x40020c00
 80008d0:	40021400 	.word	0x40021400
 80008d4:	40021800 	.word	0x40021800

080008d8 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b090      	sub	sp, #64	@ 0x40
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80008e2:	2300      	movs	r3, #0
 80008e4:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80008e6:	23f0      	movs	r3, #240	@ 0xf0
 80008e8:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80008ee:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80008f2:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80008f4:	2302      	movs	r3, #2
 80008f6:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80008f8:	23ff      	movs	r3, #255	@ 0xff
 80008fa:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000900:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000904:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000906:	2305      	movs	r3, #5
 8000908:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d101      	bne.n	8000914 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000910:	4b0f      	ldr	r3, [pc, #60]	@ (8000950 <LTCD_Layer_Init+0x78>)
 8000912:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000914:	23f0      	movs	r3, #240	@ 0xf0
 8000916:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000918:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800091c:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000930:	79fa      	ldrb	r2, [r7, #7]
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	4619      	mov	r1, r3
 8000938:	4806      	ldr	r0, [pc, #24]	@ (8000954 <LTCD_Layer_Init+0x7c>)
 800093a:	f004 fef1 	bl	8005720 <HAL_LTDC_ConfigLayer>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000944:	f000 f956 	bl	8000bf4 <LCD_Error_Handler>
	}
}
 8000948:	bf00      	nop
 800094a:	3740      	adds	r7, #64	@ 0x40
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000190 	.word	0x20000190
 8000954:	200000b4 	.word	0x200000b4

08000958 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 800095c:	4b2a      	ldr	r3, [pc, #168]	@ (8000a08 <LTCD__Init+0xb0>)
 800095e:	4a2b      	ldr	r2, [pc, #172]	@ (8000a0c <LTCD__Init+0xb4>)
 8000960:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000962:	4b29      	ldr	r3, [pc, #164]	@ (8000a08 <LTCD__Init+0xb0>)
 8000964:	2209      	movs	r2, #9
 8000966:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000968:	4b27      	ldr	r3, [pc, #156]	@ (8000a08 <LTCD__Init+0xb0>)
 800096a:	2201      	movs	r2, #1
 800096c:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 800096e:	4b26      	ldr	r3, [pc, #152]	@ (8000a08 <LTCD__Init+0xb0>)
 8000970:	221d      	movs	r2, #29
 8000972:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000974:	4b24      	ldr	r3, [pc, #144]	@ (8000a08 <LTCD__Init+0xb0>)
 8000976:	2203      	movs	r2, #3
 8000978:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800097a:	4b23      	ldr	r3, [pc, #140]	@ (8000a08 <LTCD__Init+0xb0>)
 800097c:	f240 120d 	movw	r2, #269	@ 0x10d
 8000980:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000982:	4b21      	ldr	r3, [pc, #132]	@ (8000a08 <LTCD__Init+0xb0>)
 8000984:	f240 1243 	movw	r2, #323	@ 0x143
 8000988:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800098a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a08 <LTCD__Init+0xb0>)
 800098c:	f240 1217 	movw	r2, #279	@ 0x117
 8000990:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000992:	4b1d      	ldr	r3, [pc, #116]	@ (8000a08 <LTCD__Init+0xb0>)
 8000994:	f240 1247 	movw	r2, #327	@ 0x147
 8000998:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800099a:	4b1b      	ldr	r3, [pc, #108]	@ (8000a08 <LTCD__Init+0xb0>)
 800099c:	2200      	movs	r2, #0
 800099e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80009a2:	4b19      	ldr	r3, [pc, #100]	@ (8000a08 <LTCD__Init+0xb0>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80009aa:	4b17      	ldr	r3, [pc, #92]	@ (8000a08 <LTCD__Init+0xb0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80009b2:	4b17      	ldr	r3, [pc, #92]	@ (8000a10 <LTCD__Init+0xb8>)
 80009b4:	2208      	movs	r2, #8
 80009b6:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80009b8:	4b15      	ldr	r3, [pc, #84]	@ (8000a10 <LTCD__Init+0xb8>)
 80009ba:	22c0      	movs	r2, #192	@ 0xc0
 80009bc:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80009be:	4b14      	ldr	r3, [pc, #80]	@ (8000a10 <LTCD__Init+0xb8>)
 80009c0:	2204      	movs	r2, #4
 80009c2:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80009c4:	4b12      	ldr	r3, [pc, #72]	@ (8000a10 <LTCD__Init+0xb8>)
 80009c6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80009ca:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80009cc:	4810      	ldr	r0, [pc, #64]	@ (8000a10 <LTCD__Init+0xb8>)
 80009ce:	f005 fd01 	bl	80063d4 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80009d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000a08 <LTCD__Init+0xb0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80009d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <LTCD__Init+0xb0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80009de:	4b0a      	ldr	r3, [pc, #40]	@ (8000a08 <LTCD__Init+0xb0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80009e4:	4b08      	ldr	r3, [pc, #32]	@ (8000a08 <LTCD__Init+0xb0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80009ea:	f7ff fead 	bl	8000748 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80009ee:	4806      	ldr	r0, [pc, #24]	@ (8000a08 <LTCD__Init+0xb0>)
 80009f0:	f004 fdc6 	bl	8005580 <HAL_LTDC_Init>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80009fa:	f000 f8fb 	bl	8000bf4 <LCD_Error_Handler>
	 }

	ili9341_Init();
 80009fe:	f001 fa03 	bl	8001e08 <ili9341_Init>
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000b4 	.word	0x200000b4
 8000a0c:	40016800 	.word	0x40016800
 8000a10:	2000015c 	.word	0x2000015c

08000a14 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	80fb      	strh	r3, [r7, #6]
 8000a1e:	460b      	mov	r3, r1
 8000a20:	80bb      	strh	r3, [r7, #4]
 8000a22:	4613      	mov	r3, r2
 8000a24:	807b      	strh	r3, [r7, #2]
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000a26:	88ba      	ldrh	r2, [r7, #4]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	011b      	lsls	r3, r3, #4
 8000a2c:	1a9b      	subs	r3, r3, r2
 8000a2e:	011b      	lsls	r3, r3, #4
 8000a30:	461a      	mov	r2, r3
 8000a32:	88fb      	ldrh	r3, [r7, #6]
 8000a34:	4413      	add	r3, r2
 8000a36:	4905      	ldr	r1, [pc, #20]	@ (8000a4c <LCD_Draw_Pixel+0x38>)
 8000a38:	887a      	ldrh	r2, [r7, #2]
 8000a3a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000190 	.word	0x20000190

08000a50 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	460a      	mov	r2, r1
 8000a5a:	71fb      	strb	r3, [r7, #7]
 8000a5c:	4613      	mov	r3, r2
 8000a5e:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d10e      	bne.n	8000a84 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	e007      	b.n	8000a7c <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000a6c:	4908      	ldr	r1, [pc, #32]	@ (8000a90 <LCD_Clear+0x40>)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	88ba      	ldrh	r2, [r7, #4]
 8000a72:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000a82:	d3f3      	bcc.n	8000a6c <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	20000190 	.word	0x20000190

08000a94 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000a9e:	4a04      	ldr	r2, [pc, #16]	@ (8000ab0 <LCD_SetTextColor+0x1c>)
 8000aa0:	88fb      	ldrh	r3, [r7, #6]
 8000aa2:	8013      	strh	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	20000000 	.word	0x20000000

08000ab4 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000abc:	4a04      	ldr	r2, [pc, #16]	@ (8000ad0 <LCD_SetFont+0x1c>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6013      	str	r3, [r2, #0]
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	2000018c 	.word	0x2000018c

08000ad4 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	603a      	str	r2, [r7, #0]
 8000ade:	80fb      	strh	r3, [r7, #6]
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	e04c      	b.n	8000b8c <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	e03f      	b.n	8000b78 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	683a      	ldr	r2, [r7, #0]
 8000afe:	4413      	add	r3, r2
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	4619      	mov	r1, r3
 8000b04:	4b27      	ldr	r3, [pc, #156]	@ (8000ba4 <LCD_Draw_Char+0xd0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	889b      	ldrh	r3, [r3, #4]
 8000b0a:	4a27      	ldr	r2, [pc, #156]	@ (8000ba8 <LCD_Draw_Char+0xd4>)
 8000b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b10:	08db      	lsrs	r3, r3, #3
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	00db      	lsls	r3, r3, #3
 8000b16:	2280      	movs	r2, #128	@ 0x80
 8000b18:	409a      	lsls	r2, r3
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	fa42 f303 	asr.w	r3, r2, r3
 8000b20:	400b      	ands	r3, r1
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d104      	bne.n	8000b30 <LCD_Draw_Char+0x5c>
 8000b26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba4 <LCD_Draw_Char+0xd0>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	889b      	ldrh	r3, [r3, #4]
 8000b2c:	2b0c      	cmp	r3, #12
 8000b2e:	d920      	bls.n	8000b72 <LCD_Draw_Char+0x9e>
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	683a      	ldr	r2, [r7, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	881b      	ldrh	r3, [r3, #0]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	fa42 f303 	asr.w	r3, r2, r3
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d104      	bne.n	8000b54 <LCD_Draw_Char+0x80>
 8000b4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <LCD_Draw_Char+0xd0>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	889b      	ldrh	r3, [r3, #4]
 8000b50:	2b0c      	cmp	r3, #12
 8000b52:	d80e      	bhi.n	8000b72 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	88fb      	ldrh	r3, [r7, #6]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	b298      	uxth	r0, r3
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	88bb      	ldrh	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	4a10      	ldr	r2, [pc, #64]	@ (8000bac <LCD_Draw_Char+0xd8>)
 8000b6a:	8812      	ldrh	r2, [r2, #0]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f7ff ff51 	bl	8000a14 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	3301      	adds	r3, #1
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba4 <LCD_Draw_Char+0xd0>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	889b      	ldrh	r3, [r3, #4]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d3b8      	bcc.n	8000af8 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ba4 <LCD_Draw_Char+0xd0>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	88db      	ldrh	r3, [r3, #6]
 8000b92:	461a      	mov	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d3ab      	bcc.n	8000af2 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000b9a:	bf00      	nop
 8000b9c:	bf00      	nop
 8000b9e:	3710      	adds	r7, #16
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	2000018c 	.word	0x2000018c
 8000ba8:	aaaaaaab 	.word	0xaaaaaaab
 8000bac:	20000000 	.word	0x20000000

08000bb0 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	80fb      	strh	r3, [r7, #6]
 8000bba:	460b      	mov	r3, r1
 8000bbc:	80bb      	strh	r3, [r7, #4]
 8000bbe:	4613      	mov	r3, r2
 8000bc0:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000bc2:	78fb      	ldrb	r3, [r7, #3]
 8000bc4:	3b20      	subs	r3, #32
 8000bc6:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000bc8:	4b09      	ldr	r3, [pc, #36]	@ (8000bf0 <LCD_DisplayChar+0x40>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	681a      	ldr	r2, [r3, #0]
 8000bce:	78fb      	ldrb	r3, [r7, #3]
 8000bd0:	4907      	ldr	r1, [pc, #28]	@ (8000bf0 <LCD_DisplayChar+0x40>)
 8000bd2:	6809      	ldr	r1, [r1, #0]
 8000bd4:	88c9      	ldrh	r1, [r1, #6]
 8000bd6:	fb01 f303 	mul.w	r3, r1, r3
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	441a      	add	r2, r3
 8000bde:	88b9      	ldrh	r1, [r7, #4]
 8000be0:	88fb      	ldrh	r3, [r7, #6]
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ff76 	bl	8000ad4 <LCD_Draw_Char>
}
 8000be8:	bf00      	nop
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	2000018c 	.word	0x2000018c

08000bf4 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf8:	b672      	cpsid	i
}
 8000bfa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <LCD_Error_Handler+0x8>

08000c00 <InitializeLCDTouch>:
// Touch Functionality   //



void InitializeLCDTouch(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000c04:	f002 fb14 	bl	8003230 <STMPE811_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d001      	beq.n	8000c12 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000c0e:	bf00      	nop
 8000c10:	e7fd      	b.n	8000c0e <InitializeLCDTouch+0xe>
  }
}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f002 fbf0 	bl	8003404 <STMPE811_DetermineTouchPosition>
}
 8000c24:	bf00      	nop
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f002 fbc0 	bl	80033be <STMPE811_Read>
 8000c3e:	4603      	mov	r3, r0
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	460a      	mov	r2, r1
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	4613      	mov	r3, r2
 8000c56:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8000c58:	79ba      	ldrb	r2, [r7, #6]
 8000c5a:	79fb      	ldrb	r3, [r7, #7]
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f002 fbbe 	bl	80033e0 <STMPE811_Write>
}
 8000c64:	bf00      	nop
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <START_SCREEN>:

static Object object;
static uint8_t dummyTable[ROWS][COLS];
static uint32_t randomNumber;

void START_SCREEN(void){
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
#if MATRIX_LCD == 1
	LCD_Clear(0,LCD_COLOR_BLUE);
 8000c70:	211f      	movs	r1, #31
 8000c72:	2000      	movs	r0, #0
 8000c74:	f7ff feec 	bl	8000a50 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000c78:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000c7c:	f7ff ff0a 	bl	8000a94 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000c80:	483e      	ldr	r0, [pc, #248]	@ (8000d7c <START_SCREEN+0x110>)
 8000c82:	f7ff ff17 	bl	8000ab4 <LCD_SetFont>
	// TETRIS
	LCD_DisplayChar(70,110,'T');
 8000c86:	2254      	movs	r2, #84	@ 0x54
 8000c88:	216e      	movs	r1, #110	@ 0x6e
 8000c8a:	2046      	movs	r0, #70	@ 0x46
 8000c8c:	f7ff ff90 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(90,110,'E');
 8000c90:	2245      	movs	r2, #69	@ 0x45
 8000c92:	216e      	movs	r1, #110	@ 0x6e
 8000c94:	205a      	movs	r0, #90	@ 0x5a
 8000c96:	f7ff ff8b 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(110,110,'T');
 8000c9a:	2254      	movs	r2, #84	@ 0x54
 8000c9c:	216e      	movs	r1, #110	@ 0x6e
 8000c9e:	206e      	movs	r0, #110	@ 0x6e
 8000ca0:	f7ff ff86 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(130,110,'R');
 8000ca4:	2252      	movs	r2, #82	@ 0x52
 8000ca6:	216e      	movs	r1, #110	@ 0x6e
 8000ca8:	2082      	movs	r0, #130	@ 0x82
 8000caa:	f7ff ff81 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(150,110,'I');
 8000cae:	2249      	movs	r2, #73	@ 0x49
 8000cb0:	216e      	movs	r1, #110	@ 0x6e
 8000cb2:	2096      	movs	r0, #150	@ 0x96
 8000cb4:	f7ff ff7c 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(170,110,'S');
 8000cb8:	2253      	movs	r2, #83	@ 0x53
 8000cba:	216e      	movs	r1, #110	@ 0x6e
 8000cbc:	20aa      	movs	r0, #170	@ 0xaa
 8000cbe:	f7ff ff77 	bl	8000bb0 <LCD_DisplayChar>
	// PRESS
	LCD_DisplayChar(80,130,'P');
 8000cc2:	2250      	movs	r2, #80	@ 0x50
 8000cc4:	2182      	movs	r1, #130	@ 0x82
 8000cc6:	2050      	movs	r0, #80	@ 0x50
 8000cc8:	f7ff ff72 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(100,130,'R');
 8000ccc:	2252      	movs	r2, #82	@ 0x52
 8000cce:	2182      	movs	r1, #130	@ 0x82
 8000cd0:	2064      	movs	r0, #100	@ 0x64
 8000cd2:	f7ff ff6d 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(120,130,'E');
 8000cd6:	2245      	movs	r2, #69	@ 0x45
 8000cd8:	2182      	movs	r1, #130	@ 0x82
 8000cda:	2078      	movs	r0, #120	@ 0x78
 8000cdc:	f7ff ff68 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(140,130,'S');
 8000ce0:	2253      	movs	r2, #83	@ 0x53
 8000ce2:	2182      	movs	r1, #130	@ 0x82
 8000ce4:	208c      	movs	r0, #140	@ 0x8c
 8000ce6:	f7ff ff63 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(160,130,'S');
 8000cea:	2253      	movs	r2, #83	@ 0x53
 8000cec:	2182      	movs	r1, #130	@ 0x82
 8000cee:	20a0      	movs	r0, #160	@ 0xa0
 8000cf0:	f7ff ff5e 	bl	8000bb0 <LCD_DisplayChar>
	// BUTTON
	LCD_DisplayChar(70,150,'B');
 8000cf4:	2242      	movs	r2, #66	@ 0x42
 8000cf6:	2196      	movs	r1, #150	@ 0x96
 8000cf8:	2046      	movs	r0, #70	@ 0x46
 8000cfa:	f7ff ff59 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(90,150,'U');
 8000cfe:	2255      	movs	r2, #85	@ 0x55
 8000d00:	2196      	movs	r1, #150	@ 0x96
 8000d02:	205a      	movs	r0, #90	@ 0x5a
 8000d04:	f7ff ff54 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(110,150,'T');
 8000d08:	2254      	movs	r2, #84	@ 0x54
 8000d0a:	2196      	movs	r1, #150	@ 0x96
 8000d0c:	206e      	movs	r0, #110	@ 0x6e
 8000d0e:	f7ff ff4f 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(130,150,'T');
 8000d12:	2254      	movs	r2, #84	@ 0x54
 8000d14:	2196      	movs	r1, #150	@ 0x96
 8000d16:	2082      	movs	r0, #130	@ 0x82
 8000d18:	f7ff ff4a 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(150,150,'O');
 8000d1c:	224f      	movs	r2, #79	@ 0x4f
 8000d1e:	2196      	movs	r1, #150	@ 0x96
 8000d20:	2096      	movs	r0, #150	@ 0x96
 8000d22:	f7ff ff45 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(170,150,'N');
 8000d26:	224e      	movs	r2, #78	@ 0x4e
 8000d28:	2196      	movs	r1, #150	@ 0x96
 8000d2a:	20aa      	movs	r0, #170	@ 0xaa
 8000d2c:	f7ff ff40 	bl	8000bb0 <LCD_DisplayChar>
	// TO
	LCD_DisplayChar(110,170,'T');
 8000d30:	2254      	movs	r2, #84	@ 0x54
 8000d32:	21aa      	movs	r1, #170	@ 0xaa
 8000d34:	206e      	movs	r0, #110	@ 0x6e
 8000d36:	f7ff ff3b 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(130,170,'O');
 8000d3a:	224f      	movs	r2, #79	@ 0x4f
 8000d3c:	21aa      	movs	r1, #170	@ 0xaa
 8000d3e:	2082      	movs	r0, #130	@ 0x82
 8000d40:	f7ff ff36 	bl	8000bb0 <LCD_DisplayChar>
	// START
	LCD_DisplayChar(80,190,'S');
 8000d44:	2253      	movs	r2, #83	@ 0x53
 8000d46:	21be      	movs	r1, #190	@ 0xbe
 8000d48:	2050      	movs	r0, #80	@ 0x50
 8000d4a:	f7ff ff31 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(100,190,'T');
 8000d4e:	2254      	movs	r2, #84	@ 0x54
 8000d50:	21be      	movs	r1, #190	@ 0xbe
 8000d52:	2064      	movs	r0, #100	@ 0x64
 8000d54:	f7ff ff2c 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(120,190,'A');
 8000d58:	2241      	movs	r2, #65	@ 0x41
 8000d5a:	21be      	movs	r1, #190	@ 0xbe
 8000d5c:	2078      	movs	r0, #120	@ 0x78
 8000d5e:	f7ff ff27 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(140,190,'R');
 8000d62:	2252      	movs	r2, #82	@ 0x52
 8000d64:	21be      	movs	r1, #190	@ 0xbe
 8000d66:	208c      	movs	r0, #140	@ 0x8c
 8000d68:	f7ff ff22 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(160,190,'T');
 8000d6c:	2254      	movs	r2, #84	@ 0x54
 8000d6e:	21be      	movs	r1, #190	@ 0xbe
 8000d70:	20a0      	movs	r0, #160	@ 0xa0
 8000d72:	f7ff ff1d 	bl	8000bb0 <LCD_DisplayChar>
	            printf("%c", matrix_enc[i][j]);
	        }
	        printf("\n");
	    }
#endif
}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000004 	.word	0x20000004

08000d80 <GAME_OVER>:

void GAME_OVER(uint32_t total_time) { // code for displaying game over
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b086      	sub	sp, #24
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
#if MATRIX_LCD == 1
	LCD_Clear(0,LCD_COLOR_BLUE);
 8000d88:	211f      	movs	r1, #31
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f7ff fe60 	bl	8000a50 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000d90:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000d94:	f7ff fe7e 	bl	8000a94 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000d98:	484f      	ldr	r0, [pc, #316]	@ (8000ed8 <GAME_OVER+0x158>)
 8000d9a:	f7ff fe8b 	bl	8000ab4 <LCD_SetFont>

	// GAME
	LCD_DisplayChar(90,100,'G');
 8000d9e:	2247      	movs	r2, #71	@ 0x47
 8000da0:	2164      	movs	r1, #100	@ 0x64
 8000da2:	205a      	movs	r0, #90	@ 0x5a
 8000da4:	f7ff ff04 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(110,100,'A');
 8000da8:	2241      	movs	r2, #65	@ 0x41
 8000daa:	2164      	movs	r1, #100	@ 0x64
 8000dac:	206e      	movs	r0, #110	@ 0x6e
 8000dae:	f7ff feff 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(130,100,'M');
 8000db2:	224d      	movs	r2, #77	@ 0x4d
 8000db4:	2164      	movs	r1, #100	@ 0x64
 8000db6:	2082      	movs	r0, #130	@ 0x82
 8000db8:	f7ff fefa 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(150,100,'E');
 8000dbc:	2245      	movs	r2, #69	@ 0x45
 8000dbe:	2164      	movs	r1, #100	@ 0x64
 8000dc0:	2096      	movs	r0, #150	@ 0x96
 8000dc2:	f7ff fef5 	bl	8000bb0 <LCD_DisplayChar>
	// OVER
	LCD_DisplayChar(90,130,'O');
 8000dc6:	224f      	movs	r2, #79	@ 0x4f
 8000dc8:	2182      	movs	r1, #130	@ 0x82
 8000dca:	205a      	movs	r0, #90	@ 0x5a
 8000dcc:	f7ff fef0 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(110,130,'V');
 8000dd0:	2256      	movs	r2, #86	@ 0x56
 8000dd2:	2182      	movs	r1, #130	@ 0x82
 8000dd4:	206e      	movs	r0, #110	@ 0x6e
 8000dd6:	f7ff feeb 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(130,130,'E');
 8000dda:	2245      	movs	r2, #69	@ 0x45
 8000ddc:	2182      	movs	r1, #130	@ 0x82
 8000dde:	2082      	movs	r0, #130	@ 0x82
 8000de0:	f7ff fee6 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(150,130,'R');
 8000de4:	2252      	movs	r2, #82	@ 0x52
 8000de6:	2182      	movs	r1, #130	@ 0x82
 8000de8:	2096      	movs	r0, #150	@ 0x96
 8000dea:	f7ff fee1 	bl	8000bb0 <LCD_DisplayChar>
	// TIME:
	LCD_DisplayChar(85,160,'T');
 8000dee:	2254      	movs	r2, #84	@ 0x54
 8000df0:	21a0      	movs	r1, #160	@ 0xa0
 8000df2:	2055      	movs	r0, #85	@ 0x55
 8000df4:	f7ff fedc 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(105,160,'I');
 8000df8:	2249      	movs	r2, #73	@ 0x49
 8000dfa:	21a0      	movs	r1, #160	@ 0xa0
 8000dfc:	2069      	movs	r0, #105	@ 0x69
 8000dfe:	f7ff fed7 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(125,160,'M');
 8000e02:	224d      	movs	r2, #77	@ 0x4d
 8000e04:	21a0      	movs	r1, #160	@ 0xa0
 8000e06:	207d      	movs	r0, #125	@ 0x7d
 8000e08:	f7ff fed2 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(145,160,'E');
 8000e0c:	2245      	movs	r2, #69	@ 0x45
 8000e0e:	21a0      	movs	r1, #160	@ 0xa0
 8000e10:	2091      	movs	r0, #145	@ 0x91
 8000e12:	f7ff fecd 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(165,160,':');
 8000e16:	223a      	movs	r2, #58	@ 0x3a
 8000e18:	21a0      	movs	r1, #160	@ 0xa0
 8000e1a:	20a5      	movs	r0, #165	@ 0xa5
 8000e1c:	f7ff fec8 	bl	8000bb0 <LCD_DisplayChar>

	//Timer to keep tract
	// Format the total time (in minutes and seconds)
	uint32_t minutes = total_time / 60;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a2e      	ldr	r2, [pc, #184]	@ (8000edc <GAME_OVER+0x15c>)
 8000e24:	fba2 2303 	umull	r2, r3, r2, r3
 8000e28:	095b      	lsrs	r3, r3, #5
 8000e2a:	617b      	str	r3, [r7, #20]
	uint32_t seconds = total_time % 60;
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	4b2b      	ldr	r3, [pc, #172]	@ (8000edc <GAME_OVER+0x15c>)
 8000e30:	fba3 1302 	umull	r1, r3, r3, r2
 8000e34:	0959      	lsrs	r1, r3, #5
 8000e36:	460b      	mov	r3, r1
 8000e38:	011b      	lsls	r3, r3, #4
 8000e3a:	1a5b      	subs	r3, r3, r1
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	1ad3      	subs	r3, r2, r3
 8000e40:	613b      	str	r3, [r7, #16]

	char m1 = '0' + (minutes / 10);  // Tens place of minutes
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	4a26      	ldr	r2, [pc, #152]	@ (8000ee0 <GAME_OVER+0x160>)
 8000e46:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4a:	08db      	lsrs	r3, r3, #3
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	3330      	adds	r3, #48	@ 0x30
 8000e50:	73fb      	strb	r3, [r7, #15]
	char m2 = '0' + (minutes % 10);  // Units place of minutes
 8000e52:	6979      	ldr	r1, [r7, #20]
 8000e54:	4b22      	ldr	r3, [pc, #136]	@ (8000ee0 <GAME_OVER+0x160>)
 8000e56:	fba3 2301 	umull	r2, r3, r3, r1
 8000e5a:	08da      	lsrs	r2, r3, #3
 8000e5c:	4613      	mov	r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	4413      	add	r3, r2
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	1aca      	subs	r2, r1, r3
 8000e66:	b2d3      	uxtb	r3, r2
 8000e68:	3330      	adds	r3, #48	@ 0x30
 8000e6a:	73bb      	strb	r3, [r7, #14]
	char s1 = '0' + (seconds / 10);  // Tens place of seconds
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000ee0 <GAME_OVER+0x160>)
 8000e70:	fba2 2303 	umull	r2, r3, r2, r3
 8000e74:	08db      	lsrs	r3, r3, #3
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	3330      	adds	r3, #48	@ 0x30
 8000e7a:	737b      	strb	r3, [r7, #13]
	char s2 = '0' + (seconds % 10);  // Units place of seconds
 8000e7c:	6939      	ldr	r1, [r7, #16]
 8000e7e:	4b18      	ldr	r3, [pc, #96]	@ (8000ee0 <GAME_OVER+0x160>)
 8000e80:	fba3 2301 	umull	r2, r3, r3, r1
 8000e84:	08da      	lsrs	r2, r3, #3
 8000e86:	4613      	mov	r3, r2
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	1aca      	subs	r2, r1, r3
 8000e90:	b2d3      	uxtb	r3, r2
 8000e92:	3330      	adds	r3, #48	@ 0x30
 8000e94:	733b      	strb	r3, [r7, #12]

	LCD_DisplayChar(85,190,m1);
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	21be      	movs	r1, #190	@ 0xbe
 8000e9c:	2055      	movs	r0, #85	@ 0x55
 8000e9e:	f7ff fe87 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(105,190,m2);
 8000ea2:	7bbb      	ldrb	r3, [r7, #14]
 8000ea4:	461a      	mov	r2, r3
 8000ea6:	21be      	movs	r1, #190	@ 0xbe
 8000ea8:	2069      	movs	r0, #105	@ 0x69
 8000eaa:	f7ff fe81 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(125,190,':');
 8000eae:	223a      	movs	r2, #58	@ 0x3a
 8000eb0:	21be      	movs	r1, #190	@ 0xbe
 8000eb2:	207d      	movs	r0, #125	@ 0x7d
 8000eb4:	f7ff fe7c 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(145,190,s1);
 8000eb8:	7b7b      	ldrb	r3, [r7, #13]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	21be      	movs	r1, #190	@ 0xbe
 8000ebe:	2091      	movs	r0, #145	@ 0x91
 8000ec0:	f7ff fe76 	bl	8000bb0 <LCD_DisplayChar>
	LCD_DisplayChar(165,190,s2);
 8000ec4:	7b3b      	ldrb	r3, [r7, #12]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	21be      	movs	r1, #190	@ 0xbe
 8000eca:	20a5      	movs	r0, #165	@ 0xa5
 8000ecc:	f7ff fe70 	bl	8000bb0 <LCD_DisplayChar>
				printf("%c", matrix_enc[i][j]);
			}
			printf("\n");
		}
#endif
}
 8000ed0:	bf00      	nop
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000004 	.word	0x20000004
 8000edc:	88888889 	.word	0x88888889
 8000ee0:	cccccccd 	.word	0xcccccccd

08000ee4 <RND_NUM>:

void RND_NUM(void) { // issue here
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
	uint32_t RND;
	RNG_HandleTypeDef hrng;
	hrng.Instance = RNG;
 8000eea:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <RND_NUM+0x60>)
 8000eec:	607b      	str	r3, [r7, #4]

	if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000eee:	1d3b      	adds	r3, r7, #4
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f005 fc2f 	bl	8006754 <HAL_RNG_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <RND_NUM+0x1c>
	{
		while(1);
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <RND_NUM+0x18>
	}
	  /* USER CODE BEGIN RNG_Init 2 */
    if (HAL_RNG_GenerateRandomNumber(&hrng, &RND) != HAL_OK) {
 8000f00:	f107 0214 	add.w	r2, r7, #20
 8000f04:	1d3b      	adds	r3, r7, #4
 8000f06:	4611      	mov	r1, r2
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f005 fc4d 	bl	80067a8 <HAL_RNG_GenerateRandomNumber>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d002      	beq.n	8000f1a <RND_NUM+0x36>
    	// Handle the error (e.g., infinite loop or error logging)
	    printf("Error Generating Random Number");
 8000f14:	480c      	ldr	r0, [pc, #48]	@ (8000f48 <RND_NUM+0x64>)
 8000f16:	f006 ffb3 	bl	8007e80 <iprintf>
	}
	   RND = RND % 7;  // Constrain the result to 0-6
 8000f1a:	6979      	ldr	r1, [r7, #20]
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f4c <RND_NUM+0x68>)
 8000f1e:	fba3 2301 	umull	r2, r3, r3, r1
 8000f22:	1aca      	subs	r2, r1, r3
 8000f24:	0852      	lsrs	r2, r2, #1
 8000f26:	4413      	add	r3, r2
 8000f28:	089a      	lsrs	r2, r3, #2
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	1a9b      	subs	r3, r3, r2
 8000f30:	1aca      	subs	r2, r1, r3
 8000f32:	617a      	str	r2, [r7, #20]
	   randomNumber = RND;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	4a06      	ldr	r2, [pc, #24]	@ (8000f50 <RND_NUM+0x6c>)
 8000f38:	6013      	str	r3, [r2, #0]
}
 8000f3a:	bf00      	nop
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	50060800 	.word	0x50060800
 8000f48:	08008c5c 	.word	0x08008c5c
 8000f4c:	24924925 	.word	0x24924925
 8000f50:	20025a20 	.word	0x20025a20

08000f54 <check_State>:

uint8_t check_State(void) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	if(     (object.originbit.x <= 0) || (object.originbit.x >= 9) ||
 8000f58:	4b3c      	ldr	r3, [pc, #240]	@ (800104c <check_State+0xf8>)
 8000f5a:	789b      	ldrb	r3, [r3, #2]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d01b      	beq.n	8000f98 <check_State+0x44>
 8000f60:	4b3a      	ldr	r3, [pc, #232]	@ (800104c <check_State+0xf8>)
 8000f62:	789b      	ldrb	r3, [r3, #2]
 8000f64:	2b08      	cmp	r3, #8
 8000f66:	d817      	bhi.n	8000f98 <check_State+0x44>
	   (object.suboriginbit_0.x <= 0) || (object.suboriginbit_0.x >= 9) ||
 8000f68:	4b38      	ldr	r3, [pc, #224]	@ (800104c <check_State+0xf8>)
 8000f6a:	791b      	ldrb	r3, [r3, #4]
	if(     (object.originbit.x <= 0) || (object.originbit.x >= 9) ||
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d013      	beq.n	8000f98 <check_State+0x44>
	   (object.suboriginbit_0.x <= 0) || (object.suboriginbit_0.x >= 9) ||
 8000f70:	4b36      	ldr	r3, [pc, #216]	@ (800104c <check_State+0xf8>)
 8000f72:	791b      	ldrb	r3, [r3, #4]
 8000f74:	2b08      	cmp	r3, #8
 8000f76:	d80f      	bhi.n	8000f98 <check_State+0x44>
	   (object.suboriginbit_1.x <= 0) || (object.suboriginbit_1.x >= 9) ||
 8000f78:	4b34      	ldr	r3, [pc, #208]	@ (800104c <check_State+0xf8>)
 8000f7a:	799b      	ldrb	r3, [r3, #6]
	   (object.suboriginbit_0.x <= 0) || (object.suboriginbit_0.x >= 9) ||
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <check_State+0x44>
	   (object.suboriginbit_1.x <= 0) || (object.suboriginbit_1.x >= 9) ||
 8000f80:	4b32      	ldr	r3, [pc, #200]	@ (800104c <check_State+0xf8>)
 8000f82:	799b      	ldrb	r3, [r3, #6]
 8000f84:	2b08      	cmp	r3, #8
 8000f86:	d807      	bhi.n	8000f98 <check_State+0x44>
	   (object.suboriginbit_2.x <= 0) || (object.suboriginbit_2.x >= 9) )
 8000f88:	4b30      	ldr	r3, [pc, #192]	@ (800104c <check_State+0xf8>)
 8000f8a:	7a1b      	ldrb	r3, [r3, #8]
	   (object.suboriginbit_1.x <= 0) || (object.suboriginbit_1.x >= 9) ||
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <check_State+0x44>
	   (object.suboriginbit_2.x <= 0) || (object.suboriginbit_2.x >= 9) )
 8000f90:	4b2e      	ldr	r3, [pc, #184]	@ (800104c <check_State+0xf8>)
 8000f92:	7a1b      	ldrb	r3, [r3, #8]
 8000f94:	2b08      	cmp	r3, #8
 8000f96:	d901      	bls.n	8000f9c <check_State+0x48>
	{
		return 0; // This means object has gone outside of the bounds
 8000f98:	2300      	movs	r3, #0
 8000f9a:	e054      	b.n	8001046 <check_State+0xf2>
	} else if( (object.originbit.y <= 0)      || (object.suboriginbit_0.y <= 0) ||
 8000f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800104c <check_State+0xf8>)
 8000f9e:	78db      	ldrb	r3, [r3, #3]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d04b      	beq.n	800103c <check_State+0xe8>
 8000fa4:	4b29      	ldr	r3, [pc, #164]	@ (800104c <check_State+0xf8>)
 8000fa6:	795b      	ldrb	r3, [r3, #5]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d047      	beq.n	800103c <check_State+0xe8>
			   (object.suboriginbit_1.y <= 0) || (object.suboriginbit_2.y <= 0) ||
 8000fac:	4b27      	ldr	r3, [pc, #156]	@ (800104c <check_State+0xf8>)
 8000fae:	79db      	ldrb	r3, [r3, #7]
	} else if( (object.originbit.y <= 0)      || (object.suboriginbit_0.y <= 0) ||
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d043      	beq.n	800103c <check_State+0xe8>
			   (object.suboriginbit_1.y <= 0) || (object.suboriginbit_2.y <= 0) ||
 8000fb4:	4b25      	ldr	r3, [pc, #148]	@ (800104c <check_State+0xf8>)
 8000fb6:	7a5b      	ldrb	r3, [r3, #9]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d03f      	beq.n	800103c <check_State+0xe8>
			   (dummyTable[object.originbit.y - 1][object.originbit.x] == 1) ||
 8000fbc:	4b23      	ldr	r3, [pc, #140]	@ (800104c <check_State+0xf8>)
 8000fbe:	78db      	ldrb	r3, [r3, #3]
 8000fc0:	1e5a      	subs	r2, r3, #1
 8000fc2:	4b22      	ldr	r3, [pc, #136]	@ (800104c <check_State+0xf8>)
 8000fc4:	789b      	ldrb	r3, [r3, #2]
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	4921      	ldr	r1, [pc, #132]	@ (8001050 <check_State+0xfc>)
 8000fca:	4613      	mov	r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	4413      	add	r3, r2
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	440b      	add	r3, r1
 8000fd4:	4403      	add	r3, r0
 8000fd6:	781b      	ldrb	r3, [r3, #0]
			   (object.suboriginbit_1.y <= 0) || (object.suboriginbit_2.y <= 0) ||
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d02f      	beq.n	800103c <check_State+0xe8>
			   (dummyTable[object.suboriginbit_0.y - 1][object.suboriginbit_0.x] == 1) ||
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800104c <check_State+0xf8>)
 8000fde:	795b      	ldrb	r3, [r3, #5]
 8000fe0:	1e5a      	subs	r2, r3, #1
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800104c <check_State+0xf8>)
 8000fe4:	791b      	ldrb	r3, [r3, #4]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	4919      	ldr	r1, [pc, #100]	@ (8001050 <check_State+0xfc>)
 8000fea:	4613      	mov	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4413      	add	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	440b      	add	r3, r1
 8000ff4:	4403      	add	r3, r0
 8000ff6:	781b      	ldrb	r3, [r3, #0]
			   (dummyTable[object.originbit.y - 1][object.originbit.x] == 1) ||
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d01f      	beq.n	800103c <check_State+0xe8>
			   (dummyTable[object.suboriginbit_1.y - 1][object.suboriginbit_1.x] == 1) ||
 8000ffc:	4b13      	ldr	r3, [pc, #76]	@ (800104c <check_State+0xf8>)
 8000ffe:	79db      	ldrb	r3, [r3, #7]
 8001000:	1e5a      	subs	r2, r3, #1
 8001002:	4b12      	ldr	r3, [pc, #72]	@ (800104c <check_State+0xf8>)
 8001004:	799b      	ldrb	r3, [r3, #6]
 8001006:	4618      	mov	r0, r3
 8001008:	4911      	ldr	r1, [pc, #68]	@ (8001050 <check_State+0xfc>)
 800100a:	4613      	mov	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	440b      	add	r3, r1
 8001014:	4403      	add	r3, r0
 8001016:	781b      	ldrb	r3, [r3, #0]
			   (dummyTable[object.suboriginbit_0.y - 1][object.suboriginbit_0.x] == 1) ||
 8001018:	2b01      	cmp	r3, #1
 800101a:	d00f      	beq.n	800103c <check_State+0xe8>
			   (dummyTable[object.suboriginbit_2.y - 1][object.suboriginbit_2.x] == 1))
 800101c:	4b0b      	ldr	r3, [pc, #44]	@ (800104c <check_State+0xf8>)
 800101e:	7a5b      	ldrb	r3, [r3, #9]
 8001020:	1e5a      	subs	r2, r3, #1
 8001022:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <check_State+0xf8>)
 8001024:	7a1b      	ldrb	r3, [r3, #8]
 8001026:	4618      	mov	r0, r3
 8001028:	4909      	ldr	r1, [pc, #36]	@ (8001050 <check_State+0xfc>)
 800102a:	4613      	mov	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4413      	add	r3, r2
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	440b      	add	r3, r1
 8001034:	4403      	add	r3, r0
 8001036:	781b      	ldrb	r3, [r3, #0]
			   (dummyTable[object.suboriginbit_1.y - 1][object.suboriginbit_1.x] == 1) ||
 8001038:	2b01      	cmp	r3, #1
 800103a:	d103      	bne.n	8001044 <check_State+0xf0>
	{
		// Place the object in the matrix, generate new object
		object_Select();
 800103c:	f000 f80a 	bl	8001054 <object_Select>
		return 1; // This means object has hit the bottom
 8001040:	2301      	movs	r3, #1
 8001042:	e000      	b.n	8001046 <check_State+0xf2>
	} else {
		return 2; // In case we want to see nothing can be done
 8001044:	2302      	movs	r3, #2
	}
}
 8001046:	4618      	mov	r0, r3
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20025990 	.word	0x20025990
 8001050:	2002599c 	.word	0x2002599c

08001054 <object_Select>:

void object_Select(void){
 8001054:	b580      	push	{r7, lr}
 8001056:	b096      	sub	sp, #88	@ 0x58
 8001058:	af00      	add	r7, sp, #0
	RND_NUM();
 800105a:	f7ff ff43 	bl	8000ee4 <RND_NUM>
	Matrix_clear();
 800105e:	f000 fdbf 	bl	8001be0 <Matrix_clear>
	switch(randomNumber) {
 8001062:	4b41      	ldr	r3, [pc, #260]	@ (8001168 <object_Select+0x114>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	2b06      	cmp	r3, #6
 8001068:	d877      	bhi.n	800115a <object_Select+0x106>
 800106a:	a201      	add	r2, pc, #4	@ (adr r2, 8001070 <object_Select+0x1c>)
 800106c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001070:	0800108d 	.word	0x0800108d
 8001074:	080010ab 	.word	0x080010ab
 8001078:	080010c9 	.word	0x080010c9
 800107c:	080010e7 	.word	0x080010e7
 8001080:	08001105 	.word	0x08001105
 8001084:	08001123 	.word	0x08001123
 8001088:	08001141 	.word	0x08001141
		case(ORICKY):
			Object Oricky = {
 800108c:	4a37      	ldr	r2, [pc, #220]	@ (800116c <object_Select+0x118>)
 800108e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001092:	ca07      	ldmia	r2, {r0, r1, r2}
 8001094:	c303      	stmia	r3!, {r0, r1}
 8001096:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 },     // 1 [1] 1
				.suboriginbit_0 = {0, 0}, 
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Oricky;
 8001098:	4b35      	ldr	r3, [pc, #212]	@ (8001170 <object_Select+0x11c>)
 800109a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800109e:	ca07      	ldmia	r2, {r0, r1, r2}
 80010a0:	c303      	stmia	r3!, {r0, r1}
 80010a2:	801a      	strh	r2, [r3, #0]
		    transform_rotation();
 80010a4:	f000 f8a6 	bl	80011f4 <transform_rotation>
			break;
 80010a8:	e057      	b.n	800115a <object_Select+0x106>

		case(BRICKY):
			Object Bricky = {
 80010aa:	4a32      	ldr	r2, [pc, #200]	@ (8001174 <object_Select+0x120>)
 80010ac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b2:	c303      	stmia	r3!, {r0, r1}
 80010b4:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 },     // 1 [1] 1
				.suboriginbit_0 = {0, 0}, 
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Bricky;
 80010b6:	4b2e      	ldr	r3, [pc, #184]	@ (8001170 <object_Select+0x11c>)
 80010b8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80010bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80010be:	c303      	stmia	r3!, {r0, r1}
 80010c0:	801a      	strh	r2, [r3, #0]
			transform_rotation();
 80010c2:	f000 f897 	bl	80011f4 <transform_rotation>
			break;
 80010c6:	e048      	b.n	800115a <object_Select+0x106>

		case(CLEVELAND):
			Object Cleveland = {
 80010c8:	4a2b      	ldr	r2, [pc, #172]	@ (8001178 <object_Select+0x124>)
 80010ca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80010ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80010d0:	c303      	stmia	r3!, {r0, r1}
 80010d2:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, 	  //    [1] 1
				.suboriginbit_0 = {0, 0},  
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Cleveland;
 80010d4:	4b26      	ldr	r3, [pc, #152]	@ (8001170 <object_Select+0x11c>)
 80010d6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80010da:	ca07      	ldmia	r2, {r0, r1, r2}
 80010dc:	c303      	stmia	r3!, {r0, r1}
 80010de:	801a      	strh	r2, [r3, #0]
		    transform_rotation();
 80010e0:	f000 f888 	bl	80011f4 <transform_rotation>
			break;
 80010e4:	e039      	b.n	800115a <object_Select+0x106>

		case(RHODE):
			Object Rhode = {
 80010e6:	4a25      	ldr	r2, [pc, #148]	@ (800117c <object_Select+0x128>)
 80010e8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80010ee:	c303      	stmia	r3!, {r0, r1}
 80010f0:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 },     //     1 [1]
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Rhode;
 80010f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001170 <object_Select+0x11c>)
 80010f4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80010f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80010fa:	c303      	stmia	r3!, {r0, r1}
 80010fc:	801a      	strh	r2, [r3, #0]
			transform_rotation();
 80010fe:	f000 f879 	bl	80011f4 <transform_rotation>
			break;
 8001102:	e02a      	b.n	800115a <object_Select+0x106>

		case(HERO):
			Object Hero = {
 8001104:	4a1e      	ldr	r2, [pc, #120]	@ (8001180 <object_Select+0x12c>)
 8001106:	f107 031c 	add.w	r3, r7, #28
 800110a:	ca07      	ldmia	r2, {r0, r1, r2}
 800110c:	c303      	stmia	r3!, {r0, r1}
 800110e:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, 			 //  1 1 [1] 1
				.suboriginbit_0 = {0, 0}, 
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Hero;
 8001110:	4b17      	ldr	r3, [pc, #92]	@ (8001170 <object_Select+0x11c>)
 8001112:	f107 021c 	add.w	r2, r7, #28
 8001116:	ca07      	ldmia	r2, {r0, r1, r2}
 8001118:	c303      	stmia	r3!, {r0, r1}
 800111a:	801a      	strh	r2, [r3, #0]
			transform_rotation();
 800111c:	f000 f86a 	bl	80011f4 <transform_rotation>
			break;
 8001120:	e01b      	b.n	800115a <object_Select+0x106>

		case(TEEWEE):
			Object Teewee = {
 8001122:	4a18      	ldr	r2, [pc, #96]	@ (8001184 <object_Select+0x130>)
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	ca07      	ldmia	r2, {r0, r1, r2}
 800112a:	c303      	stmia	r3!, {r0, r1}
 800112c:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, 			 	// 1 [1] 1
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Teewee;
 800112e:	4b10      	ldr	r3, [pc, #64]	@ (8001170 <object_Select+0x11c>)
 8001130:	f107 0210 	add.w	r2, r7, #16
 8001134:	ca07      	ldmia	r2, {r0, r1, r2}
 8001136:	c303      	stmia	r3!, {r0, r1}
 8001138:	801a      	strh	r2, [r3, #0]
			transform_rotation();
 800113a:	f000 f85b 	bl	80011f4 <transform_rotation>
			break;
 800113e:	e00c      	b.n	800115a <object_Select+0x106>

		case(SMASHBOY):
			Object Smashboy = {
 8001140:	4a11      	ldr	r2, [pc, #68]	@ (8001188 <object_Select+0x134>)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	ca07      	ldmia	r2, {r0, r1, r2}
 8001146:	c303      	stmia	r3!, {r0, r1}
 8001148:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, 			 	//[1] 1
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Smashboy;
 800114a:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <object_Select+0x11c>)
 800114c:	1d3a      	adds	r2, r7, #4
 800114e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001150:	c303      	stmia	r3!, {r0, r1}
 8001152:	801a      	strh	r2, [r3, #0]
			transform_rotation();
 8001154:	f000 f84e 	bl	80011f4 <transform_rotation>
			break;
 8001158:	bf00      	nop

	}
	Matrix_update();
 800115a:	f000 fdd7 	bl	8001d0c <Matrix_update>
}
 800115e:	bf00      	nop
 8001160:	3758      	adds	r7, #88	@ 0x58
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20025a20 	.word	0x20025a20
 800116c:	08008c7c 	.word	0x08008c7c
 8001170:	20025990 	.word	0x20025990
 8001174:	08008c88 	.word	0x08008c88
 8001178:	08008c94 	.word	0x08008c94
 800117c:	08008ca0 	.word	0x08008ca0
 8001180:	08008cac 	.word	0x08008cac
 8001184:	08008cb8 	.word	0x08008cb8
 8001188:	08008cc4 	.word	0x08008cc4

0800118c <shift_Left>:

void shift_Left(uint32_t X){
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	X = X%240; // Get object into our grid
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <shift_Left+0x60>)
 8001198:	fba3 1302 	umull	r1, r3, r3, r2
 800119c:	09d9      	lsrs	r1, r3, #7
 800119e:	460b      	mov	r3, r1
 80011a0:	011b      	lsls	r3, r3, #4
 80011a2:	1a5b      	subs	r3, r3, r1
 80011a4:	011b      	lsls	r3, r3, #4
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	607b      	str	r3, [r7, #4]
	Object temp = object;
 80011aa:	4a11      	ldr	r2, [pc, #68]	@ (80011f0 <shift_Left+0x64>)
 80011ac:	f107 030c 	add.w	r3, r7, #12
 80011b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80011b2:	c303      	stmia	r3!, {r0, r1}
 80011b4:	801a      	strh	r2, [r3, #0]
	object.originbit.x -= 1;
	object.suboriginbit_0.x -= 1;
	object.suboriginbit_1.x -= 1;
	object.suboriginbit_2.x -= 1;
	*/
	object.originbit.x = X;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4b0d      	ldr	r3, [pc, #52]	@ (80011f0 <shift_Left+0x64>)
 80011bc:	709a      	strb	r2, [r3, #2]
	object.Rotation -= 1;
 80011be:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <shift_Left+0x64>)
 80011c0:	785b      	ldrb	r3, [r3, #1]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4b0a      	ldr	r3, [pc, #40]	@ (80011f0 <shift_Left+0x64>)
 80011c8:	705a      	strb	r2, [r3, #1]
	transform_rotation();
 80011ca:	f000 f813 	bl	80011f4 <transform_rotation>
	if(check_State()) {
 80011ce:	f7ff fec1 	bl	8000f54 <check_State>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d005      	beq.n	80011e4 <shift_Left+0x58>
		object = temp;
 80011d8:	4b05      	ldr	r3, [pc, #20]	@ (80011f0 <shift_Left+0x64>)
 80011da:	f107 020c 	add.w	r2, r7, #12
 80011de:	ca07      	ldmia	r2, {r0, r1, r2}
 80011e0:	c303      	stmia	r3!, {r0, r1}
 80011e2:	801a      	strh	r2, [r3, #0]
	}
}
 80011e4:	bf00      	nop
 80011e6:	3718      	adds	r7, #24
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	88888889 	.word	0x88888889
 80011f0:	20025990 	.word	0x20025990

080011f4 <transform_rotation>:
	if(check_State()) {
		object = temp;
	}
}

void transform_rotation(){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
	Matrix_clear();
 80011fa:	f000 fcf1 	bl	8001be0 <Matrix_clear>
	Object temp = object;
 80011fe:	4a91      	ldr	r2, [pc, #580]	@ (8001444 <transform_rotation+0x250>)
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	ca07      	ldmia	r2, {r0, r1, r2}
 8001204:	c303      	stmia	r3!, {r0, r1}
 8001206:	801a      	strh	r2, [r3, #0]
	object.Rotation += 1;
 8001208:	4b8e      	ldr	r3, [pc, #568]	@ (8001444 <transform_rotation+0x250>)
 800120a:	785b      	ldrb	r3, [r3, #1]
 800120c:	3301      	adds	r3, #1
 800120e:	b2da      	uxtb	r2, r3
 8001210:	4b8c      	ldr	r3, [pc, #560]	@ (8001444 <transform_rotation+0x250>)
 8001212:	705a      	strb	r2, [r3, #1]
	if((object.Rotation > 3) || (object.Rotation < 0)) {
 8001214:	4b8b      	ldr	r3, [pc, #556]	@ (8001444 <transform_rotation+0x250>)
 8001216:	785b      	ldrb	r3, [r3, #1]
 8001218:	2b03      	cmp	r3, #3
 800121a:	d902      	bls.n	8001222 <transform_rotation+0x2e>
		object.Rotation = 0;
 800121c:	4b89      	ldr	r3, [pc, #548]	@ (8001444 <transform_rotation+0x250>)
 800121e:	2200      	movs	r2, #0
 8001220:	705a      	strb	r2, [r3, #1]
	}

	switch(object.name){
 8001222:	4b88      	ldr	r3, [pc, #544]	@ (8001444 <transform_rotation+0x250>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b06      	cmp	r3, #6
 8001228:	f200 8416 	bhi.w	8001a58 <transform_rotation+0x864>
 800122c:	a201      	add	r2, pc, #4	@ (adr r2, 8001234 <transform_rotation+0x40>)
 800122e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001232:	bf00      	nop
 8001234:	08001251 	.word	0x08001251
 8001238:	0800137b 	.word	0x0800137b
 800123c:	0800147d 	.word	0x0800147d
 8001240:	080015a7 	.word	0x080015a7
 8001244:	080016d9 	.word	0x080016d9
 8001248:	080017f3 	.word	0x080017f3
 800124c:	08001915 	.word	0x08001915
		case(ORICKY):
			switch(object.Rotation) {
 8001250:	4b7c      	ldr	r3, [pc, #496]	@ (8001444 <transform_rotation+0x250>)
 8001252:	785b      	ldrb	r3, [r3, #1]
 8001254:	2b03      	cmp	r3, #3
 8001256:	f200 83f2 	bhi.w	8001a3e <transform_rotation+0x84a>
 800125a:	a201      	add	r2, pc, #4	@ (adr r2, 8001260 <transform_rotation+0x6c>)
 800125c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001260:	08001271 	.word	0x08001271
 8001264:	080012b3 	.word	0x080012b3
 8001268:	080012f5 	.word	0x080012f5
 800126c:	08001337 	.word	0x08001337
				case(ROTATION_0):
						//       1
						// 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;   //		 1
 8001270:	4b74      	ldr	r3, [pc, #464]	@ (8001444 <transform_rotation+0x250>)
 8001272:	789b      	ldrb	r3, [r3, #2]
 8001274:	3b01      	subs	r3, #1
 8001276:	b2da      	uxtb	r2, r3
 8001278:	4b72      	ldr	r3, [pc, #456]	@ (8001444 <transform_rotation+0x250>)
 800127a:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		// [1] 1 1
 800127c:	4b71      	ldr	r3, [pc, #452]	@ (8001444 <transform_rotation+0x250>)
 800127e:	78da      	ldrb	r2, [r3, #3]
 8001280:	4b70      	ldr	r3, [pc, #448]	@ (8001444 <transform_rotation+0x250>)
 8001282:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;	//        1
 8001284:	4b6f      	ldr	r3, [pc, #444]	@ (8001444 <transform_rotation+0x250>)
 8001286:	789b      	ldrb	r3, [r3, #2]
 8001288:	3301      	adds	r3, #1
 800128a:	b2da      	uxtb	r2, r3
 800128c:	4b6d      	ldr	r3, [pc, #436]	@ (8001444 <transform_rotation+0x250>)
 800128e:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		//  1  1 [1]
 8001290:	4b6c      	ldr	r3, [pc, #432]	@ (8001444 <transform_rotation+0x250>)
 8001292:	78da      	ldrb	r2, [r3, #3]
 8001294:	4b6b      	ldr	r3, [pc, #428]	@ (8001444 <transform_rotation+0x250>)
 8001296:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	// 	  [1]
 8001298:	4b6a      	ldr	r3, [pc, #424]	@ (8001444 <transform_rotation+0x250>)
 800129a:	789b      	ldrb	r3, [r3, #2]
 800129c:	3301      	adds	r3, #1
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	4b68      	ldr	r3, [pc, #416]	@ (8001444 <transform_rotation+0x250>)
 80012a2:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	// 1 1 1
 80012a4:	4b67      	ldr	r3, [pc, #412]	@ (8001444 <transform_rotation+0x250>)
 80012a6:	78db      	ldrb	r3, [r3, #3]
 80012a8:	3301      	adds	r3, #1
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	4b65      	ldr	r3, [pc, #404]	@ (8001444 <transform_rotation+0x250>)
 80012ae:	725a      	strb	r2, [r3, #9]

					break;
 80012b0:	e062      	b.n	8001378 <transform_rotation+0x184>
				case(ROTATION_1):
						// 1  1
						//   [1]
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 80012b2:	4b64      	ldr	r3, [pc, #400]	@ (8001444 <transform_rotation+0x250>)
 80012b4:	789a      	ldrb	r2, [r3, #2]
 80012b6:	4b63      	ldr	r3, [pc, #396]	@ (8001444 <transform_rotation+0x250>)
 80012b8:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y - 1;
 80012ba:	4b62      	ldr	r3, [pc, #392]	@ (8001444 <transform_rotation+0x250>)
 80012bc:	78db      	ldrb	r3, [r3, #3]
 80012be:	3b01      	subs	r3, #1
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	4b60      	ldr	r3, [pc, #384]	@ (8001444 <transform_rotation+0x250>)
 80012c4:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 80012c6:	4b5f      	ldr	r3, [pc, #380]	@ (8001444 <transform_rotation+0x250>)
 80012c8:	789a      	ldrb	r2, [r3, #2]
 80012ca:	4b5e      	ldr	r3, [pc, #376]	@ (8001444 <transform_rotation+0x250>)
 80012cc:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;
 80012ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001444 <transform_rotation+0x250>)
 80012d0:	78db      	ldrb	r3, [r3, #3]
 80012d2:	3301      	adds	r3, #1
 80012d4:	b2da      	uxtb	r2, r3
 80012d6:	4b5b      	ldr	r3, [pc, #364]	@ (8001444 <transform_rotation+0x250>)
 80012d8:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 80012da:	4b5a      	ldr	r3, [pc, #360]	@ (8001444 <transform_rotation+0x250>)
 80012dc:	789b      	ldrb	r3, [r3, #2]
 80012de:	3b01      	subs	r3, #1
 80012e0:	b2da      	uxtb	r2, r3
 80012e2:	4b58      	ldr	r3, [pc, #352]	@ (8001444 <transform_rotation+0x250>)
 80012e4:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1;
 80012e6:	4b57      	ldr	r3, [pc, #348]	@ (8001444 <transform_rotation+0x250>)
 80012e8:	78db      	ldrb	r3, [r3, #3]
 80012ea:	3301      	adds	r3, #1
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	4b55      	ldr	r3, [pc, #340]	@ (8001444 <transform_rotation+0x250>)
 80012f0:	725a      	strb	r2, [r3, #9]

					break;
 80012f2:	e041      	b.n	8001378 <transform_rotation+0x184>
				case(ROTATION_2):
						// 1  [1]  1
						// 1
					object.suboriginbit_0.x = object.originbit.x + 1;
 80012f4:	4b53      	ldr	r3, [pc, #332]	@ (8001444 <transform_rotation+0x250>)
 80012f6:	789b      	ldrb	r3, [r3, #2]
 80012f8:	3301      	adds	r3, #1
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	4b51      	ldr	r3, [pc, #324]	@ (8001444 <transform_rotation+0x250>)
 80012fe:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8001300:	4b50      	ldr	r3, [pc, #320]	@ (8001444 <transform_rotation+0x250>)
 8001302:	78da      	ldrb	r2, [r3, #3]
 8001304:	4b4f      	ldr	r3, [pc, #316]	@ (8001444 <transform_rotation+0x250>)
 8001306:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;
 8001308:	4b4e      	ldr	r3, [pc, #312]	@ (8001444 <transform_rotation+0x250>)
 800130a:	789b      	ldrb	r3, [r3, #2]
 800130c:	3b01      	subs	r3, #1
 800130e:	b2da      	uxtb	r2, r3
 8001310:	4b4c      	ldr	r3, [pc, #304]	@ (8001444 <transform_rotation+0x250>)
 8001312:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8001314:	4b4b      	ldr	r3, [pc, #300]	@ (8001444 <transform_rotation+0x250>)
 8001316:	78da      	ldrb	r2, [r3, #3]
 8001318:	4b4a      	ldr	r3, [pc, #296]	@ (8001444 <transform_rotation+0x250>)
 800131a:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 800131c:	4b49      	ldr	r3, [pc, #292]	@ (8001444 <transform_rotation+0x250>)
 800131e:	789b      	ldrb	r3, [r3, #2]
 8001320:	3b01      	subs	r3, #1
 8001322:	b2da      	uxtb	r2, r3
 8001324:	4b47      	ldr	r3, [pc, #284]	@ (8001444 <transform_rotation+0x250>)
 8001326:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8001328:	4b46      	ldr	r3, [pc, #280]	@ (8001444 <transform_rotation+0x250>)
 800132a:	78db      	ldrb	r3, [r3, #3]
 800132c:	3b01      	subs	r3, #1
 800132e:	b2da      	uxtb	r2, r3
 8001330:	4b44      	ldr	r3, [pc, #272]	@ (8001444 <transform_rotation+0x250>)
 8001332:	725a      	strb	r2, [r3, #9]

					break;
 8001334:	e020      	b.n	8001378 <transform_rotation+0x184>
				case(ROTATION_3):
						//  1
						// [1]
						//  1 1
					object.suboriginbit_0.x = object.originbit.x;
 8001336:	4b43      	ldr	r3, [pc, #268]	@ (8001444 <transform_rotation+0x250>)
 8001338:	789a      	ldrb	r2, [r3, #2]
 800133a:	4b42      	ldr	r3, [pc, #264]	@ (8001444 <transform_rotation+0x250>)
 800133c:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 800133e:	4b41      	ldr	r3, [pc, #260]	@ (8001444 <transform_rotation+0x250>)
 8001340:	78db      	ldrb	r3, [r3, #3]
 8001342:	3301      	adds	r3, #1
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4b3f      	ldr	r3, [pc, #252]	@ (8001444 <transform_rotation+0x250>)
 8001348:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 800134a:	4b3e      	ldr	r3, [pc, #248]	@ (8001444 <transform_rotation+0x250>)
 800134c:	789a      	ldrb	r2, [r3, #2]
 800134e:	4b3d      	ldr	r3, [pc, #244]	@ (8001444 <transform_rotation+0x250>)
 8001350:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8001352:	4b3c      	ldr	r3, [pc, #240]	@ (8001444 <transform_rotation+0x250>)
 8001354:	78db      	ldrb	r3, [r3, #3]
 8001356:	3b01      	subs	r3, #1
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4b3a      	ldr	r3, [pc, #232]	@ (8001444 <transform_rotation+0x250>)
 800135c:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;
 800135e:	4b39      	ldr	r3, [pc, #228]	@ (8001444 <transform_rotation+0x250>)
 8001360:	789b      	ldrb	r3, [r3, #2]
 8001362:	3301      	adds	r3, #1
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4b37      	ldr	r3, [pc, #220]	@ (8001444 <transform_rotation+0x250>)
 8001368:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 800136a:	4b36      	ldr	r3, [pc, #216]	@ (8001444 <transform_rotation+0x250>)
 800136c:	78db      	ldrb	r3, [r3, #3]
 800136e:	3b01      	subs	r3, #1
 8001370:	b2da      	uxtb	r2, r3
 8001372:	4b34      	ldr	r3, [pc, #208]	@ (8001444 <transform_rotation+0x250>)
 8001374:	725a      	strb	r2, [r3, #9]

					break;
 8001376:	bf00      	nop
			}
			break;
 8001378:	e361      	b.n	8001a3e <transform_rotation+0x84a>
		case(BRICKY):
			switch(object.Rotation) {
 800137a:	4b32      	ldr	r3, [pc, #200]	@ (8001444 <transform_rotation+0x250>)
 800137c:	785b      	ldrb	r3, [r3, #1]
 800137e:	2b03      	cmp	r3, #3
 8001380:	f200 835f 	bhi.w	8001a42 <transform_rotation+0x84e>
 8001384:	a201      	add	r2, pc, #4	@ (adr r2, 800138c <transform_rotation+0x198>)
 8001386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138a:	bf00      	nop
 800138c:	0800139d 	.word	0x0800139d
 8001390:	080013df 	.word	0x080013df
 8001394:	08001411 	.word	0x08001411
 8001398:	08001449 	.word	0x08001449
				case(ROTATION_0):
						// 1
						// 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;   //	1
 800139c:	4b29      	ldr	r3, [pc, #164]	@ (8001444 <transform_rotation+0x250>)
 800139e:	789b      	ldrb	r3, [r3, #2]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b27      	ldr	r3, [pc, #156]	@ (8001444 <transform_rotation+0x250>)
 80013a6:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		// [1] 1 1
 80013a8:	4b26      	ldr	r3, [pc, #152]	@ (8001444 <transform_rotation+0x250>)
 80013aa:	78da      	ldrb	r2, [r3, #3]
 80013ac:	4b25      	ldr	r3, [pc, #148]	@ (8001444 <transform_rotation+0x250>)
 80013ae:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;	//  1
 80013b0:	4b24      	ldr	r3, [pc, #144]	@ (8001444 <transform_rotation+0x250>)
 80013b2:	789b      	ldrb	r3, [r3, #2]
 80013b4:	3301      	adds	r3, #1
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	4b22      	ldr	r3, [pc, #136]	@ (8001444 <transform_rotation+0x250>)
 80013ba:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		//  1  1 [1]
 80013bc:	4b21      	ldr	r3, [pc, #132]	@ (8001444 <transform_rotation+0x250>)
 80013be:	78da      	ldrb	r2, [r3, #3]
 80013c0:	4b20      	ldr	r3, [pc, #128]	@ (8001444 <transform_rotation+0x250>)
 80013c2:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;	//[1]
 80013c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001444 <transform_rotation+0x250>)
 80013c6:	789b      	ldrb	r3, [r3, #2]
 80013c8:	3b01      	subs	r3, #1
 80013ca:	b2da      	uxtb	r2, r3
 80013cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001444 <transform_rotation+0x250>)
 80013ce:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	// 1 1 1
 80013d0:	4b1c      	ldr	r3, [pc, #112]	@ (8001444 <transform_rotation+0x250>)
 80013d2:	78db      	ldrb	r3, [r3, #3]
 80013d4:	3301      	adds	r3, #1
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	4b1a      	ldr	r3, [pc, #104]	@ (8001444 <transform_rotation+0x250>)
 80013da:	725a      	strb	r2, [r3, #9]

					break;
 80013dc:	e04d      	b.n	800147a <transform_rotation+0x286>
				case(ROTATION_1):
						// 1 1
						//[1]
						// 1
					object.suboriginbit_0.x = object.originbit.x;
 80013de:	4b19      	ldr	r3, [pc, #100]	@ (8001444 <transform_rotation+0x250>)
 80013e0:	789a      	ldrb	r2, [r3, #2]
 80013e2:	4b18      	ldr	r3, [pc, #96]	@ (8001444 <transform_rotation+0x250>)
 80013e4:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 80013e6:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <transform_rotation+0x250>)
 80013e8:	78da      	ldrb	r2, [r3, #3]
 80013ea:	4b16      	ldr	r3, [pc, #88]	@ (8001444 <transform_rotation+0x250>)
 80013ec:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 80013ee:	4b15      	ldr	r3, [pc, #84]	@ (8001444 <transform_rotation+0x250>)
 80013f0:	789a      	ldrb	r2, [r3, #2]
 80013f2:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <transform_rotation+0x250>)
 80013f4:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 80013f6:	4b13      	ldr	r3, [pc, #76]	@ (8001444 <transform_rotation+0x250>)
 80013f8:	78da      	ldrb	r2, [r3, #3]
 80013fa:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <transform_rotation+0x250>)
 80013fc:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 80013fe:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <transform_rotation+0x250>)
 8001400:	789a      	ldrb	r2, [r3, #2]
 8001402:	4b10      	ldr	r3, [pc, #64]	@ (8001444 <transform_rotation+0x250>)
 8001404:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 8001406:	4b0f      	ldr	r3, [pc, #60]	@ (8001444 <transform_rotation+0x250>)
 8001408:	78da      	ldrb	r2, [r3, #3]
 800140a:	4b0e      	ldr	r3, [pc, #56]	@ (8001444 <transform_rotation+0x250>)
 800140c:	725a      	strb	r2, [r3, #9]

					break;
 800140e:	e034      	b.n	800147a <transform_rotation+0x286>
				case(ROTATION_2):
						// 1 [1] 1
						//       1
					object.suboriginbit_0.x = object.originbit.x;
 8001410:	4b0c      	ldr	r3, [pc, #48]	@ (8001444 <transform_rotation+0x250>)
 8001412:	789a      	ldrb	r2, [r3, #2]
 8001414:	4b0b      	ldr	r3, [pc, #44]	@ (8001444 <transform_rotation+0x250>)
 8001416:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8001418:	4b0a      	ldr	r3, [pc, #40]	@ (8001444 <transform_rotation+0x250>)
 800141a:	78da      	ldrb	r2, [r3, #3]
 800141c:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <transform_rotation+0x250>)
 800141e:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8001420:	4b08      	ldr	r3, [pc, #32]	@ (8001444 <transform_rotation+0x250>)
 8001422:	789a      	ldrb	r2, [r3, #2]
 8001424:	4b07      	ldr	r3, [pc, #28]	@ (8001444 <transform_rotation+0x250>)
 8001426:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <transform_rotation+0x250>)
 800142a:	78da      	ldrb	r2, [r3, #3]
 800142c:	4b05      	ldr	r3, [pc, #20]	@ (8001444 <transform_rotation+0x250>)
 800142e:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8001430:	4b04      	ldr	r3, [pc, #16]	@ (8001444 <transform_rotation+0x250>)
 8001432:	789a      	ldrb	r2, [r3, #2]
 8001434:	4b03      	ldr	r3, [pc, #12]	@ (8001444 <transform_rotation+0x250>)
 8001436:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 8001438:	4b02      	ldr	r3, [pc, #8]	@ (8001444 <transform_rotation+0x250>)
 800143a:	78da      	ldrb	r2, [r3, #3]
 800143c:	4b01      	ldr	r3, [pc, #4]	@ (8001444 <transform_rotation+0x250>)
 800143e:	725a      	strb	r2, [r3, #9]

					break;
 8001440:	e01b      	b.n	800147a <transform_rotation+0x286>
 8001442:	bf00      	nop
 8001444:	20025990 	.word	0x20025990
				case(ROTATION_3):
						//   1
						//  [1]
						// 1 1
					object.suboriginbit_0.x = object.originbit.x;
 8001448:	4b91      	ldr	r3, [pc, #580]	@ (8001690 <transform_rotation+0x49c>)
 800144a:	789a      	ldrb	r2, [r3, #2]
 800144c:	4b90      	ldr	r3, [pc, #576]	@ (8001690 <transform_rotation+0x49c>)
 800144e:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8001450:	4b8f      	ldr	r3, [pc, #572]	@ (8001690 <transform_rotation+0x49c>)
 8001452:	78da      	ldrb	r2, [r3, #3]
 8001454:	4b8e      	ldr	r3, [pc, #568]	@ (8001690 <transform_rotation+0x49c>)
 8001456:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8001458:	4b8d      	ldr	r3, [pc, #564]	@ (8001690 <transform_rotation+0x49c>)
 800145a:	789a      	ldrb	r2, [r3, #2]
 800145c:	4b8c      	ldr	r3, [pc, #560]	@ (8001690 <transform_rotation+0x49c>)
 800145e:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8001460:	4b8b      	ldr	r3, [pc, #556]	@ (8001690 <transform_rotation+0x49c>)
 8001462:	78da      	ldrb	r2, [r3, #3]
 8001464:	4b8a      	ldr	r3, [pc, #552]	@ (8001690 <transform_rotation+0x49c>)
 8001466:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8001468:	4b89      	ldr	r3, [pc, #548]	@ (8001690 <transform_rotation+0x49c>)
 800146a:	789a      	ldrb	r2, [r3, #2]
 800146c:	4b88      	ldr	r3, [pc, #544]	@ (8001690 <transform_rotation+0x49c>)
 800146e:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 8001470:	4b87      	ldr	r3, [pc, #540]	@ (8001690 <transform_rotation+0x49c>)
 8001472:	78da      	ldrb	r2, [r3, #3]
 8001474:	4b86      	ldr	r3, [pc, #536]	@ (8001690 <transform_rotation+0x49c>)
 8001476:	725a      	strb	r2, [r3, #9]

					break;
 8001478:	bf00      	nop
			}

			break;
 800147a:	e2e2      	b.n	8001a42 <transform_rotation+0x84e>
		case(CLEVELAND):
			switch(object.Rotation) {
 800147c:	4b84      	ldr	r3, [pc, #528]	@ (8001690 <transform_rotation+0x49c>)
 800147e:	785b      	ldrb	r3, [r3, #1]
 8001480:	2b03      	cmp	r3, #3
 8001482:	f200 82e0 	bhi.w	8001a46 <transform_rotation+0x852>
 8001486:	a201      	add	r2, pc, #4	@ (adr r2, 800148c <transform_rotation+0x298>)
 8001488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148c:	0800149d 	.word	0x0800149d
 8001490:	080014df 	.word	0x080014df
 8001494:	08001521 	.word	0x08001521
 8001498:	08001563 	.word	0x08001563
				case(ROTATION_0):
						// 1 1
						//  [1] 1
					object.suboriginbit_0.x = object.originbit.x;			 //	1 [1]
 800149c:	4b7c      	ldr	r3, [pc, #496]	@ (8001690 <transform_rotation+0x49c>)
 800149e:	789a      	ldrb	r2, [r3, #2]
 80014a0:	4b7b      	ldr	r3, [pc, #492]	@ (8001690 <transform_rotation+0x49c>)
 80014a2:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;		 //    1 1
 80014a4:	4b7a      	ldr	r3, [pc, #488]	@ (8001690 <transform_rotation+0x49c>)
 80014a6:	78db      	ldrb	r3, [r3, #3]
 80014a8:	3301      	adds	r3, #1
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	4b78      	ldr	r3, [pc, #480]	@ (8001690 <transform_rotation+0x49c>)
 80014ae:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;		 // [1] 1
 80014b0:	4b77      	ldr	r3, [pc, #476]	@ (8001690 <transform_rotation+0x49c>)
 80014b2:	789b      	ldrb	r3, [r3, #2]
 80014b4:	3b01      	subs	r3, #1
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	4b75      	ldr	r3, [pc, #468]	@ (8001690 <transform_rotation+0x49c>)
 80014ba:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;		 //     1 1
 80014bc:	4b74      	ldr	r3, [pc, #464]	@ (8001690 <transform_rotation+0x49c>)
 80014be:	78db      	ldrb	r3, [r3, #3]
 80014c0:	3301      	adds	r3, #1
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	4b72      	ldr	r3, [pc, #456]	@ (8001690 <transform_rotation+0x49c>)
 80014c6:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;		 //  1 1
 80014c8:	4b71      	ldr	r3, [pc, #452]	@ (8001690 <transform_rotation+0x49c>)
 80014ca:	789b      	ldrb	r3, [r3, #2]
 80014cc:	3301      	adds	r3, #1
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	4b6f      	ldr	r3, [pc, #444]	@ (8001690 <transform_rotation+0x49c>)
 80014d2:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y; 	     	//    1 [1]
 80014d4:	4b6e      	ldr	r3, [pc, #440]	@ (8001690 <transform_rotation+0x49c>)
 80014d6:	78da      	ldrb	r2, [r3, #3]
 80014d8:	4b6d      	ldr	r3, [pc, #436]	@ (8001690 <transform_rotation+0x49c>)
 80014da:	725a      	strb	r2, [r3, #9]

					break;
 80014dc:	e062      	b.n	80015a4 <transform_rotation+0x3b0>
				case(ROTATION_1):
						//     1
						// [1] 1
						//  1
					object.suboriginbit_0.x = object.originbit.x+1;
 80014de:	4b6c      	ldr	r3, [pc, #432]	@ (8001690 <transform_rotation+0x49c>)
 80014e0:	789b      	ldrb	r3, [r3, #2]
 80014e2:	3301      	adds	r3, #1
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001690 <transform_rotation+0x49c>)
 80014e8:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 80014ea:	4b69      	ldr	r3, [pc, #420]	@ (8001690 <transform_rotation+0x49c>)
 80014ec:	78da      	ldrb	r2, [r3, #3]
 80014ee:	4b68      	ldr	r3, [pc, #416]	@ (8001690 <transform_rotation+0x49c>)
 80014f0:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x+1;
 80014f2:	4b67      	ldr	r3, [pc, #412]	@ (8001690 <transform_rotation+0x49c>)
 80014f4:	789b      	ldrb	r3, [r3, #2]
 80014f6:	3301      	adds	r3, #1
 80014f8:	b2da      	uxtb	r2, r3
 80014fa:	4b65      	ldr	r3, [pc, #404]	@ (8001690 <transform_rotation+0x49c>)
 80014fc:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y+1;
 80014fe:	4b64      	ldr	r3, [pc, #400]	@ (8001690 <transform_rotation+0x49c>)
 8001500:	78db      	ldrb	r3, [r3, #3]
 8001502:	3301      	adds	r3, #1
 8001504:	b2da      	uxtb	r2, r3
 8001506:	4b62      	ldr	r3, [pc, #392]	@ (8001690 <transform_rotation+0x49c>)
 8001508:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 800150a:	4b61      	ldr	r3, [pc, #388]	@ (8001690 <transform_rotation+0x49c>)
 800150c:	789a      	ldrb	r2, [r3, #2]
 800150e:	4b60      	ldr	r3, [pc, #384]	@ (8001690 <transform_rotation+0x49c>)
 8001510:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y-1;
 8001512:	4b5f      	ldr	r3, [pc, #380]	@ (8001690 <transform_rotation+0x49c>)
 8001514:	78db      	ldrb	r3, [r3, #3]
 8001516:	3b01      	subs	r3, #1
 8001518:	b2da      	uxtb	r2, r3
 800151a:	4b5d      	ldr	r3, [pc, #372]	@ (8001690 <transform_rotation+0x49c>)
 800151c:	725a      	strb	r2, [r3, #9]

					break;
 800151e:	e041      	b.n	80015a4 <transform_rotation+0x3b0>
				case(ROTATION_2):
						// 1 [1]
						//    1  1
					object.suboriginbit_0.x = object.originbit.x - 1;
 8001520:	4b5b      	ldr	r3, [pc, #364]	@ (8001690 <transform_rotation+0x49c>)
 8001522:	789b      	ldrb	r3, [r3, #2]
 8001524:	3b01      	subs	r3, #1
 8001526:	b2da      	uxtb	r2, r3
 8001528:	4b59      	ldr	r3, [pc, #356]	@ (8001690 <transform_rotation+0x49c>)
 800152a:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 800152c:	4b58      	ldr	r3, [pc, #352]	@ (8001690 <transform_rotation+0x49c>)
 800152e:	78da      	ldrb	r2, [r3, #3]
 8001530:	4b57      	ldr	r3, [pc, #348]	@ (8001690 <transform_rotation+0x49c>)
 8001532:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8001534:	4b56      	ldr	r3, [pc, #344]	@ (8001690 <transform_rotation+0x49c>)
 8001536:	789a      	ldrb	r2, [r3, #2]
 8001538:	4b55      	ldr	r3, [pc, #340]	@ (8001690 <transform_rotation+0x49c>)
 800153a:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 800153c:	4b54      	ldr	r3, [pc, #336]	@ (8001690 <transform_rotation+0x49c>)
 800153e:	78db      	ldrb	r3, [r3, #3]
 8001540:	3b01      	subs	r3, #1
 8001542:	b2da      	uxtb	r2, r3
 8001544:	4b52      	ldr	r3, [pc, #328]	@ (8001690 <transform_rotation+0x49c>)
 8001546:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;
 8001548:	4b51      	ldr	r3, [pc, #324]	@ (8001690 <transform_rotation+0x49c>)
 800154a:	789b      	ldrb	r3, [r3, #2]
 800154c:	3301      	adds	r3, #1
 800154e:	b2da      	uxtb	r2, r3
 8001550:	4b4f      	ldr	r3, [pc, #316]	@ (8001690 <transform_rotation+0x49c>)
 8001552:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8001554:	4b4e      	ldr	r3, [pc, #312]	@ (8001690 <transform_rotation+0x49c>)
 8001556:	78db      	ldrb	r3, [r3, #3]
 8001558:	3b01      	subs	r3, #1
 800155a:	b2da      	uxtb	r2, r3
 800155c:	4b4c      	ldr	r3, [pc, #304]	@ (8001690 <transform_rotation+0x49c>)
 800155e:	725a      	strb	r2, [r3, #9]

					break;
 8001560:	e020      	b.n	80015a4 <transform_rotation+0x3b0>
				case(ROTATION_3):
						//     1
						//  1 [1]
						//  1
					object.suboriginbit_0.x = object.originbit.x - 1;
 8001562:	4b4b      	ldr	r3, [pc, #300]	@ (8001690 <transform_rotation+0x49c>)
 8001564:	789b      	ldrb	r3, [r3, #2]
 8001566:	3b01      	subs	r3, #1
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4b49      	ldr	r3, [pc, #292]	@ (8001690 <transform_rotation+0x49c>)
 800156c:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 800156e:	4b48      	ldr	r3, [pc, #288]	@ (8001690 <transform_rotation+0x49c>)
 8001570:	78da      	ldrb	r2, [r3, #3]
 8001572:	4b47      	ldr	r3, [pc, #284]	@ (8001690 <transform_rotation+0x49c>)
 8001574:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;
 8001576:	4b46      	ldr	r3, [pc, #280]	@ (8001690 <transform_rotation+0x49c>)
 8001578:	789b      	ldrb	r3, [r3, #2]
 800157a:	3b01      	subs	r3, #1
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4b44      	ldr	r3, [pc, #272]	@ (8001690 <transform_rotation+0x49c>)
 8001580:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8001582:	4b43      	ldr	r3, [pc, #268]	@ (8001690 <transform_rotation+0x49c>)
 8001584:	78db      	ldrb	r3, [r3, #3]
 8001586:	3b01      	subs	r3, #1
 8001588:	b2da      	uxtb	r2, r3
 800158a:	4b41      	ldr	r3, [pc, #260]	@ (8001690 <transform_rotation+0x49c>)
 800158c:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 800158e:	4b40      	ldr	r3, [pc, #256]	@ (8001690 <transform_rotation+0x49c>)
 8001590:	789a      	ldrb	r2, [r3, #2]
 8001592:	4b3f      	ldr	r3, [pc, #252]	@ (8001690 <transform_rotation+0x49c>)
 8001594:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1;
 8001596:	4b3e      	ldr	r3, [pc, #248]	@ (8001690 <transform_rotation+0x49c>)
 8001598:	78db      	ldrb	r3, [r3, #3]
 800159a:	3301      	adds	r3, #1
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4b3c      	ldr	r3, [pc, #240]	@ (8001690 <transform_rotation+0x49c>)
 80015a0:	725a      	strb	r2, [r3, #9]

					break;
 80015a2:	bf00      	nop
			}
			break;
 80015a4:	e24f      	b.n	8001a46 <transform_rotation+0x852>
		case(RHODE):
			switch(object.Rotation) {
 80015a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001690 <transform_rotation+0x49c>)
 80015a8:	785b      	ldrb	r3, [r3, #1]
 80015aa:	2b03      	cmp	r3, #3
 80015ac:	f200 824d 	bhi.w	8001a4a <transform_rotation+0x856>
 80015b0:	a201      	add	r2, pc, #4	@ (adr r2, 80015b8 <transform_rotation+0x3c4>)
 80015b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b6:	bf00      	nop
 80015b8:	080015c9 	.word	0x080015c9
 80015bc:	0800160b 	.word	0x0800160b
 80015c0:	0800164d 	.word	0x0800164d
 80015c4:	08001695 	.word	0x08001695
				case(ROTATION_0):
						//    1 1
						// 1 [1]
					object.suboriginbit_0.x = object.originbit.x;			 //	  [1] 1
 80015c8:	4b31      	ldr	r3, [pc, #196]	@ (8001690 <transform_rotation+0x49c>)
 80015ca:	789a      	ldrb	r2, [r3, #2]
 80015cc:	4b30      	ldr	r3, [pc, #192]	@ (8001690 <transform_rotation+0x49c>)
 80015ce:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;		 //  1 1
 80015d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001690 <transform_rotation+0x49c>)
 80015d2:	78db      	ldrb	r3, [r3, #3]
 80015d4:	3301      	adds	r3, #1
 80015d6:	b2da      	uxtb	r2, r3
 80015d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001690 <transform_rotation+0x49c>)
 80015da:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;		 //    1 [1]
 80015dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001690 <transform_rotation+0x49c>)
 80015de:	789b      	ldrb	r3, [r3, #2]
 80015e0:	3301      	adds	r3, #1
 80015e2:	b2da      	uxtb	r2, r3
 80015e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001690 <transform_rotation+0x49c>)
 80015e6:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;		 //  1 1
 80015e8:	4b29      	ldr	r3, [pc, #164]	@ (8001690 <transform_rotation+0x49c>)
 80015ea:	78db      	ldrb	r3, [r3, #3]
 80015ec:	3301      	adds	r3, #1
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	4b27      	ldr	r3, [pc, #156]	@ (8001690 <transform_rotation+0x49c>)
 80015f2:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;		 //     1 1
 80015f4:	4b26      	ldr	r3, [pc, #152]	@ (8001690 <transform_rotation+0x49c>)
 80015f6:	789b      	ldrb	r3, [r3, #2]
 80015f8:	3b01      	subs	r3, #1
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	4b24      	ldr	r3, [pc, #144]	@ (8001690 <transform_rotation+0x49c>)
 80015fe:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y; 	     // [1] 1
 8001600:	4b23      	ldr	r3, [pc, #140]	@ (8001690 <transform_rotation+0x49c>)
 8001602:	78da      	ldrb	r2, [r3, #3]
 8001604:	4b22      	ldr	r3, [pc, #136]	@ (8001690 <transform_rotation+0x49c>)
 8001606:	725a      	strb	r2, [r3, #9]

					break;
 8001608:	e065      	b.n	80016d6 <transform_rotation+0x4e2>
				case(ROTATION_1):
						// 1
						//[1] 1
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 800160a:	4b21      	ldr	r3, [pc, #132]	@ (8001690 <transform_rotation+0x49c>)
 800160c:	789a      	ldrb	r2, [r3, #2]
 800160e:	4b20      	ldr	r3, [pc, #128]	@ (8001690 <transform_rotation+0x49c>)
 8001610:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 8001612:	4b1f      	ldr	r3, [pc, #124]	@ (8001690 <transform_rotation+0x49c>)
 8001614:	78db      	ldrb	r3, [r3, #3]
 8001616:	3301      	adds	r3, #1
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4b1d      	ldr	r3, [pc, #116]	@ (8001690 <transform_rotation+0x49c>)
 800161c:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;
 800161e:	4b1c      	ldr	r3, [pc, #112]	@ (8001690 <transform_rotation+0x49c>)
 8001620:	789b      	ldrb	r3, [r3, #2]
 8001622:	3301      	adds	r3, #1
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4b1a      	ldr	r3, [pc, #104]	@ (8001690 <transform_rotation+0x49c>)
 8001628:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 800162a:	4b19      	ldr	r3, [pc, #100]	@ (8001690 <transform_rotation+0x49c>)
 800162c:	78da      	ldrb	r2, [r3, #3]
 800162e:	4b18      	ldr	r3, [pc, #96]	@ (8001690 <transform_rotation+0x49c>)
 8001630:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;
 8001632:	4b17      	ldr	r3, [pc, #92]	@ (8001690 <transform_rotation+0x49c>)
 8001634:	789b      	ldrb	r3, [r3, #2]
 8001636:	3301      	adds	r3, #1
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <transform_rotation+0x49c>)
 800163c:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 800163e:	4b14      	ldr	r3, [pc, #80]	@ (8001690 <transform_rotation+0x49c>)
 8001640:	78db      	ldrb	r3, [r3, #3]
 8001642:	3b01      	subs	r3, #1
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4b12      	ldr	r3, [pc, #72]	@ (8001690 <transform_rotation+0x49c>)
 8001648:	725a      	strb	r2, [r3, #9]

					break;
 800164a:	e044      	b.n	80016d6 <transform_rotation+0x4e2>
				case(ROTATION_2):
						//  [1] 1
						// 1 1
					object.suboriginbit_0.x = object.originbit.x + 1;
 800164c:	4b10      	ldr	r3, [pc, #64]	@ (8001690 <transform_rotation+0x49c>)
 800164e:	789b      	ldrb	r3, [r3, #2]
 8001650:	3301      	adds	r3, #1
 8001652:	b2da      	uxtb	r2, r3
 8001654:	4b0e      	ldr	r3, [pc, #56]	@ (8001690 <transform_rotation+0x49c>)
 8001656:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8001658:	4b0d      	ldr	r3, [pc, #52]	@ (8001690 <transform_rotation+0x49c>)
 800165a:	78da      	ldrb	r2, [r3, #3]
 800165c:	4b0c      	ldr	r3, [pc, #48]	@ (8001690 <transform_rotation+0x49c>)
 800165e:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8001660:	4b0b      	ldr	r3, [pc, #44]	@ (8001690 <transform_rotation+0x49c>)
 8001662:	789a      	ldrb	r2, [r3, #2]
 8001664:	4b0a      	ldr	r3, [pc, #40]	@ (8001690 <transform_rotation+0x49c>)
 8001666:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8001668:	4b09      	ldr	r3, [pc, #36]	@ (8001690 <transform_rotation+0x49c>)
 800166a:	78db      	ldrb	r3, [r3, #3]
 800166c:	3b01      	subs	r3, #1
 800166e:	b2da      	uxtb	r2, r3
 8001670:	4b07      	ldr	r3, [pc, #28]	@ (8001690 <transform_rotation+0x49c>)
 8001672:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 8001674:	4b06      	ldr	r3, [pc, #24]	@ (8001690 <transform_rotation+0x49c>)
 8001676:	789b      	ldrb	r3, [r3, #2]
 8001678:	3b01      	subs	r3, #1
 800167a:	b2da      	uxtb	r2, r3
 800167c:	4b04      	ldr	r3, [pc, #16]	@ (8001690 <transform_rotation+0x49c>)
 800167e:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8001680:	4b03      	ldr	r3, [pc, #12]	@ (8001690 <transform_rotation+0x49c>)
 8001682:	78db      	ldrb	r3, [r3, #3]
 8001684:	3b01      	subs	r3, #1
 8001686:	b2da      	uxtb	r2, r3
 8001688:	4b01      	ldr	r3, [pc, #4]	@ (8001690 <transform_rotation+0x49c>)
 800168a:	725a      	strb	r2, [r3, #9]

					break;
 800168c:	e023      	b.n	80016d6 <transform_rotation+0x4e2>
 800168e:	bf00      	nop
 8001690:	20025990 	.word	0x20025990
				case(ROTATION_3):
						// 1
						// 1 [1]
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 8001694:	4b8e      	ldr	r3, [pc, #568]	@ (80018d0 <transform_rotation+0x6dc>)
 8001696:	789a      	ldrb	r2, [r3, #2]
 8001698:	4b8d      	ldr	r3, [pc, #564]	@ (80018d0 <transform_rotation+0x6dc>)
 800169a:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y - 1;
 800169c:	4b8c      	ldr	r3, [pc, #560]	@ (80018d0 <transform_rotation+0x6dc>)
 800169e:	78db      	ldrb	r3, [r3, #3]
 80016a0:	3b01      	subs	r3, #1
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	4b8a      	ldr	r3, [pc, #552]	@ (80018d0 <transform_rotation+0x6dc>)
 80016a6:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;
 80016a8:	4b89      	ldr	r3, [pc, #548]	@ (80018d0 <transform_rotation+0x6dc>)
 80016aa:	789b      	ldrb	r3, [r3, #2]
 80016ac:	3b01      	subs	r3, #1
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	4b87      	ldr	r3, [pc, #540]	@ (80018d0 <transform_rotation+0x6dc>)
 80016b2:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 80016b4:	4b86      	ldr	r3, [pc, #536]	@ (80018d0 <transform_rotation+0x6dc>)
 80016b6:	78da      	ldrb	r2, [r3, #3]
 80016b8:	4b85      	ldr	r3, [pc, #532]	@ (80018d0 <transform_rotation+0x6dc>)
 80016ba:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 80016bc:	4b84      	ldr	r3, [pc, #528]	@ (80018d0 <transform_rotation+0x6dc>)
 80016be:	789b      	ldrb	r3, [r3, #2]
 80016c0:	3b01      	subs	r3, #1
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	4b82      	ldr	r3, [pc, #520]	@ (80018d0 <transform_rotation+0x6dc>)
 80016c6:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1;
 80016c8:	4b81      	ldr	r3, [pc, #516]	@ (80018d0 <transform_rotation+0x6dc>)
 80016ca:	78db      	ldrb	r3, [r3, #3]
 80016cc:	3301      	adds	r3, #1
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	4b7f      	ldr	r3, [pc, #508]	@ (80018d0 <transform_rotation+0x6dc>)
 80016d2:	725a      	strb	r2, [r3, #9]

					break;
 80016d4:	bf00      	nop
			}
			break;
 80016d6:	e1b8      	b.n	8001a4a <transform_rotation+0x856>
		case(HERO):
			switch(object.Rotation) {
 80016d8:	4b7d      	ldr	r3, [pc, #500]	@ (80018d0 <transform_rotation+0x6dc>)
 80016da:	785b      	ldrb	r3, [r3, #1]
 80016dc:	2b03      	cmp	r3, #3
 80016de:	f200 81b6 	bhi.w	8001a4e <transform_rotation+0x85a>
 80016e2:	a201      	add	r2, pc, #4	@ (adr r2, 80016e8 <transform_rotation+0x4f4>)
 80016e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e8:	080016f9 	.word	0x080016f9
 80016ec:	08001737 	.word	0x08001737
 80016f0:	08001775 	.word	0x08001775
 80016f4:	080017b3 	.word	0x080017b3
				case(ROTATION_0):
						// 1 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;	 //
 80016f8:	4b75      	ldr	r3, [pc, #468]	@ (80018d0 <transform_rotation+0x6dc>)
 80016fa:	789b      	ldrb	r3, [r3, #2]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	b2da      	uxtb	r2, r3
 8001700:	4b73      	ldr	r3, [pc, #460]	@ (80018d0 <transform_rotation+0x6dc>)
 8001702:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 // 1 [1] 1 1
 8001704:	4b72      	ldr	r3, [pc, #456]	@ (80018d0 <transform_rotation+0x6dc>)
 8001706:	78da      	ldrb	r2, [r3, #3]
 8001708:	4b71      	ldr	r3, [pc, #452]	@ (80018d0 <transform_rotation+0x6dc>)
 800170a:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 2;	 //
 800170c:	4b70      	ldr	r3, [pc, #448]	@ (80018d0 <transform_rotation+0x6dc>)
 800170e:	789b      	ldrb	r3, [r3, #2]
 8001710:	3b02      	subs	r3, #2
 8001712:	b2da      	uxtb	r2, r3
 8001714:	4b6e      	ldr	r3, [pc, #440]	@ (80018d0 <transform_rotation+0x6dc>)
 8001716:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		 // [1] 1 1 1
 8001718:	4b6d      	ldr	r3, [pc, #436]	@ (80018d0 <transform_rotation+0x6dc>)
 800171a:	78da      	ldrb	r2, [r3, #3]
 800171c:	4b6c      	ldr	r3, [pc, #432]	@ (80018d0 <transform_rotation+0x6dc>)
 800171e:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //
 8001720:	4b6b      	ldr	r3, [pc, #428]	@ (80018d0 <transform_rotation+0x6dc>)
 8001722:	789b      	ldrb	r3, [r3, #2]
 8001724:	3301      	adds	r3, #1
 8001726:	b2da      	uxtb	r2, r3
 8001728:	4b69      	ldr	r3, [pc, #420]	@ (80018d0 <transform_rotation+0x6dc>)
 800172a:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y; 	     //  1 1 1 [1]
 800172c:	4b68      	ldr	r3, [pc, #416]	@ (80018d0 <transform_rotation+0x6dc>)
 800172e:	78da      	ldrb	r2, [r3, #3]
 8001730:	4b67      	ldr	r3, [pc, #412]	@ (80018d0 <transform_rotation+0x6dc>)
 8001732:	725a      	strb	r2, [r3, #9]

					break;
 8001734:	e05c      	b.n	80017f0 <transform_rotation+0x5fc>
				case(ROTATION_1):
						//  1
						//  1
						// [1]
						//  1
					object.suboriginbit_0.x = object.originbit.x;
 8001736:	4b66      	ldr	r3, [pc, #408]	@ (80018d0 <transform_rotation+0x6dc>)
 8001738:	789a      	ldrb	r2, [r3, #2]
 800173a:	4b65      	ldr	r3, [pc, #404]	@ (80018d0 <transform_rotation+0x6dc>)
 800173c:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 800173e:	4b64      	ldr	r3, [pc, #400]	@ (80018d0 <transform_rotation+0x6dc>)
 8001740:	78db      	ldrb	r3, [r3, #3]
 8001742:	3301      	adds	r3, #1
 8001744:	b2da      	uxtb	r2, r3
 8001746:	4b62      	ldr	r3, [pc, #392]	@ (80018d0 <transform_rotation+0x6dc>)
 8001748:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 800174a:	4b61      	ldr	r3, [pc, #388]	@ (80018d0 <transform_rotation+0x6dc>)
 800174c:	789a      	ldrb	r2, [r3, #2]
 800174e:	4b60      	ldr	r3, [pc, #384]	@ (80018d0 <transform_rotation+0x6dc>)
 8001750:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8001752:	4b5f      	ldr	r3, [pc, #380]	@ (80018d0 <transform_rotation+0x6dc>)
 8001754:	78db      	ldrb	r3, [r3, #3]
 8001756:	3b01      	subs	r3, #1
 8001758:	b2da      	uxtb	r2, r3
 800175a:	4b5d      	ldr	r3, [pc, #372]	@ (80018d0 <transform_rotation+0x6dc>)
 800175c:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 800175e:	4b5c      	ldr	r3, [pc, #368]	@ (80018d0 <transform_rotation+0x6dc>)
 8001760:	789a      	ldrb	r2, [r3, #2]
 8001762:	4b5b      	ldr	r3, [pc, #364]	@ (80018d0 <transform_rotation+0x6dc>)
 8001764:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 2;
 8001766:	4b5a      	ldr	r3, [pc, #360]	@ (80018d0 <transform_rotation+0x6dc>)
 8001768:	78db      	ldrb	r3, [r3, #3]
 800176a:	3302      	adds	r3, #2
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4b58      	ldr	r3, [pc, #352]	@ (80018d0 <transform_rotation+0x6dc>)
 8001770:	725a      	strb	r2, [r3, #9]

					break;
 8001772:	e03d      	b.n	80017f0 <transform_rotation+0x5fc>
				case(ROTATION_2):
						// 1 [1] 1 1
					object.suboriginbit_0.x = object.originbit.x - 1;
 8001774:	4b56      	ldr	r3, [pc, #344]	@ (80018d0 <transform_rotation+0x6dc>)
 8001776:	789b      	ldrb	r3, [r3, #2]
 8001778:	3b01      	subs	r3, #1
 800177a:	b2da      	uxtb	r2, r3
 800177c:	4b54      	ldr	r3, [pc, #336]	@ (80018d0 <transform_rotation+0x6dc>)
 800177e:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8001780:	4b53      	ldr	r3, [pc, #332]	@ (80018d0 <transform_rotation+0x6dc>)
 8001782:	78da      	ldrb	r2, [r3, #3]
 8001784:	4b52      	ldr	r3, [pc, #328]	@ (80018d0 <transform_rotation+0x6dc>)
 8001786:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;
 8001788:	4b51      	ldr	r3, [pc, #324]	@ (80018d0 <transform_rotation+0x6dc>)
 800178a:	789b      	ldrb	r3, [r3, #2]
 800178c:	3301      	adds	r3, #1
 800178e:	b2da      	uxtb	r2, r3
 8001790:	4b4f      	ldr	r3, [pc, #316]	@ (80018d0 <transform_rotation+0x6dc>)
 8001792:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8001794:	4b4e      	ldr	r3, [pc, #312]	@ (80018d0 <transform_rotation+0x6dc>)
 8001796:	78da      	ldrb	r2, [r3, #3]
 8001798:	4b4d      	ldr	r3, [pc, #308]	@ (80018d0 <transform_rotation+0x6dc>)
 800179a:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 2;
 800179c:	4b4c      	ldr	r3, [pc, #304]	@ (80018d0 <transform_rotation+0x6dc>)
 800179e:	789b      	ldrb	r3, [r3, #2]
 80017a0:	3302      	adds	r3, #2
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	4b4a      	ldr	r3, [pc, #296]	@ (80018d0 <transform_rotation+0x6dc>)
 80017a6:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 80017a8:	4b49      	ldr	r3, [pc, #292]	@ (80018d0 <transform_rotation+0x6dc>)
 80017aa:	78da      	ldrb	r2, [r3, #3]
 80017ac:	4b48      	ldr	r3, [pc, #288]	@ (80018d0 <transform_rotation+0x6dc>)
 80017ae:	725a      	strb	r2, [r3, #9]

					break;
 80017b0:	e01e      	b.n	80017f0 <transform_rotation+0x5fc>
				case(ROTATION_3):
						//  1
						// [1]
						//  1
						//  1
					object.suboriginbit_0.x = object.originbit.x;
 80017b2:	4b47      	ldr	r3, [pc, #284]	@ (80018d0 <transform_rotation+0x6dc>)
 80017b4:	789a      	ldrb	r2, [r3, #2]
 80017b6:	4b46      	ldr	r3, [pc, #280]	@ (80018d0 <transform_rotation+0x6dc>)
 80017b8:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 80017ba:	4b45      	ldr	r3, [pc, #276]	@ (80018d0 <transform_rotation+0x6dc>)
 80017bc:	78db      	ldrb	r3, [r3, #3]
 80017be:	3301      	adds	r3, #1
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4b43      	ldr	r3, [pc, #268]	@ (80018d0 <transform_rotation+0x6dc>)
 80017c4:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 80017c6:	4b42      	ldr	r3, [pc, #264]	@ (80018d0 <transform_rotation+0x6dc>)
 80017c8:	789a      	ldrb	r2, [r3, #2]
 80017ca:	4b41      	ldr	r3, [pc, #260]	@ (80018d0 <transform_rotation+0x6dc>)
 80017cc:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 80017ce:	4b40      	ldr	r3, [pc, #256]	@ (80018d0 <transform_rotation+0x6dc>)
 80017d0:	78db      	ldrb	r3, [r3, #3]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b3e      	ldr	r3, [pc, #248]	@ (80018d0 <transform_rotation+0x6dc>)
 80017d8:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 80017da:	4b3d      	ldr	r3, [pc, #244]	@ (80018d0 <transform_rotation+0x6dc>)
 80017dc:	789a      	ldrb	r2, [r3, #2]
 80017de:	4b3c      	ldr	r3, [pc, #240]	@ (80018d0 <transform_rotation+0x6dc>)
 80017e0:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 2;
 80017e2:	4b3b      	ldr	r3, [pc, #236]	@ (80018d0 <transform_rotation+0x6dc>)
 80017e4:	78db      	ldrb	r3, [r3, #3]
 80017e6:	3b02      	subs	r3, #2
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	4b39      	ldr	r3, [pc, #228]	@ (80018d0 <transform_rotation+0x6dc>)
 80017ec:	725a      	strb	r2, [r3, #9]

					break;
 80017ee:	bf00      	nop
			}

			break;
 80017f0:	e12d      	b.n	8001a4e <transform_rotation+0x85a>
		case(TEEWEE):
			switch(object.Rotation) {
 80017f2:	4b37      	ldr	r3, [pc, #220]	@ (80018d0 <transform_rotation+0x6dc>)
 80017f4:	785b      	ldrb	r3, [r3, #1]
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	f200 812b 	bhi.w	8001a52 <transform_rotation+0x85e>
 80017fc:	a201      	add	r2, pc, #4	@ (adr r2, 8001804 <transform_rotation+0x610>)
 80017fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001802:	bf00      	nop
 8001804:	08001815 	.word	0x08001815
 8001808:	08001853 	.word	0x08001853
 800180c:	08001891 	.word	0x08001891
 8001810:	080018d5 	.word	0x080018d5
				case(ROTATION_0):
						//    1
						// 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;	 //     1
 8001814:	4b2e      	ldr	r3, [pc, #184]	@ (80018d0 <transform_rotation+0x6dc>)
 8001816:	789b      	ldrb	r3, [r3, #2]
 8001818:	3b01      	subs	r3, #1
 800181a:	b2da      	uxtb	r2, r3
 800181c:	4b2c      	ldr	r3, [pc, #176]	@ (80018d0 <transform_rotation+0x6dc>)
 800181e:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 // [1] 1 1
 8001820:	4b2b      	ldr	r3, [pc, #172]	@ (80018d0 <transform_rotation+0x6dc>)
 8001822:	78da      	ldrb	r2, [r3, #3]
 8001824:	4b2a      	ldr	r3, [pc, #168]	@ (80018d0 <transform_rotation+0x6dc>)
 8001826:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;	 //	  1
 8001828:	4b29      	ldr	r3, [pc, #164]	@ (80018d0 <transform_rotation+0x6dc>)
 800182a:	789b      	ldrb	r3, [r3, #2]
 800182c:	3301      	adds	r3, #1
 800182e:	b2da      	uxtb	r2, r3
 8001830:	4b27      	ldr	r3, [pc, #156]	@ (80018d0 <transform_rotation+0x6dc>)
 8001832:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		 // 1 1 [1]
 8001834:	4b26      	ldr	r3, [pc, #152]	@ (80018d0 <transform_rotation+0x6dc>)
 8001836:	78da      	ldrb	r2, [r3, #3]
 8001838:	4b25      	ldr	r3, [pc, #148]	@ (80018d0 <transform_rotation+0x6dc>)
 800183a:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;	     //	 [1]
 800183c:	4b24      	ldr	r3, [pc, #144]	@ (80018d0 <transform_rotation+0x6dc>)
 800183e:	789a      	ldrb	r2, [r3, #2]
 8001840:	4b23      	ldr	r3, [pc, #140]	@ (80018d0 <transform_rotation+0x6dc>)
 8001842:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1 1 1
 8001844:	4b22      	ldr	r3, [pc, #136]	@ (80018d0 <transform_rotation+0x6dc>)
 8001846:	78db      	ldrb	r3, [r3, #3]
 8001848:	3301      	adds	r3, #1
 800184a:	b2da      	uxtb	r2, r3
 800184c:	4b20      	ldr	r3, [pc, #128]	@ (80018d0 <transform_rotation+0x6dc>)
 800184e:	725a      	strb	r2, [r3, #9]

					break;
 8001850:	e05f      	b.n	8001912 <transform_rotation+0x71e>
				case(ROTATION_1):
						//  1
						// [1] 1
						//  1
					object.suboriginbit_0.x = object.originbit.x + 1;
 8001852:	4b1f      	ldr	r3, [pc, #124]	@ (80018d0 <transform_rotation+0x6dc>)
 8001854:	789b      	ldrb	r3, [r3, #2]
 8001856:	3301      	adds	r3, #1
 8001858:	b2da      	uxtb	r2, r3
 800185a:	4b1d      	ldr	r3, [pc, #116]	@ (80018d0 <transform_rotation+0x6dc>)
 800185c:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 800185e:	4b1c      	ldr	r3, [pc, #112]	@ (80018d0 <transform_rotation+0x6dc>)
 8001860:	78da      	ldrb	r2, [r3, #3]
 8001862:	4b1b      	ldr	r3, [pc, #108]	@ (80018d0 <transform_rotation+0x6dc>)
 8001864:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8001866:	4b1a      	ldr	r3, [pc, #104]	@ (80018d0 <transform_rotation+0x6dc>)
 8001868:	789a      	ldrb	r2, [r3, #2]
 800186a:	4b19      	ldr	r3, [pc, #100]	@ (80018d0 <transform_rotation+0x6dc>)
 800186c:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;
 800186e:	4b18      	ldr	r3, [pc, #96]	@ (80018d0 <transform_rotation+0x6dc>)
 8001870:	78db      	ldrb	r3, [r3, #3]
 8001872:	3301      	adds	r3, #1
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4b16      	ldr	r3, [pc, #88]	@ (80018d0 <transform_rotation+0x6dc>)
 8001878:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 800187a:	4b15      	ldr	r3, [pc, #84]	@ (80018d0 <transform_rotation+0x6dc>)
 800187c:	789a      	ldrb	r2, [r3, #2]
 800187e:	4b14      	ldr	r3, [pc, #80]	@ (80018d0 <transform_rotation+0x6dc>)
 8001880:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8001882:	4b13      	ldr	r3, [pc, #76]	@ (80018d0 <transform_rotation+0x6dc>)
 8001884:	78db      	ldrb	r3, [r3, #3]
 8001886:	3b01      	subs	r3, #1
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4b11      	ldr	r3, [pc, #68]	@ (80018d0 <transform_rotation+0x6dc>)
 800188c:	725a      	strb	r2, [r3, #9]

					break;
 800188e:	e040      	b.n	8001912 <transform_rotation+0x71e>
				case(ROTATION_2):
						// 1 [1] 1
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 8001890:	4b0f      	ldr	r3, [pc, #60]	@ (80018d0 <transform_rotation+0x6dc>)
 8001892:	789a      	ldrb	r2, [r3, #2]
 8001894:	4b0e      	ldr	r3, [pc, #56]	@ (80018d0 <transform_rotation+0x6dc>)
 8001896:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y - 1;
 8001898:	4b0d      	ldr	r3, [pc, #52]	@ (80018d0 <transform_rotation+0x6dc>)
 800189a:	78db      	ldrb	r3, [r3, #3]
 800189c:	3b01      	subs	r3, #1
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	4b0b      	ldr	r3, [pc, #44]	@ (80018d0 <transform_rotation+0x6dc>)
 80018a2:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;
 80018a4:	4b0a      	ldr	r3, [pc, #40]	@ (80018d0 <transform_rotation+0x6dc>)
 80018a6:	789b      	ldrb	r3, [r3, #2]
 80018a8:	3301      	adds	r3, #1
 80018aa:	b2da      	uxtb	r2, r3
 80018ac:	4b08      	ldr	r3, [pc, #32]	@ (80018d0 <transform_rotation+0x6dc>)
 80018ae:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 80018b0:	4b07      	ldr	r3, [pc, #28]	@ (80018d0 <transform_rotation+0x6dc>)
 80018b2:	78da      	ldrb	r2, [r3, #3]
 80018b4:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <transform_rotation+0x6dc>)
 80018b6:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 80018b8:	4b05      	ldr	r3, [pc, #20]	@ (80018d0 <transform_rotation+0x6dc>)
 80018ba:	789b      	ldrb	r3, [r3, #2]
 80018bc:	3b01      	subs	r3, #1
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	4b03      	ldr	r3, [pc, #12]	@ (80018d0 <transform_rotation+0x6dc>)
 80018c2:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 80018c4:	4b02      	ldr	r3, [pc, #8]	@ (80018d0 <transform_rotation+0x6dc>)
 80018c6:	78da      	ldrb	r2, [r3, #3]
 80018c8:	4b01      	ldr	r3, [pc, #4]	@ (80018d0 <transform_rotation+0x6dc>)
 80018ca:	725a      	strb	r2, [r3, #9]

					break;
 80018cc:	e021      	b.n	8001912 <transform_rotation+0x71e>
 80018ce:	bf00      	nop
 80018d0:	20025990 	.word	0x20025990
				case(ROTATION_3):
						//    1
						// 1 [1]
						//    1
					object.suboriginbit_0.x = object.originbit.x - 1;
 80018d4:	4b68      	ldr	r3, [pc, #416]	@ (8001a78 <transform_rotation+0x884>)
 80018d6:	789b      	ldrb	r3, [r3, #2]
 80018d8:	3b01      	subs	r3, #1
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	4b66      	ldr	r3, [pc, #408]	@ (8001a78 <transform_rotation+0x884>)
 80018de:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 80018e0:	4b65      	ldr	r3, [pc, #404]	@ (8001a78 <transform_rotation+0x884>)
 80018e2:	78da      	ldrb	r2, [r3, #3]
 80018e4:	4b64      	ldr	r3, [pc, #400]	@ (8001a78 <transform_rotation+0x884>)
 80018e6:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 80018e8:	4b63      	ldr	r3, [pc, #396]	@ (8001a78 <transform_rotation+0x884>)
 80018ea:	789a      	ldrb	r2, [r3, #2]
 80018ec:	4b62      	ldr	r3, [pc, #392]	@ (8001a78 <transform_rotation+0x884>)
 80018ee:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;
 80018f0:	4b61      	ldr	r3, [pc, #388]	@ (8001a78 <transform_rotation+0x884>)
 80018f2:	78db      	ldrb	r3, [r3, #3]
 80018f4:	3301      	adds	r3, #1
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	4b5f      	ldr	r3, [pc, #380]	@ (8001a78 <transform_rotation+0x884>)
 80018fa:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 80018fc:	4b5e      	ldr	r3, [pc, #376]	@ (8001a78 <transform_rotation+0x884>)
 80018fe:	789a      	ldrb	r2, [r3, #2]
 8001900:	4b5d      	ldr	r3, [pc, #372]	@ (8001a78 <transform_rotation+0x884>)
 8001902:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8001904:	4b5c      	ldr	r3, [pc, #368]	@ (8001a78 <transform_rotation+0x884>)
 8001906:	78db      	ldrb	r3, [r3, #3]
 8001908:	3b01      	subs	r3, #1
 800190a:	b2da      	uxtb	r2, r3
 800190c:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <transform_rotation+0x884>)
 800190e:	725a      	strb	r2, [r3, #9]

					break;
 8001910:	bf00      	nop
			}

			break;
 8001912:	e09e      	b.n	8001a52 <transform_rotation+0x85e>
		case(SMASHBOY):
			switch(object.Rotation) {
 8001914:	4b58      	ldr	r3, [pc, #352]	@ (8001a78 <transform_rotation+0x884>)
 8001916:	785b      	ldrb	r3, [r3, #1]
 8001918:	2b03      	cmp	r3, #3
 800191a:	f200 809c 	bhi.w	8001a56 <transform_rotation+0x862>
 800191e:	a201      	add	r2, pc, #4	@ (adr r2, 8001924 <transform_rotation+0x730>)
 8001920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001924:	08001935 	.word	0x08001935
 8001928:	08001977 	.word	0x08001977
 800192c:	080019b9 	.word	0x080019b9
 8001930:	080019fb 	.word	0x080019fb
				case(ROTATION_0):
					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 8001934:	4b50      	ldr	r3, [pc, #320]	@ (8001a78 <transform_rotation+0x884>)
 8001936:	789b      	ldrb	r3, [r3, #2]
 8001938:	3301      	adds	r3, #1
 800193a:	b2da      	uxtb	r2, r3
 800193c:	4b4e      	ldr	r3, [pc, #312]	@ (8001a78 <transform_rotation+0x884>)
 800193e:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 8001940:	4b4d      	ldr	r3, [pc, #308]	@ (8001a78 <transform_rotation+0x884>)
 8001942:	78da      	ldrb	r2, [r3, #3]
 8001944:	4b4c      	ldr	r3, [pc, #304]	@ (8001a78 <transform_rotation+0x884>)
 8001946:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 8001948:	4b4b      	ldr	r3, [pc, #300]	@ (8001a78 <transform_rotation+0x884>)
 800194a:	789a      	ldrb	r2, [r3, #2]
 800194c:	4b4a      	ldr	r3, [pc, #296]	@ (8001a78 <transform_rotation+0x884>)
 800194e:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 8001950:	4b49      	ldr	r3, [pc, #292]	@ (8001a78 <transform_rotation+0x884>)
 8001952:	78db      	ldrb	r3, [r3, #3]
 8001954:	3301      	adds	r3, #1
 8001956:	b2da      	uxtb	r2, r3
 8001958:	4b47      	ldr	r3, [pc, #284]	@ (8001a78 <transform_rotation+0x884>)
 800195a:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 800195c:	4b46      	ldr	r3, [pc, #280]	@ (8001a78 <transform_rotation+0x884>)
 800195e:	789b      	ldrb	r3, [r3, #2]
 8001960:	3301      	adds	r3, #1
 8001962:	b2da      	uxtb	r2, r3
 8001964:	4b44      	ldr	r3, [pc, #272]	@ (8001a78 <transform_rotation+0x884>)
 8001966:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 8001968:	4b43      	ldr	r3, [pc, #268]	@ (8001a78 <transform_rotation+0x884>)
 800196a:	78db      	ldrb	r3, [r3, #3]
 800196c:	3301      	adds	r3, #1
 800196e:	b2da      	uxtb	r2, r3
 8001970:	4b41      	ldr	r3, [pc, #260]	@ (8001a78 <transform_rotation+0x884>)
 8001972:	725a      	strb	r2, [r3, #9]

					break;
 8001974:	e062      	b.n	8001a3c <transform_rotation+0x848>
				case(ROTATION_1):

					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 8001976:	4b40      	ldr	r3, [pc, #256]	@ (8001a78 <transform_rotation+0x884>)
 8001978:	789b      	ldrb	r3, [r3, #2]
 800197a:	3301      	adds	r3, #1
 800197c:	b2da      	uxtb	r2, r3
 800197e:	4b3e      	ldr	r3, [pc, #248]	@ (8001a78 <transform_rotation+0x884>)
 8001980:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 8001982:	4b3d      	ldr	r3, [pc, #244]	@ (8001a78 <transform_rotation+0x884>)
 8001984:	78da      	ldrb	r2, [r3, #3]
 8001986:	4b3c      	ldr	r3, [pc, #240]	@ (8001a78 <transform_rotation+0x884>)
 8001988:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 800198a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a78 <transform_rotation+0x884>)
 800198c:	789a      	ldrb	r2, [r3, #2]
 800198e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a78 <transform_rotation+0x884>)
 8001990:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 8001992:	4b39      	ldr	r3, [pc, #228]	@ (8001a78 <transform_rotation+0x884>)
 8001994:	78db      	ldrb	r3, [r3, #3]
 8001996:	3301      	adds	r3, #1
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4b37      	ldr	r3, [pc, #220]	@ (8001a78 <transform_rotation+0x884>)
 800199c:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 800199e:	4b36      	ldr	r3, [pc, #216]	@ (8001a78 <transform_rotation+0x884>)
 80019a0:	789b      	ldrb	r3, [r3, #2]
 80019a2:	3301      	adds	r3, #1
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4b34      	ldr	r3, [pc, #208]	@ (8001a78 <transform_rotation+0x884>)
 80019a8:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 80019aa:	4b33      	ldr	r3, [pc, #204]	@ (8001a78 <transform_rotation+0x884>)
 80019ac:	78db      	ldrb	r3, [r3, #3]
 80019ae:	3301      	adds	r3, #1
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4b31      	ldr	r3, [pc, #196]	@ (8001a78 <transform_rotation+0x884>)
 80019b4:	725a      	strb	r2, [r3, #9]

					break;
 80019b6:	e041      	b.n	8001a3c <transform_rotation+0x848>
				case(ROTATION_2):
					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 80019b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001a78 <transform_rotation+0x884>)
 80019ba:	789b      	ldrb	r3, [r3, #2]
 80019bc:	3301      	adds	r3, #1
 80019be:	b2da      	uxtb	r2, r3
 80019c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a78 <transform_rotation+0x884>)
 80019c2:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 80019c4:	4b2c      	ldr	r3, [pc, #176]	@ (8001a78 <transform_rotation+0x884>)
 80019c6:	78da      	ldrb	r2, [r3, #3]
 80019c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001a78 <transform_rotation+0x884>)
 80019ca:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 80019cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001a78 <transform_rotation+0x884>)
 80019ce:	789a      	ldrb	r2, [r3, #2]
 80019d0:	4b29      	ldr	r3, [pc, #164]	@ (8001a78 <transform_rotation+0x884>)
 80019d2:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 80019d4:	4b28      	ldr	r3, [pc, #160]	@ (8001a78 <transform_rotation+0x884>)
 80019d6:	78db      	ldrb	r3, [r3, #3]
 80019d8:	3301      	adds	r3, #1
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	4b26      	ldr	r3, [pc, #152]	@ (8001a78 <transform_rotation+0x884>)
 80019de:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 80019e0:	4b25      	ldr	r3, [pc, #148]	@ (8001a78 <transform_rotation+0x884>)
 80019e2:	789b      	ldrb	r3, [r3, #2]
 80019e4:	3301      	adds	r3, #1
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	4b23      	ldr	r3, [pc, #140]	@ (8001a78 <transform_rotation+0x884>)
 80019ea:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 80019ec:	4b22      	ldr	r3, [pc, #136]	@ (8001a78 <transform_rotation+0x884>)
 80019ee:	78db      	ldrb	r3, [r3, #3]
 80019f0:	3301      	adds	r3, #1
 80019f2:	b2da      	uxtb	r2, r3
 80019f4:	4b20      	ldr	r3, [pc, #128]	@ (8001a78 <transform_rotation+0x884>)
 80019f6:	725a      	strb	r2, [r3, #9]

					break;
 80019f8:	e020      	b.n	8001a3c <transform_rotation+0x848>
				case(ROTATION_3):

					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 80019fa:	4b1f      	ldr	r3, [pc, #124]	@ (8001a78 <transform_rotation+0x884>)
 80019fc:	789b      	ldrb	r3, [r3, #2]
 80019fe:	3301      	adds	r3, #1
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4b1d      	ldr	r3, [pc, #116]	@ (8001a78 <transform_rotation+0x884>)
 8001a04:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 8001a06:	4b1c      	ldr	r3, [pc, #112]	@ (8001a78 <transform_rotation+0x884>)
 8001a08:	78da      	ldrb	r2, [r3, #3]
 8001a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8001a78 <transform_rotation+0x884>)
 8001a0c:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 8001a0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a78 <transform_rotation+0x884>)
 8001a10:	789a      	ldrb	r2, [r3, #2]
 8001a12:	4b19      	ldr	r3, [pc, #100]	@ (8001a78 <transform_rotation+0x884>)
 8001a14:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 8001a16:	4b18      	ldr	r3, [pc, #96]	@ (8001a78 <transform_rotation+0x884>)
 8001a18:	78db      	ldrb	r3, [r3, #3]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4b16      	ldr	r3, [pc, #88]	@ (8001a78 <transform_rotation+0x884>)
 8001a20:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 8001a22:	4b15      	ldr	r3, [pc, #84]	@ (8001a78 <transform_rotation+0x884>)
 8001a24:	789b      	ldrb	r3, [r3, #2]
 8001a26:	3301      	adds	r3, #1
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4b13      	ldr	r3, [pc, #76]	@ (8001a78 <transform_rotation+0x884>)
 8001a2c:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 8001a2e:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <transform_rotation+0x884>)
 8001a30:	78db      	ldrb	r3, [r3, #3]
 8001a32:	3301      	adds	r3, #1
 8001a34:	b2da      	uxtb	r2, r3
 8001a36:	4b10      	ldr	r3, [pc, #64]	@ (8001a78 <transform_rotation+0x884>)
 8001a38:	725a      	strb	r2, [r3, #9]

					break;
 8001a3a:	bf00      	nop
			}
		break;
 8001a3c:	e00b      	b.n	8001a56 <transform_rotation+0x862>
			break;
 8001a3e:	bf00      	nop
 8001a40:	e00a      	b.n	8001a58 <transform_rotation+0x864>
			break;
 8001a42:	bf00      	nop
 8001a44:	e008      	b.n	8001a58 <transform_rotation+0x864>
			break;
 8001a46:	bf00      	nop
 8001a48:	e006      	b.n	8001a58 <transform_rotation+0x864>
			break;
 8001a4a:	bf00      	nop
 8001a4c:	e004      	b.n	8001a58 <transform_rotation+0x864>
			break;
 8001a4e:	bf00      	nop
 8001a50:	e002      	b.n	8001a58 <transform_rotation+0x864>
			break;
 8001a52:	bf00      	nop
 8001a54:	e000      	b.n	8001a58 <transform_rotation+0x864>
		break;
 8001a56:	bf00      	nop
	}

	if (check_State() == 0) {
 8001a58:	f7ff fa7c 	bl	8000f54 <check_State>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d104      	bne.n	8001a6c <transform_rotation+0x878>
		object = temp;
 8001a62:	4b05      	ldr	r3, [pc, #20]	@ (8001a78 <transform_rotation+0x884>)
 8001a64:	1d3a      	adds	r2, r7, #4
 8001a66:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a68:	c303      	stmia	r3!, {r0, r1}
 8001a6a:	801a      	strh	r2, [r3, #0]
	}
	Matrix_update();
 8001a6c:	f000 f94e 	bl	8001d0c <Matrix_update>

}
 8001a70:	bf00      	nop
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20025990 	.word	0x20025990

08001a7c <tick_Matrix>:

void tick_Matrix(void){
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
	 // erase the previous state
	Matrix_clear();
 8001a80:	f000 f8ae 	bl	8001be0 <Matrix_clear>
	// create the new object location
	object.originbit.y -= 1;
 8001a84:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <tick_Matrix+0x4c>)
 8001a86:	78db      	ldrb	r3, [r3, #3]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	b2da      	uxtb	r2, r3
 8001a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac8 <tick_Matrix+0x4c>)
 8001a8e:	70da      	strb	r2, [r3, #3]
	object.suboriginbit_0.y -= 1;
 8001a90:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac8 <tick_Matrix+0x4c>)
 8001a92:	795b      	ldrb	r3, [r3, #5]
 8001a94:	3b01      	subs	r3, #1
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac8 <tick_Matrix+0x4c>)
 8001a9a:	715a      	strb	r2, [r3, #5]
	object.suboriginbit_1.y -= 1;
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <tick_Matrix+0x4c>)
 8001a9e:	79db      	ldrb	r3, [r3, #7]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	4b08      	ldr	r3, [pc, #32]	@ (8001ac8 <tick_Matrix+0x4c>)
 8001aa6:	71da      	strb	r2, [r3, #7]
	object.suboriginbit_2.y -= 1;
 8001aa8:	4b07      	ldr	r3, [pc, #28]	@ (8001ac8 <tick_Matrix+0x4c>)
 8001aaa:	7a5b      	ldrb	r3, [r3, #9]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	4b05      	ldr	r3, [pc, #20]	@ (8001ac8 <tick_Matrix+0x4c>)
 8001ab2:	725a      	strb	r2, [r3, #9]
	// draw the new state
	if(check_State() == 2) {
 8001ab4:	f7ff fa4e 	bl	8000f54 <check_State>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d101      	bne.n	8001ac2 <tick_Matrix+0x46>
		Matrix_update();
 8001abe:	f000 f925 	bl	8001d0c <Matrix_update>
	}

}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20025990 	.word	0x20025990

08001acc <printMatrix>:
void printMatrix(void){
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08c      	sub	sp, #48	@ 0x30
 8001ad0:	af00      	add	r7, sp, #0
#if MATRIX_LCD == 1
	// Connect to the LCD screen and update that
	//LCD_Draw_Circle_Fill(x,y,radius,color);
	for (int i = 0; i < ROWS; i++) {
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ad6:	e078      	b.n	8001bca <printMatrix+0xfe>
		for (int j = 0; j < COLS; j++) {
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001adc:	e06f      	b.n	8001bbe <printMatrix+0xf2>
			uint8_t value = dummyTable[i][j];
 8001ade:	493f      	ldr	r1, [pc, #252]	@ (8001bdc <printMatrix+0x110>)
 8001ae0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	18ca      	adds	r2, r1, r3
 8001aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001aee:	4413      	add	r3, r2
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	75fb      	strb	r3, [r7, #23]
			if(value){
 8001af4:	7dfb      	ldrb	r3, [r7, #23]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d02f      	beq.n	8001b5a <printMatrix+0x8e>
				// Calculate top-left corner of the block
				int x = j * 24;//BLOCK_WIDTH;
 8001afa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001afc:	4613      	mov	r3, r2
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	4413      	add	r3, r2
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	60bb      	str	r3, [r7, #8]
				int y = i * 24;//BLOCK_HEIGHT;
 8001b06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b08:	4613      	mov	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4413      	add	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	607b      	str	r3, [r7, #4]

				// Draw the block on the screen

				for (int row = 0; row < BLOCK_HEIGHT; row++) {
 8001b12:	2300      	movs	r3, #0
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b16:	e01c      	b.n	8001b52 <printMatrix+0x86>
					for (int col = 0; col < BLOCK_WIDTH; col++) {
 8001b18:	2300      	movs	r3, #0
 8001b1a:	623b      	str	r3, [r7, #32]
 8001b1c:	e013      	b.n	8001b46 <printMatrix+0x7a>
						LCD_Draw_Pixel(x+col,y+row,LCD_COLOR_RED);
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	4413      	add	r3, r2
 8001b28:	b298      	uxth	r0, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	4413      	add	r3, r2
 8001b34:	b29b      	uxth	r3, r3
 8001b36:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	f7fe ff6a 	bl	8000a14 <LCD_Draw_Pixel>
					for (int col = 0; col < BLOCK_WIDTH; col++) {
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	3301      	adds	r3, #1
 8001b44:	623b      	str	r3, [r7, #32]
 8001b46:	6a3b      	ldr	r3, [r7, #32]
 8001b48:	2b17      	cmp	r3, #23
 8001b4a:	dde8      	ble.n	8001b1e <printMatrix+0x52>
				for (int row = 0; row < BLOCK_HEIGHT; row++) {
 8001b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b4e:	3301      	adds	r3, #1
 8001b50:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b54:	2b17      	cmp	r3, #23
 8001b56:	dddf      	ble.n	8001b18 <printMatrix+0x4c>
 8001b58:	e02e      	b.n	8001bb8 <printMatrix+0xec>
					}
				}
			} else {
				int x = j * 24;//BLOCK_WIDTH;
 8001b5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	4413      	add	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	613b      	str	r3, [r7, #16]
				int y = i * 24;//BLOCK_HEIGHT;
 8001b66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001b68:	4613      	mov	r3, r2
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	4413      	add	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	60fb      	str	r3, [r7, #12]

				// Draw the block on the screen

				for (int row = 0; row < BLOCK_HEIGHT; row++) {
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
 8001b76:	e01c      	b.n	8001bb2 <printMatrix+0xe6>
					for (int col = 0; col < BLOCK_WIDTH; col++) {
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61bb      	str	r3, [r7, #24]
 8001b7c:	e013      	b.n	8001ba6 <printMatrix+0xda>
						LCD_Draw_Pixel(x+col,y+row,LCD_COLOR_WHITE);
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	4413      	add	r3, r2
 8001b88:	b298      	uxth	r0, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	b29b      	uxth	r3, r3
 8001b92:	4413      	add	r3, r2
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	f7fe ff3a 	bl	8000a14 <LCD_Draw_Pixel>
					for (int col = 0; col < BLOCK_WIDTH; col++) {
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	61bb      	str	r3, [r7, #24]
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	2b17      	cmp	r3, #23
 8001baa:	dde8      	ble.n	8001b7e <printMatrix+0xb2>
				for (int row = 0; row < BLOCK_HEIGHT; row++) {
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	61fb      	str	r3, [r7, #28]
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	2b17      	cmp	r3, #23
 8001bb6:	dddf      	ble.n	8001b78 <printMatrix+0xac>
		for (int j = 0; j < COLS; j++) {
 8001bb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bba:	3301      	adds	r3, #1
 8001bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bc0:	2b09      	cmp	r3, #9
 8001bc2:	dd8c      	ble.n	8001ade <printMatrix+0x12>
	for (int i = 0; i < ROWS; i++) {
 8001bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bcc:	2b0c      	cmp	r3, #12
 8001bce:	dd83      	ble.n	8001ad8 <printMatrix+0xc>
		printf("%5d", i);
	}
	printf("\n");

#endif
}
 8001bd0:	bf00      	nop
 8001bd2:	bf00      	nop
 8001bd4:	3730      	adds	r7, #48	@ 0x30
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	2002599c 	.word	0x2002599c

08001be0 <Matrix_clear>:

void Matrix_clear(void) {
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
	if ((object.originbit.y == 0) || (object.suboriginbit_0.y == 0) ||
 8001be4:	4b47      	ldr	r3, [pc, #284]	@ (8001d04 <Matrix_clear+0x124>)
 8001be6:	78db      	ldrb	r3, [r3, #3]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00b      	beq.n	8001c04 <Matrix_clear+0x24>
 8001bec:	4b45      	ldr	r3, [pc, #276]	@ (8001d04 <Matrix_clear+0x124>)
 8001bee:	795b      	ldrb	r3, [r3, #5]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d007      	beq.n	8001c04 <Matrix_clear+0x24>
	    (object.suboriginbit_1.y == 0) ||(object.suboriginbit_2.y == 0))
 8001bf4:	4b43      	ldr	r3, [pc, #268]	@ (8001d04 <Matrix_clear+0x124>)
 8001bf6:	79db      	ldrb	r3, [r3, #7]
	if ((object.originbit.y == 0) || (object.suboriginbit_0.y == 0) ||
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <Matrix_clear+0x24>
	    (object.suboriginbit_1.y == 0) ||(object.suboriginbit_2.y == 0))
 8001bfc:	4b41      	ldr	r3, [pc, #260]	@ (8001d04 <Matrix_clear+0x124>)
 8001bfe:	7a5b      	ldrb	r3, [r3, #9]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d13c      	bne.n	8001c7e <Matrix_clear+0x9e>
	{
		dummyTable[object.originbit.y][object.originbit.x] = 1;
 8001c04:	4b3f      	ldr	r3, [pc, #252]	@ (8001d04 <Matrix_clear+0x124>)
 8001c06:	78db      	ldrb	r3, [r3, #3]
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d04 <Matrix_clear+0x124>)
 8001c0c:	789b      	ldrb	r3, [r3, #2]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	4a3d      	ldr	r2, [pc, #244]	@ (8001d08 <Matrix_clear+0x128>)
 8001c12:	460b      	mov	r3, r1
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	440b      	add	r3, r1
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	4413      	add	r3, r2
 8001c1c:	4403      	add	r3, r0
 8001c1e:	2201      	movs	r2, #1
 8001c20:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_0.y][object.suboriginbit_0.x] = 1;
 8001c22:	4b38      	ldr	r3, [pc, #224]	@ (8001d04 <Matrix_clear+0x124>)
 8001c24:	795b      	ldrb	r3, [r3, #5]
 8001c26:	4619      	mov	r1, r3
 8001c28:	4b36      	ldr	r3, [pc, #216]	@ (8001d04 <Matrix_clear+0x124>)
 8001c2a:	791b      	ldrb	r3, [r3, #4]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	4a36      	ldr	r2, [pc, #216]	@ (8001d08 <Matrix_clear+0x128>)
 8001c30:	460b      	mov	r3, r1
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	4413      	add	r3, r2
 8001c3a:	4403      	add	r3, r0
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_1.y][object.suboriginbit_1.x] = 1;
 8001c40:	4b30      	ldr	r3, [pc, #192]	@ (8001d04 <Matrix_clear+0x124>)
 8001c42:	79db      	ldrb	r3, [r3, #7]
 8001c44:	4619      	mov	r1, r3
 8001c46:	4b2f      	ldr	r3, [pc, #188]	@ (8001d04 <Matrix_clear+0x124>)
 8001c48:	799b      	ldrb	r3, [r3, #6]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	4a2e      	ldr	r2, [pc, #184]	@ (8001d08 <Matrix_clear+0x128>)
 8001c4e:	460b      	mov	r3, r1
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	440b      	add	r3, r1
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	4413      	add	r3, r2
 8001c58:	4403      	add	r3, r0
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_2.y][object.suboriginbit_2.x] = 1;
 8001c5e:	4b29      	ldr	r3, [pc, #164]	@ (8001d04 <Matrix_clear+0x124>)
 8001c60:	7a5b      	ldrb	r3, [r3, #9]
 8001c62:	4619      	mov	r1, r3
 8001c64:	4b27      	ldr	r3, [pc, #156]	@ (8001d04 <Matrix_clear+0x124>)
 8001c66:	7a1b      	ldrb	r3, [r3, #8]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	4a27      	ldr	r2, [pc, #156]	@ (8001d08 <Matrix_clear+0x128>)
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	4413      	add	r3, r2
 8001c76:	4403      	add	r3, r0
 8001c78:	2201      	movs	r2, #1
 8001c7a:	701a      	strb	r2, [r3, #0]
 8001c7c:	e03c      	b.n	8001cf8 <Matrix_clear+0x118>
	}
	else {
		dummyTable[object.originbit.y][object.originbit.x] = 0;
 8001c7e:	4b21      	ldr	r3, [pc, #132]	@ (8001d04 <Matrix_clear+0x124>)
 8001c80:	78db      	ldrb	r3, [r3, #3]
 8001c82:	4619      	mov	r1, r3
 8001c84:	4b1f      	ldr	r3, [pc, #124]	@ (8001d04 <Matrix_clear+0x124>)
 8001c86:	789b      	ldrb	r3, [r3, #2]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	4a1f      	ldr	r2, [pc, #124]	@ (8001d08 <Matrix_clear+0x128>)
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	4403      	add	r3, r0
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_0.y][object.suboriginbit_0.x] = 0;
 8001c9c:	4b19      	ldr	r3, [pc, #100]	@ (8001d04 <Matrix_clear+0x124>)
 8001c9e:	795b      	ldrb	r3, [r3, #5]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4b18      	ldr	r3, [pc, #96]	@ (8001d04 <Matrix_clear+0x124>)
 8001ca4:	791b      	ldrb	r3, [r3, #4]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	4a17      	ldr	r2, [pc, #92]	@ (8001d08 <Matrix_clear+0x128>)
 8001caa:	460b      	mov	r3, r1
 8001cac:	009b      	lsls	r3, r3, #2
 8001cae:	440b      	add	r3, r1
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	4403      	add	r3, r0
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_1.y][object.suboriginbit_1.x] = 0;
 8001cba:	4b12      	ldr	r3, [pc, #72]	@ (8001d04 <Matrix_clear+0x124>)
 8001cbc:	79db      	ldrb	r3, [r3, #7]
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4b10      	ldr	r3, [pc, #64]	@ (8001d04 <Matrix_clear+0x124>)
 8001cc2:	799b      	ldrb	r3, [r3, #6]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	4a10      	ldr	r2, [pc, #64]	@ (8001d08 <Matrix_clear+0x128>)
 8001cc8:	460b      	mov	r3, r1
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	4413      	add	r3, r2
 8001cd2:	4403      	add	r3, r0
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_2.y][object.suboriginbit_2.x] = 0;
 8001cd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001d04 <Matrix_clear+0x124>)
 8001cda:	7a5b      	ldrb	r3, [r3, #9]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <Matrix_clear+0x124>)
 8001ce0:	7a1b      	ldrb	r3, [r3, #8]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	4a08      	ldr	r2, [pc, #32]	@ (8001d08 <Matrix_clear+0x128>)
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	440b      	add	r3, r1
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	4403      	add	r3, r0
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
	}
}
 8001cf6:	bf00      	nop
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20025990 	.word	0x20025990
 8001d08:	2002599c 	.word	0x2002599c

08001d0c <Matrix_update>:
void Matrix_update(void){
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
	dummyTable[object.originbit.y][object.originbit.x] = 1;
 8001d10:	4b20      	ldr	r3, [pc, #128]	@ (8001d94 <Matrix_update+0x88>)
 8001d12:	78db      	ldrb	r3, [r3, #3]
 8001d14:	4619      	mov	r1, r3
 8001d16:	4b1f      	ldr	r3, [pc, #124]	@ (8001d94 <Matrix_update+0x88>)
 8001d18:	789b      	ldrb	r3, [r3, #2]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	4a1e      	ldr	r2, [pc, #120]	@ (8001d98 <Matrix_update+0x8c>)
 8001d1e:	460b      	mov	r3, r1
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	440b      	add	r3, r1
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	4413      	add	r3, r2
 8001d28:	4403      	add	r3, r0
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_0.y][object.suboriginbit_0.x] = 1;
 8001d2e:	4b19      	ldr	r3, [pc, #100]	@ (8001d94 <Matrix_update+0x88>)
 8001d30:	795b      	ldrb	r3, [r3, #5]
 8001d32:	4619      	mov	r1, r3
 8001d34:	4b17      	ldr	r3, [pc, #92]	@ (8001d94 <Matrix_update+0x88>)
 8001d36:	791b      	ldrb	r3, [r3, #4]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	4a17      	ldr	r2, [pc, #92]	@ (8001d98 <Matrix_update+0x8c>)
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	440b      	add	r3, r1
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	4413      	add	r3, r2
 8001d46:	4403      	add	r3, r0
 8001d48:	2201      	movs	r2, #1
 8001d4a:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_1.y][object.suboriginbit_1.x] = 1;
 8001d4c:	4b11      	ldr	r3, [pc, #68]	@ (8001d94 <Matrix_update+0x88>)
 8001d4e:	79db      	ldrb	r3, [r3, #7]
 8001d50:	4619      	mov	r1, r3
 8001d52:	4b10      	ldr	r3, [pc, #64]	@ (8001d94 <Matrix_update+0x88>)
 8001d54:	799b      	ldrb	r3, [r3, #6]
 8001d56:	4618      	mov	r0, r3
 8001d58:	4a0f      	ldr	r2, [pc, #60]	@ (8001d98 <Matrix_update+0x8c>)
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	4403      	add	r3, r0
 8001d66:	2201      	movs	r2, #1
 8001d68:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_2.y][object.suboriginbit_2.x] = 1;
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d94 <Matrix_update+0x88>)
 8001d6c:	7a5b      	ldrb	r3, [r3, #9]
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4b08      	ldr	r3, [pc, #32]	@ (8001d94 <Matrix_update+0x88>)
 8001d72:	7a1b      	ldrb	r3, [r3, #8]
 8001d74:	4618      	mov	r0, r3
 8001d76:	4a08      	ldr	r2, [pc, #32]	@ (8001d98 <Matrix_update+0x8c>)
 8001d78:	460b      	mov	r3, r1
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	4413      	add	r3, r2
 8001d82:	4403      	add	r3, r0
 8001d84:	2201      	movs	r2, #1
 8001d86:	701a      	strb	r2, [r3, #0]
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	20025990 	.word	0x20025990
 8001d98:	2002599c 	.word	0x2002599c

08001d9c <getScheduledEvents>:
 */
#include "Scheduler.h"

static uint32_t scheduledEvents;

uint32_t getScheduledEvents(){
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
	uint32_t returnVal = scheduledEvents;
 8001da2:	4b05      	ldr	r3, [pc, #20]	@ (8001db8 <getScheduledEvents+0x1c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	607b      	str	r3, [r7, #4]
	return returnVal;
 8001da8:	687b      	ldr	r3, [r7, #4]
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	20025a24 	.word	0x20025a24

08001dbc <addScheduledEvent>:

void addScheduledEvent(uint32_t event){
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
	scheduledEvents |= (event);
 8001dc4:	4b05      	ldr	r3, [pc, #20]	@ (8001ddc <addScheduledEvent+0x20>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	4a03      	ldr	r2, [pc, #12]	@ (8001ddc <addScheduledEvent+0x20>)
 8001dce:	6013      	str	r3, [r2, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	20025a24 	.word	0x20025a24

08001de0 <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t event){
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~(event);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	43da      	mvns	r2, r3
 8001dec:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <removeSchedulerEvent+0x24>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4013      	ands	r3, r2
 8001df2:	4a04      	ldr	r2, [pc, #16]	@ (8001e04 <removeSchedulerEvent+0x24>)
 8001df4:	6013      	str	r3, [r2, #0]
}
 8001df6:	bf00      	nop
 8001df8:	370c      	adds	r7, #12
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20025a24 	.word	0x20025a24

08001e08 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001e0c:	f000 f9fe 	bl	800220c <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001e10:	20ca      	movs	r0, #202	@ 0xca
 8001e12:	f000 f943 	bl	800209c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001e16:	20c3      	movs	r0, #195	@ 0xc3
 8001e18:	f000 f94d 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001e1c:	2008      	movs	r0, #8
 8001e1e:	f000 f94a 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001e22:	2050      	movs	r0, #80	@ 0x50
 8001e24:	f000 f947 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001e28:	20cf      	movs	r0, #207	@ 0xcf
 8001e2a:	f000 f937 	bl	800209c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f000 f941 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001e34:	20c1      	movs	r0, #193	@ 0xc1
 8001e36:	f000 f93e 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001e3a:	2030      	movs	r0, #48	@ 0x30
 8001e3c:	f000 f93b 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001e40:	20ed      	movs	r0, #237	@ 0xed
 8001e42:	f000 f92b 	bl	800209c <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001e46:	2064      	movs	r0, #100	@ 0x64
 8001e48:	f000 f935 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001e4c:	2003      	movs	r0, #3
 8001e4e:	f000 f932 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001e52:	2012      	movs	r0, #18
 8001e54:	f000 f92f 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001e58:	2081      	movs	r0, #129	@ 0x81
 8001e5a:	f000 f92c 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001e5e:	20e8      	movs	r0, #232	@ 0xe8
 8001e60:	f000 f91c 	bl	800209c <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001e64:	2085      	movs	r0, #133	@ 0x85
 8001e66:	f000 f926 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f000 f923 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001e70:	2078      	movs	r0, #120	@ 0x78
 8001e72:	f000 f920 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001e76:	20cb      	movs	r0, #203	@ 0xcb
 8001e78:	f000 f910 	bl	800209c <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001e7c:	2039      	movs	r0, #57	@ 0x39
 8001e7e:	f000 f91a 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001e82:	202c      	movs	r0, #44	@ 0x2c
 8001e84:	f000 f917 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e88:	2000      	movs	r0, #0
 8001e8a:	f000 f914 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001e8e:	2034      	movs	r0, #52	@ 0x34
 8001e90:	f000 f911 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001e94:	2002      	movs	r0, #2
 8001e96:	f000 f90e 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001e9a:	20f7      	movs	r0, #247	@ 0xf7
 8001e9c:	f000 f8fe 	bl	800209c <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001ea0:	2020      	movs	r0, #32
 8001ea2:	f000 f908 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001ea6:	20ea      	movs	r0, #234	@ 0xea
 8001ea8:	f000 f8f8 	bl	800209c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001eac:	2000      	movs	r0, #0
 8001eae:	f000 f902 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f000 f8ff 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001eb8:	20b1      	movs	r0, #177	@ 0xb1
 8001eba:	f000 f8ef 	bl	800209c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f000 f8f9 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001ec4:	201b      	movs	r0, #27
 8001ec6:	f000 f8f6 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001eca:	20b6      	movs	r0, #182	@ 0xb6
 8001ecc:	f000 f8e6 	bl	800209c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001ed0:	200a      	movs	r0, #10
 8001ed2:	f000 f8f0 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001ed6:	20a2      	movs	r0, #162	@ 0xa2
 8001ed8:	f000 f8ed 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001edc:	20c0      	movs	r0, #192	@ 0xc0
 8001ede:	f000 f8dd 	bl	800209c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001ee2:	2010      	movs	r0, #16
 8001ee4:	f000 f8e7 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001ee8:	20c1      	movs	r0, #193	@ 0xc1
 8001eea:	f000 f8d7 	bl	800209c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001eee:	2010      	movs	r0, #16
 8001ef0:	f000 f8e1 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001ef4:	20c5      	movs	r0, #197	@ 0xc5
 8001ef6:	f000 f8d1 	bl	800209c <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001efa:	2045      	movs	r0, #69	@ 0x45
 8001efc:	f000 f8db 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001f00:	2015      	movs	r0, #21
 8001f02:	f000 f8d8 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001f06:	20c7      	movs	r0, #199	@ 0xc7
 8001f08:	f000 f8c8 	bl	800209c <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001f0c:	2090      	movs	r0, #144	@ 0x90
 8001f0e:	f000 f8d2 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001f12:	2036      	movs	r0, #54	@ 0x36
 8001f14:	f000 f8c2 	bl	800209c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001f18:	20c8      	movs	r0, #200	@ 0xc8
 8001f1a:	f000 f8cc 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001f1e:	20f2      	movs	r0, #242	@ 0xf2
 8001f20:	f000 f8bc 	bl	800209c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001f24:	2000      	movs	r0, #0
 8001f26:	f000 f8c6 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001f2a:	20b0      	movs	r0, #176	@ 0xb0
 8001f2c:	f000 f8b6 	bl	800209c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001f30:	20c2      	movs	r0, #194	@ 0xc2
 8001f32:	f000 f8c0 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001f36:	20b6      	movs	r0, #182	@ 0xb6
 8001f38:	f000 f8b0 	bl	800209c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001f3c:	200a      	movs	r0, #10
 8001f3e:	f000 f8ba 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001f42:	20a7      	movs	r0, #167	@ 0xa7
 8001f44:	f000 f8b7 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001f48:	2027      	movs	r0, #39	@ 0x27
 8001f4a:	f000 f8b4 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001f4e:	2004      	movs	r0, #4
 8001f50:	f000 f8b1 	bl	80020b6 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001f54:	202a      	movs	r0, #42	@ 0x2a
 8001f56:	f000 f8a1 	bl	800209c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f000 f8ab 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f60:	2000      	movs	r0, #0
 8001f62:	f000 f8a8 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f66:	2000      	movs	r0, #0
 8001f68:	f000 f8a5 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001f6c:	20ef      	movs	r0, #239	@ 0xef
 8001f6e:	f000 f8a2 	bl	80020b6 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001f72:	202b      	movs	r0, #43	@ 0x2b
 8001f74:	f000 f892 	bl	800209c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f000 f89c 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f000 f899 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001f84:	2001      	movs	r0, #1
 8001f86:	f000 f896 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001f8a:	203f      	movs	r0, #63	@ 0x3f
 8001f8c:	f000 f893 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001f90:	20f6      	movs	r0, #246	@ 0xf6
 8001f92:	f000 f883 	bl	800209c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001f96:	2001      	movs	r0, #1
 8001f98:	f000 f88d 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f000 f88a 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001fa2:	2006      	movs	r0, #6
 8001fa4:	f000 f887 	bl	80020b6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001fa8:	202c      	movs	r0, #44	@ 0x2c
 8001faa:	f000 f877 	bl	800209c <ili9341_Write_Reg>
  LCD_Delay(200);
 8001fae:	20c8      	movs	r0, #200	@ 0xc8
 8001fb0:	f000 f9e8 	bl	8002384 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001fb4:	2026      	movs	r0, #38	@ 0x26
 8001fb6:	f000 f871 	bl	800209c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001fba:	2001      	movs	r0, #1
 8001fbc:	f000 f87b 	bl	80020b6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001fc0:	20e0      	movs	r0, #224	@ 0xe0
 8001fc2:	f000 f86b 	bl	800209c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001fc6:	200f      	movs	r0, #15
 8001fc8:	f000 f875 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001fcc:	2029      	movs	r0, #41	@ 0x29
 8001fce:	f000 f872 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001fd2:	2024      	movs	r0, #36	@ 0x24
 8001fd4:	f000 f86f 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001fd8:	200c      	movs	r0, #12
 8001fda:	f000 f86c 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001fde:	200e      	movs	r0, #14
 8001fe0:	f000 f869 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001fe4:	2009      	movs	r0, #9
 8001fe6:	f000 f866 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001fea:	204e      	movs	r0, #78	@ 0x4e
 8001fec:	f000 f863 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001ff0:	2078      	movs	r0, #120	@ 0x78
 8001ff2:	f000 f860 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8001ff6:	203c      	movs	r0, #60	@ 0x3c
 8001ff8:	f000 f85d 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001ffc:	2009      	movs	r0, #9
 8001ffe:	f000 f85a 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8002002:	2013      	movs	r0, #19
 8002004:	f000 f857 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002008:	2005      	movs	r0, #5
 800200a:	f000 f854 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 800200e:	2017      	movs	r0, #23
 8002010:	f000 f851 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8002014:	2011      	movs	r0, #17
 8002016:	f000 f84e 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800201a:	2000      	movs	r0, #0
 800201c:	f000 f84b 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8002020:	20e1      	movs	r0, #225	@ 0xe1
 8002022:	f000 f83b 	bl	800209c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002026:	2000      	movs	r0, #0
 8002028:	f000 f845 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 800202c:	2016      	movs	r0, #22
 800202e:	f000 f842 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002032:	201b      	movs	r0, #27
 8002034:	f000 f83f 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002038:	2004      	movs	r0, #4
 800203a:	f000 f83c 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800203e:	2011      	movs	r0, #17
 8002040:	f000 f839 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8002044:	2007      	movs	r0, #7
 8002046:	f000 f836 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800204a:	2031      	movs	r0, #49	@ 0x31
 800204c:	f000 f833 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8002050:	2033      	movs	r0, #51	@ 0x33
 8002052:	f000 f830 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8002056:	2042      	movs	r0, #66	@ 0x42
 8002058:	f000 f82d 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800205c:	2005      	movs	r0, #5
 800205e:	f000 f82a 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002062:	200c      	movs	r0, #12
 8002064:	f000 f827 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8002068:	200a      	movs	r0, #10
 800206a:	f000 f824 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800206e:	2028      	movs	r0, #40	@ 0x28
 8002070:	f000 f821 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8002074:	202f      	movs	r0, #47	@ 0x2f
 8002076:	f000 f81e 	bl	80020b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800207a:	200f      	movs	r0, #15
 800207c:	f000 f81b 	bl	80020b6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8002080:	2011      	movs	r0, #17
 8002082:	f000 f80b 	bl	800209c <ili9341_Write_Reg>
  LCD_Delay(200);
 8002086:	20c8      	movs	r0, #200	@ 0xc8
 8002088:	f000 f97c 	bl	8002384 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800208c:	2029      	movs	r0, #41	@ 0x29
 800208e:	f000 f805 	bl	800209c <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8002092:	202c      	movs	r0, #44	@ 0x2c
 8002094:	f000 f802 	bl	800209c <ili9341_Write_Reg>
}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}

0800209c <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 f949 	bl	8002340 <LCD_IO_WriteReg>
}
 80020ae:	bf00      	nop
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80020c0:	88fb      	ldrh	r3, [r7, #6]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f000 f91a 	bl	80022fc <LCD_IO_WriteData>
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80020d4:	4819      	ldr	r0, [pc, #100]	@ (800213c <SPI_Init+0x6c>)
 80020d6:	f004 fdb2 	bl	8006c3e <HAL_SPI_GetState>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d12b      	bne.n	8002138 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80020e0:	4b16      	ldr	r3, [pc, #88]	@ (800213c <SPI_Init+0x6c>)
 80020e2:	4a17      	ldr	r2, [pc, #92]	@ (8002140 <SPI_Init+0x70>)
 80020e4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80020e6:	4b15      	ldr	r3, [pc, #84]	@ (800213c <SPI_Init+0x6c>)
 80020e8:	2218      	movs	r2, #24
 80020ea:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80020ec:	4b13      	ldr	r3, [pc, #76]	@ (800213c <SPI_Init+0x6c>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80020f2:	4b12      	ldr	r3, [pc, #72]	@ (800213c <SPI_Init+0x6c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80020f8:	4b10      	ldr	r3, [pc, #64]	@ (800213c <SPI_Init+0x6c>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80020fe:	4b0f      	ldr	r3, [pc, #60]	@ (800213c <SPI_Init+0x6c>)
 8002100:	2200      	movs	r2, #0
 8002102:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002104:	4b0d      	ldr	r3, [pc, #52]	@ (800213c <SPI_Init+0x6c>)
 8002106:	2207      	movs	r2, #7
 8002108:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800210a:	4b0c      	ldr	r3, [pc, #48]	@ (800213c <SPI_Init+0x6c>)
 800210c:	2200      	movs	r2, #0
 800210e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002110:	4b0a      	ldr	r3, [pc, #40]	@ (800213c <SPI_Init+0x6c>)
 8002112:	2200      	movs	r2, #0
 8002114:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002116:	4b09      	ldr	r3, [pc, #36]	@ (800213c <SPI_Init+0x6c>)
 8002118:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800211c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800211e:	4b07      	ldr	r3, [pc, #28]	@ (800213c <SPI_Init+0x6c>)
 8002120:	2200      	movs	r2, #0
 8002122:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002124:	4b05      	ldr	r3, [pc, #20]	@ (800213c <SPI_Init+0x6c>)
 8002126:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800212a:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 800212c:	4803      	ldr	r0, [pc, #12]	@ (800213c <SPI_Init+0x6c>)
 800212e:	f000 f833 	bl	8002198 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002132:	4802      	ldr	r0, [pc, #8]	@ (800213c <SPI_Init+0x6c>)
 8002134:	f004 fb8e 	bl	8006854 <HAL_SPI_Init>
  }
}
 8002138:	bf00      	nop
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20025a28 	.word	0x20025a28
 8002140:	40015000 	.word	0x40015000

08002144 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b084      	sub	sp, #16
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8002152:	4b09      	ldr	r3, [pc, #36]	@ (8002178 <SPI_Write+0x34>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	1db9      	adds	r1, r7, #6
 8002158:	2201      	movs	r2, #1
 800215a:	4808      	ldr	r0, [pc, #32]	@ (800217c <SPI_Write+0x38>)
 800215c:	f004 fc2b 	bl	80069b6 <HAL_SPI_Transmit>
 8002160:	4603      	mov	r3, r0
 8002162:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800216a:	f000 f809 	bl	8002180 <SPI_Error>
  }
}
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	2000000c 	.word	0x2000000c
 800217c:	20025a28 	.word	0x20025a28

08002180 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002184:	4803      	ldr	r0, [pc, #12]	@ (8002194 <SPI_Error+0x14>)
 8002186:	f004 fbee 	bl	8006966 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800218a:	f7ff ffa1 	bl	80020d0 <SPI_Init>
}
 800218e:	bf00      	nop
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20025a28 	.word	0x20025a28

08002198 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	@ 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80021a0:	2300      	movs	r3, #0
 80021a2:	613b      	str	r3, [r7, #16]
 80021a4:	4b17      	ldr	r3, [pc, #92]	@ (8002204 <SPI_MspInit+0x6c>)
 80021a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021a8:	4a16      	ldr	r2, [pc, #88]	@ (8002204 <SPI_MspInit+0x6c>)
 80021aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80021b0:	4b14      	ldr	r3, [pc, #80]	@ (8002204 <SPI_MspInit+0x6c>)
 80021b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]
 80021c0:	4b10      	ldr	r3, [pc, #64]	@ (8002204 <SPI_MspInit+0x6c>)
 80021c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002204 <SPI_MspInit+0x6c>)
 80021c6:	f043 0320 	orr.w	r3, r3, #32
 80021ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80021cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002204 <SPI_MspInit+0x6c>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d0:	f003 0320 	and.w	r3, r3, #32
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80021d8:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80021dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80021de:	2302      	movs	r3, #2
 80021e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80021e2:	2302      	movs	r3, #2
 80021e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80021e6:	2301      	movs	r3, #1
 80021e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80021ea:	2305      	movs	r3, #5
 80021ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	4619      	mov	r1, r3
 80021f4:	4804      	ldr	r0, [pc, #16]	@ (8002208 <SPI_MspInit+0x70>)
 80021f6:	f001 fe07 	bl	8003e08 <HAL_GPIO_Init>
}
 80021fa:	bf00      	nop
 80021fc:	3728      	adds	r7, #40	@ 0x28
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800
 8002208:	40021400 	.word	0x40021400

0800220c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b088      	sub	sp, #32
 8002210:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8002212:	4b36      	ldr	r3, [pc, #216]	@ (80022ec <LCD_IO_Init+0xe0>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d164      	bne.n	80022e4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800221a:	4b34      	ldr	r3, [pc, #208]	@ (80022ec <LCD_IO_Init+0xe0>)
 800221c:	2201      	movs	r2, #1
 800221e:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002220:	2300      	movs	r3, #0
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	4b32      	ldr	r3, [pc, #200]	@ (80022f0 <LCD_IO_Init+0xe4>)
 8002226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002228:	4a31      	ldr	r2, [pc, #196]	@ (80022f0 <LCD_IO_Init+0xe4>)
 800222a:	f043 0308 	orr.w	r3, r3, #8
 800222e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002230:	4b2f      	ldr	r3, [pc, #188]	@ (80022f0 <LCD_IO_Init+0xe4>)
 8002232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	60bb      	str	r3, [r7, #8]
 800223a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800223c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002240:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002242:	2301      	movs	r3, #1
 8002244:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800224a:	2302      	movs	r3, #2
 800224c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800224e:	f107 030c 	add.w	r3, r7, #12
 8002252:	4619      	mov	r1, r3
 8002254:	4827      	ldr	r0, [pc, #156]	@ (80022f4 <LCD_IO_Init+0xe8>)
 8002256:	f001 fdd7 	bl	8003e08 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	607b      	str	r3, [r7, #4]
 800225e:	4b24      	ldr	r3, [pc, #144]	@ (80022f0 <LCD_IO_Init+0xe4>)
 8002260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002262:	4a23      	ldr	r2, [pc, #140]	@ (80022f0 <LCD_IO_Init+0xe4>)
 8002264:	f043 0308 	orr.w	r3, r3, #8
 8002268:	6313      	str	r3, [r2, #48]	@ 0x30
 800226a:	4b21      	ldr	r3, [pc, #132]	@ (80022f0 <LCD_IO_Init+0xe4>)
 800226c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	607b      	str	r3, [r7, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002276:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800227a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800227c:	2301      	movs	r3, #1
 800227e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002284:	2302      	movs	r3, #2
 8002286:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002288:	f107 030c 	add.w	r3, r7, #12
 800228c:	4619      	mov	r1, r3
 800228e:	4819      	ldr	r0, [pc, #100]	@ (80022f4 <LCD_IO_Init+0xe8>)
 8002290:	f001 fdba 	bl	8003e08 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002294:	2300      	movs	r3, #0
 8002296:	603b      	str	r3, [r7, #0]
 8002298:	4b15      	ldr	r3, [pc, #84]	@ (80022f0 <LCD_IO_Init+0xe4>)
 800229a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229c:	4a14      	ldr	r2, [pc, #80]	@ (80022f0 <LCD_IO_Init+0xe4>)
 800229e:	f043 0304 	orr.w	r3, r3, #4
 80022a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80022a4:	4b12      	ldr	r3, [pc, #72]	@ (80022f0 <LCD_IO_Init+0xe4>)
 80022a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	603b      	str	r3, [r7, #0]
 80022ae:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80022b0:	2304      	movs	r3, #4
 80022b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80022b4:	2301      	movs	r3, #1
 80022b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80022bc:	2302      	movs	r3, #2
 80022be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80022c0:	f107 030c 	add.w	r3, r7, #12
 80022c4:	4619      	mov	r1, r3
 80022c6:	480c      	ldr	r0, [pc, #48]	@ (80022f8 <LCD_IO_Init+0xec>)
 80022c8:	f001 fd9e 	bl	8003e08 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80022cc:	2200      	movs	r2, #0
 80022ce:	2104      	movs	r1, #4
 80022d0:	4809      	ldr	r0, [pc, #36]	@ (80022f8 <LCD_IO_Init+0xec>)
 80022d2:	f002 f869 	bl	80043a8 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80022d6:	2201      	movs	r2, #1
 80022d8:	2104      	movs	r1, #4
 80022da:	4807      	ldr	r0, [pc, #28]	@ (80022f8 <LCD_IO_Init+0xec>)
 80022dc:	f002 f864 	bl	80043a8 <HAL_GPIO_WritePin>

    SPI_Init();
 80022e0:	f7ff fef6 	bl	80020d0 <SPI_Init>
  }
}
 80022e4:	bf00      	nop
 80022e6:	3720      	adds	r7, #32
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20025a80 	.word	0x20025a80
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40020c00 	.word	0x40020c00
 80022f8:	40020800 	.word	0x40020800

080022fc <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002306:	2201      	movs	r2, #1
 8002308:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800230c:	480a      	ldr	r0, [pc, #40]	@ (8002338 <LCD_IO_WriteData+0x3c>)
 800230e:	f002 f84b 	bl	80043a8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8002312:	2200      	movs	r2, #0
 8002314:	2104      	movs	r1, #4
 8002316:	4809      	ldr	r0, [pc, #36]	@ (800233c <LCD_IO_WriteData+0x40>)
 8002318:	f002 f846 	bl	80043a8 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff ff10 	bl	8002144 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002324:	2201      	movs	r2, #1
 8002326:	2104      	movs	r1, #4
 8002328:	4804      	ldr	r0, [pc, #16]	@ (800233c <LCD_IO_WriteData+0x40>)
 800232a:	f002 f83d 	bl	80043a8 <HAL_GPIO_WritePin>
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40020c00 	.word	0x40020c00
 800233c:	40020800 	.word	0x40020800

08002340 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800234a:	2200      	movs	r2, #0
 800234c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002350:	480a      	ldr	r0, [pc, #40]	@ (800237c <LCD_IO_WriteReg+0x3c>)
 8002352:	f002 f829 	bl	80043a8 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002356:	2200      	movs	r2, #0
 8002358:	2104      	movs	r1, #4
 800235a:	4809      	ldr	r0, [pc, #36]	@ (8002380 <LCD_IO_WriteReg+0x40>)
 800235c:	f002 f824 	bl	80043a8 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	b29b      	uxth	r3, r3
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff feed 	bl	8002144 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800236a:	2201      	movs	r2, #1
 800236c:	2104      	movs	r1, #4
 800236e:	4804      	ldr	r0, [pc, #16]	@ (8002380 <LCD_IO_WriteReg+0x40>)
 8002370:	f002 f81a 	bl	80043a8 <HAL_GPIO_WritePin>
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40020c00 	.word	0x40020c00
 8002380:	40020800 	.word	0x40020800

08002384 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f001 fb8f 	bl	8003ab0 <HAL_Delay>
}
 8002392:	bf00      	nop
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
	...

0800239c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 80023a2:	f005 fc2d 	bl	8007c00 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023a6:	f001 fb11 	bl	80039cc <HAL_Init>
  //applicationInit();
  /* USER CODE END Init */

  /* Configure the system clock */
  //SystemClock_Config();
  SystemClockOverride();
 80023aa:	f000 f859 	bl	8002460 <SystemClockOverride>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_GPIO_Init();
 80023ae:	f000 fa7b 	bl	80028a8 <MX_GPIO_Init>
  MX_LTDC_Init();
 80023b2:	f000 f8d5 	bl	8002560 <MX_LTDC_Init>
  MX_I2C3_Init();
 80023b6:	f000 f893 	bl	80024e0 <MX_I2C3_Init>
  MX_RNG_Init();
 80023ba:	f000 f983 	bl	80026c4 <MX_RNG_Init>
  MX_TIM2_Init();
 80023be:	f000 f9cd 	bl	800275c <MX_TIM2_Init>
  MX_SPI5_Init();
 80023c2:	f000 f995 	bl	80026f0 <MX_SPI5_Init>
  MX_TIM5_Init();
 80023c6:	f000 fa1f 	bl	8002808 <MX_TIM5_Init>

  /* USER CODE BEGIN 2 */

  applicationInit();
 80023ca:	f7fe f8e1 	bl	8000590 <applicationInit>
  uint32_t eventsToRun;
  START_SCREEN();
 80023ce:	f7fe fc4d 	bl	8000c6c <START_SCREEN>

  /* USER CODE END 2 */

  uint32_t game_ender = 0;
 80023d2:	2300      	movs	r3, #0
 80023d4:	617b      	str	r3, [r7, #20]
  uint8_t BUTTON_START = 0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	74fb      	strb	r3, [r7, #19]
  while(!BUTTON_START) {
 80023da:	e005      	b.n	80023e8 <main+0x4c>
	  BUTTON_START = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0); // read button by polling
 80023dc:	2101      	movs	r1, #1
 80023de:	481c      	ldr	r0, [pc, #112]	@ (8002450 <main+0xb4>)
 80023e0:	f001 ffca 	bl	8004378 <HAL_GPIO_ReadPin>
 80023e4:	4603      	mov	r3, r0
 80023e6:	74fb      	strb	r3, [r7, #19]
  while(!BUTTON_START) {
 80023e8:	7cfb      	ldrb	r3, [r7, #19]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f6      	beq.n	80023dc <main+0x40>
  }
  start_time = __HAL_TIM_GET_COUNTER(&htim5);
 80023ee:	4b19      	ldr	r3, [pc, #100]	@ (8002454 <main+0xb8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f4:	60fb      	str	r3, [r7, #12]
  LCD_Clear(0, LCD_COLOR_WHITE);
 80023f6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80023fa:	2000      	movs	r0, #0
 80023fc:	f7fe fb28 	bl	8000a50 <LCD_Clear>
  addScheduledEvent(MATRIX_UPDATE_EVENT);
 8002400:	2004      	movs	r0, #4
 8002402:	f7ff fcdb 	bl	8001dbc <addScheduledEvent>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
   {
	  eventsToRun = getScheduledEvents();
 8002406:	f7ff fcc9 	bl	8001d9c <getScheduledEvents>
 800240a:	60b8      	str	r0, [r7, #8]
	  if(eventsToRun && MATRIX_UPDATE_EVENT) {printMatrix();}
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d009      	beq.n	8002426 <main+0x8a>
 8002412:	f7ff fb5b 	bl	8001acc <printMatrix>
		GAME_OVER(total_time);
		while(1);
	  }

	  // Just for testing elapsed time
	  game_ender++;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	3301      	adds	r3, #1
 800241a:	617b      	str	r3, [r7, #20]
	  if(game_ender > 3000000) {
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	4a0e      	ldr	r2, [pc, #56]	@ (8002458 <main+0xbc>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d9f0      	bls.n	8002406 <main+0x6a>
 8002424:	e010      	b.n	8002448 <main+0xac>
		end_time = __HAL_TIM_GET_COUNTER(&htim5);
 8002426:	4b0b      	ldr	r3, [pc, #44]	@ (8002454 <main+0xb8>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242c:	607b      	str	r3, [r7, #4]
		total_time = (end_time - start_time)/1000;
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	4a09      	ldr	r2, [pc, #36]	@ (800245c <main+0xc0>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	099b      	lsrs	r3, r3, #6
 800243c:	603b      	str	r3, [r7, #0]
		GAME_OVER(total_time);
 800243e:	6838      	ldr	r0, [r7, #0]
 8002440:	f7fe fc9e 	bl	8000d80 <GAME_OVER>
		while(1);
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <main+0xa8>
		  removeSchedulerEvent(MATRIX_UPDATE_EVENT);
 8002448:	2004      	movs	r0, #4
 800244a:	f7ff fcc9 	bl	8001de0 <removeSchedulerEvent>
	  eventsToRun = getScheduledEvents();
 800244e:	e7da      	b.n	8002406 <main+0x6a>
 8002450:	40020000 	.word	0x40020000
 8002454:	20025c30 	.word	0x20025c30
 8002458:	002dc6c0 	.word	0x002dc6c0
 800245c:	10624dd3 	.word	0x10624dd3

08002460 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b092      	sub	sp, #72	@ 0x48
 8002464:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	603b      	str	r3, [r7, #0]
 800246a:	4b1c      	ldr	r3, [pc, #112]	@ (80024dc <SystemClockOverride+0x7c>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800246e:	4a1b      	ldr	r2, [pc, #108]	@ (80024dc <SystemClockOverride+0x7c>)
 8002470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002474:	6413      	str	r3, [r2, #64]	@ 0x40
 8002476:	4b19      	ldr	r3, [pc, #100]	@ (80024dc <SystemClockOverride+0x7c>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800247a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002482:	2301      	movs	r3, #1
 8002484:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002486:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800248a:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800248c:	2302      	movs	r3, #2
 800248e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002490:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002494:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002496:	2308      	movs	r3, #8
 8002498:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 800249a:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800249e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024a0:	2302      	movs	r3, #2
 80024a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80024a4:	2307      	movs	r3, #7
 80024a6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	4618      	mov	r0, r3
 80024ac:	f003 fb0e 	bl	8005acc <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80024b0:	230f      	movs	r3, #15
 80024b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024b4:	2302      	movs	r3, #2
 80024b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024b8:	2300      	movs	r3, #0
 80024ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80024bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80024c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80024c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024c6:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80024c8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80024cc:	2105      	movs	r1, #5
 80024ce:	4618      	mov	r0, r3
 80024d0:	f003 fd74 	bl	8005fbc <HAL_RCC_ClockConfig>
}
 80024d4:	bf00      	nop
 80024d6:	3748      	adds	r7, #72	@ 0x48
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40023800 	.word	0x40023800

080024e0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80024e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002554 <MX_I2C3_Init+0x74>)
 80024e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002558 <MX_I2C3_Init+0x78>)
 80024e8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80024ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002554 <MX_I2C3_Init+0x74>)
 80024ec:	4a1b      	ldr	r2, [pc, #108]	@ (800255c <MX_I2C3_Init+0x7c>)
 80024ee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80024f0:	4b18      	ldr	r3, [pc, #96]	@ (8002554 <MX_I2C3_Init+0x74>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80024f6:	4b17      	ldr	r3, [pc, #92]	@ (8002554 <MX_I2C3_Init+0x74>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80024fc:	4b15      	ldr	r3, [pc, #84]	@ (8002554 <MX_I2C3_Init+0x74>)
 80024fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002502:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002504:	4b13      	ldr	r3, [pc, #76]	@ (8002554 <MX_I2C3_Init+0x74>)
 8002506:	2200      	movs	r2, #0
 8002508:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800250a:	4b12      	ldr	r3, [pc, #72]	@ (8002554 <MX_I2C3_Init+0x74>)
 800250c:	2200      	movs	r2, #0
 800250e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002510:	4b10      	ldr	r3, [pc, #64]	@ (8002554 <MX_I2C3_Init+0x74>)
 8002512:	2200      	movs	r2, #0
 8002514:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002516:	4b0f      	ldr	r3, [pc, #60]	@ (8002554 <MX_I2C3_Init+0x74>)
 8002518:	2200      	movs	r2, #0
 800251a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800251c:	480d      	ldr	r0, [pc, #52]	@ (8002554 <MX_I2C3_Init+0x74>)
 800251e:	f001 ff8f 	bl	8004440 <HAL_I2C_Init>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d001      	beq.n	800252c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002528:	f000 fb82 	bl	8002c30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800252c:	2100      	movs	r1, #0
 800252e:	4809      	ldr	r0, [pc, #36]	@ (8002554 <MX_I2C3_Init+0x74>)
 8002530:	f002 ffaa 	bl	8005488 <HAL_I2CEx_ConfigAnalogFilter>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800253a:	f000 fb79 	bl	8002c30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800253e:	2100      	movs	r1, #0
 8002540:	4804      	ldr	r0, [pc, #16]	@ (8002554 <MX_I2C3_Init+0x74>)
 8002542:	f002 ffdd 	bl	8005500 <HAL_I2CEx_ConfigDigitalFilter>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800254c:	f000 fb70 	bl	8002c30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}
 8002554:	20025a84 	.word	0x20025a84
 8002558:	40005c00 	.word	0x40005c00
 800255c:	000186a0 	.word	0x000186a0

08002560 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b09a      	sub	sp, #104	@ 0x68
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002566:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800256a:	2234      	movs	r2, #52	@ 0x34
 800256c:	2100      	movs	r1, #0
 800256e:	4618      	mov	r0, r3
 8002570:	f005 fcf6 	bl	8007f60 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8002574:	463b      	mov	r3, r7
 8002576:	2234      	movs	r2, #52	@ 0x34
 8002578:	2100      	movs	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f005 fcf0 	bl	8007f60 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002580:	4b4e      	ldr	r3, [pc, #312]	@ (80026bc <MX_LTDC_Init+0x15c>)
 8002582:	4a4f      	ldr	r2, [pc, #316]	@ (80026c0 <MX_LTDC_Init+0x160>)
 8002584:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002586:	4b4d      	ldr	r3, [pc, #308]	@ (80026bc <MX_LTDC_Init+0x15c>)
 8002588:	2200      	movs	r2, #0
 800258a:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800258c:	4b4b      	ldr	r3, [pc, #300]	@ (80026bc <MX_LTDC_Init+0x15c>)
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002592:	4b4a      	ldr	r3, [pc, #296]	@ (80026bc <MX_LTDC_Init+0x15c>)
 8002594:	2200      	movs	r2, #0
 8002596:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002598:	4b48      	ldr	r3, [pc, #288]	@ (80026bc <MX_LTDC_Init+0x15c>)
 800259a:	2200      	movs	r2, #0
 800259c:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800259e:	4b47      	ldr	r3, [pc, #284]	@ (80026bc <MX_LTDC_Init+0x15c>)
 80025a0:	2207      	movs	r2, #7
 80025a2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80025a4:	4b45      	ldr	r3, [pc, #276]	@ (80026bc <MX_LTDC_Init+0x15c>)
 80025a6:	2203      	movs	r2, #3
 80025a8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80025aa:	4b44      	ldr	r3, [pc, #272]	@ (80026bc <MX_LTDC_Init+0x15c>)
 80025ac:	220e      	movs	r2, #14
 80025ae:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80025b0:	4b42      	ldr	r3, [pc, #264]	@ (80026bc <MX_LTDC_Init+0x15c>)
 80025b2:	2205      	movs	r2, #5
 80025b4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80025b6:	4b41      	ldr	r3, [pc, #260]	@ (80026bc <MX_LTDC_Init+0x15c>)
 80025b8:	f240 228e 	movw	r2, #654	@ 0x28e
 80025bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80025be:	4b3f      	ldr	r3, [pc, #252]	@ (80026bc <MX_LTDC_Init+0x15c>)
 80025c0:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80025c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80025c6:	4b3d      	ldr	r3, [pc, #244]	@ (80026bc <MX_LTDC_Init+0x15c>)
 80025c8:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80025cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80025ce:	4b3b      	ldr	r3, [pc, #236]	@ (80026bc <MX_LTDC_Init+0x15c>)
 80025d0:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80025d4:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80025d6:	4b39      	ldr	r3, [pc, #228]	@ (80026bc <MX_LTDC_Init+0x15c>)
 80025d8:	2200      	movs	r2, #0
 80025da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80025de:	4b37      	ldr	r3, [pc, #220]	@ (80026bc <MX_LTDC_Init+0x15c>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80025e6:	4b35      	ldr	r3, [pc, #212]	@ (80026bc <MX_LTDC_Init+0x15c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80025ee:	4833      	ldr	r0, [pc, #204]	@ (80026bc <MX_LTDC_Init+0x15c>)
 80025f0:	f002 ffc6 	bl	8005580 <HAL_LTDC_Init>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80025fa:	f000 fb19 	bl	8002c30 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8002602:	2300      	movs	r3, #0
 8002604:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8002606:	2300      	movs	r3, #0
 8002608:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800260e:	2300      	movs	r3, #0
 8002610:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8002616:	2300      	movs	r3, #0
 8002618:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800261a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800261e:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002620:	2305      	movs	r3, #5
 8002622:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8002624:	2300      	movs	r3, #0
 8002626:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 800262c:	2300      	movs	r3, #0
 800262e:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002642:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002646:	2200      	movs	r2, #0
 8002648:	4619      	mov	r1, r3
 800264a:	481c      	ldr	r0, [pc, #112]	@ (80026bc <MX_LTDC_Init+0x15c>)
 800264c:	f003 f868 	bl	8005720 <HAL_LTDC_ConfigLayer>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8002656:	f000 faeb 	bl	8002c30 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800265a:	2300      	movs	r3, #0
 800265c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002676:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800267a:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800267c:	2305      	movs	r3, #5
 800267e:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800269e:	463b      	mov	r3, r7
 80026a0:	2201      	movs	r2, #1
 80026a2:	4619      	mov	r1, r3
 80026a4:	4805      	ldr	r0, [pc, #20]	@ (80026bc <MX_LTDC_Init+0x15c>)
 80026a6:	f003 f83b 	bl	8005720 <HAL_LTDC_ConfigLayer>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80026b0:	f000 fabe 	bl	8002c30 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80026b4:	bf00      	nop
 80026b6:	3768      	adds	r7, #104	@ 0x68
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20025ad8 	.word	0x20025ad8
 80026c0:	40016800 	.word	0x40016800

080026c4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80026c8:	4b07      	ldr	r3, [pc, #28]	@ (80026e8 <MX_RNG_Init+0x24>)
 80026ca:	4a08      	ldr	r2, [pc, #32]	@ (80026ec <MX_RNG_Init+0x28>)
 80026cc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80026ce:	4806      	ldr	r0, [pc, #24]	@ (80026e8 <MX_RNG_Init+0x24>)
 80026d0:	f004 f840 	bl	8006754 <HAL_RNG_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80026da:	f000 faa9 	bl	8002c30 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */
   RND_NUM();
 80026de:	f7fe fc01 	bl	8000ee4 <RND_NUM>

  /* USER CODE END RNG_Init 2 */

}
 80026e2:	bf00      	nop
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20025b80 	.word	0x20025b80
 80026ec:	50060800 	.word	0x50060800

080026f0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80026f4:	4b17      	ldr	r3, [pc, #92]	@ (8002754 <MX_SPI5_Init+0x64>)
 80026f6:	4a18      	ldr	r2, [pc, #96]	@ (8002758 <MX_SPI5_Init+0x68>)
 80026f8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80026fa:	4b16      	ldr	r3, [pc, #88]	@ (8002754 <MX_SPI5_Init+0x64>)
 80026fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002700:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8002702:	4b14      	ldr	r3, [pc, #80]	@ (8002754 <MX_SPI5_Init+0x64>)
 8002704:	2200      	movs	r2, #0
 8002706:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002708:	4b12      	ldr	r3, [pc, #72]	@ (8002754 <MX_SPI5_Init+0x64>)
 800270a:	2200      	movs	r2, #0
 800270c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800270e:	4b11      	ldr	r3, [pc, #68]	@ (8002754 <MX_SPI5_Init+0x64>)
 8002710:	2200      	movs	r2, #0
 8002712:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002714:	4b0f      	ldr	r3, [pc, #60]	@ (8002754 <MX_SPI5_Init+0x64>)
 8002716:	2200      	movs	r2, #0
 8002718:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800271a:	4b0e      	ldr	r3, [pc, #56]	@ (8002754 <MX_SPI5_Init+0x64>)
 800271c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002720:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002722:	4b0c      	ldr	r3, [pc, #48]	@ (8002754 <MX_SPI5_Init+0x64>)
 8002724:	2200      	movs	r2, #0
 8002726:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002728:	4b0a      	ldr	r3, [pc, #40]	@ (8002754 <MX_SPI5_Init+0x64>)
 800272a:	2200      	movs	r2, #0
 800272c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800272e:	4b09      	ldr	r3, [pc, #36]	@ (8002754 <MX_SPI5_Init+0x64>)
 8002730:	2200      	movs	r2, #0
 8002732:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002734:	4b07      	ldr	r3, [pc, #28]	@ (8002754 <MX_SPI5_Init+0x64>)
 8002736:	2200      	movs	r2, #0
 8002738:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800273a:	4b06      	ldr	r3, [pc, #24]	@ (8002754 <MX_SPI5_Init+0x64>)
 800273c:	220a      	movs	r2, #10
 800273e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002740:	4804      	ldr	r0, [pc, #16]	@ (8002754 <MX_SPI5_Init+0x64>)
 8002742:	f004 f887 	bl	8006854 <HAL_SPI_Init>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800274c:	f000 fa70 	bl	8002c30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002750:	bf00      	nop
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20025b90 	.word	0x20025b90
 8002758:	40015000 	.word	0x40015000

0800275c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b086      	sub	sp, #24
 8002760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002762:	f107 0308 	add.w	r3, r7, #8
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]
 800276c:	609a      	str	r2, [r3, #8]
 800276e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002770:	463b      	mov	r3, r7
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002778:	4b21      	ldr	r3, [pc, #132]	@ (8002800 <MX_TIM2_Init+0xa4>)
 800277a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800277e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002780:	4b1f      	ldr	r3, [pc, #124]	@ (8002800 <MX_TIM2_Init+0xa4>)
 8002782:	2200      	movs	r2, #0
 8002784:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002786:	4b1e      	ldr	r3, [pc, #120]	@ (8002800 <MX_TIM2_Init+0xa4>)
 8002788:	2210      	movs	r2, #16
 800278a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3999999;//15999999;
 800278c:	4b1c      	ldr	r3, [pc, #112]	@ (8002800 <MX_TIM2_Init+0xa4>)
 800278e:	4a1d      	ldr	r2, [pc, #116]	@ (8002804 <MX_TIM2_Init+0xa8>)
 8002790:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002792:	4b1b      	ldr	r3, [pc, #108]	@ (8002800 <MX_TIM2_Init+0xa4>)
 8002794:	2200      	movs	r2, #0
 8002796:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002798:	4b19      	ldr	r3, [pc, #100]	@ (8002800 <MX_TIM2_Init+0xa4>)
 800279a:	2200      	movs	r2, #0
 800279c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800279e:	4818      	ldr	r0, [pc, #96]	@ (8002800 <MX_TIM2_Init+0xa4>)
 80027a0:	f004 fb38 	bl	8006e14 <HAL_TIM_Base_Init>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80027aa:	f000 fa41 	bl	8002c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027b4:	f107 0308 	add.w	r3, r7, #8
 80027b8:	4619      	mov	r1, r3
 80027ba:	4811      	ldr	r0, [pc, #68]	@ (8002800 <MX_TIM2_Init+0xa4>)
 80027bc:	f004 fd42 	bl	8007244 <HAL_TIM_ConfigClockSource>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d001      	beq.n	80027ca <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80027c6:	f000 fa33 	bl	8002c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027ca:	2300      	movs	r3, #0
 80027cc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027ce:	2300      	movs	r3, #0
 80027d0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027d2:	463b      	mov	r3, r7
 80027d4:	4619      	mov	r1, r3
 80027d6:	480a      	ldr	r0, [pc, #40]	@ (8002800 <MX_TIM2_Init+0xa4>)
 80027d8:	f004 ff6a 	bl	80076b0 <HAL_TIMEx_MasterConfigSynchronization>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80027e2:	f000 fa25 	bl	8002c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 80027e6:	4806      	ldr	r0, [pc, #24]	@ (8002800 <MX_TIM2_Init+0xa4>)
 80027e8:	f004 fbcc 	bl	8006f84 <HAL_TIM_Base_Start_IT>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <MX_TIM2_Init+0x9a>
      Error_Handler(); // Handle errors appropriately
 80027f2:	f000 fa1d 	bl	8002c30 <Error_Handler>
  }
  /* USER CODE END TIM2_Init 2 */

}
 80027f6:	bf00      	nop
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}
 80027fe:	bf00      	nop
 8002800:	20025be8 	.word	0x20025be8
 8002804:	003d08ff 	.word	0x003d08ff

08002808 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800280e:	f107 0308 	add.w	r3, r7, #8
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	605a      	str	r2, [r3, #4]
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800281c:	463b      	mov	r3, r7
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002824:	4b1e      	ldr	r3, [pc, #120]	@ (80028a0 <MX_TIM5_Init+0x98>)
 8002826:	4a1f      	ldr	r2, [pc, #124]	@ (80028a4 <MX_TIM5_Init+0x9c>)
 8002828:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800282a:	4b1d      	ldr	r3, [pc, #116]	@ (80028a0 <MX_TIM5_Init+0x98>)
 800282c:	2200      	movs	r2, #0
 800282e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002830:	4b1b      	ldr	r3, [pc, #108]	@ (80028a0 <MX_TIM5_Init+0x98>)
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002836:	4b1a      	ldr	r3, [pc, #104]	@ (80028a0 <MX_TIM5_Init+0x98>)
 8002838:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800283c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800283e:	4b18      	ldr	r3, [pc, #96]	@ (80028a0 <MX_TIM5_Init+0x98>)
 8002840:	2200      	movs	r2, #0
 8002842:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002844:	4b16      	ldr	r3, [pc, #88]	@ (80028a0 <MX_TIM5_Init+0x98>)
 8002846:	2200      	movs	r2, #0
 8002848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800284a:	4815      	ldr	r0, [pc, #84]	@ (80028a0 <MX_TIM5_Init+0x98>)
 800284c:	f004 fae2 	bl	8006e14 <HAL_TIM_Base_Init>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002856:	f000 f9eb 	bl	8002c30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800285a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800285e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002860:	f107 0308 	add.w	r3, r7, #8
 8002864:	4619      	mov	r1, r3
 8002866:	480e      	ldr	r0, [pc, #56]	@ (80028a0 <MX_TIM5_Init+0x98>)
 8002868:	f004 fcec 	bl	8007244 <HAL_TIM_ConfigClockSource>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002872:	f000 f9dd 	bl	8002c30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002876:	2300      	movs	r3, #0
 8002878:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800287a:	2300      	movs	r3, #0
 800287c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800287e:	463b      	mov	r3, r7
 8002880:	4619      	mov	r1, r3
 8002882:	4807      	ldr	r0, [pc, #28]	@ (80028a0 <MX_TIM5_Init+0x98>)
 8002884:	f004 ff14 	bl	80076b0 <HAL_TIMEx_MasterConfigSynchronization>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800288e:	f000 f9cf 	bl	8002c30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  HAL_TIM_Base_Start(&htim5);
 8002892:	4803      	ldr	r0, [pc, #12]	@ (80028a0 <MX_TIM5_Init+0x98>)
 8002894:	f004 fb0e 	bl	8006eb4 <HAL_TIM_Base_Start>
  /* USER CODE END TIM5_Init 2 */

}
 8002898:	bf00      	nop
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20025c30 	.word	0x20025c30
 80028a4:	40000c00 	.word	0x40000c00

080028a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b08e      	sub	sp, #56	@ 0x38
 80028ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	605a      	str	r2, [r3, #4]
 80028b8:	609a      	str	r2, [r3, #8]
 80028ba:	60da      	str	r2, [r3, #12]
 80028bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	623b      	str	r3, [r7, #32]
 80028c2:	4bb3      	ldr	r3, [pc, #716]	@ (8002b90 <MX_GPIO_Init+0x2e8>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	4ab2      	ldr	r2, [pc, #712]	@ (8002b90 <MX_GPIO_Init+0x2e8>)
 80028c8:	f043 0304 	orr.w	r3, r3, #4
 80028cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ce:	4bb0      	ldr	r3, [pc, #704]	@ (8002b90 <MX_GPIO_Init+0x2e8>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	623b      	str	r3, [r7, #32]
 80028d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	61fb      	str	r3, [r7, #28]
 80028de:	4bac      	ldr	r3, [pc, #688]	@ (8002b90 <MX_GPIO_Init+0x2e8>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	4aab      	ldr	r2, [pc, #684]	@ (8002b90 <MX_GPIO_Init+0x2e8>)
 80028e4:	f043 0320 	orr.w	r3, r3, #32
 80028e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ea:	4ba9      	ldr	r3, [pc, #676]	@ (8002b90 <MX_GPIO_Init+0x2e8>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	f003 0320 	and.w	r3, r3, #32
 80028f2:	61fb      	str	r3, [r7, #28]
 80028f4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	4ba5      	ldr	r3, [pc, #660]	@ (8002b90 <MX_GPIO_Init+0x2e8>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	4aa4      	ldr	r2, [pc, #656]	@ (8002b90 <MX_GPIO_Init+0x2e8>)
 8002900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002904:	6313      	str	r3, [r2, #48]	@ 0x30
 8002906:	4ba2      	ldr	r3, [pc, #648]	@ (8002b90 <MX_GPIO_Init+0x2e8>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800290e:	61bb      	str	r3, [r7, #24]
 8002910:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	4b9e      	ldr	r3, [pc, #632]	@ (8002b90 <MX_GPIO_Init+0x2e8>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291a:	4a9d      	ldr	r2, [pc, #628]	@ (8002b90 <MX_GPIO_Init+0x2e8>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6313      	str	r3, [r2, #48]	@ 0x30
 8002922:	4b9b      	ldr	r3, [pc, #620]	@ (8002b90 <MX_GPIO_Init+0x2e8>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	613b      	str	r3, [r7, #16]
 8002932:	4b97      	ldr	r3, [pc, #604]	@ (8002b90 <MX_GPIO_Init+0x2e8>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	4a96      	ldr	r2, [pc, #600]	@ (8002b90 <MX_GPIO_Init+0x2e8>)
 8002938:	f043 0302 	orr.w	r3, r3, #2
 800293c:	6313      	str	r3, [r2, #48]	@ 0x30
 800293e:	4b94      	ldr	r3, [pc, #592]	@ (8002b90 <MX_GPIO_Init+0x2e8>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	60fb      	str	r3, [r7, #12]
 800294e:	4b90      	ldr	r3, [pc, #576]	@ (8002b90 <MX_GPIO_Init+0x2e8>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002952:	4a8f      	ldr	r2, [pc, #572]	@ (8002b90 <MX_GPIO_Init+0x2e8>)
 8002954:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002958:	6313      	str	r3, [r2, #48]	@ 0x30
 800295a:	4b8d      	ldr	r3, [pc, #564]	@ (8002b90 <MX_GPIO_Init+0x2e8>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002962:	60fb      	str	r3, [r7, #12]
 8002964:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	60bb      	str	r3, [r7, #8]
 800296a:	4b89      	ldr	r3, [pc, #548]	@ (8002b90 <MX_GPIO_Init+0x2e8>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	4a88      	ldr	r2, [pc, #544]	@ (8002b90 <MX_GPIO_Init+0x2e8>)
 8002970:	f043 0310 	orr.w	r3, r3, #16
 8002974:	6313      	str	r3, [r2, #48]	@ 0x30
 8002976:	4b86      	ldr	r3, [pc, #536]	@ (8002b90 <MX_GPIO_Init+0x2e8>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	f003 0310 	and.w	r3, r3, #16
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	607b      	str	r3, [r7, #4]
 8002986:	4b82      	ldr	r3, [pc, #520]	@ (8002b90 <MX_GPIO_Init+0x2e8>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	4a81      	ldr	r2, [pc, #516]	@ (8002b90 <MX_GPIO_Init+0x2e8>)
 800298c:	f043 0308 	orr.w	r3, r3, #8
 8002990:	6313      	str	r3, [r2, #48]	@ 0x30
 8002992:	4b7f      	ldr	r3, [pc, #508]	@ (8002b90 <MX_GPIO_Init+0x2e8>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	607b      	str	r3, [r7, #4]
 800299c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800299e:	2200      	movs	r2, #0
 80029a0:	2116      	movs	r1, #22
 80029a2:	487c      	ldr	r0, [pc, #496]	@ (8002b94 <MX_GPIO_Init+0x2ec>)
 80029a4:	f001 fd00 	bl	80043a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80029a8:	2200      	movs	r2, #0
 80029aa:	2180      	movs	r1, #128	@ 0x80
 80029ac:	487a      	ldr	r0, [pc, #488]	@ (8002b98 <MX_GPIO_Init+0x2f0>)
 80029ae:	f001 fcfb 	bl	80043a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80029b2:	2200      	movs	r2, #0
 80029b4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80029b8:	4878      	ldr	r0, [pc, #480]	@ (8002b9c <MX_GPIO_Init+0x2f4>)
 80029ba:	f001 fcf5 	bl	80043a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80029be:	2200      	movs	r2, #0
 80029c0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80029c4:	4876      	ldr	r0, [pc, #472]	@ (8002ba0 <MX_GPIO_Init+0x2f8>)
 80029c6:	f001 fcef 	bl	80043a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80029ca:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80029ce:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d0:	2302      	movs	r3, #2
 80029d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d8:	2303      	movs	r3, #3
 80029da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029dc:	230c      	movs	r3, #12
 80029de:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80029e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029e4:	4619      	mov	r1, r3
 80029e6:	486f      	ldr	r0, [pc, #444]	@ (8002ba4 <MX_GPIO_Init+0x2fc>)
 80029e8:	f001 fa0e 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80029ec:	2301      	movs	r3, #1
 80029ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f0:	2302      	movs	r3, #2
 80029f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f4:	2300      	movs	r3, #0
 80029f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f8:	2303      	movs	r3, #3
 80029fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80029fc:	230c      	movs	r3, #12
 80029fe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002a00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a04:	4619      	mov	r1, r3
 8002a06:	4863      	ldr	r0, [pc, #396]	@ (8002b94 <MX_GPIO_Init+0x2ec>)
 8002a08:	f001 f9fe 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002a0c:	2316      	movs	r3, #22
 8002a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a10:	2301      	movs	r3, #1
 8002a12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a20:	4619      	mov	r1, r3
 8002a22:	485c      	ldr	r0, [pc, #368]	@ (8002b94 <MX_GPIO_Init+0x2ec>)
 8002a24:	f001 f9f0 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a2c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002a30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002a36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4856      	ldr	r0, [pc, #344]	@ (8002b98 <MX_GPIO_Init+0x2f0>)
 8002a3e:	f001 f9e3 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002a42:	f248 0306 	movw	r3, #32774	@ 0x8006
 8002a46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002a48:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a56:	4619      	mov	r1, r3
 8002a58:	484f      	ldr	r0, [pc, #316]	@ (8002b98 <MX_GPIO_Init+0x2f0>)
 8002a5a:	f001 f9d5 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002a5e:	2380      	movs	r3, #128	@ 0x80
 8002a60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a62:	2301      	movs	r3, #1
 8002a64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a66:	2300      	movs	r3, #0
 8002a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a72:	4619      	mov	r1, r3
 8002a74:	4848      	ldr	r0, [pc, #288]	@ (8002b98 <MX_GPIO_Init+0x2f0>)
 8002a76:	f001 f9c7 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002a7a:	2320      	movs	r3, #32
 8002a7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002a7e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002a88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4841      	ldr	r0, [pc, #260]	@ (8002b94 <MX_GPIO_Init+0x2ec>)
 8002a90:	f001 f9ba 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002a94:	2304      	movs	r3, #4
 8002a96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002aa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002aa4:	4619      	mov	r1, r3
 8002aa6:	4840      	ldr	r0, [pc, #256]	@ (8002ba8 <MX_GPIO_Init+0x300>)
 8002aa8:	f001 f9ae 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002aac:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002ab0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002aba:	2303      	movs	r3, #3
 8002abc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002abe:	230c      	movs	r3, #12
 8002ac0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ac2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	4835      	ldr	r0, [pc, #212]	@ (8002ba0 <MX_GPIO_Init+0x2f8>)
 8002aca:	f001 f99d 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002ace:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002ad2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002adc:	2303      	movs	r3, #3
 8002ade:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ae0:	230c      	movs	r3, #12
 8002ae2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ae4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4830      	ldr	r0, [pc, #192]	@ (8002bac <MX_GPIO_Init+0x304>)
 8002aec:	f001 f98c 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002af0:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002af4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af6:	2302      	movs	r3, #2
 8002af8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afe:	2300      	movs	r3, #0
 8002b00:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002b02:	230c      	movs	r3, #12
 8002b04:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b0a:	4619      	mov	r1, r3
 8002b0c:	4826      	ldr	r0, [pc, #152]	@ (8002ba8 <MX_GPIO_Init+0x300>)
 8002b0e:	f001 f97b 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002b12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002b20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b24:	4619      	mov	r1, r3
 8002b26:	4820      	ldr	r0, [pc, #128]	@ (8002ba8 <MX_GPIO_Init+0x300>)
 8002b28:	f001 f96e 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002b2c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002b30:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b32:	2302      	movs	r3, #2
 8002b34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002b3e:	230c      	movs	r3, #12
 8002b40:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b46:	4619      	mov	r1, r3
 8002b48:	4814      	ldr	r0, [pc, #80]	@ (8002b9c <MX_GPIO_Init+0x2f4>)
 8002b4a:	f001 f95d 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002b4e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b54:	2300      	movs	r3, #0
 8002b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002b5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b60:	4619      	mov	r1, r3
 8002b62:	480e      	ldr	r0, [pc, #56]	@ (8002b9c <MX_GPIO_Init+0x2f4>)
 8002b64:	f001 f950 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002b68:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b76:	2300      	movs	r3, #0
 8002b78:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4806      	ldr	r0, [pc, #24]	@ (8002b9c <MX_GPIO_Init+0x2f4>)
 8002b82:	f001 f941 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002b86:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b8c:	e010      	b.n	8002bb0 <MX_GPIO_Init+0x308>
 8002b8e:	bf00      	nop
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40020800 	.word	0x40020800
 8002b98:	40020000 	.word	0x40020000
 8002b9c:	40020c00 	.word	0x40020c00
 8002ba0:	40021800 	.word	0x40021800
 8002ba4:	40021400 	.word	0x40021400
 8002ba8:	40020400 	.word	0x40020400
 8002bac:	40021000 	.word	0x40021000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bbc:	2307      	movs	r3, #7
 8002bbe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4817      	ldr	r0, [pc, #92]	@ (8002c24 <MX_GPIO_Init+0x37c>)
 8002bc8:	f001 f91e 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002bcc:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002be2:	4619      	mov	r1, r3
 8002be4:	4810      	ldr	r0, [pc, #64]	@ (8002c28 <MX_GPIO_Init+0x380>)
 8002be6:	f001 f90f 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002bea:	2360      	movs	r3, #96	@ 0x60
 8002bec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bfa:	230c      	movs	r3, #12
 8002bfc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c02:	4619      	mov	r1, r3
 8002c04:	4809      	ldr	r0, [pc, #36]	@ (8002c2c <MX_GPIO_Init+0x384>)
 8002c06:	f001 f8ff 	bl	8003e08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	2006      	movs	r0, #6
 8002c10:	f001 f88f 	bl	8003d32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002c14:	2006      	movs	r0, #6
 8002c16:	f001 f8a8 	bl	8003d6a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c1a:	bf00      	nop
 8002c1c:	3738      	adds	r7, #56	@ 0x38
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40020000 	.word	0x40020000
 8002c28:	40021800 	.word	0x40021800
 8002c2c:	40020400 	.word	0x40020400

08002c30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002c34:	b672      	cpsid	i
}
 8002c36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c38:	bf00      	nop
 8002c3a:	e7fd      	b.n	8002c38 <Error_Handler+0x8>

08002c3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	607b      	str	r3, [r7, #4]
 8002c46:	4b10      	ldr	r3, [pc, #64]	@ (8002c88 <HAL_MspInit+0x4c>)
 8002c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c4a:	4a0f      	ldr	r2, [pc, #60]	@ (8002c88 <HAL_MspInit+0x4c>)
 8002c4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c50:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c52:	4b0d      	ldr	r3, [pc, #52]	@ (8002c88 <HAL_MspInit+0x4c>)
 8002c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c5a:	607b      	str	r3, [r7, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	603b      	str	r3, [r7, #0]
 8002c62:	4b09      	ldr	r3, [pc, #36]	@ (8002c88 <HAL_MspInit+0x4c>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c66:	4a08      	ldr	r2, [pc, #32]	@ (8002c88 <HAL_MspInit+0x4c>)
 8002c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c6e:	4b06      	ldr	r3, [pc, #24]	@ (8002c88 <HAL_MspInit+0x4c>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002c7a:	2007      	movs	r0, #7
 8002c7c:	f001 f84e 	bl	8003d1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c80:	bf00      	nop
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40023800 	.word	0x40023800

08002c8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08a      	sub	sp, #40	@ 0x28
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c94:	f107 0314 	add.w	r3, r7, #20
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a29      	ldr	r2, [pc, #164]	@ (8002d50 <HAL_I2C_MspInit+0xc4>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d14b      	bne.n	8002d46 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cae:	2300      	movs	r3, #0
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	4b28      	ldr	r3, [pc, #160]	@ (8002d54 <HAL_I2C_MspInit+0xc8>)
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb6:	4a27      	ldr	r2, [pc, #156]	@ (8002d54 <HAL_I2C_MspInit+0xc8>)
 8002cb8:	f043 0304 	orr.w	r3, r3, #4
 8002cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cbe:	4b25      	ldr	r3, [pc, #148]	@ (8002d54 <HAL_I2C_MspInit+0xc8>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	613b      	str	r3, [r7, #16]
 8002cc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60fb      	str	r3, [r7, #12]
 8002cce:	4b21      	ldr	r3, [pc, #132]	@ (8002d54 <HAL_I2C_MspInit+0xc8>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd2:	4a20      	ldr	r2, [pc, #128]	@ (8002d54 <HAL_I2C_MspInit+0xc8>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cda:	4b1e      	ldr	r3, [pc, #120]	@ (8002d54 <HAL_I2C_MspInit+0xc8>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	60fb      	str	r3, [r7, #12]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002ce6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002cec:	2312      	movs	r3, #18
 8002cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002cf8:	2304      	movs	r3, #4
 8002cfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002cfc:	f107 0314 	add.w	r3, r7, #20
 8002d00:	4619      	mov	r1, r3
 8002d02:	4815      	ldr	r0, [pc, #84]	@ (8002d58 <HAL_I2C_MspInit+0xcc>)
 8002d04:	f001 f880 	bl	8003e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002d08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d0e:	2312      	movs	r3, #18
 8002d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d16:	2300      	movs	r3, #0
 8002d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d1a:	2304      	movs	r3, #4
 8002d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002d1e:	f107 0314 	add.w	r3, r7, #20
 8002d22:	4619      	mov	r1, r3
 8002d24:	480d      	ldr	r0, [pc, #52]	@ (8002d5c <HAL_I2C_MspInit+0xd0>)
 8002d26:	f001 f86f 	bl	8003e08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60bb      	str	r3, [r7, #8]
 8002d2e:	4b09      	ldr	r3, [pc, #36]	@ (8002d54 <HAL_I2C_MspInit+0xc8>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	4a08      	ldr	r2, [pc, #32]	@ (8002d54 <HAL_I2C_MspInit+0xc8>)
 8002d34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d3a:	4b06      	ldr	r3, [pc, #24]	@ (8002d54 <HAL_I2C_MspInit+0xc8>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d42:	60bb      	str	r3, [r7, #8]
 8002d44:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002d46:	bf00      	nop
 8002d48:	3728      	adds	r7, #40	@ 0x28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40005c00 	.word	0x40005c00
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40020800 	.word	0x40020800
 8002d5c:	40020000 	.word	0x40020000

08002d60 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b09a      	sub	sp, #104	@ 0x68
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d68:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	605a      	str	r2, [r3, #4]
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	60da      	str	r2, [r3, #12]
 8002d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d7c:	2230      	movs	r2, #48	@ 0x30
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4618      	mov	r0, r3
 8002d82:	f005 f8ed 	bl	8007f60 <memset>
  if(hltdc->Instance==LTDC)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a81      	ldr	r2, [pc, #516]	@ (8002f90 <HAL_LTDC_MspInit+0x230>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	f040 80fa 	bne.w	8002f86 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002d92:	2308      	movs	r3, #8
 8002d94:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002d96:	2332      	movs	r3, #50	@ 0x32
 8002d98:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002da2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002da6:	4618      	mov	r0, r3
 8002da8:	f003 fb14 	bl	80063d4 <HAL_RCCEx_PeriphCLKConfig>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8002db2:	f7ff ff3d 	bl	8002c30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002db6:	2300      	movs	r3, #0
 8002db8:	623b      	str	r3, [r7, #32]
 8002dba:	4b76      	ldr	r3, [pc, #472]	@ (8002f94 <HAL_LTDC_MspInit+0x234>)
 8002dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dbe:	4a75      	ldr	r2, [pc, #468]	@ (8002f94 <HAL_LTDC_MspInit+0x234>)
 8002dc0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002dc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dc6:	4b73      	ldr	r3, [pc, #460]	@ (8002f94 <HAL_LTDC_MspInit+0x234>)
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dca:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002dce:	623b      	str	r3, [r7, #32]
 8002dd0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	4b6f      	ldr	r3, [pc, #444]	@ (8002f94 <HAL_LTDC_MspInit+0x234>)
 8002dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dda:	4a6e      	ldr	r2, [pc, #440]	@ (8002f94 <HAL_LTDC_MspInit+0x234>)
 8002ddc:	f043 0320 	orr.w	r3, r3, #32
 8002de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002de2:	4b6c      	ldr	r3, [pc, #432]	@ (8002f94 <HAL_LTDC_MspInit+0x234>)
 8002de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de6:	f003 0320 	and.w	r3, r3, #32
 8002dea:	61fb      	str	r3, [r7, #28]
 8002dec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dee:	2300      	movs	r3, #0
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	4b68      	ldr	r3, [pc, #416]	@ (8002f94 <HAL_LTDC_MspInit+0x234>)
 8002df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df6:	4a67      	ldr	r2, [pc, #412]	@ (8002f94 <HAL_LTDC_MspInit+0x234>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dfe:	4b65      	ldr	r3, [pc, #404]	@ (8002f94 <HAL_LTDC_MspInit+0x234>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	61bb      	str	r3, [r7, #24]
 8002e08:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	4b61      	ldr	r3, [pc, #388]	@ (8002f94 <HAL_LTDC_MspInit+0x234>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e12:	4a60      	ldr	r2, [pc, #384]	@ (8002f94 <HAL_LTDC_MspInit+0x234>)
 8002e14:	f043 0302 	orr.w	r3, r3, #2
 8002e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e1a:	4b5e      	ldr	r3, [pc, #376]	@ (8002f94 <HAL_LTDC_MspInit+0x234>)
 8002e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
 8002e2a:	4b5a      	ldr	r3, [pc, #360]	@ (8002f94 <HAL_LTDC_MspInit+0x234>)
 8002e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2e:	4a59      	ldr	r2, [pc, #356]	@ (8002f94 <HAL_LTDC_MspInit+0x234>)
 8002e30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e36:	4b57      	ldr	r3, [pc, #348]	@ (8002f94 <HAL_LTDC_MspInit+0x234>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e3e:	613b      	str	r3, [r7, #16]
 8002e40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	60fb      	str	r3, [r7, #12]
 8002e46:	4b53      	ldr	r3, [pc, #332]	@ (8002f94 <HAL_LTDC_MspInit+0x234>)
 8002e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4a:	4a52      	ldr	r2, [pc, #328]	@ (8002f94 <HAL_LTDC_MspInit+0x234>)
 8002e4c:	f043 0304 	orr.w	r3, r3, #4
 8002e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e52:	4b50      	ldr	r3, [pc, #320]	@ (8002f94 <HAL_LTDC_MspInit+0x234>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	4b4c      	ldr	r3, [pc, #304]	@ (8002f94 <HAL_LTDC_MspInit+0x234>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e66:	4a4b      	ldr	r2, [pc, #300]	@ (8002f94 <HAL_LTDC_MspInit+0x234>)
 8002e68:	f043 0308 	orr.w	r3, r3, #8
 8002e6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e6e:	4b49      	ldr	r3, [pc, #292]	@ (8002f94 <HAL_LTDC_MspInit+0x234>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e72:	f003 0308 	and.w	r3, r3, #8
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002e7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e7e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e80:	2302      	movs	r3, #2
 8002e82:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002e8c:	230e      	movs	r3, #14
 8002e8e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002e90:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e94:	4619      	mov	r1, r3
 8002e96:	4840      	ldr	r0, [pc, #256]	@ (8002f98 <HAL_LTDC_MspInit+0x238>)
 8002e98:	f000 ffb6 	bl	8003e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002e9c:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002ea0:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002eae:	230e      	movs	r3, #14
 8002eb0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4838      	ldr	r0, [pc, #224]	@ (8002f9c <HAL_LTDC_MspInit+0x23c>)
 8002eba:	f000 ffa5 	bl	8003e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002ece:	2309      	movs	r3, #9
 8002ed0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ed2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4831      	ldr	r0, [pc, #196]	@ (8002fa0 <HAL_LTDC_MspInit+0x240>)
 8002eda:	f000 ff95 	bl	8003e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002ede:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002ee2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eec:	2300      	movs	r3, #0
 8002eee:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ef0:	230e      	movs	r3, #14
 8002ef2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ef4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ef8:	4619      	mov	r1, r3
 8002efa:	4829      	ldr	r0, [pc, #164]	@ (8002fa0 <HAL_LTDC_MspInit+0x240>)
 8002efc:	f000 ff84 	bl	8003e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002f00:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002f04:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	2302      	movs	r3, #2
 8002f08:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f12:	230e      	movs	r3, #14
 8002f14:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f16:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	4821      	ldr	r0, [pc, #132]	@ (8002fa4 <HAL_LTDC_MspInit+0x244>)
 8002f1e:	f000 ff73 	bl	8003e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002f22:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002f26:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f30:	2300      	movs	r3, #0
 8002f32:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f34:	230e      	movs	r3, #14
 8002f36:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f38:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	481a      	ldr	r0, [pc, #104]	@ (8002fa8 <HAL_LTDC_MspInit+0x248>)
 8002f40:	f000 ff62 	bl	8003e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002f44:	2348      	movs	r3, #72	@ 0x48
 8002f46:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f48:	2302      	movs	r3, #2
 8002f4a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f50:	2300      	movs	r3, #0
 8002f52:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f54:	230e      	movs	r3, #14
 8002f56:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f58:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	4813      	ldr	r0, [pc, #76]	@ (8002fac <HAL_LTDC_MspInit+0x24c>)
 8002f60:	f000 ff52 	bl	8003e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002f64:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002f68:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f72:	2300      	movs	r3, #0
 8002f74:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002f76:	2309      	movs	r3, #9
 8002f78:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f7a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4808      	ldr	r0, [pc, #32]	@ (8002fa4 <HAL_LTDC_MspInit+0x244>)
 8002f82:	f000 ff41 	bl	8003e08 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8002f86:	bf00      	nop
 8002f88:	3768      	adds	r7, #104	@ 0x68
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40016800 	.word	0x40016800
 8002f94:	40023800 	.word	0x40023800
 8002f98:	40021400 	.word	0x40021400
 8002f9c:	40020000 	.word	0x40020000
 8002fa0:	40020400 	.word	0x40020400
 8002fa4:	40021800 	.word	0x40021800
 8002fa8:	40020800 	.word	0x40020800
 8002fac:	40020c00 	.word	0x40020c00

08002fb0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a0b      	ldr	r2, [pc, #44]	@ (8002fec <HAL_RNG_MspInit+0x3c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d10d      	bne.n	8002fde <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff0 <HAL_RNG_MspInit+0x40>)
 8002fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fca:	4a09      	ldr	r2, [pc, #36]	@ (8002ff0 <HAL_RNG_MspInit+0x40>)
 8002fcc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fd0:	6353      	str	r3, [r2, #52]	@ 0x34
 8002fd2:	4b07      	ldr	r3, [pc, #28]	@ (8002ff0 <HAL_RNG_MspInit+0x40>)
 8002fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002fde:	bf00      	nop
 8002fe0:	3714      	adds	r7, #20
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	50060800 	.word	0x50060800
 8002ff0:	40023800 	.word	0x40023800

08002ff4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b08a      	sub	sp, #40	@ 0x28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ffc:	f107 0314 	add.w	r3, r7, #20
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	609a      	str	r2, [r3, #8]
 8003008:	60da      	str	r2, [r3, #12]
 800300a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a19      	ldr	r2, [pc, #100]	@ (8003078 <HAL_SPI_MspInit+0x84>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d12c      	bne.n	8003070 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	4b18      	ldr	r3, [pc, #96]	@ (800307c <HAL_SPI_MspInit+0x88>)
 800301c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800301e:	4a17      	ldr	r2, [pc, #92]	@ (800307c <HAL_SPI_MspInit+0x88>)
 8003020:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003024:	6453      	str	r3, [r2, #68]	@ 0x44
 8003026:	4b15      	ldr	r3, [pc, #84]	@ (800307c <HAL_SPI_MspInit+0x88>)
 8003028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800302a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800302e:	613b      	str	r3, [r7, #16]
 8003030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003032:	2300      	movs	r3, #0
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	4b11      	ldr	r3, [pc, #68]	@ (800307c <HAL_SPI_MspInit+0x88>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303a:	4a10      	ldr	r2, [pc, #64]	@ (800307c <HAL_SPI_MspInit+0x88>)
 800303c:	f043 0320 	orr.w	r3, r3, #32
 8003040:	6313      	str	r3, [r2, #48]	@ 0x30
 8003042:	4b0e      	ldr	r3, [pc, #56]	@ (800307c <HAL_SPI_MspInit+0x88>)
 8003044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800304e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003054:	2302      	movs	r3, #2
 8003056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003058:	2300      	movs	r3, #0
 800305a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305c:	2300      	movs	r3, #0
 800305e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003060:	2305      	movs	r3, #5
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003064:	f107 0314 	add.w	r3, r7, #20
 8003068:	4619      	mov	r1, r3
 800306a:	4805      	ldr	r0, [pc, #20]	@ (8003080 <HAL_SPI_MspInit+0x8c>)
 800306c:	f000 fecc 	bl	8003e08 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8003070:	bf00      	nop
 8003072:	3728      	adds	r7, #40	@ 0x28
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40015000 	.word	0x40015000
 800307c:	40023800 	.word	0x40023800
 8003080:	40021400 	.word	0x40021400

08003084 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a08      	ldr	r2, [pc, #32]	@ (80030b4 <HAL_SPI_MspDeInit+0x30>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d10a      	bne.n	80030ac <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8003096:	4b08      	ldr	r3, [pc, #32]	@ (80030b8 <HAL_SPI_MspDeInit+0x34>)
 8003098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309a:	4a07      	ldr	r2, [pc, #28]	@ (80030b8 <HAL_SPI_MspDeInit+0x34>)
 800309c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80030a0:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80030a2:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80030a6:	4805      	ldr	r0, [pc, #20]	@ (80030bc <HAL_SPI_MspDeInit+0x38>)
 80030a8:	f001 f85a 	bl	8004160 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80030ac:	bf00      	nop
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	40015000 	.word	0x40015000
 80030b8:	40023800 	.word	0x40023800
 80030bc:	40021400 	.word	0x40021400

080030c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030d0:	d116      	bne.n	8003100 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	4b16      	ldr	r3, [pc, #88]	@ (8003130 <HAL_TIM_Base_MspInit+0x70>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	4a15      	ldr	r2, [pc, #84]	@ (8003130 <HAL_TIM_Base_MspInit+0x70>)
 80030dc:	f043 0301 	orr.w	r3, r3, #1
 80030e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030e2:	4b13      	ldr	r3, [pc, #76]	@ (8003130 <HAL_TIM_Base_MspInit+0x70>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80030ee:	2200      	movs	r2, #0
 80030f0:	2100      	movs	r1, #0
 80030f2:	201c      	movs	r0, #28
 80030f4:	f000 fe1d 	bl	8003d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80030f8:	201c      	movs	r0, #28
 80030fa:	f000 fe36 	bl	8003d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80030fe:	e012      	b.n	8003126 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a0b      	ldr	r2, [pc, #44]	@ (8003134 <HAL_TIM_Base_MspInit+0x74>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d10d      	bne.n	8003126 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800310a:	2300      	movs	r3, #0
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	4b08      	ldr	r3, [pc, #32]	@ (8003130 <HAL_TIM_Base_MspInit+0x70>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003112:	4a07      	ldr	r2, [pc, #28]	@ (8003130 <HAL_TIM_Base_MspInit+0x70>)
 8003114:	f043 0308 	orr.w	r3, r3, #8
 8003118:	6413      	str	r3, [r2, #64]	@ 0x40
 800311a:	4b05      	ldr	r3, [pc, #20]	@ (8003130 <HAL_TIM_Base_MspInit+0x70>)
 800311c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	60bb      	str	r3, [r7, #8]
 8003124:	68bb      	ldr	r3, [r7, #8]
}
 8003126:	bf00      	nop
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	40023800 	.word	0x40023800
 8003134:	40000c00 	.word	0x40000c00

08003138 <HAL_GPIO_EXTI_Callback>:

}

/* USER CODE BEGIN 1 */
// Interrupt callback function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) {  // Button pin
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_GPIO_EXTI_Callback+0x14>
    	// rotate stuff
    	transform_rotation();
 8003148:	f7fe f854 	bl	80011f4 <transform_rotation>
    }
}
 800314c:	bf00      	nop
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_TIM_PeriodElapsedCallback>:

// Interrupt callback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003164:	d101      	bne.n	800316a <HAL_TIM_PeriodElapsedCallback+0x16>
    	tick_Matrix();
 8003166:	f7fe fc89 	bl	8001a7c <tick_Matrix>
    }
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003172:	b480      	push	{r7}
 8003174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003176:	bf00      	nop
 8003178:	e7fd      	b.n	8003176 <NMI_Handler+0x4>

0800317a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800317a:	b480      	push	{r7}
 800317c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800317e:	bf00      	nop
 8003180:	e7fd      	b.n	800317e <HardFault_Handler+0x4>

08003182 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003182:	b480      	push	{r7}
 8003184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003186:	bf00      	nop
 8003188:	e7fd      	b.n	8003186 <MemManage_Handler+0x4>

0800318a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800318a:	b480      	push	{r7}
 800318c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800318e:	bf00      	nop
 8003190:	e7fd      	b.n	800318e <BusFault_Handler+0x4>

08003192 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003192:	b480      	push	{r7}
 8003194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003196:	bf00      	nop
 8003198:	e7fd      	b.n	8003196 <UsageFault_Handler+0x4>

0800319a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800319a:	b480      	push	{r7}
 800319c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031ac:	bf00      	nop
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031b6:	b480      	push	{r7}
 80031b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031ba:	bf00      	nop
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031c8:	f000 fc52 	bl	8003a70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031cc:	bf00      	nop
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80031d4:	2001      	movs	r0, #1
 80031d6:	f001 f91b 	bl	8004410 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
	...

080031e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //Matrix_update();
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80031e4:	4802      	ldr	r0, [pc, #8]	@ (80031f0 <TIM2_IRQHandler+0x10>)
 80031e6:	f003 ff3d 	bl	8007064 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20025be8 	.word	0x20025be8

080031f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	4603      	mov	r3, r0
 80031fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003202:	2b00      	cmp	r3, #0
 8003204:	db0b      	blt.n	800321e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003206:	79fb      	ldrb	r3, [r7, #7]
 8003208:	f003 021f 	and.w	r2, r3, #31
 800320c:	4907      	ldr	r1, [pc, #28]	@ (800322c <__NVIC_EnableIRQ+0x38>)
 800320e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003212:	095b      	lsrs	r3, r3, #5
 8003214:	2001      	movs	r0, #1
 8003216:	fa00 f202 	lsl.w	r2, r0, r2
 800321a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800321e:	bf00      	nop
 8003220:	370c      	adds	r7, #12
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	e000e100 	.word	0xe000e100

08003230 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports
    I2C3_MspInit();
 8003236:	f000 f9e1 	bl	80035fc <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 800323a:	f000 f9a1 	bl	8003580 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800323e:	2202      	movs	r2, #2
 8003240:	2103      	movs	r1, #3
 8003242:	2082      	movs	r0, #130	@ 0x82
 8003244:	f000 fa2e 	bl	80036a4 <I2C3_Write>
    HAL_Delay(5);
 8003248:	2005      	movs	r0, #5
 800324a:	f000 fc31 	bl	8003ab0 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800324e:	2200      	movs	r2, #0
 8003250:	2103      	movs	r1, #3
 8003252:	2082      	movs	r0, #130	@ 0x82
 8003254:	f000 fa26 	bl	80036a4 <I2C3_Write>
    HAL_Delay(2);
 8003258:	2002      	movs	r0, #2
 800325a:	f000 fc29 	bl	8003ab0 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 800325e:	1cba      	adds	r2, r7, #2
 8003260:	2302      	movs	r3, #2
 8003262:	2100      	movs	r1, #0
 8003264:	2082      	movs	r0, #130	@ 0x82
 8003266:	f000 fa6d 	bl	8003744 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 800326a:	887b      	ldrh	r3, [r7, #2]
 800326c:	021b      	lsls	r3, r3, #8
 800326e:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8003270:	887b      	ldrh	r3, [r7, #2]
 8003272:	0a1b      	lsrs	r3, r3, #8
 8003274:	b29a      	uxth	r2, r3
 8003276:	88fb      	ldrh	r3, [r7, #6]
 8003278:	4313      	orrs	r3, r2
 800327a:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 800327c:	88fb      	ldrh	r3, [r7, #6]
 800327e:	f640 0211 	movw	r2, #2065	@ 0x811
 8003282:	4293      	cmp	r3, r2
 8003284:	d001      	beq.n	800328a <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8003286:	2303      	movs	r3, #3
 8003288:	e095      	b.n	80033b6 <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800328a:	2202      	movs	r2, #2
 800328c:	2103      	movs	r1, #3
 800328e:	2082      	movs	r0, #130	@ 0x82
 8003290:	f000 fa08 	bl	80036a4 <I2C3_Write>
    HAL_Delay(5);
 8003294:	2005      	movs	r0, #5
 8003296:	f000 fc0b 	bl	8003ab0 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800329a:	2200      	movs	r2, #0
 800329c:	2103      	movs	r1, #3
 800329e:	2082      	movs	r0, #130	@ 0x82
 80032a0:	f000 fa00 	bl	80036a4 <I2C3_Write>
    HAL_Delay(2);
 80032a4:	2002      	movs	r0, #2
 80032a6:	f000 fc03 	bl	8003ab0 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80032aa:	2004      	movs	r0, #4
 80032ac:	f000 f887 	bl	80033be <STMPE811_Read>
 80032b0:	4603      	mov	r3, r0
 80032b2:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 80032b4:	797b      	ldrb	r3, [r7, #5]
 80032b6:	f023 0301 	bic.w	r3, r3, #1
 80032ba:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80032bc:	797b      	ldrb	r3, [r7, #5]
 80032be:	461a      	mov	r2, r3
 80032c0:	2104      	movs	r1, #4
 80032c2:	2082      	movs	r0, #130	@ 0x82
 80032c4:	f000 f9ee 	bl	80036a4 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80032c8:	2004      	movs	r0, #4
 80032ca:	f000 f878 	bl	80033be <STMPE811_Read>
 80032ce:	4603      	mov	r3, r0
 80032d0:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 80032d2:	797b      	ldrb	r3, [r7, #5]
 80032d4:	f023 0302 	bic.w	r3, r3, #2
 80032d8:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80032da:	797b      	ldrb	r3, [r7, #5]
 80032dc:	461a      	mov	r2, r3
 80032de:	2104      	movs	r1, #4
 80032e0:	2082      	movs	r0, #130	@ 0x82
 80032e2:	f000 f9df 	bl	80036a4 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80032e6:	2249      	movs	r2, #73	@ 0x49
 80032e8:	2120      	movs	r1, #32
 80032ea:	2082      	movs	r0, #130	@ 0x82
 80032ec:	f000 f9da 	bl	80036a4 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80032f0:	2002      	movs	r0, #2
 80032f2:	f000 fbdd 	bl	8003ab0 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80032f6:	2201      	movs	r2, #1
 80032f8:	2121      	movs	r1, #33	@ 0x21
 80032fa:	2082      	movs	r0, #130	@ 0x82
 80032fc:	f000 f9d2 	bl	80036a4 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8003300:	2017      	movs	r0, #23
 8003302:	f000 f85c 	bl	80033be <STMPE811_Read>
 8003306:	4603      	mov	r3, r0
 8003308:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 800330a:	797b      	ldrb	r3, [r7, #5]
 800330c:	f043 031e 	orr.w	r3, r3, #30
 8003310:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8003312:	797b      	ldrb	r3, [r7, #5]
 8003314:	461a      	mov	r2, r3
 8003316:	2117      	movs	r1, #23
 8003318:	2082      	movs	r0, #130	@ 0x82
 800331a:	f000 f9c3 	bl	80036a4 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 800331e:	229a      	movs	r2, #154	@ 0x9a
 8003320:	2141      	movs	r1, #65	@ 0x41
 8003322:	2082      	movs	r0, #130	@ 0x82
 8003324:	f000 f9be 	bl	80036a4 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8003328:	2201      	movs	r2, #1
 800332a:	214a      	movs	r1, #74	@ 0x4a
 800332c:	2082      	movs	r0, #130	@ 0x82
 800332e:	f000 f9b9 	bl	80036a4 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8003332:	2201      	movs	r2, #1
 8003334:	214b      	movs	r1, #75	@ 0x4b
 8003336:	2082      	movs	r0, #130	@ 0x82
 8003338:	f000 f9b4 	bl	80036a4 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800333c:	2200      	movs	r2, #0
 800333e:	214b      	movs	r1, #75	@ 0x4b
 8003340:	2082      	movs	r0, #130	@ 0x82
 8003342:	f000 f9af 	bl	80036a4 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8003346:	2201      	movs	r2, #1
 8003348:	2156      	movs	r1, #86	@ 0x56
 800334a:	2082      	movs	r0, #130	@ 0x82
 800334c:	f000 f9aa 	bl	80036a4 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8003350:	2201      	movs	r2, #1
 8003352:	2158      	movs	r1, #88	@ 0x58
 8003354:	2082      	movs	r0, #130	@ 0x82
 8003356:	f000 f9a5 	bl	80036a4 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 800335a:	2203      	movs	r2, #3
 800335c:	2140      	movs	r1, #64	@ 0x40
 800335e:	2082      	movs	r0, #130	@ 0x82
 8003360:	f000 f9a0 	bl	80036a4 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8003364:	22ff      	movs	r2, #255	@ 0xff
 8003366:	210b      	movs	r1, #11
 8003368:	2082      	movs	r0, #130	@ 0x82
 800336a:	f000 f99b 	bl	80036a4 <I2C3_Write>

    /* Enable global interrupts */

    enableInterruptSupportForTouch();
 800336e:	f000 f8c1 	bl	80034f4 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8003372:	2009      	movs	r0, #9
 8003374:	f000 f823 	bl	80033be <STMPE811_Read>
 8003378:	4603      	mov	r3, r0
 800337a:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 800337c:	797b      	ldrb	r3, [r7, #5]
 800337e:	f043 0301 	orr.w	r3, r3, #1
 8003382:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8003384:	797b      	ldrb	r3, [r7, #5]
 8003386:	461a      	mov	r2, r3
 8003388:	2109      	movs	r1, #9
 800338a:	2082      	movs	r0, #130	@ 0x82
 800338c:	f000 f98a 	bl	80036a4 <I2C3_Write>

    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8003390:	200a      	movs	r0, #10
 8003392:	f000 f814 	bl	80033be <STMPE811_Read>
 8003396:	4603      	mov	r3, r0
 8003398:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 800339a:	797b      	ldrb	r3, [r7, #5]
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 80033a2:	797b      	ldrb	r3, [r7, #5]
 80033a4:	461a      	mov	r2, r3
 80033a6:	210a      	movs	r1, #10
 80033a8:	2082      	movs	r0, #130	@ 0x82
 80033aa:	f000 f97b 	bl	80036a4 <I2C3_Write>

    /* Wait for 2 ms delay */
    HAL_Delay(200);
 80033ae:	20c8      	movs	r0, #200	@ 0xc8
 80033b0:	f000 fb7e 	bl	8003ab0 <HAL_Delay>

    return STMPE811_State_Ok;
 80033b4:	2302      	movs	r3, #2

}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	4603      	mov	r3, r0
 80033c6:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 80033c8:	f107 020f 	add.w	r2, r7, #15
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	4619      	mov	r1, r3
 80033d0:	2082      	movs	r0, #130	@ 0x82
 80033d2:	f000 f991 	bl	80036f8 <I2C3_Read>

    return readData;
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	460a      	mov	r2, r1
 80033ea:	71fb      	strb	r3, [r7, #7]
 80033ec:	4613      	mov	r3, r2
 80033ee:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 80033f0:	79ba      	ldrb	r2, [r7, #6]
 80033f2:	79fb      	ldrb	r3, [r7, #7]
 80033f4:	4619      	mov	r1, r3
 80033f6:	2082      	movs	r0, #130	@ 0x82
 80033f8:	f000 f954 	bl	80036a4 <I2C3_Write>
}
 80033fc:	bf00      	nop
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	799b      	ldrb	r3, [r3, #6]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d117      	bne.n	8003444 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	4618      	mov	r0, r3
 800341a:	f000 f9b5 	bl	8003788 <TM_STMPE811_ReadX>
 800341e:	4603      	mov	r3, r0
 8003420:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003424:	b29a      	uxth	r2, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	885b      	ldrh	r3, [r3, #2]
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fa08 	bl	8003844 <TM_STMPE811_ReadY>
 8003434:	4603      	mov	r3, r0
 8003436:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800343a:	3301      	adds	r3, #1
 800343c:	b29a      	uxth	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	805a      	strh	r2, [r3, #2]
 8003442:	e048      	b.n	80034d6 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	799b      	ldrb	r3, [r3, #6]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d112      	bne.n	8003472 <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	881b      	ldrh	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f000 f999 	bl	8003788 <TM_STMPE811_ReadX>
 8003456:	4603      	mov	r3, r0
 8003458:	461a      	mov	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	885b      	ldrh	r3, [r3, #2]
 8003462:	4618      	mov	r0, r3
 8003464:	f000 f9ee 	bl	8003844 <TM_STMPE811_ReadY>
 8003468:	4603      	mov	r3, r0
 800346a:	461a      	mov	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	805a      	strh	r2, [r3, #2]
 8003470:	e031      	b.n	80034d6 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	799b      	ldrb	r3, [r3, #6]
 8003476:	2b02      	cmp	r3, #2
 8003478:	d115      	bne.n	80034a6 <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	885b      	ldrh	r3, [r3, #2]
 800347e:	4618      	mov	r0, r3
 8003480:	f000 f982 	bl	8003788 <TM_STMPE811_ReadX>
 8003484:	4603      	mov	r3, r0
 8003486:	461a      	mov	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f000 f9d7 	bl	8003844 <TM_STMPE811_ReadY>
 8003496:	4603      	mov	r3, r0
 8003498:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800349c:	3301      	adds	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	801a      	strh	r2, [r3, #0]
 80034a4:	e017      	b.n	80034d6 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	799b      	ldrb	r3, [r3, #6]
 80034aa:	2b03      	cmp	r3, #3
 80034ac:	d113      	bne.n	80034d6 <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f968 	bl	8003788 <TM_STMPE811_ReadX>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80034be:	b29a      	uxth	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	881b      	ldrh	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 f9bb 	bl	8003844 <TM_STMPE811_ReadY>
 80034ce:	4603      	mov	r3, r0
 80034d0:	461a      	mov	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80034d6:	2201      	movs	r2, #1
 80034d8:	214b      	movs	r1, #75	@ 0x4b
 80034da:	2082      	movs	r0, #130	@ 0x82
 80034dc:	f000 f8e2 	bl	80036a4 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80034e0:	2200      	movs	r2, #0
 80034e2:	214b      	movs	r1, #75	@ 0x4b
 80034e4:	2082      	movs	r0, #130	@ 0x82
 80034e6:	f000 f8dd 	bl	80036a4 <I2C3_Write>
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <enableInterruptSupportForTouch>:
    return true;
}


void enableInterruptSupportForTouch(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034fa:	2300      	movs	r3, #0
 80034fc:	603b      	str	r3, [r7, #0]
 80034fe:	4b14      	ldr	r3, [pc, #80]	@ (8003550 <enableInterruptSupportForTouch+0x5c>)
 8003500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003502:	4a13      	ldr	r2, [pc, #76]	@ (8003550 <enableInterruptSupportForTouch+0x5c>)
 8003504:	f043 0301 	orr.w	r3, r3, #1
 8003508:	6313      	str	r3, [r2, #48]	@ 0x30
 800350a:	4b11      	ldr	r3, [pc, #68]	@ (8003550 <enableInterruptSupportForTouch+0x5c>)
 800350c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	603b      	str	r3, [r7, #0]
 8003514:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003516:	1d3b      	adds	r3, r7, #4
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]
 800351c:	605a      	str	r2, [r3, #4]
 800351e:	609a      	str	r2, [r3, #8]
 8003520:	60da      	str	r2, [r3, #12]
 8003522:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003524:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003528:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800352a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800352e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	2300      	movs	r3, #0
 8003532:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003534:	2302      	movs	r3, #2
 8003536:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003538:	1d3b      	adds	r3, r7, #4
 800353a:	4619      	mov	r1, r3
 800353c:	4805      	ldr	r0, [pc, #20]	@ (8003554 <enableInterruptSupportForTouch+0x60>)
 800353e:	f000 fc63 	bl	8003e08 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003542:	2028      	movs	r0, #40	@ 0x28
 8003544:	f7ff fe56 	bl	80031f4 <__NVIC_EnableIRQ>

}
 8003548:	bf00      	nop
 800354a:	3718      	adds	r7, #24
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}
 8003550:	40023800 	.word	0x40023800
 8003554:	40020000 	.word	0x40020000

08003558 <verifyHAL_I2C_IS_OKAY>:


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8003558:	b580      	push	{r7, lr}
 800355a:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 800355c:	4b06      	ldr	r3, [pc, #24]	@ (8003578 <verifyHAL_I2C_IS_OKAY+0x20>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d006      	beq.n	8003572 <verifyHAL_I2C_IS_OKAY+0x1a>
    {
    	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14); // Error with I2C
 8003564:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003568:	4804      	ldr	r0, [pc, #16]	@ (800357c <verifyHAL_I2C_IS_OKAY+0x24>)
 800356a:	f000 ff36 	bl	80043da <HAL_GPIO_TogglePin>
        while(1);
 800356e:	bf00      	nop
 8003570:	e7fd      	b.n	800356e <verifyHAL_I2C_IS_OKAY+0x16>
    }
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20025ccc 	.word	0x20025ccc
 800357c:	40021800 	.word	0x40021800

08003580 <I2C3_Init>:

static void I2C3_Init()
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	603b      	str	r3, [r7, #0]
 800358a:	4b18      	ldr	r3, [pc, #96]	@ (80035ec <I2C3_Init+0x6c>)
 800358c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358e:	4a17      	ldr	r2, [pc, #92]	@ (80035ec <I2C3_Init+0x6c>)
 8003590:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003594:	6413      	str	r3, [r2, #64]	@ 0x40
 8003596:	4b15      	ldr	r3, [pc, #84]	@ (80035ec <I2C3_Init+0x6c>)
 8003598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 80035a2:	4b13      	ldr	r3, [pc, #76]	@ (80035f0 <I2C3_Init+0x70>)
 80035a4:	4a13      	ldr	r2, [pc, #76]	@ (80035f4 <I2C3_Init+0x74>)
 80035a6:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80035a8:	4b11      	ldr	r3, [pc, #68]	@ (80035f0 <I2C3_Init+0x70>)
 80035aa:	4a13      	ldr	r2, [pc, #76]	@ (80035f8 <I2C3_Init+0x78>)
 80035ac:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80035ae:	4b10      	ldr	r3, [pc, #64]	@ (80035f0 <I2C3_Init+0x70>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 80035b4:	4b0e      	ldr	r3, [pc, #56]	@ (80035f0 <I2C3_Init+0x70>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80035ba:	4b0d      	ldr	r3, [pc, #52]	@ (80035f0 <I2C3_Init+0x70>)
 80035bc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80035c0:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 80035c2:	4b0b      	ldr	r3, [pc, #44]	@ (80035f0 <I2C3_Init+0x70>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80035c8:	4b09      	ldr	r3, [pc, #36]	@ (80035f0 <I2C3_Init+0x70>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode?

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 80035ce:	4808      	ldr	r0, [pc, #32]	@ (80035f0 <I2C3_Init+0x70>)
 80035d0:	f000 ff36 	bl	8004440 <HAL_I2C_Init>
 80035d4:	4603      	mov	r3, r0
 80035d6:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 80035de:	bf00      	nop
 80035e0:	e7fd      	b.n	80035de <I2C3_Init+0x5e>
    }
    return;
 80035e2:	bf00      	nop
}
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40023800 	.word	0x40023800
 80035f0:	20025c78 	.word	0x20025c78
 80035f4:	40005c00 	.word	0x40005c00
 80035f8:	000186a0 	.word	0x000186a0

080035fc <I2C3_MspInit>:

// GPIO Initializations
static void I2C3_MspInit(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003602:	f107 030c 	add.w	r3, r7, #12
 8003606:	2200      	movs	r2, #0
 8003608:	601a      	str	r2, [r3, #0]
 800360a:	605a      	str	r2, [r3, #4]
 800360c:	609a      	str	r2, [r3, #8]
 800360e:	60da      	str	r2, [r3, #12]
 8003610:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003612:	2300      	movs	r3, #0
 8003614:	60bb      	str	r3, [r7, #8]
 8003616:	4b20      	ldr	r3, [pc, #128]	@ (8003698 <I2C3_MspInit+0x9c>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361a:	4a1f      	ldr	r2, [pc, #124]	@ (8003698 <I2C3_MspInit+0x9c>)
 800361c:	f043 0304 	orr.w	r3, r3, #4
 8003620:	6313      	str	r3, [r2, #48]	@ 0x30
 8003622:	4b1d      	ldr	r3, [pc, #116]	@ (8003698 <I2C3_MspInit+0x9c>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	60bb      	str	r3, [r7, #8]
 800362c:	68bb      	ldr	r3, [r7, #8]

    // GPIOA
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800362e:	2300      	movs	r3, #0
 8003630:	607b      	str	r3, [r7, #4]
 8003632:	4b19      	ldr	r3, [pc, #100]	@ (8003698 <I2C3_MspInit+0x9c>)
 8003634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003636:	4a18      	ldr	r2, [pc, #96]	@ (8003698 <I2C3_MspInit+0x9c>)
 8003638:	f043 0301 	orr.w	r3, r3, #1
 800363c:	6313      	str	r3, [r2, #48]	@ 0x30
 800363e:	4b16      	ldr	r3, [pc, #88]	@ (8003698 <I2C3_MspInit+0x9c>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	607b      	str	r3, [r7, #4]
 8003648:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800364a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800364e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003650:	2312      	movs	r3, #18
 8003652:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003658:	2300      	movs	r3, #0
 800365a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800365c:	2304      	movs	r3, #4
 800365e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003660:	f107 030c 	add.w	r3, r7, #12
 8003664:	4619      	mov	r1, r3
 8003666:	480d      	ldr	r0, [pc, #52]	@ (800369c <I2C3_MspInit+0xa0>)
 8003668:	f000 fbce 	bl	8003e08 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800366c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003670:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003672:	2312      	movs	r3, #18
 8003674:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003676:	2300      	movs	r3, #0
 8003678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800367a:	2300      	movs	r3, #0
 800367c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800367e:	2304      	movs	r3, #4
 8003680:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003682:	f107 030c 	add.w	r3, r7, #12
 8003686:	4619      	mov	r1, r3
 8003688:	4805      	ldr	r0, [pc, #20]	@ (80036a0 <I2C3_MspInit+0xa4>)
 800368a:	f000 fbbd 	bl	8003e08 <HAL_GPIO_Init>

}
 800368e:	bf00      	nop
 8003690:	3720      	adds	r7, #32
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40023800 	.word	0x40023800
 800369c:	40020800 	.word	0x40020800
 80036a0:	40020000 	.word	0x40020000

080036a4 <I2C3_Write>:

// This function should only be used for single BYTE transfers
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af04      	add	r7, sp, #16
 80036aa:	4603      	mov	r3, r0
 80036ac:	80fb      	strh	r3, [r7, #6]
 80036ae:	460b      	mov	r3, r1
 80036b0:	717b      	strb	r3, [r7, #5]
 80036b2:	4613      	mov	r3, r2
 80036b4:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 80036b6:	793b      	ldrb	r3, [r7, #4]
 80036b8:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call?
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80036ba:	797b      	ldrb	r3, [r7, #5]
 80036bc:	b29a      	uxth	r2, r3
 80036be:	88f9      	ldrh	r1, [r7, #6]
 80036c0:	4b0a      	ldr	r3, [pc, #40]	@ (80036ec <I2C3_Write+0x48>)
 80036c2:	9302      	str	r3, [sp, #8]
 80036c4:	2301      	movs	r3, #1
 80036c6:	9301      	str	r3, [sp, #4]
 80036c8:	f107 030f 	add.w	r3, r7, #15
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	2301      	movs	r3, #1
 80036d0:	4807      	ldr	r0, [pc, #28]	@ (80036f0 <I2C3_Write+0x4c>)
 80036d2:	f000 fff9 	bl	80046c8 <HAL_I2C_Mem_Write>
 80036d6:	4603      	mov	r3, r0
 80036d8:	461a      	mov	r2, r3
 80036da:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <I2C3_Write+0x50>)
 80036dc:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80036de:	f7ff ff3b 	bl	8003558 <verifyHAL_I2C_IS_OKAY>
}
 80036e2:	bf00      	nop
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	0003d090 	.word	0x0003d090
 80036f0:	20025c78 	.word	0x20025c78
 80036f4:	20025ccc 	.word	0x20025ccc

080036f8 <I2C3_Read>:

// This function should only be used for single BYTE transfers
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af04      	add	r7, sp, #16
 80036fe:	4603      	mov	r3, r0
 8003700:	603a      	str	r2, [r7, #0]
 8003702:	71fb      	strb	r3, [r7, #7]
 8003704:	460b      	mov	r3, r1
 8003706:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003708:	79fb      	ldrb	r3, [r7, #7]
 800370a:	b299      	uxth	r1, r3
 800370c:	79bb      	ldrb	r3, [r7, #6]
 800370e:	b29a      	uxth	r2, r3
 8003710:	4b09      	ldr	r3, [pc, #36]	@ (8003738 <I2C3_Read+0x40>)
 8003712:	9302      	str	r3, [sp, #8]
 8003714:	2301      	movs	r3, #1
 8003716:	9301      	str	r3, [sp, #4]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	2301      	movs	r3, #1
 800371e:	4807      	ldr	r0, [pc, #28]	@ (800373c <I2C3_Read+0x44>)
 8003720:	f001 f8cc 	bl	80048bc <HAL_I2C_Mem_Read>
 8003724:	4603      	mov	r3, r0
 8003726:	461a      	mov	r2, r3
 8003728:	4b05      	ldr	r3, [pc, #20]	@ (8003740 <I2C3_Read+0x48>)
 800372a:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800372c:	f7ff ff14 	bl	8003558 <verifyHAL_I2C_IS_OKAY>
}
 8003730:	bf00      	nop
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	0003d090 	.word	0x0003d090
 800373c:	20025c78 	.word	0x20025c78
 8003740:	20025ccc 	.word	0x20025ccc

08003744 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af04      	add	r7, sp, #16
 800374a:	603a      	str	r2, [r7, #0]
 800374c:	461a      	mov	r2, r3
 800374e:	4603      	mov	r3, r0
 8003750:	71fb      	strb	r3, [r7, #7]
 8003752:	460b      	mov	r3, r1
 8003754:	71bb      	strb	r3, [r7, #6]
 8003756:	4613      	mov	r3, r2
 8003758:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 800375a:	79fb      	ldrb	r3, [r7, #7]
 800375c:	b299      	uxth	r1, r3
 800375e:	79bb      	ldrb	r3, [r7, #6]
 8003760:	b29a      	uxth	r2, r3
 8003762:	4b07      	ldr	r3, [pc, #28]	@ (8003780 <I2C3_MulitByteRead+0x3c>)
 8003764:	9302      	str	r3, [sp, #8]
 8003766:	88bb      	ldrh	r3, [r7, #4]
 8003768:	9301      	str	r3, [sp, #4]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	9300      	str	r3, [sp, #0]
 800376e:	2301      	movs	r3, #1
 8003770:	4804      	ldr	r0, [pc, #16]	@ (8003784 <I2C3_MulitByteRead+0x40>)
 8003772:	f001 f8a3 	bl	80048bc <HAL_I2C_Mem_Read>
}
 8003776:	bf00      	nop
 8003778:	3708      	adds	r7, #8
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	0003d090 	.word	0x0003d090
 8003784:	20025c78 	.word	0x20025c78

08003788 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8003792:	204d      	movs	r0, #77	@ 0x4d
 8003794:	f7ff fe13 	bl	80033be <STMPE811_Read>
 8003798:	4603      	mov	r3, r0
 800379a:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 800379c:	204e      	movs	r0, #78	@ 0x4e
 800379e:	f7ff fe0e 	bl	80033be <STMPE811_Read>
 80037a2:	4603      	mov	r3, r0
 80037a4:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 80037a6:	7a7b      	ldrb	r3, [r7, #9]
 80037a8:	021b      	lsls	r3, r3, #8
 80037aa:	b21a      	sxth	r2, r3
 80037ac:	7a3b      	ldrb	r3, [r7, #8]
 80037ae:	b21b      	sxth	r3, r3
 80037b0:	4313      	orrs	r3, r2
 80037b2:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 80037b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037b8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80037bc:	4293      	cmp	r3, r2
 80037be:	dc06      	bgt.n	80037ce <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 80037c0:	89fb      	ldrh	r3, [r7, #14]
 80037c2:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 80037c6:	330c      	adds	r3, #12
 80037c8:	b29b      	uxth	r3, r3
 80037ca:	81fb      	strh	r3, [r7, #14]
 80037cc:	e005      	b.n	80037da <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 80037ce:	89fb      	ldrh	r3, [r7, #14]
 80037d0:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80037d4:	3308      	adds	r3, #8
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 80037da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037de:	4a18      	ldr	r2, [pc, #96]	@ (8003840 <TM_STMPE811_ReadX+0xb8>)
 80037e0:	fb82 1203 	smull	r1, r2, r2, r3
 80037e4:	441a      	add	r2, r3
 80037e6:	10d2      	asrs	r2, r2, #3
 80037e8:	17db      	asrs	r3, r3, #31
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 80037ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037f2:	2bef      	cmp	r3, #239	@ 0xef
 80037f4:	dd02      	ble.n	80037fc <TM_STMPE811_ReadX+0x74>
        val = 239;
 80037f6:	23ef      	movs	r3, #239	@ 0xef
 80037f8:	81fb      	strh	r3, [r7, #14]
 80037fa:	e005      	b.n	8003808 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 80037fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003800:	2b00      	cmp	r3, #0
 8003802:	da01      	bge.n	8003808 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8003808:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800380c:	88fb      	ldrh	r3, [r7, #6]
 800380e:	429a      	cmp	r2, r3
 8003810:	dd05      	ble.n	800381e <TM_STMPE811_ReadX+0x96>
 8003812:	89fa      	ldrh	r2, [r7, #14]
 8003814:	88fb      	ldrh	r3, [r7, #6]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	b29b      	uxth	r3, r3
 800381a:	b21b      	sxth	r3, r3
 800381c:	e004      	b.n	8003828 <TM_STMPE811_ReadX+0xa0>
 800381e:	89fb      	ldrh	r3, [r7, #14]
 8003820:	88fa      	ldrh	r2, [r7, #6]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	b29b      	uxth	r3, r3
 8003826:	b21b      	sxth	r3, r3
 8003828:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 800382a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800382e:	2b04      	cmp	r3, #4
 8003830:	dd01      	ble.n	8003836 <TM_STMPE811_ReadX+0xae>
        return val;
 8003832:	89fb      	ldrh	r3, [r7, #14]
 8003834:	e000      	b.n	8003838 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8003836:	88fb      	ldrh	r3, [r7, #6]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	88888889 	.word	0x88888889

08003844 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	4603      	mov	r3, r0
 800384c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 800384e:	204f      	movs	r0, #79	@ 0x4f
 8003850:	f7ff fdb5 	bl	80033be <STMPE811_Read>
 8003854:	4603      	mov	r3, r0
 8003856:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003858:	2050      	movs	r0, #80	@ 0x50
 800385a:	f7ff fdb0 	bl	80033be <STMPE811_Read>
 800385e:	4603      	mov	r3, r0
 8003860:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003862:	7a7b      	ldrb	r3, [r7, #9]
 8003864:	021b      	lsls	r3, r3, #8
 8003866:	b21a      	sxth	r2, r3
 8003868:	7a3b      	ldrb	r3, [r7, #8]
 800386a:	b21b      	sxth	r3, r3
 800386c:	4313      	orrs	r3, r2
 800386e:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8003870:	89fb      	ldrh	r3, [r7, #14]
 8003872:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003876:	b29b      	uxth	r3, r3
 8003878:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 800387a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800387e:	4a19      	ldr	r2, [pc, #100]	@ (80038e4 <TM_STMPE811_ReadY+0xa0>)
 8003880:	fb82 1203 	smull	r1, r2, r2, r3
 8003884:	1052      	asrs	r2, r2, #1
 8003886:	17db      	asrs	r3, r3, #31
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 800388c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003890:	2b00      	cmp	r3, #0
 8003892:	dc02      	bgt.n	800389a <TM_STMPE811_ReadY+0x56>
        val = 0;
 8003894:	2300      	movs	r3, #0
 8003896:	81fb      	strh	r3, [r7, #14]
 8003898:	e007      	b.n	80038aa <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 800389a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800389e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80038a2:	db02      	blt.n	80038aa <TM_STMPE811_ReadY+0x66>
        val = 319;
 80038a4:	f240 133f 	movw	r3, #319	@ 0x13f
 80038a8:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 80038aa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80038ae:	88fb      	ldrh	r3, [r7, #6]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	dd05      	ble.n	80038c0 <TM_STMPE811_ReadY+0x7c>
 80038b4:	89fa      	ldrh	r2, [r7, #14]
 80038b6:	88fb      	ldrh	r3, [r7, #6]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	b21b      	sxth	r3, r3
 80038be:	e004      	b.n	80038ca <TM_STMPE811_ReadY+0x86>
 80038c0:	89fb      	ldrh	r3, [r7, #14]
 80038c2:	88fa      	ldrh	r2, [r7, #6]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	b21b      	sxth	r3, r3
 80038ca:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 80038cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	dd01      	ble.n	80038d8 <TM_STMPE811_ReadY+0x94>
        return val;
 80038d4:	89fb      	ldrh	r3, [r7, #14]
 80038d6:	e000      	b.n	80038da <TM_STMPE811_ReadY+0x96>
    }
    return y;
 80038d8:	88fb      	ldrh	r3, [r7, #6]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	2e8ba2e9 	.word	0x2e8ba2e9

080038e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038f0:	4a14      	ldr	r2, [pc, #80]	@ (8003944 <_sbrk+0x5c>)
 80038f2:	4b15      	ldr	r3, [pc, #84]	@ (8003948 <_sbrk+0x60>)
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038fc:	4b13      	ldr	r3, [pc, #76]	@ (800394c <_sbrk+0x64>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d102      	bne.n	800390a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003904:	4b11      	ldr	r3, [pc, #68]	@ (800394c <_sbrk+0x64>)
 8003906:	4a12      	ldr	r2, [pc, #72]	@ (8003950 <_sbrk+0x68>)
 8003908:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800390a:	4b10      	ldr	r3, [pc, #64]	@ (800394c <_sbrk+0x64>)
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4413      	add	r3, r2
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	429a      	cmp	r2, r3
 8003916:	d207      	bcs.n	8003928 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003918:	f004 fb2a 	bl	8007f70 <__errno>
 800391c:	4603      	mov	r3, r0
 800391e:	220c      	movs	r2, #12
 8003920:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003922:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003926:	e009      	b.n	800393c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003928:	4b08      	ldr	r3, [pc, #32]	@ (800394c <_sbrk+0x64>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800392e:	4b07      	ldr	r3, [pc, #28]	@ (800394c <_sbrk+0x64>)
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4413      	add	r3, r2
 8003936:	4a05      	ldr	r2, [pc, #20]	@ (800394c <_sbrk+0x64>)
 8003938:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800393a:	68fb      	ldr	r3, [r7, #12]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20030000 	.word	0x20030000
 8003948:	00000400 	.word	0x00000400
 800394c:	20025cd0 	.word	0x20025cd0
 8003950:	20025ed0 	.word	0x20025ed0

08003954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003958:	4b06      	ldr	r3, [pc, #24]	@ (8003974 <SystemInit+0x20>)
 800395a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800395e:	4a05      	ldr	r2, [pc, #20]	@ (8003974 <SystemInit+0x20>)
 8003960:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003964:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	e000ed00 	.word	0xe000ed00

08003978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003978:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80039b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800397c:	f7ff ffea 	bl	8003954 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003980:	480c      	ldr	r0, [pc, #48]	@ (80039b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003982:	490d      	ldr	r1, [pc, #52]	@ (80039b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003984:	4a0d      	ldr	r2, [pc, #52]	@ (80039bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003988:	e002      	b.n	8003990 <LoopCopyDataInit>

0800398a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800398a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800398c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800398e:	3304      	adds	r3, #4

08003990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003994:	d3f9      	bcc.n	800398a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003996:	4a0a      	ldr	r2, [pc, #40]	@ (80039c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003998:	4c0a      	ldr	r4, [pc, #40]	@ (80039c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800399a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800399c:	e001      	b.n	80039a2 <LoopFillZerobss>

0800399e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800399e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039a0:	3204      	adds	r2, #4

080039a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039a4:	d3fb      	bcc.n	800399e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80039a6:	f004 fae9 	bl	8007f7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039aa:	f7fe fcf7 	bl	800239c <main>
  bx  lr    
 80039ae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80039b0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80039b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039b8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80039bc:	08009f18 	.word	0x08009f18
  ldr r2, =_sbss
 80039c0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80039c4:	20025ed0 	.word	0x20025ed0

080039c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039c8:	e7fe      	b.n	80039c8 <ADC_IRQHandler>
	...

080039cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039d0:	4b0e      	ldr	r3, [pc, #56]	@ (8003a0c <HAL_Init+0x40>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a0d      	ldr	r2, [pc, #52]	@ (8003a0c <HAL_Init+0x40>)
 80039d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80039da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039dc:	4b0b      	ldr	r3, [pc, #44]	@ (8003a0c <HAL_Init+0x40>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a0a      	ldr	r2, [pc, #40]	@ (8003a0c <HAL_Init+0x40>)
 80039e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039e8:	4b08      	ldr	r3, [pc, #32]	@ (8003a0c <HAL_Init+0x40>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a07      	ldr	r2, [pc, #28]	@ (8003a0c <HAL_Init+0x40>)
 80039ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039f4:	2003      	movs	r0, #3
 80039f6:	f000 f991 	bl	8003d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039fa:	2000      	movs	r0, #0
 80039fc:	f000 f808 	bl	8003a10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a00:	f7ff f91c 	bl	8002c3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40023c00 	.word	0x40023c00

08003a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b082      	sub	sp, #8
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a18:	4b12      	ldr	r3, [pc, #72]	@ (8003a64 <HAL_InitTick+0x54>)
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	4b12      	ldr	r3, [pc, #72]	@ (8003a68 <HAL_InitTick+0x58>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	4619      	mov	r1, r3
 8003a22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003a26:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f000 f9b7 	bl	8003da2 <HAL_SYSTICK_Config>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e00e      	b.n	8003a5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b0f      	cmp	r3, #15
 8003a42:	d80a      	bhi.n	8003a5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a44:	2200      	movs	r2, #0
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003a4c:	f000 f971 	bl	8003d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a50:	4a06      	ldr	r2, [pc, #24]	@ (8003a6c <HAL_InitTick+0x5c>)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
 8003a58:	e000      	b.n	8003a5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	20000010 	.word	0x20000010
 8003a68:	20000018 	.word	0x20000018
 8003a6c:	20000014 	.word	0x20000014

08003a70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a74:	4b06      	ldr	r3, [pc, #24]	@ (8003a90 <HAL_IncTick+0x20>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	4b06      	ldr	r3, [pc, #24]	@ (8003a94 <HAL_IncTick+0x24>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4413      	add	r3, r2
 8003a80:	4a04      	ldr	r2, [pc, #16]	@ (8003a94 <HAL_IncTick+0x24>)
 8003a82:	6013      	str	r3, [r2, #0]
}
 8003a84:	bf00      	nop
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20000018 	.word	0x20000018
 8003a94:	20025cd4 	.word	0x20025cd4

08003a98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  return uwTick;
 8003a9c:	4b03      	ldr	r3, [pc, #12]	@ (8003aac <HAL_GetTick+0x14>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	20025cd4 	.word	0x20025cd4

08003ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ab8:	f7ff ffee 	bl	8003a98 <HAL_GetTick>
 8003abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ac8:	d005      	beq.n	8003ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aca:	4b0a      	ldr	r3, [pc, #40]	@ (8003af4 <HAL_Delay+0x44>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	461a      	mov	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	4413      	add	r3, r2
 8003ad4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ad6:	bf00      	nop
 8003ad8:	f7ff ffde 	bl	8003a98 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d8f7      	bhi.n	8003ad8 <HAL_Delay+0x28>
  {
  }
}
 8003ae8:	bf00      	nop
 8003aea:	bf00      	nop
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	20000018 	.word	0x20000018

08003af8 <__NVIC_SetPriorityGrouping>:
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f003 0307 	and.w	r3, r3, #7
 8003b06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b08:	4b0c      	ldr	r3, [pc, #48]	@ (8003b3c <__NVIC_SetPriorityGrouping+0x44>)
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b14:	4013      	ands	r3, r2
 8003b16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b2a:	4a04      	ldr	r2, [pc, #16]	@ (8003b3c <__NVIC_SetPriorityGrouping+0x44>)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	60d3      	str	r3, [r2, #12]
}
 8003b30:	bf00      	nop
 8003b32:	3714      	adds	r7, #20
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	e000ed00 	.word	0xe000ed00

08003b40 <__NVIC_GetPriorityGrouping>:
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b44:	4b04      	ldr	r3, [pc, #16]	@ (8003b58 <__NVIC_GetPriorityGrouping+0x18>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	0a1b      	lsrs	r3, r3, #8
 8003b4a:	f003 0307 	and.w	r3, r3, #7
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	e000ed00 	.word	0xe000ed00

08003b5c <__NVIC_EnableIRQ>:
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	db0b      	blt.n	8003b86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b6e:	79fb      	ldrb	r3, [r7, #7]
 8003b70:	f003 021f 	and.w	r2, r3, #31
 8003b74:	4907      	ldr	r1, [pc, #28]	@ (8003b94 <__NVIC_EnableIRQ+0x38>)
 8003b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8003b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	e000e100 	.word	0xe000e100

08003b98 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	db12      	blt.n	8003bd0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003baa:	79fb      	ldrb	r3, [r7, #7]
 8003bac:	f003 021f 	and.w	r2, r3, #31
 8003bb0:	490a      	ldr	r1, [pc, #40]	@ (8003bdc <__NVIC_DisableIRQ+0x44>)
 8003bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb6:	095b      	lsrs	r3, r3, #5
 8003bb8:	2001      	movs	r0, #1
 8003bba:	fa00 f202 	lsl.w	r2, r0, r2
 8003bbe:	3320      	adds	r3, #32
 8003bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003bc4:	f3bf 8f4f 	dsb	sy
}
 8003bc8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003bca:	f3bf 8f6f 	isb	sy
}
 8003bce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	e000e100 	.word	0xe000e100

08003be0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	4603      	mov	r3, r0
 8003be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	db0c      	blt.n	8003c0c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bf2:	79fb      	ldrb	r3, [r7, #7]
 8003bf4:	f003 021f 	and.w	r2, r3, #31
 8003bf8:	4907      	ldr	r1, [pc, #28]	@ (8003c18 <__NVIC_ClearPendingIRQ+0x38>)
 8003bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	2001      	movs	r0, #1
 8003c02:	fa00 f202 	lsl.w	r2, r0, r2
 8003c06:	3360      	adds	r3, #96	@ 0x60
 8003c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	e000e100 	.word	0xe000e100

08003c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	4603      	mov	r3, r0
 8003c24:	6039      	str	r1, [r7, #0]
 8003c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	db0a      	blt.n	8003c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	b2da      	uxtb	r2, r3
 8003c34:	490c      	ldr	r1, [pc, #48]	@ (8003c68 <__NVIC_SetPriority+0x4c>)
 8003c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3a:	0112      	lsls	r2, r2, #4
 8003c3c:	b2d2      	uxtb	r2, r2
 8003c3e:	440b      	add	r3, r1
 8003c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c44:	e00a      	b.n	8003c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	4908      	ldr	r1, [pc, #32]	@ (8003c6c <__NVIC_SetPriority+0x50>)
 8003c4c:	79fb      	ldrb	r3, [r7, #7]
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	3b04      	subs	r3, #4
 8003c54:	0112      	lsls	r2, r2, #4
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	440b      	add	r3, r1
 8003c5a:	761a      	strb	r2, [r3, #24]
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr
 8003c68:	e000e100 	.word	0xe000e100
 8003c6c:	e000ed00 	.word	0xe000ed00

08003c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b089      	sub	sp, #36	@ 0x24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f1c3 0307 	rsb	r3, r3, #7
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	bf28      	it	cs
 8003c8e:	2304      	movcs	r3, #4
 8003c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	3304      	adds	r3, #4
 8003c96:	2b06      	cmp	r3, #6
 8003c98:	d902      	bls.n	8003ca0 <NVIC_EncodePriority+0x30>
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	3b03      	subs	r3, #3
 8003c9e:	e000      	b.n	8003ca2 <NVIC_EncodePriority+0x32>
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ca4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	43da      	mvns	r2, r3
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	401a      	ands	r2, r3
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cb8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc2:	43d9      	mvns	r1, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc8:	4313      	orrs	r3, r2
         );
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3724      	adds	r7, #36	@ 0x24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
	...

08003cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ce8:	d301      	bcc.n	8003cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cea:	2301      	movs	r3, #1
 8003cec:	e00f      	b.n	8003d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cee:	4a0a      	ldr	r2, [pc, #40]	@ (8003d18 <SysTick_Config+0x40>)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cf6:	210f      	movs	r1, #15
 8003cf8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003cfc:	f7ff ff8e 	bl	8003c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d00:	4b05      	ldr	r3, [pc, #20]	@ (8003d18 <SysTick_Config+0x40>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d06:	4b04      	ldr	r3, [pc, #16]	@ (8003d18 <SysTick_Config+0x40>)
 8003d08:	2207      	movs	r2, #7
 8003d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	e000e010 	.word	0xe000e010

08003d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff fee7 	bl	8003af8 <__NVIC_SetPriorityGrouping>
}
 8003d2a:	bf00      	nop
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b086      	sub	sp, #24
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	4603      	mov	r3, r0
 8003d3a:	60b9      	str	r1, [r7, #8]
 8003d3c:	607a      	str	r2, [r7, #4]
 8003d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d44:	f7ff fefc 	bl	8003b40 <__NVIC_GetPriorityGrouping>
 8003d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	68b9      	ldr	r1, [r7, #8]
 8003d4e:	6978      	ldr	r0, [r7, #20]
 8003d50:	f7ff ff8e 	bl	8003c70 <NVIC_EncodePriority>
 8003d54:	4602      	mov	r2, r0
 8003d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff ff5d 	bl	8003c1c <__NVIC_SetPriority>
}
 8003d62:	bf00      	nop
 8003d64:	3718      	adds	r7, #24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}

08003d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	b082      	sub	sp, #8
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	4603      	mov	r3, r0
 8003d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff feef 	bl	8003b5c <__NVIC_EnableIRQ>
}
 8003d7e:	bf00      	nop
 8003d80:	3708      	adds	r7, #8
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b082      	sub	sp, #8
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff feff 	bl	8003b98 <__NVIC_DisableIRQ>
}
 8003d9a:	bf00      	nop
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b082      	sub	sp, #8
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff ff94 	bl	8003cd8 <SysTick_Config>
 8003db0:	4603      	mov	r3, r0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b082      	sub	sp, #8
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff ff09 	bl	8003be0 <__NVIC_ClearPendingIRQ>
}
 8003dce:	bf00      	nop
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 031f 	and.w	r3, r3, #31
 8003dea:	2201      	movs	r2, #1
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8003df2:	4a04      	ldr	r2, [pc, #16]	@ (8003e04 <HAL_EXTI_ClearPending+0x2c>)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6153      	str	r3, [r2, #20]
}
 8003df8:	bf00      	nop
 8003dfa:	3714      	adds	r7, #20
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	40013c00 	.word	0x40013c00

08003e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b089      	sub	sp, #36	@ 0x24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e1e:	2300      	movs	r3, #0
 8003e20:	61fb      	str	r3, [r7, #28]
 8003e22:	e177      	b.n	8004114 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e24:	2201      	movs	r2, #1
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	4013      	ands	r3, r2
 8003e36:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	f040 8166 	bne.w	800410e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d005      	beq.n	8003e5a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d130      	bne.n	8003ebc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	2203      	movs	r2, #3
 8003e66:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	4013      	ands	r3, r2
 8003e70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68da      	ldr	r2, [r3, #12]
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	69ba      	ldr	r2, [r7, #24]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e90:	2201      	movs	r2, #1
 8003e92:	69fb      	ldr	r3, [r7, #28]
 8003e94:	fa02 f303 	lsl.w	r3, r2, r3
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	091b      	lsrs	r3, r3, #4
 8003ea6:	f003 0201 	and.w	r2, r3, #1
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb0:	69ba      	ldr	r2, [r7, #24]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f003 0303 	and.w	r3, r3, #3
 8003ec4:	2b03      	cmp	r3, #3
 8003ec6:	d017      	beq.n	8003ef8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	2203      	movs	r2, #3
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	43db      	mvns	r3, r3
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	4013      	ands	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	689a      	ldr	r2, [r3, #8]
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 0303 	and.w	r3, r3, #3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d123      	bne.n	8003f4c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	08da      	lsrs	r2, r3, #3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3208      	adds	r2, #8
 8003f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	220f      	movs	r2, #15
 8003f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f20:	43db      	mvns	r3, r3
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	4013      	ands	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	f003 0307 	and.w	r3, r3, #7
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	08da      	lsrs	r2, r3, #3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3208      	adds	r2, #8
 8003f46:	69b9      	ldr	r1, [r7, #24]
 8003f48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	2203      	movs	r2, #3
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4013      	ands	r3, r2
 8003f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 0203 	and.w	r2, r3, #3
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	69ba      	ldr	r2, [r7, #24]
 8003f7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 80c0 	beq.w	800410e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f8e:	2300      	movs	r3, #0
 8003f90:	60fb      	str	r3, [r7, #12]
 8003f92:	4b66      	ldr	r3, [pc, #408]	@ (800412c <HAL_GPIO_Init+0x324>)
 8003f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f96:	4a65      	ldr	r2, [pc, #404]	@ (800412c <HAL_GPIO_Init+0x324>)
 8003f98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f9e:	4b63      	ldr	r3, [pc, #396]	@ (800412c <HAL_GPIO_Init+0x324>)
 8003fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003faa:	4a61      	ldr	r2, [pc, #388]	@ (8004130 <HAL_GPIO_Init+0x328>)
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	089b      	lsrs	r3, r3, #2
 8003fb0:	3302      	adds	r3, #2
 8003fb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	f003 0303 	and.w	r3, r3, #3
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	220f      	movs	r2, #15
 8003fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a58      	ldr	r2, [pc, #352]	@ (8004134 <HAL_GPIO_Init+0x32c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d037      	beq.n	8004046 <HAL_GPIO_Init+0x23e>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a57      	ldr	r2, [pc, #348]	@ (8004138 <HAL_GPIO_Init+0x330>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d031      	beq.n	8004042 <HAL_GPIO_Init+0x23a>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a56      	ldr	r2, [pc, #344]	@ (800413c <HAL_GPIO_Init+0x334>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d02b      	beq.n	800403e <HAL_GPIO_Init+0x236>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a55      	ldr	r2, [pc, #340]	@ (8004140 <HAL_GPIO_Init+0x338>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d025      	beq.n	800403a <HAL_GPIO_Init+0x232>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a54      	ldr	r2, [pc, #336]	@ (8004144 <HAL_GPIO_Init+0x33c>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d01f      	beq.n	8004036 <HAL_GPIO_Init+0x22e>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a53      	ldr	r2, [pc, #332]	@ (8004148 <HAL_GPIO_Init+0x340>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d019      	beq.n	8004032 <HAL_GPIO_Init+0x22a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a52      	ldr	r2, [pc, #328]	@ (800414c <HAL_GPIO_Init+0x344>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <HAL_GPIO_Init+0x226>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a51      	ldr	r2, [pc, #324]	@ (8004150 <HAL_GPIO_Init+0x348>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d00d      	beq.n	800402a <HAL_GPIO_Init+0x222>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a50      	ldr	r2, [pc, #320]	@ (8004154 <HAL_GPIO_Init+0x34c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d007      	beq.n	8004026 <HAL_GPIO_Init+0x21e>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a4f      	ldr	r2, [pc, #316]	@ (8004158 <HAL_GPIO_Init+0x350>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d101      	bne.n	8004022 <HAL_GPIO_Init+0x21a>
 800401e:	2309      	movs	r3, #9
 8004020:	e012      	b.n	8004048 <HAL_GPIO_Init+0x240>
 8004022:	230a      	movs	r3, #10
 8004024:	e010      	b.n	8004048 <HAL_GPIO_Init+0x240>
 8004026:	2308      	movs	r3, #8
 8004028:	e00e      	b.n	8004048 <HAL_GPIO_Init+0x240>
 800402a:	2307      	movs	r3, #7
 800402c:	e00c      	b.n	8004048 <HAL_GPIO_Init+0x240>
 800402e:	2306      	movs	r3, #6
 8004030:	e00a      	b.n	8004048 <HAL_GPIO_Init+0x240>
 8004032:	2305      	movs	r3, #5
 8004034:	e008      	b.n	8004048 <HAL_GPIO_Init+0x240>
 8004036:	2304      	movs	r3, #4
 8004038:	e006      	b.n	8004048 <HAL_GPIO_Init+0x240>
 800403a:	2303      	movs	r3, #3
 800403c:	e004      	b.n	8004048 <HAL_GPIO_Init+0x240>
 800403e:	2302      	movs	r3, #2
 8004040:	e002      	b.n	8004048 <HAL_GPIO_Init+0x240>
 8004042:	2301      	movs	r3, #1
 8004044:	e000      	b.n	8004048 <HAL_GPIO_Init+0x240>
 8004046:	2300      	movs	r3, #0
 8004048:	69fa      	ldr	r2, [r7, #28]
 800404a:	f002 0203 	and.w	r2, r2, #3
 800404e:	0092      	lsls	r2, r2, #2
 8004050:	4093      	lsls	r3, r2
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	4313      	orrs	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004058:	4935      	ldr	r1, [pc, #212]	@ (8004130 <HAL_GPIO_Init+0x328>)
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	089b      	lsrs	r3, r3, #2
 800405e:	3302      	adds	r3, #2
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004066:	4b3d      	ldr	r3, [pc, #244]	@ (800415c <HAL_GPIO_Init+0x354>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	43db      	mvns	r3, r3
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	4013      	ands	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004082:	69ba      	ldr	r2, [r7, #24]
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800408a:	4a34      	ldr	r2, [pc, #208]	@ (800415c <HAL_GPIO_Init+0x354>)
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004090:	4b32      	ldr	r3, [pc, #200]	@ (800415c <HAL_GPIO_Init+0x354>)
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	43db      	mvns	r3, r3
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	4013      	ands	r3, r2
 800409e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d003      	beq.n	80040b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040b4:	4a29      	ldr	r2, [pc, #164]	@ (800415c <HAL_GPIO_Init+0x354>)
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040ba:	4b28      	ldr	r3, [pc, #160]	@ (800415c <HAL_GPIO_Init+0x354>)
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	43db      	mvns	r3, r3
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	4013      	ands	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040de:	4a1f      	ldr	r2, [pc, #124]	@ (800415c <HAL_GPIO_Init+0x354>)
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040e4:	4b1d      	ldr	r3, [pc, #116]	@ (800415c <HAL_GPIO_Init+0x354>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	43db      	mvns	r3, r3
 80040ee:	69ba      	ldr	r2, [r7, #24]
 80040f0:	4013      	ands	r3, r2
 80040f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d003      	beq.n	8004108 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004108:	4a14      	ldr	r2, [pc, #80]	@ (800415c <HAL_GPIO_Init+0x354>)
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	3301      	adds	r3, #1
 8004112:	61fb      	str	r3, [r7, #28]
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	2b0f      	cmp	r3, #15
 8004118:	f67f ae84 	bls.w	8003e24 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800411c:	bf00      	nop
 800411e:	bf00      	nop
 8004120:	3724      	adds	r7, #36	@ 0x24
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40023800 	.word	0x40023800
 8004130:	40013800 	.word	0x40013800
 8004134:	40020000 	.word	0x40020000
 8004138:	40020400 	.word	0x40020400
 800413c:	40020800 	.word	0x40020800
 8004140:	40020c00 	.word	0x40020c00
 8004144:	40021000 	.word	0x40021000
 8004148:	40021400 	.word	0x40021400
 800414c:	40021800 	.word	0x40021800
 8004150:	40021c00 	.word	0x40021c00
 8004154:	40022000 	.word	0x40022000
 8004158:	40022400 	.word	0x40022400
 800415c:	40013c00 	.word	0x40013c00

08004160 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
 8004168:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800416a:	2300      	movs	r3, #0
 800416c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800416e:	2300      	movs	r3, #0
 8004170:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004172:	2300      	movs	r3, #0
 8004174:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	e0d9      	b.n	8004330 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800417c:	2201      	movs	r2, #1
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	fa02 f303 	lsl.w	r3, r2, r3
 8004184:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	4013      	ands	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	429a      	cmp	r2, r3
 8004194:	f040 80c9 	bne.w	800432a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004198:	4a6b      	ldr	r2, [pc, #428]	@ (8004348 <HAL_GPIO_DeInit+0x1e8>)
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	089b      	lsrs	r3, r3, #2
 800419e:	3302      	adds	r3, #2
 80041a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041a4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f003 0303 	and.w	r3, r3, #3
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	220f      	movs	r2, #15
 80041b0:	fa02 f303 	lsl.w	r3, r2, r3
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	4013      	ands	r3, r2
 80041b8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a63      	ldr	r2, [pc, #396]	@ (800434c <HAL_GPIO_DeInit+0x1ec>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d037      	beq.n	8004232 <HAL_GPIO_DeInit+0xd2>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a62      	ldr	r2, [pc, #392]	@ (8004350 <HAL_GPIO_DeInit+0x1f0>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d031      	beq.n	800422e <HAL_GPIO_DeInit+0xce>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a61      	ldr	r2, [pc, #388]	@ (8004354 <HAL_GPIO_DeInit+0x1f4>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d02b      	beq.n	800422a <HAL_GPIO_DeInit+0xca>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a60      	ldr	r2, [pc, #384]	@ (8004358 <HAL_GPIO_DeInit+0x1f8>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d025      	beq.n	8004226 <HAL_GPIO_DeInit+0xc6>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a5f      	ldr	r2, [pc, #380]	@ (800435c <HAL_GPIO_DeInit+0x1fc>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d01f      	beq.n	8004222 <HAL_GPIO_DeInit+0xc2>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a5e      	ldr	r2, [pc, #376]	@ (8004360 <HAL_GPIO_DeInit+0x200>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d019      	beq.n	800421e <HAL_GPIO_DeInit+0xbe>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a5d      	ldr	r2, [pc, #372]	@ (8004364 <HAL_GPIO_DeInit+0x204>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d013      	beq.n	800421a <HAL_GPIO_DeInit+0xba>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a5c      	ldr	r2, [pc, #368]	@ (8004368 <HAL_GPIO_DeInit+0x208>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00d      	beq.n	8004216 <HAL_GPIO_DeInit+0xb6>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a5b      	ldr	r2, [pc, #364]	@ (800436c <HAL_GPIO_DeInit+0x20c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d007      	beq.n	8004212 <HAL_GPIO_DeInit+0xb2>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a5a      	ldr	r2, [pc, #360]	@ (8004370 <HAL_GPIO_DeInit+0x210>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d101      	bne.n	800420e <HAL_GPIO_DeInit+0xae>
 800420a:	2309      	movs	r3, #9
 800420c:	e012      	b.n	8004234 <HAL_GPIO_DeInit+0xd4>
 800420e:	230a      	movs	r3, #10
 8004210:	e010      	b.n	8004234 <HAL_GPIO_DeInit+0xd4>
 8004212:	2308      	movs	r3, #8
 8004214:	e00e      	b.n	8004234 <HAL_GPIO_DeInit+0xd4>
 8004216:	2307      	movs	r3, #7
 8004218:	e00c      	b.n	8004234 <HAL_GPIO_DeInit+0xd4>
 800421a:	2306      	movs	r3, #6
 800421c:	e00a      	b.n	8004234 <HAL_GPIO_DeInit+0xd4>
 800421e:	2305      	movs	r3, #5
 8004220:	e008      	b.n	8004234 <HAL_GPIO_DeInit+0xd4>
 8004222:	2304      	movs	r3, #4
 8004224:	e006      	b.n	8004234 <HAL_GPIO_DeInit+0xd4>
 8004226:	2303      	movs	r3, #3
 8004228:	e004      	b.n	8004234 <HAL_GPIO_DeInit+0xd4>
 800422a:	2302      	movs	r3, #2
 800422c:	e002      	b.n	8004234 <HAL_GPIO_DeInit+0xd4>
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <HAL_GPIO_DeInit+0xd4>
 8004232:	2300      	movs	r3, #0
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	f002 0203 	and.w	r2, r2, #3
 800423a:	0092      	lsls	r2, r2, #2
 800423c:	4093      	lsls	r3, r2
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	429a      	cmp	r2, r3
 8004242:	d132      	bne.n	80042aa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004244:	4b4b      	ldr	r3, [pc, #300]	@ (8004374 <HAL_GPIO_DeInit+0x214>)
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	43db      	mvns	r3, r3
 800424c:	4949      	ldr	r1, [pc, #292]	@ (8004374 <HAL_GPIO_DeInit+0x214>)
 800424e:	4013      	ands	r3, r2
 8004250:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004252:	4b48      	ldr	r3, [pc, #288]	@ (8004374 <HAL_GPIO_DeInit+0x214>)
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	43db      	mvns	r3, r3
 800425a:	4946      	ldr	r1, [pc, #280]	@ (8004374 <HAL_GPIO_DeInit+0x214>)
 800425c:	4013      	ands	r3, r2
 800425e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004260:	4b44      	ldr	r3, [pc, #272]	@ (8004374 <HAL_GPIO_DeInit+0x214>)
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	43db      	mvns	r3, r3
 8004268:	4942      	ldr	r1, [pc, #264]	@ (8004374 <HAL_GPIO_DeInit+0x214>)
 800426a:	4013      	ands	r3, r2
 800426c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800426e:	4b41      	ldr	r3, [pc, #260]	@ (8004374 <HAL_GPIO_DeInit+0x214>)
 8004270:	689a      	ldr	r2, [r3, #8]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	43db      	mvns	r3, r3
 8004276:	493f      	ldr	r1, [pc, #252]	@ (8004374 <HAL_GPIO_DeInit+0x214>)
 8004278:	4013      	ands	r3, r2
 800427a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f003 0303 	and.w	r3, r3, #3
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	220f      	movs	r2, #15
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800428c:	4a2e      	ldr	r2, [pc, #184]	@ (8004348 <HAL_GPIO_DeInit+0x1e8>)
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	089b      	lsrs	r3, r3, #2
 8004292:	3302      	adds	r3, #2
 8004294:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	43da      	mvns	r2, r3
 800429c:	482a      	ldr	r0, [pc, #168]	@ (8004348 <HAL_GPIO_DeInit+0x1e8>)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	089b      	lsrs	r3, r3, #2
 80042a2:	400a      	ands	r2, r1
 80042a4:	3302      	adds	r3, #2
 80042a6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	2103      	movs	r1, #3
 80042b4:	fa01 f303 	lsl.w	r3, r1, r3
 80042b8:	43db      	mvns	r3, r3
 80042ba:	401a      	ands	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	08da      	lsrs	r2, r3, #3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3208      	adds	r2, #8
 80042c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	f003 0307 	and.w	r3, r3, #7
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	220f      	movs	r2, #15
 80042d6:	fa02 f303 	lsl.w	r3, r2, r3
 80042da:	43db      	mvns	r3, r3
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	08d2      	lsrs	r2, r2, #3
 80042e0:	4019      	ands	r1, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	3208      	adds	r2, #8
 80042e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	2103      	movs	r1, #3
 80042f4:	fa01 f303 	lsl.w	r3, r1, r3
 80042f8:	43db      	mvns	r3, r3
 80042fa:	401a      	ands	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	2101      	movs	r1, #1
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	fa01 f303 	lsl.w	r3, r1, r3
 800430c:	43db      	mvns	r3, r3
 800430e:	401a      	ands	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	2103      	movs	r1, #3
 800431e:	fa01 f303 	lsl.w	r3, r1, r3
 8004322:	43db      	mvns	r3, r3
 8004324:	401a      	ands	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	3301      	adds	r3, #1
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	2b0f      	cmp	r3, #15
 8004334:	f67f af22 	bls.w	800417c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004338:	bf00      	nop
 800433a:	bf00      	nop
 800433c:	371c      	adds	r7, #28
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	40013800 	.word	0x40013800
 800434c:	40020000 	.word	0x40020000
 8004350:	40020400 	.word	0x40020400
 8004354:	40020800 	.word	0x40020800
 8004358:	40020c00 	.word	0x40020c00
 800435c:	40021000 	.word	0x40021000
 8004360:	40021400 	.word	0x40021400
 8004364:	40021800 	.word	0x40021800
 8004368:	40021c00 	.word	0x40021c00
 800436c:	40022000 	.word	0x40022000
 8004370:	40022400 	.word	0x40022400
 8004374:	40013c00 	.word	0x40013c00

08004378 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	887b      	ldrh	r3, [r7, #2]
 800438a:	4013      	ands	r3, r2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004390:	2301      	movs	r3, #1
 8004392:	73fb      	strb	r3, [r7, #15]
 8004394:	e001      	b.n	800439a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004396:	2300      	movs	r3, #0
 8004398:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800439a:	7bfb      	ldrb	r3, [r7, #15]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	807b      	strh	r3, [r7, #2]
 80043b4:	4613      	mov	r3, r2
 80043b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043b8:	787b      	ldrb	r3, [r7, #1]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043be:	887a      	ldrh	r2, [r7, #2]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80043c4:	e003      	b.n	80043ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80043c6:	887b      	ldrh	r3, [r7, #2]
 80043c8:	041a      	lsls	r2, r3, #16
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	619a      	str	r2, [r3, #24]
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043da:	b480      	push	{r7}
 80043dc:	b085      	sub	sp, #20
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	460b      	mov	r3, r1
 80043e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	695b      	ldr	r3, [r3, #20]
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80043ec:	887a      	ldrh	r2, [r7, #2]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	4013      	ands	r3, r2
 80043f2:	041a      	lsls	r2, r3, #16
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	43d9      	mvns	r1, r3
 80043f8:	887b      	ldrh	r3, [r7, #2]
 80043fa:	400b      	ands	r3, r1
 80043fc:	431a      	orrs	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	619a      	str	r2, [r3, #24]
}
 8004402:	bf00      	nop
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr
	...

08004410 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	4603      	mov	r3, r0
 8004418:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800441a:	4b08      	ldr	r3, [pc, #32]	@ (800443c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800441c:	695a      	ldr	r2, [r3, #20]
 800441e:	88fb      	ldrh	r3, [r7, #6]
 8004420:	4013      	ands	r3, r2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d006      	beq.n	8004434 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004426:	4a05      	ldr	r2, [pc, #20]	@ (800443c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004428:	88fb      	ldrh	r3, [r7, #6]
 800442a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800442c:	88fb      	ldrh	r3, [r7, #6]
 800442e:	4618      	mov	r0, r3
 8004430:	f7fe fe82 	bl	8003138 <HAL_GPIO_EXTI_Callback>
  }
}
 8004434:	bf00      	nop
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	40013c00 	.word	0x40013c00

08004440 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d101      	bne.n	8004452 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e12b      	b.n	80046aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004458:	b2db      	uxtb	r3, r3
 800445a:	2b00      	cmp	r3, #0
 800445c:	d106      	bne.n	800446c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fe fc10 	bl	8002c8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2224      	movs	r2, #36	@ 0x24
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0201 	bic.w	r2, r2, #1
 8004482:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004492:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044a2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044a4:	f001 ff82 	bl	80063ac <HAL_RCC_GetPCLK1Freq>
 80044a8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	4a81      	ldr	r2, [pc, #516]	@ (80046b4 <HAL_I2C_Init+0x274>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d807      	bhi.n	80044c4 <HAL_I2C_Init+0x84>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4a80      	ldr	r2, [pc, #512]	@ (80046b8 <HAL_I2C_Init+0x278>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	bf94      	ite	ls
 80044bc:	2301      	movls	r3, #1
 80044be:	2300      	movhi	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	e006      	b.n	80044d2 <HAL_I2C_Init+0x92>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4a7d      	ldr	r2, [pc, #500]	@ (80046bc <HAL_I2C_Init+0x27c>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	bf94      	ite	ls
 80044cc:	2301      	movls	r3, #1
 80044ce:	2300      	movhi	r3, #0
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d001      	beq.n	80044da <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e0e7      	b.n	80046aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4a78      	ldr	r2, [pc, #480]	@ (80046c0 <HAL_I2C_Init+0x280>)
 80044de:	fba2 2303 	umull	r2, r3, r2, r3
 80044e2:	0c9b      	lsrs	r3, r3, #18
 80044e4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6a1b      	ldr	r3, [r3, #32]
 8004500:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	4a6a      	ldr	r2, [pc, #424]	@ (80046b4 <HAL_I2C_Init+0x274>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d802      	bhi.n	8004514 <HAL_I2C_Init+0xd4>
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	3301      	adds	r3, #1
 8004512:	e009      	b.n	8004528 <HAL_I2C_Init+0xe8>
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800451a:	fb02 f303 	mul.w	r3, r2, r3
 800451e:	4a69      	ldr	r2, [pc, #420]	@ (80046c4 <HAL_I2C_Init+0x284>)
 8004520:	fba2 2303 	umull	r2, r3, r2, r3
 8004524:	099b      	lsrs	r3, r3, #6
 8004526:	3301      	adds	r3, #1
 8004528:	687a      	ldr	r2, [r7, #4]
 800452a:	6812      	ldr	r2, [r2, #0]
 800452c:	430b      	orrs	r3, r1
 800452e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	69db      	ldr	r3, [r3, #28]
 8004536:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800453a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	495c      	ldr	r1, [pc, #368]	@ (80046b4 <HAL_I2C_Init+0x274>)
 8004544:	428b      	cmp	r3, r1
 8004546:	d819      	bhi.n	800457c <HAL_I2C_Init+0x13c>
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	1e59      	subs	r1, r3, #1
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	fbb1 f3f3 	udiv	r3, r1, r3
 8004556:	1c59      	adds	r1, r3, #1
 8004558:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800455c:	400b      	ands	r3, r1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d00a      	beq.n	8004578 <HAL_I2C_Init+0x138>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	1e59      	subs	r1, r3, #1
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	005b      	lsls	r3, r3, #1
 800456c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004570:	3301      	adds	r3, #1
 8004572:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004576:	e051      	b.n	800461c <HAL_I2C_Init+0x1dc>
 8004578:	2304      	movs	r3, #4
 800457a:	e04f      	b.n	800461c <HAL_I2C_Init+0x1dc>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d111      	bne.n	80045a8 <HAL_I2C_Init+0x168>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	1e58      	subs	r0, r3, #1
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6859      	ldr	r1, [r3, #4]
 800458c:	460b      	mov	r3, r1
 800458e:	005b      	lsls	r3, r3, #1
 8004590:	440b      	add	r3, r1
 8004592:	fbb0 f3f3 	udiv	r3, r0, r3
 8004596:	3301      	adds	r3, #1
 8004598:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800459c:	2b00      	cmp	r3, #0
 800459e:	bf0c      	ite	eq
 80045a0:	2301      	moveq	r3, #1
 80045a2:	2300      	movne	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	e012      	b.n	80045ce <HAL_I2C_Init+0x18e>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	1e58      	subs	r0, r3, #1
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6859      	ldr	r1, [r3, #4]
 80045b0:	460b      	mov	r3, r1
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	0099      	lsls	r1, r3, #2
 80045b8:	440b      	add	r3, r1
 80045ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80045be:	3301      	adds	r3, #1
 80045c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	bf0c      	ite	eq
 80045c8:	2301      	moveq	r3, #1
 80045ca:	2300      	movne	r3, #0
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <HAL_I2C_Init+0x196>
 80045d2:	2301      	movs	r3, #1
 80045d4:	e022      	b.n	800461c <HAL_I2C_Init+0x1dc>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10e      	bne.n	80045fc <HAL_I2C_Init+0x1bc>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	1e58      	subs	r0, r3, #1
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6859      	ldr	r1, [r3, #4]
 80045e6:	460b      	mov	r3, r1
 80045e8:	005b      	lsls	r3, r3, #1
 80045ea:	440b      	add	r3, r1
 80045ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80045f0:	3301      	adds	r3, #1
 80045f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045fa:	e00f      	b.n	800461c <HAL_I2C_Init+0x1dc>
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	1e58      	subs	r0, r3, #1
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6859      	ldr	r1, [r3, #4]
 8004604:	460b      	mov	r3, r1
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	440b      	add	r3, r1
 800460a:	0099      	lsls	r1, r3, #2
 800460c:	440b      	add	r3, r1
 800460e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004612:	3301      	adds	r3, #1
 8004614:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004618:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800461c:	6879      	ldr	r1, [r7, #4]
 800461e:	6809      	ldr	r1, [r1, #0]
 8004620:	4313      	orrs	r3, r2
 8004622:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	69da      	ldr	r2, [r3, #28]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	430a      	orrs	r2, r1
 800463e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800464a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6911      	ldr	r1, [r2, #16]
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	68d2      	ldr	r2, [r2, #12]
 8004656:	4311      	orrs	r1, r2
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6812      	ldr	r2, [r2, #0]
 800465c:	430b      	orrs	r3, r1
 800465e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	695a      	ldr	r2, [r3, #20]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	431a      	orrs	r2, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	430a      	orrs	r2, r1
 800467a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0201 	orr.w	r2, r2, #1
 800468a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2220      	movs	r2, #32
 8004696:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	000186a0 	.word	0x000186a0
 80046b8:	001e847f 	.word	0x001e847f
 80046bc:	003d08ff 	.word	0x003d08ff
 80046c0:	431bde83 	.word	0x431bde83
 80046c4:	10624dd3 	.word	0x10624dd3

080046c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af02      	add	r7, sp, #8
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	4608      	mov	r0, r1
 80046d2:	4611      	mov	r1, r2
 80046d4:	461a      	mov	r2, r3
 80046d6:	4603      	mov	r3, r0
 80046d8:	817b      	strh	r3, [r7, #10]
 80046da:	460b      	mov	r3, r1
 80046dc:	813b      	strh	r3, [r7, #8]
 80046de:	4613      	mov	r3, r2
 80046e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046e2:	f7ff f9d9 	bl	8003a98 <HAL_GetTick>
 80046e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	2b20      	cmp	r3, #32
 80046f2:	f040 80d9 	bne.w	80048a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	9300      	str	r3, [sp, #0]
 80046fa:	2319      	movs	r3, #25
 80046fc:	2201      	movs	r2, #1
 80046fe:	496d      	ldr	r1, [pc, #436]	@ (80048b4 <HAL_I2C_Mem_Write+0x1ec>)
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 fc8b 	bl	800501c <I2C_WaitOnFlagUntilTimeout>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800470c:	2302      	movs	r3, #2
 800470e:	e0cc      	b.n	80048aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_I2C_Mem_Write+0x56>
 800471a:	2302      	movs	r3, #2
 800471c:	e0c5      	b.n	80048aa <HAL_I2C_Mem_Write+0x1e2>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b01      	cmp	r3, #1
 8004732:	d007      	beq.n	8004744 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f042 0201 	orr.w	r2, r2, #1
 8004742:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004752:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2221      	movs	r2, #33	@ 0x21
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2240      	movs	r2, #64	@ 0x40
 8004760:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6a3a      	ldr	r2, [r7, #32]
 800476e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004774:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800477a:	b29a      	uxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4a4d      	ldr	r2, [pc, #308]	@ (80048b8 <HAL_I2C_Mem_Write+0x1f0>)
 8004784:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004786:	88f8      	ldrh	r0, [r7, #6]
 8004788:	893a      	ldrh	r2, [r7, #8]
 800478a:	8979      	ldrh	r1, [r7, #10]
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	9301      	str	r3, [sp, #4]
 8004790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004792:	9300      	str	r3, [sp, #0]
 8004794:	4603      	mov	r3, r0
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 fac2 	bl	8004d20 <I2C_RequestMemoryWrite>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d052      	beq.n	8004848 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e081      	b.n	80048aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 fd50 	bl	8005250 <I2C_WaitOnTXEFlagUntilTimeout>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00d      	beq.n	80047d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ba:	2b04      	cmp	r3, #4
 80047bc:	d107      	bne.n	80047ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e06b      	b.n	80048aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d6:	781a      	ldrb	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e2:	1c5a      	adds	r2, r3, #1
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ec:	3b01      	subs	r3, #1
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	3b01      	subs	r3, #1
 80047fc:	b29a      	uxth	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b04      	cmp	r3, #4
 800480e:	d11b      	bne.n	8004848 <HAL_I2C_Mem_Write+0x180>
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004814:	2b00      	cmp	r3, #0
 8004816:	d017      	beq.n	8004848 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481c:	781a      	ldrb	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004828:	1c5a      	adds	r2, r3, #1
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004832:	3b01      	subs	r3, #1
 8004834:	b29a      	uxth	r2, r3
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	3b01      	subs	r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1aa      	bne.n	80047a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 fd43 	bl	80052e0 <I2C_WaitOnBTFFlagUntilTimeout>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00d      	beq.n	800487c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004864:	2b04      	cmp	r3, #4
 8004866:	d107      	bne.n	8004878 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004876:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e016      	b.n	80048aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800488a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80048a4:	2300      	movs	r3, #0
 80048a6:	e000      	b.n	80048aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80048a8:	2302      	movs	r3, #2
  }
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3718      	adds	r7, #24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	00100002 	.word	0x00100002
 80048b8:	ffff0000 	.word	0xffff0000

080048bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08c      	sub	sp, #48	@ 0x30
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	4608      	mov	r0, r1
 80048c6:	4611      	mov	r1, r2
 80048c8:	461a      	mov	r2, r3
 80048ca:	4603      	mov	r3, r0
 80048cc:	817b      	strh	r3, [r7, #10]
 80048ce:	460b      	mov	r3, r1
 80048d0:	813b      	strh	r3, [r7, #8]
 80048d2:	4613      	mov	r3, r2
 80048d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048d6:	f7ff f8df 	bl	8003a98 <HAL_GetTick>
 80048da:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b20      	cmp	r3, #32
 80048e6:	f040 8214 	bne.w	8004d12 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80048ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ec:	9300      	str	r3, [sp, #0]
 80048ee:	2319      	movs	r3, #25
 80048f0:	2201      	movs	r2, #1
 80048f2:	497b      	ldr	r1, [pc, #492]	@ (8004ae0 <HAL_I2C_Mem_Read+0x224>)
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f000 fb91 	bl	800501c <I2C_WaitOnFlagUntilTimeout>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004900:	2302      	movs	r3, #2
 8004902:	e207      	b.n	8004d14 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800490a:	2b01      	cmp	r3, #1
 800490c:	d101      	bne.n	8004912 <HAL_I2C_Mem_Read+0x56>
 800490e:	2302      	movs	r3, #2
 8004910:	e200      	b.n	8004d14 <HAL_I2C_Mem_Read+0x458>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b01      	cmp	r3, #1
 8004926:	d007      	beq.n	8004938 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004946:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2222      	movs	r2, #34	@ 0x22
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2240      	movs	r2, #64	@ 0x40
 8004954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004962:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004968:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800496e:	b29a      	uxth	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4a5b      	ldr	r2, [pc, #364]	@ (8004ae4 <HAL_I2C_Mem_Read+0x228>)
 8004978:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800497a:	88f8      	ldrh	r0, [r7, #6]
 800497c:	893a      	ldrh	r2, [r7, #8]
 800497e:	8979      	ldrh	r1, [r7, #10]
 8004980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004982:	9301      	str	r3, [sp, #4]
 8004984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	4603      	mov	r3, r0
 800498a:	68f8      	ldr	r0, [r7, #12]
 800498c:	f000 fa5e 	bl	8004e4c <I2C_RequestMemoryRead>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e1bc      	b.n	8004d14 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d113      	bne.n	80049ca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049a2:	2300      	movs	r3, #0
 80049a4:	623b      	str	r3, [r7, #32]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	623b      	str	r3, [r7, #32]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	623b      	str	r3, [r7, #32]
 80049b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049c6:	601a      	str	r2, [r3, #0]
 80049c8:	e190      	b.n	8004cec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d11b      	bne.n	8004a0a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681a      	ldr	r2, [r3, #0]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049e2:	2300      	movs	r3, #0
 80049e4:	61fb      	str	r3, [r7, #28]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	695b      	ldr	r3, [r3, #20]
 80049ec:	61fb      	str	r3, [r7, #28]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	61fb      	str	r3, [r7, #28]
 80049f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a06:	601a      	str	r2, [r3, #0]
 8004a08:	e170      	b.n	8004cec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d11b      	bne.n	8004a4a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a20:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a30:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a32:	2300      	movs	r3, #0
 8004a34:	61bb      	str	r3, [r7, #24]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	61bb      	str	r3, [r7, #24]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	61bb      	str	r3, [r7, #24]
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	e150      	b.n	8004cec <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	617b      	str	r3, [r7, #20]
 8004a5e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004a60:	e144      	b.n	8004cec <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a66:	2b03      	cmp	r3, #3
 8004a68:	f200 80f1 	bhi.w	8004c4e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d123      	bne.n	8004abc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a76:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004a78:	68f8      	ldr	r0, [r7, #12]
 8004a7a:	f000 fc79 	bl	8005370 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e145      	b.n	8004d14 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	691a      	ldr	r2, [r3, #16]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004aba:	e117      	b.n	8004cec <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ac0:	2b02      	cmp	r3, #2
 8004ac2:	d14e      	bne.n	8004b62 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aca:	2200      	movs	r2, #0
 8004acc:	4906      	ldr	r1, [pc, #24]	@ (8004ae8 <HAL_I2C_Mem_Read+0x22c>)
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 faa4 	bl	800501c <I2C_WaitOnFlagUntilTimeout>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d008      	beq.n	8004aec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e11a      	b.n	8004d14 <HAL_I2C_Mem_Read+0x458>
 8004ade:	bf00      	nop
 8004ae0:	00100002 	.word	0x00100002
 8004ae4:	ffff0000 	.word	0xffff0000
 8004ae8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004afa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	691a      	ldr	r2, [r3, #16]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b06:	b2d2      	uxtb	r2, r2
 8004b08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0e:	1c5a      	adds	r2, r3, #1
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	b29a      	uxth	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	3b01      	subs	r3, #1
 8004b28:	b29a      	uxth	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	691a      	ldr	r2, [r3, #16]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b38:	b2d2      	uxtb	r2, r2
 8004b3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b56:	b29b      	uxth	r3, r3
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004b60:	e0c4      	b.n	8004cec <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b64:	9300      	str	r3, [sp, #0]
 8004b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b68:	2200      	movs	r2, #0
 8004b6a:	496c      	ldr	r1, [pc, #432]	@ (8004d1c <HAL_I2C_Mem_Read+0x460>)
 8004b6c:	68f8      	ldr	r0, [r7, #12]
 8004b6e:	f000 fa55 	bl	800501c <I2C_WaitOnFlagUntilTimeout>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e0cb      	b.n	8004d14 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691a      	ldr	r2, [r3, #16]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b9e:	1c5a      	adds	r2, r3, #1
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc0:	9300      	str	r3, [sp, #0]
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	4955      	ldr	r1, [pc, #340]	@ (8004d1c <HAL_I2C_Mem_Read+0x460>)
 8004bc8:	68f8      	ldr	r0, [r7, #12]
 8004bca:	f000 fa27 	bl	800501c <I2C_WaitOnFlagUntilTimeout>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d001      	beq.n	8004bd8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e09d      	b.n	8004d14 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004be6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	691a      	ldr	r2, [r3, #16]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfa:	1c5a      	adds	r2, r3, #1
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c04:	3b01      	subs	r3, #1
 8004c06:	b29a      	uxth	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	3b01      	subs	r3, #1
 8004c14:	b29a      	uxth	r2, r3
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	691a      	ldr	r2, [r3, #16]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	3b01      	subs	r3, #1
 8004c46:	b29a      	uxth	r2, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c4c:	e04e      	b.n	8004cec <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c50:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 fb8c 	bl	8005370 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e058      	b.n	8004d14 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	691a      	ldr	r2, [r3, #16]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c74:	1c5a      	adds	r2, r3, #1
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c7e:	3b01      	subs	r3, #1
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	b29a      	uxth	r2, r3
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	695b      	ldr	r3, [r3, #20]
 8004c9a:	f003 0304 	and.w	r3, r3, #4
 8004c9e:	2b04      	cmp	r3, #4
 8004ca0:	d124      	bne.n	8004cec <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d107      	bne.n	8004cba <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cb8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	691a      	ldr	r2, [r3, #16]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cc4:	b2d2      	uxtb	r2, r2
 8004cc6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ccc:	1c5a      	adds	r2, r3, #1
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ce2:	b29b      	uxth	r3, r3
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	b29a      	uxth	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f47f aeb6 	bne.w	8004a62 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2220      	movs	r2, #32
 8004cfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	e000      	b.n	8004d14 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004d12:	2302      	movs	r3, #2
  }
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3728      	adds	r7, #40	@ 0x28
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	bd80      	pop	{r7, pc}
 8004d1c:	00010004 	.word	0x00010004

08004d20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b088      	sub	sp, #32
 8004d24:	af02      	add	r7, sp, #8
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	4608      	mov	r0, r1
 8004d2a:	4611      	mov	r1, r2
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	4603      	mov	r3, r0
 8004d30:	817b      	strh	r3, [r7, #10]
 8004d32:	460b      	mov	r3, r1
 8004d34:	813b      	strh	r3, [r7, #8]
 8004d36:	4613      	mov	r3, r2
 8004d38:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	6a3b      	ldr	r3, [r7, #32]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f000 f960 	bl	800501c <I2C_WaitOnFlagUntilTimeout>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00d      	beq.n	8004d7e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d70:	d103      	bne.n	8004d7a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d78:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e05f      	b.n	8004e3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d7e:	897b      	ldrh	r3, [r7, #10]
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	461a      	mov	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d90:	6a3a      	ldr	r2, [r7, #32]
 8004d92:	492d      	ldr	r1, [pc, #180]	@ (8004e48 <I2C_RequestMemoryWrite+0x128>)
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f000 f9bb 	bl	8005110 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d001      	beq.n	8004da4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	e04c      	b.n	8004e3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004da4:	2300      	movs	r3, #0
 8004da6:	617b      	str	r3, [r7, #20]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dbc:	6a39      	ldr	r1, [r7, #32]
 8004dbe:	68f8      	ldr	r0, [r7, #12]
 8004dc0:	f000 fa46 	bl	8005250 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00d      	beq.n	8004de6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dce:	2b04      	cmp	r3, #4
 8004dd0:	d107      	bne.n	8004de2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004de0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e02b      	b.n	8004e3e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004de6:	88fb      	ldrh	r3, [r7, #6]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d105      	bne.n	8004df8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dec:	893b      	ldrh	r3, [r7, #8]
 8004dee:	b2da      	uxtb	r2, r3
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	611a      	str	r2, [r3, #16]
 8004df6:	e021      	b.n	8004e3c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004df8:	893b      	ldrh	r3, [r7, #8]
 8004dfa:	0a1b      	lsrs	r3, r3, #8
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e08:	6a39      	ldr	r1, [r7, #32]
 8004e0a:	68f8      	ldr	r0, [r7, #12]
 8004e0c:	f000 fa20 	bl	8005250 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00d      	beq.n	8004e32 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e1a:	2b04      	cmp	r3, #4
 8004e1c:	d107      	bne.n	8004e2e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e2c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e005      	b.n	8004e3e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e32:	893b      	ldrh	r3, [r7, #8]
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3718      	adds	r7, #24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	00010002 	.word	0x00010002

08004e4c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b088      	sub	sp, #32
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	4608      	mov	r0, r1
 8004e56:	4611      	mov	r1, r2
 8004e58:	461a      	mov	r2, r3
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	817b      	strh	r3, [r7, #10]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	813b      	strh	r3, [r7, #8]
 8004e62:	4613      	mov	r3, r2
 8004e64:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004e74:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	9300      	str	r3, [sp, #0]
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 f8c2 	bl	800501c <I2C_WaitOnFlagUntilTimeout>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00d      	beq.n	8004eba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ea8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004eac:	d103      	bne.n	8004eb6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004eb4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e0aa      	b.n	8005010 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004eba:	897b      	ldrh	r3, [r7, #10]
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004ec8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ecc:	6a3a      	ldr	r2, [r7, #32]
 8004ece:	4952      	ldr	r1, [pc, #328]	@ (8005018 <I2C_RequestMemoryRead+0x1cc>)
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 f91d 	bl	8005110 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d001      	beq.n	8004ee0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e097      	b.n	8005010 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ef8:	6a39      	ldr	r1, [r7, #32]
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 f9a8 	bl	8005250 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00d      	beq.n	8004f22 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d107      	bne.n	8004f1e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e076      	b.n	8005010 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004f22:	88fb      	ldrh	r3, [r7, #6]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d105      	bne.n	8004f34 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f28:	893b      	ldrh	r3, [r7, #8]
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	611a      	str	r2, [r3, #16]
 8004f32:	e021      	b.n	8004f78 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004f34:	893b      	ldrh	r3, [r7, #8]
 8004f36:	0a1b      	lsrs	r3, r3, #8
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	b2da      	uxtb	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f44:	6a39      	ldr	r1, [r7, #32]
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f000 f982 	bl	8005250 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00d      	beq.n	8004f6e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d107      	bne.n	8004f6a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e050      	b.n	8005010 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f6e:	893b      	ldrh	r3, [r7, #8]
 8004f70:	b2da      	uxtb	r2, r3
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f7a:	6a39      	ldr	r1, [r7, #32]
 8004f7c:	68f8      	ldr	r0, [r7, #12]
 8004f7e:	f000 f967 	bl	8005250 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d00d      	beq.n	8004fa4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8c:	2b04      	cmp	r3, #4
 8004f8e:	d107      	bne.n	8004fa0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f9e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e035      	b.n	8005010 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fb2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb6:	9300      	str	r3, [sp, #0]
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 f82b 	bl	800501c <I2C_WaitOnFlagUntilTimeout>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00d      	beq.n	8004fe8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fda:	d103      	bne.n	8004fe4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fe2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004fe4:	2303      	movs	r3, #3
 8004fe6:	e013      	b.n	8005010 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004fe8:	897b      	ldrh	r3, [r7, #10]
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	f043 0301 	orr.w	r3, r3, #1
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffa:	6a3a      	ldr	r2, [r7, #32]
 8004ffc:	4906      	ldr	r1, [pc, #24]	@ (8005018 <I2C_RequestMemoryRead+0x1cc>)
 8004ffe:	68f8      	ldr	r0, [r7, #12]
 8005000:	f000 f886 	bl	8005110 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800500a:	2301      	movs	r3, #1
 800500c:	e000      	b.n	8005010 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800500e:	2300      	movs	r3, #0
}
 8005010:	4618      	mov	r0, r3
 8005012:	3718      	adds	r7, #24
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	00010002 	.word	0x00010002

0800501c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	603b      	str	r3, [r7, #0]
 8005028:	4613      	mov	r3, r2
 800502a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800502c:	e048      	b.n	80050c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005034:	d044      	beq.n	80050c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005036:	f7fe fd2f 	bl	8003a98 <HAL_GetTick>
 800503a:	4602      	mov	r2, r0
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	429a      	cmp	r2, r3
 8005044:	d302      	bcc.n	800504c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d139      	bne.n	80050c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	0c1b      	lsrs	r3, r3, #16
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b01      	cmp	r3, #1
 8005054:	d10d      	bne.n	8005072 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	695b      	ldr	r3, [r3, #20]
 800505c:	43da      	mvns	r2, r3
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	4013      	ands	r3, r2
 8005062:	b29b      	uxth	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	bf0c      	ite	eq
 8005068:	2301      	moveq	r3, #1
 800506a:	2300      	movne	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	461a      	mov	r2, r3
 8005070:	e00c      	b.n	800508c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	43da      	mvns	r2, r3
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	4013      	ands	r3, r2
 800507e:	b29b      	uxth	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	bf0c      	ite	eq
 8005084:	2301      	moveq	r3, #1
 8005086:	2300      	movne	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	461a      	mov	r2, r3
 800508c:	79fb      	ldrb	r3, [r7, #7]
 800508e:	429a      	cmp	r2, r3
 8005090:	d116      	bne.n	80050c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	2200      	movs	r2, #0
 8005096:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ac:	f043 0220 	orr.w	r2, r3, #32
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e023      	b.n	8005108 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	0c1b      	lsrs	r3, r3, #16
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d10d      	bne.n	80050e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	695b      	ldr	r3, [r3, #20]
 80050d0:	43da      	mvns	r2, r3
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	4013      	ands	r3, r2
 80050d6:	b29b      	uxth	r3, r3
 80050d8:	2b00      	cmp	r3, #0
 80050da:	bf0c      	ite	eq
 80050dc:	2301      	moveq	r3, #1
 80050de:	2300      	movne	r3, #0
 80050e0:	b2db      	uxtb	r3, r3
 80050e2:	461a      	mov	r2, r3
 80050e4:	e00c      	b.n	8005100 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	43da      	mvns	r2, r3
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	4013      	ands	r3, r2
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	bf0c      	ite	eq
 80050f8:	2301      	moveq	r3, #1
 80050fa:	2300      	movne	r3, #0
 80050fc:	b2db      	uxtb	r3, r3
 80050fe:	461a      	mov	r2, r3
 8005100:	79fb      	ldrb	r3, [r7, #7]
 8005102:	429a      	cmp	r2, r3
 8005104:	d093      	beq.n	800502e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3710      	adds	r7, #16
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}

08005110 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
 800511c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800511e:	e071      	b.n	8005204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800512a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800512e:	d123      	bne.n	8005178 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800513e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005148:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005164:	f043 0204 	orr.w	r2, r3, #4
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e067      	b.n	8005248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800517e:	d041      	beq.n	8005204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005180:	f7fe fc8a 	bl	8003a98 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	429a      	cmp	r2, r3
 800518e:	d302      	bcc.n	8005196 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d136      	bne.n	8005204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	0c1b      	lsrs	r3, r3, #16
 800519a:	b2db      	uxtb	r3, r3
 800519c:	2b01      	cmp	r3, #1
 800519e:	d10c      	bne.n	80051ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	43da      	mvns	r2, r3
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	4013      	ands	r3, r2
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	bf14      	ite	ne
 80051b2:	2301      	movne	r3, #1
 80051b4:	2300      	moveq	r3, #0
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	e00b      	b.n	80051d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	43da      	mvns	r2, r3
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	4013      	ands	r3, r2
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	bf14      	ite	ne
 80051cc:	2301      	movne	r3, #1
 80051ce:	2300      	moveq	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d016      	beq.n	8005204 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2200      	movs	r2, #0
 80051da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2220      	movs	r2, #32
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f0:	f043 0220 	orr.w	r2, r3, #32
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e021      	b.n	8005248 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	0c1b      	lsrs	r3, r3, #16
 8005208:	b2db      	uxtb	r3, r3
 800520a:	2b01      	cmp	r3, #1
 800520c:	d10c      	bne.n	8005228 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	43da      	mvns	r2, r3
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	4013      	ands	r3, r2
 800521a:	b29b      	uxth	r3, r3
 800521c:	2b00      	cmp	r3, #0
 800521e:	bf14      	ite	ne
 8005220:	2301      	movne	r3, #1
 8005222:	2300      	moveq	r3, #0
 8005224:	b2db      	uxtb	r3, r3
 8005226:	e00b      	b.n	8005240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	43da      	mvns	r2, r3
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4013      	ands	r3, r2
 8005234:	b29b      	uxth	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	bf14      	ite	ne
 800523a:	2301      	movne	r3, #1
 800523c:	2300      	moveq	r3, #0
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	f47f af6d 	bne.w	8005120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800525c:	e034      	b.n	80052c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800525e:	68f8      	ldr	r0, [r7, #12]
 8005260:	f000 f8e3 	bl	800542a <I2C_IsAcknowledgeFailed>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	d001      	beq.n	800526e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e034      	b.n	80052d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005274:	d028      	beq.n	80052c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005276:	f7fe fc0f 	bl	8003a98 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	68ba      	ldr	r2, [r7, #8]
 8005282:	429a      	cmp	r2, r3
 8005284:	d302      	bcc.n	800528c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d11d      	bne.n	80052c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005296:	2b80      	cmp	r3, #128	@ 0x80
 8005298:	d016      	beq.n	80052c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b4:	f043 0220 	orr.w	r2, r3, #32
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
 80052c6:	e007      	b.n	80052d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052d2:	2b80      	cmp	r3, #128	@ 0x80
 80052d4:	d1c3      	bne.n	800525e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80052d6:	2300      	movs	r3, #0
}
 80052d8:	4618      	mov	r0, r3
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}

080052e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b084      	sub	sp, #16
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	60f8      	str	r0, [r7, #12]
 80052e8:	60b9      	str	r1, [r7, #8]
 80052ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80052ec:	e034      	b.n	8005358 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 f89b 	bl	800542a <I2C_IsAcknowledgeFailed>
 80052f4:	4603      	mov	r3, r0
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d001      	beq.n	80052fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e034      	b.n	8005368 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005304:	d028      	beq.n	8005358 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005306:	f7fe fbc7 	bl	8003a98 <HAL_GetTick>
 800530a:	4602      	mov	r2, r0
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	1ad3      	subs	r3, r2, r3
 8005310:	68ba      	ldr	r2, [r7, #8]
 8005312:	429a      	cmp	r2, r3
 8005314:	d302      	bcc.n	800531c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d11d      	bne.n	8005358 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	f003 0304 	and.w	r3, r3, #4
 8005326:	2b04      	cmp	r3, #4
 8005328:	d016      	beq.n	8005358 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2220      	movs	r2, #32
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005344:	f043 0220 	orr.w	r2, r3, #32
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e007      	b.n	8005368 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	f003 0304 	and.w	r3, r3, #4
 8005362:	2b04      	cmp	r3, #4
 8005364:	d1c3      	bne.n	80052ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b084      	sub	sp, #16
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800537c:	e049      	b.n	8005412 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	695b      	ldr	r3, [r3, #20]
 8005384:	f003 0310 	and.w	r3, r3, #16
 8005388:	2b10      	cmp	r3, #16
 800538a:	d119      	bne.n	80053c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0210 	mvn.w	r2, #16
 8005394:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2220      	movs	r2, #32
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e030      	b.n	8005422 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c0:	f7fe fb6a 	bl	8003a98 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	68ba      	ldr	r2, [r7, #8]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d302      	bcc.n	80053d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d11d      	bne.n	8005412 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	695b      	ldr	r3, [r3, #20]
 80053dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053e0:	2b40      	cmp	r3, #64	@ 0x40
 80053e2:	d016      	beq.n	8005412 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2200      	movs	r2, #0
 80053e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053fe:	f043 0220 	orr.w	r2, r3, #32
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e007      	b.n	8005422 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800541c:	2b40      	cmp	r3, #64	@ 0x40
 800541e:	d1ae      	bne.n	800537e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800542a:	b480      	push	{r7}
 800542c:	b083      	sub	sp, #12
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800543c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005440:	d11b      	bne.n	800547a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800544a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2220      	movs	r2, #32
 8005456:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005466:	f043 0204 	orr.w	r2, r3, #4
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e000      	b.n	800547c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005498:	b2db      	uxtb	r3, r3
 800549a:	2b20      	cmp	r3, #32
 800549c:	d129      	bne.n	80054f2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2224      	movs	r2, #36	@ 0x24
 80054a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0201 	bic.w	r2, r2, #1
 80054b4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f022 0210 	bic.w	r2, r2, #16
 80054c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	683a      	ldr	r2, [r7, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f042 0201 	orr.w	r2, r2, #1
 80054e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2220      	movs	r2, #32
 80054ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	e000      	b.n	80054f4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80054f2:	2302      	movs	r3, #2
  }
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800550a:	2300      	movs	r3, #0
 800550c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b20      	cmp	r3, #32
 8005518:	d12a      	bne.n	8005570 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2224      	movs	r2, #36	@ 0x24
 800551e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0201 	bic.w	r2, r2, #1
 8005530:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005538:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800553a:	89fb      	ldrh	r3, [r7, #14]
 800553c:	f023 030f 	bic.w	r3, r3, #15
 8005540:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	b29a      	uxth	r2, r3
 8005546:	89fb      	ldrh	r3, [r7, #14]
 8005548:	4313      	orrs	r3, r2
 800554a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	89fa      	ldrh	r2, [r7, #14]
 8005552:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0201 	orr.w	r2, r2, #1
 8005562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2220      	movs	r2, #32
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800556c:	2300      	movs	r3, #0
 800556e:	e000      	b.n	8005572 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005570:	2302      	movs	r3, #2
  }
}
 8005572:	4618      	mov	r0, r3
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
	...

08005580 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d101      	bne.n	8005592 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e0bf      	b.n	8005712 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b00      	cmp	r3, #0
 800559c:	d106      	bne.n	80055ac <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f7fd fbda 	bl	8002d60 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	699a      	ldr	r2, [r3, #24]
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80055c2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	6999      	ldr	r1, [r3, #24]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80055d8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6899      	ldr	r1, [r3, #8]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	4b4a      	ldr	r3, [pc, #296]	@ (800571c <HAL_LTDC_Init+0x19c>)
 80055f4:	400b      	ands	r3, r1
 80055f6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	695b      	ldr	r3, [r3, #20]
 80055fc:	041b      	lsls	r3, r3, #16
 80055fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6899      	ldr	r1, [r3, #8]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	699a      	ldr	r2, [r3, #24]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	431a      	orrs	r2, r3
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	430a      	orrs	r2, r1
 8005614:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68d9      	ldr	r1, [r3, #12]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	4b3e      	ldr	r3, [pc, #248]	@ (800571c <HAL_LTDC_Init+0x19c>)
 8005622:	400b      	ands	r3, r1
 8005624:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	041b      	lsls	r3, r3, #16
 800562c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68d9      	ldr	r1, [r3, #12]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a1a      	ldr	r2, [r3, #32]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	431a      	orrs	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	430a      	orrs	r2, r1
 8005642:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6919      	ldr	r1, [r3, #16]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	4b33      	ldr	r3, [pc, #204]	@ (800571c <HAL_LTDC_Init+0x19c>)
 8005650:	400b      	ands	r3, r1
 8005652:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005658:	041b      	lsls	r3, r3, #16
 800565a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6919      	ldr	r1, [r3, #16]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	431a      	orrs	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6959      	ldr	r1, [r3, #20]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	4b27      	ldr	r3, [pc, #156]	@ (800571c <HAL_LTDC_Init+0x19c>)
 800567e:	400b      	ands	r3, r1
 8005680:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005686:	041b      	lsls	r3, r3, #16
 8005688:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6959      	ldr	r1, [r3, #20]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	431a      	orrs	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80056a6:	021b      	lsls	r3, r3, #8
 80056a8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80056b0:	041b      	lsls	r3, r3, #16
 80056b2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80056c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80056d6:	431a      	orrs	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0206 	orr.w	r2, r2, #6
 80056ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	699a      	ldr	r2, [r3, #24]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f042 0201 	orr.w	r2, r2, #1
 80056fe:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2201      	movs	r2, #1
 800570c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
 800571a:	bf00      	nop
 800571c:	f000f800 	.word	0xf000f800

08005720 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005720:	b5b0      	push	{r4, r5, r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005732:	2b01      	cmp	r3, #1
 8005734:	d101      	bne.n	800573a <HAL_LTDC_ConfigLayer+0x1a>
 8005736:	2302      	movs	r3, #2
 8005738:	e02c      	b.n	8005794 <HAL_LTDC_ConfigLayer+0x74>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2201      	movs	r2, #1
 800573e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2202      	movs	r2, #2
 8005746:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2134      	movs	r1, #52	@ 0x34
 8005750:	fb01 f303 	mul.w	r3, r1, r3
 8005754:	4413      	add	r3, r2
 8005756:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	4614      	mov	r4, r2
 800575e:	461d      	mov	r5, r3
 8005760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005768:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800576a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800576c:	682b      	ldr	r3, [r5, #0]
 800576e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	68b9      	ldr	r1, [r7, #8]
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 f811 	bl	800579c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2201      	movs	r2, #1
 8005780:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2201      	movs	r2, #1
 8005786:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bdb0      	pop	{r4, r5, r7, pc}

0800579c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800579c:	b480      	push	{r7}
 800579e:	b089      	sub	sp, #36	@ 0x24
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	0c1b      	lsrs	r3, r3, #16
 80057b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057b8:	4413      	add	r3, r2
 80057ba:	041b      	lsls	r3, r3, #16
 80057bc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	01db      	lsls	r3, r3, #7
 80057c8:	4413      	add	r3, r2
 80057ca:	3384      	adds	r3, #132	@ 0x84
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	6812      	ldr	r2, [r2, #0]
 80057d2:	4611      	mov	r1, r2
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	01d2      	lsls	r2, r2, #7
 80057d8:	440a      	add	r2, r1
 80057da:	3284      	adds	r2, #132	@ 0x84
 80057dc:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80057e0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	0c1b      	lsrs	r3, r3, #16
 80057ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80057f2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80057f4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4619      	mov	r1, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	01db      	lsls	r3, r3, #7
 8005800:	440b      	add	r3, r1
 8005802:	3384      	adds	r3, #132	@ 0x84
 8005804:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800580a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800581a:	4413      	add	r3, r2
 800581c:	041b      	lsls	r3, r3, #16
 800581e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	461a      	mov	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	01db      	lsls	r3, r3, #7
 800582a:	4413      	add	r3, r2
 800582c:	3384      	adds	r3, #132	@ 0x84
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	6812      	ldr	r2, [r2, #0]
 8005834:	4611      	mov	r1, r2
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	01d2      	lsls	r2, r2, #7
 800583a:	440a      	add	r2, r1
 800583c:	3284      	adds	r2, #132	@ 0x84
 800583e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005842:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005852:	4413      	add	r3, r2
 8005854:	1c5a      	adds	r2, r3, #1
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4619      	mov	r1, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	01db      	lsls	r3, r3, #7
 8005860:	440b      	add	r3, r1
 8005862:	3384      	adds	r3, #132	@ 0x84
 8005864:	4619      	mov	r1, r3
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	4313      	orrs	r3, r2
 800586a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	461a      	mov	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	01db      	lsls	r3, r3, #7
 8005876:	4413      	add	r3, r2
 8005878:	3384      	adds	r3, #132	@ 0x84
 800587a:	691b      	ldr	r3, [r3, #16]
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	6812      	ldr	r2, [r2, #0]
 8005880:	4611      	mov	r1, r2
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	01d2      	lsls	r2, r2, #7
 8005886:	440a      	add	r2, r1
 8005888:	3284      	adds	r2, #132	@ 0x84
 800588a:	f023 0307 	bic.w	r3, r3, #7
 800588e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	461a      	mov	r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	01db      	lsls	r3, r3, #7
 800589a:	4413      	add	r3, r2
 800589c:	3384      	adds	r3, #132	@ 0x84
 800589e:	461a      	mov	r2, r3
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	691b      	ldr	r3, [r3, #16]
 80058a4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80058ac:	021b      	lsls	r3, r3, #8
 80058ae:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80058b6:	041b      	lsls	r3, r3, #16
 80058b8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	061b      	lsls	r3, r3, #24
 80058c0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	461a      	mov	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	01db      	lsls	r3, r3, #7
 80058cc:	4413      	add	r3, r2
 80058ce:	3384      	adds	r3, #132	@ 0x84
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	01db      	lsls	r3, r3, #7
 80058dc:	4413      	add	r3, r2
 80058de:	3384      	adds	r3, #132	@ 0x84
 80058e0:	461a      	mov	r2, r3
 80058e2:	2300      	movs	r3, #0
 80058e4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80058ec:	461a      	mov	r2, r3
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	431a      	orrs	r2, r3
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	431a      	orrs	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4619      	mov	r1, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	01db      	lsls	r3, r3, #7
 8005900:	440b      	add	r3, r1
 8005902:	3384      	adds	r3, #132	@ 0x84
 8005904:	4619      	mov	r1, r3
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	461a      	mov	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	01db      	lsls	r3, r3, #7
 8005916:	4413      	add	r3, r2
 8005918:	3384      	adds	r3, #132	@ 0x84
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	6812      	ldr	r2, [r2, #0]
 8005920:	4611      	mov	r1, r2
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	01d2      	lsls	r2, r2, #7
 8005926:	440a      	add	r2, r1
 8005928:	3284      	adds	r2, #132	@ 0x84
 800592a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800592e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	461a      	mov	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	01db      	lsls	r3, r3, #7
 800593a:	4413      	add	r3, r2
 800593c:	3384      	adds	r3, #132	@ 0x84
 800593e:	461a      	mov	r2, r3
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	461a      	mov	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	01db      	lsls	r3, r3, #7
 8005950:	4413      	add	r3, r2
 8005952:	3384      	adds	r3, #132	@ 0x84
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	6812      	ldr	r2, [r2, #0]
 800595a:	4611      	mov	r1, r2
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	01d2      	lsls	r2, r2, #7
 8005960:	440a      	add	r2, r1
 8005962:	3284      	adds	r2, #132	@ 0x84
 8005964:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005968:	f023 0307 	bic.w	r3, r3, #7
 800596c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	69da      	ldr	r2, [r3, #28]
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	6a1b      	ldr	r3, [r3, #32]
 8005976:	68f9      	ldr	r1, [r7, #12]
 8005978:	6809      	ldr	r1, [r1, #0]
 800597a:	4608      	mov	r0, r1
 800597c:	6879      	ldr	r1, [r7, #4]
 800597e:	01c9      	lsls	r1, r1, #7
 8005980:	4401      	add	r1, r0
 8005982:	3184      	adds	r1, #132	@ 0x84
 8005984:	4313      	orrs	r3, r2
 8005986:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	461a      	mov	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	01db      	lsls	r3, r3, #7
 8005992:	4413      	add	r3, r2
 8005994:	3384      	adds	r3, #132	@ 0x84
 8005996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	461a      	mov	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	01db      	lsls	r3, r3, #7
 80059a2:	4413      	add	r3, r2
 80059a4:	3384      	adds	r3, #132	@ 0x84
 80059a6:	461a      	mov	r2, r3
 80059a8:	2300      	movs	r3, #0
 80059aa:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	461a      	mov	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	01db      	lsls	r3, r3, #7
 80059b6:	4413      	add	r3, r2
 80059b8:	3384      	adds	r3, #132	@ 0x84
 80059ba:	461a      	mov	r2, r3
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c0:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d102      	bne.n	80059d0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80059ca:	2304      	movs	r3, #4
 80059cc:	61fb      	str	r3, [r7, #28]
 80059ce:	e01b      	b.n	8005a08 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	691b      	ldr	r3, [r3, #16]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d102      	bne.n	80059de <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80059d8:	2303      	movs	r3, #3
 80059da:	61fb      	str	r3, [r7, #28]
 80059dc:	e014      	b.n	8005a08 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	2b04      	cmp	r3, #4
 80059e4:	d00b      	beq.n	80059fe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80059ea:	2b02      	cmp	r3, #2
 80059ec:	d007      	beq.n	80059fe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d003      	beq.n	80059fe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80059fa:	2b07      	cmp	r3, #7
 80059fc:	d102      	bne.n	8005a04 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80059fe:	2302      	movs	r3, #2
 8005a00:	61fb      	str	r3, [r7, #28]
 8005a02:	e001      	b.n	8005a08 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005a04:	2301      	movs	r3, #1
 8005a06:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	01db      	lsls	r3, r3, #7
 8005a12:	4413      	add	r3, r2
 8005a14:	3384      	adds	r3, #132	@ 0x84
 8005a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	6812      	ldr	r2, [r2, #0]
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	01d2      	lsls	r2, r2, #7
 8005a22:	440a      	add	r2, r1
 8005a24:	3284      	adds	r2, #132	@ 0x84
 8005a26:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a30:	69fa      	ldr	r2, [r7, #28]
 8005a32:	fb02 f303 	mul.w	r3, r2, r3
 8005a36:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	6859      	ldr	r1, [r3, #4]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	1acb      	subs	r3, r1, r3
 8005a42:	69f9      	ldr	r1, [r7, #28]
 8005a44:	fb01 f303 	mul.w	r3, r1, r3
 8005a48:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005a4a:	68f9      	ldr	r1, [r7, #12]
 8005a4c:	6809      	ldr	r1, [r1, #0]
 8005a4e:	4608      	mov	r0, r1
 8005a50:	6879      	ldr	r1, [r7, #4]
 8005a52:	01c9      	lsls	r1, r1, #7
 8005a54:	4401      	add	r1, r0
 8005a56:	3184      	adds	r1, #132	@ 0x84
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	461a      	mov	r2, r3
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	01db      	lsls	r3, r3, #7
 8005a66:	4413      	add	r3, r2
 8005a68:	3384      	adds	r3, #132	@ 0x84
 8005a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	6812      	ldr	r2, [r2, #0]
 8005a70:	4611      	mov	r1, r2
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	01d2      	lsls	r2, r2, #7
 8005a76:	440a      	add	r2, r1
 8005a78:	3284      	adds	r2, #132	@ 0x84
 8005a7a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005a7e:	f023 0307 	bic.w	r3, r3, #7
 8005a82:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	461a      	mov	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	01db      	lsls	r3, r3, #7
 8005a8e:	4413      	add	r3, r2
 8005a90:	3384      	adds	r3, #132	@ 0x84
 8005a92:	461a      	mov	r2, r3
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a98:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	01db      	lsls	r3, r3, #7
 8005aa4:	4413      	add	r3, r2
 8005aa6:	3384      	adds	r3, #132	@ 0x84
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	6812      	ldr	r2, [r2, #0]
 8005aae:	4611      	mov	r1, r2
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	01d2      	lsls	r2, r2, #7
 8005ab4:	440a      	add	r2, r1
 8005ab6:	3284      	adds	r2, #132	@ 0x84
 8005ab8:	f043 0301 	orr.w	r3, r3, #1
 8005abc:	6013      	str	r3, [r2, #0]
}
 8005abe:	bf00      	nop
 8005ac0:	3724      	adds	r7, #36	@ 0x24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
	...

08005acc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e267      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d075      	beq.n	8005bd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005aea:	4b88      	ldr	r3, [pc, #544]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005aec:	689b      	ldr	r3, [r3, #8]
 8005aee:	f003 030c 	and.w	r3, r3, #12
 8005af2:	2b04      	cmp	r3, #4
 8005af4:	d00c      	beq.n	8005b10 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005af6:	4b85      	ldr	r3, [pc, #532]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005afe:	2b08      	cmp	r3, #8
 8005b00:	d112      	bne.n	8005b28 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b02:	4b82      	ldr	r3, [pc, #520]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005b0e:	d10b      	bne.n	8005b28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b10:	4b7e      	ldr	r3, [pc, #504]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d05b      	beq.n	8005bd4 <HAL_RCC_OscConfig+0x108>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d157      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b24:	2301      	movs	r3, #1
 8005b26:	e242      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b30:	d106      	bne.n	8005b40 <HAL_RCC_OscConfig+0x74>
 8005b32:	4b76      	ldr	r3, [pc, #472]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a75      	ldr	r2, [pc, #468]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005b38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b3c:	6013      	str	r3, [r2, #0]
 8005b3e:	e01d      	b.n	8005b7c <HAL_RCC_OscConfig+0xb0>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b48:	d10c      	bne.n	8005b64 <HAL_RCC_OscConfig+0x98>
 8005b4a:	4b70      	ldr	r3, [pc, #448]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a6f      	ldr	r2, [pc, #444]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005b50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005b54:	6013      	str	r3, [r2, #0]
 8005b56:	4b6d      	ldr	r3, [pc, #436]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a6c      	ldr	r2, [pc, #432]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	e00b      	b.n	8005b7c <HAL_RCC_OscConfig+0xb0>
 8005b64:	4b69      	ldr	r3, [pc, #420]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a68      	ldr	r2, [pc, #416]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b6e:	6013      	str	r3, [r2, #0]
 8005b70:	4b66      	ldr	r3, [pc, #408]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a65      	ldr	r2, [pc, #404]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005b76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005b7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d013      	beq.n	8005bac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b84:	f7fd ff88 	bl	8003a98 <HAL_GetTick>
 8005b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b8a:	e008      	b.n	8005b9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b8c:	f7fd ff84 	bl	8003a98 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b64      	cmp	r3, #100	@ 0x64
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e207      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b9e:	4b5b      	ldr	r3, [pc, #364]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0f0      	beq.n	8005b8c <HAL_RCC_OscConfig+0xc0>
 8005baa:	e014      	b.n	8005bd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bac:	f7fd ff74 	bl	8003a98 <HAL_GetTick>
 8005bb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bb2:	e008      	b.n	8005bc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bb4:	f7fd ff70 	bl	8003a98 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	2b64      	cmp	r3, #100	@ 0x64
 8005bc0:	d901      	bls.n	8005bc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e1f3      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005bc6:	4b51      	ldr	r3, [pc, #324]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1f0      	bne.n	8005bb4 <HAL_RCC_OscConfig+0xe8>
 8005bd2:	e000      	b.n	8005bd6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0302 	and.w	r3, r3, #2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d063      	beq.n	8005caa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005be2:	4b4a      	ldr	r3, [pc, #296]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f003 030c 	and.w	r3, r3, #12
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d00b      	beq.n	8005c06 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bee:	4b47      	ldr	r3, [pc, #284]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005bf6:	2b08      	cmp	r3, #8
 8005bf8:	d11c      	bne.n	8005c34 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bfa:	4b44      	ldr	r3, [pc, #272]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d116      	bne.n	8005c34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c06:	4b41      	ldr	r3, [pc, #260]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d005      	beq.n	8005c1e <HAL_RCC_OscConfig+0x152>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d001      	beq.n	8005c1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e1c7      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c1e:	4b3b      	ldr	r3, [pc, #236]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	00db      	lsls	r3, r3, #3
 8005c2c:	4937      	ldr	r1, [pc, #220]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c32:	e03a      	b.n	8005caa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	68db      	ldr	r3, [r3, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d020      	beq.n	8005c7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c3c:	4b34      	ldr	r3, [pc, #208]	@ (8005d10 <HAL_RCC_OscConfig+0x244>)
 8005c3e:	2201      	movs	r2, #1
 8005c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c42:	f7fd ff29 	bl	8003a98 <HAL_GetTick>
 8005c46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c48:	e008      	b.n	8005c5c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c4a:	f7fd ff25 	bl	8003a98 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d901      	bls.n	8005c5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e1a8      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c5c:	4b2b      	ldr	r3, [pc, #172]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0302 	and.w	r3, r3, #2
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d0f0      	beq.n	8005c4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c68:	4b28      	ldr	r3, [pc, #160]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	4925      	ldr	r1, [pc, #148]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	600b      	str	r3, [r1, #0]
 8005c7c:	e015      	b.n	8005caa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c7e:	4b24      	ldr	r3, [pc, #144]	@ (8005d10 <HAL_RCC_OscConfig+0x244>)
 8005c80:	2200      	movs	r2, #0
 8005c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c84:	f7fd ff08 	bl	8003a98 <HAL_GetTick>
 8005c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c8a:	e008      	b.n	8005c9e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c8c:	f7fd ff04 	bl	8003a98 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e187      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0302 	and.w	r3, r3, #2
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1f0      	bne.n	8005c8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0308 	and.w	r3, r3, #8
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d036      	beq.n	8005d24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d016      	beq.n	8005cec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cbe:	4b15      	ldr	r3, [pc, #84]	@ (8005d14 <HAL_RCC_OscConfig+0x248>)
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cc4:	f7fd fee8 	bl	8003a98 <HAL_GetTick>
 8005cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cca:	e008      	b.n	8005cde <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ccc:	f7fd fee4 	bl	8003a98 <HAL_GetTick>
 8005cd0:	4602      	mov	r2, r0
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	1ad3      	subs	r3, r2, r3
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d901      	bls.n	8005cde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e167      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cde:	4b0b      	ldr	r3, [pc, #44]	@ (8005d0c <HAL_RCC_OscConfig+0x240>)
 8005ce0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0f0      	beq.n	8005ccc <HAL_RCC_OscConfig+0x200>
 8005cea:	e01b      	b.n	8005d24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005cec:	4b09      	ldr	r3, [pc, #36]	@ (8005d14 <HAL_RCC_OscConfig+0x248>)
 8005cee:	2200      	movs	r2, #0
 8005cf0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cf2:	f7fd fed1 	bl	8003a98 <HAL_GetTick>
 8005cf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cf8:	e00e      	b.n	8005d18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005cfa:	f7fd fecd 	bl	8003a98 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d907      	bls.n	8005d18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e150      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
 8005d0c:	40023800 	.word	0x40023800
 8005d10:	42470000 	.word	0x42470000
 8005d14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d18:	4b88      	ldr	r3, [pc, #544]	@ (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005d1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d1c:	f003 0302 	and.w	r3, r3, #2
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1ea      	bne.n	8005cfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0304 	and.w	r3, r3, #4
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 8097 	beq.w	8005e60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d32:	2300      	movs	r3, #0
 8005d34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d36:	4b81      	ldr	r3, [pc, #516]	@ (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10f      	bne.n	8005d62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d42:	2300      	movs	r3, #0
 8005d44:	60bb      	str	r3, [r7, #8]
 8005d46:	4b7d      	ldr	r3, [pc, #500]	@ (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d4a:	4a7c      	ldr	r2, [pc, #496]	@ (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d50:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d52:	4b7a      	ldr	r3, [pc, #488]	@ (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d5a:	60bb      	str	r3, [r7, #8]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d62:	4b77      	ldr	r3, [pc, #476]	@ (8005f40 <HAL_RCC_OscConfig+0x474>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d118      	bne.n	8005da0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005d6e:	4b74      	ldr	r3, [pc, #464]	@ (8005f40 <HAL_RCC_OscConfig+0x474>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a73      	ldr	r2, [pc, #460]	@ (8005f40 <HAL_RCC_OscConfig+0x474>)
 8005d74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d7a:	f7fd fe8d 	bl	8003a98 <HAL_GetTick>
 8005d7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d80:	e008      	b.n	8005d94 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d82:	f7fd fe89 	bl	8003a98 <HAL_GetTick>
 8005d86:	4602      	mov	r2, r0
 8005d88:	693b      	ldr	r3, [r7, #16]
 8005d8a:	1ad3      	subs	r3, r2, r3
 8005d8c:	2b02      	cmp	r3, #2
 8005d8e:	d901      	bls.n	8005d94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e10c      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d94:	4b6a      	ldr	r3, [pc, #424]	@ (8005f40 <HAL_RCC_OscConfig+0x474>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d0f0      	beq.n	8005d82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d106      	bne.n	8005db6 <HAL_RCC_OscConfig+0x2ea>
 8005da8:	4b64      	ldr	r3, [pc, #400]	@ (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005daa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dac:	4a63      	ldr	r2, [pc, #396]	@ (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005dae:	f043 0301 	orr.w	r3, r3, #1
 8005db2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005db4:	e01c      	b.n	8005df0 <HAL_RCC_OscConfig+0x324>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	2b05      	cmp	r3, #5
 8005dbc:	d10c      	bne.n	8005dd8 <HAL_RCC_OscConfig+0x30c>
 8005dbe:	4b5f      	ldr	r3, [pc, #380]	@ (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dc2:	4a5e      	ldr	r2, [pc, #376]	@ (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005dc4:	f043 0304 	orr.w	r3, r3, #4
 8005dc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005dca:	4b5c      	ldr	r3, [pc, #368]	@ (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dce:	4a5b      	ldr	r2, [pc, #364]	@ (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005dd0:	f043 0301 	orr.w	r3, r3, #1
 8005dd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005dd6:	e00b      	b.n	8005df0 <HAL_RCC_OscConfig+0x324>
 8005dd8:	4b58      	ldr	r3, [pc, #352]	@ (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005dda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ddc:	4a57      	ldr	r2, [pc, #348]	@ (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005dde:	f023 0301 	bic.w	r3, r3, #1
 8005de2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005de4:	4b55      	ldr	r3, [pc, #340]	@ (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005de6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005de8:	4a54      	ldr	r2, [pc, #336]	@ (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005dea:	f023 0304 	bic.w	r3, r3, #4
 8005dee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d015      	beq.n	8005e24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005df8:	f7fd fe4e 	bl	8003a98 <HAL_GetTick>
 8005dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dfe:	e00a      	b.n	8005e16 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e00:	f7fd fe4a 	bl	8003a98 <HAL_GetTick>
 8005e04:	4602      	mov	r2, r0
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d901      	bls.n	8005e16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e12:	2303      	movs	r3, #3
 8005e14:	e0cb      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e16:	4b49      	ldr	r3, [pc, #292]	@ (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d0ee      	beq.n	8005e00 <HAL_RCC_OscConfig+0x334>
 8005e22:	e014      	b.n	8005e4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e24:	f7fd fe38 	bl	8003a98 <HAL_GetTick>
 8005e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e2a:	e00a      	b.n	8005e42 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e2c:	f7fd fe34 	bl	8003a98 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e0b5      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e42:	4b3e      	ldr	r3, [pc, #248]	@ (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1ee      	bne.n	8005e2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005e4e:	7dfb      	ldrb	r3, [r7, #23]
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d105      	bne.n	8005e60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e54:	4b39      	ldr	r3, [pc, #228]	@ (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e58:	4a38      	ldr	r2, [pc, #224]	@ (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005e5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	f000 80a1 	beq.w	8005fac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e6a:	4b34      	ldr	r3, [pc, #208]	@ (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	f003 030c 	and.w	r3, r3, #12
 8005e72:	2b08      	cmp	r3, #8
 8005e74:	d05c      	beq.n	8005f30 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d141      	bne.n	8005f02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e7e:	4b31      	ldr	r3, [pc, #196]	@ (8005f44 <HAL_RCC_OscConfig+0x478>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e84:	f7fd fe08 	bl	8003a98 <HAL_GetTick>
 8005e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e8a:	e008      	b.n	8005e9e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e8c:	f7fd fe04 	bl	8003a98 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d901      	bls.n	8005e9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e9a:	2303      	movs	r3, #3
 8005e9c:	e087      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e9e:	4b27      	ldr	r3, [pc, #156]	@ (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1f0      	bne.n	8005e8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	69da      	ldr	r2, [r3, #28]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6a1b      	ldr	r3, [r3, #32]
 8005eb2:	431a      	orrs	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eb8:	019b      	lsls	r3, r3, #6
 8005eba:	431a      	orrs	r2, r3
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec0:	085b      	lsrs	r3, r3, #1
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	041b      	lsls	r3, r3, #16
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ecc:	061b      	lsls	r3, r3, #24
 8005ece:	491b      	ldr	r1, [pc, #108]	@ (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8005f44 <HAL_RCC_OscConfig+0x478>)
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eda:	f7fd fddd 	bl	8003a98 <HAL_GetTick>
 8005ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ee2:	f7fd fdd9 	bl	8003a98 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e05c      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ef4:	4b11      	ldr	r3, [pc, #68]	@ (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0f0      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x416>
 8005f00:	e054      	b.n	8005fac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f02:	4b10      	ldr	r3, [pc, #64]	@ (8005f44 <HAL_RCC_OscConfig+0x478>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f08:	f7fd fdc6 	bl	8003a98 <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f10:	f7fd fdc2 	bl	8003a98 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e045      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f22:	4b06      	ldr	r3, [pc, #24]	@ (8005f3c <HAL_RCC_OscConfig+0x470>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f0      	bne.n	8005f10 <HAL_RCC_OscConfig+0x444>
 8005f2e:	e03d      	b.n	8005fac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d107      	bne.n	8005f48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e038      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
 8005f3c:	40023800 	.word	0x40023800
 8005f40:	40007000 	.word	0x40007000
 8005f44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005f48:	4b1b      	ldr	r3, [pc, #108]	@ (8005fb8 <HAL_RCC_OscConfig+0x4ec>)
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d028      	beq.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d121      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d11a      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005f78:	4013      	ands	r3, r2
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005f7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d111      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f8e:	085b      	lsrs	r3, r3, #1
 8005f90:	3b01      	subs	r3, #1
 8005f92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d107      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fa2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d001      	beq.n	8005fac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e000      	b.n	8005fae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3718      	adds	r7, #24
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	40023800 	.word	0x40023800

08005fbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	e0cc      	b.n	800616a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005fd0:	4b68      	ldr	r3, [pc, #416]	@ (8006174 <HAL_RCC_ClockConfig+0x1b8>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 030f 	and.w	r3, r3, #15
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d90c      	bls.n	8005ff8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fde:	4b65      	ldr	r3, [pc, #404]	@ (8006174 <HAL_RCC_ClockConfig+0x1b8>)
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	b2d2      	uxtb	r2, r2
 8005fe4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fe6:	4b63      	ldr	r3, [pc, #396]	@ (8006174 <HAL_RCC_ClockConfig+0x1b8>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 030f 	and.w	r3, r3, #15
 8005fee:	683a      	ldr	r2, [r7, #0]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d001      	beq.n	8005ff8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005ff4:	2301      	movs	r3, #1
 8005ff6:	e0b8      	b.n	800616a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0302 	and.w	r3, r3, #2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d020      	beq.n	8006046 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 0304 	and.w	r3, r3, #4
 800600c:	2b00      	cmp	r3, #0
 800600e:	d005      	beq.n	800601c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006010:	4b59      	ldr	r3, [pc, #356]	@ (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	4a58      	ldr	r2, [pc, #352]	@ (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 8006016:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800601a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0308 	and.w	r3, r3, #8
 8006024:	2b00      	cmp	r3, #0
 8006026:	d005      	beq.n	8006034 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006028:	4b53      	ldr	r3, [pc, #332]	@ (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	4a52      	ldr	r2, [pc, #328]	@ (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800602e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006032:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006034:	4b50      	ldr	r3, [pc, #320]	@ (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	494d      	ldr	r1, [pc, #308]	@ (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 8006042:	4313      	orrs	r3, r2
 8006044:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f003 0301 	and.w	r3, r3, #1
 800604e:	2b00      	cmp	r3, #0
 8006050:	d044      	beq.n	80060dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	2b01      	cmp	r3, #1
 8006058:	d107      	bne.n	800606a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800605a:	4b47      	ldr	r3, [pc, #284]	@ (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d119      	bne.n	800609a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	e07f      	b.n	800616a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	2b02      	cmp	r3, #2
 8006070:	d003      	beq.n	800607a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006076:	2b03      	cmp	r3, #3
 8006078:	d107      	bne.n	800608a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800607a:	4b3f      	ldr	r3, [pc, #252]	@ (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d109      	bne.n	800609a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006086:	2301      	movs	r3, #1
 8006088:	e06f      	b.n	800616a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800608a:	4b3b      	ldr	r3, [pc, #236]	@ (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e067      	b.n	800616a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800609a:	4b37      	ldr	r3, [pc, #220]	@ (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f023 0203 	bic.w	r2, r3, #3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	4934      	ldr	r1, [pc, #208]	@ (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80060ac:	f7fd fcf4 	bl	8003a98 <HAL_GetTick>
 80060b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060b2:	e00a      	b.n	80060ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060b4:	f7fd fcf0 	bl	8003a98 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e04f      	b.n	800616a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ca:	4b2b      	ldr	r3, [pc, #172]	@ (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f003 020c 	and.w	r2, r3, #12
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	429a      	cmp	r2, r3
 80060da:	d1eb      	bne.n	80060b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80060dc:	4b25      	ldr	r3, [pc, #148]	@ (8006174 <HAL_RCC_ClockConfig+0x1b8>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f003 030f 	and.w	r3, r3, #15
 80060e4:	683a      	ldr	r2, [r7, #0]
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d20c      	bcs.n	8006104 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ea:	4b22      	ldr	r3, [pc, #136]	@ (8006174 <HAL_RCC_ClockConfig+0x1b8>)
 80060ec:	683a      	ldr	r2, [r7, #0]
 80060ee:	b2d2      	uxtb	r2, r2
 80060f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060f2:	4b20      	ldr	r3, [pc, #128]	@ (8006174 <HAL_RCC_ClockConfig+0x1b8>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 030f 	and.w	r3, r3, #15
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d001      	beq.n	8006104 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e032      	b.n	800616a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0304 	and.w	r3, r3, #4
 800610c:	2b00      	cmp	r3, #0
 800610e:	d008      	beq.n	8006122 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006110:	4b19      	ldr	r3, [pc, #100]	@ (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	4916      	ldr	r1, [pc, #88]	@ (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800611e:	4313      	orrs	r3, r2
 8006120:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 0308 	and.w	r3, r3, #8
 800612a:	2b00      	cmp	r3, #0
 800612c:	d009      	beq.n	8006142 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800612e:	4b12      	ldr	r3, [pc, #72]	@ (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	490e      	ldr	r1, [pc, #56]	@ (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800613e:	4313      	orrs	r3, r2
 8006140:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006142:	f000 f821 	bl	8006188 <HAL_RCC_GetSysClockFreq>
 8006146:	4602      	mov	r2, r0
 8006148:	4b0b      	ldr	r3, [pc, #44]	@ (8006178 <HAL_RCC_ClockConfig+0x1bc>)
 800614a:	689b      	ldr	r3, [r3, #8]
 800614c:	091b      	lsrs	r3, r3, #4
 800614e:	f003 030f 	and.w	r3, r3, #15
 8006152:	490a      	ldr	r1, [pc, #40]	@ (800617c <HAL_RCC_ClockConfig+0x1c0>)
 8006154:	5ccb      	ldrb	r3, [r1, r3]
 8006156:	fa22 f303 	lsr.w	r3, r2, r3
 800615a:	4a09      	ldr	r2, [pc, #36]	@ (8006180 <HAL_RCC_ClockConfig+0x1c4>)
 800615c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800615e:	4b09      	ldr	r3, [pc, #36]	@ (8006184 <HAL_RCC_ClockConfig+0x1c8>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	4618      	mov	r0, r3
 8006164:	f7fd fc54 	bl	8003a10 <HAL_InitTick>

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3710      	adds	r7, #16
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	40023c00 	.word	0x40023c00
 8006178:	40023800 	.word	0x40023800
 800617c:	08009ea0 	.word	0x08009ea0
 8006180:	20000010 	.word	0x20000010
 8006184:	20000014 	.word	0x20000014

08006188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800618c:	b094      	sub	sp, #80	@ 0x50
 800618e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006190:	2300      	movs	r3, #0
 8006192:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006194:	2300      	movs	r3, #0
 8006196:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006198:	2300      	movs	r3, #0
 800619a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800619c:	2300      	movs	r3, #0
 800619e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80061a0:	4b79      	ldr	r3, [pc, #484]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x200>)
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f003 030c 	and.w	r3, r3, #12
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d00d      	beq.n	80061c8 <HAL_RCC_GetSysClockFreq+0x40>
 80061ac:	2b08      	cmp	r3, #8
 80061ae:	f200 80e1 	bhi.w	8006374 <HAL_RCC_GetSysClockFreq+0x1ec>
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <HAL_RCC_GetSysClockFreq+0x34>
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d003      	beq.n	80061c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80061ba:	e0db      	b.n	8006374 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80061bc:	4b73      	ldr	r3, [pc, #460]	@ (800638c <HAL_RCC_GetSysClockFreq+0x204>)
 80061be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80061c0:	e0db      	b.n	800637a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80061c2:	4b73      	ldr	r3, [pc, #460]	@ (8006390 <HAL_RCC_GetSysClockFreq+0x208>)
 80061c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80061c6:	e0d8      	b.n	800637a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80061c8:	4b6f      	ldr	r3, [pc, #444]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x200>)
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80061d2:	4b6d      	ldr	r3, [pc, #436]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x200>)
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d063      	beq.n	80062a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061de:	4b6a      	ldr	r3, [pc, #424]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x200>)
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	099b      	lsrs	r3, r3, #6
 80061e4:	2200      	movs	r2, #0
 80061e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80061e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80061ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80061f2:	2300      	movs	r3, #0
 80061f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80061f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80061fa:	4622      	mov	r2, r4
 80061fc:	462b      	mov	r3, r5
 80061fe:	f04f 0000 	mov.w	r0, #0
 8006202:	f04f 0100 	mov.w	r1, #0
 8006206:	0159      	lsls	r1, r3, #5
 8006208:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800620c:	0150      	lsls	r0, r2, #5
 800620e:	4602      	mov	r2, r0
 8006210:	460b      	mov	r3, r1
 8006212:	4621      	mov	r1, r4
 8006214:	1a51      	subs	r1, r2, r1
 8006216:	6139      	str	r1, [r7, #16]
 8006218:	4629      	mov	r1, r5
 800621a:	eb63 0301 	sbc.w	r3, r3, r1
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	f04f 0200 	mov.w	r2, #0
 8006224:	f04f 0300 	mov.w	r3, #0
 8006228:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800622c:	4659      	mov	r1, fp
 800622e:	018b      	lsls	r3, r1, #6
 8006230:	4651      	mov	r1, sl
 8006232:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006236:	4651      	mov	r1, sl
 8006238:	018a      	lsls	r2, r1, #6
 800623a:	4651      	mov	r1, sl
 800623c:	ebb2 0801 	subs.w	r8, r2, r1
 8006240:	4659      	mov	r1, fp
 8006242:	eb63 0901 	sbc.w	r9, r3, r1
 8006246:	f04f 0200 	mov.w	r2, #0
 800624a:	f04f 0300 	mov.w	r3, #0
 800624e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006252:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006256:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800625a:	4690      	mov	r8, r2
 800625c:	4699      	mov	r9, r3
 800625e:	4623      	mov	r3, r4
 8006260:	eb18 0303 	adds.w	r3, r8, r3
 8006264:	60bb      	str	r3, [r7, #8]
 8006266:	462b      	mov	r3, r5
 8006268:	eb49 0303 	adc.w	r3, r9, r3
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	f04f 0200 	mov.w	r2, #0
 8006272:	f04f 0300 	mov.w	r3, #0
 8006276:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800627a:	4629      	mov	r1, r5
 800627c:	024b      	lsls	r3, r1, #9
 800627e:	4621      	mov	r1, r4
 8006280:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006284:	4621      	mov	r1, r4
 8006286:	024a      	lsls	r2, r1, #9
 8006288:	4610      	mov	r0, r2
 800628a:	4619      	mov	r1, r3
 800628c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800628e:	2200      	movs	r2, #0
 8006290:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006292:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006294:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006298:	f7fa f802 	bl	80002a0 <__aeabi_uldivmod>
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	4613      	mov	r3, r2
 80062a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062a4:	e058      	b.n	8006358 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062a6:	4b38      	ldr	r3, [pc, #224]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x200>)
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	099b      	lsrs	r3, r3, #6
 80062ac:	2200      	movs	r2, #0
 80062ae:	4618      	mov	r0, r3
 80062b0:	4611      	mov	r1, r2
 80062b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80062b6:	623b      	str	r3, [r7, #32]
 80062b8:	2300      	movs	r3, #0
 80062ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80062bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80062c0:	4642      	mov	r2, r8
 80062c2:	464b      	mov	r3, r9
 80062c4:	f04f 0000 	mov.w	r0, #0
 80062c8:	f04f 0100 	mov.w	r1, #0
 80062cc:	0159      	lsls	r1, r3, #5
 80062ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062d2:	0150      	lsls	r0, r2, #5
 80062d4:	4602      	mov	r2, r0
 80062d6:	460b      	mov	r3, r1
 80062d8:	4641      	mov	r1, r8
 80062da:	ebb2 0a01 	subs.w	sl, r2, r1
 80062de:	4649      	mov	r1, r9
 80062e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80062e4:	f04f 0200 	mov.w	r2, #0
 80062e8:	f04f 0300 	mov.w	r3, #0
 80062ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80062f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80062f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80062f8:	ebb2 040a 	subs.w	r4, r2, sl
 80062fc:	eb63 050b 	sbc.w	r5, r3, fp
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	f04f 0300 	mov.w	r3, #0
 8006308:	00eb      	lsls	r3, r5, #3
 800630a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800630e:	00e2      	lsls	r2, r4, #3
 8006310:	4614      	mov	r4, r2
 8006312:	461d      	mov	r5, r3
 8006314:	4643      	mov	r3, r8
 8006316:	18e3      	adds	r3, r4, r3
 8006318:	603b      	str	r3, [r7, #0]
 800631a:	464b      	mov	r3, r9
 800631c:	eb45 0303 	adc.w	r3, r5, r3
 8006320:	607b      	str	r3, [r7, #4]
 8006322:	f04f 0200 	mov.w	r2, #0
 8006326:	f04f 0300 	mov.w	r3, #0
 800632a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800632e:	4629      	mov	r1, r5
 8006330:	028b      	lsls	r3, r1, #10
 8006332:	4621      	mov	r1, r4
 8006334:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006338:	4621      	mov	r1, r4
 800633a:	028a      	lsls	r2, r1, #10
 800633c:	4610      	mov	r0, r2
 800633e:	4619      	mov	r1, r3
 8006340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006342:	2200      	movs	r2, #0
 8006344:	61bb      	str	r3, [r7, #24]
 8006346:	61fa      	str	r2, [r7, #28]
 8006348:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800634c:	f7f9 ffa8 	bl	80002a0 <__aeabi_uldivmod>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	4613      	mov	r3, r2
 8006356:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006358:	4b0b      	ldr	r3, [pc, #44]	@ (8006388 <HAL_RCC_GetSysClockFreq+0x200>)
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	0c1b      	lsrs	r3, r3, #16
 800635e:	f003 0303 	and.w	r3, r3, #3
 8006362:	3301      	adds	r3, #1
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006368:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800636a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800636c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006370:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006372:	e002      	b.n	800637a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006374:	4b05      	ldr	r3, [pc, #20]	@ (800638c <HAL_RCC_GetSysClockFreq+0x204>)
 8006376:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006378:	bf00      	nop
    }
  }
  return sysclockfreq;
 800637a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800637c:	4618      	mov	r0, r3
 800637e:	3750      	adds	r7, #80	@ 0x50
 8006380:	46bd      	mov	sp, r7
 8006382:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006386:	bf00      	nop
 8006388:	40023800 	.word	0x40023800
 800638c:	00f42400 	.word	0x00f42400
 8006390:	007a1200 	.word	0x007a1200

08006394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006394:	b480      	push	{r7}
 8006396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006398:	4b03      	ldr	r3, [pc, #12]	@ (80063a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800639a:	681b      	ldr	r3, [r3, #0]
}
 800639c:	4618      	mov	r0, r3
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop
 80063a8:	20000010 	.word	0x20000010

080063ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80063b0:	f7ff fff0 	bl	8006394 <HAL_RCC_GetHCLKFreq>
 80063b4:	4602      	mov	r2, r0
 80063b6:	4b05      	ldr	r3, [pc, #20]	@ (80063cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80063b8:	689b      	ldr	r3, [r3, #8]
 80063ba:	0a9b      	lsrs	r3, r3, #10
 80063bc:	f003 0307 	and.w	r3, r3, #7
 80063c0:	4903      	ldr	r1, [pc, #12]	@ (80063d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063c2:	5ccb      	ldrb	r3, [r1, r3]
 80063c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	40023800 	.word	0x40023800
 80063d0:	08009eb0 	.word	0x08009eb0

080063d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80063dc:	2300      	movs	r3, #0
 80063de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80063e0:	2300      	movs	r3, #0
 80063e2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0301 	and.w	r3, r3, #1
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10b      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d105      	bne.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006404:	2b00      	cmp	r3, #0
 8006406:	d075      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006408:	4b91      	ldr	r3, [pc, #580]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800640a:	2200      	movs	r2, #0
 800640c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800640e:	f7fd fb43 	bl	8003a98 <HAL_GetTick>
 8006412:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006414:	e008      	b.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006416:	f7fd fb3f 	bl	8003a98 <HAL_GetTick>
 800641a:	4602      	mov	r2, r0
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	1ad3      	subs	r3, r2, r3
 8006420:	2b02      	cmp	r3, #2
 8006422:	d901      	bls.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006424:	2303      	movs	r3, #3
 8006426:	e189      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006428:	4b8a      	ldr	r3, [pc, #552]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1f0      	bne.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	2b00      	cmp	r3, #0
 800643e:	d009      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	019a      	lsls	r2, r3, #6
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	071b      	lsls	r3, r3, #28
 800644c:	4981      	ldr	r1, [pc, #516]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800644e:	4313      	orrs	r3, r2
 8006450:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0302 	and.w	r3, r3, #2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d01f      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006460:	4b7c      	ldr	r3, [pc, #496]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006462:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006466:	0f1b      	lsrs	r3, r3, #28
 8006468:	f003 0307 	and.w	r3, r3, #7
 800646c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	019a      	lsls	r2, r3, #6
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	061b      	lsls	r3, r3, #24
 800647a:	431a      	orrs	r2, r3
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	071b      	lsls	r3, r3, #28
 8006480:	4974      	ldr	r1, [pc, #464]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006482:	4313      	orrs	r3, r2
 8006484:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006488:	4b72      	ldr	r3, [pc, #456]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800648a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800648e:	f023 021f 	bic.w	r2, r3, #31
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	3b01      	subs	r3, #1
 8006498:	496e      	ldr	r1, [pc, #440]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800649a:	4313      	orrs	r3, r2
 800649c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d00d      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	019a      	lsls	r2, r3, #6
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	061b      	lsls	r3, r3, #24
 80064b8:	431a      	orrs	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	071b      	lsls	r3, r3, #28
 80064c0:	4964      	ldr	r1, [pc, #400]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80064c8:	4b61      	ldr	r3, [pc, #388]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80064ca:	2201      	movs	r2, #1
 80064cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064ce:	f7fd fae3 	bl	8003a98 <HAL_GetTick>
 80064d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064d4:	e008      	b.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80064d6:	f7fd fadf 	bl	8003a98 <HAL_GetTick>
 80064da:	4602      	mov	r2, r0
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	1ad3      	subs	r3, r2, r3
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d901      	bls.n	80064e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e129      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80064e8:	4b5a      	ldr	r3, [pc, #360]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d0f0      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0304 	and.w	r3, r3, #4
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d105      	bne.n	800650c <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006508:	2b00      	cmp	r3, #0
 800650a:	d079      	beq.n	8006600 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800650c:	4b52      	ldr	r3, [pc, #328]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800650e:	2200      	movs	r2, #0
 8006510:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006512:	f7fd fac1 	bl	8003a98 <HAL_GetTick>
 8006516:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006518:	e008      	b.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800651a:	f7fd fabd 	bl	8003a98 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	2b02      	cmp	r3, #2
 8006526:	d901      	bls.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e107      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800652c:	4b49      	ldr	r3, [pc, #292]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006534:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006538:	d0ef      	beq.n	800651a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0304 	and.w	r3, r3, #4
 8006542:	2b00      	cmp	r3, #0
 8006544:	d020      	beq.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006546:	4b43      	ldr	r3, [pc, #268]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006548:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800654c:	0f1b      	lsrs	r3, r3, #28
 800654e:	f003 0307 	and.w	r3, r3, #7
 8006552:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	691b      	ldr	r3, [r3, #16]
 8006558:	019a      	lsls	r2, r3, #6
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	061b      	lsls	r3, r3, #24
 8006560:	431a      	orrs	r2, r3
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	071b      	lsls	r3, r3, #28
 8006566:	493b      	ldr	r1, [pc, #236]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006568:	4313      	orrs	r3, r2
 800656a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800656e:	4b39      	ldr	r3, [pc, #228]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006570:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006574:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6a1b      	ldr	r3, [r3, #32]
 800657c:	3b01      	subs	r3, #1
 800657e:	021b      	lsls	r3, r3, #8
 8006580:	4934      	ldr	r1, [pc, #208]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006582:	4313      	orrs	r3, r2
 8006584:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f003 0308 	and.w	r3, r3, #8
 8006590:	2b00      	cmp	r3, #0
 8006592:	d01e      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006594:	4b2f      	ldr	r3, [pc, #188]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800659a:	0e1b      	lsrs	r3, r3, #24
 800659c:	f003 030f 	and.w	r3, r3, #15
 80065a0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	691b      	ldr	r3, [r3, #16]
 80065a6:	019a      	lsls	r2, r3, #6
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	061b      	lsls	r3, r3, #24
 80065ac:	431a      	orrs	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	071b      	lsls	r3, r3, #28
 80065b4:	4927      	ldr	r1, [pc, #156]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80065bc:	4b25      	ldr	r3, [pc, #148]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065c2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ca:	4922      	ldr	r1, [pc, #136]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065cc:	4313      	orrs	r3, r2
 80065ce:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80065d2:	4b21      	ldr	r3, [pc, #132]	@ (8006658 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80065d4:	2201      	movs	r2, #1
 80065d6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065d8:	f7fd fa5e 	bl	8003a98 <HAL_GetTick>
 80065dc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065de:	e008      	b.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80065e0:	f7fd fa5a 	bl	8003a98 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e0a4      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80065f2:	4b18      	ldr	r3, [pc, #96]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80065fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065fe:	d1ef      	bne.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f003 0320 	and.w	r3, r3, #32
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 808b 	beq.w	8006724 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800660e:	2300      	movs	r3, #0
 8006610:	60fb      	str	r3, [r7, #12]
 8006612:	4b10      	ldr	r3, [pc, #64]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006616:	4a0f      	ldr	r2, [pc, #60]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800661c:	6413      	str	r3, [r2, #64]	@ 0x40
 800661e:	4b0d      	ldr	r3, [pc, #52]	@ (8006654 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006622:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006626:	60fb      	str	r3, [r7, #12]
 8006628:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800662a:	4b0c      	ldr	r3, [pc, #48]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a0b      	ldr	r2, [pc, #44]	@ (800665c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006630:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006634:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006636:	f7fd fa2f 	bl	8003a98 <HAL_GetTick>
 800663a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800663c:	e010      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800663e:	f7fd fa2b 	bl	8003a98 <HAL_GetTick>
 8006642:	4602      	mov	r2, r0
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	1ad3      	subs	r3, r2, r3
 8006648:	2b02      	cmp	r3, #2
 800664a:	d909      	bls.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800664c:	2303      	movs	r3, #3
 800664e:	e075      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006650:	42470068 	.word	0x42470068
 8006654:	40023800 	.word	0x40023800
 8006658:	42470070 	.word	0x42470070
 800665c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006660:	4b38      	ldr	r3, [pc, #224]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0e8      	beq.n	800663e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800666c:	4b36      	ldr	r3, [pc, #216]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800666e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006670:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006674:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d02f      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006680:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	429a      	cmp	r2, r3
 8006688:	d028      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800668a:	4b2f      	ldr	r3, [pc, #188]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800668c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800668e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006692:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006694:	4b2d      	ldr	r3, [pc, #180]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006696:	2201      	movs	r2, #1
 8006698:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800669a:	4b2c      	ldr	r3, [pc, #176]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800669c:	2200      	movs	r2, #0
 800669e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80066a0:	4a29      	ldr	r2, [pc, #164]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80066a6:	4b28      	ldr	r3, [pc, #160]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066aa:	f003 0301 	and.w	r3, r3, #1
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d114      	bne.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80066b2:	f7fd f9f1 	bl	8003a98 <HAL_GetTick>
 80066b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066b8:	e00a      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80066ba:	f7fd f9ed 	bl	8003a98 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d901      	bls.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e035      	b.n	800673c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80066d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d0ee      	beq.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066e8:	d10d      	bne.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80066ea:	4b17      	ldr	r3, [pc, #92]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80066fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80066fe:	4912      	ldr	r1, [pc, #72]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006700:	4313      	orrs	r3, r2
 8006702:	608b      	str	r3, [r1, #8]
 8006704:	e005      	b.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006706:	4b10      	ldr	r3, [pc, #64]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	4a0f      	ldr	r2, [pc, #60]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800670c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006710:	6093      	str	r3, [r2, #8]
 8006712:	4b0d      	ldr	r3, [pc, #52]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006714:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800671a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800671e:	490a      	ldr	r1, [pc, #40]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006720:	4313      	orrs	r3, r2
 8006722:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0310 	and.w	r3, r3, #16
 800672c:	2b00      	cmp	r3, #0
 800672e:	d004      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006736:	4b06      	ldr	r3, [pc, #24]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006738:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3718      	adds	r7, #24
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	40007000 	.word	0x40007000
 8006748:	40023800 	.word	0x40023800
 800674c:	42470e40 	.word	0x42470e40
 8006750:	424711e0 	.word	0x424711e0

08006754 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	e01c      	b.n	80067a0 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	795b      	ldrb	r3, [r3, #5]
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b00      	cmp	r3, #0
 800676e:	d105      	bne.n	800677c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7fc fc1a 	bl	8002fb0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2202      	movs	r2, #2
 8006780:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f042 0204 	orr.w	r2, r2, #4
 8006790:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	791b      	ldrb	r3, [r3, #4]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d101      	bne.n	80067c2 <HAL_RNG_GenerateRandomNumber+0x1a>
 80067be:	2302      	movs	r3, #2
 80067c0:	e044      	b.n	800684c <HAL_RNG_GenerateRandomNumber+0xa4>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	795b      	ldrb	r3, [r3, #5]
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d133      	bne.n	800683a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2202      	movs	r2, #2
 80067d6:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067d8:	f7fd f95e 	bl	8003a98 <HAL_GetTick>
 80067dc:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80067de:	e018      	b.n	8006812 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80067e0:	f7fd f95a 	bl	8003a98 <HAL_GetTick>
 80067e4:	4602      	mov	r2, r0
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d911      	bls.n	8006812 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d00a      	beq.n	8006812 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2202      	movs	r2, #2
 8006806:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e01c      	b.n	800684c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b01      	cmp	r3, #1
 800681e:	d1df      	bne.n	80067e0 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	689a      	ldr	r2, [r3, #8]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68da      	ldr	r2, [r3, #12]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	715a      	strb	r2, [r3, #5]
 8006838:	e004      	b.n	8006844 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2204      	movs	r2, #4
 800683e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006840:	2301      	movs	r3, #1
 8006842:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	711a      	strb	r2, [r3, #4]

  return status;
 800684a:	7bfb      	ldrb	r3, [r7, #15]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e07b      	b.n	800695e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686a:	2b00      	cmp	r3, #0
 800686c:	d108      	bne.n	8006880 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006876:	d009      	beq.n	800688c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	61da      	str	r2, [r3, #28]
 800687e:	e005      	b.n	800688c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d106      	bne.n	80068ac <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7fc fba4 	bl	8002ff4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2202      	movs	r2, #2
 80068b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068c2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80068d4:	431a      	orrs	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068de:	431a      	orrs	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	691b      	ldr	r3, [r3, #16]
 80068e4:	f003 0302 	and.w	r3, r3, #2
 80068e8:	431a      	orrs	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	431a      	orrs	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	699b      	ldr	r3, [r3, #24]
 80068f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80068fc:	431a      	orrs	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	69db      	ldr	r3, [r3, #28]
 8006902:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006906:	431a      	orrs	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6a1b      	ldr	r3, [r3, #32]
 800690c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006910:	ea42 0103 	orr.w	r1, r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006918:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	430a      	orrs	r2, r1
 8006922:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	0c1b      	lsrs	r3, r3, #16
 800692a:	f003 0104 	and.w	r1, r3, #4
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006932:	f003 0210 	and.w	r2, r3, #16
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	69da      	ldr	r2, [r3, #28]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800694c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2201      	movs	r2, #1
 8006958:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	3708      	adds	r7, #8
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b082      	sub	sp, #8
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d101      	bne.n	8006978 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e01a      	b.n	80069ae <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2202      	movs	r2, #2
 800697c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	681a      	ldr	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800698e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7fc fb77 	bl	8003084 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b088      	sub	sp, #32
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	60f8      	str	r0, [r7, #12]
 80069be:	60b9      	str	r1, [r7, #8]
 80069c0:	603b      	str	r3, [r7, #0]
 80069c2:	4613      	mov	r3, r2
 80069c4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069c6:	f7fd f867 	bl	8003a98 <HAL_GetTick>
 80069ca:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80069cc:	88fb      	ldrh	r3, [r7, #6]
 80069ce:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d001      	beq.n	80069e0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80069dc:	2302      	movs	r3, #2
 80069de:	e12a      	b.n	8006c36 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <HAL_SPI_Transmit+0x36>
 80069e6:	88fb      	ldrh	r3, [r7, #6]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e122      	b.n	8006c36 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d101      	bne.n	80069fe <HAL_SPI_Transmit+0x48>
 80069fa:	2302      	movs	r3, #2
 80069fc:	e11b      	b.n	8006c36 <HAL_SPI_Transmit+0x280>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2201      	movs	r2, #1
 8006a02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2203      	movs	r2, #3
 8006a0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	2200      	movs	r2, #0
 8006a12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	88fa      	ldrh	r2, [r7, #6]
 8006a1e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	88fa      	ldrh	r2, [r7, #6]
 8006a24:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a4c:	d10f      	bne.n	8006a6e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a6c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a78:	2b40      	cmp	r3, #64	@ 0x40
 8006a7a:	d007      	beq.n	8006a8c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a8a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a94:	d152      	bne.n	8006b3c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d002      	beq.n	8006aa4 <HAL_SPI_Transmit+0xee>
 8006a9e:	8b7b      	ldrh	r3, [r7, #26]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d145      	bne.n	8006b30 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa8:	881a      	ldrh	r2, [r3, #0]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab4:	1c9a      	adds	r2, r3, #2
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006ac8:	e032      	b.n	8006b30 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d112      	bne.n	8006afe <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006adc:	881a      	ldrh	r2, [r3, #0]
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ae8:	1c9a      	adds	r2, r3, #2
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	3b01      	subs	r3, #1
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006afc:	e018      	b.n	8006b30 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006afe:	f7fc ffcb 	bl	8003a98 <HAL_GetTick>
 8006b02:	4602      	mov	r2, r0
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	683a      	ldr	r2, [r7, #0]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d803      	bhi.n	8006b16 <HAL_SPI_Transmit+0x160>
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b14:	d102      	bne.n	8006b1c <HAL_SPI_Transmit+0x166>
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d109      	bne.n	8006b30 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2201      	movs	r2, #1
 8006b20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e082      	b.n	8006c36 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d1c7      	bne.n	8006aca <HAL_SPI_Transmit+0x114>
 8006b3a:	e053      	b.n	8006be4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d002      	beq.n	8006b4a <HAL_SPI_Transmit+0x194>
 8006b44:	8b7b      	ldrh	r3, [r7, #26]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d147      	bne.n	8006bda <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	330c      	adds	r3, #12
 8006b54:	7812      	ldrb	r2, [r2, #0]
 8006b56:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b5c:	1c5a      	adds	r2, r3, #1
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006b70:	e033      	b.n	8006bda <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	f003 0302 	and.w	r3, r3, #2
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	d113      	bne.n	8006ba8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	330c      	adds	r3, #12
 8006b8a:	7812      	ldrb	r2, [r2, #0]
 8006b8c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b92:	1c5a      	adds	r2, r3, #1
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006ba6:	e018      	b.n	8006bda <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ba8:	f7fc ff76 	bl	8003a98 <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	683a      	ldr	r2, [r7, #0]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d803      	bhi.n	8006bc0 <HAL_SPI_Transmit+0x20a>
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bbe:	d102      	bne.n	8006bc6 <HAL_SPI_Transmit+0x210>
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d109      	bne.n	8006bda <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	e02d      	b.n	8006c36 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1c6      	bne.n	8006b72 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006be4:	69fa      	ldr	r2, [r7, #28]
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 f8bf 	bl	8006d6c <SPI_EndRxTxTransaction>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d10a      	bne.n	8006c18 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c02:	2300      	movs	r3, #0
 8006c04:	617b      	str	r3, [r7, #20]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	617b      	str	r3, [r7, #20]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	617b      	str	r3, [r7, #20]
 8006c16:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d001      	beq.n	8006c34 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e000      	b.n	8006c36 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006c34:	2300      	movs	r3, #0
  }
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3720      	adds	r7, #32
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c4c:	b2db      	uxtb	r3, r3
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
	...

08006c5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b088      	sub	sp, #32
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	603b      	str	r3, [r7, #0]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c6c:	f7fc ff14 	bl	8003a98 <HAL_GetTick>
 8006c70:	4602      	mov	r2, r0
 8006c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c74:	1a9b      	subs	r3, r3, r2
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	4413      	add	r3, r2
 8006c7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c7c:	f7fc ff0c 	bl	8003a98 <HAL_GetTick>
 8006c80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c82:	4b39      	ldr	r3, [pc, #228]	@ (8006d68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	015b      	lsls	r3, r3, #5
 8006c88:	0d1b      	lsrs	r3, r3, #20
 8006c8a:	69fa      	ldr	r2, [r7, #28]
 8006c8c:	fb02 f303 	mul.w	r3, r2, r3
 8006c90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c92:	e054      	b.n	8006d3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c9a:	d050      	beq.n	8006d3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c9c:	f7fc fefc 	bl	8003a98 <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	69fa      	ldr	r2, [r7, #28]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d902      	bls.n	8006cb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d13d      	bne.n	8006d2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006cc0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cca:	d111      	bne.n	8006cf0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cd4:	d004      	beq.n	8006ce0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cde:	d107      	bne.n	8006cf0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	681a      	ldr	r2, [r3, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cf4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006cf8:	d10f      	bne.n	8006d1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006d08:	601a      	str	r2, [r3, #0]
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006d18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2200      	movs	r2, #0
 8006d26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e017      	b.n	8006d5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689a      	ldr	r2, [r3, #8]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	4013      	ands	r3, r2
 8006d48:	68ba      	ldr	r2, [r7, #8]
 8006d4a:	429a      	cmp	r2, r3
 8006d4c:	bf0c      	ite	eq
 8006d4e:	2301      	moveq	r3, #1
 8006d50:	2300      	movne	r3, #0
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	461a      	mov	r2, r3
 8006d56:	79fb      	ldrb	r3, [r7, #7]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d19b      	bne.n	8006c94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3720      	adds	r7, #32
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	20000010 	.word	0x20000010

08006d6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b088      	sub	sp, #32
 8006d70:	af02      	add	r7, sp, #8
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	2102      	movs	r1, #2
 8006d82:	68f8      	ldr	r0, [r7, #12]
 8006d84:	f7ff ff6a 	bl	8006c5c <SPI_WaitFlagStateUntilTimeout>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d007      	beq.n	8006d9e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d92:	f043 0220 	orr.w	r2, r3, #32
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006d9a:	2303      	movs	r3, #3
 8006d9c:	e032      	b.n	8006e04 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8006e0c <SPI_EndRxTxTransaction+0xa0>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a1b      	ldr	r2, [pc, #108]	@ (8006e10 <SPI_EndRxTxTransaction+0xa4>)
 8006da4:	fba2 2303 	umull	r2, r3, r2, r3
 8006da8:	0d5b      	lsrs	r3, r3, #21
 8006daa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006dae:	fb02 f303 	mul.w	r3, r2, r3
 8006db2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dbc:	d112      	bne.n	8006de4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2180      	movs	r1, #128	@ 0x80
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f7ff ff47 	bl	8006c5c <SPI_WaitFlagStateUntilTimeout>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d016      	beq.n	8006e02 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006dd8:	f043 0220 	orr.w	r2, r3, #32
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e00f      	b.n	8006e04 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00a      	beq.n	8006e00 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	3b01      	subs	r3, #1
 8006dee:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	689b      	ldr	r3, [r3, #8]
 8006df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dfa:	2b80      	cmp	r3, #128	@ 0x80
 8006dfc:	d0f2      	beq.n	8006de4 <SPI_EndRxTxTransaction+0x78>
 8006dfe:	e000      	b.n	8006e02 <SPI_EndRxTxTransaction+0x96>
        break;
 8006e00:	bf00      	nop
  }

  return HAL_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3718      	adds	r7, #24
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	20000010 	.word	0x20000010
 8006e10:	165e9f81 	.word	0x165e9f81

08006e14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e041      	b.n	8006eaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e2c:	b2db      	uxtb	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d106      	bne.n	8006e40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7fc f940 	bl	80030c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2202      	movs	r2, #2
 8006e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	3304      	adds	r3, #4
 8006e50:	4619      	mov	r1, r3
 8006e52:	4610      	mov	r0, r2
 8006e54:	f000 fae6 	bl	8007424 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3708      	adds	r7, #8
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
	...

08006eb4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d001      	beq.n	8006ecc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e046      	b.n	8006f5a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a23      	ldr	r2, [pc, #140]	@ (8006f68 <HAL_TIM_Base_Start+0xb4>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d022      	beq.n	8006f24 <HAL_TIM_Base_Start+0x70>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ee6:	d01d      	beq.n	8006f24 <HAL_TIM_Base_Start+0x70>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a1f      	ldr	r2, [pc, #124]	@ (8006f6c <HAL_TIM_Base_Start+0xb8>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d018      	beq.n	8006f24 <HAL_TIM_Base_Start+0x70>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a1e      	ldr	r2, [pc, #120]	@ (8006f70 <HAL_TIM_Base_Start+0xbc>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d013      	beq.n	8006f24 <HAL_TIM_Base_Start+0x70>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a1c      	ldr	r2, [pc, #112]	@ (8006f74 <HAL_TIM_Base_Start+0xc0>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d00e      	beq.n	8006f24 <HAL_TIM_Base_Start+0x70>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a1b      	ldr	r2, [pc, #108]	@ (8006f78 <HAL_TIM_Base_Start+0xc4>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d009      	beq.n	8006f24 <HAL_TIM_Base_Start+0x70>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a19      	ldr	r2, [pc, #100]	@ (8006f7c <HAL_TIM_Base_Start+0xc8>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d004      	beq.n	8006f24 <HAL_TIM_Base_Start+0x70>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a18      	ldr	r2, [pc, #96]	@ (8006f80 <HAL_TIM_Base_Start+0xcc>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d111      	bne.n	8006f48 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	689b      	ldr	r3, [r3, #8]
 8006f2a:	f003 0307 	and.w	r3, r3, #7
 8006f2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2b06      	cmp	r3, #6
 8006f34:	d010      	beq.n	8006f58 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f042 0201 	orr.w	r2, r2, #1
 8006f44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f46:	e007      	b.n	8006f58 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f042 0201 	orr.w	r2, r2, #1
 8006f56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3714      	adds	r7, #20
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
 8006f66:	bf00      	nop
 8006f68:	40010000 	.word	0x40010000
 8006f6c:	40000400 	.word	0x40000400
 8006f70:	40000800 	.word	0x40000800
 8006f74:	40000c00 	.word	0x40000c00
 8006f78:	40010400 	.word	0x40010400
 8006f7c:	40014000 	.word	0x40014000
 8006f80:	40001800 	.word	0x40001800

08006f84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d001      	beq.n	8006f9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e04e      	b.n	800703a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2202      	movs	r2, #2
 8006fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	68da      	ldr	r2, [r3, #12]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f042 0201 	orr.w	r2, r2, #1
 8006fb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a23      	ldr	r2, [pc, #140]	@ (8007048 <HAL_TIM_Base_Start_IT+0xc4>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d022      	beq.n	8007004 <HAL_TIM_Base_Start_IT+0x80>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fc6:	d01d      	beq.n	8007004 <HAL_TIM_Base_Start_IT+0x80>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a1f      	ldr	r2, [pc, #124]	@ (800704c <HAL_TIM_Base_Start_IT+0xc8>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d018      	beq.n	8007004 <HAL_TIM_Base_Start_IT+0x80>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8007050 <HAL_TIM_Base_Start_IT+0xcc>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d013      	beq.n	8007004 <HAL_TIM_Base_Start_IT+0x80>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8007054 <HAL_TIM_Base_Start_IT+0xd0>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d00e      	beq.n	8007004 <HAL_TIM_Base_Start_IT+0x80>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a1b      	ldr	r2, [pc, #108]	@ (8007058 <HAL_TIM_Base_Start_IT+0xd4>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d009      	beq.n	8007004 <HAL_TIM_Base_Start_IT+0x80>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a19      	ldr	r2, [pc, #100]	@ (800705c <HAL_TIM_Base_Start_IT+0xd8>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d004      	beq.n	8007004 <HAL_TIM_Base_Start_IT+0x80>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a18      	ldr	r2, [pc, #96]	@ (8007060 <HAL_TIM_Base_Start_IT+0xdc>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d111      	bne.n	8007028 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f003 0307 	and.w	r3, r3, #7
 800700e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2b06      	cmp	r3, #6
 8007014:	d010      	beq.n	8007038 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f042 0201 	orr.w	r2, r2, #1
 8007024:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007026:	e007      	b.n	8007038 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f042 0201 	orr.w	r2, r2, #1
 8007036:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	40010000 	.word	0x40010000
 800704c:	40000400 	.word	0x40000400
 8007050:	40000800 	.word	0x40000800
 8007054:	40000c00 	.word	0x40000c00
 8007058:	40010400 	.word	0x40010400
 800705c:	40014000 	.word	0x40014000
 8007060:	40001800 	.word	0x40001800

08007064 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68db      	ldr	r3, [r3, #12]
 8007072:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f003 0302 	and.w	r3, r3, #2
 8007082:	2b00      	cmp	r3, #0
 8007084:	d020      	beq.n	80070c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f003 0302 	and.w	r3, r3, #2
 800708c:	2b00      	cmp	r3, #0
 800708e:	d01b      	beq.n	80070c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f06f 0202 	mvn.w	r2, #2
 8007098:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	f003 0303 	and.w	r3, r3, #3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d003      	beq.n	80070b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f999 	bl	80073e6 <HAL_TIM_IC_CaptureCallback>
 80070b4:	e005      	b.n	80070c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f98b 	bl	80073d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f99c 	bl	80073fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	f003 0304 	and.w	r3, r3, #4
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d020      	beq.n	8007114 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	f003 0304 	and.w	r3, r3, #4
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d01b      	beq.n	8007114 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f06f 0204 	mvn.w	r2, #4
 80070e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2202      	movs	r2, #2
 80070ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	699b      	ldr	r3, [r3, #24]
 80070f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f000 f973 	bl	80073e6 <HAL_TIM_IC_CaptureCallback>
 8007100:	e005      	b.n	800710e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f965 	bl	80073d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f976 	bl	80073fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	2200      	movs	r2, #0
 8007112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	f003 0308 	and.w	r3, r3, #8
 800711a:	2b00      	cmp	r3, #0
 800711c:	d020      	beq.n	8007160 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f003 0308 	and.w	r3, r3, #8
 8007124:	2b00      	cmp	r3, #0
 8007126:	d01b      	beq.n	8007160 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f06f 0208 	mvn.w	r2, #8
 8007130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2204      	movs	r2, #4
 8007136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	69db      	ldr	r3, [r3, #28]
 800713e:	f003 0303 	and.w	r3, r3, #3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d003      	beq.n	800714e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 f94d 	bl	80073e6 <HAL_TIM_IC_CaptureCallback>
 800714c:	e005      	b.n	800715a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f93f 	bl	80073d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f950 	bl	80073fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	f003 0310 	and.w	r3, r3, #16
 8007166:	2b00      	cmp	r3, #0
 8007168:	d020      	beq.n	80071ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f003 0310 	and.w	r3, r3, #16
 8007170:	2b00      	cmp	r3, #0
 8007172:	d01b      	beq.n	80071ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f06f 0210 	mvn.w	r2, #16
 800717c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2208      	movs	r2, #8
 8007182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800718e:	2b00      	cmp	r3, #0
 8007190:	d003      	beq.n	800719a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 f927 	bl	80073e6 <HAL_TIM_IC_CaptureCallback>
 8007198:	e005      	b.n	80071a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f919 	bl	80073d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071a0:	6878      	ldr	r0, [r7, #4]
 80071a2:	f000 f92a 	bl	80073fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f003 0301 	and.w	r3, r3, #1
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d00c      	beq.n	80071d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d007      	beq.n	80071d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f06f 0201 	mvn.w	r2, #1
 80071c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f7fb ffc2 	bl	8003154 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00c      	beq.n	80071f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d007      	beq.n	80071f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80071ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fae4 	bl	80077bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d00c      	beq.n	8007218 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007204:	2b00      	cmp	r3, #0
 8007206:	d007      	beq.n	8007218 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f8fb 	bl	800740e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	f003 0320 	and.w	r3, r3, #32
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00c      	beq.n	800723c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f003 0320 	and.w	r3, r3, #32
 8007228:	2b00      	cmp	r3, #0
 800722a:	d007      	beq.n	800723c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f06f 0220 	mvn.w	r2, #32
 8007234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fab6 	bl	80077a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800723c:	bf00      	nop
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800724e:	2300      	movs	r3, #0
 8007250:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007258:	2b01      	cmp	r3, #1
 800725a:	d101      	bne.n	8007260 <HAL_TIM_ConfigClockSource+0x1c>
 800725c:	2302      	movs	r3, #2
 800725e:	e0b4      	b.n	80073ca <HAL_TIM_ConfigClockSource+0x186>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2202      	movs	r2, #2
 800726c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	689b      	ldr	r3, [r3, #8]
 8007276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800727e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007286:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007298:	d03e      	beq.n	8007318 <HAL_TIM_ConfigClockSource+0xd4>
 800729a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800729e:	f200 8087 	bhi.w	80073b0 <HAL_TIM_ConfigClockSource+0x16c>
 80072a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072a6:	f000 8086 	beq.w	80073b6 <HAL_TIM_ConfigClockSource+0x172>
 80072aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072ae:	d87f      	bhi.n	80073b0 <HAL_TIM_ConfigClockSource+0x16c>
 80072b0:	2b70      	cmp	r3, #112	@ 0x70
 80072b2:	d01a      	beq.n	80072ea <HAL_TIM_ConfigClockSource+0xa6>
 80072b4:	2b70      	cmp	r3, #112	@ 0x70
 80072b6:	d87b      	bhi.n	80073b0 <HAL_TIM_ConfigClockSource+0x16c>
 80072b8:	2b60      	cmp	r3, #96	@ 0x60
 80072ba:	d050      	beq.n	800735e <HAL_TIM_ConfigClockSource+0x11a>
 80072bc:	2b60      	cmp	r3, #96	@ 0x60
 80072be:	d877      	bhi.n	80073b0 <HAL_TIM_ConfigClockSource+0x16c>
 80072c0:	2b50      	cmp	r3, #80	@ 0x50
 80072c2:	d03c      	beq.n	800733e <HAL_TIM_ConfigClockSource+0xfa>
 80072c4:	2b50      	cmp	r3, #80	@ 0x50
 80072c6:	d873      	bhi.n	80073b0 <HAL_TIM_ConfigClockSource+0x16c>
 80072c8:	2b40      	cmp	r3, #64	@ 0x40
 80072ca:	d058      	beq.n	800737e <HAL_TIM_ConfigClockSource+0x13a>
 80072cc:	2b40      	cmp	r3, #64	@ 0x40
 80072ce:	d86f      	bhi.n	80073b0 <HAL_TIM_ConfigClockSource+0x16c>
 80072d0:	2b30      	cmp	r3, #48	@ 0x30
 80072d2:	d064      	beq.n	800739e <HAL_TIM_ConfigClockSource+0x15a>
 80072d4:	2b30      	cmp	r3, #48	@ 0x30
 80072d6:	d86b      	bhi.n	80073b0 <HAL_TIM_ConfigClockSource+0x16c>
 80072d8:	2b20      	cmp	r3, #32
 80072da:	d060      	beq.n	800739e <HAL_TIM_ConfigClockSource+0x15a>
 80072dc:	2b20      	cmp	r3, #32
 80072de:	d867      	bhi.n	80073b0 <HAL_TIM_ConfigClockSource+0x16c>
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d05c      	beq.n	800739e <HAL_TIM_ConfigClockSource+0x15a>
 80072e4:	2b10      	cmp	r3, #16
 80072e6:	d05a      	beq.n	800739e <HAL_TIM_ConfigClockSource+0x15a>
 80072e8:	e062      	b.n	80073b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80072fa:	f000 f9b9 	bl	8007670 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800730c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68ba      	ldr	r2, [r7, #8]
 8007314:	609a      	str	r2, [r3, #8]
      break;
 8007316:	e04f      	b.n	80073b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007328:	f000 f9a2 	bl	8007670 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	689a      	ldr	r2, [r3, #8]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800733a:	609a      	str	r2, [r3, #8]
      break;
 800733c:	e03c      	b.n	80073b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800734a:	461a      	mov	r2, r3
 800734c:	f000 f916 	bl	800757c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2150      	movs	r1, #80	@ 0x50
 8007356:	4618      	mov	r0, r3
 8007358:	f000 f96f 	bl	800763a <TIM_ITRx_SetConfig>
      break;
 800735c:	e02c      	b.n	80073b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800736a:	461a      	mov	r2, r3
 800736c:	f000 f935 	bl	80075da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	2160      	movs	r1, #96	@ 0x60
 8007376:	4618      	mov	r0, r3
 8007378:	f000 f95f 	bl	800763a <TIM_ITRx_SetConfig>
      break;
 800737c:	e01c      	b.n	80073b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800738a:	461a      	mov	r2, r3
 800738c:	f000 f8f6 	bl	800757c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2140      	movs	r1, #64	@ 0x40
 8007396:	4618      	mov	r0, r3
 8007398:	f000 f94f 	bl	800763a <TIM_ITRx_SetConfig>
      break;
 800739c:	e00c      	b.n	80073b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	4619      	mov	r1, r3
 80073a8:	4610      	mov	r0, r2
 80073aa:	f000 f946 	bl	800763a <TIM_ITRx_SetConfig>
      break;
 80073ae:	e003      	b.n	80073b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	73fb      	strb	r3, [r7, #15]
      break;
 80073b4:	e000      	b.n	80073b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80073b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80073d2:	b480      	push	{r7}
 80073d4:	b083      	sub	sp, #12
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80073da:	bf00      	nop
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b083      	sub	sp, #12
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80073ee:	bf00      	nop
 80073f0:	370c      	adds	r7, #12
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80073fa:	b480      	push	{r7}
 80073fc:	b083      	sub	sp, #12
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007402:	bf00      	nop
 8007404:	370c      	adds	r7, #12
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800740e:	b480      	push	{r7}
 8007410:	b083      	sub	sp, #12
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007416:	bf00      	nop
 8007418:	370c      	adds	r7, #12
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
	...

08007424 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a46      	ldr	r2, [pc, #280]	@ (8007550 <TIM_Base_SetConfig+0x12c>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d013      	beq.n	8007464 <TIM_Base_SetConfig+0x40>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007442:	d00f      	beq.n	8007464 <TIM_Base_SetConfig+0x40>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a43      	ldr	r2, [pc, #268]	@ (8007554 <TIM_Base_SetConfig+0x130>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d00b      	beq.n	8007464 <TIM_Base_SetConfig+0x40>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a42      	ldr	r2, [pc, #264]	@ (8007558 <TIM_Base_SetConfig+0x134>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d007      	beq.n	8007464 <TIM_Base_SetConfig+0x40>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a41      	ldr	r2, [pc, #260]	@ (800755c <TIM_Base_SetConfig+0x138>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d003      	beq.n	8007464 <TIM_Base_SetConfig+0x40>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	4a40      	ldr	r2, [pc, #256]	@ (8007560 <TIM_Base_SetConfig+0x13c>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d108      	bne.n	8007476 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800746a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	4313      	orrs	r3, r2
 8007474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	4a35      	ldr	r2, [pc, #212]	@ (8007550 <TIM_Base_SetConfig+0x12c>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d02b      	beq.n	80074d6 <TIM_Base_SetConfig+0xb2>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007484:	d027      	beq.n	80074d6 <TIM_Base_SetConfig+0xb2>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4a32      	ldr	r2, [pc, #200]	@ (8007554 <TIM_Base_SetConfig+0x130>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d023      	beq.n	80074d6 <TIM_Base_SetConfig+0xb2>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	4a31      	ldr	r2, [pc, #196]	@ (8007558 <TIM_Base_SetConfig+0x134>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d01f      	beq.n	80074d6 <TIM_Base_SetConfig+0xb2>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4a30      	ldr	r2, [pc, #192]	@ (800755c <TIM_Base_SetConfig+0x138>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d01b      	beq.n	80074d6 <TIM_Base_SetConfig+0xb2>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	4a2f      	ldr	r2, [pc, #188]	@ (8007560 <TIM_Base_SetConfig+0x13c>)
 80074a2:	4293      	cmp	r3, r2
 80074a4:	d017      	beq.n	80074d6 <TIM_Base_SetConfig+0xb2>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a2e      	ldr	r2, [pc, #184]	@ (8007564 <TIM_Base_SetConfig+0x140>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d013      	beq.n	80074d6 <TIM_Base_SetConfig+0xb2>
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a2d      	ldr	r2, [pc, #180]	@ (8007568 <TIM_Base_SetConfig+0x144>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d00f      	beq.n	80074d6 <TIM_Base_SetConfig+0xb2>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a2c      	ldr	r2, [pc, #176]	@ (800756c <TIM_Base_SetConfig+0x148>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d00b      	beq.n	80074d6 <TIM_Base_SetConfig+0xb2>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	4a2b      	ldr	r2, [pc, #172]	@ (8007570 <TIM_Base_SetConfig+0x14c>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d007      	beq.n	80074d6 <TIM_Base_SetConfig+0xb2>
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4a2a      	ldr	r2, [pc, #168]	@ (8007574 <TIM_Base_SetConfig+0x150>)
 80074ca:	4293      	cmp	r3, r2
 80074cc:	d003      	beq.n	80074d6 <TIM_Base_SetConfig+0xb2>
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4a29      	ldr	r2, [pc, #164]	@ (8007578 <TIM_Base_SetConfig+0x154>)
 80074d2:	4293      	cmp	r3, r2
 80074d4:	d108      	bne.n	80074e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	695b      	ldr	r3, [r3, #20]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	689a      	ldr	r2, [r3, #8]
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a10      	ldr	r2, [pc, #64]	@ (8007550 <TIM_Base_SetConfig+0x12c>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d003      	beq.n	800751c <TIM_Base_SetConfig+0xf8>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a12      	ldr	r2, [pc, #72]	@ (8007560 <TIM_Base_SetConfig+0x13c>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d103      	bne.n	8007524 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	691a      	ldr	r2, [r3, #16]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	2b01      	cmp	r3, #1
 8007534:	d105      	bne.n	8007542 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	f023 0201 	bic.w	r2, r3, #1
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	611a      	str	r2, [r3, #16]
  }
}
 8007542:	bf00      	nop
 8007544:	3714      	adds	r7, #20
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	40010000 	.word	0x40010000
 8007554:	40000400 	.word	0x40000400
 8007558:	40000800 	.word	0x40000800
 800755c:	40000c00 	.word	0x40000c00
 8007560:	40010400 	.word	0x40010400
 8007564:	40014000 	.word	0x40014000
 8007568:	40014400 	.word	0x40014400
 800756c:	40014800 	.word	0x40014800
 8007570:	40001800 	.word	0x40001800
 8007574:	40001c00 	.word	0x40001c00
 8007578:	40002000 	.word	0x40002000

0800757c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800757c:	b480      	push	{r7}
 800757e:	b087      	sub	sp, #28
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6a1b      	ldr	r3, [r3, #32]
 8007592:	f023 0201 	bic.w	r2, r3, #1
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80075a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	011b      	lsls	r3, r3, #4
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	f023 030a 	bic.w	r3, r3, #10
 80075b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075ba:	697a      	ldr	r2, [r7, #20]
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	4313      	orrs	r3, r2
 80075c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	693a      	ldr	r2, [r7, #16]
 80075c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	697a      	ldr	r2, [r7, #20]
 80075cc:	621a      	str	r2, [r3, #32]
}
 80075ce:	bf00      	nop
 80075d0:	371c      	adds	r7, #28
 80075d2:	46bd      	mov	sp, r7
 80075d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d8:	4770      	bx	lr

080075da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075da:	b480      	push	{r7}
 80075dc:	b087      	sub	sp, #28
 80075de:	af00      	add	r7, sp, #0
 80075e0:	60f8      	str	r0, [r7, #12]
 80075e2:	60b9      	str	r1, [r7, #8]
 80075e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	6a1b      	ldr	r3, [r3, #32]
 80075f0:	f023 0210 	bic.w	r2, r3, #16
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007604:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	031b      	lsls	r3, r3, #12
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	4313      	orrs	r3, r2
 800760e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007616:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	011b      	lsls	r3, r3, #4
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	4313      	orrs	r3, r2
 8007620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	697a      	ldr	r2, [r7, #20]
 800762c:	621a      	str	r2, [r3, #32]
}
 800762e:	bf00      	nop
 8007630:	371c      	adds	r7, #28
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr

0800763a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800763a:	b480      	push	{r7}
 800763c:	b085      	sub	sp, #20
 800763e:	af00      	add	r7, sp, #0
 8007640:	6078      	str	r0, [r7, #4]
 8007642:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689b      	ldr	r3, [r3, #8]
 8007648:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007650:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	4313      	orrs	r3, r2
 8007658:	f043 0307 	orr.w	r3, r3, #7
 800765c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	68fa      	ldr	r2, [r7, #12]
 8007662:	609a      	str	r2, [r3, #8]
}
 8007664:	bf00      	nop
 8007666:	3714      	adds	r7, #20
 8007668:	46bd      	mov	sp, r7
 800766a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766e:	4770      	bx	lr

08007670 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007670:	b480      	push	{r7}
 8007672:	b087      	sub	sp, #28
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	607a      	str	r2, [r7, #4]
 800767c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800768a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	021a      	lsls	r2, r3, #8
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	431a      	orrs	r2, r3
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	4313      	orrs	r3, r2
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	4313      	orrs	r3, r2
 800769c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	697a      	ldr	r2, [r7, #20]
 80076a2:	609a      	str	r2, [r3, #8]
}
 80076a4:	bf00      	nop
 80076a6:	371c      	adds	r7, #28
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d101      	bne.n	80076c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076c4:	2302      	movs	r3, #2
 80076c6:	e05a      	b.n	800777e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2202      	movs	r2, #2
 80076d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	4a21      	ldr	r2, [pc, #132]	@ (800778c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d022      	beq.n	8007752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007714:	d01d      	beq.n	8007752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	4a1d      	ldr	r2, [pc, #116]	@ (8007790 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800771c:	4293      	cmp	r3, r2
 800771e:	d018      	beq.n	8007752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a1b      	ldr	r2, [pc, #108]	@ (8007794 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d013      	beq.n	8007752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a1a      	ldr	r2, [pc, #104]	@ (8007798 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d00e      	beq.n	8007752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	4a18      	ldr	r2, [pc, #96]	@ (800779c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d009      	beq.n	8007752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a17      	ldr	r2, [pc, #92]	@ (80077a0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d004      	beq.n	8007752 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a15      	ldr	r2, [pc, #84]	@ (80077a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d10c      	bne.n	800776c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007758:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	4313      	orrs	r3, r2
 8007762:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	40010000 	.word	0x40010000
 8007790:	40000400 	.word	0x40000400
 8007794:	40000800 	.word	0x40000800
 8007798:	40000c00 	.word	0x40000c00
 800779c:	40010400 	.word	0x40010400
 80077a0:	40014000 	.word	0x40014000
 80077a4:	40001800 	.word	0x40001800

080077a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <findslot>:
 80077d0:	4b0a      	ldr	r3, [pc, #40]	@ (80077fc <findslot+0x2c>)
 80077d2:	b510      	push	{r4, lr}
 80077d4:	4604      	mov	r4, r0
 80077d6:	6818      	ldr	r0, [r3, #0]
 80077d8:	b118      	cbz	r0, 80077e2 <findslot+0x12>
 80077da:	6a03      	ldr	r3, [r0, #32]
 80077dc:	b90b      	cbnz	r3, 80077e2 <findslot+0x12>
 80077de:	f000 fb19 	bl	8007e14 <__sinit>
 80077e2:	2c13      	cmp	r4, #19
 80077e4:	d807      	bhi.n	80077f6 <findslot+0x26>
 80077e6:	4806      	ldr	r0, [pc, #24]	@ (8007800 <findslot+0x30>)
 80077e8:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80077ec:	3201      	adds	r2, #1
 80077ee:	d002      	beq.n	80077f6 <findslot+0x26>
 80077f0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80077f4:	bd10      	pop	{r4, pc}
 80077f6:	2000      	movs	r0, #0
 80077f8:	e7fc      	b.n	80077f4 <findslot+0x24>
 80077fa:	bf00      	nop
 80077fc:	20000030 	.word	0x20000030
 8007800:	20025ce4 	.word	0x20025ce4

08007804 <error>:
 8007804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007806:	4604      	mov	r4, r0
 8007808:	f000 fbb2 	bl	8007f70 <__errno>
 800780c:	2613      	movs	r6, #19
 800780e:	4605      	mov	r5, r0
 8007810:	2700      	movs	r7, #0
 8007812:	4630      	mov	r0, r6
 8007814:	4639      	mov	r1, r7
 8007816:	beab      	bkpt	0x00ab
 8007818:	4606      	mov	r6, r0
 800781a:	602e      	str	r6, [r5, #0]
 800781c:	4620      	mov	r0, r4
 800781e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007820 <checkerror>:
 8007820:	1c43      	adds	r3, r0, #1
 8007822:	d101      	bne.n	8007828 <checkerror+0x8>
 8007824:	f7ff bfee 	b.w	8007804 <error>
 8007828:	4770      	bx	lr

0800782a <_swiread>:
 800782a:	b530      	push	{r4, r5, lr}
 800782c:	b085      	sub	sp, #20
 800782e:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007832:	9203      	str	r2, [sp, #12]
 8007834:	2406      	movs	r4, #6
 8007836:	ad01      	add	r5, sp, #4
 8007838:	4620      	mov	r0, r4
 800783a:	4629      	mov	r1, r5
 800783c:	beab      	bkpt	0x00ab
 800783e:	4604      	mov	r4, r0
 8007840:	4620      	mov	r0, r4
 8007842:	f7ff ffed 	bl	8007820 <checkerror>
 8007846:	b005      	add	sp, #20
 8007848:	bd30      	pop	{r4, r5, pc}

0800784a <_read>:
 800784a:	b570      	push	{r4, r5, r6, lr}
 800784c:	460e      	mov	r6, r1
 800784e:	4614      	mov	r4, r2
 8007850:	f7ff ffbe 	bl	80077d0 <findslot>
 8007854:	4605      	mov	r5, r0
 8007856:	b930      	cbnz	r0, 8007866 <_read+0x1c>
 8007858:	f000 fb8a 	bl	8007f70 <__errno>
 800785c:	2309      	movs	r3, #9
 800785e:	6003      	str	r3, [r0, #0]
 8007860:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007864:	bd70      	pop	{r4, r5, r6, pc}
 8007866:	6800      	ldr	r0, [r0, #0]
 8007868:	4622      	mov	r2, r4
 800786a:	4631      	mov	r1, r6
 800786c:	f7ff ffdd 	bl	800782a <_swiread>
 8007870:	1c43      	adds	r3, r0, #1
 8007872:	d0f5      	beq.n	8007860 <_read+0x16>
 8007874:	686b      	ldr	r3, [r5, #4]
 8007876:	1a20      	subs	r0, r4, r0
 8007878:	4403      	add	r3, r0
 800787a:	606b      	str	r3, [r5, #4]
 800787c:	e7f2      	b.n	8007864 <_read+0x1a>

0800787e <_swilseek>:
 800787e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007880:	460c      	mov	r4, r1
 8007882:	4616      	mov	r6, r2
 8007884:	f7ff ffa4 	bl	80077d0 <findslot>
 8007888:	4605      	mov	r5, r0
 800788a:	b940      	cbnz	r0, 800789e <_swilseek+0x20>
 800788c:	f000 fb70 	bl	8007f70 <__errno>
 8007890:	2309      	movs	r3, #9
 8007892:	6003      	str	r3, [r0, #0]
 8007894:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007898:	4620      	mov	r0, r4
 800789a:	b003      	add	sp, #12
 800789c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800789e:	2e02      	cmp	r6, #2
 80078a0:	d903      	bls.n	80078aa <_swilseek+0x2c>
 80078a2:	f000 fb65 	bl	8007f70 <__errno>
 80078a6:	2316      	movs	r3, #22
 80078a8:	e7f3      	b.n	8007892 <_swilseek+0x14>
 80078aa:	2e01      	cmp	r6, #1
 80078ac:	d112      	bne.n	80078d4 <_swilseek+0x56>
 80078ae:	6843      	ldr	r3, [r0, #4]
 80078b0:	18e4      	adds	r4, r4, r3
 80078b2:	d4f6      	bmi.n	80078a2 <_swilseek+0x24>
 80078b4:	682b      	ldr	r3, [r5, #0]
 80078b6:	260a      	movs	r6, #10
 80078b8:	e9cd 3400 	strd	r3, r4, [sp]
 80078bc:	466f      	mov	r7, sp
 80078be:	4630      	mov	r0, r6
 80078c0:	4639      	mov	r1, r7
 80078c2:	beab      	bkpt	0x00ab
 80078c4:	4606      	mov	r6, r0
 80078c6:	4630      	mov	r0, r6
 80078c8:	f7ff ffaa 	bl	8007820 <checkerror>
 80078cc:	2800      	cmp	r0, #0
 80078ce:	dbe1      	blt.n	8007894 <_swilseek+0x16>
 80078d0:	606c      	str	r4, [r5, #4]
 80078d2:	e7e1      	b.n	8007898 <_swilseek+0x1a>
 80078d4:	2e02      	cmp	r6, #2
 80078d6:	6803      	ldr	r3, [r0, #0]
 80078d8:	d1ec      	bne.n	80078b4 <_swilseek+0x36>
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	260c      	movs	r6, #12
 80078de:	466f      	mov	r7, sp
 80078e0:	4630      	mov	r0, r6
 80078e2:	4639      	mov	r1, r7
 80078e4:	beab      	bkpt	0x00ab
 80078e6:	4606      	mov	r6, r0
 80078e8:	4630      	mov	r0, r6
 80078ea:	f7ff ff99 	bl	8007820 <checkerror>
 80078ee:	1c43      	adds	r3, r0, #1
 80078f0:	d0d0      	beq.n	8007894 <_swilseek+0x16>
 80078f2:	4404      	add	r4, r0
 80078f4:	e7de      	b.n	80078b4 <_swilseek+0x36>

080078f6 <_lseek>:
 80078f6:	f7ff bfc2 	b.w	800787e <_swilseek>

080078fa <_swiwrite>:
 80078fa:	b530      	push	{r4, r5, lr}
 80078fc:	b085      	sub	sp, #20
 80078fe:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007902:	9203      	str	r2, [sp, #12]
 8007904:	2405      	movs	r4, #5
 8007906:	ad01      	add	r5, sp, #4
 8007908:	4620      	mov	r0, r4
 800790a:	4629      	mov	r1, r5
 800790c:	beab      	bkpt	0x00ab
 800790e:	4604      	mov	r4, r0
 8007910:	4620      	mov	r0, r4
 8007912:	f7ff ff85 	bl	8007820 <checkerror>
 8007916:	b005      	add	sp, #20
 8007918:	bd30      	pop	{r4, r5, pc}

0800791a <_write>:
 800791a:	b570      	push	{r4, r5, r6, lr}
 800791c:	460e      	mov	r6, r1
 800791e:	4615      	mov	r5, r2
 8007920:	f7ff ff56 	bl	80077d0 <findslot>
 8007924:	4604      	mov	r4, r0
 8007926:	b930      	cbnz	r0, 8007936 <_write+0x1c>
 8007928:	f000 fb22 	bl	8007f70 <__errno>
 800792c:	2309      	movs	r3, #9
 800792e:	6003      	str	r3, [r0, #0]
 8007930:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007934:	bd70      	pop	{r4, r5, r6, pc}
 8007936:	6800      	ldr	r0, [r0, #0]
 8007938:	462a      	mov	r2, r5
 800793a:	4631      	mov	r1, r6
 800793c:	f7ff ffdd 	bl	80078fa <_swiwrite>
 8007940:	1e03      	subs	r3, r0, #0
 8007942:	dbf5      	blt.n	8007930 <_write+0x16>
 8007944:	6862      	ldr	r2, [r4, #4]
 8007946:	1ae8      	subs	r0, r5, r3
 8007948:	4402      	add	r2, r0
 800794a:	42ab      	cmp	r3, r5
 800794c:	6062      	str	r2, [r4, #4]
 800794e:	d1f1      	bne.n	8007934 <_write+0x1a>
 8007950:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007954:	2000      	movs	r0, #0
 8007956:	f7ff bf55 	b.w	8007804 <error>

0800795a <_swiclose>:
 800795a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800795c:	2402      	movs	r4, #2
 800795e:	9001      	str	r0, [sp, #4]
 8007960:	ad01      	add	r5, sp, #4
 8007962:	4620      	mov	r0, r4
 8007964:	4629      	mov	r1, r5
 8007966:	beab      	bkpt	0x00ab
 8007968:	4604      	mov	r4, r0
 800796a:	4620      	mov	r0, r4
 800796c:	f7ff ff58 	bl	8007820 <checkerror>
 8007970:	b003      	add	sp, #12
 8007972:	bd30      	pop	{r4, r5, pc}

08007974 <_close>:
 8007974:	b538      	push	{r3, r4, r5, lr}
 8007976:	4605      	mov	r5, r0
 8007978:	f7ff ff2a 	bl	80077d0 <findslot>
 800797c:	4604      	mov	r4, r0
 800797e:	b930      	cbnz	r0, 800798e <_close+0x1a>
 8007980:	f000 faf6 	bl	8007f70 <__errno>
 8007984:	2309      	movs	r3, #9
 8007986:	6003      	str	r3, [r0, #0]
 8007988:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800798c:	bd38      	pop	{r3, r4, r5, pc}
 800798e:	3d01      	subs	r5, #1
 8007990:	2d01      	cmp	r5, #1
 8007992:	d809      	bhi.n	80079a8 <_close+0x34>
 8007994:	4b07      	ldr	r3, [pc, #28]	@ (80079b4 <_close+0x40>)
 8007996:	689a      	ldr	r2, [r3, #8]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	429a      	cmp	r2, r3
 800799c:	d104      	bne.n	80079a8 <_close+0x34>
 800799e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80079a2:	6023      	str	r3, [r4, #0]
 80079a4:	2000      	movs	r0, #0
 80079a6:	e7f1      	b.n	800798c <_close+0x18>
 80079a8:	6820      	ldr	r0, [r4, #0]
 80079aa:	f7ff ffd6 	bl	800795a <_swiclose>
 80079ae:	2800      	cmp	r0, #0
 80079b0:	d0f5      	beq.n	800799e <_close+0x2a>
 80079b2:	e7eb      	b.n	800798c <_close+0x18>
 80079b4:	20025ce4 	.word	0x20025ce4

080079b8 <_swistat>:
 80079b8:	b570      	push	{r4, r5, r6, lr}
 80079ba:	460c      	mov	r4, r1
 80079bc:	f7ff ff08 	bl	80077d0 <findslot>
 80079c0:	4605      	mov	r5, r0
 80079c2:	b930      	cbnz	r0, 80079d2 <_swistat+0x1a>
 80079c4:	f000 fad4 	bl	8007f70 <__errno>
 80079c8:	2309      	movs	r3, #9
 80079ca:	6003      	str	r3, [r0, #0]
 80079cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079d0:	bd70      	pop	{r4, r5, r6, pc}
 80079d2:	6863      	ldr	r3, [r4, #4]
 80079d4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80079d8:	6063      	str	r3, [r4, #4]
 80079da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079de:	64a3      	str	r3, [r4, #72]	@ 0x48
 80079e0:	260c      	movs	r6, #12
 80079e2:	4630      	mov	r0, r6
 80079e4:	4629      	mov	r1, r5
 80079e6:	beab      	bkpt	0x00ab
 80079e8:	4605      	mov	r5, r0
 80079ea:	4628      	mov	r0, r5
 80079ec:	f7ff ff18 	bl	8007820 <checkerror>
 80079f0:	1c43      	adds	r3, r0, #1
 80079f2:	d0eb      	beq.n	80079cc <_swistat+0x14>
 80079f4:	6120      	str	r0, [r4, #16]
 80079f6:	2000      	movs	r0, #0
 80079f8:	e7ea      	b.n	80079d0 <_swistat+0x18>

080079fa <_fstat>:
 80079fa:	460b      	mov	r3, r1
 80079fc:	b510      	push	{r4, lr}
 80079fe:	2100      	movs	r1, #0
 8007a00:	4604      	mov	r4, r0
 8007a02:	2258      	movs	r2, #88	@ 0x58
 8007a04:	4618      	mov	r0, r3
 8007a06:	f000 faab 	bl	8007f60 <memset>
 8007a0a:	4601      	mov	r1, r0
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a12:	f7ff bfd1 	b.w	80079b8 <_swistat>

08007a16 <_stat>:
 8007a16:	b538      	push	{r3, r4, r5, lr}
 8007a18:	460d      	mov	r5, r1
 8007a1a:	4604      	mov	r4, r0
 8007a1c:	2258      	movs	r2, #88	@ 0x58
 8007a1e:	2100      	movs	r1, #0
 8007a20:	4628      	mov	r0, r5
 8007a22:	f000 fa9d 	bl	8007f60 <memset>
 8007a26:	4620      	mov	r0, r4
 8007a28:	2100      	movs	r1, #0
 8007a2a:	f000 f811 	bl	8007a50 <_swiopen>
 8007a2e:	1c43      	adds	r3, r0, #1
 8007a30:	4604      	mov	r4, r0
 8007a32:	d00b      	beq.n	8007a4c <_stat+0x36>
 8007a34:	686b      	ldr	r3, [r5, #4]
 8007a36:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007a3a:	606b      	str	r3, [r5, #4]
 8007a3c:	4629      	mov	r1, r5
 8007a3e:	f7ff ffbb 	bl	80079b8 <_swistat>
 8007a42:	4605      	mov	r5, r0
 8007a44:	4620      	mov	r0, r4
 8007a46:	f7ff ff95 	bl	8007974 <_close>
 8007a4a:	462c      	mov	r4, r5
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	bd38      	pop	{r3, r4, r5, pc}

08007a50 <_swiopen>:
 8007a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a54:	4f29      	ldr	r7, [pc, #164]	@ (8007afc <_swiopen+0xac>)
 8007a56:	b096      	sub	sp, #88	@ 0x58
 8007a58:	4682      	mov	sl, r0
 8007a5a:	460e      	mov	r6, r1
 8007a5c:	2400      	movs	r4, #0
 8007a5e:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8007a62:	3301      	adds	r3, #1
 8007a64:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8007a68:	d00c      	beq.n	8007a84 <_swiopen+0x34>
 8007a6a:	3401      	adds	r4, #1
 8007a6c:	2c14      	cmp	r4, #20
 8007a6e:	d1f6      	bne.n	8007a5e <_swiopen+0xe>
 8007a70:	f000 fa7e 	bl	8007f70 <__errno>
 8007a74:	2318      	movs	r3, #24
 8007a76:	6003      	str	r3, [r0, #0]
 8007a78:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007a7c:	4620      	mov	r0, r4
 8007a7e:	b016      	add	sp, #88	@ 0x58
 8007a80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a84:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8007a88:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007a8c:	46e9      	mov	r9, sp
 8007a8e:	d109      	bne.n	8007aa4 <_swiopen+0x54>
 8007a90:	4649      	mov	r1, r9
 8007a92:	4650      	mov	r0, sl
 8007a94:	f7ff ffbf 	bl	8007a16 <_stat>
 8007a98:	3001      	adds	r0, #1
 8007a9a:	d003      	beq.n	8007aa4 <_swiopen+0x54>
 8007a9c:	f000 fa68 	bl	8007f70 <__errno>
 8007aa0:	2311      	movs	r3, #17
 8007aa2:	e7e8      	b.n	8007a76 <_swiopen+0x26>
 8007aa4:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8007aa8:	f240 6301 	movw	r3, #1537	@ 0x601
 8007aac:	07b2      	lsls	r2, r6, #30
 8007aae:	bf48      	it	mi
 8007ab0:	f045 0502 	orrmi.w	r5, r5, #2
 8007ab4:	421e      	tst	r6, r3
 8007ab6:	bf18      	it	ne
 8007ab8:	f045 0504 	orrne.w	r5, r5, #4
 8007abc:	0733      	lsls	r3, r6, #28
 8007abe:	bf48      	it	mi
 8007ac0:	f025 0504 	bicmi.w	r5, r5, #4
 8007ac4:	4650      	mov	r0, sl
 8007ac6:	bf48      	it	mi
 8007ac8:	f045 0508 	orrmi.w	r5, r5, #8
 8007acc:	f8cd a000 	str.w	sl, [sp]
 8007ad0:	f7f8 fb8e 	bl	80001f0 <strlen>
 8007ad4:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8007ad8:	2501      	movs	r5, #1
 8007ada:	4628      	mov	r0, r5
 8007adc:	4649      	mov	r1, r9
 8007ade:	beab      	bkpt	0x00ab
 8007ae0:	4605      	mov	r5, r0
 8007ae2:	2d00      	cmp	r5, #0
 8007ae4:	db05      	blt.n	8007af2 <_swiopen+0xa2>
 8007ae6:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8007aea:	4447      	add	r7, r8
 8007aec:	2300      	movs	r3, #0
 8007aee:	607b      	str	r3, [r7, #4]
 8007af0:	e7c4      	b.n	8007a7c <_swiopen+0x2c>
 8007af2:	4628      	mov	r0, r5
 8007af4:	f7ff fe86 	bl	8007804 <error>
 8007af8:	4604      	mov	r4, r0
 8007afa:	e7bf      	b.n	8007a7c <_swiopen+0x2c>
 8007afc:	20025ce4 	.word	0x20025ce4

08007b00 <_get_semihosting_exts>:
 8007b00:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007b04:	4606      	mov	r6, r0
 8007b06:	460f      	mov	r7, r1
 8007b08:	4829      	ldr	r0, [pc, #164]	@ (8007bb0 <_get_semihosting_exts+0xb0>)
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	4615      	mov	r5, r2
 8007b0e:	f7ff ff9f 	bl	8007a50 <_swiopen>
 8007b12:	462a      	mov	r2, r5
 8007b14:	4604      	mov	r4, r0
 8007b16:	2100      	movs	r1, #0
 8007b18:	4630      	mov	r0, r6
 8007b1a:	f000 fa21 	bl	8007f60 <memset>
 8007b1e:	1c63      	adds	r3, r4, #1
 8007b20:	d014      	beq.n	8007b4c <_get_semihosting_exts+0x4c>
 8007b22:	4620      	mov	r0, r4
 8007b24:	f7ff fe54 	bl	80077d0 <findslot>
 8007b28:	f04f 080c 	mov.w	r8, #12
 8007b2c:	4681      	mov	r9, r0
 8007b2e:	4640      	mov	r0, r8
 8007b30:	4649      	mov	r1, r9
 8007b32:	beab      	bkpt	0x00ab
 8007b34:	4680      	mov	r8, r0
 8007b36:	4640      	mov	r0, r8
 8007b38:	f7ff fe72 	bl	8007820 <checkerror>
 8007b3c:	2803      	cmp	r0, #3
 8007b3e:	dd02      	ble.n	8007b46 <_get_semihosting_exts+0x46>
 8007b40:	1ec3      	subs	r3, r0, #3
 8007b42:	42ab      	cmp	r3, r5
 8007b44:	dc07      	bgt.n	8007b56 <_get_semihosting_exts+0x56>
 8007b46:	4620      	mov	r0, r4
 8007b48:	f7ff ff14 	bl	8007974 <_close>
 8007b4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b50:	b003      	add	sp, #12
 8007b52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b56:	2204      	movs	r2, #4
 8007b58:	eb0d 0102 	add.w	r1, sp, r2
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f7ff fe74 	bl	800784a <_read>
 8007b62:	2803      	cmp	r0, #3
 8007b64:	ddef      	ble.n	8007b46 <_get_semihosting_exts+0x46>
 8007b66:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007b6a:	2b53      	cmp	r3, #83	@ 0x53
 8007b6c:	d1eb      	bne.n	8007b46 <_get_semihosting_exts+0x46>
 8007b6e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007b72:	2b48      	cmp	r3, #72	@ 0x48
 8007b74:	d1e7      	bne.n	8007b46 <_get_semihosting_exts+0x46>
 8007b76:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007b7a:	2b46      	cmp	r3, #70	@ 0x46
 8007b7c:	d1e3      	bne.n	8007b46 <_get_semihosting_exts+0x46>
 8007b7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007b82:	2b42      	cmp	r3, #66	@ 0x42
 8007b84:	d1df      	bne.n	8007b46 <_get_semihosting_exts+0x46>
 8007b86:	2201      	movs	r2, #1
 8007b88:	4639      	mov	r1, r7
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f7ff fe77 	bl	800787e <_swilseek>
 8007b90:	2800      	cmp	r0, #0
 8007b92:	dbd8      	blt.n	8007b46 <_get_semihosting_exts+0x46>
 8007b94:	462a      	mov	r2, r5
 8007b96:	4631      	mov	r1, r6
 8007b98:	4620      	mov	r0, r4
 8007b9a:	f7ff fe56 	bl	800784a <_read>
 8007b9e:	4605      	mov	r5, r0
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f7ff fee7 	bl	8007974 <_close>
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	f7ff fe3a 	bl	8007820 <checkerror>
 8007bac:	e7d0      	b.n	8007b50 <_get_semihosting_exts+0x50>
 8007bae:	bf00      	nop
 8007bb0:	08009eb8 	.word	0x08009eb8

08007bb4 <initialise_semihosting_exts>:
 8007bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bb6:	4d0a      	ldr	r5, [pc, #40]	@ (8007be0 <initialise_semihosting_exts+0x2c>)
 8007bb8:	4c0a      	ldr	r4, [pc, #40]	@ (8007be4 <initialise_semihosting_exts+0x30>)
 8007bba:	2100      	movs	r1, #0
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	a801      	add	r0, sp, #4
 8007bc0:	6029      	str	r1, [r5, #0]
 8007bc2:	6022      	str	r2, [r4, #0]
 8007bc4:	f7ff ff9c 	bl	8007b00 <_get_semihosting_exts>
 8007bc8:	2800      	cmp	r0, #0
 8007bca:	dd07      	ble.n	8007bdc <initialise_semihosting_exts+0x28>
 8007bcc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007bd0:	f003 0201 	and.w	r2, r3, #1
 8007bd4:	f003 0302 	and.w	r3, r3, #2
 8007bd8:	602a      	str	r2, [r5, #0]
 8007bda:	6023      	str	r3, [r4, #0]
 8007bdc:	b003      	add	sp, #12
 8007bde:	bd30      	pop	{r4, r5, pc}
 8007be0:	20000020 	.word	0x20000020
 8007be4:	2000001c 	.word	0x2000001c

08007be8 <_has_ext_stdout_stderr>:
 8007be8:	b510      	push	{r4, lr}
 8007bea:	4c04      	ldr	r4, [pc, #16]	@ (8007bfc <_has_ext_stdout_stderr+0x14>)
 8007bec:	6823      	ldr	r3, [r4, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	da01      	bge.n	8007bf6 <_has_ext_stdout_stderr+0xe>
 8007bf2:	f7ff ffdf 	bl	8007bb4 <initialise_semihosting_exts>
 8007bf6:	6820      	ldr	r0, [r4, #0]
 8007bf8:	bd10      	pop	{r4, pc}
 8007bfa:	bf00      	nop
 8007bfc:	2000001c 	.word	0x2000001c

08007c00 <initialise_monitor_handles>:
 8007c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c04:	b085      	sub	sp, #20
 8007c06:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8007cb8 <initialise_monitor_handles+0xb8>
 8007c0a:	f8cd 9004 	str.w	r9, [sp, #4]
 8007c0e:	2303      	movs	r3, #3
 8007c10:	2400      	movs	r4, #0
 8007c12:	9303      	str	r3, [sp, #12]
 8007c14:	af01      	add	r7, sp, #4
 8007c16:	9402      	str	r4, [sp, #8]
 8007c18:	2501      	movs	r5, #1
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	4639      	mov	r1, r7
 8007c1e:	beab      	bkpt	0x00ab
 8007c20:	4605      	mov	r5, r0
 8007c22:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8007cbc <initialise_monitor_handles+0xbc>
 8007c26:	4623      	mov	r3, r4
 8007c28:	4c20      	ldr	r4, [pc, #128]	@ (8007cac <initialise_monitor_handles+0xac>)
 8007c2a:	f8c8 5000 	str.w	r5, [r8]
 8007c2e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007c32:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8007c36:	3301      	adds	r3, #1
 8007c38:	2b14      	cmp	r3, #20
 8007c3a:	d1fa      	bne.n	8007c32 <initialise_monitor_handles+0x32>
 8007c3c:	f7ff ffd4 	bl	8007be8 <_has_ext_stdout_stderr>
 8007c40:	4d1b      	ldr	r5, [pc, #108]	@ (8007cb0 <initialise_monitor_handles+0xb0>)
 8007c42:	b1d0      	cbz	r0, 8007c7a <initialise_monitor_handles+0x7a>
 8007c44:	f04f 0a03 	mov.w	sl, #3
 8007c48:	2304      	movs	r3, #4
 8007c4a:	f8cd 9004 	str.w	r9, [sp, #4]
 8007c4e:	2601      	movs	r6, #1
 8007c50:	f8cd a00c 	str.w	sl, [sp, #12]
 8007c54:	9302      	str	r3, [sp, #8]
 8007c56:	4630      	mov	r0, r6
 8007c58:	4639      	mov	r1, r7
 8007c5a:	beab      	bkpt	0x00ab
 8007c5c:	4683      	mov	fp, r0
 8007c5e:	4b15      	ldr	r3, [pc, #84]	@ (8007cb4 <initialise_monitor_handles+0xb4>)
 8007c60:	f8cd 9004 	str.w	r9, [sp, #4]
 8007c64:	f8c3 b000 	str.w	fp, [r3]
 8007c68:	2308      	movs	r3, #8
 8007c6a:	f8cd a00c 	str.w	sl, [sp, #12]
 8007c6e:	9302      	str	r3, [sp, #8]
 8007c70:	4630      	mov	r0, r6
 8007c72:	4639      	mov	r1, r7
 8007c74:	beab      	bkpt	0x00ab
 8007c76:	4606      	mov	r6, r0
 8007c78:	602e      	str	r6, [r5, #0]
 8007c7a:	682b      	ldr	r3, [r5, #0]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	bf02      	ittt	eq
 8007c80:	4b0c      	ldreq	r3, [pc, #48]	@ (8007cb4 <initialise_monitor_handles+0xb4>)
 8007c82:	681b      	ldreq	r3, [r3, #0]
 8007c84:	602b      	streq	r3, [r5, #0]
 8007c86:	2600      	movs	r6, #0
 8007c88:	f8d8 3000 	ldr.w	r3, [r8]
 8007c8c:	6023      	str	r3, [r4, #0]
 8007c8e:	6066      	str	r6, [r4, #4]
 8007c90:	f7ff ffaa 	bl	8007be8 <_has_ext_stdout_stderr>
 8007c94:	b130      	cbz	r0, 8007ca4 <initialise_monitor_handles+0xa4>
 8007c96:	4b07      	ldr	r3, [pc, #28]	@ (8007cb4 <initialise_monitor_handles+0xb4>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8007c9e:	682b      	ldr	r3, [r5, #0]
 8007ca0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8007ca4:	b005      	add	sp, #20
 8007ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007caa:	bf00      	nop
 8007cac:	20025ce4 	.word	0x20025ce4
 8007cb0:	20025cd8 	.word	0x20025cd8
 8007cb4:	20025cdc 	.word	0x20025cdc
 8007cb8:	08009ece 	.word	0x08009ece
 8007cbc:	20025ce0 	.word	0x20025ce0

08007cc0 <_isatty>:
 8007cc0:	b570      	push	{r4, r5, r6, lr}
 8007cc2:	f7ff fd85 	bl	80077d0 <findslot>
 8007cc6:	2409      	movs	r4, #9
 8007cc8:	4605      	mov	r5, r0
 8007cca:	b920      	cbnz	r0, 8007cd6 <_isatty+0x16>
 8007ccc:	f000 f950 	bl	8007f70 <__errno>
 8007cd0:	6004      	str	r4, [r0, #0]
 8007cd2:	2000      	movs	r0, #0
 8007cd4:	bd70      	pop	{r4, r5, r6, pc}
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	4629      	mov	r1, r5
 8007cda:	beab      	bkpt	0x00ab
 8007cdc:	4604      	mov	r4, r0
 8007cde:	2c01      	cmp	r4, #1
 8007ce0:	4620      	mov	r0, r4
 8007ce2:	d0f7      	beq.n	8007cd4 <_isatty+0x14>
 8007ce4:	f000 f944 	bl	8007f70 <__errno>
 8007ce8:	2513      	movs	r5, #19
 8007cea:	4604      	mov	r4, r0
 8007cec:	2600      	movs	r6, #0
 8007cee:	4628      	mov	r0, r5
 8007cf0:	4631      	mov	r1, r6
 8007cf2:	beab      	bkpt	0x00ab
 8007cf4:	4605      	mov	r5, r0
 8007cf6:	6025      	str	r5, [r4, #0]
 8007cf8:	e7eb      	b.n	8007cd2 <_isatty+0x12>
	...

08007cfc <std>:
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	b510      	push	{r4, lr}
 8007d00:	4604      	mov	r4, r0
 8007d02:	e9c0 3300 	strd	r3, r3, [r0]
 8007d06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007d0a:	6083      	str	r3, [r0, #8]
 8007d0c:	8181      	strh	r1, [r0, #12]
 8007d0e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007d10:	81c2      	strh	r2, [r0, #14]
 8007d12:	6183      	str	r3, [r0, #24]
 8007d14:	4619      	mov	r1, r3
 8007d16:	2208      	movs	r2, #8
 8007d18:	305c      	adds	r0, #92	@ 0x5c
 8007d1a:	f000 f921 	bl	8007f60 <memset>
 8007d1e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d54 <std+0x58>)
 8007d20:	6263      	str	r3, [r4, #36]	@ 0x24
 8007d22:	4b0d      	ldr	r3, [pc, #52]	@ (8007d58 <std+0x5c>)
 8007d24:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007d26:	4b0d      	ldr	r3, [pc, #52]	@ (8007d5c <std+0x60>)
 8007d28:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8007d60 <std+0x64>)
 8007d2c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8007d64 <std+0x68>)
 8007d30:	6224      	str	r4, [r4, #32]
 8007d32:	429c      	cmp	r4, r3
 8007d34:	d006      	beq.n	8007d44 <std+0x48>
 8007d36:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007d3a:	4294      	cmp	r4, r2
 8007d3c:	d002      	beq.n	8007d44 <std+0x48>
 8007d3e:	33d0      	adds	r3, #208	@ 0xd0
 8007d40:	429c      	cmp	r4, r3
 8007d42:	d105      	bne.n	8007d50 <std+0x54>
 8007d44:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d4c:	f000 b93a 	b.w	8007fc4 <__retarget_lock_init_recursive>
 8007d50:	bd10      	pop	{r4, pc}
 8007d52:	bf00      	nop
 8007d54:	0800881d 	.word	0x0800881d
 8007d58:	0800883f 	.word	0x0800883f
 8007d5c:	08008877 	.word	0x08008877
 8007d60:	0800889b 	.word	0x0800889b
 8007d64:	20025d84 	.word	0x20025d84

08007d68 <stdio_exit_handler>:
 8007d68:	4a02      	ldr	r2, [pc, #8]	@ (8007d74 <stdio_exit_handler+0xc>)
 8007d6a:	4903      	ldr	r1, [pc, #12]	@ (8007d78 <stdio_exit_handler+0x10>)
 8007d6c:	4803      	ldr	r0, [pc, #12]	@ (8007d7c <stdio_exit_handler+0x14>)
 8007d6e:	f000 b869 	b.w	8007e44 <_fwalk_sglue>
 8007d72:	bf00      	nop
 8007d74:	20000024 	.word	0x20000024
 8007d78:	080087b5 	.word	0x080087b5
 8007d7c:	20000034 	.word	0x20000034

08007d80 <cleanup_stdio>:
 8007d80:	6841      	ldr	r1, [r0, #4]
 8007d82:	4b0c      	ldr	r3, [pc, #48]	@ (8007db4 <cleanup_stdio+0x34>)
 8007d84:	4299      	cmp	r1, r3
 8007d86:	b510      	push	{r4, lr}
 8007d88:	4604      	mov	r4, r0
 8007d8a:	d001      	beq.n	8007d90 <cleanup_stdio+0x10>
 8007d8c:	f000 fd12 	bl	80087b4 <_fflush_r>
 8007d90:	68a1      	ldr	r1, [r4, #8]
 8007d92:	4b09      	ldr	r3, [pc, #36]	@ (8007db8 <cleanup_stdio+0x38>)
 8007d94:	4299      	cmp	r1, r3
 8007d96:	d002      	beq.n	8007d9e <cleanup_stdio+0x1e>
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f000 fd0b 	bl	80087b4 <_fflush_r>
 8007d9e:	68e1      	ldr	r1, [r4, #12]
 8007da0:	4b06      	ldr	r3, [pc, #24]	@ (8007dbc <cleanup_stdio+0x3c>)
 8007da2:	4299      	cmp	r1, r3
 8007da4:	d004      	beq.n	8007db0 <cleanup_stdio+0x30>
 8007da6:	4620      	mov	r0, r4
 8007da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dac:	f000 bd02 	b.w	80087b4 <_fflush_r>
 8007db0:	bd10      	pop	{r4, pc}
 8007db2:	bf00      	nop
 8007db4:	20025d84 	.word	0x20025d84
 8007db8:	20025dec 	.word	0x20025dec
 8007dbc:	20025e54 	.word	0x20025e54

08007dc0 <global_stdio_init.part.0>:
 8007dc0:	b510      	push	{r4, lr}
 8007dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8007df0 <global_stdio_init.part.0+0x30>)
 8007dc4:	4c0b      	ldr	r4, [pc, #44]	@ (8007df4 <global_stdio_init.part.0+0x34>)
 8007dc6:	4a0c      	ldr	r2, [pc, #48]	@ (8007df8 <global_stdio_init.part.0+0x38>)
 8007dc8:	601a      	str	r2, [r3, #0]
 8007dca:	4620      	mov	r0, r4
 8007dcc:	2200      	movs	r2, #0
 8007dce:	2104      	movs	r1, #4
 8007dd0:	f7ff ff94 	bl	8007cfc <std>
 8007dd4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007dd8:	2201      	movs	r2, #1
 8007dda:	2109      	movs	r1, #9
 8007ddc:	f7ff ff8e 	bl	8007cfc <std>
 8007de0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007de4:	2202      	movs	r2, #2
 8007de6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dea:	2112      	movs	r1, #18
 8007dec:	f7ff bf86 	b.w	8007cfc <std>
 8007df0:	20025ebc 	.word	0x20025ebc
 8007df4:	20025d84 	.word	0x20025d84
 8007df8:	08007d69 	.word	0x08007d69

08007dfc <__sfp_lock_acquire>:
 8007dfc:	4801      	ldr	r0, [pc, #4]	@ (8007e04 <__sfp_lock_acquire+0x8>)
 8007dfe:	f000 b8e2 	b.w	8007fc6 <__retarget_lock_acquire_recursive>
 8007e02:	bf00      	nop
 8007e04:	20025ec1 	.word	0x20025ec1

08007e08 <__sfp_lock_release>:
 8007e08:	4801      	ldr	r0, [pc, #4]	@ (8007e10 <__sfp_lock_release+0x8>)
 8007e0a:	f000 b8dd 	b.w	8007fc8 <__retarget_lock_release_recursive>
 8007e0e:	bf00      	nop
 8007e10:	20025ec1 	.word	0x20025ec1

08007e14 <__sinit>:
 8007e14:	b510      	push	{r4, lr}
 8007e16:	4604      	mov	r4, r0
 8007e18:	f7ff fff0 	bl	8007dfc <__sfp_lock_acquire>
 8007e1c:	6a23      	ldr	r3, [r4, #32]
 8007e1e:	b11b      	cbz	r3, 8007e28 <__sinit+0x14>
 8007e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e24:	f7ff bff0 	b.w	8007e08 <__sfp_lock_release>
 8007e28:	4b04      	ldr	r3, [pc, #16]	@ (8007e3c <__sinit+0x28>)
 8007e2a:	6223      	str	r3, [r4, #32]
 8007e2c:	4b04      	ldr	r3, [pc, #16]	@ (8007e40 <__sinit+0x2c>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d1f5      	bne.n	8007e20 <__sinit+0xc>
 8007e34:	f7ff ffc4 	bl	8007dc0 <global_stdio_init.part.0>
 8007e38:	e7f2      	b.n	8007e20 <__sinit+0xc>
 8007e3a:	bf00      	nop
 8007e3c:	08007d81 	.word	0x08007d81
 8007e40:	20025ebc 	.word	0x20025ebc

08007e44 <_fwalk_sglue>:
 8007e44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e48:	4607      	mov	r7, r0
 8007e4a:	4688      	mov	r8, r1
 8007e4c:	4614      	mov	r4, r2
 8007e4e:	2600      	movs	r6, #0
 8007e50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e54:	f1b9 0901 	subs.w	r9, r9, #1
 8007e58:	d505      	bpl.n	8007e66 <_fwalk_sglue+0x22>
 8007e5a:	6824      	ldr	r4, [r4, #0]
 8007e5c:	2c00      	cmp	r4, #0
 8007e5e:	d1f7      	bne.n	8007e50 <_fwalk_sglue+0xc>
 8007e60:	4630      	mov	r0, r6
 8007e62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e66:	89ab      	ldrh	r3, [r5, #12]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d907      	bls.n	8007e7c <_fwalk_sglue+0x38>
 8007e6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e70:	3301      	adds	r3, #1
 8007e72:	d003      	beq.n	8007e7c <_fwalk_sglue+0x38>
 8007e74:	4629      	mov	r1, r5
 8007e76:	4638      	mov	r0, r7
 8007e78:	47c0      	blx	r8
 8007e7a:	4306      	orrs	r6, r0
 8007e7c:	3568      	adds	r5, #104	@ 0x68
 8007e7e:	e7e9      	b.n	8007e54 <_fwalk_sglue+0x10>

08007e80 <iprintf>:
 8007e80:	b40f      	push	{r0, r1, r2, r3}
 8007e82:	b507      	push	{r0, r1, r2, lr}
 8007e84:	4906      	ldr	r1, [pc, #24]	@ (8007ea0 <iprintf+0x20>)
 8007e86:	ab04      	add	r3, sp, #16
 8007e88:	6808      	ldr	r0, [r1, #0]
 8007e8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e8e:	6881      	ldr	r1, [r0, #8]
 8007e90:	9301      	str	r3, [sp, #4]
 8007e92:	f000 f8c3 	bl	800801c <_vfiprintf_r>
 8007e96:	b003      	add	sp, #12
 8007e98:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e9c:	b004      	add	sp, #16
 8007e9e:	4770      	bx	lr
 8007ea0:	20000030 	.word	0x20000030

08007ea4 <_puts_r>:
 8007ea4:	6a03      	ldr	r3, [r0, #32]
 8007ea6:	b570      	push	{r4, r5, r6, lr}
 8007ea8:	6884      	ldr	r4, [r0, #8]
 8007eaa:	4605      	mov	r5, r0
 8007eac:	460e      	mov	r6, r1
 8007eae:	b90b      	cbnz	r3, 8007eb4 <_puts_r+0x10>
 8007eb0:	f7ff ffb0 	bl	8007e14 <__sinit>
 8007eb4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007eb6:	07db      	lsls	r3, r3, #31
 8007eb8:	d405      	bmi.n	8007ec6 <_puts_r+0x22>
 8007eba:	89a3      	ldrh	r3, [r4, #12]
 8007ebc:	0598      	lsls	r0, r3, #22
 8007ebe:	d402      	bmi.n	8007ec6 <_puts_r+0x22>
 8007ec0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ec2:	f000 f880 	bl	8007fc6 <__retarget_lock_acquire_recursive>
 8007ec6:	89a3      	ldrh	r3, [r4, #12]
 8007ec8:	0719      	lsls	r1, r3, #28
 8007eca:	d502      	bpl.n	8007ed2 <_puts_r+0x2e>
 8007ecc:	6923      	ldr	r3, [r4, #16]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d135      	bne.n	8007f3e <_puts_r+0x9a>
 8007ed2:	4621      	mov	r1, r4
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	f000 fd23 	bl	8008920 <__swsetup_r>
 8007eda:	b380      	cbz	r0, 8007f3e <_puts_r+0x9a>
 8007edc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007ee0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ee2:	07da      	lsls	r2, r3, #31
 8007ee4:	d405      	bmi.n	8007ef2 <_puts_r+0x4e>
 8007ee6:	89a3      	ldrh	r3, [r4, #12]
 8007ee8:	059b      	lsls	r3, r3, #22
 8007eea:	d402      	bmi.n	8007ef2 <_puts_r+0x4e>
 8007eec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007eee:	f000 f86b 	bl	8007fc8 <__retarget_lock_release_recursive>
 8007ef2:	4628      	mov	r0, r5
 8007ef4:	bd70      	pop	{r4, r5, r6, pc}
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	da04      	bge.n	8007f04 <_puts_r+0x60>
 8007efa:	69a2      	ldr	r2, [r4, #24]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	dc17      	bgt.n	8007f30 <_puts_r+0x8c>
 8007f00:	290a      	cmp	r1, #10
 8007f02:	d015      	beq.n	8007f30 <_puts_r+0x8c>
 8007f04:	6823      	ldr	r3, [r4, #0]
 8007f06:	1c5a      	adds	r2, r3, #1
 8007f08:	6022      	str	r2, [r4, #0]
 8007f0a:	7019      	strb	r1, [r3, #0]
 8007f0c:	68a3      	ldr	r3, [r4, #8]
 8007f0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007f12:	3b01      	subs	r3, #1
 8007f14:	60a3      	str	r3, [r4, #8]
 8007f16:	2900      	cmp	r1, #0
 8007f18:	d1ed      	bne.n	8007ef6 <_puts_r+0x52>
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	da11      	bge.n	8007f42 <_puts_r+0x9e>
 8007f1e:	4622      	mov	r2, r4
 8007f20:	210a      	movs	r1, #10
 8007f22:	4628      	mov	r0, r5
 8007f24:	f000 fcbd 	bl	80088a2 <__swbuf_r>
 8007f28:	3001      	adds	r0, #1
 8007f2a:	d0d7      	beq.n	8007edc <_puts_r+0x38>
 8007f2c:	250a      	movs	r5, #10
 8007f2e:	e7d7      	b.n	8007ee0 <_puts_r+0x3c>
 8007f30:	4622      	mov	r2, r4
 8007f32:	4628      	mov	r0, r5
 8007f34:	f000 fcb5 	bl	80088a2 <__swbuf_r>
 8007f38:	3001      	adds	r0, #1
 8007f3a:	d1e7      	bne.n	8007f0c <_puts_r+0x68>
 8007f3c:	e7ce      	b.n	8007edc <_puts_r+0x38>
 8007f3e:	3e01      	subs	r6, #1
 8007f40:	e7e4      	b.n	8007f0c <_puts_r+0x68>
 8007f42:	6823      	ldr	r3, [r4, #0]
 8007f44:	1c5a      	adds	r2, r3, #1
 8007f46:	6022      	str	r2, [r4, #0]
 8007f48:	220a      	movs	r2, #10
 8007f4a:	701a      	strb	r2, [r3, #0]
 8007f4c:	e7ee      	b.n	8007f2c <_puts_r+0x88>
	...

08007f50 <puts>:
 8007f50:	4b02      	ldr	r3, [pc, #8]	@ (8007f5c <puts+0xc>)
 8007f52:	4601      	mov	r1, r0
 8007f54:	6818      	ldr	r0, [r3, #0]
 8007f56:	f7ff bfa5 	b.w	8007ea4 <_puts_r>
 8007f5a:	bf00      	nop
 8007f5c:	20000030 	.word	0x20000030

08007f60 <memset>:
 8007f60:	4402      	add	r2, r0
 8007f62:	4603      	mov	r3, r0
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d100      	bne.n	8007f6a <memset+0xa>
 8007f68:	4770      	bx	lr
 8007f6a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f6e:	e7f9      	b.n	8007f64 <memset+0x4>

08007f70 <__errno>:
 8007f70:	4b01      	ldr	r3, [pc, #4]	@ (8007f78 <__errno+0x8>)
 8007f72:	6818      	ldr	r0, [r3, #0]
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop
 8007f78:	20000030 	.word	0x20000030

08007f7c <__libc_init_array>:
 8007f7c:	b570      	push	{r4, r5, r6, lr}
 8007f7e:	4d0d      	ldr	r5, [pc, #52]	@ (8007fb4 <__libc_init_array+0x38>)
 8007f80:	4c0d      	ldr	r4, [pc, #52]	@ (8007fb8 <__libc_init_array+0x3c>)
 8007f82:	1b64      	subs	r4, r4, r5
 8007f84:	10a4      	asrs	r4, r4, #2
 8007f86:	2600      	movs	r6, #0
 8007f88:	42a6      	cmp	r6, r4
 8007f8a:	d109      	bne.n	8007fa0 <__libc_init_array+0x24>
 8007f8c:	4d0b      	ldr	r5, [pc, #44]	@ (8007fbc <__libc_init_array+0x40>)
 8007f8e:	4c0c      	ldr	r4, [pc, #48]	@ (8007fc0 <__libc_init_array+0x44>)
 8007f90:	f000 fe40 	bl	8008c14 <_init>
 8007f94:	1b64      	subs	r4, r4, r5
 8007f96:	10a4      	asrs	r4, r4, #2
 8007f98:	2600      	movs	r6, #0
 8007f9a:	42a6      	cmp	r6, r4
 8007f9c:	d105      	bne.n	8007faa <__libc_init_array+0x2e>
 8007f9e:	bd70      	pop	{r4, r5, r6, pc}
 8007fa0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fa4:	4798      	blx	r3
 8007fa6:	3601      	adds	r6, #1
 8007fa8:	e7ee      	b.n	8007f88 <__libc_init_array+0xc>
 8007faa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fae:	4798      	blx	r3
 8007fb0:	3601      	adds	r6, #1
 8007fb2:	e7f2      	b.n	8007f9a <__libc_init_array+0x1e>
 8007fb4:	08009f10 	.word	0x08009f10
 8007fb8:	08009f10 	.word	0x08009f10
 8007fbc:	08009f10 	.word	0x08009f10
 8007fc0:	08009f14 	.word	0x08009f14

08007fc4 <__retarget_lock_init_recursive>:
 8007fc4:	4770      	bx	lr

08007fc6 <__retarget_lock_acquire_recursive>:
 8007fc6:	4770      	bx	lr

08007fc8 <__retarget_lock_release_recursive>:
 8007fc8:	4770      	bx	lr

08007fca <__sfputc_r>:
 8007fca:	6893      	ldr	r3, [r2, #8]
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	b410      	push	{r4}
 8007fd2:	6093      	str	r3, [r2, #8]
 8007fd4:	da08      	bge.n	8007fe8 <__sfputc_r+0x1e>
 8007fd6:	6994      	ldr	r4, [r2, #24]
 8007fd8:	42a3      	cmp	r3, r4
 8007fda:	db01      	blt.n	8007fe0 <__sfputc_r+0x16>
 8007fdc:	290a      	cmp	r1, #10
 8007fde:	d103      	bne.n	8007fe8 <__sfputc_r+0x1e>
 8007fe0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007fe4:	f000 bc5d 	b.w	80088a2 <__swbuf_r>
 8007fe8:	6813      	ldr	r3, [r2, #0]
 8007fea:	1c58      	adds	r0, r3, #1
 8007fec:	6010      	str	r0, [r2, #0]
 8007fee:	7019      	strb	r1, [r3, #0]
 8007ff0:	4608      	mov	r0, r1
 8007ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <__sfputs_r>:
 8007ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ffa:	4606      	mov	r6, r0
 8007ffc:	460f      	mov	r7, r1
 8007ffe:	4614      	mov	r4, r2
 8008000:	18d5      	adds	r5, r2, r3
 8008002:	42ac      	cmp	r4, r5
 8008004:	d101      	bne.n	800800a <__sfputs_r+0x12>
 8008006:	2000      	movs	r0, #0
 8008008:	e007      	b.n	800801a <__sfputs_r+0x22>
 800800a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800800e:	463a      	mov	r2, r7
 8008010:	4630      	mov	r0, r6
 8008012:	f7ff ffda 	bl	8007fca <__sfputc_r>
 8008016:	1c43      	adds	r3, r0, #1
 8008018:	d1f3      	bne.n	8008002 <__sfputs_r+0xa>
 800801a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800801c <_vfiprintf_r>:
 800801c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008020:	460d      	mov	r5, r1
 8008022:	b09d      	sub	sp, #116	@ 0x74
 8008024:	4614      	mov	r4, r2
 8008026:	4698      	mov	r8, r3
 8008028:	4606      	mov	r6, r0
 800802a:	b118      	cbz	r0, 8008034 <_vfiprintf_r+0x18>
 800802c:	6a03      	ldr	r3, [r0, #32]
 800802e:	b90b      	cbnz	r3, 8008034 <_vfiprintf_r+0x18>
 8008030:	f7ff fef0 	bl	8007e14 <__sinit>
 8008034:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008036:	07d9      	lsls	r1, r3, #31
 8008038:	d405      	bmi.n	8008046 <_vfiprintf_r+0x2a>
 800803a:	89ab      	ldrh	r3, [r5, #12]
 800803c:	059a      	lsls	r2, r3, #22
 800803e:	d402      	bmi.n	8008046 <_vfiprintf_r+0x2a>
 8008040:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008042:	f7ff ffc0 	bl	8007fc6 <__retarget_lock_acquire_recursive>
 8008046:	89ab      	ldrh	r3, [r5, #12]
 8008048:	071b      	lsls	r3, r3, #28
 800804a:	d501      	bpl.n	8008050 <_vfiprintf_r+0x34>
 800804c:	692b      	ldr	r3, [r5, #16]
 800804e:	b99b      	cbnz	r3, 8008078 <_vfiprintf_r+0x5c>
 8008050:	4629      	mov	r1, r5
 8008052:	4630      	mov	r0, r6
 8008054:	f000 fc64 	bl	8008920 <__swsetup_r>
 8008058:	b170      	cbz	r0, 8008078 <_vfiprintf_r+0x5c>
 800805a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800805c:	07dc      	lsls	r4, r3, #31
 800805e:	d504      	bpl.n	800806a <_vfiprintf_r+0x4e>
 8008060:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008064:	b01d      	add	sp, #116	@ 0x74
 8008066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800806a:	89ab      	ldrh	r3, [r5, #12]
 800806c:	0598      	lsls	r0, r3, #22
 800806e:	d4f7      	bmi.n	8008060 <_vfiprintf_r+0x44>
 8008070:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008072:	f7ff ffa9 	bl	8007fc8 <__retarget_lock_release_recursive>
 8008076:	e7f3      	b.n	8008060 <_vfiprintf_r+0x44>
 8008078:	2300      	movs	r3, #0
 800807a:	9309      	str	r3, [sp, #36]	@ 0x24
 800807c:	2320      	movs	r3, #32
 800807e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008082:	f8cd 800c 	str.w	r8, [sp, #12]
 8008086:	2330      	movs	r3, #48	@ 0x30
 8008088:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008238 <_vfiprintf_r+0x21c>
 800808c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008090:	f04f 0901 	mov.w	r9, #1
 8008094:	4623      	mov	r3, r4
 8008096:	469a      	mov	sl, r3
 8008098:	f813 2b01 	ldrb.w	r2, [r3], #1
 800809c:	b10a      	cbz	r2, 80080a2 <_vfiprintf_r+0x86>
 800809e:	2a25      	cmp	r2, #37	@ 0x25
 80080a0:	d1f9      	bne.n	8008096 <_vfiprintf_r+0x7a>
 80080a2:	ebba 0b04 	subs.w	fp, sl, r4
 80080a6:	d00b      	beq.n	80080c0 <_vfiprintf_r+0xa4>
 80080a8:	465b      	mov	r3, fp
 80080aa:	4622      	mov	r2, r4
 80080ac:	4629      	mov	r1, r5
 80080ae:	4630      	mov	r0, r6
 80080b0:	f7ff ffa2 	bl	8007ff8 <__sfputs_r>
 80080b4:	3001      	adds	r0, #1
 80080b6:	f000 80a7 	beq.w	8008208 <_vfiprintf_r+0x1ec>
 80080ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080bc:	445a      	add	r2, fp
 80080be:	9209      	str	r2, [sp, #36]	@ 0x24
 80080c0:	f89a 3000 	ldrb.w	r3, [sl]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f000 809f 	beq.w	8008208 <_vfiprintf_r+0x1ec>
 80080ca:	2300      	movs	r3, #0
 80080cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80080d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080d4:	f10a 0a01 	add.w	sl, sl, #1
 80080d8:	9304      	str	r3, [sp, #16]
 80080da:	9307      	str	r3, [sp, #28]
 80080dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080e0:	931a      	str	r3, [sp, #104]	@ 0x68
 80080e2:	4654      	mov	r4, sl
 80080e4:	2205      	movs	r2, #5
 80080e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ea:	4853      	ldr	r0, [pc, #332]	@ (8008238 <_vfiprintf_r+0x21c>)
 80080ec:	f7f8 f888 	bl	8000200 <memchr>
 80080f0:	9a04      	ldr	r2, [sp, #16]
 80080f2:	b9d8      	cbnz	r0, 800812c <_vfiprintf_r+0x110>
 80080f4:	06d1      	lsls	r1, r2, #27
 80080f6:	bf44      	itt	mi
 80080f8:	2320      	movmi	r3, #32
 80080fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080fe:	0713      	lsls	r3, r2, #28
 8008100:	bf44      	itt	mi
 8008102:	232b      	movmi	r3, #43	@ 0x2b
 8008104:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008108:	f89a 3000 	ldrb.w	r3, [sl]
 800810c:	2b2a      	cmp	r3, #42	@ 0x2a
 800810e:	d015      	beq.n	800813c <_vfiprintf_r+0x120>
 8008110:	9a07      	ldr	r2, [sp, #28]
 8008112:	4654      	mov	r4, sl
 8008114:	2000      	movs	r0, #0
 8008116:	f04f 0c0a 	mov.w	ip, #10
 800811a:	4621      	mov	r1, r4
 800811c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008120:	3b30      	subs	r3, #48	@ 0x30
 8008122:	2b09      	cmp	r3, #9
 8008124:	d94b      	bls.n	80081be <_vfiprintf_r+0x1a2>
 8008126:	b1b0      	cbz	r0, 8008156 <_vfiprintf_r+0x13a>
 8008128:	9207      	str	r2, [sp, #28]
 800812a:	e014      	b.n	8008156 <_vfiprintf_r+0x13a>
 800812c:	eba0 0308 	sub.w	r3, r0, r8
 8008130:	fa09 f303 	lsl.w	r3, r9, r3
 8008134:	4313      	orrs	r3, r2
 8008136:	9304      	str	r3, [sp, #16]
 8008138:	46a2      	mov	sl, r4
 800813a:	e7d2      	b.n	80080e2 <_vfiprintf_r+0xc6>
 800813c:	9b03      	ldr	r3, [sp, #12]
 800813e:	1d19      	adds	r1, r3, #4
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	9103      	str	r1, [sp, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	bfbb      	ittet	lt
 8008148:	425b      	neglt	r3, r3
 800814a:	f042 0202 	orrlt.w	r2, r2, #2
 800814e:	9307      	strge	r3, [sp, #28]
 8008150:	9307      	strlt	r3, [sp, #28]
 8008152:	bfb8      	it	lt
 8008154:	9204      	strlt	r2, [sp, #16]
 8008156:	7823      	ldrb	r3, [r4, #0]
 8008158:	2b2e      	cmp	r3, #46	@ 0x2e
 800815a:	d10a      	bne.n	8008172 <_vfiprintf_r+0x156>
 800815c:	7863      	ldrb	r3, [r4, #1]
 800815e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008160:	d132      	bne.n	80081c8 <_vfiprintf_r+0x1ac>
 8008162:	9b03      	ldr	r3, [sp, #12]
 8008164:	1d1a      	adds	r2, r3, #4
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	9203      	str	r2, [sp, #12]
 800816a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800816e:	3402      	adds	r4, #2
 8008170:	9305      	str	r3, [sp, #20]
 8008172:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008248 <_vfiprintf_r+0x22c>
 8008176:	7821      	ldrb	r1, [r4, #0]
 8008178:	2203      	movs	r2, #3
 800817a:	4650      	mov	r0, sl
 800817c:	f7f8 f840 	bl	8000200 <memchr>
 8008180:	b138      	cbz	r0, 8008192 <_vfiprintf_r+0x176>
 8008182:	9b04      	ldr	r3, [sp, #16]
 8008184:	eba0 000a 	sub.w	r0, r0, sl
 8008188:	2240      	movs	r2, #64	@ 0x40
 800818a:	4082      	lsls	r2, r0
 800818c:	4313      	orrs	r3, r2
 800818e:	3401      	adds	r4, #1
 8008190:	9304      	str	r3, [sp, #16]
 8008192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008196:	4829      	ldr	r0, [pc, #164]	@ (800823c <_vfiprintf_r+0x220>)
 8008198:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800819c:	2206      	movs	r2, #6
 800819e:	f7f8 f82f 	bl	8000200 <memchr>
 80081a2:	2800      	cmp	r0, #0
 80081a4:	d03f      	beq.n	8008226 <_vfiprintf_r+0x20a>
 80081a6:	4b26      	ldr	r3, [pc, #152]	@ (8008240 <_vfiprintf_r+0x224>)
 80081a8:	bb1b      	cbnz	r3, 80081f2 <_vfiprintf_r+0x1d6>
 80081aa:	9b03      	ldr	r3, [sp, #12]
 80081ac:	3307      	adds	r3, #7
 80081ae:	f023 0307 	bic.w	r3, r3, #7
 80081b2:	3308      	adds	r3, #8
 80081b4:	9303      	str	r3, [sp, #12]
 80081b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081b8:	443b      	add	r3, r7
 80081ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80081bc:	e76a      	b.n	8008094 <_vfiprintf_r+0x78>
 80081be:	fb0c 3202 	mla	r2, ip, r2, r3
 80081c2:	460c      	mov	r4, r1
 80081c4:	2001      	movs	r0, #1
 80081c6:	e7a8      	b.n	800811a <_vfiprintf_r+0xfe>
 80081c8:	2300      	movs	r3, #0
 80081ca:	3401      	adds	r4, #1
 80081cc:	9305      	str	r3, [sp, #20]
 80081ce:	4619      	mov	r1, r3
 80081d0:	f04f 0c0a 	mov.w	ip, #10
 80081d4:	4620      	mov	r0, r4
 80081d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081da:	3a30      	subs	r2, #48	@ 0x30
 80081dc:	2a09      	cmp	r2, #9
 80081de:	d903      	bls.n	80081e8 <_vfiprintf_r+0x1cc>
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d0c6      	beq.n	8008172 <_vfiprintf_r+0x156>
 80081e4:	9105      	str	r1, [sp, #20]
 80081e6:	e7c4      	b.n	8008172 <_vfiprintf_r+0x156>
 80081e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80081ec:	4604      	mov	r4, r0
 80081ee:	2301      	movs	r3, #1
 80081f0:	e7f0      	b.n	80081d4 <_vfiprintf_r+0x1b8>
 80081f2:	ab03      	add	r3, sp, #12
 80081f4:	9300      	str	r3, [sp, #0]
 80081f6:	462a      	mov	r2, r5
 80081f8:	4b12      	ldr	r3, [pc, #72]	@ (8008244 <_vfiprintf_r+0x228>)
 80081fa:	a904      	add	r1, sp, #16
 80081fc:	4630      	mov	r0, r6
 80081fe:	f3af 8000 	nop.w
 8008202:	4607      	mov	r7, r0
 8008204:	1c78      	adds	r0, r7, #1
 8008206:	d1d6      	bne.n	80081b6 <_vfiprintf_r+0x19a>
 8008208:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800820a:	07d9      	lsls	r1, r3, #31
 800820c:	d405      	bmi.n	800821a <_vfiprintf_r+0x1fe>
 800820e:	89ab      	ldrh	r3, [r5, #12]
 8008210:	059a      	lsls	r2, r3, #22
 8008212:	d402      	bmi.n	800821a <_vfiprintf_r+0x1fe>
 8008214:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008216:	f7ff fed7 	bl	8007fc8 <__retarget_lock_release_recursive>
 800821a:	89ab      	ldrh	r3, [r5, #12]
 800821c:	065b      	lsls	r3, r3, #25
 800821e:	f53f af1f 	bmi.w	8008060 <_vfiprintf_r+0x44>
 8008222:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008224:	e71e      	b.n	8008064 <_vfiprintf_r+0x48>
 8008226:	ab03      	add	r3, sp, #12
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	462a      	mov	r2, r5
 800822c:	4b05      	ldr	r3, [pc, #20]	@ (8008244 <_vfiprintf_r+0x228>)
 800822e:	a904      	add	r1, sp, #16
 8008230:	4630      	mov	r0, r6
 8008232:	f000 f91b 	bl	800846c <_printf_i>
 8008236:	e7e4      	b.n	8008202 <_vfiprintf_r+0x1e6>
 8008238:	08009ed2 	.word	0x08009ed2
 800823c:	08009edc 	.word	0x08009edc
 8008240:	00000000 	.word	0x00000000
 8008244:	08007ff9 	.word	0x08007ff9
 8008248:	08009ed8 	.word	0x08009ed8

0800824c <sbrk_aligned>:
 800824c:	b570      	push	{r4, r5, r6, lr}
 800824e:	4e0f      	ldr	r6, [pc, #60]	@ (800828c <sbrk_aligned+0x40>)
 8008250:	460c      	mov	r4, r1
 8008252:	6831      	ldr	r1, [r6, #0]
 8008254:	4605      	mov	r5, r0
 8008256:	b911      	cbnz	r1, 800825e <sbrk_aligned+0x12>
 8008258:	f000 fc70 	bl	8008b3c <_sbrk_r>
 800825c:	6030      	str	r0, [r6, #0]
 800825e:	4621      	mov	r1, r4
 8008260:	4628      	mov	r0, r5
 8008262:	f000 fc6b 	bl	8008b3c <_sbrk_r>
 8008266:	1c43      	adds	r3, r0, #1
 8008268:	d103      	bne.n	8008272 <sbrk_aligned+0x26>
 800826a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800826e:	4620      	mov	r0, r4
 8008270:	bd70      	pop	{r4, r5, r6, pc}
 8008272:	1cc4      	adds	r4, r0, #3
 8008274:	f024 0403 	bic.w	r4, r4, #3
 8008278:	42a0      	cmp	r0, r4
 800827a:	d0f8      	beq.n	800826e <sbrk_aligned+0x22>
 800827c:	1a21      	subs	r1, r4, r0
 800827e:	4628      	mov	r0, r5
 8008280:	f000 fc5c 	bl	8008b3c <_sbrk_r>
 8008284:	3001      	adds	r0, #1
 8008286:	d1f2      	bne.n	800826e <sbrk_aligned+0x22>
 8008288:	e7ef      	b.n	800826a <sbrk_aligned+0x1e>
 800828a:	bf00      	nop
 800828c:	20025ec4 	.word	0x20025ec4

08008290 <_malloc_r>:
 8008290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008294:	1ccd      	adds	r5, r1, #3
 8008296:	f025 0503 	bic.w	r5, r5, #3
 800829a:	3508      	adds	r5, #8
 800829c:	2d0c      	cmp	r5, #12
 800829e:	bf38      	it	cc
 80082a0:	250c      	movcc	r5, #12
 80082a2:	2d00      	cmp	r5, #0
 80082a4:	4606      	mov	r6, r0
 80082a6:	db01      	blt.n	80082ac <_malloc_r+0x1c>
 80082a8:	42a9      	cmp	r1, r5
 80082aa:	d904      	bls.n	80082b6 <_malloc_r+0x26>
 80082ac:	230c      	movs	r3, #12
 80082ae:	6033      	str	r3, [r6, #0]
 80082b0:	2000      	movs	r0, #0
 80082b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800838c <_malloc_r+0xfc>
 80082ba:	f000 faa3 	bl	8008804 <__malloc_lock>
 80082be:	f8d8 3000 	ldr.w	r3, [r8]
 80082c2:	461c      	mov	r4, r3
 80082c4:	bb44      	cbnz	r4, 8008318 <_malloc_r+0x88>
 80082c6:	4629      	mov	r1, r5
 80082c8:	4630      	mov	r0, r6
 80082ca:	f7ff ffbf 	bl	800824c <sbrk_aligned>
 80082ce:	1c43      	adds	r3, r0, #1
 80082d0:	4604      	mov	r4, r0
 80082d2:	d158      	bne.n	8008386 <_malloc_r+0xf6>
 80082d4:	f8d8 4000 	ldr.w	r4, [r8]
 80082d8:	4627      	mov	r7, r4
 80082da:	2f00      	cmp	r7, #0
 80082dc:	d143      	bne.n	8008366 <_malloc_r+0xd6>
 80082de:	2c00      	cmp	r4, #0
 80082e0:	d04b      	beq.n	800837a <_malloc_r+0xea>
 80082e2:	6823      	ldr	r3, [r4, #0]
 80082e4:	4639      	mov	r1, r7
 80082e6:	4630      	mov	r0, r6
 80082e8:	eb04 0903 	add.w	r9, r4, r3
 80082ec:	f000 fc26 	bl	8008b3c <_sbrk_r>
 80082f0:	4581      	cmp	r9, r0
 80082f2:	d142      	bne.n	800837a <_malloc_r+0xea>
 80082f4:	6821      	ldr	r1, [r4, #0]
 80082f6:	1a6d      	subs	r5, r5, r1
 80082f8:	4629      	mov	r1, r5
 80082fa:	4630      	mov	r0, r6
 80082fc:	f7ff ffa6 	bl	800824c <sbrk_aligned>
 8008300:	3001      	adds	r0, #1
 8008302:	d03a      	beq.n	800837a <_malloc_r+0xea>
 8008304:	6823      	ldr	r3, [r4, #0]
 8008306:	442b      	add	r3, r5
 8008308:	6023      	str	r3, [r4, #0]
 800830a:	f8d8 3000 	ldr.w	r3, [r8]
 800830e:	685a      	ldr	r2, [r3, #4]
 8008310:	bb62      	cbnz	r2, 800836c <_malloc_r+0xdc>
 8008312:	f8c8 7000 	str.w	r7, [r8]
 8008316:	e00f      	b.n	8008338 <_malloc_r+0xa8>
 8008318:	6822      	ldr	r2, [r4, #0]
 800831a:	1b52      	subs	r2, r2, r5
 800831c:	d420      	bmi.n	8008360 <_malloc_r+0xd0>
 800831e:	2a0b      	cmp	r2, #11
 8008320:	d917      	bls.n	8008352 <_malloc_r+0xc2>
 8008322:	1961      	adds	r1, r4, r5
 8008324:	42a3      	cmp	r3, r4
 8008326:	6025      	str	r5, [r4, #0]
 8008328:	bf18      	it	ne
 800832a:	6059      	strne	r1, [r3, #4]
 800832c:	6863      	ldr	r3, [r4, #4]
 800832e:	bf08      	it	eq
 8008330:	f8c8 1000 	streq.w	r1, [r8]
 8008334:	5162      	str	r2, [r4, r5]
 8008336:	604b      	str	r3, [r1, #4]
 8008338:	4630      	mov	r0, r6
 800833a:	f000 fa69 	bl	8008810 <__malloc_unlock>
 800833e:	f104 000b 	add.w	r0, r4, #11
 8008342:	1d23      	adds	r3, r4, #4
 8008344:	f020 0007 	bic.w	r0, r0, #7
 8008348:	1ac2      	subs	r2, r0, r3
 800834a:	bf1c      	itt	ne
 800834c:	1a1b      	subne	r3, r3, r0
 800834e:	50a3      	strne	r3, [r4, r2]
 8008350:	e7af      	b.n	80082b2 <_malloc_r+0x22>
 8008352:	6862      	ldr	r2, [r4, #4]
 8008354:	42a3      	cmp	r3, r4
 8008356:	bf0c      	ite	eq
 8008358:	f8c8 2000 	streq.w	r2, [r8]
 800835c:	605a      	strne	r2, [r3, #4]
 800835e:	e7eb      	b.n	8008338 <_malloc_r+0xa8>
 8008360:	4623      	mov	r3, r4
 8008362:	6864      	ldr	r4, [r4, #4]
 8008364:	e7ae      	b.n	80082c4 <_malloc_r+0x34>
 8008366:	463c      	mov	r4, r7
 8008368:	687f      	ldr	r7, [r7, #4]
 800836a:	e7b6      	b.n	80082da <_malloc_r+0x4a>
 800836c:	461a      	mov	r2, r3
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	42a3      	cmp	r3, r4
 8008372:	d1fb      	bne.n	800836c <_malloc_r+0xdc>
 8008374:	2300      	movs	r3, #0
 8008376:	6053      	str	r3, [r2, #4]
 8008378:	e7de      	b.n	8008338 <_malloc_r+0xa8>
 800837a:	230c      	movs	r3, #12
 800837c:	6033      	str	r3, [r6, #0]
 800837e:	4630      	mov	r0, r6
 8008380:	f000 fa46 	bl	8008810 <__malloc_unlock>
 8008384:	e794      	b.n	80082b0 <_malloc_r+0x20>
 8008386:	6005      	str	r5, [r0, #0]
 8008388:	e7d6      	b.n	8008338 <_malloc_r+0xa8>
 800838a:	bf00      	nop
 800838c:	20025ec8 	.word	0x20025ec8

08008390 <_printf_common>:
 8008390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008394:	4616      	mov	r6, r2
 8008396:	4698      	mov	r8, r3
 8008398:	688a      	ldr	r2, [r1, #8]
 800839a:	690b      	ldr	r3, [r1, #16]
 800839c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80083a0:	4293      	cmp	r3, r2
 80083a2:	bfb8      	it	lt
 80083a4:	4613      	movlt	r3, r2
 80083a6:	6033      	str	r3, [r6, #0]
 80083a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80083ac:	4607      	mov	r7, r0
 80083ae:	460c      	mov	r4, r1
 80083b0:	b10a      	cbz	r2, 80083b6 <_printf_common+0x26>
 80083b2:	3301      	adds	r3, #1
 80083b4:	6033      	str	r3, [r6, #0]
 80083b6:	6823      	ldr	r3, [r4, #0]
 80083b8:	0699      	lsls	r1, r3, #26
 80083ba:	bf42      	ittt	mi
 80083bc:	6833      	ldrmi	r3, [r6, #0]
 80083be:	3302      	addmi	r3, #2
 80083c0:	6033      	strmi	r3, [r6, #0]
 80083c2:	6825      	ldr	r5, [r4, #0]
 80083c4:	f015 0506 	ands.w	r5, r5, #6
 80083c8:	d106      	bne.n	80083d8 <_printf_common+0x48>
 80083ca:	f104 0a19 	add.w	sl, r4, #25
 80083ce:	68e3      	ldr	r3, [r4, #12]
 80083d0:	6832      	ldr	r2, [r6, #0]
 80083d2:	1a9b      	subs	r3, r3, r2
 80083d4:	42ab      	cmp	r3, r5
 80083d6:	dc26      	bgt.n	8008426 <_printf_common+0x96>
 80083d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80083dc:	6822      	ldr	r2, [r4, #0]
 80083de:	3b00      	subs	r3, #0
 80083e0:	bf18      	it	ne
 80083e2:	2301      	movne	r3, #1
 80083e4:	0692      	lsls	r2, r2, #26
 80083e6:	d42b      	bmi.n	8008440 <_printf_common+0xb0>
 80083e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80083ec:	4641      	mov	r1, r8
 80083ee:	4638      	mov	r0, r7
 80083f0:	47c8      	blx	r9
 80083f2:	3001      	adds	r0, #1
 80083f4:	d01e      	beq.n	8008434 <_printf_common+0xa4>
 80083f6:	6823      	ldr	r3, [r4, #0]
 80083f8:	6922      	ldr	r2, [r4, #16]
 80083fa:	f003 0306 	and.w	r3, r3, #6
 80083fe:	2b04      	cmp	r3, #4
 8008400:	bf02      	ittt	eq
 8008402:	68e5      	ldreq	r5, [r4, #12]
 8008404:	6833      	ldreq	r3, [r6, #0]
 8008406:	1aed      	subeq	r5, r5, r3
 8008408:	68a3      	ldr	r3, [r4, #8]
 800840a:	bf0c      	ite	eq
 800840c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008410:	2500      	movne	r5, #0
 8008412:	4293      	cmp	r3, r2
 8008414:	bfc4      	itt	gt
 8008416:	1a9b      	subgt	r3, r3, r2
 8008418:	18ed      	addgt	r5, r5, r3
 800841a:	2600      	movs	r6, #0
 800841c:	341a      	adds	r4, #26
 800841e:	42b5      	cmp	r5, r6
 8008420:	d11a      	bne.n	8008458 <_printf_common+0xc8>
 8008422:	2000      	movs	r0, #0
 8008424:	e008      	b.n	8008438 <_printf_common+0xa8>
 8008426:	2301      	movs	r3, #1
 8008428:	4652      	mov	r2, sl
 800842a:	4641      	mov	r1, r8
 800842c:	4638      	mov	r0, r7
 800842e:	47c8      	blx	r9
 8008430:	3001      	adds	r0, #1
 8008432:	d103      	bne.n	800843c <_printf_common+0xac>
 8008434:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800843c:	3501      	adds	r5, #1
 800843e:	e7c6      	b.n	80083ce <_printf_common+0x3e>
 8008440:	18e1      	adds	r1, r4, r3
 8008442:	1c5a      	adds	r2, r3, #1
 8008444:	2030      	movs	r0, #48	@ 0x30
 8008446:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800844a:	4422      	add	r2, r4
 800844c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008450:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008454:	3302      	adds	r3, #2
 8008456:	e7c7      	b.n	80083e8 <_printf_common+0x58>
 8008458:	2301      	movs	r3, #1
 800845a:	4622      	mov	r2, r4
 800845c:	4641      	mov	r1, r8
 800845e:	4638      	mov	r0, r7
 8008460:	47c8      	blx	r9
 8008462:	3001      	adds	r0, #1
 8008464:	d0e6      	beq.n	8008434 <_printf_common+0xa4>
 8008466:	3601      	adds	r6, #1
 8008468:	e7d9      	b.n	800841e <_printf_common+0x8e>
	...

0800846c <_printf_i>:
 800846c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008470:	7e0f      	ldrb	r7, [r1, #24]
 8008472:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008474:	2f78      	cmp	r7, #120	@ 0x78
 8008476:	4691      	mov	r9, r2
 8008478:	4680      	mov	r8, r0
 800847a:	460c      	mov	r4, r1
 800847c:	469a      	mov	sl, r3
 800847e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008482:	d807      	bhi.n	8008494 <_printf_i+0x28>
 8008484:	2f62      	cmp	r7, #98	@ 0x62
 8008486:	d80a      	bhi.n	800849e <_printf_i+0x32>
 8008488:	2f00      	cmp	r7, #0
 800848a:	f000 80d2 	beq.w	8008632 <_printf_i+0x1c6>
 800848e:	2f58      	cmp	r7, #88	@ 0x58
 8008490:	f000 80b9 	beq.w	8008606 <_printf_i+0x19a>
 8008494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008498:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800849c:	e03a      	b.n	8008514 <_printf_i+0xa8>
 800849e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80084a2:	2b15      	cmp	r3, #21
 80084a4:	d8f6      	bhi.n	8008494 <_printf_i+0x28>
 80084a6:	a101      	add	r1, pc, #4	@ (adr r1, 80084ac <_printf_i+0x40>)
 80084a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084ac:	08008505 	.word	0x08008505
 80084b0:	08008519 	.word	0x08008519
 80084b4:	08008495 	.word	0x08008495
 80084b8:	08008495 	.word	0x08008495
 80084bc:	08008495 	.word	0x08008495
 80084c0:	08008495 	.word	0x08008495
 80084c4:	08008519 	.word	0x08008519
 80084c8:	08008495 	.word	0x08008495
 80084cc:	08008495 	.word	0x08008495
 80084d0:	08008495 	.word	0x08008495
 80084d4:	08008495 	.word	0x08008495
 80084d8:	08008619 	.word	0x08008619
 80084dc:	08008543 	.word	0x08008543
 80084e0:	080085d3 	.word	0x080085d3
 80084e4:	08008495 	.word	0x08008495
 80084e8:	08008495 	.word	0x08008495
 80084ec:	0800863b 	.word	0x0800863b
 80084f0:	08008495 	.word	0x08008495
 80084f4:	08008543 	.word	0x08008543
 80084f8:	08008495 	.word	0x08008495
 80084fc:	08008495 	.word	0x08008495
 8008500:	080085db 	.word	0x080085db
 8008504:	6833      	ldr	r3, [r6, #0]
 8008506:	1d1a      	adds	r2, r3, #4
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	6032      	str	r2, [r6, #0]
 800850c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008510:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008514:	2301      	movs	r3, #1
 8008516:	e09d      	b.n	8008654 <_printf_i+0x1e8>
 8008518:	6833      	ldr	r3, [r6, #0]
 800851a:	6820      	ldr	r0, [r4, #0]
 800851c:	1d19      	adds	r1, r3, #4
 800851e:	6031      	str	r1, [r6, #0]
 8008520:	0606      	lsls	r6, r0, #24
 8008522:	d501      	bpl.n	8008528 <_printf_i+0xbc>
 8008524:	681d      	ldr	r5, [r3, #0]
 8008526:	e003      	b.n	8008530 <_printf_i+0xc4>
 8008528:	0645      	lsls	r5, r0, #25
 800852a:	d5fb      	bpl.n	8008524 <_printf_i+0xb8>
 800852c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008530:	2d00      	cmp	r5, #0
 8008532:	da03      	bge.n	800853c <_printf_i+0xd0>
 8008534:	232d      	movs	r3, #45	@ 0x2d
 8008536:	426d      	negs	r5, r5
 8008538:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800853c:	4859      	ldr	r0, [pc, #356]	@ (80086a4 <_printf_i+0x238>)
 800853e:	230a      	movs	r3, #10
 8008540:	e011      	b.n	8008566 <_printf_i+0xfa>
 8008542:	6821      	ldr	r1, [r4, #0]
 8008544:	6833      	ldr	r3, [r6, #0]
 8008546:	0608      	lsls	r0, r1, #24
 8008548:	f853 5b04 	ldr.w	r5, [r3], #4
 800854c:	d402      	bmi.n	8008554 <_printf_i+0xe8>
 800854e:	0649      	lsls	r1, r1, #25
 8008550:	bf48      	it	mi
 8008552:	b2ad      	uxthmi	r5, r5
 8008554:	2f6f      	cmp	r7, #111	@ 0x6f
 8008556:	4853      	ldr	r0, [pc, #332]	@ (80086a4 <_printf_i+0x238>)
 8008558:	6033      	str	r3, [r6, #0]
 800855a:	bf14      	ite	ne
 800855c:	230a      	movne	r3, #10
 800855e:	2308      	moveq	r3, #8
 8008560:	2100      	movs	r1, #0
 8008562:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008566:	6866      	ldr	r6, [r4, #4]
 8008568:	60a6      	str	r6, [r4, #8]
 800856a:	2e00      	cmp	r6, #0
 800856c:	bfa2      	ittt	ge
 800856e:	6821      	ldrge	r1, [r4, #0]
 8008570:	f021 0104 	bicge.w	r1, r1, #4
 8008574:	6021      	strge	r1, [r4, #0]
 8008576:	b90d      	cbnz	r5, 800857c <_printf_i+0x110>
 8008578:	2e00      	cmp	r6, #0
 800857a:	d04b      	beq.n	8008614 <_printf_i+0x1a8>
 800857c:	4616      	mov	r6, r2
 800857e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008582:	fb03 5711 	mls	r7, r3, r1, r5
 8008586:	5dc7      	ldrb	r7, [r0, r7]
 8008588:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800858c:	462f      	mov	r7, r5
 800858e:	42bb      	cmp	r3, r7
 8008590:	460d      	mov	r5, r1
 8008592:	d9f4      	bls.n	800857e <_printf_i+0x112>
 8008594:	2b08      	cmp	r3, #8
 8008596:	d10b      	bne.n	80085b0 <_printf_i+0x144>
 8008598:	6823      	ldr	r3, [r4, #0]
 800859a:	07df      	lsls	r7, r3, #31
 800859c:	d508      	bpl.n	80085b0 <_printf_i+0x144>
 800859e:	6923      	ldr	r3, [r4, #16]
 80085a0:	6861      	ldr	r1, [r4, #4]
 80085a2:	4299      	cmp	r1, r3
 80085a4:	bfde      	ittt	le
 80085a6:	2330      	movle	r3, #48	@ 0x30
 80085a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80085ac:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80085b0:	1b92      	subs	r2, r2, r6
 80085b2:	6122      	str	r2, [r4, #16]
 80085b4:	f8cd a000 	str.w	sl, [sp]
 80085b8:	464b      	mov	r3, r9
 80085ba:	aa03      	add	r2, sp, #12
 80085bc:	4621      	mov	r1, r4
 80085be:	4640      	mov	r0, r8
 80085c0:	f7ff fee6 	bl	8008390 <_printf_common>
 80085c4:	3001      	adds	r0, #1
 80085c6:	d14a      	bne.n	800865e <_printf_i+0x1f2>
 80085c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80085cc:	b004      	add	sp, #16
 80085ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085d2:	6823      	ldr	r3, [r4, #0]
 80085d4:	f043 0320 	orr.w	r3, r3, #32
 80085d8:	6023      	str	r3, [r4, #0]
 80085da:	4833      	ldr	r0, [pc, #204]	@ (80086a8 <_printf_i+0x23c>)
 80085dc:	2778      	movs	r7, #120	@ 0x78
 80085de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	6831      	ldr	r1, [r6, #0]
 80085e6:	061f      	lsls	r7, r3, #24
 80085e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80085ec:	d402      	bmi.n	80085f4 <_printf_i+0x188>
 80085ee:	065f      	lsls	r7, r3, #25
 80085f0:	bf48      	it	mi
 80085f2:	b2ad      	uxthmi	r5, r5
 80085f4:	6031      	str	r1, [r6, #0]
 80085f6:	07d9      	lsls	r1, r3, #31
 80085f8:	bf44      	itt	mi
 80085fa:	f043 0320 	orrmi.w	r3, r3, #32
 80085fe:	6023      	strmi	r3, [r4, #0]
 8008600:	b11d      	cbz	r5, 800860a <_printf_i+0x19e>
 8008602:	2310      	movs	r3, #16
 8008604:	e7ac      	b.n	8008560 <_printf_i+0xf4>
 8008606:	4827      	ldr	r0, [pc, #156]	@ (80086a4 <_printf_i+0x238>)
 8008608:	e7e9      	b.n	80085de <_printf_i+0x172>
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	f023 0320 	bic.w	r3, r3, #32
 8008610:	6023      	str	r3, [r4, #0]
 8008612:	e7f6      	b.n	8008602 <_printf_i+0x196>
 8008614:	4616      	mov	r6, r2
 8008616:	e7bd      	b.n	8008594 <_printf_i+0x128>
 8008618:	6833      	ldr	r3, [r6, #0]
 800861a:	6825      	ldr	r5, [r4, #0]
 800861c:	6961      	ldr	r1, [r4, #20]
 800861e:	1d18      	adds	r0, r3, #4
 8008620:	6030      	str	r0, [r6, #0]
 8008622:	062e      	lsls	r6, r5, #24
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	d501      	bpl.n	800862c <_printf_i+0x1c0>
 8008628:	6019      	str	r1, [r3, #0]
 800862a:	e002      	b.n	8008632 <_printf_i+0x1c6>
 800862c:	0668      	lsls	r0, r5, #25
 800862e:	d5fb      	bpl.n	8008628 <_printf_i+0x1bc>
 8008630:	8019      	strh	r1, [r3, #0]
 8008632:	2300      	movs	r3, #0
 8008634:	6123      	str	r3, [r4, #16]
 8008636:	4616      	mov	r6, r2
 8008638:	e7bc      	b.n	80085b4 <_printf_i+0x148>
 800863a:	6833      	ldr	r3, [r6, #0]
 800863c:	1d1a      	adds	r2, r3, #4
 800863e:	6032      	str	r2, [r6, #0]
 8008640:	681e      	ldr	r6, [r3, #0]
 8008642:	6862      	ldr	r2, [r4, #4]
 8008644:	2100      	movs	r1, #0
 8008646:	4630      	mov	r0, r6
 8008648:	f7f7 fdda 	bl	8000200 <memchr>
 800864c:	b108      	cbz	r0, 8008652 <_printf_i+0x1e6>
 800864e:	1b80      	subs	r0, r0, r6
 8008650:	6060      	str	r0, [r4, #4]
 8008652:	6863      	ldr	r3, [r4, #4]
 8008654:	6123      	str	r3, [r4, #16]
 8008656:	2300      	movs	r3, #0
 8008658:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800865c:	e7aa      	b.n	80085b4 <_printf_i+0x148>
 800865e:	6923      	ldr	r3, [r4, #16]
 8008660:	4632      	mov	r2, r6
 8008662:	4649      	mov	r1, r9
 8008664:	4640      	mov	r0, r8
 8008666:	47d0      	blx	sl
 8008668:	3001      	adds	r0, #1
 800866a:	d0ad      	beq.n	80085c8 <_printf_i+0x15c>
 800866c:	6823      	ldr	r3, [r4, #0]
 800866e:	079b      	lsls	r3, r3, #30
 8008670:	d413      	bmi.n	800869a <_printf_i+0x22e>
 8008672:	68e0      	ldr	r0, [r4, #12]
 8008674:	9b03      	ldr	r3, [sp, #12]
 8008676:	4298      	cmp	r0, r3
 8008678:	bfb8      	it	lt
 800867a:	4618      	movlt	r0, r3
 800867c:	e7a6      	b.n	80085cc <_printf_i+0x160>
 800867e:	2301      	movs	r3, #1
 8008680:	4632      	mov	r2, r6
 8008682:	4649      	mov	r1, r9
 8008684:	4640      	mov	r0, r8
 8008686:	47d0      	blx	sl
 8008688:	3001      	adds	r0, #1
 800868a:	d09d      	beq.n	80085c8 <_printf_i+0x15c>
 800868c:	3501      	adds	r5, #1
 800868e:	68e3      	ldr	r3, [r4, #12]
 8008690:	9903      	ldr	r1, [sp, #12]
 8008692:	1a5b      	subs	r3, r3, r1
 8008694:	42ab      	cmp	r3, r5
 8008696:	dcf2      	bgt.n	800867e <_printf_i+0x212>
 8008698:	e7eb      	b.n	8008672 <_printf_i+0x206>
 800869a:	2500      	movs	r5, #0
 800869c:	f104 0619 	add.w	r6, r4, #25
 80086a0:	e7f5      	b.n	800868e <_printf_i+0x222>
 80086a2:	bf00      	nop
 80086a4:	08009ee3 	.word	0x08009ee3
 80086a8:	08009ef4 	.word	0x08009ef4

080086ac <__sflush_r>:
 80086ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086b4:	0716      	lsls	r6, r2, #28
 80086b6:	4605      	mov	r5, r0
 80086b8:	460c      	mov	r4, r1
 80086ba:	d454      	bmi.n	8008766 <__sflush_r+0xba>
 80086bc:	684b      	ldr	r3, [r1, #4]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	dc02      	bgt.n	80086c8 <__sflush_r+0x1c>
 80086c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	dd48      	ble.n	800875a <__sflush_r+0xae>
 80086c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086ca:	2e00      	cmp	r6, #0
 80086cc:	d045      	beq.n	800875a <__sflush_r+0xae>
 80086ce:	2300      	movs	r3, #0
 80086d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80086d4:	682f      	ldr	r7, [r5, #0]
 80086d6:	6a21      	ldr	r1, [r4, #32]
 80086d8:	602b      	str	r3, [r5, #0]
 80086da:	d030      	beq.n	800873e <__sflush_r+0x92>
 80086dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80086de:	89a3      	ldrh	r3, [r4, #12]
 80086e0:	0759      	lsls	r1, r3, #29
 80086e2:	d505      	bpl.n	80086f0 <__sflush_r+0x44>
 80086e4:	6863      	ldr	r3, [r4, #4]
 80086e6:	1ad2      	subs	r2, r2, r3
 80086e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80086ea:	b10b      	cbz	r3, 80086f0 <__sflush_r+0x44>
 80086ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80086ee:	1ad2      	subs	r2, r2, r3
 80086f0:	2300      	movs	r3, #0
 80086f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80086f4:	6a21      	ldr	r1, [r4, #32]
 80086f6:	4628      	mov	r0, r5
 80086f8:	47b0      	blx	r6
 80086fa:	1c43      	adds	r3, r0, #1
 80086fc:	89a3      	ldrh	r3, [r4, #12]
 80086fe:	d106      	bne.n	800870e <__sflush_r+0x62>
 8008700:	6829      	ldr	r1, [r5, #0]
 8008702:	291d      	cmp	r1, #29
 8008704:	d82b      	bhi.n	800875e <__sflush_r+0xb2>
 8008706:	4a2a      	ldr	r2, [pc, #168]	@ (80087b0 <__sflush_r+0x104>)
 8008708:	410a      	asrs	r2, r1
 800870a:	07d6      	lsls	r6, r2, #31
 800870c:	d427      	bmi.n	800875e <__sflush_r+0xb2>
 800870e:	2200      	movs	r2, #0
 8008710:	6062      	str	r2, [r4, #4]
 8008712:	04d9      	lsls	r1, r3, #19
 8008714:	6922      	ldr	r2, [r4, #16]
 8008716:	6022      	str	r2, [r4, #0]
 8008718:	d504      	bpl.n	8008724 <__sflush_r+0x78>
 800871a:	1c42      	adds	r2, r0, #1
 800871c:	d101      	bne.n	8008722 <__sflush_r+0x76>
 800871e:	682b      	ldr	r3, [r5, #0]
 8008720:	b903      	cbnz	r3, 8008724 <__sflush_r+0x78>
 8008722:	6560      	str	r0, [r4, #84]	@ 0x54
 8008724:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008726:	602f      	str	r7, [r5, #0]
 8008728:	b1b9      	cbz	r1, 800875a <__sflush_r+0xae>
 800872a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800872e:	4299      	cmp	r1, r3
 8008730:	d002      	beq.n	8008738 <__sflush_r+0x8c>
 8008732:	4628      	mov	r0, r5
 8008734:	f000 fa24 	bl	8008b80 <_free_r>
 8008738:	2300      	movs	r3, #0
 800873a:	6363      	str	r3, [r4, #52]	@ 0x34
 800873c:	e00d      	b.n	800875a <__sflush_r+0xae>
 800873e:	2301      	movs	r3, #1
 8008740:	4628      	mov	r0, r5
 8008742:	47b0      	blx	r6
 8008744:	4602      	mov	r2, r0
 8008746:	1c50      	adds	r0, r2, #1
 8008748:	d1c9      	bne.n	80086de <__sflush_r+0x32>
 800874a:	682b      	ldr	r3, [r5, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d0c6      	beq.n	80086de <__sflush_r+0x32>
 8008750:	2b1d      	cmp	r3, #29
 8008752:	d001      	beq.n	8008758 <__sflush_r+0xac>
 8008754:	2b16      	cmp	r3, #22
 8008756:	d11e      	bne.n	8008796 <__sflush_r+0xea>
 8008758:	602f      	str	r7, [r5, #0]
 800875a:	2000      	movs	r0, #0
 800875c:	e022      	b.n	80087a4 <__sflush_r+0xf8>
 800875e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008762:	b21b      	sxth	r3, r3
 8008764:	e01b      	b.n	800879e <__sflush_r+0xf2>
 8008766:	690f      	ldr	r7, [r1, #16]
 8008768:	2f00      	cmp	r7, #0
 800876a:	d0f6      	beq.n	800875a <__sflush_r+0xae>
 800876c:	0793      	lsls	r3, r2, #30
 800876e:	680e      	ldr	r6, [r1, #0]
 8008770:	bf08      	it	eq
 8008772:	694b      	ldreq	r3, [r1, #20]
 8008774:	600f      	str	r7, [r1, #0]
 8008776:	bf18      	it	ne
 8008778:	2300      	movne	r3, #0
 800877a:	eba6 0807 	sub.w	r8, r6, r7
 800877e:	608b      	str	r3, [r1, #8]
 8008780:	f1b8 0f00 	cmp.w	r8, #0
 8008784:	dde9      	ble.n	800875a <__sflush_r+0xae>
 8008786:	6a21      	ldr	r1, [r4, #32]
 8008788:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800878a:	4643      	mov	r3, r8
 800878c:	463a      	mov	r2, r7
 800878e:	4628      	mov	r0, r5
 8008790:	47b0      	blx	r6
 8008792:	2800      	cmp	r0, #0
 8008794:	dc08      	bgt.n	80087a8 <__sflush_r+0xfc>
 8008796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800879a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800879e:	81a3      	strh	r3, [r4, #12]
 80087a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087a8:	4407      	add	r7, r0
 80087aa:	eba8 0800 	sub.w	r8, r8, r0
 80087ae:	e7e7      	b.n	8008780 <__sflush_r+0xd4>
 80087b0:	dfbffffe 	.word	0xdfbffffe

080087b4 <_fflush_r>:
 80087b4:	b538      	push	{r3, r4, r5, lr}
 80087b6:	690b      	ldr	r3, [r1, #16]
 80087b8:	4605      	mov	r5, r0
 80087ba:	460c      	mov	r4, r1
 80087bc:	b913      	cbnz	r3, 80087c4 <_fflush_r+0x10>
 80087be:	2500      	movs	r5, #0
 80087c0:	4628      	mov	r0, r5
 80087c2:	bd38      	pop	{r3, r4, r5, pc}
 80087c4:	b118      	cbz	r0, 80087ce <_fflush_r+0x1a>
 80087c6:	6a03      	ldr	r3, [r0, #32]
 80087c8:	b90b      	cbnz	r3, 80087ce <_fflush_r+0x1a>
 80087ca:	f7ff fb23 	bl	8007e14 <__sinit>
 80087ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d0f3      	beq.n	80087be <_fflush_r+0xa>
 80087d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80087d8:	07d0      	lsls	r0, r2, #31
 80087da:	d404      	bmi.n	80087e6 <_fflush_r+0x32>
 80087dc:	0599      	lsls	r1, r3, #22
 80087de:	d402      	bmi.n	80087e6 <_fflush_r+0x32>
 80087e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087e2:	f7ff fbf0 	bl	8007fc6 <__retarget_lock_acquire_recursive>
 80087e6:	4628      	mov	r0, r5
 80087e8:	4621      	mov	r1, r4
 80087ea:	f7ff ff5f 	bl	80086ac <__sflush_r>
 80087ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80087f0:	07da      	lsls	r2, r3, #31
 80087f2:	4605      	mov	r5, r0
 80087f4:	d4e4      	bmi.n	80087c0 <_fflush_r+0xc>
 80087f6:	89a3      	ldrh	r3, [r4, #12]
 80087f8:	059b      	lsls	r3, r3, #22
 80087fa:	d4e1      	bmi.n	80087c0 <_fflush_r+0xc>
 80087fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80087fe:	f7ff fbe3 	bl	8007fc8 <__retarget_lock_release_recursive>
 8008802:	e7dd      	b.n	80087c0 <_fflush_r+0xc>

08008804 <__malloc_lock>:
 8008804:	4801      	ldr	r0, [pc, #4]	@ (800880c <__malloc_lock+0x8>)
 8008806:	f7ff bbde 	b.w	8007fc6 <__retarget_lock_acquire_recursive>
 800880a:	bf00      	nop
 800880c:	20025ec0 	.word	0x20025ec0

08008810 <__malloc_unlock>:
 8008810:	4801      	ldr	r0, [pc, #4]	@ (8008818 <__malloc_unlock+0x8>)
 8008812:	f7ff bbd9 	b.w	8007fc8 <__retarget_lock_release_recursive>
 8008816:	bf00      	nop
 8008818:	20025ec0 	.word	0x20025ec0

0800881c <__sread>:
 800881c:	b510      	push	{r4, lr}
 800881e:	460c      	mov	r4, r1
 8008820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008824:	f000 f978 	bl	8008b18 <_read_r>
 8008828:	2800      	cmp	r0, #0
 800882a:	bfab      	itete	ge
 800882c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800882e:	89a3      	ldrhlt	r3, [r4, #12]
 8008830:	181b      	addge	r3, r3, r0
 8008832:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008836:	bfac      	ite	ge
 8008838:	6563      	strge	r3, [r4, #84]	@ 0x54
 800883a:	81a3      	strhlt	r3, [r4, #12]
 800883c:	bd10      	pop	{r4, pc}

0800883e <__swrite>:
 800883e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008842:	461f      	mov	r7, r3
 8008844:	898b      	ldrh	r3, [r1, #12]
 8008846:	05db      	lsls	r3, r3, #23
 8008848:	4605      	mov	r5, r0
 800884a:	460c      	mov	r4, r1
 800884c:	4616      	mov	r6, r2
 800884e:	d505      	bpl.n	800885c <__swrite+0x1e>
 8008850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008854:	2302      	movs	r3, #2
 8008856:	2200      	movs	r2, #0
 8008858:	f000 f94c 	bl	8008af4 <_lseek_r>
 800885c:	89a3      	ldrh	r3, [r4, #12]
 800885e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008862:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008866:	81a3      	strh	r3, [r4, #12]
 8008868:	4632      	mov	r2, r6
 800886a:	463b      	mov	r3, r7
 800886c:	4628      	mov	r0, r5
 800886e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008872:	f000 b973 	b.w	8008b5c <_write_r>

08008876 <__sseek>:
 8008876:	b510      	push	{r4, lr}
 8008878:	460c      	mov	r4, r1
 800887a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800887e:	f000 f939 	bl	8008af4 <_lseek_r>
 8008882:	1c43      	adds	r3, r0, #1
 8008884:	89a3      	ldrh	r3, [r4, #12]
 8008886:	bf15      	itete	ne
 8008888:	6560      	strne	r0, [r4, #84]	@ 0x54
 800888a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800888e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008892:	81a3      	strheq	r3, [r4, #12]
 8008894:	bf18      	it	ne
 8008896:	81a3      	strhne	r3, [r4, #12]
 8008898:	bd10      	pop	{r4, pc}

0800889a <__sclose>:
 800889a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800889e:	f000 b8f7 	b.w	8008a90 <_close_r>

080088a2 <__swbuf_r>:
 80088a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088a4:	460e      	mov	r6, r1
 80088a6:	4614      	mov	r4, r2
 80088a8:	4605      	mov	r5, r0
 80088aa:	b118      	cbz	r0, 80088b4 <__swbuf_r+0x12>
 80088ac:	6a03      	ldr	r3, [r0, #32]
 80088ae:	b90b      	cbnz	r3, 80088b4 <__swbuf_r+0x12>
 80088b0:	f7ff fab0 	bl	8007e14 <__sinit>
 80088b4:	69a3      	ldr	r3, [r4, #24]
 80088b6:	60a3      	str	r3, [r4, #8]
 80088b8:	89a3      	ldrh	r3, [r4, #12]
 80088ba:	071a      	lsls	r2, r3, #28
 80088bc:	d501      	bpl.n	80088c2 <__swbuf_r+0x20>
 80088be:	6923      	ldr	r3, [r4, #16]
 80088c0:	b943      	cbnz	r3, 80088d4 <__swbuf_r+0x32>
 80088c2:	4621      	mov	r1, r4
 80088c4:	4628      	mov	r0, r5
 80088c6:	f000 f82b 	bl	8008920 <__swsetup_r>
 80088ca:	b118      	cbz	r0, 80088d4 <__swbuf_r+0x32>
 80088cc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80088d0:	4638      	mov	r0, r7
 80088d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088d4:	6823      	ldr	r3, [r4, #0]
 80088d6:	6922      	ldr	r2, [r4, #16]
 80088d8:	1a98      	subs	r0, r3, r2
 80088da:	6963      	ldr	r3, [r4, #20]
 80088dc:	b2f6      	uxtb	r6, r6
 80088de:	4283      	cmp	r3, r0
 80088e0:	4637      	mov	r7, r6
 80088e2:	dc05      	bgt.n	80088f0 <__swbuf_r+0x4e>
 80088e4:	4621      	mov	r1, r4
 80088e6:	4628      	mov	r0, r5
 80088e8:	f7ff ff64 	bl	80087b4 <_fflush_r>
 80088ec:	2800      	cmp	r0, #0
 80088ee:	d1ed      	bne.n	80088cc <__swbuf_r+0x2a>
 80088f0:	68a3      	ldr	r3, [r4, #8]
 80088f2:	3b01      	subs	r3, #1
 80088f4:	60a3      	str	r3, [r4, #8]
 80088f6:	6823      	ldr	r3, [r4, #0]
 80088f8:	1c5a      	adds	r2, r3, #1
 80088fa:	6022      	str	r2, [r4, #0]
 80088fc:	701e      	strb	r6, [r3, #0]
 80088fe:	6962      	ldr	r2, [r4, #20]
 8008900:	1c43      	adds	r3, r0, #1
 8008902:	429a      	cmp	r2, r3
 8008904:	d004      	beq.n	8008910 <__swbuf_r+0x6e>
 8008906:	89a3      	ldrh	r3, [r4, #12]
 8008908:	07db      	lsls	r3, r3, #31
 800890a:	d5e1      	bpl.n	80088d0 <__swbuf_r+0x2e>
 800890c:	2e0a      	cmp	r6, #10
 800890e:	d1df      	bne.n	80088d0 <__swbuf_r+0x2e>
 8008910:	4621      	mov	r1, r4
 8008912:	4628      	mov	r0, r5
 8008914:	f7ff ff4e 	bl	80087b4 <_fflush_r>
 8008918:	2800      	cmp	r0, #0
 800891a:	d0d9      	beq.n	80088d0 <__swbuf_r+0x2e>
 800891c:	e7d6      	b.n	80088cc <__swbuf_r+0x2a>
	...

08008920 <__swsetup_r>:
 8008920:	b538      	push	{r3, r4, r5, lr}
 8008922:	4b29      	ldr	r3, [pc, #164]	@ (80089c8 <__swsetup_r+0xa8>)
 8008924:	4605      	mov	r5, r0
 8008926:	6818      	ldr	r0, [r3, #0]
 8008928:	460c      	mov	r4, r1
 800892a:	b118      	cbz	r0, 8008934 <__swsetup_r+0x14>
 800892c:	6a03      	ldr	r3, [r0, #32]
 800892e:	b90b      	cbnz	r3, 8008934 <__swsetup_r+0x14>
 8008930:	f7ff fa70 	bl	8007e14 <__sinit>
 8008934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008938:	0719      	lsls	r1, r3, #28
 800893a:	d422      	bmi.n	8008982 <__swsetup_r+0x62>
 800893c:	06da      	lsls	r2, r3, #27
 800893e:	d407      	bmi.n	8008950 <__swsetup_r+0x30>
 8008940:	2209      	movs	r2, #9
 8008942:	602a      	str	r2, [r5, #0]
 8008944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008948:	81a3      	strh	r3, [r4, #12]
 800894a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800894e:	e033      	b.n	80089b8 <__swsetup_r+0x98>
 8008950:	0758      	lsls	r0, r3, #29
 8008952:	d512      	bpl.n	800897a <__swsetup_r+0x5a>
 8008954:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008956:	b141      	cbz	r1, 800896a <__swsetup_r+0x4a>
 8008958:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800895c:	4299      	cmp	r1, r3
 800895e:	d002      	beq.n	8008966 <__swsetup_r+0x46>
 8008960:	4628      	mov	r0, r5
 8008962:	f000 f90d 	bl	8008b80 <_free_r>
 8008966:	2300      	movs	r3, #0
 8008968:	6363      	str	r3, [r4, #52]	@ 0x34
 800896a:	89a3      	ldrh	r3, [r4, #12]
 800896c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008970:	81a3      	strh	r3, [r4, #12]
 8008972:	2300      	movs	r3, #0
 8008974:	6063      	str	r3, [r4, #4]
 8008976:	6923      	ldr	r3, [r4, #16]
 8008978:	6023      	str	r3, [r4, #0]
 800897a:	89a3      	ldrh	r3, [r4, #12]
 800897c:	f043 0308 	orr.w	r3, r3, #8
 8008980:	81a3      	strh	r3, [r4, #12]
 8008982:	6923      	ldr	r3, [r4, #16]
 8008984:	b94b      	cbnz	r3, 800899a <__swsetup_r+0x7a>
 8008986:	89a3      	ldrh	r3, [r4, #12]
 8008988:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800898c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008990:	d003      	beq.n	800899a <__swsetup_r+0x7a>
 8008992:	4621      	mov	r1, r4
 8008994:	4628      	mov	r0, r5
 8008996:	f000 f83f 	bl	8008a18 <__smakebuf_r>
 800899a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800899e:	f013 0201 	ands.w	r2, r3, #1
 80089a2:	d00a      	beq.n	80089ba <__swsetup_r+0x9a>
 80089a4:	2200      	movs	r2, #0
 80089a6:	60a2      	str	r2, [r4, #8]
 80089a8:	6962      	ldr	r2, [r4, #20]
 80089aa:	4252      	negs	r2, r2
 80089ac:	61a2      	str	r2, [r4, #24]
 80089ae:	6922      	ldr	r2, [r4, #16]
 80089b0:	b942      	cbnz	r2, 80089c4 <__swsetup_r+0xa4>
 80089b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80089b6:	d1c5      	bne.n	8008944 <__swsetup_r+0x24>
 80089b8:	bd38      	pop	{r3, r4, r5, pc}
 80089ba:	0799      	lsls	r1, r3, #30
 80089bc:	bf58      	it	pl
 80089be:	6962      	ldrpl	r2, [r4, #20]
 80089c0:	60a2      	str	r2, [r4, #8]
 80089c2:	e7f4      	b.n	80089ae <__swsetup_r+0x8e>
 80089c4:	2000      	movs	r0, #0
 80089c6:	e7f7      	b.n	80089b8 <__swsetup_r+0x98>
 80089c8:	20000030 	.word	0x20000030

080089cc <__swhatbuf_r>:
 80089cc:	b570      	push	{r4, r5, r6, lr}
 80089ce:	460c      	mov	r4, r1
 80089d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089d4:	2900      	cmp	r1, #0
 80089d6:	b096      	sub	sp, #88	@ 0x58
 80089d8:	4615      	mov	r5, r2
 80089da:	461e      	mov	r6, r3
 80089dc:	da0d      	bge.n	80089fa <__swhatbuf_r+0x2e>
 80089de:	89a3      	ldrh	r3, [r4, #12]
 80089e0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80089e4:	f04f 0100 	mov.w	r1, #0
 80089e8:	bf14      	ite	ne
 80089ea:	2340      	movne	r3, #64	@ 0x40
 80089ec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80089f0:	2000      	movs	r0, #0
 80089f2:	6031      	str	r1, [r6, #0]
 80089f4:	602b      	str	r3, [r5, #0]
 80089f6:	b016      	add	sp, #88	@ 0x58
 80089f8:	bd70      	pop	{r4, r5, r6, pc}
 80089fa:	466a      	mov	r2, sp
 80089fc:	f000 f858 	bl	8008ab0 <_fstat_r>
 8008a00:	2800      	cmp	r0, #0
 8008a02:	dbec      	blt.n	80089de <__swhatbuf_r+0x12>
 8008a04:	9901      	ldr	r1, [sp, #4]
 8008a06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008a0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008a0e:	4259      	negs	r1, r3
 8008a10:	4159      	adcs	r1, r3
 8008a12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a16:	e7eb      	b.n	80089f0 <__swhatbuf_r+0x24>

08008a18 <__smakebuf_r>:
 8008a18:	898b      	ldrh	r3, [r1, #12]
 8008a1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a1c:	079d      	lsls	r5, r3, #30
 8008a1e:	4606      	mov	r6, r0
 8008a20:	460c      	mov	r4, r1
 8008a22:	d507      	bpl.n	8008a34 <__smakebuf_r+0x1c>
 8008a24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008a28:	6023      	str	r3, [r4, #0]
 8008a2a:	6123      	str	r3, [r4, #16]
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	6163      	str	r3, [r4, #20]
 8008a30:	b003      	add	sp, #12
 8008a32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a34:	ab01      	add	r3, sp, #4
 8008a36:	466a      	mov	r2, sp
 8008a38:	f7ff ffc8 	bl	80089cc <__swhatbuf_r>
 8008a3c:	9f00      	ldr	r7, [sp, #0]
 8008a3e:	4605      	mov	r5, r0
 8008a40:	4639      	mov	r1, r7
 8008a42:	4630      	mov	r0, r6
 8008a44:	f7ff fc24 	bl	8008290 <_malloc_r>
 8008a48:	b948      	cbnz	r0, 8008a5e <__smakebuf_r+0x46>
 8008a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a4e:	059a      	lsls	r2, r3, #22
 8008a50:	d4ee      	bmi.n	8008a30 <__smakebuf_r+0x18>
 8008a52:	f023 0303 	bic.w	r3, r3, #3
 8008a56:	f043 0302 	orr.w	r3, r3, #2
 8008a5a:	81a3      	strh	r3, [r4, #12]
 8008a5c:	e7e2      	b.n	8008a24 <__smakebuf_r+0xc>
 8008a5e:	89a3      	ldrh	r3, [r4, #12]
 8008a60:	6020      	str	r0, [r4, #0]
 8008a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a66:	81a3      	strh	r3, [r4, #12]
 8008a68:	9b01      	ldr	r3, [sp, #4]
 8008a6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a6e:	b15b      	cbz	r3, 8008a88 <__smakebuf_r+0x70>
 8008a70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a74:	4630      	mov	r0, r6
 8008a76:	f000 f82d 	bl	8008ad4 <_isatty_r>
 8008a7a:	b128      	cbz	r0, 8008a88 <__smakebuf_r+0x70>
 8008a7c:	89a3      	ldrh	r3, [r4, #12]
 8008a7e:	f023 0303 	bic.w	r3, r3, #3
 8008a82:	f043 0301 	orr.w	r3, r3, #1
 8008a86:	81a3      	strh	r3, [r4, #12]
 8008a88:	89a3      	ldrh	r3, [r4, #12]
 8008a8a:	431d      	orrs	r5, r3
 8008a8c:	81a5      	strh	r5, [r4, #12]
 8008a8e:	e7cf      	b.n	8008a30 <__smakebuf_r+0x18>

08008a90 <_close_r>:
 8008a90:	b538      	push	{r3, r4, r5, lr}
 8008a92:	4d06      	ldr	r5, [pc, #24]	@ (8008aac <_close_r+0x1c>)
 8008a94:	2300      	movs	r3, #0
 8008a96:	4604      	mov	r4, r0
 8008a98:	4608      	mov	r0, r1
 8008a9a:	602b      	str	r3, [r5, #0]
 8008a9c:	f7fe ff6a 	bl	8007974 <_close>
 8008aa0:	1c43      	adds	r3, r0, #1
 8008aa2:	d102      	bne.n	8008aaa <_close_r+0x1a>
 8008aa4:	682b      	ldr	r3, [r5, #0]
 8008aa6:	b103      	cbz	r3, 8008aaa <_close_r+0x1a>
 8008aa8:	6023      	str	r3, [r4, #0]
 8008aaa:	bd38      	pop	{r3, r4, r5, pc}
 8008aac:	20025ecc 	.word	0x20025ecc

08008ab0 <_fstat_r>:
 8008ab0:	b538      	push	{r3, r4, r5, lr}
 8008ab2:	4d07      	ldr	r5, [pc, #28]	@ (8008ad0 <_fstat_r+0x20>)
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	4604      	mov	r4, r0
 8008ab8:	4608      	mov	r0, r1
 8008aba:	4611      	mov	r1, r2
 8008abc:	602b      	str	r3, [r5, #0]
 8008abe:	f7fe ff9c 	bl	80079fa <_fstat>
 8008ac2:	1c43      	adds	r3, r0, #1
 8008ac4:	d102      	bne.n	8008acc <_fstat_r+0x1c>
 8008ac6:	682b      	ldr	r3, [r5, #0]
 8008ac8:	b103      	cbz	r3, 8008acc <_fstat_r+0x1c>
 8008aca:	6023      	str	r3, [r4, #0]
 8008acc:	bd38      	pop	{r3, r4, r5, pc}
 8008ace:	bf00      	nop
 8008ad0:	20025ecc 	.word	0x20025ecc

08008ad4 <_isatty_r>:
 8008ad4:	b538      	push	{r3, r4, r5, lr}
 8008ad6:	4d06      	ldr	r5, [pc, #24]	@ (8008af0 <_isatty_r+0x1c>)
 8008ad8:	2300      	movs	r3, #0
 8008ada:	4604      	mov	r4, r0
 8008adc:	4608      	mov	r0, r1
 8008ade:	602b      	str	r3, [r5, #0]
 8008ae0:	f7ff f8ee 	bl	8007cc0 <_isatty>
 8008ae4:	1c43      	adds	r3, r0, #1
 8008ae6:	d102      	bne.n	8008aee <_isatty_r+0x1a>
 8008ae8:	682b      	ldr	r3, [r5, #0]
 8008aea:	b103      	cbz	r3, 8008aee <_isatty_r+0x1a>
 8008aec:	6023      	str	r3, [r4, #0]
 8008aee:	bd38      	pop	{r3, r4, r5, pc}
 8008af0:	20025ecc 	.word	0x20025ecc

08008af4 <_lseek_r>:
 8008af4:	b538      	push	{r3, r4, r5, lr}
 8008af6:	4d07      	ldr	r5, [pc, #28]	@ (8008b14 <_lseek_r+0x20>)
 8008af8:	4604      	mov	r4, r0
 8008afa:	4608      	mov	r0, r1
 8008afc:	4611      	mov	r1, r2
 8008afe:	2200      	movs	r2, #0
 8008b00:	602a      	str	r2, [r5, #0]
 8008b02:	461a      	mov	r2, r3
 8008b04:	f7fe fef7 	bl	80078f6 <_lseek>
 8008b08:	1c43      	adds	r3, r0, #1
 8008b0a:	d102      	bne.n	8008b12 <_lseek_r+0x1e>
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	b103      	cbz	r3, 8008b12 <_lseek_r+0x1e>
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	bd38      	pop	{r3, r4, r5, pc}
 8008b14:	20025ecc 	.word	0x20025ecc

08008b18 <_read_r>:
 8008b18:	b538      	push	{r3, r4, r5, lr}
 8008b1a:	4d07      	ldr	r5, [pc, #28]	@ (8008b38 <_read_r+0x20>)
 8008b1c:	4604      	mov	r4, r0
 8008b1e:	4608      	mov	r0, r1
 8008b20:	4611      	mov	r1, r2
 8008b22:	2200      	movs	r2, #0
 8008b24:	602a      	str	r2, [r5, #0]
 8008b26:	461a      	mov	r2, r3
 8008b28:	f7fe fe8f 	bl	800784a <_read>
 8008b2c:	1c43      	adds	r3, r0, #1
 8008b2e:	d102      	bne.n	8008b36 <_read_r+0x1e>
 8008b30:	682b      	ldr	r3, [r5, #0]
 8008b32:	b103      	cbz	r3, 8008b36 <_read_r+0x1e>
 8008b34:	6023      	str	r3, [r4, #0]
 8008b36:	bd38      	pop	{r3, r4, r5, pc}
 8008b38:	20025ecc 	.word	0x20025ecc

08008b3c <_sbrk_r>:
 8008b3c:	b538      	push	{r3, r4, r5, lr}
 8008b3e:	4d06      	ldr	r5, [pc, #24]	@ (8008b58 <_sbrk_r+0x1c>)
 8008b40:	2300      	movs	r3, #0
 8008b42:	4604      	mov	r4, r0
 8008b44:	4608      	mov	r0, r1
 8008b46:	602b      	str	r3, [r5, #0]
 8008b48:	f7fa fece 	bl	80038e8 <_sbrk>
 8008b4c:	1c43      	adds	r3, r0, #1
 8008b4e:	d102      	bne.n	8008b56 <_sbrk_r+0x1a>
 8008b50:	682b      	ldr	r3, [r5, #0]
 8008b52:	b103      	cbz	r3, 8008b56 <_sbrk_r+0x1a>
 8008b54:	6023      	str	r3, [r4, #0]
 8008b56:	bd38      	pop	{r3, r4, r5, pc}
 8008b58:	20025ecc 	.word	0x20025ecc

08008b5c <_write_r>:
 8008b5c:	b538      	push	{r3, r4, r5, lr}
 8008b5e:	4d07      	ldr	r5, [pc, #28]	@ (8008b7c <_write_r+0x20>)
 8008b60:	4604      	mov	r4, r0
 8008b62:	4608      	mov	r0, r1
 8008b64:	4611      	mov	r1, r2
 8008b66:	2200      	movs	r2, #0
 8008b68:	602a      	str	r2, [r5, #0]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	f7fe fed5 	bl	800791a <_write>
 8008b70:	1c43      	adds	r3, r0, #1
 8008b72:	d102      	bne.n	8008b7a <_write_r+0x1e>
 8008b74:	682b      	ldr	r3, [r5, #0]
 8008b76:	b103      	cbz	r3, 8008b7a <_write_r+0x1e>
 8008b78:	6023      	str	r3, [r4, #0]
 8008b7a:	bd38      	pop	{r3, r4, r5, pc}
 8008b7c:	20025ecc 	.word	0x20025ecc

08008b80 <_free_r>:
 8008b80:	b538      	push	{r3, r4, r5, lr}
 8008b82:	4605      	mov	r5, r0
 8008b84:	2900      	cmp	r1, #0
 8008b86:	d041      	beq.n	8008c0c <_free_r+0x8c>
 8008b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b8c:	1f0c      	subs	r4, r1, #4
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	bfb8      	it	lt
 8008b92:	18e4      	addlt	r4, r4, r3
 8008b94:	f7ff fe36 	bl	8008804 <__malloc_lock>
 8008b98:	4a1d      	ldr	r2, [pc, #116]	@ (8008c10 <_free_r+0x90>)
 8008b9a:	6813      	ldr	r3, [r2, #0]
 8008b9c:	b933      	cbnz	r3, 8008bac <_free_r+0x2c>
 8008b9e:	6063      	str	r3, [r4, #4]
 8008ba0:	6014      	str	r4, [r2, #0]
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ba8:	f7ff be32 	b.w	8008810 <__malloc_unlock>
 8008bac:	42a3      	cmp	r3, r4
 8008bae:	d908      	bls.n	8008bc2 <_free_r+0x42>
 8008bb0:	6820      	ldr	r0, [r4, #0]
 8008bb2:	1821      	adds	r1, r4, r0
 8008bb4:	428b      	cmp	r3, r1
 8008bb6:	bf01      	itttt	eq
 8008bb8:	6819      	ldreq	r1, [r3, #0]
 8008bba:	685b      	ldreq	r3, [r3, #4]
 8008bbc:	1809      	addeq	r1, r1, r0
 8008bbe:	6021      	streq	r1, [r4, #0]
 8008bc0:	e7ed      	b.n	8008b9e <_free_r+0x1e>
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	b10b      	cbz	r3, 8008bcc <_free_r+0x4c>
 8008bc8:	42a3      	cmp	r3, r4
 8008bca:	d9fa      	bls.n	8008bc2 <_free_r+0x42>
 8008bcc:	6811      	ldr	r1, [r2, #0]
 8008bce:	1850      	adds	r0, r2, r1
 8008bd0:	42a0      	cmp	r0, r4
 8008bd2:	d10b      	bne.n	8008bec <_free_r+0x6c>
 8008bd4:	6820      	ldr	r0, [r4, #0]
 8008bd6:	4401      	add	r1, r0
 8008bd8:	1850      	adds	r0, r2, r1
 8008bda:	4283      	cmp	r3, r0
 8008bdc:	6011      	str	r1, [r2, #0]
 8008bde:	d1e0      	bne.n	8008ba2 <_free_r+0x22>
 8008be0:	6818      	ldr	r0, [r3, #0]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	6053      	str	r3, [r2, #4]
 8008be6:	4408      	add	r0, r1
 8008be8:	6010      	str	r0, [r2, #0]
 8008bea:	e7da      	b.n	8008ba2 <_free_r+0x22>
 8008bec:	d902      	bls.n	8008bf4 <_free_r+0x74>
 8008bee:	230c      	movs	r3, #12
 8008bf0:	602b      	str	r3, [r5, #0]
 8008bf2:	e7d6      	b.n	8008ba2 <_free_r+0x22>
 8008bf4:	6820      	ldr	r0, [r4, #0]
 8008bf6:	1821      	adds	r1, r4, r0
 8008bf8:	428b      	cmp	r3, r1
 8008bfa:	bf04      	itt	eq
 8008bfc:	6819      	ldreq	r1, [r3, #0]
 8008bfe:	685b      	ldreq	r3, [r3, #4]
 8008c00:	6063      	str	r3, [r4, #4]
 8008c02:	bf04      	itt	eq
 8008c04:	1809      	addeq	r1, r1, r0
 8008c06:	6021      	streq	r1, [r4, #0]
 8008c08:	6054      	str	r4, [r2, #4]
 8008c0a:	e7ca      	b.n	8008ba2 <_free_r+0x22>
 8008c0c:	bd38      	pop	{r3, r4, r5, pc}
 8008c0e:	bf00      	nop
 8008c10:	20025ec8 	.word	0x20025ec8

08008c14 <_init>:
 8008c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c16:	bf00      	nop
 8008c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c1a:	bc08      	pop	{r3}
 8008c1c:	469e      	mov	lr, r3
 8008c1e:	4770      	bx	lr

08008c20 <_fini>:
 8008c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c22:	bf00      	nop
 8008c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c26:	bc08      	pop	{r3}
 8008c28:	469e      	mov	lr, r3
 8008c2a:	4770      	bx	lr
