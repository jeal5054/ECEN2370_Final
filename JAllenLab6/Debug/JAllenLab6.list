
JAllenLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bd0  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001300  08008d80  08008d80  00009d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a080  0800a080  0000c080  2**0
                  CONTENTS
  4 .ARM          00000008  0800a080  0800a080  0000b080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a088  0800a088  0000c080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a088  0800a088  0000b088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a08c  0800a08c  0000b08c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800a090  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c080  2**0
                  CONTENTS
 10 .bss          00025e50  20000080  20000080  0000c080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025ed0  20025ed0  0000c080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014da9  00000000  00000000  0000c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033ef  00000000  00000000  00020e59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  00024248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f80  00000000  00000000  00025660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026e01  00000000  00000000  000265e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001979c  00000000  00000000  0004d3e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e12f6  00000000  00000000  00066b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00147e73  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ee8  00000000  00000000  00147eb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0014dda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008d68 	.word	0x08008d68

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08008d68 	.word	0x08008d68

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <applicationInit>:
static STMPE811_TouchData StaticTouchData;
static EXTI_HandleTypeDef LCDTouchIRQ;

void LCDTouchScreenInterruptGPIOInit(void);

void applicationInit(){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	//applicationInterruptInit();
	//object_Select();
	addScheduledEvent(MATRIX_UPDATE_EVENT);
 8000594:	2004      	movs	r0, #4
 8000596:	f001 fc91 	bl	8001ebc <addScheduledEvent>

	LTCD__Init();
 800059a:	f000 f9df 	bl	800095c <LTCD__Init>
	LTCD_Layer_Init(0);
 800059e:	2000      	movs	r0, #0
 80005a0:	f000 f99c 	bl	80008dc <LTCD_Layer_Init>
	LCD_Clear(0,LCD_COLOR_WHITE);
 80005a4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005a8:	2000      	movs	r0, #0
 80005aa:	f000 fa5b 	bl	8000a64 <LCD_Clear>

	InitializeLCDTouch();
 80005ae:	f000 fb31 	bl	8000c14 <InitializeLCDTouch>
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005b2:	4b03      	ldr	r3, [pc, #12]	@ (80005c0 <applicationInit+0x30>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	719a      	strb	r2, [r3, #6]
	LCDTouchScreenInterruptGPIOInit();
 80005b8:	f000 f804 	bl	80005c4 <LCDTouchScreenInterruptGPIOInit>
}
 80005bc:	bf00      	nop
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	2000009c 	.word	0x2000009c

080005c4 <LCDTouchScreenInterruptGPIOInit>:


void LCDTouchScreenInterruptGPIOInit(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
 80005d0:	605a      	str	r2, [r3, #4]
 80005d2:	609a      	str	r2, [r3, #8]
 80005d4:	60da      	str	r2, [r3, #12]
 80005d6:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 80005d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005dc:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005de:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80005e2:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e8:	2302      	movs	r3, #2
 80005ea:	613b      	str	r3, [r7, #16]

    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000628 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000628 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005f6:	f043 0301 	orr.w	r3, r3, #1
 80005fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000600:	f003 0301 	and.w	r3, r3, #1
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	683b      	ldr	r3, [r7, #0]

    // GPIO Init
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 8000608:	1d3b      	adds	r3, r7, #4
 800060a:	4619      	mov	r1, r3
 800060c:	4807      	ldr	r0, [pc, #28]	@ (800062c <LCDTouchScreenInterruptGPIOInit+0x68>)
 800060e:	f003 fc77 	bl	8003f00 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000612:	2028      	movs	r0, #40	@ 0x28
 8000614:	f003 fc25 	bl	8003e62 <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 8000618:	4b05      	ldr	r3, [pc, #20]	@ (8000630 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 800061a:	4a06      	ldr	r2, [pc, #24]	@ (8000634 <LCDTouchScreenInterruptGPIOInit+0x70>)
 800061c:	601a      	str	r2, [r3, #0]

}
 800061e:	bf00      	nop
 8000620:	3718      	adds	r7, #24
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40020000 	.word	0x40020000
 8000630:	200000a4 	.word	0x200000a4
 8000634:	0600000f 	.word	0x0600000f

08000638 <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 800063e:	2028      	movs	r0, #40	@ 0x28
 8000640:	f003 fc1d 	bl	8003e7e <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 8000644:	2300      	movs	r3, #0
 8000646:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 8000648:	4b39      	ldr	r3, [pc, #228]	@ (8000730 <EXTI15_10_IRQHandler+0xf8>)
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
	while(count == 0){
 800064e:	e006      	b.n	800065e <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 8000650:	204c      	movs	r0, #76	@ 0x4c
 8000652:	f002 ff30 	bl	80034b6 <STMPE811_Read>
 8000656:	4603      	mov	r3, r0
 8000658:	461a      	mov	r2, r3
 800065a:	4b35      	ldr	r3, [pc, #212]	@ (8000730 <EXTI15_10_IRQHandler+0xf8>)
 800065c:	601a      	str	r2, [r3, #0]
	while(count == 0){
 800065e:	4b34      	ldr	r3, [pc, #208]	@ (8000730 <EXTI15_10_IRQHandler+0xf8>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d0f4      	beq.n	8000650 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 8000666:	200a      	movs	r0, #10
 8000668:	f000 faea 	bl	8000c40 <ReadRegisterFromTouchModule>
 800066c:	4603      	mov	r3, r0
 800066e:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 8000670:	2100      	movs	r1, #0
 8000672:	200a      	movs	r0, #10
 8000674:	f000 faf2 	bl	8000c5c <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 8000678:	200b      	movs	r0, #11
 800067a:	f000 fae1 	bl	8000c40 <ReadRegisterFromTouchModule>
 800067e:	4603      	mov	r3, r0
 8000680:	461a      	mov	r2, r3
 8000682:	4b2c      	ldr	r3, [pc, #176]	@ (8000734 <EXTI15_10_IRQHandler+0xfc>)
 8000684:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 8000686:	4b2b      	ldr	r3, [pc, #172]	@ (8000734 <EXTI15_10_IRQHandler+0xfc>)
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	f043 0301 	orr.w	r3, r3, #1
 800068e:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000690:	797b      	ldrb	r3, [r7, #5]
 8000692:	4619      	mov	r1, r3
 8000694:	200b      	movs	r0, #11
 8000696:	f000 fae1 	bl	8000c5c <WriteDataToTouchModule>

	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 800069a:	2040      	movs	r0, #64	@ 0x40
 800069c:	f000 fad0 	bl	8000c40 <ReadRegisterFromTouchModule>
 80006a0:	4603      	mov	r3, r0
 80006a2:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 80006a4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	da01      	bge.n	80006b0 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 80006ac:	2301      	movs	r3, #1
 80006ae:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 80006b0:	79fb      	ldrb	r3, [r7, #7]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d018      	beq.n	80006e8 <EXTI15_10_IRQHandler+0xb0>
	{
		printf("\nPressed");
 80006b6:	4820      	ldr	r0, [pc, #128]	@ (8000738 <EXTI15_10_IRQHandler+0x100>)
 80006b8:	f007 fc8c 	bl	8007fd4 <iprintf>
		// May need to do numerous retries?
		DetermineTouchPosition(&StaticTouchData);
 80006bc:	481f      	ldr	r0, [pc, #124]	@ (800073c <EXTI15_10_IRQHandler+0x104>)
 80006be:	f000 fab4 	bl	8000c2a <DetermineTouchPosition>
		/* Touch valid */
		//TODO: add touch rotations in later
		if(StaticTouchData.x >= 120) {
 80006c2:	4b1e      	ldr	r3, [pc, #120]	@ (800073c <EXTI15_10_IRQHandler+0x104>)
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	2b77      	cmp	r3, #119	@ 0x77
 80006c8:	d902      	bls.n	80006d0 <EXTI15_10_IRQHandler+0x98>
			shift_Right();
 80006ca:	f000 fe0f 	bl	80012ec <shift_Right>
 80006ce:	e001      	b.n	80006d4 <EXTI15_10_IRQHandler+0x9c>
		} else {
			shift_Left();
 80006d0:	f000 fdce 	bl	8001270 <shift_Left>
		}
		printf("\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
 80006d4:	4b19      	ldr	r3, [pc, #100]	@ (800073c <EXTI15_10_IRQHandler+0x104>)
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	4619      	mov	r1, r3
 80006da:	4b18      	ldr	r3, [pc, #96]	@ (800073c <EXTI15_10_IRQHandler+0x104>)
 80006dc:	885b      	ldrh	r3, [r3, #2]
 80006de:	461a      	mov	r2, r3
 80006e0:	4817      	ldr	r0, [pc, #92]	@ (8000740 <EXTI15_10_IRQHandler+0x108>)
 80006e2:	f007 fc77 	bl	8007fd4 <iprintf>
 80006e6:	e002      	b.n	80006ee <EXTI15_10_IRQHandler+0xb6>
		//LCD_Clear(0, LCD_COLOR_RED);

	}else{

		/* Touch not pressed */
		printf("\nNot pressed \n");
 80006e8:	4816      	ldr	r0, [pc, #88]	@ (8000744 <EXTI15_10_IRQHandler+0x10c>)
 80006ea:	f007 fcdb 	bl	80080a4 <puts>
		//LCD_Clear(0, LCD_COLOR_GREEN);
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 80006ee:	2101      	movs	r1, #1
 80006f0:	204b      	movs	r0, #75	@ 0x4b
 80006f2:	f002 fef1 	bl	80034d8 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 80006f6:	2100      	movs	r1, #0
 80006f8:	204b      	movs	r0, #75	@ 0x4b
 80006fa:	f002 feed 	bl	80034d8 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 80006fe:	79bb      	ldrb	r3, [r7, #6]
 8000700:	4619      	mov	r1, r3
 8000702:	200a      	movs	r0, #10
 8000704:	f000 faaa 	bl	8000c5c <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 8000708:	2103      	movs	r1, #3
 800070a:	480f      	ldr	r0, [pc, #60]	@ (8000748 <EXTI15_10_IRQHandler+0x110>)
 800070c:	f003 fbe0 	bl	8003ed0 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000710:	2028      	movs	r0, #40	@ 0x28
 8000712:	f003 fbce 	bl	8003eb2 <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000716:	2028      	movs	r0, #40	@ 0x28
 8000718:	f003 fba3 	bl	8003e62 <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 800071c:	797b      	ldrb	r3, [r7, #5]
 800071e:	4619      	mov	r1, r3
 8000720:	200b      	movs	r0, #11
 8000722:	f000 fa9b 	bl	8000c5c <WriteDataToTouchModule>

}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200000b0 	.word	0x200000b0
 8000734:	200000ac 	.word	0x200000ac
 8000738:	08008d80 	.word	0x08008d80
 800073c:	2000009c 	.word	0x2000009c
 8000740:	08008d8c 	.word	0x08008d8c
 8000744:	08008da0 	.word	0x08008da0
 8000748:	200000a4 	.word	0x200000a4

0800074c <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08c      	sub	sp, #48	@ 0x30
 8000750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
 8000756:	4b5a      	ldr	r3, [pc, #360]	@ (80008c0 <LCD_GPIO_Init+0x174>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800075a:	4a59      	ldr	r2, [pc, #356]	@ (80008c0 <LCD_GPIO_Init+0x174>)
 800075c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000760:	6453      	str	r3, [r2, #68]	@ 0x44
 8000762:	4b57      	ldr	r3, [pc, #348]	@ (80008c0 <LCD_GPIO_Init+0x174>)
 8000764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000766:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
 8000772:	4b53      	ldr	r3, [pc, #332]	@ (80008c0 <LCD_GPIO_Init+0x174>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	4a52      	ldr	r2, [pc, #328]	@ (80008c0 <LCD_GPIO_Init+0x174>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6313      	str	r3, [r2, #48]	@ 0x30
 800077e:	4b50      	ldr	r3, [pc, #320]	@ (80008c0 <LCD_GPIO_Init+0x174>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b4c      	ldr	r3, [pc, #304]	@ (80008c0 <LCD_GPIO_Init+0x174>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a4b      	ldr	r2, [pc, #300]	@ (80008c0 <LCD_GPIO_Init+0x174>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b49      	ldr	r3, [pc, #292]	@ (80008c0 <LCD_GPIO_Init+0x174>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b45      	ldr	r3, [pc, #276]	@ (80008c0 <LCD_GPIO_Init+0x174>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a44      	ldr	r2, [pc, #272]	@ (80008c0 <LCD_GPIO_Init+0x174>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b42      	ldr	r3, [pc, #264]	@ (80008c0 <LCD_GPIO_Init+0x174>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b3e      	ldr	r3, [pc, #248]	@ (80008c0 <LCD_GPIO_Init+0x174>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a3d      	ldr	r2, [pc, #244]	@ (80008c0 <LCD_GPIO_Init+0x174>)
 80007cc:	f043 0308 	orr.w	r3, r3, #8
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b3b      	ldr	r3, [pc, #236]	@ (80008c0 <LCD_GPIO_Init+0x174>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0308 	and.w	r3, r3, #8
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b37      	ldr	r3, [pc, #220]	@ (80008c0 <LCD_GPIO_Init+0x174>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a36      	ldr	r2, [pc, #216]	@ (80008c0 <LCD_GPIO_Init+0x174>)
 80007e8:	f043 0320 	orr.w	r3, r3, #32
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b34      	ldr	r3, [pc, #208]	@ (80008c0 <LCD_GPIO_Init+0x174>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0320 	and.w	r3, r3, #32
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b30      	ldr	r3, [pc, #192]	@ (80008c0 <LCD_GPIO_Init+0x174>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a2f      	ldr	r2, [pc, #188]	@ (80008c0 <LCD_GPIO_Init+0x174>)
 8000804:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b2d      	ldr	r3, [pc, #180]	@ (80008c0 <LCD_GPIO_Init+0x174>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000816:	f641 0358 	movw	r3, #6232	@ 0x1858
 800081a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000824:	2302      	movs	r3, #2
 8000826:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000828:	230e      	movs	r3, #14
 800082a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	4824      	ldr	r0, [pc, #144]	@ (80008c4 <LCD_GPIO_Init+0x178>)
 8000834:	f003 fb64 	bl	8003f00 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000838:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800083c:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	4820      	ldr	r0, [pc, #128]	@ (80008c8 <LCD_GPIO_Init+0x17c>)
 8000846:	f003 fb5b 	bl	8003f00 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800084a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800084e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	481d      	ldr	r0, [pc, #116]	@ (80008cc <LCD_GPIO_Init+0x180>)
 8000858:	f003 fb52 	bl	8003f00 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800085c:	2348      	movs	r3, #72	@ 0x48
 800085e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	481a      	ldr	r0, [pc, #104]	@ (80008d0 <LCD_GPIO_Init+0x184>)
 8000868:	f003 fb4a 	bl	8003f00 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800086c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000870:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	4816      	ldr	r0, [pc, #88]	@ (80008d4 <LCD_GPIO_Init+0x188>)
 800087a:	f003 fb41 	bl	8003f00 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 800087e:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000882:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	4813      	ldr	r0, [pc, #76]	@ (80008d8 <LCD_GPIO_Init+0x18c>)
 800088c:	f003 fb38 	bl	8003f00 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000890:	2303      	movs	r3, #3
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000894:	2309      	movs	r3, #9
 8000896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	480a      	ldr	r0, [pc, #40]	@ (80008c8 <LCD_GPIO_Init+0x17c>)
 80008a0:	f003 fb2e 	bl	8003f00 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80008a4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4809      	ldr	r0, [pc, #36]	@ (80008d8 <LCD_GPIO_Init+0x18c>)
 80008b2:	f003 fb25 	bl	8003f00 <HAL_GPIO_Init>
}
 80008b6:	bf00      	nop
 80008b8:	3730      	adds	r7, #48	@ 0x30
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020000 	.word	0x40020000
 80008c8:	40020400 	.word	0x40020400
 80008cc:	40020800 	.word	0x40020800
 80008d0:	40020c00 	.word	0x40020c00
 80008d4:	40021400 	.word	0x40021400
 80008d8:	40021800 	.word	0x40021800

080008dc <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b090      	sub	sp, #64	@ 0x40
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80008ea:	23f0      	movs	r3, #240	@ 0xf0
 80008ec:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80008f2:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80008f6:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80008f8:	2302      	movs	r3, #2
 80008fa:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 80008fc:	23ff      	movs	r3, #255	@ 0xff
 80008fe:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000904:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000908:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800090a:	2305      	movs	r3, #5
 800090c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d101      	bne.n	8000918 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000914:	4b0f      	ldr	r3, [pc, #60]	@ (8000954 <LTCD_Layer_Init+0x78>)
 8000916:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000918:	23f0      	movs	r3, #240	@ 0xf0
 800091a:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 800091c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000920:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000934:	79fa      	ldrb	r2, [r7, #7]
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	4619      	mov	r1, r3
 800093c:	4806      	ldr	r0, [pc, #24]	@ (8000958 <LTCD_Layer_Init+0x7c>)
 800093e:	f004 ff6b 	bl	8005818 <HAL_LTDC_ConfigLayer>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000948:	f000 f95e 	bl	8000c08 <LCD_Error_Handler>
	}
}
 800094c:	bf00      	nop
 800094e:	3740      	adds	r7, #64	@ 0x40
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000190 	.word	0x20000190
 8000958:	200000b4 	.word	0x200000b4

0800095c <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000960:	4b2a      	ldr	r3, [pc, #168]	@ (8000a0c <LTCD__Init+0xb0>)
 8000962:	4a2b      	ldr	r2, [pc, #172]	@ (8000a10 <LTCD__Init+0xb4>)
 8000964:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000966:	4b29      	ldr	r3, [pc, #164]	@ (8000a0c <LTCD__Init+0xb0>)
 8000968:	2209      	movs	r2, #9
 800096a:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 800096c:	4b27      	ldr	r3, [pc, #156]	@ (8000a0c <LTCD__Init+0xb0>)
 800096e:	2201      	movs	r2, #1
 8000970:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000972:	4b26      	ldr	r3, [pc, #152]	@ (8000a0c <LTCD__Init+0xb0>)
 8000974:	221d      	movs	r2, #29
 8000976:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000978:	4b24      	ldr	r3, [pc, #144]	@ (8000a0c <LTCD__Init+0xb0>)
 800097a:	2203      	movs	r2, #3
 800097c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 800097e:	4b23      	ldr	r3, [pc, #140]	@ (8000a0c <LTCD__Init+0xb0>)
 8000980:	f240 120d 	movw	r2, #269	@ 0x10d
 8000984:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000986:	4b21      	ldr	r3, [pc, #132]	@ (8000a0c <LTCD__Init+0xb0>)
 8000988:	f240 1243 	movw	r2, #323	@ 0x143
 800098c:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 800098e:	4b1f      	ldr	r3, [pc, #124]	@ (8000a0c <LTCD__Init+0xb0>)
 8000990:	f240 1217 	movw	r2, #279	@ 0x117
 8000994:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000996:	4b1d      	ldr	r3, [pc, #116]	@ (8000a0c <LTCD__Init+0xb0>)
 8000998:	f240 1247 	movw	r2, #327	@ 0x147
 800099c:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 800099e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <LTCD__Init+0xb0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80009a6:	4b19      	ldr	r3, [pc, #100]	@ (8000a0c <LTCD__Init+0xb0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80009ae:	4b17      	ldr	r3, [pc, #92]	@ (8000a0c <LTCD__Init+0xb0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80009b6:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <LTCD__Init+0xb8>)
 80009b8:	2208      	movs	r2, #8
 80009ba:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80009bc:	4b15      	ldr	r3, [pc, #84]	@ (8000a14 <LTCD__Init+0xb8>)
 80009be:	22c0      	movs	r2, #192	@ 0xc0
 80009c0:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80009c2:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <LTCD__Init+0xb8>)
 80009c4:	2204      	movs	r2, #4
 80009c6:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80009c8:	4b12      	ldr	r3, [pc, #72]	@ (8000a14 <LTCD__Init+0xb8>)
 80009ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80009ce:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80009d0:	4810      	ldr	r0, [pc, #64]	@ (8000a14 <LTCD__Init+0xb8>)
 80009d2:	f005 fd7b 	bl	80064cc <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80009d6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <LTCD__Init+0xb0>)
 80009d8:	2200      	movs	r2, #0
 80009da:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80009dc:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <LTCD__Init+0xb0>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80009e2:	4b0a      	ldr	r3, [pc, #40]	@ (8000a0c <LTCD__Init+0xb0>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80009e8:	4b08      	ldr	r3, [pc, #32]	@ (8000a0c <LTCD__Init+0xb0>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80009ee:	f7ff fead 	bl	800074c <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80009f2:	4806      	ldr	r0, [pc, #24]	@ (8000a0c <LTCD__Init+0xb0>)
 80009f4:	f004 fe40 	bl	8005678 <HAL_LTDC_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 80009fe:	f000 f903 	bl	8000c08 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000a02:	f001 fa81 	bl	8001f08 <ili9341_Init>
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	200000b4 	.word	0x200000b4
 8000a10:	40016800 	.word	0x40016800
 8000a14:	2000015c 	.word	0x2000015c

08000a18 <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	80fb      	strh	r3, [r7, #6]
 8000a22:	460b      	mov	r3, r1
 8000a24:	80bb      	strh	r3, [r7, #4]
 8000a26:	4613      	mov	r3, r2
 8000a28:	807b      	strh	r3, [r7, #2]
	if (x<0||x>239||y<0||y>319) { return; }
 8000a2a:	88fb      	ldrh	r3, [r7, #6]
 8000a2c:	2bef      	cmp	r3, #239	@ 0xef
 8000a2e:	d810      	bhi.n	8000a52 <LCD_Draw_Pixel+0x3a>
 8000a30:	88bb      	ldrh	r3, [r7, #4]
 8000a32:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a36:	d20c      	bcs.n	8000a52 <LCD_Draw_Pixel+0x3a>
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000a38:	88ba      	ldrh	r2, [r7, #4]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	011b      	lsls	r3, r3, #4
 8000a3e:	1a9b      	subs	r3, r3, r2
 8000a40:	011b      	lsls	r3, r3, #4
 8000a42:	461a      	mov	r2, r3
 8000a44:	88fb      	ldrh	r3, [r7, #6]
 8000a46:	4413      	add	r3, r2
 8000a48:	4905      	ldr	r1, [pc, #20]	@ (8000a60 <LCD_Draw_Pixel+0x48>)
 8000a4a:	887a      	ldrh	r2, [r7, #2]
 8000a4c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8000a50:	e000      	b.n	8000a54 <LCD_Draw_Pixel+0x3c>
	if (x<0||x>239||y<0||y>319) { return; }
 8000a52:	bf00      	nop
}
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000190 	.word	0x20000190

08000a64 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	460a      	mov	r2, r1
 8000a6e:	71fb      	strb	r3, [r7, #7]
 8000a70:	4613      	mov	r3, r2
 8000a72:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d10e      	bne.n	8000a98 <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	e007      	b.n	8000a90 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000a80:	4908      	ldr	r1, [pc, #32]	@ (8000aa4 <LCD_Clear+0x40>)
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	88ba      	ldrh	r2, [r7, #4]
 8000a86:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000a96:	d3f3      	bcc.n	8000a80 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000a98:	bf00      	nop
 8000a9a:	3714      	adds	r7, #20
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	20000190 	.word	0x20000190

08000aa8 <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000ab2:	4a04      	ldr	r2, [pc, #16]	@ (8000ac4 <LCD_SetTextColor+0x1c>)
 8000ab4:	88fb      	ldrh	r3, [r7, #6]
 8000ab6:	8013      	strh	r3, [r2, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	20000000 	.word	0x20000000

08000ac8 <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000ad0:	4a04      	ldr	r2, [pc, #16]	@ (8000ae4 <LCD_SetFont+0x1c>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6013      	str	r3, [r2, #0]
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	2000018c 	.word	0x2000018c

08000ae8 <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	603a      	str	r2, [r7, #0]
 8000af2:	80fb      	strh	r3, [r7, #6]
 8000af4:	460b      	mov	r3, r1
 8000af6:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	2300      	movs	r3, #0
 8000afe:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	e04c      	b.n	8000ba0 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000b06:	2300      	movs	r3, #0
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	e03f      	b.n	8000b8c <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	683a      	ldr	r2, [r7, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	881b      	ldrh	r3, [r3, #0]
 8000b16:	4619      	mov	r1, r3
 8000b18:	4b27      	ldr	r3, [pc, #156]	@ (8000bb8 <LCD_Draw_Char+0xd0>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	889b      	ldrh	r3, [r3, #4]
 8000b1e:	4a27      	ldr	r2, [pc, #156]	@ (8000bbc <LCD_Draw_Char+0xd4>)
 8000b20:	fba2 2303 	umull	r2, r3, r2, r3
 8000b24:	08db      	lsrs	r3, r3, #3
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	2280      	movs	r2, #128	@ 0x80
 8000b2c:	409a      	lsls	r2, r3
 8000b2e:	68bb      	ldr	r3, [r7, #8]
 8000b30:	fa42 f303 	asr.w	r3, r2, r3
 8000b34:	400b      	ands	r3, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d104      	bne.n	8000b44 <LCD_Draw_Char+0x5c>
 8000b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb8 <LCD_Draw_Char+0xd0>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	889b      	ldrh	r3, [r3, #4]
 8000b40:	2b0c      	cmp	r3, #12
 8000b42:	d920      	bls.n	8000b86 <LCD_Draw_Char+0x9e>
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	683a      	ldr	r2, [r7, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	881b      	ldrh	r3, [r3, #0]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	fa42 f303 	asr.w	r3, r2, r3
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d104      	bne.n	8000b68 <LCD_Draw_Char+0x80>
 8000b5e:	4b16      	ldr	r3, [pc, #88]	@ (8000bb8 <LCD_Draw_Char+0xd0>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	889b      	ldrh	r3, [r3, #4]
 8000b64:	2b0c      	cmp	r3, #12
 8000b66:	d80e      	bhi.n	8000b86 <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	88fb      	ldrh	r3, [r7, #6]
 8000b6e:	4413      	add	r3, r2
 8000b70:	b298      	uxth	r0, r3
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	88bb      	ldrh	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	b29b      	uxth	r3, r3
 8000b7c:	4a10      	ldr	r2, [pc, #64]	@ (8000bc0 <LCD_Draw_Char+0xd8>)
 8000b7e:	8812      	ldrh	r2, [r2, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	f7ff ff49 	bl	8000a18 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	60bb      	str	r3, [r7, #8]
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <LCD_Draw_Char+0xd0>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	889b      	ldrh	r3, [r3, #4]
 8000b92:	461a      	mov	r2, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d3b8      	bcc.n	8000b0c <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	4b05      	ldr	r3, [pc, #20]	@ (8000bb8 <LCD_Draw_Char+0xd0>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	88db      	ldrh	r3, [r3, #6]
 8000ba6:	461a      	mov	r2, r3
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d3ab      	bcc.n	8000b06 <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000bae:	bf00      	nop
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	2000018c 	.word	0x2000018c
 8000bbc:	aaaaaaab 	.word	0xaaaaaaab
 8000bc0:	20000000 	.word	0x20000000

08000bc4 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	80fb      	strh	r3, [r7, #6]
 8000bce:	460b      	mov	r3, r1
 8000bd0:	80bb      	strh	r3, [r7, #4]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000bd6:	78fb      	ldrb	r3, [r7, #3]
 8000bd8:	3b20      	subs	r3, #32
 8000bda:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000bdc:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <LCD_DisplayChar+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	78fb      	ldrb	r3, [r7, #3]
 8000be4:	4907      	ldr	r1, [pc, #28]	@ (8000c04 <LCD_DisplayChar+0x40>)
 8000be6:	6809      	ldr	r1, [r1, #0]
 8000be8:	88c9      	ldrh	r1, [r1, #6]
 8000bea:	fb01 f303 	mul.w	r3, r1, r3
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	441a      	add	r2, r3
 8000bf2:	88b9      	ldrh	r1, [r7, #4]
 8000bf4:	88fb      	ldrh	r3, [r7, #6]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff ff76 	bl	8000ae8 <LCD_Draw_Char>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	2000018c 	.word	0x2000018c

08000c08 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0c:	b672      	cpsid	i
}
 8000c0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <LCD_Error_Handler+0x8>

08000c14 <InitializeLCDTouch>:
// Touch Functionality   //



void InitializeLCDTouch(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000c18:	f002 fb86 	bl	8003328 <STMPE811_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d001      	beq.n	8000c26 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000c22:	bf00      	nop
 8000c24:	e7fd      	b.n	8000c22 <InitializeLCDTouch+0xe>
  }
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f002 fc62 	bl	80034fc <STMPE811_DetermineTouchPosition>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8000c4a:	79fb      	ldrb	r3, [r7, #7]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f002 fc32 	bl	80034b6 <STMPE811_Read>
 8000c52:	4603      	mov	r3, r0
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	460a      	mov	r2, r1
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8000c6c:	79ba      	ldrb	r2, [r7, #6]
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	4611      	mov	r1, r2
 8000c72:	4618      	mov	r0, r3
 8000c74:	f002 fc30 	bl	80034d8 <STMPE811_Write>
}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <START_SCREEN>:

static Object object;
static uint8_t dummyTable[ROWS][COLS];
static uint32_t randomNumber;

void START_SCREEN(void){
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
	for(int i = 0; i < ROWS; i++){
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	e016      	b.n	8000cba <START_SCREEN+0x3a>
		for(int j = 0; j < COLS; j++) {
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	e00d      	b.n	8000cae <START_SCREEN+0x2e>
			dummyTable[i][j] = 0;
 8000c92:	494f      	ldr	r1, [pc, #316]	@ (8000dd0 <START_SCREEN+0x150>)
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	4613      	mov	r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	18ca      	adds	r2, r1, r3
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < COLS; j++) {
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	3301      	adds	r3, #1
 8000cac:	603b      	str	r3, [r7, #0]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	2b09      	cmp	r3, #9
 8000cb2:	ddee      	ble.n	8000c92 <START_SCREEN+0x12>
	for(int i = 0; i < ROWS; i++){
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	607b      	str	r3, [r7, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b0c      	cmp	r3, #12
 8000cbe:	dde5      	ble.n	8000c8c <START_SCREEN+0xc>
		}
	}

	LCD_Clear(0,LCD_COLOR_BLUE);
 8000cc0:	211f      	movs	r1, #31
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f7ff fece 	bl	8000a64 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000cc8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000ccc:	f7ff feec 	bl	8000aa8 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000cd0:	4840      	ldr	r0, [pc, #256]	@ (8000dd4 <START_SCREEN+0x154>)
 8000cd2:	f7ff fef9 	bl	8000ac8 <LCD_SetFont>
	// TETRIS
	LCD_DisplayChar(70,110,'T');
 8000cd6:	2254      	movs	r2, #84	@ 0x54
 8000cd8:	216e      	movs	r1, #110	@ 0x6e
 8000cda:	2046      	movs	r0, #70	@ 0x46
 8000cdc:	f7ff ff72 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(90,110,'E');
 8000ce0:	2245      	movs	r2, #69	@ 0x45
 8000ce2:	216e      	movs	r1, #110	@ 0x6e
 8000ce4:	205a      	movs	r0, #90	@ 0x5a
 8000ce6:	f7ff ff6d 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(110,110,'T');
 8000cea:	2254      	movs	r2, #84	@ 0x54
 8000cec:	216e      	movs	r1, #110	@ 0x6e
 8000cee:	206e      	movs	r0, #110	@ 0x6e
 8000cf0:	f7ff ff68 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(130,110,'R');
 8000cf4:	2252      	movs	r2, #82	@ 0x52
 8000cf6:	216e      	movs	r1, #110	@ 0x6e
 8000cf8:	2082      	movs	r0, #130	@ 0x82
 8000cfa:	f7ff ff63 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(150,110,'I');
 8000cfe:	2249      	movs	r2, #73	@ 0x49
 8000d00:	216e      	movs	r1, #110	@ 0x6e
 8000d02:	2096      	movs	r0, #150	@ 0x96
 8000d04:	f7ff ff5e 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(170,110,'S');
 8000d08:	2253      	movs	r2, #83	@ 0x53
 8000d0a:	216e      	movs	r1, #110	@ 0x6e
 8000d0c:	20aa      	movs	r0, #170	@ 0xaa
 8000d0e:	f7ff ff59 	bl	8000bc4 <LCD_DisplayChar>
	// PRESS
	LCD_DisplayChar(80,130,'P');
 8000d12:	2250      	movs	r2, #80	@ 0x50
 8000d14:	2182      	movs	r1, #130	@ 0x82
 8000d16:	2050      	movs	r0, #80	@ 0x50
 8000d18:	f7ff ff54 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(100,130,'R');
 8000d1c:	2252      	movs	r2, #82	@ 0x52
 8000d1e:	2182      	movs	r1, #130	@ 0x82
 8000d20:	2064      	movs	r0, #100	@ 0x64
 8000d22:	f7ff ff4f 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(120,130,'E');
 8000d26:	2245      	movs	r2, #69	@ 0x45
 8000d28:	2182      	movs	r1, #130	@ 0x82
 8000d2a:	2078      	movs	r0, #120	@ 0x78
 8000d2c:	f7ff ff4a 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(140,130,'S');
 8000d30:	2253      	movs	r2, #83	@ 0x53
 8000d32:	2182      	movs	r1, #130	@ 0x82
 8000d34:	208c      	movs	r0, #140	@ 0x8c
 8000d36:	f7ff ff45 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(160,130,'S');
 8000d3a:	2253      	movs	r2, #83	@ 0x53
 8000d3c:	2182      	movs	r1, #130	@ 0x82
 8000d3e:	20a0      	movs	r0, #160	@ 0xa0
 8000d40:	f7ff ff40 	bl	8000bc4 <LCD_DisplayChar>
	// BUTTON
	LCD_DisplayChar(70,150,'B');
 8000d44:	2242      	movs	r2, #66	@ 0x42
 8000d46:	2196      	movs	r1, #150	@ 0x96
 8000d48:	2046      	movs	r0, #70	@ 0x46
 8000d4a:	f7ff ff3b 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(90,150,'U');
 8000d4e:	2255      	movs	r2, #85	@ 0x55
 8000d50:	2196      	movs	r1, #150	@ 0x96
 8000d52:	205a      	movs	r0, #90	@ 0x5a
 8000d54:	f7ff ff36 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(110,150,'T');
 8000d58:	2254      	movs	r2, #84	@ 0x54
 8000d5a:	2196      	movs	r1, #150	@ 0x96
 8000d5c:	206e      	movs	r0, #110	@ 0x6e
 8000d5e:	f7ff ff31 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(130,150,'T');
 8000d62:	2254      	movs	r2, #84	@ 0x54
 8000d64:	2196      	movs	r1, #150	@ 0x96
 8000d66:	2082      	movs	r0, #130	@ 0x82
 8000d68:	f7ff ff2c 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(150,150,'O');
 8000d6c:	224f      	movs	r2, #79	@ 0x4f
 8000d6e:	2196      	movs	r1, #150	@ 0x96
 8000d70:	2096      	movs	r0, #150	@ 0x96
 8000d72:	f7ff ff27 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(170,150,'N');
 8000d76:	224e      	movs	r2, #78	@ 0x4e
 8000d78:	2196      	movs	r1, #150	@ 0x96
 8000d7a:	20aa      	movs	r0, #170	@ 0xaa
 8000d7c:	f7ff ff22 	bl	8000bc4 <LCD_DisplayChar>
	// TO
	LCD_DisplayChar(110,170,'T');
 8000d80:	2254      	movs	r2, #84	@ 0x54
 8000d82:	21aa      	movs	r1, #170	@ 0xaa
 8000d84:	206e      	movs	r0, #110	@ 0x6e
 8000d86:	f7ff ff1d 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(130,170,'O');
 8000d8a:	224f      	movs	r2, #79	@ 0x4f
 8000d8c:	21aa      	movs	r1, #170	@ 0xaa
 8000d8e:	2082      	movs	r0, #130	@ 0x82
 8000d90:	f7ff ff18 	bl	8000bc4 <LCD_DisplayChar>
	// START
	LCD_DisplayChar(80,190,'S');
 8000d94:	2253      	movs	r2, #83	@ 0x53
 8000d96:	21be      	movs	r1, #190	@ 0xbe
 8000d98:	2050      	movs	r0, #80	@ 0x50
 8000d9a:	f7ff ff13 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(100,190,'T');
 8000d9e:	2254      	movs	r2, #84	@ 0x54
 8000da0:	21be      	movs	r1, #190	@ 0xbe
 8000da2:	2064      	movs	r0, #100	@ 0x64
 8000da4:	f7ff ff0e 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(120,190,'A');
 8000da8:	2241      	movs	r2, #65	@ 0x41
 8000daa:	21be      	movs	r1, #190	@ 0xbe
 8000dac:	2078      	movs	r0, #120	@ 0x78
 8000dae:	f7ff ff09 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(140,190,'R');
 8000db2:	2252      	movs	r2, #82	@ 0x52
 8000db4:	21be      	movs	r1, #190	@ 0xbe
 8000db6:	208c      	movs	r0, #140	@ 0x8c
 8000db8:	f7ff ff04 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(160,190,'T');
 8000dbc:	2254      	movs	r2, #84	@ 0x54
 8000dbe:	21be      	movs	r1, #190	@ 0xbe
 8000dc0:	20a0      	movs	r0, #160	@ 0xa0
 8000dc2:	f7ff feff 	bl	8000bc4 <LCD_DisplayChar>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2002599c 	.word	0x2002599c
 8000dd4:	20000004 	.word	0x20000004

08000dd8 <GAME_OVER>:

void GAME_OVER(uint32_t total_time) { // code for displaying game over
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
	LCD_Clear(0,LCD_COLOR_BLUE);
 8000de0:	211f      	movs	r1, #31
 8000de2:	2000      	movs	r0, #0
 8000de4:	f7ff fe3e 	bl	8000a64 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000de8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000dec:	f7ff fe5c 	bl	8000aa8 <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000df0:	4854      	ldr	r0, [pc, #336]	@ (8000f44 <GAME_OVER+0x16c>)
 8000df2:	f7ff fe69 	bl	8000ac8 <LCD_SetFont>

	// GAME
	LCD_DisplayChar(90,100,'G');
 8000df6:	2247      	movs	r2, #71	@ 0x47
 8000df8:	2164      	movs	r1, #100	@ 0x64
 8000dfa:	205a      	movs	r0, #90	@ 0x5a
 8000dfc:	f7ff fee2 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(110,100,'A');
 8000e00:	2241      	movs	r2, #65	@ 0x41
 8000e02:	2164      	movs	r1, #100	@ 0x64
 8000e04:	206e      	movs	r0, #110	@ 0x6e
 8000e06:	f7ff fedd 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(130,100,'M');
 8000e0a:	224d      	movs	r2, #77	@ 0x4d
 8000e0c:	2164      	movs	r1, #100	@ 0x64
 8000e0e:	2082      	movs	r0, #130	@ 0x82
 8000e10:	f7ff fed8 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(150,100,'E');
 8000e14:	2245      	movs	r2, #69	@ 0x45
 8000e16:	2164      	movs	r1, #100	@ 0x64
 8000e18:	2096      	movs	r0, #150	@ 0x96
 8000e1a:	f7ff fed3 	bl	8000bc4 <LCD_DisplayChar>
	// OVER
	LCD_DisplayChar(90,130,'O');
 8000e1e:	224f      	movs	r2, #79	@ 0x4f
 8000e20:	2182      	movs	r1, #130	@ 0x82
 8000e22:	205a      	movs	r0, #90	@ 0x5a
 8000e24:	f7ff fece 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(110,130,'V');
 8000e28:	2256      	movs	r2, #86	@ 0x56
 8000e2a:	2182      	movs	r1, #130	@ 0x82
 8000e2c:	206e      	movs	r0, #110	@ 0x6e
 8000e2e:	f7ff fec9 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(130,130,'E');
 8000e32:	2245      	movs	r2, #69	@ 0x45
 8000e34:	2182      	movs	r1, #130	@ 0x82
 8000e36:	2082      	movs	r0, #130	@ 0x82
 8000e38:	f7ff fec4 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(150,130,'R');
 8000e3c:	2252      	movs	r2, #82	@ 0x52
 8000e3e:	2182      	movs	r1, #130	@ 0x82
 8000e40:	2096      	movs	r0, #150	@ 0x96
 8000e42:	f7ff febf 	bl	8000bc4 <LCD_DisplayChar>
	// TIME:
	LCD_DisplayChar(85,160,'T');
 8000e46:	2254      	movs	r2, #84	@ 0x54
 8000e48:	21a0      	movs	r1, #160	@ 0xa0
 8000e4a:	2055      	movs	r0, #85	@ 0x55
 8000e4c:	f7ff feba 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(105,160,'I');
 8000e50:	2249      	movs	r2, #73	@ 0x49
 8000e52:	21a0      	movs	r1, #160	@ 0xa0
 8000e54:	2069      	movs	r0, #105	@ 0x69
 8000e56:	f7ff feb5 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(125,160,'M');
 8000e5a:	224d      	movs	r2, #77	@ 0x4d
 8000e5c:	21a0      	movs	r1, #160	@ 0xa0
 8000e5e:	207d      	movs	r0, #125	@ 0x7d
 8000e60:	f7ff feb0 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(145,160,'E');
 8000e64:	2245      	movs	r2, #69	@ 0x45
 8000e66:	21a0      	movs	r1, #160	@ 0xa0
 8000e68:	2091      	movs	r0, #145	@ 0x91
 8000e6a:	f7ff feab 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(165,160,':');
 8000e6e:	223a      	movs	r2, #58	@ 0x3a
 8000e70:	21a0      	movs	r1, #160	@ 0xa0
 8000e72:	20a5      	movs	r0, #165	@ 0xa5
 8000e74:	f7ff fea6 	bl	8000bc4 <LCD_DisplayChar>

	//Timer to keep tract
	// t_on = ARR / 16MHz
	total_time = total_time / 1599999;
 8000e78:	687a      	ldr	r2, [r7, #4]
 8000e7a:	4b33      	ldr	r3, [pc, #204]	@ (8000f48 <GAME_OVER+0x170>)
 8000e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8000e80:	1ad2      	subs	r2, r2, r3
 8000e82:	0852      	lsrs	r2, r2, #1
 8000e84:	4413      	add	r3, r2
 8000e86:	0d1b      	lsrs	r3, r3, #20
 8000e88:	607b      	str	r3, [r7, #4]
	uint32_t minutes = total_time / 60;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a2f      	ldr	r2, [pc, #188]	@ (8000f4c <GAME_OVER+0x174>)
 8000e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e92:	095b      	lsrs	r3, r3, #5
 8000e94:	617b      	str	r3, [r7, #20]
	uint32_t seconds = total_time % 60;
 8000e96:	687a      	ldr	r2, [r7, #4]
 8000e98:	4b2c      	ldr	r3, [pc, #176]	@ (8000f4c <GAME_OVER+0x174>)
 8000e9a:	fba3 1302 	umull	r1, r3, r3, r2
 8000e9e:	0959      	lsrs	r1, r3, #5
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	011b      	lsls	r3, r3, #4
 8000ea4:	1a5b      	subs	r3, r3, r1
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	613b      	str	r3, [r7, #16]

	char m1 = '0' + (minutes / 10);  // Tens place of minutes
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	4a28      	ldr	r2, [pc, #160]	@ (8000f50 <GAME_OVER+0x178>)
 8000eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb4:	08db      	lsrs	r3, r3, #3
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	3330      	adds	r3, #48	@ 0x30
 8000eba:	73fb      	strb	r3, [r7, #15]
	char m2 = '0' + (minutes % 10);  // Units place of minutes
 8000ebc:	6979      	ldr	r1, [r7, #20]
 8000ebe:	4b24      	ldr	r3, [pc, #144]	@ (8000f50 <GAME_OVER+0x178>)
 8000ec0:	fba3 2301 	umull	r2, r3, r3, r1
 8000ec4:	08da      	lsrs	r2, r3, #3
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	1aca      	subs	r2, r1, r3
 8000ed0:	b2d3      	uxtb	r3, r2
 8000ed2:	3330      	adds	r3, #48	@ 0x30
 8000ed4:	73bb      	strb	r3, [r7, #14]
	char s1 = '0' + (seconds / 10);  // Tens place of seconds
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8000f50 <GAME_OVER+0x178>)
 8000eda:	fba2 2303 	umull	r2, r3, r2, r3
 8000ede:	08db      	lsrs	r3, r3, #3
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	3330      	adds	r3, #48	@ 0x30
 8000ee4:	737b      	strb	r3, [r7, #13]
	char s2 = '0' + (seconds % 10);  // Units place of seconds
 8000ee6:	6939      	ldr	r1, [r7, #16]
 8000ee8:	4b19      	ldr	r3, [pc, #100]	@ (8000f50 <GAME_OVER+0x178>)
 8000eea:	fba3 2301 	umull	r2, r3, r3, r1
 8000eee:	08da      	lsrs	r2, r3, #3
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	009b      	lsls	r3, r3, #2
 8000ef4:	4413      	add	r3, r2
 8000ef6:	005b      	lsls	r3, r3, #1
 8000ef8:	1aca      	subs	r2, r1, r3
 8000efa:	b2d3      	uxtb	r3, r2
 8000efc:	3330      	adds	r3, #48	@ 0x30
 8000efe:	733b      	strb	r3, [r7, #12]

	LCD_DisplayChar(85,190,m1);
 8000f00:	7bfb      	ldrb	r3, [r7, #15]
 8000f02:	461a      	mov	r2, r3
 8000f04:	21be      	movs	r1, #190	@ 0xbe
 8000f06:	2055      	movs	r0, #85	@ 0x55
 8000f08:	f7ff fe5c 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(105,190,m2);
 8000f0c:	7bbb      	ldrb	r3, [r7, #14]
 8000f0e:	461a      	mov	r2, r3
 8000f10:	21be      	movs	r1, #190	@ 0xbe
 8000f12:	2069      	movs	r0, #105	@ 0x69
 8000f14:	f7ff fe56 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(125,190,':');
 8000f18:	223a      	movs	r2, #58	@ 0x3a
 8000f1a:	21be      	movs	r1, #190	@ 0xbe
 8000f1c:	207d      	movs	r0, #125	@ 0x7d
 8000f1e:	f7ff fe51 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(145,190,s1);
 8000f22:	7b7b      	ldrb	r3, [r7, #13]
 8000f24:	461a      	mov	r2, r3
 8000f26:	21be      	movs	r1, #190	@ 0xbe
 8000f28:	2091      	movs	r0, #145	@ 0x91
 8000f2a:	f7ff fe4b 	bl	8000bc4 <LCD_DisplayChar>
	LCD_DisplayChar(165,190,s2);
 8000f2e:	7b3b      	ldrb	r3, [r7, #12]
 8000f30:	461a      	mov	r2, r3
 8000f32:	21be      	movs	r1, #190	@ 0xbe
 8000f34:	20a5      	movs	r0, #165	@ 0xa5
 8000f36:	f7ff fe45 	bl	8000bc4 <LCD_DisplayChar>
}
 8000f3a:	bf00      	nop
 8000f3c:	3718      	adds	r7, #24
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	20000004 	.word	0x20000004
 8000f48:	4f8b664d 	.word	0x4f8b664d
 8000f4c:	88888889 	.word	0x88888889
 8000f50:	cccccccd 	.word	0xcccccccd

08000f54 <RND_NUM>:

void RND_NUM(void) { // issue here
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
	uint32_t RND;
	RNG_HandleTypeDef hrng;
	hrng.Instance = RNG;
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f98 <RND_NUM+0x44>)
 8000f5c:	607b      	str	r3, [r7, #4]
	if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	4618      	mov	r0, r3
 8000f62:	f005 fc73 	bl	800684c <HAL_RNG_Init>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <RND_NUM+0x1c>
	{
		while(1);
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <RND_NUM+0x18>
	}
    if (HAL_RNG_GenerateRandomNumber(&hrng, &RND) != HAL_OK) {
 8000f70:	f107 0214 	add.w	r2, r7, #20
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f005 fc91 	bl	80068a0 <HAL_RNG_GenerateRandomNumber>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d002      	beq.n	8000f8a <RND_NUM+0x36>
	    printf("Error Generating Random Number");
 8000f84:	4805      	ldr	r0, [pc, #20]	@ (8000f9c <RND_NUM+0x48>)
 8000f86:	f007 f825 	bl	8007fd4 <iprintf>
	}
	randomNumber = RND;
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	4a04      	ldr	r2, [pc, #16]	@ (8000fa0 <RND_NUM+0x4c>)
 8000f8e:	6013      	str	r3, [r2, #0]
}
 8000f90:	bf00      	nop
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	50060800 	.word	0x50060800
 8000f9c:	08008db0 	.word	0x08008db0
 8000fa0:	20025a20 	.word	0x20025a20

08000fa4 <check_State>:

uint8_t check_State(void) {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b088      	sub	sp, #32
 8000fa8:	af00      	add	r7, sp, #0
	//CASES
	//	1. Hits bottom of screen -> Update Matrix, make new object
	//	2. Collision with a 1
	//		a. Is it at the top of the screen -> Update Matrix, end game
	//		b. Hits other block -> Update Matrix, make new object
	if((object.originbit.y == 0) || (object.suboriginbit_0.y == 0) ||
 8000faa:	4b57      	ldr	r3, [pc, #348]	@ (8001108 <check_State+0x164>)
 8000fac:	78db      	ldrb	r3, [r3, #3]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d00b      	beq.n	8000fca <check_State+0x26>
 8000fb2:	4b55      	ldr	r3, [pc, #340]	@ (8001108 <check_State+0x164>)
 8000fb4:	795b      	ldrb	r3, [r3, #5]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d007      	beq.n	8000fca <check_State+0x26>
	   (object.suboriginbit_1.y == 0) || (object.suboriginbit_1.y == 0)) {
 8000fba:	4b53      	ldr	r3, [pc, #332]	@ (8001108 <check_State+0x164>)
 8000fbc:	79db      	ldrb	r3, [r3, #7]
	if((object.originbit.y == 0) || (object.suboriginbit_0.y == 0) ||
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <check_State+0x26>
	   (object.suboriginbit_1.y == 0) || (object.suboriginbit_1.y == 0)) {
 8000fc2:	4b51      	ldr	r3, [pc, #324]	@ (8001108 <check_State+0x164>)
 8000fc4:	79db      	ldrb	r3, [r3, #7]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d108      	bne.n	8000fdc <check_State+0x38>
		Matrix_update();
 8000fca:	f000 ff1f 	bl	8001e0c <Matrix_update>
		object_Select();
 8000fce:	f000 f8a5 	bl	800111c <object_Select>
		printf("Hit bottom\n");
 8000fd2:	484e      	ldr	r0, [pc, #312]	@ (800110c <check_State+0x168>)
 8000fd4:	f007 f866 	bl	80080a4 <puts>
		return 0; // 0 -> Hit bottom
 8000fd8:	2300      	movs	r3, #0
 8000fda:	e091      	b.n	8001100 <check_State+0x15c>

	} else if((dummyTable[object.originbit.y - 1][object.originbit.x] == 1) ||
 8000fdc:	4b4a      	ldr	r3, [pc, #296]	@ (8001108 <check_State+0x164>)
 8000fde:	78db      	ldrb	r3, [r3, #3]
 8000fe0:	1e5a      	subs	r2, r3, #1
 8000fe2:	4b49      	ldr	r3, [pc, #292]	@ (8001108 <check_State+0x164>)
 8000fe4:	789b      	ldrb	r3, [r3, #2]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	4949      	ldr	r1, [pc, #292]	@ (8001110 <check_State+0x16c>)
 8000fea:	4613      	mov	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	4413      	add	r3, r2
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	440b      	add	r3, r1
 8000ff4:	4403      	add	r3, r0
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d02f      	beq.n	800105c <check_State+0xb8>
			  (dummyTable[object.suboriginbit_0.y - 1][object.suboriginbit_0.x] == 1) ||
 8000ffc:	4b42      	ldr	r3, [pc, #264]	@ (8001108 <check_State+0x164>)
 8000ffe:	795b      	ldrb	r3, [r3, #5]
 8001000:	1e5a      	subs	r2, r3, #1
 8001002:	4b41      	ldr	r3, [pc, #260]	@ (8001108 <check_State+0x164>)
 8001004:	791b      	ldrb	r3, [r3, #4]
 8001006:	4618      	mov	r0, r3
 8001008:	4941      	ldr	r1, [pc, #260]	@ (8001110 <check_State+0x16c>)
 800100a:	4613      	mov	r3, r2
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	4413      	add	r3, r2
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	440b      	add	r3, r1
 8001014:	4403      	add	r3, r0
 8001016:	781b      	ldrb	r3, [r3, #0]
	} else if((dummyTable[object.originbit.y - 1][object.originbit.x] == 1) ||
 8001018:	2b01      	cmp	r3, #1
 800101a:	d01f      	beq.n	800105c <check_State+0xb8>
			  (dummyTable[object.suboriginbit_1.y - 1][object.suboriginbit_1.x] == 1) ||
 800101c:	4b3a      	ldr	r3, [pc, #232]	@ (8001108 <check_State+0x164>)
 800101e:	79db      	ldrb	r3, [r3, #7]
 8001020:	1e5a      	subs	r2, r3, #1
 8001022:	4b39      	ldr	r3, [pc, #228]	@ (8001108 <check_State+0x164>)
 8001024:	799b      	ldrb	r3, [r3, #6]
 8001026:	4618      	mov	r0, r3
 8001028:	4939      	ldr	r1, [pc, #228]	@ (8001110 <check_State+0x16c>)
 800102a:	4613      	mov	r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	4413      	add	r3, r2
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	440b      	add	r3, r1
 8001034:	4403      	add	r3, r0
 8001036:	781b      	ldrb	r3, [r3, #0]
			  (dummyTable[object.suboriginbit_0.y - 1][object.suboriginbit_0.x] == 1) ||
 8001038:	2b01      	cmp	r3, #1
 800103a:	d00f      	beq.n	800105c <check_State+0xb8>
			  (dummyTable[object.suboriginbit_2.y - 1][object.suboriginbit_2.x] == 1) ){
 800103c:	4b32      	ldr	r3, [pc, #200]	@ (8001108 <check_State+0x164>)
 800103e:	7a5b      	ldrb	r3, [r3, #9]
 8001040:	1e5a      	subs	r2, r3, #1
 8001042:	4b31      	ldr	r3, [pc, #196]	@ (8001108 <check_State+0x164>)
 8001044:	7a1b      	ldrb	r3, [r3, #8]
 8001046:	4618      	mov	r0, r3
 8001048:	4931      	ldr	r1, [pc, #196]	@ (8001110 <check_State+0x16c>)
 800104a:	4613      	mov	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	440b      	add	r3, r1
 8001054:	4403      	add	r3, r0
 8001056:	781b      	ldrb	r3, [r3, #0]
			  (dummyTable[object.suboriginbit_1.y - 1][object.suboriginbit_1.x] == 1) ||
 8001058:	2b01      	cmp	r3, #1
 800105a:	d150      	bne.n	80010fe <check_State+0x15a>
		uint8_t rowNonZeros[ROWS] = {0};
 800105c:	2300      	movs	r3, #0
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	721a      	strb	r2, [r3, #8]
		uint32_t compareRow = 0x3FF; // Mask to check the first 10 bits
 800106a:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800106e:	613b      	str	r3, [r7, #16]
		for (int i = 0; i < ROWS; i++) {
 8001070:	2300      	movs	r3, #0
 8001072:	61fb      	str	r3, [r7, #28]
 8001074:	e020      	b.n	80010b8 <check_State+0x114>
		    for (int j = 0; j < COLS; j++) {
 8001076:	2300      	movs	r3, #0
 8001078:	61bb      	str	r3, [r7, #24]
 800107a:	e017      	b.n	80010ac <check_State+0x108>
		        if (dummyTable[i][j] & compareRow) {  // Check if at least one bit in dummyTable[i][j] is non-zero
 800107c:	4924      	ldr	r1, [pc, #144]	@ (8001110 <check_State+0x16c>)
 800107e:	69fa      	ldr	r2, [r7, #28]
 8001080:	4613      	mov	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	4413      	add	r3, r2
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	18ca      	adds	r2, r1, r3
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	4413      	add	r3, r2
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	461a      	mov	r2, r3
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	4013      	ands	r3, r2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d005      	beq.n	80010a6 <check_State+0x102>
		            rowNonZeros[i] = 1;
 800109a:	463a      	mov	r2, r7
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	4413      	add	r3, r2
 80010a0:	2201      	movs	r2, #1
 80010a2:	701a      	strb	r2, [r3, #0]
		            break;  // Exit the inner loop once we've found a non-zero bit
 80010a4:	e005      	b.n	80010b2 <check_State+0x10e>
		    for (int j = 0; j < COLS; j++) {
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	3301      	adds	r3, #1
 80010aa:	61bb      	str	r3, [r7, #24]
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	2b09      	cmp	r3, #9
 80010b0:	dde4      	ble.n	800107c <check_State+0xd8>
		for (int i = 0; i < ROWS; i++) {
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3301      	adds	r3, #1
 80010b6:	61fb      	str	r3, [r7, #28]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	2b0c      	cmp	r3, #12
 80010bc:	dddb      	ble.n	8001076 <check_State+0xd2>
		        }
		    }
		}

		for (int i = 0; i < ROWS; i++) {
 80010be:	2300      	movs	r3, #0
 80010c0:	617b      	str	r3, [r7, #20]
 80010c2:	e011      	b.n	80010e8 <check_State+0x144>
		    if (rowNonZeros[i] == 0) {
 80010c4:	463a      	mov	r2, r7
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	4413      	add	r3, r2
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d108      	bne.n	80010e2 <check_State+0x13e>
		    	Matrix_update();
 80010d0:	f000 fe9c 	bl	8001e0c <Matrix_update>
		    	object_Select();
 80010d4:	f000 f822 	bl	800111c <object_Select>
		    	printf("Collision\n");
 80010d8:	480e      	ldr	r0, [pc, #56]	@ (8001114 <check_State+0x170>)
 80010da:	f006 ffe3 	bl	80080a4 <puts>
		        return 1; // 1 -> Not all rows have non-zero values
 80010de:	2301      	movs	r3, #1
 80010e0:	e00e      	b.n	8001100 <check_State+0x15c>
		for (int i = 0; i < ROWS; i++) {
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	3301      	adds	r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	2b0c      	cmp	r3, #12
 80010ec:	ddea      	ble.n	80010c4 <check_State+0x120>
		    }
		}
		removeSchedulerEvent(MATRIX_UPDATE_EVENT);
 80010ee:	2004      	movs	r0, #4
 80010f0:	f000 fef6 	bl	8001ee0 <removeSchedulerEvent>
		printf("Game End\n");
 80010f4:	4808      	ldr	r0, [pc, #32]	@ (8001118 <check_State+0x174>)
 80010f6:	f006 ffd5 	bl	80080a4 <puts>
		return 2; // 2-> Collision with Block to end game
 80010fa:	2302      	movs	r3, #2
 80010fc:	e000      	b.n	8001100 <check_State+0x15c>

	} else {
		return 3; // 3-> Safe operation
 80010fe:	2303      	movs	r3, #3
	}
}
 8001100:	4618      	mov	r0, r3
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20025990 	.word	0x20025990
 800110c:	08008dd0 	.word	0x08008dd0
 8001110:	2002599c 	.word	0x2002599c
 8001114:	08008ddc 	.word	0x08008ddc
 8001118:	08008de8 	.word	0x08008de8

0800111c <object_Select>:

void object_Select(void){
 800111c:	b580      	push	{r7, lr}
 800111e:	b096      	sub	sp, #88	@ 0x58
 8001120:	af00      	add	r7, sp, #0
	RND_NUM();
 8001122:	f7ff ff17 	bl	8000f54 <RND_NUM>
	randomNumber = randomNumber % 7;
 8001126:	4b48      	ldr	r3, [pc, #288]	@ (8001248 <object_Select+0x12c>)
 8001128:	6819      	ldr	r1, [r3, #0]
 800112a:	4b48      	ldr	r3, [pc, #288]	@ (800124c <object_Select+0x130>)
 800112c:	fba3 2301 	umull	r2, r3, r3, r1
 8001130:	1aca      	subs	r2, r1, r3
 8001132:	0852      	lsrs	r2, r2, #1
 8001134:	4413      	add	r3, r2
 8001136:	089a      	lsrs	r2, r3, #2
 8001138:	4613      	mov	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	1a9b      	subs	r3, r3, r2
 800113e:	1aca      	subs	r2, r1, r3
 8001140:	4b41      	ldr	r3, [pc, #260]	@ (8001248 <object_Select+0x12c>)
 8001142:	601a      	str	r2, [r3, #0]
	switch(randomNumber) {
 8001144:	4b40      	ldr	r3, [pc, #256]	@ (8001248 <object_Select+0x12c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b06      	cmp	r3, #6
 800114a:	d878      	bhi.n	800123e <object_Select+0x122>
 800114c:	a201      	add	r2, pc, #4	@ (adr r2, 8001154 <object_Select+0x38>)
 800114e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001152:	bf00      	nop
 8001154:	08001171 	.word	0x08001171
 8001158:	0800118f 	.word	0x0800118f
 800115c:	080011ad 	.word	0x080011ad
 8001160:	080011cb 	.word	0x080011cb
 8001164:	080011e9 	.word	0x080011e9
 8001168:	08001207 	.word	0x08001207
 800116c:	08001225 	.word	0x08001225
		case(ORICKY):{
			Object Oricky = {
 8001170:	4a37      	ldr	r2, [pc, #220]	@ (8001250 <object_Select+0x134>)
 8001172:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001176:	ca07      	ldmia	r2, {r0, r1, r2}
 8001178:	c303      	stmia	r3!, {r0, r1}
 800117a:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 },     // 1 [1] 1
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Oricky;
 800117c:	4b35      	ldr	r3, [pc, #212]	@ (8001254 <object_Select+0x138>)
 800117e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001182:	ca07      	ldmia	r2, {r0, r1, r2}
 8001184:	c303      	stmia	r3!, {r0, r1}
 8001186:	801a      	strh	r2, [r3, #0]
		    transform_rotation();
 8001188:	f000 f924 	bl	80013d4 <transform_rotation>
			break;
 800118c:	e057      	b.n	800123e <object_Select+0x122>
		}
		case(BRICKY):{
			Object Bricky = {
 800118e:	4a32      	ldr	r2, [pc, #200]	@ (8001258 <object_Select+0x13c>)
 8001190:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001194:	ca07      	ldmia	r2, {r0, r1, r2}
 8001196:	c303      	stmia	r3!, {r0, r1}
 8001198:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 },     // 1 [1] 1
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Bricky;
 800119a:	4b2e      	ldr	r3, [pc, #184]	@ (8001254 <object_Select+0x138>)
 800119c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80011a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80011a2:	c303      	stmia	r3!, {r0, r1}
 80011a4:	801a      	strh	r2, [r3, #0]
			transform_rotation();
 80011a6:	f000 f915 	bl	80013d4 <transform_rotation>
			break;
 80011aa:	e048      	b.n	800123e <object_Select+0x122>
		}
		case(CLEVELAND):{
			Object Cleveland = {
 80011ac:	4a2b      	ldr	r2, [pc, #172]	@ (800125c <object_Select+0x140>)
 80011ae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80011b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011b4:	c303      	stmia	r3!, {r0, r1}
 80011b6:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, 	  //    [1] 1
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Cleveland;
 80011b8:	4b26      	ldr	r3, [pc, #152]	@ (8001254 <object_Select+0x138>)
 80011ba:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80011be:	ca07      	ldmia	r2, {r0, r1, r2}
 80011c0:	c303      	stmia	r3!, {r0, r1}
 80011c2:	801a      	strh	r2, [r3, #0]
		    transform_rotation();
 80011c4:	f000 f906 	bl	80013d4 <transform_rotation>
			break;
 80011c8:	e039      	b.n	800123e <object_Select+0x122>
		}
		case(RHODE):{
			Object Rhode = {
 80011ca:	4a25      	ldr	r2, [pc, #148]	@ (8001260 <object_Select+0x144>)
 80011cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80011d2:	c303      	stmia	r3!, {r0, r1}
 80011d4:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 },     //     1 [1]
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Rhode;
 80011d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001254 <object_Select+0x138>)
 80011d8:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80011dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80011de:	c303      	stmia	r3!, {r0, r1}
 80011e0:	801a      	strh	r2, [r3, #0]
			transform_rotation();
 80011e2:	f000 f8f7 	bl	80013d4 <transform_rotation>
			break;
 80011e6:	e02a      	b.n	800123e <object_Select+0x122>
		}
		case(HERO):{
			Object Hero = {
 80011e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001264 <object_Select+0x148>)
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f0:	c303      	stmia	r3!, {r0, r1}
 80011f2:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, 			 //  1 1 [1] 1
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Hero;
 80011f4:	4b17      	ldr	r3, [pc, #92]	@ (8001254 <object_Select+0x138>)
 80011f6:	f107 021c 	add.w	r2, r7, #28
 80011fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80011fc:	c303      	stmia	r3!, {r0, r1}
 80011fe:	801a      	strh	r2, [r3, #0]
			transform_rotation();
 8001200:	f000 f8e8 	bl	80013d4 <transform_rotation>
			break;
 8001204:	e01b      	b.n	800123e <object_Select+0x122>
		}
		case(TEEWEE):{
			Object Teewee = {
 8001206:	4a18      	ldr	r2, [pc, #96]	@ (8001268 <object_Select+0x14c>)
 8001208:	f107 0310 	add.w	r3, r7, #16
 800120c:	ca07      	ldmia	r2, {r0, r1, r2}
 800120e:	c303      	stmia	r3!, {r0, r1}
 8001210:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, 			 	// 1 [1] 1
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Teewee;
 8001212:	4b10      	ldr	r3, [pc, #64]	@ (8001254 <object_Select+0x138>)
 8001214:	f107 0210 	add.w	r2, r7, #16
 8001218:	ca07      	ldmia	r2, {r0, r1, r2}
 800121a:	c303      	stmia	r3!, {r0, r1}
 800121c:	801a      	strh	r2, [r3, #0]
			transform_rotation();
 800121e:	f000 f8d9 	bl	80013d4 <transform_rotation>
			break;
 8001222:	e00c      	b.n	800123e <object_Select+0x122>
		}
		case(SMASHBOY):{
			Object Smashboy = {
 8001224:	4a11      	ldr	r2, [pc, #68]	@ (800126c <object_Select+0x150>)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	ca07      	ldmia	r2, {r0, r1, r2}
 800122a:	c303      	stmia	r3!, {r0, r1}
 800122c:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, 			 	//[1] 1
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Smashboy;
 800122e:	4b09      	ldr	r3, [pc, #36]	@ (8001254 <object_Select+0x138>)
 8001230:	1d3a      	adds	r2, r7, #4
 8001232:	ca07      	ldmia	r2, {r0, r1, r2}
 8001234:	c303      	stmia	r3!, {r0, r1}
 8001236:	801a      	strh	r2, [r3, #0]
			transform_rotation();
 8001238:	f000 f8cc 	bl	80013d4 <transform_rotation>
			break;
 800123c:	bf00      	nop
		}

	}

}
 800123e:	bf00      	nop
 8001240:	3758      	adds	r7, #88	@ 0x58
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20025a20 	.word	0x20025a20
 800124c:	24924925 	.word	0x24924925
 8001250:	08008df4 	.word	0x08008df4
 8001254:	20025990 	.word	0x20025990
 8001258:	08008e00 	.word	0x08008e00
 800125c:	08008e0c 	.word	0x08008e0c
 8001260:	08008e18 	.word	0x08008e18
 8001264:	08008e24 	.word	0x08008e24
 8001268:	08008e30 	.word	0x08008e30
 800126c:	08008e3c 	.word	0x08008e3c

08001270 <shift_Left>:


void shift_Left(void){
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
	Object temp = object;
 8001276:	4a1c      	ldr	r2, [pc, #112]	@ (80012e8 <shift_Left+0x78>)
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	ca07      	ldmia	r2, {r0, r1, r2}
 800127c:	c303      	stmia	r3!, {r0, r1}
 800127e:	801a      	strh	r2, [r3, #0]
	Matrix_clear();
 8001280:	f000 fd7c 	bl	8001d7c <Matrix_clear>
	object.originbit.x -= 1;
 8001284:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <shift_Left+0x78>)
 8001286:	789b      	ldrb	r3, [r3, #2]
 8001288:	3b01      	subs	r3, #1
 800128a:	b2da      	uxtb	r2, r3
 800128c:	4b16      	ldr	r3, [pc, #88]	@ (80012e8 <shift_Left+0x78>)
 800128e:	709a      	strb	r2, [r3, #2]
	object.suboriginbit_0.x -= 1;
 8001290:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <shift_Left+0x78>)
 8001292:	791b      	ldrb	r3, [r3, #4]
 8001294:	3b01      	subs	r3, #1
 8001296:	b2da      	uxtb	r2, r3
 8001298:	4b13      	ldr	r3, [pc, #76]	@ (80012e8 <shift_Left+0x78>)
 800129a:	711a      	strb	r2, [r3, #4]
	object.suboriginbit_1.x -= 1;
 800129c:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <shift_Left+0x78>)
 800129e:	799b      	ldrb	r3, [r3, #6]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	b2da      	uxtb	r2, r3
 80012a4:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <shift_Left+0x78>)
 80012a6:	719a      	strb	r2, [r3, #6]
	object.suboriginbit_2.x -= 1;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <shift_Left+0x78>)
 80012aa:	7a1b      	ldrb	r3, [r3, #8]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	b2da      	uxtb	r2, r3
 80012b0:	4b0d      	ldr	r3, [pc, #52]	@ (80012e8 <shift_Left+0x78>)
 80012b2:	721a      	strb	r2, [r3, #8]
	object.Rotation -= 1;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <shift_Left+0x78>)
 80012b6:	785b      	ldrb	r3, [r3, #1]
 80012b8:	3b01      	subs	r3, #1
 80012ba:	b2da      	uxtb	r2, r3
 80012bc:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <shift_Left+0x78>)
 80012be:	705a      	strb	r2, [r3, #1]
	transform_rotation();
 80012c0:	f000 f888 	bl	80013d4 <transform_rotation>
	if(check_State() == 1) {
 80012c4:	f7ff fe6e 	bl	8000fa4 <check_State>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d104      	bne.n	80012d8 <shift_Left+0x68>
		object = temp;
 80012ce:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <shift_Left+0x78>)
 80012d0:	1d3a      	adds	r2, r7, #4
 80012d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80012d4:	c303      	stmia	r3!, {r0, r1}
 80012d6:	801a      	strh	r2, [r3, #0]
	}
	Matrix_update();
 80012d8:	f000 fd98 	bl	8001e0c <Matrix_update>
	printMatrix();
 80012dc:	f000 fcc4 	bl	8001c68 <printMatrix>
}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20025990 	.word	0x20025990

080012ec <shift_Right>:
void shift_Right(void){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
	Object temp = object;
 80012f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001364 <shift_Right+0x78>)
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012f8:	c303      	stmia	r3!, {r0, r1}
 80012fa:	801a      	strh	r2, [r3, #0]
	Matrix_clear();
 80012fc:	f000 fd3e 	bl	8001d7c <Matrix_clear>
	object.originbit.x += 1;
 8001300:	4b18      	ldr	r3, [pc, #96]	@ (8001364 <shift_Right+0x78>)
 8001302:	789b      	ldrb	r3, [r3, #2]
 8001304:	3301      	adds	r3, #1
 8001306:	b2da      	uxtb	r2, r3
 8001308:	4b16      	ldr	r3, [pc, #88]	@ (8001364 <shift_Right+0x78>)
 800130a:	709a      	strb	r2, [r3, #2]
	object.suboriginbit_0.x += 1;
 800130c:	4b15      	ldr	r3, [pc, #84]	@ (8001364 <shift_Right+0x78>)
 800130e:	791b      	ldrb	r3, [r3, #4]
 8001310:	3301      	adds	r3, #1
 8001312:	b2da      	uxtb	r2, r3
 8001314:	4b13      	ldr	r3, [pc, #76]	@ (8001364 <shift_Right+0x78>)
 8001316:	711a      	strb	r2, [r3, #4]
	object.suboriginbit_1.x += 1;
 8001318:	4b12      	ldr	r3, [pc, #72]	@ (8001364 <shift_Right+0x78>)
 800131a:	799b      	ldrb	r3, [r3, #6]
 800131c:	3301      	adds	r3, #1
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b10      	ldr	r3, [pc, #64]	@ (8001364 <shift_Right+0x78>)
 8001322:	719a      	strb	r2, [r3, #6]
	object.suboriginbit_2.x += 1;
 8001324:	4b0f      	ldr	r3, [pc, #60]	@ (8001364 <shift_Right+0x78>)
 8001326:	7a1b      	ldrb	r3, [r3, #8]
 8001328:	3301      	adds	r3, #1
 800132a:	b2da      	uxtb	r2, r3
 800132c:	4b0d      	ldr	r3, [pc, #52]	@ (8001364 <shift_Right+0x78>)
 800132e:	721a      	strb	r2, [r3, #8]
	object.Rotation -= 1;
 8001330:	4b0c      	ldr	r3, [pc, #48]	@ (8001364 <shift_Right+0x78>)
 8001332:	785b      	ldrb	r3, [r3, #1]
 8001334:	3b01      	subs	r3, #1
 8001336:	b2da      	uxtb	r2, r3
 8001338:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <shift_Right+0x78>)
 800133a:	705a      	strb	r2, [r3, #1]
	transform_rotation();
 800133c:	f000 f84a 	bl	80013d4 <transform_rotation>
	if(check_State() == 1) {
 8001340:	f7ff fe30 	bl	8000fa4 <check_State>
 8001344:	4603      	mov	r3, r0
 8001346:	2b01      	cmp	r3, #1
 8001348:	d104      	bne.n	8001354 <shift_Right+0x68>
		object = temp;
 800134a:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <shift_Right+0x78>)
 800134c:	1d3a      	adds	r2, r7, #4
 800134e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001350:	c303      	stmia	r3!, {r0, r1}
 8001352:	801a      	strh	r2, [r3, #0]
	}
	Matrix_update();
 8001354:	f000 fd5a 	bl	8001e0c <Matrix_update>
	printMatrix();
 8001358:	f000 fc86 	bl	8001c68 <printMatrix>
}
 800135c:	bf00      	nop
 800135e:	3710      	adds	r7, #16
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	20025990 	.word	0x20025990

08001368 <tick_Matrix>:

void tick_Matrix(void){
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
	Object temp = object;
 800136e:	4a18      	ldr	r2, [pc, #96]	@ (80013d0 <tick_Matrix+0x68>)
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	ca07      	ldmia	r2, {r0, r1, r2}
 8001374:	c303      	stmia	r3!, {r0, r1}
 8001376:	801a      	strh	r2, [r3, #0]
	Matrix_clear();
 8001378:	f000 fd00 	bl	8001d7c <Matrix_clear>
	object.originbit.y -= 1;
 800137c:	4b14      	ldr	r3, [pc, #80]	@ (80013d0 <tick_Matrix+0x68>)
 800137e:	78db      	ldrb	r3, [r3, #3]
 8001380:	3b01      	subs	r3, #1
 8001382:	b2da      	uxtb	r2, r3
 8001384:	4b12      	ldr	r3, [pc, #72]	@ (80013d0 <tick_Matrix+0x68>)
 8001386:	70da      	strb	r2, [r3, #3]
	object.suboriginbit_0.y -= 1;
 8001388:	4b11      	ldr	r3, [pc, #68]	@ (80013d0 <tick_Matrix+0x68>)
 800138a:	795b      	ldrb	r3, [r3, #5]
 800138c:	3b01      	subs	r3, #1
 800138e:	b2da      	uxtb	r2, r3
 8001390:	4b0f      	ldr	r3, [pc, #60]	@ (80013d0 <tick_Matrix+0x68>)
 8001392:	715a      	strb	r2, [r3, #5]
	object.suboriginbit_1.y -= 1;
 8001394:	4b0e      	ldr	r3, [pc, #56]	@ (80013d0 <tick_Matrix+0x68>)
 8001396:	79db      	ldrb	r3, [r3, #7]
 8001398:	3b01      	subs	r3, #1
 800139a:	b2da      	uxtb	r2, r3
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <tick_Matrix+0x68>)
 800139e:	71da      	strb	r2, [r3, #7]
	object.suboriginbit_2.y -= 1;
 80013a0:	4b0b      	ldr	r3, [pc, #44]	@ (80013d0 <tick_Matrix+0x68>)
 80013a2:	7a5b      	ldrb	r3, [r3, #9]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <tick_Matrix+0x68>)
 80013aa:	725a      	strb	r2, [r3, #9]
	object.Rotation -= 1;
 80013ac:	4b08      	ldr	r3, [pc, #32]	@ (80013d0 <tick_Matrix+0x68>)
 80013ae:	785b      	ldrb	r3, [r3, #1]
 80013b0:	3b01      	subs	r3, #1
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	4b06      	ldr	r3, [pc, #24]	@ (80013d0 <tick_Matrix+0x68>)
 80013b6:	705a      	strb	r2, [r3, #1]
	transform_rotation();
 80013b8:	f000 f80c 	bl	80013d4 <transform_rotation>
	check_State();
 80013bc:	f7ff fdf2 	bl	8000fa4 <check_State>
	/*
	if(check_State() == 1) {
		object = temp;
	}*/
	Matrix_update();
 80013c0:	f000 fd24 	bl	8001e0c <Matrix_update>
	printMatrix();
 80013c4:	f000 fc50 	bl	8001c68 <printMatrix>
}
 80013c8:	bf00      	nop
 80013ca:	3710      	adds	r7, #16
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20025990 	.word	0x20025990

080013d4 <transform_rotation>:

void transform_rotation(void){
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
	//Matrix_clear();
	object.Rotation += 1;
 80013d8:	4b96      	ldr	r3, [pc, #600]	@ (8001634 <transform_rotation+0x260>)
 80013da:	785b      	ldrb	r3, [r3, #1]
 80013dc:	3301      	adds	r3, #1
 80013de:	b2da      	uxtb	r2, r3
 80013e0:	4b94      	ldr	r3, [pc, #592]	@ (8001634 <transform_rotation+0x260>)
 80013e2:	705a      	strb	r2, [r3, #1]
	if((object.Rotation > 3) || (object.Rotation < 0)) {
 80013e4:	4b93      	ldr	r3, [pc, #588]	@ (8001634 <transform_rotation+0x260>)
 80013e6:	785b      	ldrb	r3, [r3, #1]
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d902      	bls.n	80013f2 <transform_rotation+0x1e>
		object.Rotation = 0;
 80013ec:	4b91      	ldr	r3, [pc, #580]	@ (8001634 <transform_rotation+0x260>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	705a      	strb	r2, [r3, #1]
	}

	switch(object.name){
 80013f2:	4b90      	ldr	r3, [pc, #576]	@ (8001634 <transform_rotation+0x260>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	f200 842e 	bhi.w	8001c58 <transform_rotation+0x884>
 80013fc:	a201      	add	r2, pc, #4	@ (adr r2, 8001404 <transform_rotation+0x30>)
 80013fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001402:	bf00      	nop
 8001404:	08001421 	.word	0x08001421
 8001408:	0800154b 	.word	0x0800154b
 800140c:	0800167d 	.word	0x0800167d
 8001410:	080017a7 	.word	0x080017a7
 8001414:	080018d9 	.word	0x080018d9
 8001418:	080019f3 	.word	0x080019f3
 800141c:	08001b15 	.word	0x08001b15
		case(ORICKY):
			switch(object.Rotation) {
 8001420:	4b84      	ldr	r3, [pc, #528]	@ (8001634 <transform_rotation+0x260>)
 8001422:	785b      	ldrb	r3, [r3, #1]
 8001424:	2b03      	cmp	r3, #3
 8001426:	f200 840a 	bhi.w	8001c3e <transform_rotation+0x86a>
 800142a:	a201      	add	r2, pc, #4	@ (adr r2, 8001430 <transform_rotation+0x5c>)
 800142c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001430:	08001441 	.word	0x08001441
 8001434:	08001483 	.word	0x08001483
 8001438:	080014c5 	.word	0x080014c5
 800143c:	08001507 	.word	0x08001507
				case(ROTATION_0):
						//       1
						// 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;   //		 1
 8001440:	4b7c      	ldr	r3, [pc, #496]	@ (8001634 <transform_rotation+0x260>)
 8001442:	789b      	ldrb	r3, [r3, #2]
 8001444:	3b01      	subs	r3, #1
 8001446:	b2da      	uxtb	r2, r3
 8001448:	4b7a      	ldr	r3, [pc, #488]	@ (8001634 <transform_rotation+0x260>)
 800144a:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		// [1] 1 1
 800144c:	4b79      	ldr	r3, [pc, #484]	@ (8001634 <transform_rotation+0x260>)
 800144e:	78da      	ldrb	r2, [r3, #3]
 8001450:	4b78      	ldr	r3, [pc, #480]	@ (8001634 <transform_rotation+0x260>)
 8001452:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;	//        1
 8001454:	4b77      	ldr	r3, [pc, #476]	@ (8001634 <transform_rotation+0x260>)
 8001456:	789b      	ldrb	r3, [r3, #2]
 8001458:	3301      	adds	r3, #1
 800145a:	b2da      	uxtb	r2, r3
 800145c:	4b75      	ldr	r3, [pc, #468]	@ (8001634 <transform_rotation+0x260>)
 800145e:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		//  1  1 [1]
 8001460:	4b74      	ldr	r3, [pc, #464]	@ (8001634 <transform_rotation+0x260>)
 8001462:	78da      	ldrb	r2, [r3, #3]
 8001464:	4b73      	ldr	r3, [pc, #460]	@ (8001634 <transform_rotation+0x260>)
 8001466:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	// 	  [1]
 8001468:	4b72      	ldr	r3, [pc, #456]	@ (8001634 <transform_rotation+0x260>)
 800146a:	789b      	ldrb	r3, [r3, #2]
 800146c:	3301      	adds	r3, #1
 800146e:	b2da      	uxtb	r2, r3
 8001470:	4b70      	ldr	r3, [pc, #448]	@ (8001634 <transform_rotation+0x260>)
 8001472:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	// 1 1 1
 8001474:	4b6f      	ldr	r3, [pc, #444]	@ (8001634 <transform_rotation+0x260>)
 8001476:	78db      	ldrb	r3, [r3, #3]
 8001478:	3301      	adds	r3, #1
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b6d      	ldr	r3, [pc, #436]	@ (8001634 <transform_rotation+0x260>)
 800147e:	725a      	strb	r2, [r3, #9]

					break;
 8001480:	e062      	b.n	8001548 <transform_rotation+0x174>
				case(ROTATION_1):
						// 1  1
						//   [1]
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 8001482:	4b6c      	ldr	r3, [pc, #432]	@ (8001634 <transform_rotation+0x260>)
 8001484:	789a      	ldrb	r2, [r3, #2]
 8001486:	4b6b      	ldr	r3, [pc, #428]	@ (8001634 <transform_rotation+0x260>)
 8001488:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y - 1;
 800148a:	4b6a      	ldr	r3, [pc, #424]	@ (8001634 <transform_rotation+0x260>)
 800148c:	78db      	ldrb	r3, [r3, #3]
 800148e:	3b01      	subs	r3, #1
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4b68      	ldr	r3, [pc, #416]	@ (8001634 <transform_rotation+0x260>)
 8001494:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8001496:	4b67      	ldr	r3, [pc, #412]	@ (8001634 <transform_rotation+0x260>)
 8001498:	789a      	ldrb	r2, [r3, #2]
 800149a:	4b66      	ldr	r3, [pc, #408]	@ (8001634 <transform_rotation+0x260>)
 800149c:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;
 800149e:	4b65      	ldr	r3, [pc, #404]	@ (8001634 <transform_rotation+0x260>)
 80014a0:	78db      	ldrb	r3, [r3, #3]
 80014a2:	3301      	adds	r3, #1
 80014a4:	b2da      	uxtb	r2, r3
 80014a6:	4b63      	ldr	r3, [pc, #396]	@ (8001634 <transform_rotation+0x260>)
 80014a8:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 80014aa:	4b62      	ldr	r3, [pc, #392]	@ (8001634 <transform_rotation+0x260>)
 80014ac:	789b      	ldrb	r3, [r3, #2]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4b60      	ldr	r3, [pc, #384]	@ (8001634 <transform_rotation+0x260>)
 80014b4:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1;
 80014b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001634 <transform_rotation+0x260>)
 80014b8:	78db      	ldrb	r3, [r3, #3]
 80014ba:	3301      	adds	r3, #1
 80014bc:	b2da      	uxtb	r2, r3
 80014be:	4b5d      	ldr	r3, [pc, #372]	@ (8001634 <transform_rotation+0x260>)
 80014c0:	725a      	strb	r2, [r3, #9]

					break;
 80014c2:	e041      	b.n	8001548 <transform_rotation+0x174>
				case(ROTATION_2):
						// 1  [1]  1
						// 1
					object.suboriginbit_0.x = object.originbit.x + 1;
 80014c4:	4b5b      	ldr	r3, [pc, #364]	@ (8001634 <transform_rotation+0x260>)
 80014c6:	789b      	ldrb	r3, [r3, #2]
 80014c8:	3301      	adds	r3, #1
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	4b59      	ldr	r3, [pc, #356]	@ (8001634 <transform_rotation+0x260>)
 80014ce:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 80014d0:	4b58      	ldr	r3, [pc, #352]	@ (8001634 <transform_rotation+0x260>)
 80014d2:	78da      	ldrb	r2, [r3, #3]
 80014d4:	4b57      	ldr	r3, [pc, #348]	@ (8001634 <transform_rotation+0x260>)
 80014d6:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;
 80014d8:	4b56      	ldr	r3, [pc, #344]	@ (8001634 <transform_rotation+0x260>)
 80014da:	789b      	ldrb	r3, [r3, #2]
 80014dc:	3b01      	subs	r3, #1
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	4b54      	ldr	r3, [pc, #336]	@ (8001634 <transform_rotation+0x260>)
 80014e2:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 80014e4:	4b53      	ldr	r3, [pc, #332]	@ (8001634 <transform_rotation+0x260>)
 80014e6:	78da      	ldrb	r2, [r3, #3]
 80014e8:	4b52      	ldr	r3, [pc, #328]	@ (8001634 <transform_rotation+0x260>)
 80014ea:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 80014ec:	4b51      	ldr	r3, [pc, #324]	@ (8001634 <transform_rotation+0x260>)
 80014ee:	789b      	ldrb	r3, [r3, #2]
 80014f0:	3b01      	subs	r3, #1
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	4b4f      	ldr	r3, [pc, #316]	@ (8001634 <transform_rotation+0x260>)
 80014f6:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 80014f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001634 <transform_rotation+0x260>)
 80014fa:	78db      	ldrb	r3, [r3, #3]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	4b4c      	ldr	r3, [pc, #304]	@ (8001634 <transform_rotation+0x260>)
 8001502:	725a      	strb	r2, [r3, #9]

					break;
 8001504:	e020      	b.n	8001548 <transform_rotation+0x174>
				case(ROTATION_3):
						//  1
						// [1]
						//  1 1
					object.suboriginbit_0.x = object.originbit.x;
 8001506:	4b4b      	ldr	r3, [pc, #300]	@ (8001634 <transform_rotation+0x260>)
 8001508:	789a      	ldrb	r2, [r3, #2]
 800150a:	4b4a      	ldr	r3, [pc, #296]	@ (8001634 <transform_rotation+0x260>)
 800150c:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 800150e:	4b49      	ldr	r3, [pc, #292]	@ (8001634 <transform_rotation+0x260>)
 8001510:	78db      	ldrb	r3, [r3, #3]
 8001512:	3301      	adds	r3, #1
 8001514:	b2da      	uxtb	r2, r3
 8001516:	4b47      	ldr	r3, [pc, #284]	@ (8001634 <transform_rotation+0x260>)
 8001518:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 800151a:	4b46      	ldr	r3, [pc, #280]	@ (8001634 <transform_rotation+0x260>)
 800151c:	789a      	ldrb	r2, [r3, #2]
 800151e:	4b45      	ldr	r3, [pc, #276]	@ (8001634 <transform_rotation+0x260>)
 8001520:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8001522:	4b44      	ldr	r3, [pc, #272]	@ (8001634 <transform_rotation+0x260>)
 8001524:	78db      	ldrb	r3, [r3, #3]
 8001526:	3b01      	subs	r3, #1
 8001528:	b2da      	uxtb	r2, r3
 800152a:	4b42      	ldr	r3, [pc, #264]	@ (8001634 <transform_rotation+0x260>)
 800152c:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;
 800152e:	4b41      	ldr	r3, [pc, #260]	@ (8001634 <transform_rotation+0x260>)
 8001530:	789b      	ldrb	r3, [r3, #2]
 8001532:	3301      	adds	r3, #1
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4b3f      	ldr	r3, [pc, #252]	@ (8001634 <transform_rotation+0x260>)
 8001538:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 800153a:	4b3e      	ldr	r3, [pc, #248]	@ (8001634 <transform_rotation+0x260>)
 800153c:	78db      	ldrb	r3, [r3, #3]
 800153e:	3b01      	subs	r3, #1
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4b3c      	ldr	r3, [pc, #240]	@ (8001634 <transform_rotation+0x260>)
 8001544:	725a      	strb	r2, [r3, #9]

					break;
 8001546:	bf00      	nop
			}
			break;
 8001548:	e379      	b.n	8001c3e <transform_rotation+0x86a>
		case(BRICKY):
			switch(object.Rotation) {
 800154a:	4b3a      	ldr	r3, [pc, #232]	@ (8001634 <transform_rotation+0x260>)
 800154c:	785b      	ldrb	r3, [r3, #1]
 800154e:	2b03      	cmp	r3, #3
 8001550:	f200 8377 	bhi.w	8001c42 <transform_rotation+0x86e>
 8001554:	a201      	add	r2, pc, #4	@ (adr r2, 800155c <transform_rotation+0x188>)
 8001556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155a:	bf00      	nop
 800155c:	0800156d 	.word	0x0800156d
 8001560:	080015af 	.word	0x080015af
 8001564:	080015f1 	.word	0x080015f1
 8001568:	08001639 	.word	0x08001639
				case(ROTATION_0):
						// 1
						// 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;   //	1
 800156c:	4b31      	ldr	r3, [pc, #196]	@ (8001634 <transform_rotation+0x260>)
 800156e:	789b      	ldrb	r3, [r3, #2]
 8001570:	3b01      	subs	r3, #1
 8001572:	b2da      	uxtb	r2, r3
 8001574:	4b2f      	ldr	r3, [pc, #188]	@ (8001634 <transform_rotation+0x260>)
 8001576:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		// [1] 1 1
 8001578:	4b2e      	ldr	r3, [pc, #184]	@ (8001634 <transform_rotation+0x260>)
 800157a:	78da      	ldrb	r2, [r3, #3]
 800157c:	4b2d      	ldr	r3, [pc, #180]	@ (8001634 <transform_rotation+0x260>)
 800157e:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;	//  1
 8001580:	4b2c      	ldr	r3, [pc, #176]	@ (8001634 <transform_rotation+0x260>)
 8001582:	789b      	ldrb	r3, [r3, #2]
 8001584:	3301      	adds	r3, #1
 8001586:	b2da      	uxtb	r2, r3
 8001588:	4b2a      	ldr	r3, [pc, #168]	@ (8001634 <transform_rotation+0x260>)
 800158a:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		//  1  1 [1]
 800158c:	4b29      	ldr	r3, [pc, #164]	@ (8001634 <transform_rotation+0x260>)
 800158e:	78da      	ldrb	r2, [r3, #3]
 8001590:	4b28      	ldr	r3, [pc, #160]	@ (8001634 <transform_rotation+0x260>)
 8001592:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;	//[1]
 8001594:	4b27      	ldr	r3, [pc, #156]	@ (8001634 <transform_rotation+0x260>)
 8001596:	789b      	ldrb	r3, [r3, #2]
 8001598:	3b01      	subs	r3, #1
 800159a:	b2da      	uxtb	r2, r3
 800159c:	4b25      	ldr	r3, [pc, #148]	@ (8001634 <transform_rotation+0x260>)
 800159e:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	// 1 1 1
 80015a0:	4b24      	ldr	r3, [pc, #144]	@ (8001634 <transform_rotation+0x260>)
 80015a2:	78db      	ldrb	r3, [r3, #3]
 80015a4:	3301      	adds	r3, #1
 80015a6:	b2da      	uxtb	r2, r3
 80015a8:	4b22      	ldr	r3, [pc, #136]	@ (8001634 <transform_rotation+0x260>)
 80015aa:	725a      	strb	r2, [r3, #9]

					break;
 80015ac:	e065      	b.n	800167a <transform_rotation+0x2a6>
				case(ROTATION_1):
						// 1 1
						//[1]
						// 1
					object.suboriginbit_0.x = object.originbit.x;
 80015ae:	4b21      	ldr	r3, [pc, #132]	@ (8001634 <transform_rotation+0x260>)
 80015b0:	789a      	ldrb	r2, [r3, #2]
 80015b2:	4b20      	ldr	r3, [pc, #128]	@ (8001634 <transform_rotation+0x260>)
 80015b4:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 80015b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001634 <transform_rotation+0x260>)
 80015b8:	78db      	ldrb	r3, [r3, #3]
 80015ba:	3301      	adds	r3, #1
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	4b1d      	ldr	r3, [pc, #116]	@ (8001634 <transform_rotation+0x260>)
 80015c0:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;
 80015c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001634 <transform_rotation+0x260>)
 80015c4:	789b      	ldrb	r3, [r3, #2]
 80015c6:	3301      	adds	r3, #1
 80015c8:	b2da      	uxtb	r2, r3
 80015ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001634 <transform_rotation+0x260>)
 80015cc:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;
 80015ce:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <transform_rotation+0x260>)
 80015d0:	78db      	ldrb	r3, [r3, #3]
 80015d2:	3301      	adds	r3, #1
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b17      	ldr	r3, [pc, #92]	@ (8001634 <transform_rotation+0x260>)
 80015d8:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 80015da:	4b16      	ldr	r3, [pc, #88]	@ (8001634 <transform_rotation+0x260>)
 80015dc:	789a      	ldrb	r2, [r3, #2]
 80015de:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <transform_rotation+0x260>)
 80015e0:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 80015e2:	4b14      	ldr	r3, [pc, #80]	@ (8001634 <transform_rotation+0x260>)
 80015e4:	78db      	ldrb	r3, [r3, #3]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	b2da      	uxtb	r2, r3
 80015ea:	4b12      	ldr	r3, [pc, #72]	@ (8001634 <transform_rotation+0x260>)
 80015ec:	725a      	strb	r2, [r3, #9]

					break;
 80015ee:	e044      	b.n	800167a <transform_rotation+0x2a6>
				case(ROTATION_2):
						// 1 [1] 1
						//       1
					object.suboriginbit_0.x = object.originbit.x + 1;
 80015f0:	4b10      	ldr	r3, [pc, #64]	@ (8001634 <transform_rotation+0x260>)
 80015f2:	789b      	ldrb	r3, [r3, #2]
 80015f4:	3301      	adds	r3, #1
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001634 <transform_rotation+0x260>)
 80015fa:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 80015fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001634 <transform_rotation+0x260>)
 80015fe:	78da      	ldrb	r2, [r3, #3]
 8001600:	4b0c      	ldr	r3, [pc, #48]	@ (8001634 <transform_rotation+0x260>)
 8001602:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;
 8001604:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <transform_rotation+0x260>)
 8001606:	789b      	ldrb	r3, [r3, #2]
 8001608:	3b01      	subs	r3, #1
 800160a:	b2da      	uxtb	r2, r3
 800160c:	4b09      	ldr	r3, [pc, #36]	@ (8001634 <transform_rotation+0x260>)
 800160e:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8001610:	4b08      	ldr	r3, [pc, #32]	@ (8001634 <transform_rotation+0x260>)
 8001612:	78da      	ldrb	r2, [r3, #3]
 8001614:	4b07      	ldr	r3, [pc, #28]	@ (8001634 <transform_rotation+0x260>)
 8001616:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;
 8001618:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <transform_rotation+0x260>)
 800161a:	789b      	ldrb	r3, [r3, #2]
 800161c:	3301      	adds	r3, #1
 800161e:	b2da      	uxtb	r2, r3
 8001620:	4b04      	ldr	r3, [pc, #16]	@ (8001634 <transform_rotation+0x260>)
 8001622:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8001624:	4b03      	ldr	r3, [pc, #12]	@ (8001634 <transform_rotation+0x260>)
 8001626:	78db      	ldrb	r3, [r3, #3]
 8001628:	3b01      	subs	r3, #1
 800162a:	b2da      	uxtb	r2, r3
 800162c:	4b01      	ldr	r3, [pc, #4]	@ (8001634 <transform_rotation+0x260>)
 800162e:	725a      	strb	r2, [r3, #9]

					break;
 8001630:	e023      	b.n	800167a <transform_rotation+0x2a6>
 8001632:	bf00      	nop
 8001634:	20025990 	.word	0x20025990
				case(ROTATION_3):
						//   1
						//  [1]
						// 1 1
					object.suboriginbit_0.x = object.originbit.x;
 8001638:	4b95      	ldr	r3, [pc, #596]	@ (8001890 <transform_rotation+0x4bc>)
 800163a:	789a      	ldrb	r2, [r3, #2]
 800163c:	4b94      	ldr	r3, [pc, #592]	@ (8001890 <transform_rotation+0x4bc>)
 800163e:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y - 1;
 8001640:	4b93      	ldr	r3, [pc, #588]	@ (8001890 <transform_rotation+0x4bc>)
 8001642:	78db      	ldrb	r3, [r3, #3]
 8001644:	3b01      	subs	r3, #1
 8001646:	b2da      	uxtb	r2, r3
 8001648:	4b91      	ldr	r3, [pc, #580]	@ (8001890 <transform_rotation+0x4bc>)
 800164a:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 800164c:	4b90      	ldr	r3, [pc, #576]	@ (8001890 <transform_rotation+0x4bc>)
 800164e:	789a      	ldrb	r2, [r3, #2]
 8001650:	4b8f      	ldr	r3, [pc, #572]	@ (8001890 <transform_rotation+0x4bc>)
 8001652:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;
 8001654:	4b8e      	ldr	r3, [pc, #568]	@ (8001890 <transform_rotation+0x4bc>)
 8001656:	78db      	ldrb	r3, [r3, #3]
 8001658:	3301      	adds	r3, #1
 800165a:	b2da      	uxtb	r2, r3
 800165c:	4b8c      	ldr	r3, [pc, #560]	@ (8001890 <transform_rotation+0x4bc>)
 800165e:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 8001660:	4b8b      	ldr	r3, [pc, #556]	@ (8001890 <transform_rotation+0x4bc>)
 8001662:	789b      	ldrb	r3, [r3, #2]
 8001664:	3b01      	subs	r3, #1
 8001666:	b2da      	uxtb	r2, r3
 8001668:	4b89      	ldr	r3, [pc, #548]	@ (8001890 <transform_rotation+0x4bc>)
 800166a:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1;
 800166c:	4b88      	ldr	r3, [pc, #544]	@ (8001890 <transform_rotation+0x4bc>)
 800166e:	78db      	ldrb	r3, [r3, #3]
 8001670:	3301      	adds	r3, #1
 8001672:	b2da      	uxtb	r2, r3
 8001674:	4b86      	ldr	r3, [pc, #536]	@ (8001890 <transform_rotation+0x4bc>)
 8001676:	725a      	strb	r2, [r3, #9]

					break;
 8001678:	bf00      	nop
			}

			break;
 800167a:	e2e2      	b.n	8001c42 <transform_rotation+0x86e>
		case(CLEVELAND):
			switch(object.Rotation) {
 800167c:	4b84      	ldr	r3, [pc, #528]	@ (8001890 <transform_rotation+0x4bc>)
 800167e:	785b      	ldrb	r3, [r3, #1]
 8001680:	2b03      	cmp	r3, #3
 8001682:	f200 82e0 	bhi.w	8001c46 <transform_rotation+0x872>
 8001686:	a201      	add	r2, pc, #4	@ (adr r2, 800168c <transform_rotation+0x2b8>)
 8001688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168c:	0800169d 	.word	0x0800169d
 8001690:	080016df 	.word	0x080016df
 8001694:	08001721 	.word	0x08001721
 8001698:	08001763 	.word	0x08001763
				case(ROTATION_0):
						// 1 1
						//  [1] 1
					object.suboriginbit_0.x = object.originbit.x;			 //	1 [1]
 800169c:	4b7c      	ldr	r3, [pc, #496]	@ (8001890 <transform_rotation+0x4bc>)
 800169e:	789a      	ldrb	r2, [r3, #2]
 80016a0:	4b7b      	ldr	r3, [pc, #492]	@ (8001890 <transform_rotation+0x4bc>)
 80016a2:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;		 //    1 1
 80016a4:	4b7a      	ldr	r3, [pc, #488]	@ (8001890 <transform_rotation+0x4bc>)
 80016a6:	78db      	ldrb	r3, [r3, #3]
 80016a8:	3301      	adds	r3, #1
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	4b78      	ldr	r3, [pc, #480]	@ (8001890 <transform_rotation+0x4bc>)
 80016ae:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;		 // [1] 1
 80016b0:	4b77      	ldr	r3, [pc, #476]	@ (8001890 <transform_rotation+0x4bc>)
 80016b2:	789b      	ldrb	r3, [r3, #2]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	b2da      	uxtb	r2, r3
 80016b8:	4b75      	ldr	r3, [pc, #468]	@ (8001890 <transform_rotation+0x4bc>)
 80016ba:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;		 //     1 1
 80016bc:	4b74      	ldr	r3, [pc, #464]	@ (8001890 <transform_rotation+0x4bc>)
 80016be:	78db      	ldrb	r3, [r3, #3]
 80016c0:	3301      	adds	r3, #1
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	4b72      	ldr	r3, [pc, #456]	@ (8001890 <transform_rotation+0x4bc>)
 80016c6:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;		 //  1 1
 80016c8:	4b71      	ldr	r3, [pc, #452]	@ (8001890 <transform_rotation+0x4bc>)
 80016ca:	789b      	ldrb	r3, [r3, #2]
 80016cc:	3301      	adds	r3, #1
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	4b6f      	ldr	r3, [pc, #444]	@ (8001890 <transform_rotation+0x4bc>)
 80016d2:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y; 	     	//    1 [1]
 80016d4:	4b6e      	ldr	r3, [pc, #440]	@ (8001890 <transform_rotation+0x4bc>)
 80016d6:	78da      	ldrb	r2, [r3, #3]
 80016d8:	4b6d      	ldr	r3, [pc, #436]	@ (8001890 <transform_rotation+0x4bc>)
 80016da:	725a      	strb	r2, [r3, #9]

					break;
 80016dc:	e062      	b.n	80017a4 <transform_rotation+0x3d0>
				case(ROTATION_1):
						//     1
						// [1] 1
						//  1
					object.suboriginbit_0.x = object.originbit.x+1;
 80016de:	4b6c      	ldr	r3, [pc, #432]	@ (8001890 <transform_rotation+0x4bc>)
 80016e0:	789b      	ldrb	r3, [r3, #2]
 80016e2:	3301      	adds	r3, #1
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001890 <transform_rotation+0x4bc>)
 80016e8:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 80016ea:	4b69      	ldr	r3, [pc, #420]	@ (8001890 <transform_rotation+0x4bc>)
 80016ec:	78da      	ldrb	r2, [r3, #3]
 80016ee:	4b68      	ldr	r3, [pc, #416]	@ (8001890 <transform_rotation+0x4bc>)
 80016f0:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x+1;
 80016f2:	4b67      	ldr	r3, [pc, #412]	@ (8001890 <transform_rotation+0x4bc>)
 80016f4:	789b      	ldrb	r3, [r3, #2]
 80016f6:	3301      	adds	r3, #1
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	4b65      	ldr	r3, [pc, #404]	@ (8001890 <transform_rotation+0x4bc>)
 80016fc:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y+1;
 80016fe:	4b64      	ldr	r3, [pc, #400]	@ (8001890 <transform_rotation+0x4bc>)
 8001700:	78db      	ldrb	r3, [r3, #3]
 8001702:	3301      	adds	r3, #1
 8001704:	b2da      	uxtb	r2, r3
 8001706:	4b62      	ldr	r3, [pc, #392]	@ (8001890 <transform_rotation+0x4bc>)
 8001708:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 800170a:	4b61      	ldr	r3, [pc, #388]	@ (8001890 <transform_rotation+0x4bc>)
 800170c:	789a      	ldrb	r2, [r3, #2]
 800170e:	4b60      	ldr	r3, [pc, #384]	@ (8001890 <transform_rotation+0x4bc>)
 8001710:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y-1;
 8001712:	4b5f      	ldr	r3, [pc, #380]	@ (8001890 <transform_rotation+0x4bc>)
 8001714:	78db      	ldrb	r3, [r3, #3]
 8001716:	3b01      	subs	r3, #1
 8001718:	b2da      	uxtb	r2, r3
 800171a:	4b5d      	ldr	r3, [pc, #372]	@ (8001890 <transform_rotation+0x4bc>)
 800171c:	725a      	strb	r2, [r3, #9]

					break;
 800171e:	e041      	b.n	80017a4 <transform_rotation+0x3d0>
				case(ROTATION_2):
						// 1 [1]
						//    1  1
					object.suboriginbit_0.x = object.originbit.x - 1;
 8001720:	4b5b      	ldr	r3, [pc, #364]	@ (8001890 <transform_rotation+0x4bc>)
 8001722:	789b      	ldrb	r3, [r3, #2]
 8001724:	3b01      	subs	r3, #1
 8001726:	b2da      	uxtb	r2, r3
 8001728:	4b59      	ldr	r3, [pc, #356]	@ (8001890 <transform_rotation+0x4bc>)
 800172a:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 800172c:	4b58      	ldr	r3, [pc, #352]	@ (8001890 <transform_rotation+0x4bc>)
 800172e:	78da      	ldrb	r2, [r3, #3]
 8001730:	4b57      	ldr	r3, [pc, #348]	@ (8001890 <transform_rotation+0x4bc>)
 8001732:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8001734:	4b56      	ldr	r3, [pc, #344]	@ (8001890 <transform_rotation+0x4bc>)
 8001736:	789a      	ldrb	r2, [r3, #2]
 8001738:	4b55      	ldr	r3, [pc, #340]	@ (8001890 <transform_rotation+0x4bc>)
 800173a:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 800173c:	4b54      	ldr	r3, [pc, #336]	@ (8001890 <transform_rotation+0x4bc>)
 800173e:	78db      	ldrb	r3, [r3, #3]
 8001740:	3b01      	subs	r3, #1
 8001742:	b2da      	uxtb	r2, r3
 8001744:	4b52      	ldr	r3, [pc, #328]	@ (8001890 <transform_rotation+0x4bc>)
 8001746:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;
 8001748:	4b51      	ldr	r3, [pc, #324]	@ (8001890 <transform_rotation+0x4bc>)
 800174a:	789b      	ldrb	r3, [r3, #2]
 800174c:	3301      	adds	r3, #1
 800174e:	b2da      	uxtb	r2, r3
 8001750:	4b4f      	ldr	r3, [pc, #316]	@ (8001890 <transform_rotation+0x4bc>)
 8001752:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8001754:	4b4e      	ldr	r3, [pc, #312]	@ (8001890 <transform_rotation+0x4bc>)
 8001756:	78db      	ldrb	r3, [r3, #3]
 8001758:	3b01      	subs	r3, #1
 800175a:	b2da      	uxtb	r2, r3
 800175c:	4b4c      	ldr	r3, [pc, #304]	@ (8001890 <transform_rotation+0x4bc>)
 800175e:	725a      	strb	r2, [r3, #9]

					break;
 8001760:	e020      	b.n	80017a4 <transform_rotation+0x3d0>
				case(ROTATION_3):
						//     1
						//  1 [1]
						//  1
					object.suboriginbit_0.x = object.originbit.x - 1;
 8001762:	4b4b      	ldr	r3, [pc, #300]	@ (8001890 <transform_rotation+0x4bc>)
 8001764:	789b      	ldrb	r3, [r3, #2]
 8001766:	3b01      	subs	r3, #1
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4b49      	ldr	r3, [pc, #292]	@ (8001890 <transform_rotation+0x4bc>)
 800176c:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 800176e:	4b48      	ldr	r3, [pc, #288]	@ (8001890 <transform_rotation+0x4bc>)
 8001770:	78da      	ldrb	r2, [r3, #3]
 8001772:	4b47      	ldr	r3, [pc, #284]	@ (8001890 <transform_rotation+0x4bc>)
 8001774:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;
 8001776:	4b46      	ldr	r3, [pc, #280]	@ (8001890 <transform_rotation+0x4bc>)
 8001778:	789b      	ldrb	r3, [r3, #2]
 800177a:	3b01      	subs	r3, #1
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4b44      	ldr	r3, [pc, #272]	@ (8001890 <transform_rotation+0x4bc>)
 8001780:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8001782:	4b43      	ldr	r3, [pc, #268]	@ (8001890 <transform_rotation+0x4bc>)
 8001784:	78db      	ldrb	r3, [r3, #3]
 8001786:	3b01      	subs	r3, #1
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b41      	ldr	r3, [pc, #260]	@ (8001890 <transform_rotation+0x4bc>)
 800178c:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 800178e:	4b40      	ldr	r3, [pc, #256]	@ (8001890 <transform_rotation+0x4bc>)
 8001790:	789a      	ldrb	r2, [r3, #2]
 8001792:	4b3f      	ldr	r3, [pc, #252]	@ (8001890 <transform_rotation+0x4bc>)
 8001794:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1;
 8001796:	4b3e      	ldr	r3, [pc, #248]	@ (8001890 <transform_rotation+0x4bc>)
 8001798:	78db      	ldrb	r3, [r3, #3]
 800179a:	3301      	adds	r3, #1
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4b3c      	ldr	r3, [pc, #240]	@ (8001890 <transform_rotation+0x4bc>)
 80017a0:	725a      	strb	r2, [r3, #9]

					break;
 80017a2:	bf00      	nop
			}
			break;
 80017a4:	e24f      	b.n	8001c46 <transform_rotation+0x872>
		case(RHODE):
			switch(object.Rotation) {
 80017a6:	4b3a      	ldr	r3, [pc, #232]	@ (8001890 <transform_rotation+0x4bc>)
 80017a8:	785b      	ldrb	r3, [r3, #1]
 80017aa:	2b03      	cmp	r3, #3
 80017ac:	f200 824d 	bhi.w	8001c4a <transform_rotation+0x876>
 80017b0:	a201      	add	r2, pc, #4	@ (adr r2, 80017b8 <transform_rotation+0x3e4>)
 80017b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017b6:	bf00      	nop
 80017b8:	080017c9 	.word	0x080017c9
 80017bc:	0800180b 	.word	0x0800180b
 80017c0:	0800184d 	.word	0x0800184d
 80017c4:	08001895 	.word	0x08001895
				case(ROTATION_0):
						//    1 1
						// 1 [1]
					object.suboriginbit_0.x = object.originbit.x;			 //	  [1] 1
 80017c8:	4b31      	ldr	r3, [pc, #196]	@ (8001890 <transform_rotation+0x4bc>)
 80017ca:	789a      	ldrb	r2, [r3, #2]
 80017cc:	4b30      	ldr	r3, [pc, #192]	@ (8001890 <transform_rotation+0x4bc>)
 80017ce:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;		 //  1 1
 80017d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001890 <transform_rotation+0x4bc>)
 80017d2:	78db      	ldrb	r3, [r3, #3]
 80017d4:	3301      	adds	r3, #1
 80017d6:	b2da      	uxtb	r2, r3
 80017d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001890 <transform_rotation+0x4bc>)
 80017da:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;		 //    1 [1]
 80017dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001890 <transform_rotation+0x4bc>)
 80017de:	789b      	ldrb	r3, [r3, #2]
 80017e0:	3301      	adds	r3, #1
 80017e2:	b2da      	uxtb	r2, r3
 80017e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001890 <transform_rotation+0x4bc>)
 80017e6:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;		 //  1 1
 80017e8:	4b29      	ldr	r3, [pc, #164]	@ (8001890 <transform_rotation+0x4bc>)
 80017ea:	78db      	ldrb	r3, [r3, #3]
 80017ec:	3301      	adds	r3, #1
 80017ee:	b2da      	uxtb	r2, r3
 80017f0:	4b27      	ldr	r3, [pc, #156]	@ (8001890 <transform_rotation+0x4bc>)
 80017f2:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;		 //     1 1
 80017f4:	4b26      	ldr	r3, [pc, #152]	@ (8001890 <transform_rotation+0x4bc>)
 80017f6:	789b      	ldrb	r3, [r3, #2]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	4b24      	ldr	r3, [pc, #144]	@ (8001890 <transform_rotation+0x4bc>)
 80017fe:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y; 	     // [1] 1
 8001800:	4b23      	ldr	r3, [pc, #140]	@ (8001890 <transform_rotation+0x4bc>)
 8001802:	78da      	ldrb	r2, [r3, #3]
 8001804:	4b22      	ldr	r3, [pc, #136]	@ (8001890 <transform_rotation+0x4bc>)
 8001806:	725a      	strb	r2, [r3, #9]

					break;
 8001808:	e065      	b.n	80018d6 <transform_rotation+0x502>
				case(ROTATION_1):
						// 1
						//[1] 1
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 800180a:	4b21      	ldr	r3, [pc, #132]	@ (8001890 <transform_rotation+0x4bc>)
 800180c:	789a      	ldrb	r2, [r3, #2]
 800180e:	4b20      	ldr	r3, [pc, #128]	@ (8001890 <transform_rotation+0x4bc>)
 8001810:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 8001812:	4b1f      	ldr	r3, [pc, #124]	@ (8001890 <transform_rotation+0x4bc>)
 8001814:	78db      	ldrb	r3, [r3, #3]
 8001816:	3301      	adds	r3, #1
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4b1d      	ldr	r3, [pc, #116]	@ (8001890 <transform_rotation+0x4bc>)
 800181c:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;
 800181e:	4b1c      	ldr	r3, [pc, #112]	@ (8001890 <transform_rotation+0x4bc>)
 8001820:	789b      	ldrb	r3, [r3, #2]
 8001822:	3301      	adds	r3, #1
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4b1a      	ldr	r3, [pc, #104]	@ (8001890 <transform_rotation+0x4bc>)
 8001828:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 800182a:	4b19      	ldr	r3, [pc, #100]	@ (8001890 <transform_rotation+0x4bc>)
 800182c:	78da      	ldrb	r2, [r3, #3]
 800182e:	4b18      	ldr	r3, [pc, #96]	@ (8001890 <transform_rotation+0x4bc>)
 8001830:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;
 8001832:	4b17      	ldr	r3, [pc, #92]	@ (8001890 <transform_rotation+0x4bc>)
 8001834:	789b      	ldrb	r3, [r3, #2]
 8001836:	3301      	adds	r3, #1
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4b15      	ldr	r3, [pc, #84]	@ (8001890 <transform_rotation+0x4bc>)
 800183c:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 800183e:	4b14      	ldr	r3, [pc, #80]	@ (8001890 <transform_rotation+0x4bc>)
 8001840:	78db      	ldrb	r3, [r3, #3]
 8001842:	3b01      	subs	r3, #1
 8001844:	b2da      	uxtb	r2, r3
 8001846:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <transform_rotation+0x4bc>)
 8001848:	725a      	strb	r2, [r3, #9]

					break;
 800184a:	e044      	b.n	80018d6 <transform_rotation+0x502>
				case(ROTATION_2):
						//  [1] 1
						// 1 1
					object.suboriginbit_0.x = object.originbit.x + 1;
 800184c:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <transform_rotation+0x4bc>)
 800184e:	789b      	ldrb	r3, [r3, #2]
 8001850:	3301      	adds	r3, #1
 8001852:	b2da      	uxtb	r2, r3
 8001854:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <transform_rotation+0x4bc>)
 8001856:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8001858:	4b0d      	ldr	r3, [pc, #52]	@ (8001890 <transform_rotation+0x4bc>)
 800185a:	78da      	ldrb	r2, [r3, #3]
 800185c:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <transform_rotation+0x4bc>)
 800185e:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8001860:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <transform_rotation+0x4bc>)
 8001862:	789a      	ldrb	r2, [r3, #2]
 8001864:	4b0a      	ldr	r3, [pc, #40]	@ (8001890 <transform_rotation+0x4bc>)
 8001866:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8001868:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <transform_rotation+0x4bc>)
 800186a:	78db      	ldrb	r3, [r3, #3]
 800186c:	3b01      	subs	r3, #1
 800186e:	b2da      	uxtb	r2, r3
 8001870:	4b07      	ldr	r3, [pc, #28]	@ (8001890 <transform_rotation+0x4bc>)
 8001872:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 8001874:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <transform_rotation+0x4bc>)
 8001876:	789b      	ldrb	r3, [r3, #2]
 8001878:	3b01      	subs	r3, #1
 800187a:	b2da      	uxtb	r2, r3
 800187c:	4b04      	ldr	r3, [pc, #16]	@ (8001890 <transform_rotation+0x4bc>)
 800187e:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8001880:	4b03      	ldr	r3, [pc, #12]	@ (8001890 <transform_rotation+0x4bc>)
 8001882:	78db      	ldrb	r3, [r3, #3]
 8001884:	3b01      	subs	r3, #1
 8001886:	b2da      	uxtb	r2, r3
 8001888:	4b01      	ldr	r3, [pc, #4]	@ (8001890 <transform_rotation+0x4bc>)
 800188a:	725a      	strb	r2, [r3, #9]

					break;
 800188c:	e023      	b.n	80018d6 <transform_rotation+0x502>
 800188e:	bf00      	nop
 8001890:	20025990 	.word	0x20025990
				case(ROTATION_3):
						// 1
						// 1 [1]
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 8001894:	4b8e      	ldr	r3, [pc, #568]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001896:	789a      	ldrb	r2, [r3, #2]
 8001898:	4b8d      	ldr	r3, [pc, #564]	@ (8001ad0 <transform_rotation+0x6fc>)
 800189a:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y - 1;
 800189c:	4b8c      	ldr	r3, [pc, #560]	@ (8001ad0 <transform_rotation+0x6fc>)
 800189e:	78db      	ldrb	r3, [r3, #3]
 80018a0:	3b01      	subs	r3, #1
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	4b8a      	ldr	r3, [pc, #552]	@ (8001ad0 <transform_rotation+0x6fc>)
 80018a6:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;
 80018a8:	4b89      	ldr	r3, [pc, #548]	@ (8001ad0 <transform_rotation+0x6fc>)
 80018aa:	789b      	ldrb	r3, [r3, #2]
 80018ac:	3b01      	subs	r3, #1
 80018ae:	b2da      	uxtb	r2, r3
 80018b0:	4b87      	ldr	r3, [pc, #540]	@ (8001ad0 <transform_rotation+0x6fc>)
 80018b2:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 80018b4:	4b86      	ldr	r3, [pc, #536]	@ (8001ad0 <transform_rotation+0x6fc>)
 80018b6:	78da      	ldrb	r2, [r3, #3]
 80018b8:	4b85      	ldr	r3, [pc, #532]	@ (8001ad0 <transform_rotation+0x6fc>)
 80018ba:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 80018bc:	4b84      	ldr	r3, [pc, #528]	@ (8001ad0 <transform_rotation+0x6fc>)
 80018be:	789b      	ldrb	r3, [r3, #2]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	b2da      	uxtb	r2, r3
 80018c4:	4b82      	ldr	r3, [pc, #520]	@ (8001ad0 <transform_rotation+0x6fc>)
 80018c6:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1;
 80018c8:	4b81      	ldr	r3, [pc, #516]	@ (8001ad0 <transform_rotation+0x6fc>)
 80018ca:	78db      	ldrb	r3, [r3, #3]
 80018cc:	3301      	adds	r3, #1
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	4b7f      	ldr	r3, [pc, #508]	@ (8001ad0 <transform_rotation+0x6fc>)
 80018d2:	725a      	strb	r2, [r3, #9]

					break;
 80018d4:	bf00      	nop
			}
			break;
 80018d6:	e1b8      	b.n	8001c4a <transform_rotation+0x876>
		case(HERO):
			switch(object.Rotation) {
 80018d8:	4b7d      	ldr	r3, [pc, #500]	@ (8001ad0 <transform_rotation+0x6fc>)
 80018da:	785b      	ldrb	r3, [r3, #1]
 80018dc:	2b03      	cmp	r3, #3
 80018de:	f200 81b6 	bhi.w	8001c4e <transform_rotation+0x87a>
 80018e2:	a201      	add	r2, pc, #4	@ (adr r2, 80018e8 <transform_rotation+0x514>)
 80018e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e8:	080018f9 	.word	0x080018f9
 80018ec:	08001937 	.word	0x08001937
 80018f0:	08001975 	.word	0x08001975
 80018f4:	080019b3 	.word	0x080019b3
				case(ROTATION_0):
						// 1 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;	 //
 80018f8:	4b75      	ldr	r3, [pc, #468]	@ (8001ad0 <transform_rotation+0x6fc>)
 80018fa:	789b      	ldrb	r3, [r3, #2]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	4b73      	ldr	r3, [pc, #460]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001902:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 // 1 [1] 1 1
 8001904:	4b72      	ldr	r3, [pc, #456]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001906:	78da      	ldrb	r2, [r3, #3]
 8001908:	4b71      	ldr	r3, [pc, #452]	@ (8001ad0 <transform_rotation+0x6fc>)
 800190a:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 2;	 //
 800190c:	4b70      	ldr	r3, [pc, #448]	@ (8001ad0 <transform_rotation+0x6fc>)
 800190e:	789b      	ldrb	r3, [r3, #2]
 8001910:	3b02      	subs	r3, #2
 8001912:	b2da      	uxtb	r2, r3
 8001914:	4b6e      	ldr	r3, [pc, #440]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001916:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		 // [1] 1 1 1
 8001918:	4b6d      	ldr	r3, [pc, #436]	@ (8001ad0 <transform_rotation+0x6fc>)
 800191a:	78da      	ldrb	r2, [r3, #3]
 800191c:	4b6c      	ldr	r3, [pc, #432]	@ (8001ad0 <transform_rotation+0x6fc>)
 800191e:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //
 8001920:	4b6b      	ldr	r3, [pc, #428]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001922:	789b      	ldrb	r3, [r3, #2]
 8001924:	3301      	adds	r3, #1
 8001926:	b2da      	uxtb	r2, r3
 8001928:	4b69      	ldr	r3, [pc, #420]	@ (8001ad0 <transform_rotation+0x6fc>)
 800192a:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y; 	     //  1 1 1 [1]
 800192c:	4b68      	ldr	r3, [pc, #416]	@ (8001ad0 <transform_rotation+0x6fc>)
 800192e:	78da      	ldrb	r2, [r3, #3]
 8001930:	4b67      	ldr	r3, [pc, #412]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001932:	725a      	strb	r2, [r3, #9]

					break;
 8001934:	e05c      	b.n	80019f0 <transform_rotation+0x61c>
				case(ROTATION_1):
						//  1
						//  1
						// [1]
						//  1
					object.suboriginbit_0.x = object.originbit.x;
 8001936:	4b66      	ldr	r3, [pc, #408]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001938:	789a      	ldrb	r2, [r3, #2]
 800193a:	4b65      	ldr	r3, [pc, #404]	@ (8001ad0 <transform_rotation+0x6fc>)
 800193c:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 800193e:	4b64      	ldr	r3, [pc, #400]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001940:	78db      	ldrb	r3, [r3, #3]
 8001942:	3301      	adds	r3, #1
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4b62      	ldr	r3, [pc, #392]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001948:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 800194a:	4b61      	ldr	r3, [pc, #388]	@ (8001ad0 <transform_rotation+0x6fc>)
 800194c:	789a      	ldrb	r2, [r3, #2]
 800194e:	4b60      	ldr	r3, [pc, #384]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001950:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8001952:	4b5f      	ldr	r3, [pc, #380]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001954:	78db      	ldrb	r3, [r3, #3]
 8001956:	3b01      	subs	r3, #1
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ad0 <transform_rotation+0x6fc>)
 800195c:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 800195e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001960:	789a      	ldrb	r2, [r3, #2]
 8001962:	4b5b      	ldr	r3, [pc, #364]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001964:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 2;
 8001966:	4b5a      	ldr	r3, [pc, #360]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001968:	78db      	ldrb	r3, [r3, #3]
 800196a:	3302      	adds	r3, #2
 800196c:	b2da      	uxtb	r2, r3
 800196e:	4b58      	ldr	r3, [pc, #352]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001970:	725a      	strb	r2, [r3, #9]

					break;
 8001972:	e03d      	b.n	80019f0 <transform_rotation+0x61c>
				case(ROTATION_2):
						// 1 [1] 1 1
					object.suboriginbit_0.x = object.originbit.x - 1;
 8001974:	4b56      	ldr	r3, [pc, #344]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001976:	789b      	ldrb	r3, [r3, #2]
 8001978:	3b01      	subs	r3, #1
 800197a:	b2da      	uxtb	r2, r3
 800197c:	4b54      	ldr	r3, [pc, #336]	@ (8001ad0 <transform_rotation+0x6fc>)
 800197e:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8001980:	4b53      	ldr	r3, [pc, #332]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001982:	78da      	ldrb	r2, [r3, #3]
 8001984:	4b52      	ldr	r3, [pc, #328]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001986:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;
 8001988:	4b51      	ldr	r3, [pc, #324]	@ (8001ad0 <transform_rotation+0x6fc>)
 800198a:	789b      	ldrb	r3, [r3, #2]
 800198c:	3301      	adds	r3, #1
 800198e:	b2da      	uxtb	r2, r3
 8001990:	4b4f      	ldr	r3, [pc, #316]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001992:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8001994:	4b4e      	ldr	r3, [pc, #312]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001996:	78da      	ldrb	r2, [r3, #3]
 8001998:	4b4d      	ldr	r3, [pc, #308]	@ (8001ad0 <transform_rotation+0x6fc>)
 800199a:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 2;
 800199c:	4b4c      	ldr	r3, [pc, #304]	@ (8001ad0 <transform_rotation+0x6fc>)
 800199e:	789b      	ldrb	r3, [r3, #2]
 80019a0:	3302      	adds	r3, #2
 80019a2:	b2da      	uxtb	r2, r3
 80019a4:	4b4a      	ldr	r3, [pc, #296]	@ (8001ad0 <transform_rotation+0x6fc>)
 80019a6:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 80019a8:	4b49      	ldr	r3, [pc, #292]	@ (8001ad0 <transform_rotation+0x6fc>)
 80019aa:	78da      	ldrb	r2, [r3, #3]
 80019ac:	4b48      	ldr	r3, [pc, #288]	@ (8001ad0 <transform_rotation+0x6fc>)
 80019ae:	725a      	strb	r2, [r3, #9]

					break;
 80019b0:	e01e      	b.n	80019f0 <transform_rotation+0x61c>
				case(ROTATION_3):
						//  1
						// [1]
						//  1
						//  1
					object.suboriginbit_0.x = object.originbit.x;
 80019b2:	4b47      	ldr	r3, [pc, #284]	@ (8001ad0 <transform_rotation+0x6fc>)
 80019b4:	789a      	ldrb	r2, [r3, #2]
 80019b6:	4b46      	ldr	r3, [pc, #280]	@ (8001ad0 <transform_rotation+0x6fc>)
 80019b8:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 80019ba:	4b45      	ldr	r3, [pc, #276]	@ (8001ad0 <transform_rotation+0x6fc>)
 80019bc:	78db      	ldrb	r3, [r3, #3]
 80019be:	3301      	adds	r3, #1
 80019c0:	b2da      	uxtb	r2, r3
 80019c2:	4b43      	ldr	r3, [pc, #268]	@ (8001ad0 <transform_rotation+0x6fc>)
 80019c4:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 80019c6:	4b42      	ldr	r3, [pc, #264]	@ (8001ad0 <transform_rotation+0x6fc>)
 80019c8:	789a      	ldrb	r2, [r3, #2]
 80019ca:	4b41      	ldr	r3, [pc, #260]	@ (8001ad0 <transform_rotation+0x6fc>)
 80019cc:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 80019ce:	4b40      	ldr	r3, [pc, #256]	@ (8001ad0 <transform_rotation+0x6fc>)
 80019d0:	78db      	ldrb	r3, [r3, #3]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ad0 <transform_rotation+0x6fc>)
 80019d8:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 80019da:	4b3d      	ldr	r3, [pc, #244]	@ (8001ad0 <transform_rotation+0x6fc>)
 80019dc:	789a      	ldrb	r2, [r3, #2]
 80019de:	4b3c      	ldr	r3, [pc, #240]	@ (8001ad0 <transform_rotation+0x6fc>)
 80019e0:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 2;
 80019e2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad0 <transform_rotation+0x6fc>)
 80019e4:	78db      	ldrb	r3, [r3, #3]
 80019e6:	3b02      	subs	r3, #2
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4b39      	ldr	r3, [pc, #228]	@ (8001ad0 <transform_rotation+0x6fc>)
 80019ec:	725a      	strb	r2, [r3, #9]

					break;
 80019ee:	bf00      	nop
			}

			break;
 80019f0:	e12d      	b.n	8001c4e <transform_rotation+0x87a>
		case(TEEWEE):
			switch(object.Rotation) {
 80019f2:	4b37      	ldr	r3, [pc, #220]	@ (8001ad0 <transform_rotation+0x6fc>)
 80019f4:	785b      	ldrb	r3, [r3, #1]
 80019f6:	2b03      	cmp	r3, #3
 80019f8:	f200 812b 	bhi.w	8001c52 <transform_rotation+0x87e>
 80019fc:	a201      	add	r2, pc, #4	@ (adr r2, 8001a04 <transform_rotation+0x630>)
 80019fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a02:	bf00      	nop
 8001a04:	08001a15 	.word	0x08001a15
 8001a08:	08001a53 	.word	0x08001a53
 8001a0c:	08001a91 	.word	0x08001a91
 8001a10:	08001ad5 	.word	0x08001ad5
				case(ROTATION_0):
						//    1
						// 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;	 //     1
 8001a14:	4b2e      	ldr	r3, [pc, #184]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a16:	789b      	ldrb	r3, [r3, #2]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a1e:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 // [1] 1 1
 8001a20:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a22:	78da      	ldrb	r2, [r3, #3]
 8001a24:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a26:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;	 //	  1
 8001a28:	4b29      	ldr	r3, [pc, #164]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a2a:	789b      	ldrb	r3, [r3, #2]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	4b27      	ldr	r3, [pc, #156]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a32:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		 // 1 1 [1]
 8001a34:	4b26      	ldr	r3, [pc, #152]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a36:	78da      	ldrb	r2, [r3, #3]
 8001a38:	4b25      	ldr	r3, [pc, #148]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a3a:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;	     //	 [1]
 8001a3c:	4b24      	ldr	r3, [pc, #144]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a3e:	789a      	ldrb	r2, [r3, #2]
 8001a40:	4b23      	ldr	r3, [pc, #140]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a42:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1 1 1
 8001a44:	4b22      	ldr	r3, [pc, #136]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a46:	78db      	ldrb	r3, [r3, #3]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	4b20      	ldr	r3, [pc, #128]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a4e:	725a      	strb	r2, [r3, #9]

					break;
 8001a50:	e05f      	b.n	8001b12 <transform_rotation+0x73e>
				case(ROTATION_1):
						//  1
						// [1] 1
						//  1
					object.suboriginbit_0.x = object.originbit.x + 1;
 8001a52:	4b1f      	ldr	r3, [pc, #124]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a54:	789b      	ldrb	r3, [r3, #2]
 8001a56:	3301      	adds	r3, #1
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a5c:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8001a5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a60:	78da      	ldrb	r2, [r3, #3]
 8001a62:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a64:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8001a66:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a68:	789a      	ldrb	r2, [r3, #2]
 8001a6a:	4b19      	ldr	r3, [pc, #100]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a6c:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;
 8001a6e:	4b18      	ldr	r3, [pc, #96]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a70:	78db      	ldrb	r3, [r3, #3]
 8001a72:	3301      	adds	r3, #1
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	4b16      	ldr	r3, [pc, #88]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a78:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8001a7a:	4b15      	ldr	r3, [pc, #84]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a7c:	789a      	ldrb	r2, [r3, #2]
 8001a7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a80:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8001a82:	4b13      	ldr	r3, [pc, #76]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a84:	78db      	ldrb	r3, [r3, #3]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a8c:	725a      	strb	r2, [r3, #9]

					break;
 8001a8e:	e040      	b.n	8001b12 <transform_rotation+0x73e>
				case(ROTATION_2):
						// 1 [1] 1
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 8001a90:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a92:	789a      	ldrb	r2, [r3, #2]
 8001a94:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a96:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y - 1;
 8001a98:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001a9a:	78db      	ldrb	r3, [r3, #3]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001aa2:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001aa6:	789b      	ldrb	r3, [r3, #2]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	4b08      	ldr	r3, [pc, #32]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001aae:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8001ab0:	4b07      	ldr	r3, [pc, #28]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001ab2:	78da      	ldrb	r2, [r3, #3]
 8001ab4:	4b06      	ldr	r3, [pc, #24]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001ab6:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 8001ab8:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001aba:	789b      	ldrb	r3, [r3, #2]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	4b03      	ldr	r3, [pc, #12]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001ac2:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 8001ac4:	4b02      	ldr	r3, [pc, #8]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001ac6:	78da      	ldrb	r2, [r3, #3]
 8001ac8:	4b01      	ldr	r3, [pc, #4]	@ (8001ad0 <transform_rotation+0x6fc>)
 8001aca:	725a      	strb	r2, [r3, #9]

					break;
 8001acc:	e021      	b.n	8001b12 <transform_rotation+0x73e>
 8001ace:	bf00      	nop
 8001ad0:	20025990 	.word	0x20025990
				case(ROTATION_3):
						//    1
						// 1 [1]
						//    1
					object.suboriginbit_0.x = object.originbit.x - 1;
 8001ad4:	4b63      	ldr	r3, [pc, #396]	@ (8001c64 <transform_rotation+0x890>)
 8001ad6:	789b      	ldrb	r3, [r3, #2]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	b2da      	uxtb	r2, r3
 8001adc:	4b61      	ldr	r3, [pc, #388]	@ (8001c64 <transform_rotation+0x890>)
 8001ade:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8001ae0:	4b60      	ldr	r3, [pc, #384]	@ (8001c64 <transform_rotation+0x890>)
 8001ae2:	78da      	ldrb	r2, [r3, #3]
 8001ae4:	4b5f      	ldr	r3, [pc, #380]	@ (8001c64 <transform_rotation+0x890>)
 8001ae6:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8001ae8:	4b5e      	ldr	r3, [pc, #376]	@ (8001c64 <transform_rotation+0x890>)
 8001aea:	789a      	ldrb	r2, [r3, #2]
 8001aec:	4b5d      	ldr	r3, [pc, #372]	@ (8001c64 <transform_rotation+0x890>)
 8001aee:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;
 8001af0:	4b5c      	ldr	r3, [pc, #368]	@ (8001c64 <transform_rotation+0x890>)
 8001af2:	78db      	ldrb	r3, [r3, #3]
 8001af4:	3301      	adds	r3, #1
 8001af6:	b2da      	uxtb	r2, r3
 8001af8:	4b5a      	ldr	r3, [pc, #360]	@ (8001c64 <transform_rotation+0x890>)
 8001afa:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8001afc:	4b59      	ldr	r3, [pc, #356]	@ (8001c64 <transform_rotation+0x890>)
 8001afe:	789a      	ldrb	r2, [r3, #2]
 8001b00:	4b58      	ldr	r3, [pc, #352]	@ (8001c64 <transform_rotation+0x890>)
 8001b02:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8001b04:	4b57      	ldr	r3, [pc, #348]	@ (8001c64 <transform_rotation+0x890>)
 8001b06:	78db      	ldrb	r3, [r3, #3]
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	4b55      	ldr	r3, [pc, #340]	@ (8001c64 <transform_rotation+0x890>)
 8001b0e:	725a      	strb	r2, [r3, #9]

					break;
 8001b10:	bf00      	nop
			}

			break;
 8001b12:	e09e      	b.n	8001c52 <transform_rotation+0x87e>
		case(SMASHBOY):
			switch(object.Rotation) {
 8001b14:	4b53      	ldr	r3, [pc, #332]	@ (8001c64 <transform_rotation+0x890>)
 8001b16:	785b      	ldrb	r3, [r3, #1]
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	f200 809c 	bhi.w	8001c56 <transform_rotation+0x882>
 8001b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b24 <transform_rotation+0x750>)
 8001b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b24:	08001b35 	.word	0x08001b35
 8001b28:	08001b77 	.word	0x08001b77
 8001b2c:	08001bb9 	.word	0x08001bb9
 8001b30:	08001bfb 	.word	0x08001bfb
				case(ROTATION_0):
					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 8001b34:	4b4b      	ldr	r3, [pc, #300]	@ (8001c64 <transform_rotation+0x890>)
 8001b36:	789b      	ldrb	r3, [r3, #2]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	4b49      	ldr	r3, [pc, #292]	@ (8001c64 <transform_rotation+0x890>)
 8001b3e:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 8001b40:	4b48      	ldr	r3, [pc, #288]	@ (8001c64 <transform_rotation+0x890>)
 8001b42:	78da      	ldrb	r2, [r3, #3]
 8001b44:	4b47      	ldr	r3, [pc, #284]	@ (8001c64 <transform_rotation+0x890>)
 8001b46:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 8001b48:	4b46      	ldr	r3, [pc, #280]	@ (8001c64 <transform_rotation+0x890>)
 8001b4a:	789a      	ldrb	r2, [r3, #2]
 8001b4c:	4b45      	ldr	r3, [pc, #276]	@ (8001c64 <transform_rotation+0x890>)
 8001b4e:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 8001b50:	4b44      	ldr	r3, [pc, #272]	@ (8001c64 <transform_rotation+0x890>)
 8001b52:	78db      	ldrb	r3, [r3, #3]
 8001b54:	3301      	adds	r3, #1
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	4b42      	ldr	r3, [pc, #264]	@ (8001c64 <transform_rotation+0x890>)
 8001b5a:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 8001b5c:	4b41      	ldr	r3, [pc, #260]	@ (8001c64 <transform_rotation+0x890>)
 8001b5e:	789b      	ldrb	r3, [r3, #2]
 8001b60:	3301      	adds	r3, #1
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	4b3f      	ldr	r3, [pc, #252]	@ (8001c64 <transform_rotation+0x890>)
 8001b66:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 8001b68:	4b3e      	ldr	r3, [pc, #248]	@ (8001c64 <transform_rotation+0x890>)
 8001b6a:	78db      	ldrb	r3, [r3, #3]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	b2da      	uxtb	r2, r3
 8001b70:	4b3c      	ldr	r3, [pc, #240]	@ (8001c64 <transform_rotation+0x890>)
 8001b72:	725a      	strb	r2, [r3, #9]

					break;
 8001b74:	e062      	b.n	8001c3c <transform_rotation+0x868>
				case(ROTATION_1):

					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 8001b76:	4b3b      	ldr	r3, [pc, #236]	@ (8001c64 <transform_rotation+0x890>)
 8001b78:	789b      	ldrb	r3, [r3, #2]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	b2da      	uxtb	r2, r3
 8001b7e:	4b39      	ldr	r3, [pc, #228]	@ (8001c64 <transform_rotation+0x890>)
 8001b80:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 8001b82:	4b38      	ldr	r3, [pc, #224]	@ (8001c64 <transform_rotation+0x890>)
 8001b84:	78da      	ldrb	r2, [r3, #3]
 8001b86:	4b37      	ldr	r3, [pc, #220]	@ (8001c64 <transform_rotation+0x890>)
 8001b88:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 8001b8a:	4b36      	ldr	r3, [pc, #216]	@ (8001c64 <transform_rotation+0x890>)
 8001b8c:	789a      	ldrb	r2, [r3, #2]
 8001b8e:	4b35      	ldr	r3, [pc, #212]	@ (8001c64 <transform_rotation+0x890>)
 8001b90:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 8001b92:	4b34      	ldr	r3, [pc, #208]	@ (8001c64 <transform_rotation+0x890>)
 8001b94:	78db      	ldrb	r3, [r3, #3]
 8001b96:	3301      	adds	r3, #1
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4b32      	ldr	r3, [pc, #200]	@ (8001c64 <transform_rotation+0x890>)
 8001b9c:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 8001b9e:	4b31      	ldr	r3, [pc, #196]	@ (8001c64 <transform_rotation+0x890>)
 8001ba0:	789b      	ldrb	r3, [r3, #2]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	b2da      	uxtb	r2, r3
 8001ba6:	4b2f      	ldr	r3, [pc, #188]	@ (8001c64 <transform_rotation+0x890>)
 8001ba8:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 8001baa:	4b2e      	ldr	r3, [pc, #184]	@ (8001c64 <transform_rotation+0x890>)
 8001bac:	78db      	ldrb	r3, [r3, #3]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4b2c      	ldr	r3, [pc, #176]	@ (8001c64 <transform_rotation+0x890>)
 8001bb4:	725a      	strb	r2, [r3, #9]

					break;
 8001bb6:	e041      	b.n	8001c3c <transform_rotation+0x868>
				case(ROTATION_2):
					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 8001bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8001c64 <transform_rotation+0x890>)
 8001bba:	789b      	ldrb	r3, [r3, #2]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	b2da      	uxtb	r2, r3
 8001bc0:	4b28      	ldr	r3, [pc, #160]	@ (8001c64 <transform_rotation+0x890>)
 8001bc2:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 8001bc4:	4b27      	ldr	r3, [pc, #156]	@ (8001c64 <transform_rotation+0x890>)
 8001bc6:	78da      	ldrb	r2, [r3, #3]
 8001bc8:	4b26      	ldr	r3, [pc, #152]	@ (8001c64 <transform_rotation+0x890>)
 8001bca:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 8001bcc:	4b25      	ldr	r3, [pc, #148]	@ (8001c64 <transform_rotation+0x890>)
 8001bce:	789a      	ldrb	r2, [r3, #2]
 8001bd0:	4b24      	ldr	r3, [pc, #144]	@ (8001c64 <transform_rotation+0x890>)
 8001bd2:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 8001bd4:	4b23      	ldr	r3, [pc, #140]	@ (8001c64 <transform_rotation+0x890>)
 8001bd6:	78db      	ldrb	r3, [r3, #3]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	4b21      	ldr	r3, [pc, #132]	@ (8001c64 <transform_rotation+0x890>)
 8001bde:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 8001be0:	4b20      	ldr	r3, [pc, #128]	@ (8001c64 <transform_rotation+0x890>)
 8001be2:	789b      	ldrb	r3, [r3, #2]
 8001be4:	3301      	adds	r3, #1
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	4b1e      	ldr	r3, [pc, #120]	@ (8001c64 <transform_rotation+0x890>)
 8001bea:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 8001bec:	4b1d      	ldr	r3, [pc, #116]	@ (8001c64 <transform_rotation+0x890>)
 8001bee:	78db      	ldrb	r3, [r3, #3]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c64 <transform_rotation+0x890>)
 8001bf6:	725a      	strb	r2, [r3, #9]

					break;
 8001bf8:	e020      	b.n	8001c3c <transform_rotation+0x868>
				case(ROTATION_3):

					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 8001bfa:	4b1a      	ldr	r3, [pc, #104]	@ (8001c64 <transform_rotation+0x890>)
 8001bfc:	789b      	ldrb	r3, [r3, #2]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	4b18      	ldr	r3, [pc, #96]	@ (8001c64 <transform_rotation+0x890>)
 8001c04:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 8001c06:	4b17      	ldr	r3, [pc, #92]	@ (8001c64 <transform_rotation+0x890>)
 8001c08:	78da      	ldrb	r2, [r3, #3]
 8001c0a:	4b16      	ldr	r3, [pc, #88]	@ (8001c64 <transform_rotation+0x890>)
 8001c0c:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 8001c0e:	4b15      	ldr	r3, [pc, #84]	@ (8001c64 <transform_rotation+0x890>)
 8001c10:	789a      	ldrb	r2, [r3, #2]
 8001c12:	4b14      	ldr	r3, [pc, #80]	@ (8001c64 <transform_rotation+0x890>)
 8001c14:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 8001c16:	4b13      	ldr	r3, [pc, #76]	@ (8001c64 <transform_rotation+0x890>)
 8001c18:	78db      	ldrb	r3, [r3, #3]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4b11      	ldr	r3, [pc, #68]	@ (8001c64 <transform_rotation+0x890>)
 8001c20:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 8001c22:	4b10      	ldr	r3, [pc, #64]	@ (8001c64 <transform_rotation+0x890>)
 8001c24:	789b      	ldrb	r3, [r3, #2]
 8001c26:	3301      	adds	r3, #1
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c64 <transform_rotation+0x890>)
 8001c2c:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c64 <transform_rotation+0x890>)
 8001c30:	78db      	ldrb	r3, [r3, #3]
 8001c32:	3301      	adds	r3, #1
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	4b0b      	ldr	r3, [pc, #44]	@ (8001c64 <transform_rotation+0x890>)
 8001c38:	725a      	strb	r2, [r3, #9]

					break;
 8001c3a:	bf00      	nop
			}
		break;
 8001c3c:	e00b      	b.n	8001c56 <transform_rotation+0x882>
			break;
 8001c3e:	bf00      	nop
 8001c40:	e00a      	b.n	8001c58 <transform_rotation+0x884>
			break;
 8001c42:	bf00      	nop
 8001c44:	e008      	b.n	8001c58 <transform_rotation+0x884>
			break;
 8001c46:	bf00      	nop
 8001c48:	e006      	b.n	8001c58 <transform_rotation+0x884>
			break;
 8001c4a:	bf00      	nop
 8001c4c:	e004      	b.n	8001c58 <transform_rotation+0x884>
			break;
 8001c4e:	bf00      	nop
 8001c50:	e002      	b.n	8001c58 <transform_rotation+0x884>
			break;
 8001c52:	bf00      	nop
 8001c54:	e000      	b.n	8001c58 <transform_rotation+0x884>
		break;
 8001c56:	bf00      	nop
	}

}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20025990 	.word	0x20025990

08001c68 <printMatrix>:


void printMatrix(void){
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08c      	sub	sp, #48	@ 0x30
 8001c6c:	af00      	add	r7, sp, #0
	// Connect to the LCD screen and update that
	//LCD_Draw_Circle_Fill(x,y,radius,color);
	for (int i = 0; i < ROWS; i++) {
 8001c6e:	2300      	movs	r3, #0
 8001c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c72:	e078      	b.n	8001d66 <printMatrix+0xfe>
		for (int j = 0; j < COLS; j++) {
 8001c74:	2300      	movs	r3, #0
 8001c76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c78:	e06f      	b.n	8001d5a <printMatrix+0xf2>
			uint8_t value = dummyTable[i][j];
 8001c7a:	493f      	ldr	r1, [pc, #252]	@ (8001d78 <printMatrix+0x110>)
 8001c7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c7e:	4613      	mov	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	18ca      	adds	r2, r1, r3
 8001c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c8a:	4413      	add	r3, r2
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	75fb      	strb	r3, [r7, #23]
			if(value){
 8001c90:	7dfb      	ldrb	r3, [r7, #23]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d02f      	beq.n	8001cf6 <printMatrix+0x8e>
				// Calculate top-left corner of the block
				int x = j * 24;//BLOCK_WIDTH;
 8001c96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c98:	4613      	mov	r3, r2
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	4413      	add	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	60bb      	str	r3, [r7, #8]
				int y = i * 24;//BLOCK_HEIGHT;
 8001ca2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4413      	add	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	607b      	str	r3, [r7, #4]

				// Draw the block on the screen

				for (int row = 0; row < BLOCK_HEIGHT; row++) {
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cb2:	e01c      	b.n	8001cee <printMatrix+0x86>
					for (int col = 0; col < BLOCK_WIDTH; col++) {
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	623b      	str	r3, [r7, #32]
 8001cb8:	e013      	b.n	8001ce2 <printMatrix+0x7a>
						LCD_Draw_Pixel(x+col,y+row,LCD_COLOR_RED);
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	4413      	add	r3, r2
 8001cc4:	b298      	uxth	r0, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	4413      	add	r3, r2
 8001cd0:	b29b      	uxth	r3, r3
 8001cd2:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f7fe fe9e 	bl	8000a18 <LCD_Draw_Pixel>
					for (int col = 0; col < BLOCK_WIDTH; col++) {
 8001cdc:	6a3b      	ldr	r3, [r7, #32]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	623b      	str	r3, [r7, #32]
 8001ce2:	6a3b      	ldr	r3, [r7, #32]
 8001ce4:	2b17      	cmp	r3, #23
 8001ce6:	dde8      	ble.n	8001cba <printMatrix+0x52>
				for (int row = 0; row < BLOCK_HEIGHT; row++) {
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cea:	3301      	adds	r3, #1
 8001cec:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf0:	2b17      	cmp	r3, #23
 8001cf2:	dddf      	ble.n	8001cb4 <printMatrix+0x4c>
 8001cf4:	e02e      	b.n	8001d54 <printMatrix+0xec>
					}
				}
			} else {
				int x = j * 24;//BLOCK_WIDTH;
 8001cf6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	4413      	add	r3, r2
 8001cfe:	00db      	lsls	r3, r3, #3
 8001d00:	613b      	str	r3, [r7, #16]
				int y = i * 24;//BLOCK_HEIGHT;
 8001d02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d04:	4613      	mov	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	4413      	add	r3, r2
 8001d0a:	00db      	lsls	r3, r3, #3
 8001d0c:	60fb      	str	r3, [r7, #12]

				// Draw the block on the screen

				for (int row = 0; row < BLOCK_HEIGHT; row++) {
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
 8001d12:	e01c      	b.n	8001d4e <printMatrix+0xe6>
					for (int col = 0; col < BLOCK_WIDTH; col++) {
 8001d14:	2300      	movs	r3, #0
 8001d16:	61bb      	str	r3, [r7, #24]
 8001d18:	e013      	b.n	8001d42 <printMatrix+0xda>
						LCD_Draw_Pixel(x+col,y+row,LCD_COLOR_WHITE);
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	4413      	add	r3, r2
 8001d24:	b298      	uxth	r0, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	4413      	add	r3, r2
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d36:	4619      	mov	r1, r3
 8001d38:	f7fe fe6e 	bl	8000a18 <LCD_Draw_Pixel>
					for (int col = 0; col < BLOCK_WIDTH; col++) {
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	61bb      	str	r3, [r7, #24]
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	2b17      	cmp	r3, #23
 8001d46:	dde8      	ble.n	8001d1a <printMatrix+0xb2>
				for (int row = 0; row < BLOCK_HEIGHT; row++) {
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	2b17      	cmp	r3, #23
 8001d52:	dddf      	ble.n	8001d14 <printMatrix+0xac>
		for (int j = 0; j < COLS; j++) {
 8001d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d56:	3301      	adds	r3, #1
 8001d58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d5c:	2b09      	cmp	r3, #9
 8001d5e:	dd8c      	ble.n	8001c7a <printMatrix+0x12>
	for (int i = 0; i < ROWS; i++) {
 8001d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d62:	3301      	adds	r3, #1
 8001d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d68:	2b0c      	cmp	r3, #12
 8001d6a:	dd83      	ble.n	8001c74 <printMatrix+0xc>
					}
				}
			}
		}
	}
}
 8001d6c:	bf00      	nop
 8001d6e:	bf00      	nop
 8001d70:	3730      	adds	r7, #48	@ 0x30
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	2002599c 	.word	0x2002599c

08001d7c <Matrix_clear>:


void Matrix_clear(void) {
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
	dummyTable[object.originbit.y][object.originbit.x] = 0;
 8001d80:	4b20      	ldr	r3, [pc, #128]	@ (8001e04 <Matrix_clear+0x88>)
 8001d82:	78db      	ldrb	r3, [r3, #3]
 8001d84:	4619      	mov	r1, r3
 8001d86:	4b1f      	ldr	r3, [pc, #124]	@ (8001e04 <Matrix_clear+0x88>)
 8001d88:	789b      	ldrb	r3, [r3, #2]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	4a1e      	ldr	r2, [pc, #120]	@ (8001e08 <Matrix_clear+0x8c>)
 8001d8e:	460b      	mov	r3, r1
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	440b      	add	r3, r1
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	4413      	add	r3, r2
 8001d98:	4403      	add	r3, r0
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_0.y][object.suboriginbit_0.x] = 0;
 8001d9e:	4b19      	ldr	r3, [pc, #100]	@ (8001e04 <Matrix_clear+0x88>)
 8001da0:	795b      	ldrb	r3, [r3, #5]
 8001da2:	4619      	mov	r1, r3
 8001da4:	4b17      	ldr	r3, [pc, #92]	@ (8001e04 <Matrix_clear+0x88>)
 8001da6:	791b      	ldrb	r3, [r3, #4]
 8001da8:	4618      	mov	r0, r3
 8001daa:	4a17      	ldr	r2, [pc, #92]	@ (8001e08 <Matrix_clear+0x8c>)
 8001dac:	460b      	mov	r3, r1
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	440b      	add	r3, r1
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	4413      	add	r3, r2
 8001db6:	4403      	add	r3, r0
 8001db8:	2200      	movs	r2, #0
 8001dba:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_1.y][object.suboriginbit_1.x] = 0;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <Matrix_clear+0x88>)
 8001dbe:	79db      	ldrb	r3, [r3, #7]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <Matrix_clear+0x88>)
 8001dc4:	799b      	ldrb	r3, [r3, #6]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	4a0f      	ldr	r2, [pc, #60]	@ (8001e08 <Matrix_clear+0x8c>)
 8001dca:	460b      	mov	r3, r1
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	440b      	add	r3, r1
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4413      	add	r3, r2
 8001dd4:	4403      	add	r3, r0
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_2.y][object.suboriginbit_2.x] = 0;
 8001dda:	4b0a      	ldr	r3, [pc, #40]	@ (8001e04 <Matrix_clear+0x88>)
 8001ddc:	7a5b      	ldrb	r3, [r3, #9]
 8001dde:	4619      	mov	r1, r3
 8001de0:	4b08      	ldr	r3, [pc, #32]	@ (8001e04 <Matrix_clear+0x88>)
 8001de2:	7a1b      	ldrb	r3, [r3, #8]
 8001de4:	4618      	mov	r0, r3
 8001de6:	4a08      	ldr	r2, [pc, #32]	@ (8001e08 <Matrix_clear+0x8c>)
 8001de8:	460b      	mov	r3, r1
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	440b      	add	r3, r1
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4413      	add	r3, r2
 8001df2:	4403      	add	r3, r0
 8001df4:	2200      	movs	r2, #0
 8001df6:	701a      	strb	r2, [r3, #0]
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	20025990 	.word	0x20025990
 8001e08:	2002599c 	.word	0x2002599c

08001e0c <Matrix_update>:
void Matrix_update(void){
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
	dummyTable[object.originbit.y][object.originbit.x] = 1;
 8001e10:	4b20      	ldr	r3, [pc, #128]	@ (8001e94 <Matrix_update+0x88>)
 8001e12:	78db      	ldrb	r3, [r3, #3]
 8001e14:	4619      	mov	r1, r3
 8001e16:	4b1f      	ldr	r3, [pc, #124]	@ (8001e94 <Matrix_update+0x88>)
 8001e18:	789b      	ldrb	r3, [r3, #2]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	4a1e      	ldr	r2, [pc, #120]	@ (8001e98 <Matrix_update+0x8c>)
 8001e1e:	460b      	mov	r3, r1
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	440b      	add	r3, r1
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	4403      	add	r3, r0
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_0.y][object.suboriginbit_0.x] = 1;
 8001e2e:	4b19      	ldr	r3, [pc, #100]	@ (8001e94 <Matrix_update+0x88>)
 8001e30:	795b      	ldrb	r3, [r3, #5]
 8001e32:	4619      	mov	r1, r3
 8001e34:	4b17      	ldr	r3, [pc, #92]	@ (8001e94 <Matrix_update+0x88>)
 8001e36:	791b      	ldrb	r3, [r3, #4]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	4a17      	ldr	r2, [pc, #92]	@ (8001e98 <Matrix_update+0x8c>)
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	009b      	lsls	r3, r3, #2
 8001e40:	440b      	add	r3, r1
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	4413      	add	r3, r2
 8001e46:	4403      	add	r3, r0
 8001e48:	2201      	movs	r2, #1
 8001e4a:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_1.y][object.suboriginbit_1.x] = 1;
 8001e4c:	4b11      	ldr	r3, [pc, #68]	@ (8001e94 <Matrix_update+0x88>)
 8001e4e:	79db      	ldrb	r3, [r3, #7]
 8001e50:	4619      	mov	r1, r3
 8001e52:	4b10      	ldr	r3, [pc, #64]	@ (8001e94 <Matrix_update+0x88>)
 8001e54:	799b      	ldrb	r3, [r3, #6]
 8001e56:	4618      	mov	r0, r3
 8001e58:	4a0f      	ldr	r2, [pc, #60]	@ (8001e98 <Matrix_update+0x8c>)
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	440b      	add	r3, r1
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	4403      	add	r3, r0
 8001e66:	2201      	movs	r2, #1
 8001e68:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_2.y][object.suboriginbit_2.x] = 1;
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e94 <Matrix_update+0x88>)
 8001e6c:	7a5b      	ldrb	r3, [r3, #9]
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4b08      	ldr	r3, [pc, #32]	@ (8001e94 <Matrix_update+0x88>)
 8001e72:	7a1b      	ldrb	r3, [r3, #8]
 8001e74:	4618      	mov	r0, r3
 8001e76:	4a08      	ldr	r2, [pc, #32]	@ (8001e98 <Matrix_update+0x8c>)
 8001e78:	460b      	mov	r3, r1
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	4403      	add	r3, r0
 8001e84:	2201      	movs	r2, #1
 8001e86:	701a      	strb	r2, [r3, #0]
}
 8001e88:	bf00      	nop
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20025990 	.word	0x20025990
 8001e98:	2002599c 	.word	0x2002599c

08001e9c <getScheduledEvents>:
 */
#include "Scheduler.h"

static uint32_t scheduledEvents;

uint32_t getScheduledEvents(){
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
	uint32_t returnVal = scheduledEvents;
 8001ea2:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <getScheduledEvents+0x1c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	607b      	str	r3, [r7, #4]
	return returnVal;
 8001ea8:	687b      	ldr	r3, [r7, #4]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	20025a24 	.word	0x20025a24

08001ebc <addScheduledEvent>:

void addScheduledEvent(uint32_t event){
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	scheduledEvents |= (event);
 8001ec4:	4b05      	ldr	r3, [pc, #20]	@ (8001edc <addScheduledEvent+0x20>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	4a03      	ldr	r2, [pc, #12]	@ (8001edc <addScheduledEvent+0x20>)
 8001ece:	6013      	str	r3, [r2, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	20025a24 	.word	0x20025a24

08001ee0 <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t event){
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~(event);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	43da      	mvns	r2, r3
 8001eec:	4b05      	ldr	r3, [pc, #20]	@ (8001f04 <removeSchedulerEvent+0x24>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	4a04      	ldr	r2, [pc, #16]	@ (8001f04 <removeSchedulerEvent+0x24>)
 8001ef4:	6013      	str	r3, [r2, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20025a24 	.word	0x20025a24

08001f08 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001f0c:	f000 f9fe 	bl	800230c <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001f10:	20ca      	movs	r0, #202	@ 0xca
 8001f12:	f000 f943 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001f16:	20c3      	movs	r0, #195	@ 0xc3
 8001f18:	f000 f94d 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001f1c:	2008      	movs	r0, #8
 8001f1e:	f000 f94a 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001f22:	2050      	movs	r0, #80	@ 0x50
 8001f24:	f000 f947 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001f28:	20cf      	movs	r0, #207	@ 0xcf
 8001f2a:	f000 f937 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001f2e:	2000      	movs	r0, #0
 8001f30:	f000 f941 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001f34:	20c1      	movs	r0, #193	@ 0xc1
 8001f36:	f000 f93e 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001f3a:	2030      	movs	r0, #48	@ 0x30
 8001f3c:	f000 f93b 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001f40:	20ed      	movs	r0, #237	@ 0xed
 8001f42:	f000 f92b 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001f46:	2064      	movs	r0, #100	@ 0x64
 8001f48:	f000 f935 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001f4c:	2003      	movs	r0, #3
 8001f4e:	f000 f932 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001f52:	2012      	movs	r0, #18
 8001f54:	f000 f92f 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001f58:	2081      	movs	r0, #129	@ 0x81
 8001f5a:	f000 f92c 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001f5e:	20e8      	movs	r0, #232	@ 0xe8
 8001f60:	f000 f91c 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001f64:	2085      	movs	r0, #133	@ 0x85
 8001f66:	f000 f926 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f000 f923 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001f70:	2078      	movs	r0, #120	@ 0x78
 8001f72:	f000 f920 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001f76:	20cb      	movs	r0, #203	@ 0xcb
 8001f78:	f000 f910 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001f7c:	2039      	movs	r0, #57	@ 0x39
 8001f7e:	f000 f91a 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001f82:	202c      	movs	r0, #44	@ 0x2c
 8001f84:	f000 f917 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f000 f914 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001f8e:	2034      	movs	r0, #52	@ 0x34
 8001f90:	f000 f911 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001f94:	2002      	movs	r0, #2
 8001f96:	f000 f90e 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001f9a:	20f7      	movs	r0, #247	@ 0xf7
 8001f9c:	f000 f8fe 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001fa0:	2020      	movs	r0, #32
 8001fa2:	f000 f908 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001fa6:	20ea      	movs	r0, #234	@ 0xea
 8001fa8:	f000 f8f8 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001fac:	2000      	movs	r0, #0
 8001fae:	f000 f902 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	f000 f8ff 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001fb8:	20b1      	movs	r0, #177	@ 0xb1
 8001fba:	f000 f8ef 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f000 f8f9 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001fc4:	201b      	movs	r0, #27
 8001fc6:	f000 f8f6 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001fca:	20b6      	movs	r0, #182	@ 0xb6
 8001fcc:	f000 f8e6 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001fd0:	200a      	movs	r0, #10
 8001fd2:	f000 f8f0 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001fd6:	20a2      	movs	r0, #162	@ 0xa2
 8001fd8:	f000 f8ed 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001fdc:	20c0      	movs	r0, #192	@ 0xc0
 8001fde:	f000 f8dd 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001fe2:	2010      	movs	r0, #16
 8001fe4:	f000 f8e7 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001fe8:	20c1      	movs	r0, #193	@ 0xc1
 8001fea:	f000 f8d7 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001fee:	2010      	movs	r0, #16
 8001ff0:	f000 f8e1 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001ff4:	20c5      	movs	r0, #197	@ 0xc5
 8001ff6:	f000 f8d1 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001ffa:	2045      	movs	r0, #69	@ 0x45
 8001ffc:	f000 f8db 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8002000:	2015      	movs	r0, #21
 8002002:	f000 f8d8 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8002006:	20c7      	movs	r0, #199	@ 0xc7
 8002008:	f000 f8c8 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 800200c:	2090      	movs	r0, #144	@ 0x90
 800200e:	f000 f8d2 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8002012:	2036      	movs	r0, #54	@ 0x36
 8002014:	f000 f8c2 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8002018:	20c8      	movs	r0, #200	@ 0xc8
 800201a:	f000 f8cc 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 800201e:	20f2      	movs	r0, #242	@ 0xf2
 8002020:	f000 f8bc 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002024:	2000      	movs	r0, #0
 8002026:	f000 f8c6 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 800202a:	20b0      	movs	r0, #176	@ 0xb0
 800202c:	f000 f8b6 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8002030:	20c2      	movs	r0, #194	@ 0xc2
 8002032:	f000 f8c0 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8002036:	20b6      	movs	r0, #182	@ 0xb6
 8002038:	f000 f8b0 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 800203c:	200a      	movs	r0, #10
 800203e:	f000 f8ba 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8002042:	20a7      	movs	r0, #167	@ 0xa7
 8002044:	f000 f8b7 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8002048:	2027      	movs	r0, #39	@ 0x27
 800204a:	f000 f8b4 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 800204e:	2004      	movs	r0, #4
 8002050:	f000 f8b1 	bl	80021b6 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8002054:	202a      	movs	r0, #42	@ 0x2a
 8002056:	f000 f8a1 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800205a:	2000      	movs	r0, #0
 800205c:	f000 f8ab 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002060:	2000      	movs	r0, #0
 8002062:	f000 f8a8 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002066:	2000      	movs	r0, #0
 8002068:	f000 f8a5 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 800206c:	20ef      	movs	r0, #239	@ 0xef
 800206e:	f000 f8a2 	bl	80021b6 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8002072:	202b      	movs	r0, #43	@ 0x2b
 8002074:	f000 f892 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002078:	2000      	movs	r0, #0
 800207a:	f000 f89c 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800207e:	2000      	movs	r0, #0
 8002080:	f000 f899 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8002084:	2001      	movs	r0, #1
 8002086:	f000 f896 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 800208a:	203f      	movs	r0, #63	@ 0x3f
 800208c:	f000 f893 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8002090:	20f6      	movs	r0, #246	@ 0xf6
 8002092:	f000 f883 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8002096:	2001      	movs	r0, #1
 8002098:	f000 f88d 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800209c:	2000      	movs	r0, #0
 800209e:	f000 f88a 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 80020a2:	2006      	movs	r0, #6
 80020a4:	f000 f887 	bl	80021b6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80020a8:	202c      	movs	r0, #44	@ 0x2c
 80020aa:	f000 f877 	bl	800219c <ili9341_Write_Reg>
  LCD_Delay(200);
 80020ae:	20c8      	movs	r0, #200	@ 0xc8
 80020b0:	f000 f9e8 	bl	8002484 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80020b4:	2026      	movs	r0, #38	@ 0x26
 80020b6:	f000 f871 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80020ba:	2001      	movs	r0, #1
 80020bc:	f000 f87b 	bl	80021b6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80020c0:	20e0      	movs	r0, #224	@ 0xe0
 80020c2:	f000 f86b 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80020c6:	200f      	movs	r0, #15
 80020c8:	f000 f875 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80020cc:	2029      	movs	r0, #41	@ 0x29
 80020ce:	f000 f872 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80020d2:	2024      	movs	r0, #36	@ 0x24
 80020d4:	f000 f86f 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80020d8:	200c      	movs	r0, #12
 80020da:	f000 f86c 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80020de:	200e      	movs	r0, #14
 80020e0:	f000 f869 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80020e4:	2009      	movs	r0, #9
 80020e6:	f000 f866 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80020ea:	204e      	movs	r0, #78	@ 0x4e
 80020ec:	f000 f863 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80020f0:	2078      	movs	r0, #120	@ 0x78
 80020f2:	f000 f860 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80020f6:	203c      	movs	r0, #60	@ 0x3c
 80020f8:	f000 f85d 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80020fc:	2009      	movs	r0, #9
 80020fe:	f000 f85a 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8002102:	2013      	movs	r0, #19
 8002104:	f000 f857 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002108:	2005      	movs	r0, #5
 800210a:	f000 f854 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 800210e:	2017      	movs	r0, #23
 8002110:	f000 f851 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8002114:	2011      	movs	r0, #17
 8002116:	f000 f84e 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800211a:	2000      	movs	r0, #0
 800211c:	f000 f84b 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8002120:	20e1      	movs	r0, #225	@ 0xe1
 8002122:	f000 f83b 	bl	800219c <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002126:	2000      	movs	r0, #0
 8002128:	f000 f845 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 800212c:	2016      	movs	r0, #22
 800212e:	f000 f842 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002132:	201b      	movs	r0, #27
 8002134:	f000 f83f 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002138:	2004      	movs	r0, #4
 800213a:	f000 f83c 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800213e:	2011      	movs	r0, #17
 8002140:	f000 f839 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8002144:	2007      	movs	r0, #7
 8002146:	f000 f836 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800214a:	2031      	movs	r0, #49	@ 0x31
 800214c:	f000 f833 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8002150:	2033      	movs	r0, #51	@ 0x33
 8002152:	f000 f830 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8002156:	2042      	movs	r0, #66	@ 0x42
 8002158:	f000 f82d 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800215c:	2005      	movs	r0, #5
 800215e:	f000 f82a 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002162:	200c      	movs	r0, #12
 8002164:	f000 f827 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8002168:	200a      	movs	r0, #10
 800216a:	f000 f824 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800216e:	2028      	movs	r0, #40	@ 0x28
 8002170:	f000 f821 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8002174:	202f      	movs	r0, #47	@ 0x2f
 8002176:	f000 f81e 	bl	80021b6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800217a:	200f      	movs	r0, #15
 800217c:	f000 f81b 	bl	80021b6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8002180:	2011      	movs	r0, #17
 8002182:	f000 f80b 	bl	800219c <ili9341_Write_Reg>
  LCD_Delay(200);
 8002186:	20c8      	movs	r0, #200	@ 0xc8
 8002188:	f000 f97c 	bl	8002484 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800218c:	2029      	movs	r0, #41	@ 0x29
 800218e:	f000 f805 	bl	800219c <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 8002192:	202c      	movs	r0, #44	@ 0x2c
 8002194:	f000 f802 	bl	800219c <ili9341_Write_Reg>
}
 8002198:	bf00      	nop
 800219a:	bd80      	pop	{r7, pc}

0800219c <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80021a6:	79fb      	ldrb	r3, [r7, #7]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 f949 	bl	8002440 <LCD_IO_WriteReg>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 f91a 	bl	80023fc <LCD_IO_WriteData>
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80021d4:	4819      	ldr	r0, [pc, #100]	@ (800223c <SPI_Init+0x6c>)
 80021d6:	f004 fdae 	bl	8006d36 <HAL_SPI_GetState>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d12b      	bne.n	8002238 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80021e0:	4b16      	ldr	r3, [pc, #88]	@ (800223c <SPI_Init+0x6c>)
 80021e2:	4a17      	ldr	r2, [pc, #92]	@ (8002240 <SPI_Init+0x70>)
 80021e4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80021e6:	4b15      	ldr	r3, [pc, #84]	@ (800223c <SPI_Init+0x6c>)
 80021e8:	2218      	movs	r2, #24
 80021ea:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80021ec:	4b13      	ldr	r3, [pc, #76]	@ (800223c <SPI_Init+0x6c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80021f2:	4b12      	ldr	r3, [pc, #72]	@ (800223c <SPI_Init+0x6c>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80021f8:	4b10      	ldr	r3, [pc, #64]	@ (800223c <SPI_Init+0x6c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80021fe:	4b0f      	ldr	r3, [pc, #60]	@ (800223c <SPI_Init+0x6c>)
 8002200:	2200      	movs	r2, #0
 8002202:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002204:	4b0d      	ldr	r3, [pc, #52]	@ (800223c <SPI_Init+0x6c>)
 8002206:	2207      	movs	r2, #7
 8002208:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800220a:	4b0c      	ldr	r3, [pc, #48]	@ (800223c <SPI_Init+0x6c>)
 800220c:	2200      	movs	r2, #0
 800220e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002210:	4b0a      	ldr	r3, [pc, #40]	@ (800223c <SPI_Init+0x6c>)
 8002212:	2200      	movs	r2, #0
 8002214:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002216:	4b09      	ldr	r3, [pc, #36]	@ (800223c <SPI_Init+0x6c>)
 8002218:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800221c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800221e:	4b07      	ldr	r3, [pc, #28]	@ (800223c <SPI_Init+0x6c>)
 8002220:	2200      	movs	r2, #0
 8002222:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002224:	4b05      	ldr	r3, [pc, #20]	@ (800223c <SPI_Init+0x6c>)
 8002226:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800222a:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 800222c:	4803      	ldr	r0, [pc, #12]	@ (800223c <SPI_Init+0x6c>)
 800222e:	f000 f833 	bl	8002298 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002232:	4802      	ldr	r0, [pc, #8]	@ (800223c <SPI_Init+0x6c>)
 8002234:	f004 fb8a 	bl	800694c <HAL_SPI_Init>
  }
}
 8002238:	bf00      	nop
 800223a:	bd80      	pop	{r7, pc}
 800223c:	20025a28 	.word	0x20025a28
 8002240:	40015000 	.word	0x40015000

08002244 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	4603      	mov	r3, r0
 800224c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8002252:	4b09      	ldr	r3, [pc, #36]	@ (8002278 <SPI_Write+0x34>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	1db9      	adds	r1, r7, #6
 8002258:	2201      	movs	r2, #1
 800225a:	4808      	ldr	r0, [pc, #32]	@ (800227c <SPI_Write+0x38>)
 800225c:	f004 fc27 	bl	8006aae <HAL_SPI_Transmit>
 8002260:	4603      	mov	r3, r0
 8002262:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d001      	beq.n	800226e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800226a:	f000 f809 	bl	8002280 <SPI_Error>
  }
}
 800226e:	bf00      	nop
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	2000000c 	.word	0x2000000c
 800227c:	20025a28 	.word	0x20025a28

08002280 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002284:	4803      	ldr	r0, [pc, #12]	@ (8002294 <SPI_Error+0x14>)
 8002286:	f004 fbea 	bl	8006a5e <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800228a:	f7ff ffa1 	bl	80021d0 <SPI_Init>
}
 800228e:	bf00      	nop
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20025a28 	.word	0x20025a28

08002298 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	@ 0x28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	4b17      	ldr	r3, [pc, #92]	@ (8002304 <SPI_MspInit+0x6c>)
 80022a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a8:	4a16      	ldr	r2, [pc, #88]	@ (8002304 <SPI_MspInit+0x6c>)
 80022aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022ae:	6453      	str	r3, [r2, #68]	@ 0x44
 80022b0:	4b14      	ldr	r3, [pc, #80]	@ (8002304 <SPI_MspInit+0x6c>)
 80022b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80022bc:	2300      	movs	r3, #0
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	4b10      	ldr	r3, [pc, #64]	@ (8002304 <SPI_MspInit+0x6c>)
 80022c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c4:	4a0f      	ldr	r2, [pc, #60]	@ (8002304 <SPI_MspInit+0x6c>)
 80022c6:	f043 0320 	orr.w	r3, r3, #32
 80022ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80022cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002304 <SPI_MspInit+0x6c>)
 80022ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d0:	f003 0320 	and.w	r3, r3, #32
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80022d8:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80022dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80022de:	2302      	movs	r3, #2
 80022e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80022e2:	2302      	movs	r3, #2
 80022e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80022e6:	2301      	movs	r3, #1
 80022e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80022ea:	2305      	movs	r3, #5
 80022ec:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80022ee:	f107 0314 	add.w	r3, r7, #20
 80022f2:	4619      	mov	r1, r3
 80022f4:	4804      	ldr	r0, [pc, #16]	@ (8002308 <SPI_MspInit+0x70>)
 80022f6:	f001 fe03 	bl	8003f00 <HAL_GPIO_Init>
}
 80022fa:	bf00      	nop
 80022fc:	3728      	adds	r7, #40	@ 0x28
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40023800 	.word	0x40023800
 8002308:	40021400 	.word	0x40021400

0800230c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8002312:	4b36      	ldr	r3, [pc, #216]	@ (80023ec <LCD_IO_Init+0xe0>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d164      	bne.n	80023e4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800231a:	4b34      	ldr	r3, [pc, #208]	@ (80023ec <LCD_IO_Init+0xe0>)
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002320:	2300      	movs	r3, #0
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	4b32      	ldr	r3, [pc, #200]	@ (80023f0 <LCD_IO_Init+0xe4>)
 8002326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002328:	4a31      	ldr	r2, [pc, #196]	@ (80023f0 <LCD_IO_Init+0xe4>)
 800232a:	f043 0308 	orr.w	r3, r3, #8
 800232e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002330:	4b2f      	ldr	r3, [pc, #188]	@ (80023f0 <LCD_IO_Init+0xe4>)
 8002332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	60bb      	str	r3, [r7, #8]
 800233a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800233c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002340:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002342:	2301      	movs	r3, #1
 8002344:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800234a:	2302      	movs	r3, #2
 800234c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800234e:	f107 030c 	add.w	r3, r7, #12
 8002352:	4619      	mov	r1, r3
 8002354:	4827      	ldr	r0, [pc, #156]	@ (80023f4 <LCD_IO_Init+0xe8>)
 8002356:	f001 fdd3 	bl	8003f00 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	4b24      	ldr	r3, [pc, #144]	@ (80023f0 <LCD_IO_Init+0xe4>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	4a23      	ldr	r2, [pc, #140]	@ (80023f0 <LCD_IO_Init+0xe4>)
 8002364:	f043 0308 	orr.w	r3, r3, #8
 8002368:	6313      	str	r3, [r2, #48]	@ 0x30
 800236a:	4b21      	ldr	r3, [pc, #132]	@ (80023f0 <LCD_IO_Init+0xe4>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	f003 0308 	and.w	r3, r3, #8
 8002372:	607b      	str	r3, [r7, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002376:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800237a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800237c:	2301      	movs	r3, #1
 800237e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002384:	2302      	movs	r3, #2
 8002386:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	4619      	mov	r1, r3
 800238e:	4819      	ldr	r0, [pc, #100]	@ (80023f4 <LCD_IO_Init+0xe8>)
 8002390:	f001 fdb6 	bl	8003f00 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8002394:	2300      	movs	r3, #0
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	4b15      	ldr	r3, [pc, #84]	@ (80023f0 <LCD_IO_Init+0xe4>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239c:	4a14      	ldr	r2, [pc, #80]	@ (80023f0 <LCD_IO_Init+0xe4>)
 800239e:	f043 0304 	orr.w	r3, r3, #4
 80023a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a4:	4b12      	ldr	r3, [pc, #72]	@ (80023f0 <LCD_IO_Init+0xe4>)
 80023a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	603b      	str	r3, [r7, #0]
 80023ae:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80023b0:	2304      	movs	r3, #4
 80023b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80023b4:	2301      	movs	r3, #1
 80023b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80023bc:	2302      	movs	r3, #2
 80023be:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80023c0:	f107 030c 	add.w	r3, r7, #12
 80023c4:	4619      	mov	r1, r3
 80023c6:	480c      	ldr	r0, [pc, #48]	@ (80023f8 <LCD_IO_Init+0xec>)
 80023c8:	f001 fd9a 	bl	8003f00 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80023cc:	2200      	movs	r2, #0
 80023ce:	2104      	movs	r1, #4
 80023d0:	4809      	ldr	r0, [pc, #36]	@ (80023f8 <LCD_IO_Init+0xec>)
 80023d2:	f002 f865 	bl	80044a0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80023d6:	2201      	movs	r2, #1
 80023d8:	2104      	movs	r1, #4
 80023da:	4807      	ldr	r0, [pc, #28]	@ (80023f8 <LCD_IO_Init+0xec>)
 80023dc:	f002 f860 	bl	80044a0 <HAL_GPIO_WritePin>

    SPI_Init();
 80023e0:	f7ff fef6 	bl	80021d0 <SPI_Init>
  }
}
 80023e4:	bf00      	nop
 80023e6:	3720      	adds	r7, #32
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	20025a80 	.word	0x20025a80
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40020c00 	.word	0x40020c00
 80023f8:	40020800 	.word	0x40020800

080023fc <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002406:	2201      	movs	r2, #1
 8002408:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800240c:	480a      	ldr	r0, [pc, #40]	@ (8002438 <LCD_IO_WriteData+0x3c>)
 800240e:	f002 f847 	bl	80044a0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8002412:	2200      	movs	r2, #0
 8002414:	2104      	movs	r1, #4
 8002416:	4809      	ldr	r0, [pc, #36]	@ (800243c <LCD_IO_WriteData+0x40>)
 8002418:	f002 f842 	bl	80044a0 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 800241c:	88fb      	ldrh	r3, [r7, #6]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff ff10 	bl	8002244 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002424:	2201      	movs	r2, #1
 8002426:	2104      	movs	r1, #4
 8002428:	4804      	ldr	r0, [pc, #16]	@ (800243c <LCD_IO_WriteData+0x40>)
 800242a:	f002 f839 	bl	80044a0 <HAL_GPIO_WritePin>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	40020c00 	.word	0x40020c00
 800243c:	40020800 	.word	0x40020800

08002440 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800244a:	2200      	movs	r2, #0
 800244c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002450:	480a      	ldr	r0, [pc, #40]	@ (800247c <LCD_IO_WriteReg+0x3c>)
 8002452:	f002 f825 	bl	80044a0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002456:	2200      	movs	r2, #0
 8002458:	2104      	movs	r1, #4
 800245a:	4809      	ldr	r0, [pc, #36]	@ (8002480 <LCD_IO_WriteReg+0x40>)
 800245c:	f002 f820 	bl	80044a0 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002460:	79fb      	ldrb	r3, [r7, #7]
 8002462:	b29b      	uxth	r3, r3
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff feed 	bl	8002244 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800246a:	2201      	movs	r2, #1
 800246c:	2104      	movs	r1, #4
 800246e:	4804      	ldr	r0, [pc, #16]	@ (8002480 <LCD_IO_WriteReg+0x40>)
 8002470:	f002 f816 	bl	80044a0 <HAL_GPIO_WritePin>
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40020c00 	.word	0x40020c00
 8002480:	40020800 	.word	0x40020800

08002484 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f001 fb8b 	bl	8003ba8 <HAL_Delay>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 80024a2:	f005 fc57 	bl	8007d54 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80024a6:	f001 fb0d 	bl	8003ac4 <HAL_Init>
  //applicationInit();
  /* USER CODE END Init */

  /* Configure the system clock */
  //SystemClock_Config();
  SystemClockOverride();
 80024aa:	f000 f857 	bl	800255c <SystemClockOverride>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_GPIO_Init();
 80024ae:	f000 fa73 	bl	8002998 <MX_GPIO_Init>
  MX_LTDC_Init();
 80024b2:	f000 f8d3 	bl	800265c <MX_LTDC_Init>
  MX_I2C3_Init();
 80024b6:	f000 f891 	bl	80025dc <MX_I2C3_Init>
  MX_RNG_Init();
 80024ba:	f000 f981 	bl	80027c0 <MX_RNG_Init>
  MX_TIM2_Init();
 80024be:	f000 f9cb 	bl	8002858 <MX_TIM2_Init>
  MX_SPI5_Init();
 80024c2:	f000 f993 	bl	80027ec <MX_SPI5_Init>
  MX_TIM5_Init();
 80024c6:	f000 fa17 	bl	80028f8 <MX_TIM5_Init>

  /* USER CODE BEGIN 2 */

  applicationInit();
 80024ca:	f7fe f861 	bl	8000590 <applicationInit>
  uint32_t eventsToRun;
  START_SCREEN();
 80024ce:	f7fe fbd7 	bl	8000c80 <START_SCREEN>

  /* USER CODE END 2 */

  //uint32_t game_ender = 0;
  uint8_t BUTTON_START = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	75fb      	strb	r3, [r7, #23]
  while(!BUTTON_START) {
 80024d6:	e005      	b.n	80024e4 <main+0x48>
	  BUTTON_START = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0); // read button by polling
 80024d8:	2101      	movs	r1, #1
 80024da:	481d      	ldr	r0, [pc, #116]	@ (8002550 <main+0xb4>)
 80024dc:	f001 ffc8 	bl	8004470 <HAL_GPIO_ReadPin>
 80024e0:	4603      	mov	r3, r0
 80024e2:	75fb      	strb	r3, [r7, #23]
  while(!BUTTON_START) {
 80024e4:	7dfb      	ldrb	r3, [r7, #23]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d0f6      	beq.n	80024d8 <main+0x3c>
  }
  start_time = __HAL_TIM_GET_COUNTER(&htim5);
 80024ea:	4b1a      	ldr	r3, [pc, #104]	@ (8002554 <main+0xb8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f0:	613b      	str	r3, [r7, #16]
  LCD_Clear(0, LCD_COLOR_WHITE);
 80024f2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80024f6:	2000      	movs	r0, #0
 80024f8:	f7fe fab4 	bl	8000a64 <LCD_Clear>
  addScheduledEvent(MATRIX_UPDATE_EVENT);
 80024fc:	2004      	movs	r0, #4
 80024fe:	f7ff fcdd 	bl	8001ebc <addScheduledEvent>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002502:	2006      	movs	r0, #6
 8002504:	f001 fcad 	bl	8003e62 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim2);
 8002508:	4813      	ldr	r0, [pc, #76]	@ (8002558 <main+0xbc>)
 800250a:	f004 fdb7 	bl	800707c <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
   {
	  eventsToRun = getScheduledEvents();
 800250e:	f7ff fcc5 	bl	8001e9c <getScheduledEvents>
 8002512:	60f8      	str	r0, [r7, #12]
	  if(eventsToRun && MATRIX_UPDATE_EVENT) {printMatrix();}
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d002      	beq.n	8002520 <main+0x84>
 800251a:	f7ff fba5 	bl	8001c68 <printMatrix>
 800251e:	e7f6      	b.n	800250e <main+0x72>
	  else {
#if cut_Mode  == 1
	  if(check_State() == 2) {
 8002520:	f7fe fd40 	bl	8000fa4 <check_State>
 8002524:	4603      	mov	r3, r0
 8002526:	2b02      	cmp	r3, #2
 8002528:	d1f1      	bne.n	800250e <main+0x72>
		end_time = __HAL_TIM_GET_COUNTER(&htim5);
 800252a:	4b0a      	ldr	r3, [pc, #40]	@ (8002554 <main+0xb8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	60bb      	str	r3, [r7, #8]
		total_time = (end_time - start_time);
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	607b      	str	r3, [r7, #4]

		HAL_TIM_Base_Stop_IT(&htim2);
 800253a:	4807      	ldr	r0, [pc, #28]	@ (8002558 <main+0xbc>)
 800253c:	f004 fe0e 	bl	800715c <HAL_TIM_Base_Stop_IT>
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002540:	2006      	movs	r0, #6
 8002542:	f001 fc9c 	bl	8003e7e <HAL_NVIC_DisableIRQ>

		GAME_OVER(total_time);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7fe fc46 	bl	8000dd8 <GAME_OVER>
		while(1);
 800254c:	bf00      	nop
 800254e:	e7fd      	b.n	800254c <main+0xb0>
 8002550:	40020000 	.word	0x40020000
 8002554:	20025c30 	.word	0x20025c30
 8002558:	20025be8 	.word	0x20025be8

0800255c <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b092      	sub	sp, #72	@ 0x48
 8002560:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	603b      	str	r3, [r7, #0]
 8002566:	4b1c      	ldr	r3, [pc, #112]	@ (80025d8 <SystemClockOverride+0x7c>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	4a1b      	ldr	r2, [pc, #108]	@ (80025d8 <SystemClockOverride+0x7c>)
 800256c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002570:	6413      	str	r3, [r2, #64]	@ 0x40
 8002572:	4b19      	ldr	r3, [pc, #100]	@ (80025d8 <SystemClockOverride+0x7c>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800257a:	603b      	str	r3, [r7, #0]
 800257c:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800257e:	2301      	movs	r3, #1
 8002580:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002582:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002586:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002588:	2302      	movs	r3, #2
 800258a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800258c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002590:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002592:	2308      	movs	r3, #8
 8002594:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002596:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800259a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800259c:	2302      	movs	r3, #2
 800259e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80025a0:	2307      	movs	r3, #7
 80025a2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80025a4:	1d3b      	adds	r3, r7, #4
 80025a6:	4618      	mov	r0, r3
 80025a8:	f003 fb0c 	bl	8005bc4 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80025ac:	230f      	movs	r3, #15
 80025ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025b0:	2302      	movs	r3, #2
 80025b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025b4:	2300      	movs	r3, #0
 80025b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025b8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80025bc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025c2:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80025c4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80025c8:	2105      	movs	r1, #5
 80025ca:	4618      	mov	r0, r3
 80025cc:	f003 fd72 	bl	80060b4 <HAL_RCC_ClockConfig>
}
 80025d0:	bf00      	nop
 80025d2:	3748      	adds	r7, #72	@ 0x48
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40023800 	.word	0x40023800

080025dc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80025e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002650 <MX_I2C3_Init+0x74>)
 80025e2:	4a1c      	ldr	r2, [pc, #112]	@ (8002654 <MX_I2C3_Init+0x78>)
 80025e4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80025e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002650 <MX_I2C3_Init+0x74>)
 80025e8:	4a1b      	ldr	r2, [pc, #108]	@ (8002658 <MX_I2C3_Init+0x7c>)
 80025ea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025ec:	4b18      	ldr	r3, [pc, #96]	@ (8002650 <MX_I2C3_Init+0x74>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80025f2:	4b17      	ldr	r3, [pc, #92]	@ (8002650 <MX_I2C3_Init+0x74>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025f8:	4b15      	ldr	r3, [pc, #84]	@ (8002650 <MX_I2C3_Init+0x74>)
 80025fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025fe:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002600:	4b13      	ldr	r3, [pc, #76]	@ (8002650 <MX_I2C3_Init+0x74>)
 8002602:	2200      	movs	r2, #0
 8002604:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002606:	4b12      	ldr	r3, [pc, #72]	@ (8002650 <MX_I2C3_Init+0x74>)
 8002608:	2200      	movs	r2, #0
 800260a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800260c:	4b10      	ldr	r3, [pc, #64]	@ (8002650 <MX_I2C3_Init+0x74>)
 800260e:	2200      	movs	r2, #0
 8002610:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002612:	4b0f      	ldr	r3, [pc, #60]	@ (8002650 <MX_I2C3_Init+0x74>)
 8002614:	2200      	movs	r2, #0
 8002616:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002618:	480d      	ldr	r0, [pc, #52]	@ (8002650 <MX_I2C3_Init+0x74>)
 800261a:	f001 ff8d 	bl	8004538 <HAL_I2C_Init>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002624:	f000 fb7c 	bl	8002d20 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002628:	2100      	movs	r1, #0
 800262a:	4809      	ldr	r0, [pc, #36]	@ (8002650 <MX_I2C3_Init+0x74>)
 800262c:	f002 ffa8 	bl	8005580 <HAL_I2CEx_ConfigAnalogFilter>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8002636:	f000 fb73 	bl	8002d20 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800263a:	2100      	movs	r1, #0
 800263c:	4804      	ldr	r0, [pc, #16]	@ (8002650 <MX_I2C3_Init+0x74>)
 800263e:	f002 ffdb 	bl	80055f8 <HAL_I2CEx_ConfigDigitalFilter>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002648:	f000 fb6a 	bl	8002d20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800264c:	bf00      	nop
 800264e:	bd80      	pop	{r7, pc}
 8002650:	20025a84 	.word	0x20025a84
 8002654:	40005c00 	.word	0x40005c00
 8002658:	000186a0 	.word	0x000186a0

0800265c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b09a      	sub	sp, #104	@ 0x68
 8002660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002662:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002666:	2234      	movs	r2, #52	@ 0x34
 8002668:	2100      	movs	r1, #0
 800266a:	4618      	mov	r0, r3
 800266c:	f005 fd22 	bl	80080b4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8002670:	463b      	mov	r3, r7
 8002672:	2234      	movs	r2, #52	@ 0x34
 8002674:	2100      	movs	r1, #0
 8002676:	4618      	mov	r0, r3
 8002678:	f005 fd1c 	bl	80080b4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800267c:	4b4e      	ldr	r3, [pc, #312]	@ (80027b8 <MX_LTDC_Init+0x15c>)
 800267e:	4a4f      	ldr	r2, [pc, #316]	@ (80027bc <MX_LTDC_Init+0x160>)
 8002680:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002682:	4b4d      	ldr	r3, [pc, #308]	@ (80027b8 <MX_LTDC_Init+0x15c>)
 8002684:	2200      	movs	r2, #0
 8002686:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002688:	4b4b      	ldr	r3, [pc, #300]	@ (80027b8 <MX_LTDC_Init+0x15c>)
 800268a:	2200      	movs	r2, #0
 800268c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800268e:	4b4a      	ldr	r3, [pc, #296]	@ (80027b8 <MX_LTDC_Init+0x15c>)
 8002690:	2200      	movs	r2, #0
 8002692:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002694:	4b48      	ldr	r3, [pc, #288]	@ (80027b8 <MX_LTDC_Init+0x15c>)
 8002696:	2200      	movs	r2, #0
 8002698:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800269a:	4b47      	ldr	r3, [pc, #284]	@ (80027b8 <MX_LTDC_Init+0x15c>)
 800269c:	2207      	movs	r2, #7
 800269e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80026a0:	4b45      	ldr	r3, [pc, #276]	@ (80027b8 <MX_LTDC_Init+0x15c>)
 80026a2:	2203      	movs	r2, #3
 80026a4:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80026a6:	4b44      	ldr	r3, [pc, #272]	@ (80027b8 <MX_LTDC_Init+0x15c>)
 80026a8:	220e      	movs	r2, #14
 80026aa:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80026ac:	4b42      	ldr	r3, [pc, #264]	@ (80027b8 <MX_LTDC_Init+0x15c>)
 80026ae:	2205      	movs	r2, #5
 80026b0:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80026b2:	4b41      	ldr	r3, [pc, #260]	@ (80027b8 <MX_LTDC_Init+0x15c>)
 80026b4:	f240 228e 	movw	r2, #654	@ 0x28e
 80026b8:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80026ba:	4b3f      	ldr	r3, [pc, #252]	@ (80027b8 <MX_LTDC_Init+0x15c>)
 80026bc:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80026c0:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80026c2:	4b3d      	ldr	r3, [pc, #244]	@ (80027b8 <MX_LTDC_Init+0x15c>)
 80026c4:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80026c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80026ca:	4b3b      	ldr	r3, [pc, #236]	@ (80027b8 <MX_LTDC_Init+0x15c>)
 80026cc:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80026d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80026d2:	4b39      	ldr	r3, [pc, #228]	@ (80027b8 <MX_LTDC_Init+0x15c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80026da:	4b37      	ldr	r3, [pc, #220]	@ (80027b8 <MX_LTDC_Init+0x15c>)
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80026e2:	4b35      	ldr	r3, [pc, #212]	@ (80027b8 <MX_LTDC_Init+0x15c>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80026ea:	4833      	ldr	r0, [pc, #204]	@ (80027b8 <MX_LTDC_Init+0x15c>)
 80026ec:	f002 ffc4 	bl	8005678 <HAL_LTDC_Init>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80026f6:	f000 fb13 	bl	8002d20 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8002702:	2300      	movs	r3, #0
 8002704:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800270a:	2300      	movs	r3, #0
 800270c:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002716:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800271a:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800271c:	2305      	movs	r3, #5
 800271e:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8002720:	2300      	movs	r3, #0
 8002722:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8002732:	2300      	movs	r3, #0
 8002734:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8002738:	2300      	movs	r3, #0
 800273a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800273e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002742:	2200      	movs	r2, #0
 8002744:	4619      	mov	r1, r3
 8002746:	481c      	ldr	r0, [pc, #112]	@ (80027b8 <MX_LTDC_Init+0x15c>)
 8002748:	f003 f866 	bl	8005818 <HAL_LTDC_ConfigLayer>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8002752:	f000 fae5 	bl	8002d20 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8002772:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002776:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002778:	2305      	movs	r3, #5
 800277a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8002788:	2300      	movs	r3, #0
 800278a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800278e:	2300      	movs	r3, #0
 8002790:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8002794:	2300      	movs	r3, #0
 8002796:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800279a:	463b      	mov	r3, r7
 800279c:	2201      	movs	r2, #1
 800279e:	4619      	mov	r1, r3
 80027a0:	4805      	ldr	r0, [pc, #20]	@ (80027b8 <MX_LTDC_Init+0x15c>)
 80027a2:	f003 f839 	bl	8005818 <HAL_LTDC_ConfigLayer>
 80027a6:	4603      	mov	r3, r0
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d001      	beq.n	80027b0 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80027ac:	f000 fab8 	bl	8002d20 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80027b0:	bf00      	nop
 80027b2:	3768      	adds	r7, #104	@ 0x68
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	20025ad8 	.word	0x20025ad8
 80027bc:	40016800 	.word	0x40016800

080027c0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80027c4:	4b07      	ldr	r3, [pc, #28]	@ (80027e4 <MX_RNG_Init+0x24>)
 80027c6:	4a08      	ldr	r2, [pc, #32]	@ (80027e8 <MX_RNG_Init+0x28>)
 80027c8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80027ca:	4806      	ldr	r0, [pc, #24]	@ (80027e4 <MX_RNG_Init+0x24>)
 80027cc:	f004 f83e 	bl	800684c <HAL_RNG_Init>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80027d6:	f000 faa3 	bl	8002d20 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */
   RND_NUM();
 80027da:	f7fe fbbb 	bl	8000f54 <RND_NUM>

  /* USER CODE END RNG_Init 2 */

}
 80027de:	bf00      	nop
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	20025b80 	.word	0x20025b80
 80027e8:	50060800 	.word	0x50060800

080027ec <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80027f0:	4b17      	ldr	r3, [pc, #92]	@ (8002850 <MX_SPI5_Init+0x64>)
 80027f2:	4a18      	ldr	r2, [pc, #96]	@ (8002854 <MX_SPI5_Init+0x68>)
 80027f4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80027f6:	4b16      	ldr	r3, [pc, #88]	@ (8002850 <MX_SPI5_Init+0x64>)
 80027f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80027fc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80027fe:	4b14      	ldr	r3, [pc, #80]	@ (8002850 <MX_SPI5_Init+0x64>)
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8002804:	4b12      	ldr	r3, [pc, #72]	@ (8002850 <MX_SPI5_Init+0x64>)
 8002806:	2200      	movs	r2, #0
 8002808:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800280a:	4b11      	ldr	r3, [pc, #68]	@ (8002850 <MX_SPI5_Init+0x64>)
 800280c:	2200      	movs	r2, #0
 800280e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002810:	4b0f      	ldr	r3, [pc, #60]	@ (8002850 <MX_SPI5_Init+0x64>)
 8002812:	2200      	movs	r2, #0
 8002814:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8002816:	4b0e      	ldr	r3, [pc, #56]	@ (8002850 <MX_SPI5_Init+0x64>)
 8002818:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800281c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800281e:	4b0c      	ldr	r3, [pc, #48]	@ (8002850 <MX_SPI5_Init+0x64>)
 8002820:	2200      	movs	r2, #0
 8002822:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002824:	4b0a      	ldr	r3, [pc, #40]	@ (8002850 <MX_SPI5_Init+0x64>)
 8002826:	2200      	movs	r2, #0
 8002828:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800282a:	4b09      	ldr	r3, [pc, #36]	@ (8002850 <MX_SPI5_Init+0x64>)
 800282c:	2200      	movs	r2, #0
 800282e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002830:	4b07      	ldr	r3, [pc, #28]	@ (8002850 <MX_SPI5_Init+0x64>)
 8002832:	2200      	movs	r2, #0
 8002834:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8002836:	4b06      	ldr	r3, [pc, #24]	@ (8002850 <MX_SPI5_Init+0x64>)
 8002838:	220a      	movs	r2, #10
 800283a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800283c:	4804      	ldr	r0, [pc, #16]	@ (8002850 <MX_SPI5_Init+0x64>)
 800283e:	f004 f885 	bl	800694c <HAL_SPI_Init>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002848:	f000 fa6a 	bl	8002d20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800284c:	bf00      	nop
 800284e:	bd80      	pop	{r7, pc}
 8002850:	20025b90 	.word	0x20025b90
 8002854:	40015000 	.word	0x40015000

08002858 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800285e:	f107 0308 	add.w	r3, r7, #8
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800286c:	463b      	mov	r3, r7
 800286e:	2200      	movs	r2, #0
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002874:	4b1e      	ldr	r3, [pc, #120]	@ (80028f0 <MX_TIM2_Init+0x98>)
 8002876:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800287a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800287c:	4b1c      	ldr	r3, [pc, #112]	@ (80028f0 <MX_TIM2_Init+0x98>)
 800287e:	2200      	movs	r2, #0
 8002880:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8002882:	4b1b      	ldr	r3, [pc, #108]	@ (80028f0 <MX_TIM2_Init+0x98>)
 8002884:	2210      	movs	r2, #16
 8002886:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 15999999*3;
 8002888:	4b19      	ldr	r3, [pc, #100]	@ (80028f0 <MX_TIM2_Init+0x98>)
 800288a:	4a1a      	ldr	r2, [pc, #104]	@ (80028f4 <MX_TIM2_Init+0x9c>)
 800288c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800288e:	4b18      	ldr	r3, [pc, #96]	@ (80028f0 <MX_TIM2_Init+0x98>)
 8002890:	2200      	movs	r2, #0
 8002892:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002894:	4b16      	ldr	r3, [pc, #88]	@ (80028f0 <MX_TIM2_Init+0x98>)
 8002896:	2200      	movs	r2, #0
 8002898:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800289a:	4815      	ldr	r0, [pc, #84]	@ (80028f0 <MX_TIM2_Init+0x98>)
 800289c:	f004 fb36 	bl	8006f0c <HAL_TIM_Base_Init>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80028a6:	f000 fa3b 	bl	8002d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028b0:	f107 0308 	add.w	r3, r7, #8
 80028b4:	4619      	mov	r1, r3
 80028b6:	480e      	ldr	r0, [pc, #56]	@ (80028f0 <MX_TIM2_Init+0x98>)
 80028b8:	f004 fd6f 	bl	800739a <HAL_TIM_ConfigClockSource>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80028c2:	f000 fa2d 	bl	8002d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028c6:	2300      	movs	r3, #0
 80028c8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028ca:	2300      	movs	r3, #0
 80028cc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028ce:	463b      	mov	r3, r7
 80028d0:	4619      	mov	r1, r3
 80028d2:	4807      	ldr	r0, [pc, #28]	@ (80028f0 <MX_TIM2_Init+0x98>)
 80028d4:	f004 ff96 	bl	8007804 <HAL_TIMEx_MasterConfigSynchronization>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80028de:	f000 fa1f 	bl	8002d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Stop_IT(&htim2);
 80028e2:	4803      	ldr	r0, [pc, #12]	@ (80028f0 <MX_TIM2_Init+0x98>)
 80028e4:	f004 fc3a 	bl	800715c <HAL_TIM_Base_Stop_IT>
      Error_Handler(); // Handle errors appropriately
  }
  */
  /* USER CODE END TIM2_Init 2 */

}
 80028e8:	bf00      	nop
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	20025be8 	.word	0x20025be8
 80028f4:	02dc6bfd 	.word	0x02dc6bfd

080028f8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028fe:	f107 0308 	add.w	r3, r7, #8
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]
 8002906:	605a      	str	r2, [r3, #4]
 8002908:	609a      	str	r2, [r3, #8]
 800290a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800290c:	463b      	mov	r3, r7
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002914:	4b1e      	ldr	r3, [pc, #120]	@ (8002990 <MX_TIM5_Init+0x98>)
 8002916:	4a1f      	ldr	r2, [pc, #124]	@ (8002994 <MX_TIM5_Init+0x9c>)
 8002918:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800291a:	4b1d      	ldr	r3, [pc, #116]	@ (8002990 <MX_TIM5_Init+0x98>)
 800291c:	2200      	movs	r2, #0
 800291e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002920:	4b1b      	ldr	r3, [pc, #108]	@ (8002990 <MX_TIM5_Init+0x98>)
 8002922:	2200      	movs	r2, #0
 8002924:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002926:	4b1a      	ldr	r3, [pc, #104]	@ (8002990 <MX_TIM5_Init+0x98>)
 8002928:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800292c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800292e:	4b18      	ldr	r3, [pc, #96]	@ (8002990 <MX_TIM5_Init+0x98>)
 8002930:	2200      	movs	r2, #0
 8002932:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002934:	4b16      	ldr	r3, [pc, #88]	@ (8002990 <MX_TIM5_Init+0x98>)
 8002936:	2200      	movs	r2, #0
 8002938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800293a:	4815      	ldr	r0, [pc, #84]	@ (8002990 <MX_TIM5_Init+0x98>)
 800293c:	f004 fae6 	bl	8006f0c <HAL_TIM_Base_Init>
 8002940:	4603      	mov	r3, r0
 8002942:	2b00      	cmp	r3, #0
 8002944:	d001      	beq.n	800294a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8002946:	f000 f9eb 	bl	8002d20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800294a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800294e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002950:	f107 0308 	add.w	r3, r7, #8
 8002954:	4619      	mov	r1, r3
 8002956:	480e      	ldr	r0, [pc, #56]	@ (8002990 <MX_TIM5_Init+0x98>)
 8002958:	f004 fd1f 	bl	800739a <HAL_TIM_ConfigClockSource>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d001      	beq.n	8002966 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8002962:	f000 f9dd 	bl	8002d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002966:	2300      	movs	r3, #0
 8002968:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800296a:	2300      	movs	r3, #0
 800296c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800296e:	463b      	mov	r3, r7
 8002970:	4619      	mov	r1, r3
 8002972:	4807      	ldr	r0, [pc, #28]	@ (8002990 <MX_TIM5_Init+0x98>)
 8002974:	f004 ff46 	bl	8007804 <HAL_TIMEx_MasterConfigSynchronization>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800297e:	f000 f9cf 	bl	8002d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  HAL_TIM_Base_Start(&htim5);
 8002982:	4803      	ldr	r0, [pc, #12]	@ (8002990 <MX_TIM5_Init+0x98>)
 8002984:	f004 fb12 	bl	8006fac <HAL_TIM_Base_Start>
  /* USER CODE END TIM5_Init 2 */

}
 8002988:	bf00      	nop
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20025c30 	.word	0x20025c30
 8002994:	40000c00 	.word	0x40000c00

08002998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08e      	sub	sp, #56	@ 0x38
 800299c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	605a      	str	r2, [r3, #4]
 80029a8:	609a      	str	r2, [r3, #8]
 80029aa:	60da      	str	r2, [r3, #12]
 80029ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	623b      	str	r3, [r7, #32]
 80029b2:	4bb3      	ldr	r3, [pc, #716]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b6:	4ab2      	ldr	r2, [pc, #712]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 80029b8:	f043 0304 	orr.w	r3, r3, #4
 80029bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029be:	4bb0      	ldr	r3, [pc, #704]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	623b      	str	r3, [r7, #32]
 80029c8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	61fb      	str	r3, [r7, #28]
 80029ce:	4bac      	ldr	r3, [pc, #688]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	4aab      	ldr	r2, [pc, #684]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 80029d4:	f043 0320 	orr.w	r3, r3, #32
 80029d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029da:	4ba9      	ldr	r3, [pc, #676]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029de:	f003 0320 	and.w	r3, r3, #32
 80029e2:	61fb      	str	r3, [r7, #28]
 80029e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	4ba5      	ldr	r3, [pc, #660]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	4aa4      	ldr	r2, [pc, #656]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 80029f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f6:	4ba2      	ldr	r3, [pc, #648]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029fe:	61bb      	str	r3, [r7, #24]
 8002a00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	4b9e      	ldr	r3, [pc, #632]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0a:	4a9d      	ldr	r2, [pc, #628]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a12:	4b9b      	ldr	r3, [pc, #620]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]
 8002a22:	4b97      	ldr	r3, [pc, #604]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 8002a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a26:	4a96      	ldr	r2, [pc, #600]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 8002a28:	f043 0302 	orr.w	r3, r3, #2
 8002a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2e:	4b94      	ldr	r3, [pc, #592]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	613b      	str	r3, [r7, #16]
 8002a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	4b90      	ldr	r3, [pc, #576]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	4a8f      	ldr	r2, [pc, #572]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 8002a44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a4a:	4b8d      	ldr	r3, [pc, #564]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	4b89      	ldr	r3, [pc, #548]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5e:	4a88      	ldr	r2, [pc, #544]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 8002a60:	f043 0310 	orr.w	r3, r3, #16
 8002a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a66:	4b86      	ldr	r3, [pc, #536]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6a:	f003 0310 	and.w	r3, r3, #16
 8002a6e:	60bb      	str	r3, [r7, #8]
 8002a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	607b      	str	r3, [r7, #4]
 8002a76:	4b82      	ldr	r3, [pc, #520]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7a:	4a81      	ldr	r2, [pc, #516]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 8002a7c:	f043 0308 	orr.w	r3, r3, #8
 8002a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a82:	4b7f      	ldr	r3, [pc, #508]	@ (8002c80 <MX_GPIO_Init+0x2e8>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	607b      	str	r3, [r7, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002a8e:	2200      	movs	r2, #0
 8002a90:	2116      	movs	r1, #22
 8002a92:	487c      	ldr	r0, [pc, #496]	@ (8002c84 <MX_GPIO_Init+0x2ec>)
 8002a94:	f001 fd04 	bl	80044a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2180      	movs	r1, #128	@ 0x80
 8002a9c:	487a      	ldr	r0, [pc, #488]	@ (8002c88 <MX_GPIO_Init+0x2f0>)
 8002a9e:	f001 fcff 	bl	80044a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002aa8:	4878      	ldr	r0, [pc, #480]	@ (8002c8c <MX_GPIO_Init+0x2f4>)
 8002aaa:	f001 fcf9 	bl	80044a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002ab4:	4876      	ldr	r0, [pc, #472]	@ (8002c90 <MX_GPIO_Init+0x2f8>)
 8002ab6:	f001 fcf3 	bl	80044a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002aba:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002abe:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002acc:	230c      	movs	r3, #12
 8002ace:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ad0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	486f      	ldr	r0, [pc, #444]	@ (8002c94 <MX_GPIO_Init+0x2fc>)
 8002ad8:	f001 fa12 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002adc:	2301      	movs	r3, #1
 8002ade:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002aec:	230c      	movs	r3, #12
 8002aee:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002af4:	4619      	mov	r1, r3
 8002af6:	4863      	ldr	r0, [pc, #396]	@ (8002c84 <MX_GPIO_Init+0x2ec>)
 8002af8:	f001 fa02 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002afc:	2316      	movs	r3, #22
 8002afe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b00:	2301      	movs	r3, #1
 8002b02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b10:	4619      	mov	r1, r3
 8002b12:	485c      	ldr	r0, [pc, #368]	@ (8002c84 <MX_GPIO_Init+0x2ec>)
 8002b14:	f001 f9f4 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b1c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002b20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4856      	ldr	r0, [pc, #344]	@ (8002c88 <MX_GPIO_Init+0x2f0>)
 8002b2e:	f001 f9e7 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002b32:	f248 0306 	movw	r3, #32774	@ 0x8006
 8002b36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002b38:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b46:	4619      	mov	r1, r3
 8002b48:	484f      	ldr	r0, [pc, #316]	@ (8002c88 <MX_GPIO_Init+0x2f0>)
 8002b4a:	f001 f9d9 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002b4e:	2380      	movs	r3, #128	@ 0x80
 8002b50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b52:	2301      	movs	r3, #1
 8002b54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002b5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b62:	4619      	mov	r1, r3
 8002b64:	4848      	ldr	r0, [pc, #288]	@ (8002c88 <MX_GPIO_Init+0x2f0>)
 8002b66:	f001 f9cb 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002b6a:	2320      	movs	r3, #32
 8002b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002b6e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002b72:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002b78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	4841      	ldr	r0, [pc, #260]	@ (8002c84 <MX_GPIO_Init+0x2ec>)
 8002b80:	f001 f9be 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002b84:	2304      	movs	r3, #4
 8002b86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002b90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b94:	4619      	mov	r1, r3
 8002b96:	4840      	ldr	r0, [pc, #256]	@ (8002c98 <MX_GPIO_Init+0x300>)
 8002b98:	f001 f9b2 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002b9c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002ba0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002baa:	2303      	movs	r3, #3
 8002bac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bae:	230c      	movs	r3, #12
 8002bb0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002bb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	4835      	ldr	r0, [pc, #212]	@ (8002c90 <MX_GPIO_Init+0x2f8>)
 8002bba:	f001 f9a1 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002bbe:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002bc2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bd0:	230c      	movs	r3, #12
 8002bd2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4830      	ldr	r0, [pc, #192]	@ (8002c9c <MX_GPIO_Init+0x304>)
 8002bdc:	f001 f990 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002be0:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002be4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be6:	2302      	movs	r3, #2
 8002be8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002bf2:	230c      	movs	r3, #12
 8002bf4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	4826      	ldr	r0, [pc, #152]	@ (8002c98 <MX_GPIO_Init+0x300>)
 8002bfe:	f001 f97f 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002c02:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002c10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c14:	4619      	mov	r1, r3
 8002c16:	4820      	ldr	r0, [pc, #128]	@ (8002c98 <MX_GPIO_Init+0x300>)
 8002c18:	f001 f972 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002c1c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002c20:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c22:	2302      	movs	r3, #2
 8002c24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c2e:	230c      	movs	r3, #12
 8002c30:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c36:	4619      	mov	r1, r3
 8002c38:	4814      	ldr	r0, [pc, #80]	@ (8002c8c <MX_GPIO_Init+0x2f4>)
 8002c3a:	f001 f961 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002c3e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c44:	2300      	movs	r3, #0
 8002c46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002c4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c50:	4619      	mov	r1, r3
 8002c52:	480e      	ldr	r0, [pc, #56]	@ (8002c8c <MX_GPIO_Init+0x2f4>)
 8002c54:	f001 f954 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002c58:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c62:	2300      	movs	r3, #0
 8002c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c66:	2300      	movs	r3, #0
 8002c68:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4806      	ldr	r0, [pc, #24]	@ (8002c8c <MX_GPIO_Init+0x2f4>)
 8002c72:	f001 f945 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002c76:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002c7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c7c:	e010      	b.n	8002ca0 <MX_GPIO_Init+0x308>
 8002c7e:	bf00      	nop
 8002c80:	40023800 	.word	0x40023800
 8002c84:	40020800 	.word	0x40020800
 8002c88:	40020000 	.word	0x40020000
 8002c8c:	40020c00 	.word	0x40020c00
 8002c90:	40021800 	.word	0x40021800
 8002c94:	40021400 	.word	0x40021400
 8002c98:	40020400 	.word	0x40020400
 8002c9c:	40021000 	.word	0x40021000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002cac:	2307      	movs	r3, #7
 8002cae:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4817      	ldr	r0, [pc, #92]	@ (8002d14 <MX_GPIO_Init+0x37c>)
 8002cb8:	f001 f922 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002cbc:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002cce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4810      	ldr	r0, [pc, #64]	@ (8002d18 <MX_GPIO_Init+0x380>)
 8002cd6:	f001 f913 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002cda:	2360      	movs	r3, #96	@ 0x60
 8002cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cde:	2302      	movs	r3, #2
 8002ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002cea:	230c      	movs	r3, #12
 8002cec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4809      	ldr	r0, [pc, #36]	@ (8002d1c <MX_GPIO_Init+0x384>)
 8002cf6:	f001 f903 	bl	8003f00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	2006      	movs	r0, #6
 8002d00:	f001 f893 	bl	8003e2a <HAL_NVIC_SetPriority>
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002d04:	2006      	movs	r0, #6
 8002d06:	f001 f8ba 	bl	8003e7e <HAL_NVIC_DisableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d0a:	bf00      	nop
 8002d0c:	3738      	adds	r7, #56	@ 0x38
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40020000 	.word	0x40020000
 8002d18:	40021800 	.word	0x40021800
 8002d1c:	40020400 	.word	0x40020400

08002d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d24:	b672      	cpsid	i
}
 8002d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d28:	bf00      	nop
 8002d2a:	e7fd      	b.n	8002d28 <Error_Handler+0x8>

08002d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	607b      	str	r3, [r7, #4]
 8002d36:	4b10      	ldr	r3, [pc, #64]	@ (8002d78 <HAL_MspInit+0x4c>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3a:	4a0f      	ldr	r2, [pc, #60]	@ (8002d78 <HAL_MspInit+0x4c>)
 8002d3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d42:	4b0d      	ldr	r3, [pc, #52]	@ (8002d78 <HAL_MspInit+0x4c>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d4a:	607b      	str	r3, [r7, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	603b      	str	r3, [r7, #0]
 8002d52:	4b09      	ldr	r3, [pc, #36]	@ (8002d78 <HAL_MspInit+0x4c>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	4a08      	ldr	r2, [pc, #32]	@ (8002d78 <HAL_MspInit+0x4c>)
 8002d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d5e:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <HAL_MspInit+0x4c>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d6a:	2007      	movs	r0, #7
 8002d6c:	f001 f852 	bl	8003e14 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d70:	bf00      	nop
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40023800 	.word	0x40023800

08002d7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08a      	sub	sp, #40	@ 0x28
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d84:	f107 0314 	add.w	r3, r7, #20
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a29      	ldr	r2, [pc, #164]	@ (8002e40 <HAL_I2C_MspInit+0xc4>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d14b      	bne.n	8002e36 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	613b      	str	r3, [r7, #16]
 8002da2:	4b28      	ldr	r3, [pc, #160]	@ (8002e44 <HAL_I2C_MspInit+0xc8>)
 8002da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002da6:	4a27      	ldr	r2, [pc, #156]	@ (8002e44 <HAL_I2C_MspInit+0xc8>)
 8002da8:	f043 0304 	orr.w	r3, r3, #4
 8002dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dae:	4b25      	ldr	r3, [pc, #148]	@ (8002e44 <HAL_I2C_MspInit+0xc8>)
 8002db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db2:	f003 0304 	and.w	r3, r3, #4
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	4b21      	ldr	r3, [pc, #132]	@ (8002e44 <HAL_I2C_MspInit+0xc8>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc2:	4a20      	ldr	r2, [pc, #128]	@ (8002e44 <HAL_I2C_MspInit+0xc8>)
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dca:	4b1e      	ldr	r3, [pc, #120]	@ (8002e44 <HAL_I2C_MspInit+0xc8>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002dd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002dda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ddc:	2312      	movs	r3, #18
 8002dde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de0:	2300      	movs	r3, #0
 8002de2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002de4:	2300      	movs	r3, #0
 8002de6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002de8:	2304      	movs	r3, #4
 8002dea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002dec:	f107 0314 	add.w	r3, r7, #20
 8002df0:	4619      	mov	r1, r3
 8002df2:	4815      	ldr	r0, [pc, #84]	@ (8002e48 <HAL_I2C_MspInit+0xcc>)
 8002df4:	f001 f884 	bl	8003f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002df8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dfe:	2312      	movs	r3, #18
 8002e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e02:	2300      	movs	r3, #0
 8002e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e06:	2300      	movs	r3, #0
 8002e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e0a:	2304      	movs	r3, #4
 8002e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002e0e:	f107 0314 	add.w	r3, r7, #20
 8002e12:	4619      	mov	r1, r3
 8002e14:	480d      	ldr	r0, [pc, #52]	@ (8002e4c <HAL_I2C_MspInit+0xd0>)
 8002e16:	f001 f873 	bl	8003f00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	4b09      	ldr	r3, [pc, #36]	@ (8002e44 <HAL_I2C_MspInit+0xc8>)
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	4a08      	ldr	r2, [pc, #32]	@ (8002e44 <HAL_I2C_MspInit+0xc8>)
 8002e24:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e28:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e2a:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <HAL_I2C_MspInit+0xc8>)
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002e36:	bf00      	nop
 8002e38:	3728      	adds	r7, #40	@ 0x28
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40005c00 	.word	0x40005c00
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40020800 	.word	0x40020800
 8002e4c:	40020000 	.word	0x40020000

08002e50 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b09a      	sub	sp, #104	@ 0x68
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e58:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e6c:	2230      	movs	r2, #48	@ 0x30
 8002e6e:	2100      	movs	r1, #0
 8002e70:	4618      	mov	r0, r3
 8002e72:	f005 f91f 	bl	80080b4 <memset>
  if(hltdc->Instance==LTDC)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a81      	ldr	r2, [pc, #516]	@ (8003080 <HAL_LTDC_MspInit+0x230>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	f040 80fa 	bne.w	8003076 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002e82:	2308      	movs	r3, #8
 8002e84:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002e86:	2332      	movs	r3, #50	@ 0x32
 8002e88:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e96:	4618      	mov	r0, r3
 8002e98:	f003 fb18 	bl	80064cc <HAL_RCCEx_PeriphCLKConfig>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8002ea2:	f7ff ff3d 	bl	8002d20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	623b      	str	r3, [r7, #32]
 8002eaa:	4b76      	ldr	r3, [pc, #472]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eae:	4a75      	ldr	r2, [pc, #468]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002eb0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002eb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eb6:	4b73      	ldr	r3, [pc, #460]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eba:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ebe:	623b      	str	r3, [r7, #32]
 8002ec0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61fb      	str	r3, [r7, #28]
 8002ec6:	4b6f      	ldr	r3, [pc, #444]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eca:	4a6e      	ldr	r2, [pc, #440]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002ecc:	f043 0320 	orr.w	r3, r3, #32
 8002ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ed2:	4b6c      	ldr	r3, [pc, #432]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	61fb      	str	r3, [r7, #28]
 8002edc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61bb      	str	r3, [r7, #24]
 8002ee2:	4b68      	ldr	r3, [pc, #416]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee6:	4a67      	ldr	r2, [pc, #412]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002ee8:	f043 0301 	orr.w	r3, r3, #1
 8002eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eee:	4b65      	ldr	r3, [pc, #404]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	61bb      	str	r3, [r7, #24]
 8002ef8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	4b61      	ldr	r3, [pc, #388]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f02:	4a60      	ldr	r2, [pc, #384]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002f04:	f043 0302 	orr.w	r3, r3, #2
 8002f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f0a:	4b5e      	ldr	r3, [pc, #376]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	4b5a      	ldr	r3, [pc, #360]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1e:	4a59      	ldr	r2, [pc, #356]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002f20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f26:	4b57      	ldr	r3, [pc, #348]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	4b53      	ldr	r3, [pc, #332]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3a:	4a52      	ldr	r2, [pc, #328]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002f3c:	f043 0304 	orr.w	r3, r3, #4
 8002f40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f42:	4b50      	ldr	r3, [pc, #320]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	4b4c      	ldr	r3, [pc, #304]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f56:	4a4b      	ldr	r2, [pc, #300]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002f58:	f043 0308 	orr.w	r3, r3, #8
 8002f5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f5e:	4b49      	ldr	r3, [pc, #292]	@ (8003084 <HAL_LTDC_MspInit+0x234>)
 8002f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002f6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f6e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f70:	2302      	movs	r3, #2
 8002f72:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f7c:	230e      	movs	r3, #14
 8002f7e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002f80:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f84:	4619      	mov	r1, r3
 8002f86:	4840      	ldr	r0, [pc, #256]	@ (8003088 <HAL_LTDC_MspInit+0x238>)
 8002f88:	f000 ffba 	bl	8003f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002f8c:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002f90:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f92:	2302      	movs	r3, #2
 8002f94:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f96:	2300      	movs	r3, #0
 8002f98:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f9e:	230e      	movs	r3, #14
 8002fa0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4838      	ldr	r0, [pc, #224]	@ (800308c <HAL_LTDC_MspInit+0x23c>)
 8002faa:	f000 ffa9 	bl	8003f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002fbe:	2309      	movs	r3, #9
 8002fc0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fc2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	4831      	ldr	r0, [pc, #196]	@ (8003090 <HAL_LTDC_MspInit+0x240>)
 8002fca:	f000 ff99 	bl	8003f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002fce:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002fd2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd4:	2302      	movs	r3, #2
 8002fd6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002fe0:	230e      	movs	r3, #14
 8002fe2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fe4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002fe8:	4619      	mov	r1, r3
 8002fea:	4829      	ldr	r0, [pc, #164]	@ (8003090 <HAL_LTDC_MspInit+0x240>)
 8002fec:	f000 ff88 	bl	8003f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002ff0:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002ff4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ffe:	2300      	movs	r3, #0
 8003000:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003002:	230e      	movs	r3, #14
 8003004:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003006:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800300a:	4619      	mov	r1, r3
 800300c:	4821      	ldr	r0, [pc, #132]	@ (8003094 <HAL_LTDC_MspInit+0x244>)
 800300e:	f000 ff77 	bl	8003f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8003012:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8003016:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003018:	2302      	movs	r3, #2
 800301a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301c:	2300      	movs	r3, #0
 800301e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003020:	2300      	movs	r3, #0
 8003022:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003024:	230e      	movs	r3, #14
 8003026:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003028:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800302c:	4619      	mov	r1, r3
 800302e:	481a      	ldr	r0, [pc, #104]	@ (8003098 <HAL_LTDC_MspInit+0x248>)
 8003030:	f000 ff66 	bl	8003f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8003034:	2348      	movs	r3, #72	@ 0x48
 8003036:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003038:	2302      	movs	r3, #2
 800303a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303c:	2300      	movs	r3, #0
 800303e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003040:	2300      	movs	r3, #0
 8003042:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003044:	230e      	movs	r3, #14
 8003046:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003048:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800304c:	4619      	mov	r1, r3
 800304e:	4813      	ldr	r0, [pc, #76]	@ (800309c <HAL_LTDC_MspInit+0x24c>)
 8003050:	f000 ff56 	bl	8003f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8003054:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003058:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305a:	2302      	movs	r3, #2
 800305c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003062:	2300      	movs	r3, #0
 8003064:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003066:	2309      	movs	r3, #9
 8003068:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800306a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800306e:	4619      	mov	r1, r3
 8003070:	4808      	ldr	r0, [pc, #32]	@ (8003094 <HAL_LTDC_MspInit+0x244>)
 8003072:	f000 ff45 	bl	8003f00 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8003076:	bf00      	nop
 8003078:	3768      	adds	r7, #104	@ 0x68
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40016800 	.word	0x40016800
 8003084:	40023800 	.word	0x40023800
 8003088:	40021400 	.word	0x40021400
 800308c:	40020000 	.word	0x40020000
 8003090:	40020400 	.word	0x40020400
 8003094:	40021800 	.word	0x40021800
 8003098:	40020800 	.word	0x40020800
 800309c:	40020c00 	.word	0x40020c00

080030a0 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a0b      	ldr	r2, [pc, #44]	@ (80030dc <HAL_RNG_MspInit+0x3c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d10d      	bne.n	80030ce <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	60fb      	str	r3, [r7, #12]
 80030b6:	4b0a      	ldr	r3, [pc, #40]	@ (80030e0 <HAL_RNG_MspInit+0x40>)
 80030b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030ba:	4a09      	ldr	r2, [pc, #36]	@ (80030e0 <HAL_RNG_MspInit+0x40>)
 80030bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030c0:	6353      	str	r3, [r2, #52]	@ 0x34
 80030c2:	4b07      	ldr	r3, [pc, #28]	@ (80030e0 <HAL_RNG_MspInit+0x40>)
 80030c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ca:	60fb      	str	r3, [r7, #12]
 80030cc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80030ce:	bf00      	nop
 80030d0:	3714      	adds	r7, #20
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	50060800 	.word	0x50060800
 80030e0:	40023800 	.word	0x40023800

080030e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08a      	sub	sp, #40	@ 0x28
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030ec:	f107 0314 	add.w	r3, r7, #20
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]
 80030f4:	605a      	str	r2, [r3, #4]
 80030f6:	609a      	str	r2, [r3, #8]
 80030f8:	60da      	str	r2, [r3, #12]
 80030fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a19      	ldr	r2, [pc, #100]	@ (8003168 <HAL_SPI_MspInit+0x84>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d12c      	bne.n	8003160 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8003106:	2300      	movs	r3, #0
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	4b18      	ldr	r3, [pc, #96]	@ (800316c <HAL_SPI_MspInit+0x88>)
 800310c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310e:	4a17      	ldr	r2, [pc, #92]	@ (800316c <HAL_SPI_MspInit+0x88>)
 8003110:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003114:	6453      	str	r3, [r2, #68]	@ 0x44
 8003116:	4b15      	ldr	r3, [pc, #84]	@ (800316c <HAL_SPI_MspInit+0x88>)
 8003118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800311a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800311e:	613b      	str	r3, [r7, #16]
 8003120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003122:	2300      	movs	r3, #0
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	4b11      	ldr	r3, [pc, #68]	@ (800316c <HAL_SPI_MspInit+0x88>)
 8003128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312a:	4a10      	ldr	r2, [pc, #64]	@ (800316c <HAL_SPI_MspInit+0x88>)
 800312c:	f043 0320 	orr.w	r3, r3, #32
 8003130:	6313      	str	r3, [r2, #48]	@ 0x30
 8003132:	4b0e      	ldr	r3, [pc, #56]	@ (800316c <HAL_SPI_MspInit+0x88>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003136:	f003 0320 	and.w	r3, r3, #32
 800313a:	60fb      	str	r3, [r7, #12]
 800313c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800313e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003144:	2302      	movs	r3, #2
 8003146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003148:	2300      	movs	r3, #0
 800314a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800314c:	2300      	movs	r3, #0
 800314e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003150:	2305      	movs	r3, #5
 8003152:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003154:	f107 0314 	add.w	r3, r7, #20
 8003158:	4619      	mov	r1, r3
 800315a:	4805      	ldr	r0, [pc, #20]	@ (8003170 <HAL_SPI_MspInit+0x8c>)
 800315c:	f000 fed0 	bl	8003f00 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8003160:	bf00      	nop
 8003162:	3728      	adds	r7, #40	@ 0x28
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40015000 	.word	0x40015000
 800316c:	40023800 	.word	0x40023800
 8003170:	40021400 	.word	0x40021400

08003174 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a08      	ldr	r2, [pc, #32]	@ (80031a4 <HAL_SPI_MspDeInit+0x30>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d10a      	bne.n	800319c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8003186:	4b08      	ldr	r3, [pc, #32]	@ (80031a8 <HAL_SPI_MspDeInit+0x34>)
 8003188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800318a:	4a07      	ldr	r2, [pc, #28]	@ (80031a8 <HAL_SPI_MspDeInit+0x34>)
 800318c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003190:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8003192:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8003196:	4805      	ldr	r0, [pc, #20]	@ (80031ac <HAL_SPI_MspDeInit+0x38>)
 8003198:	f001 f85e 	bl	8004258 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800319c:	bf00      	nop
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40015000 	.word	0x40015000
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40021400 	.word	0x40021400

080031b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031c0:	d116      	bne.n	80031f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	4b16      	ldr	r3, [pc, #88]	@ (8003220 <HAL_TIM_Base_MspInit+0x70>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ca:	4a15      	ldr	r2, [pc, #84]	@ (8003220 <HAL_TIM_Base_MspInit+0x70>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80031d2:	4b13      	ldr	r3, [pc, #76]	@ (8003220 <HAL_TIM_Base_MspInit+0x70>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80031de:	2200      	movs	r2, #0
 80031e0:	2100      	movs	r1, #0
 80031e2:	201c      	movs	r0, #28
 80031e4:	f000 fe21 	bl	8003e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031e8:	201c      	movs	r0, #28
 80031ea:	f000 fe3a 	bl	8003e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80031ee:	e012      	b.n	8003216 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003224 <HAL_TIM_Base_MspInit+0x74>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d10d      	bne.n	8003216 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	4b08      	ldr	r3, [pc, #32]	@ (8003220 <HAL_TIM_Base_MspInit+0x70>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003202:	4a07      	ldr	r2, [pc, #28]	@ (8003220 <HAL_TIM_Base_MspInit+0x70>)
 8003204:	f043 0308 	orr.w	r3, r3, #8
 8003208:	6413      	str	r3, [r2, #64]	@ 0x40
 800320a:	4b05      	ldr	r3, [pc, #20]	@ (8003220 <HAL_TIM_Base_MspInit+0x70>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	60bb      	str	r3, [r7, #8]
 8003214:	68bb      	ldr	r3, [r7, #8]
}
 8003216:	bf00      	nop
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40023800 	.word	0x40023800
 8003224:	40000c00 	.word	0x40000c00

08003228 <HAL_GPIO_EXTI_Callback>:

}

/* USER CODE BEGIN 1 */
// Interrupt callback function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) {  // Button pin
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d105      	bne.n	8003244 <HAL_GPIO_EXTI_Callback+0x1c>
    	// rotate stuff
    	Matrix_clear();
 8003238:	f7fe fda0 	bl	8001d7c <Matrix_clear>
    	transform_rotation();
 800323c:	f7fe f8ca 	bl	80013d4 <transform_rotation>
    	Matrix_update();
 8003240:	f7fe fde4 	bl	8001e0c <Matrix_update>
    }
}
 8003244:	bf00      	nop
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_TIM_PeriodElapsedCallback>:

// Interrupt callback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800325c:	d101      	bne.n	8003262 <HAL_TIM_PeriodElapsedCallback+0x16>
    	tick_Matrix();
 800325e:	f7fe f883 	bl	8001368 <tick_Matrix>
    }
}
 8003262:	bf00      	nop
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800326a:	b480      	push	{r7}
 800326c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800326e:	bf00      	nop
 8003270:	e7fd      	b.n	800326e <NMI_Handler+0x4>

08003272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003272:	b480      	push	{r7}
 8003274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003276:	bf00      	nop
 8003278:	e7fd      	b.n	8003276 <HardFault_Handler+0x4>

0800327a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800327a:	b480      	push	{r7}
 800327c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800327e:	bf00      	nop
 8003280:	e7fd      	b.n	800327e <MemManage_Handler+0x4>

08003282 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003282:	b480      	push	{r7}
 8003284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003286:	bf00      	nop
 8003288:	e7fd      	b.n	8003286 <BusFault_Handler+0x4>

0800328a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800328a:	b480      	push	{r7}
 800328c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800328e:	bf00      	nop
 8003290:	e7fd      	b.n	800328e <UsageFault_Handler+0x4>

08003292 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003292:	b480      	push	{r7}
 8003294:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003296:	bf00      	nop
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr

080032a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032a4:	bf00      	nop
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr

080032ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032ae:	b480      	push	{r7}
 80032b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032b2:	bf00      	nop
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032c0:	f000 fc52 	bl	8003b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032c4:	bf00      	nop
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80032cc:	2001      	movs	r0, #1
 80032ce:	f001 f91b 	bl	8004508 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80032d2:	bf00      	nop
 80032d4:	bd80      	pop	{r7, pc}
	...

080032d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //Matrix_update();
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032dc:	4802      	ldr	r0, [pc, #8]	@ (80032e8 <TIM2_IRQHandler+0x10>)
 80032de:	f003 ff6c 	bl	80071ba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032e2:	bf00      	nop
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	20025be8 	.word	0x20025be8

080032ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	4603      	mov	r3, r0
 80032f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	db0b      	blt.n	8003316 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	f003 021f 	and.w	r2, r3, #31
 8003304:	4907      	ldr	r1, [pc, #28]	@ (8003324 <__NVIC_EnableIRQ+0x38>)
 8003306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	2001      	movs	r0, #1
 800330e:	fa00 f202 	lsl.w	r2, r0, r2
 8003312:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003316:	bf00      	nop
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	e000e100 	.word	0xe000e100

08003328 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports
    I2C3_MspInit();
 800332e:	f000 f9e1 	bl	80036f4 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 8003332:	f000 f9a1 	bl	8003678 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003336:	2202      	movs	r2, #2
 8003338:	2103      	movs	r1, #3
 800333a:	2082      	movs	r0, #130	@ 0x82
 800333c:	f000 fa2e 	bl	800379c <I2C3_Write>
    HAL_Delay(5);
 8003340:	2005      	movs	r0, #5
 8003342:	f000 fc31 	bl	8003ba8 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003346:	2200      	movs	r2, #0
 8003348:	2103      	movs	r1, #3
 800334a:	2082      	movs	r0, #130	@ 0x82
 800334c:	f000 fa26 	bl	800379c <I2C3_Write>
    HAL_Delay(2);
 8003350:	2002      	movs	r0, #2
 8003352:	f000 fc29 	bl	8003ba8 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8003356:	1cba      	adds	r2, r7, #2
 8003358:	2302      	movs	r3, #2
 800335a:	2100      	movs	r1, #0
 800335c:	2082      	movs	r0, #130	@ 0x82
 800335e:	f000 fa6d 	bl	800383c <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 8003362:	887b      	ldrh	r3, [r7, #2]
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8003368:	887b      	ldrh	r3, [r7, #2]
 800336a:	0a1b      	lsrs	r3, r3, #8
 800336c:	b29a      	uxth	r2, r3
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	4313      	orrs	r3, r2
 8003372:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 8003374:	88fb      	ldrh	r3, [r7, #6]
 8003376:	f640 0211 	movw	r2, #2065	@ 0x811
 800337a:	4293      	cmp	r3, r2
 800337c:	d001      	beq.n	8003382 <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 800337e:	2303      	movs	r3, #3
 8003380:	e095      	b.n	80034ae <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8003382:	2202      	movs	r2, #2
 8003384:	2103      	movs	r1, #3
 8003386:	2082      	movs	r0, #130	@ 0x82
 8003388:	f000 fa08 	bl	800379c <I2C3_Write>
    HAL_Delay(5);
 800338c:	2005      	movs	r0, #5
 800338e:	f000 fc0b 	bl	8003ba8 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8003392:	2200      	movs	r2, #0
 8003394:	2103      	movs	r1, #3
 8003396:	2082      	movs	r0, #130	@ 0x82
 8003398:	f000 fa00 	bl	800379c <I2C3_Write>
    HAL_Delay(2);
 800339c:	2002      	movs	r0, #2
 800339e:	f000 fc03 	bl	8003ba8 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80033a2:	2004      	movs	r0, #4
 80033a4:	f000 f887 	bl	80034b6 <STMPE811_Read>
 80033a8:	4603      	mov	r3, r0
 80033aa:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 80033ac:	797b      	ldrb	r3, [r7, #5]
 80033ae:	f023 0301 	bic.w	r3, r3, #1
 80033b2:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80033b4:	797b      	ldrb	r3, [r7, #5]
 80033b6:	461a      	mov	r2, r3
 80033b8:	2104      	movs	r1, #4
 80033ba:	2082      	movs	r0, #130	@ 0x82
 80033bc:	f000 f9ee 	bl	800379c <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80033c0:	2004      	movs	r0, #4
 80033c2:	f000 f878 	bl	80034b6 <STMPE811_Read>
 80033c6:	4603      	mov	r3, r0
 80033c8:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 80033ca:	797b      	ldrb	r3, [r7, #5]
 80033cc:	f023 0302 	bic.w	r3, r3, #2
 80033d0:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80033d2:	797b      	ldrb	r3, [r7, #5]
 80033d4:	461a      	mov	r2, r3
 80033d6:	2104      	movs	r1, #4
 80033d8:	2082      	movs	r0, #130	@ 0x82
 80033da:	f000 f9df 	bl	800379c <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80033de:	2249      	movs	r2, #73	@ 0x49
 80033e0:	2120      	movs	r1, #32
 80033e2:	2082      	movs	r0, #130	@ 0x82
 80033e4:	f000 f9da 	bl	800379c <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80033e8:	2002      	movs	r0, #2
 80033ea:	f000 fbdd 	bl	8003ba8 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80033ee:	2201      	movs	r2, #1
 80033f0:	2121      	movs	r1, #33	@ 0x21
 80033f2:	2082      	movs	r0, #130	@ 0x82
 80033f4:	f000 f9d2 	bl	800379c <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80033f8:	2017      	movs	r0, #23
 80033fa:	f000 f85c 	bl	80034b6 <STMPE811_Read>
 80033fe:	4603      	mov	r3, r0
 8003400:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8003402:	797b      	ldrb	r3, [r7, #5]
 8003404:	f043 031e 	orr.w	r3, r3, #30
 8003408:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 800340a:	797b      	ldrb	r3, [r7, #5]
 800340c:	461a      	mov	r2, r3
 800340e:	2117      	movs	r1, #23
 8003410:	2082      	movs	r0, #130	@ 0x82
 8003412:	f000 f9c3 	bl	800379c <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8003416:	229a      	movs	r2, #154	@ 0x9a
 8003418:	2141      	movs	r1, #65	@ 0x41
 800341a:	2082      	movs	r0, #130	@ 0x82
 800341c:	f000 f9be 	bl	800379c <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8003420:	2201      	movs	r2, #1
 8003422:	214a      	movs	r1, #74	@ 0x4a
 8003424:	2082      	movs	r0, #130	@ 0x82
 8003426:	f000 f9b9 	bl	800379c <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 800342a:	2201      	movs	r2, #1
 800342c:	214b      	movs	r1, #75	@ 0x4b
 800342e:	2082      	movs	r0, #130	@ 0x82
 8003430:	f000 f9b4 	bl	800379c <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8003434:	2200      	movs	r2, #0
 8003436:	214b      	movs	r1, #75	@ 0x4b
 8003438:	2082      	movs	r0, #130	@ 0x82
 800343a:	f000 f9af 	bl	800379c <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 800343e:	2201      	movs	r2, #1
 8003440:	2156      	movs	r1, #86	@ 0x56
 8003442:	2082      	movs	r0, #130	@ 0x82
 8003444:	f000 f9aa 	bl	800379c <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8003448:	2201      	movs	r2, #1
 800344a:	2158      	movs	r1, #88	@ 0x58
 800344c:	2082      	movs	r0, #130	@ 0x82
 800344e:	f000 f9a5 	bl	800379c <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8003452:	2203      	movs	r2, #3
 8003454:	2140      	movs	r1, #64	@ 0x40
 8003456:	2082      	movs	r0, #130	@ 0x82
 8003458:	f000 f9a0 	bl	800379c <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 800345c:	22ff      	movs	r2, #255	@ 0xff
 800345e:	210b      	movs	r1, #11
 8003460:	2082      	movs	r0, #130	@ 0x82
 8003462:	f000 f99b 	bl	800379c <I2C3_Write>

    /* Enable global interrupts */

    enableInterruptSupportForTouch();
 8003466:	f000 f8c1 	bl	80035ec <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 800346a:	2009      	movs	r0, #9
 800346c:	f000 f823 	bl	80034b6 <STMPE811_Read>
 8003470:	4603      	mov	r3, r0
 8003472:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8003474:	797b      	ldrb	r3, [r7, #5]
 8003476:	f043 0301 	orr.w	r3, r3, #1
 800347a:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 800347c:	797b      	ldrb	r3, [r7, #5]
 800347e:	461a      	mov	r2, r3
 8003480:	2109      	movs	r1, #9
 8003482:	2082      	movs	r0, #130	@ 0x82
 8003484:	f000 f98a 	bl	800379c <I2C3_Write>

    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8003488:	200a      	movs	r0, #10
 800348a:	f000 f814 	bl	80034b6 <STMPE811_Read>
 800348e:	4603      	mov	r3, r0
 8003490:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 8003492:	797b      	ldrb	r3, [r7, #5]
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 800349a:	797b      	ldrb	r3, [r7, #5]
 800349c:	461a      	mov	r2, r3
 800349e:	210a      	movs	r1, #10
 80034a0:	2082      	movs	r0, #130	@ 0x82
 80034a2:	f000 f97b 	bl	800379c <I2C3_Write>

    /* Wait for 2 ms delay */
    HAL_Delay(200);
 80034a6:	20c8      	movs	r0, #200	@ 0xc8
 80034a8:	f000 fb7e 	bl	8003ba8 <HAL_Delay>

    return STMPE811_State_Ok;
 80034ac:	2302      	movs	r3, #2

}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b084      	sub	sp, #16
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	4603      	mov	r3, r0
 80034be:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 80034c0:	f107 020f 	add.w	r2, r7, #15
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	4619      	mov	r1, r3
 80034c8:	2082      	movs	r0, #130	@ 0x82
 80034ca:	f000 f991 	bl	80037f0 <I2C3_Read>

    return readData;
 80034ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	460a      	mov	r2, r1
 80034e2:	71fb      	strb	r3, [r7, #7]
 80034e4:	4613      	mov	r3, r2
 80034e6:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 80034e8:	79ba      	ldrb	r2, [r7, #6]
 80034ea:	79fb      	ldrb	r3, [r7, #7]
 80034ec:	4619      	mov	r1, r3
 80034ee:	2082      	movs	r0, #130	@ 0x82
 80034f0:	f000 f954 	bl	800379c <I2C3_Write>
}
 80034f4:	bf00      	nop
 80034f6:	3708      	adds	r7, #8
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}

080034fc <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	799b      	ldrb	r3, [r3, #6]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d117      	bne.n	800353c <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f000 f9b5 	bl	8003880 <TM_STMPE811_ReadX>
 8003516:	4603      	mov	r3, r0
 8003518:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 800351c:	b29a      	uxth	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	885b      	ldrh	r3, [r3, #2]
 8003526:	4618      	mov	r0, r3
 8003528:	f000 fa08 	bl	800393c <TM_STMPE811_ReadY>
 800352c:	4603      	mov	r3, r0
 800352e:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003532:	3301      	adds	r3, #1
 8003534:	b29a      	uxth	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	805a      	strh	r2, [r3, #2]
 800353a:	e048      	b.n	80035ce <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	799b      	ldrb	r3, [r3, #6]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d112      	bne.n	800356a <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f000 f999 	bl	8003880 <TM_STMPE811_ReadX>
 800354e:	4603      	mov	r3, r0
 8003550:	461a      	mov	r2, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	885b      	ldrh	r3, [r3, #2]
 800355a:	4618      	mov	r0, r3
 800355c:	f000 f9ee 	bl	800393c <TM_STMPE811_ReadY>
 8003560:	4603      	mov	r3, r0
 8003562:	461a      	mov	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	805a      	strh	r2, [r3, #2]
 8003568:	e031      	b.n	80035ce <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	799b      	ldrb	r3, [r3, #6]
 800356e:	2b02      	cmp	r3, #2
 8003570:	d115      	bne.n	800359e <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	885b      	ldrh	r3, [r3, #2]
 8003576:	4618      	mov	r0, r3
 8003578:	f000 f982 	bl	8003880 <TM_STMPE811_ReadX>
 800357c:	4603      	mov	r3, r0
 800357e:	461a      	mov	r2, r3
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	4618      	mov	r0, r3
 800358a:	f000 f9d7 	bl	800393c <TM_STMPE811_ReadY>
 800358e:	4603      	mov	r3, r0
 8003590:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8003594:	3301      	adds	r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	801a      	strh	r2, [r3, #0]
 800359c:	e017      	b.n	80035ce <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	799b      	ldrb	r3, [r3, #6]
 80035a2:	2b03      	cmp	r3, #3
 80035a4:	d113      	bne.n	80035ce <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 f968 	bl	8003880 <TM_STMPE811_ReadX>
 80035b0:	4603      	mov	r3, r0
 80035b2:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 f9bb 	bl	800393c <TM_STMPE811_ReadY>
 80035c6:	4603      	mov	r3, r0
 80035c8:	461a      	mov	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80035ce:	2201      	movs	r2, #1
 80035d0:	214b      	movs	r1, #75	@ 0x4b
 80035d2:	2082      	movs	r0, #130	@ 0x82
 80035d4:	f000 f8e2 	bl	800379c <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80035d8:	2200      	movs	r2, #0
 80035da:	214b      	movs	r1, #75	@ 0x4b
 80035dc:	2082      	movs	r0, #130	@ 0x82
 80035de:	f000 f8dd 	bl	800379c <I2C3_Write>
}
 80035e2:	bf00      	nop
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <enableInterruptSupportForTouch>:
    return true;
}


void enableInterruptSupportForTouch(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b086      	sub	sp, #24
 80035f0:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	603b      	str	r3, [r7, #0]
 80035f6:	4b14      	ldr	r3, [pc, #80]	@ (8003648 <enableInterruptSupportForTouch+0x5c>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fa:	4a13      	ldr	r2, [pc, #76]	@ (8003648 <enableInterruptSupportForTouch+0x5c>)
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	6313      	str	r3, [r2, #48]	@ 0x30
 8003602:	4b11      	ldr	r3, [pc, #68]	@ (8003648 <enableInterruptSupportForTouch+0x5c>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800360e:	1d3b      	adds	r3, r7, #4
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	605a      	str	r2, [r3, #4]
 8003616:	609a      	str	r2, [r3, #8]
 8003618:	60da      	str	r2, [r3, #12]
 800361a:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800361c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003620:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003622:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8003626:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800362c:	2302      	movs	r3, #2
 800362e:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003630:	1d3b      	adds	r3, r7, #4
 8003632:	4619      	mov	r1, r3
 8003634:	4805      	ldr	r0, [pc, #20]	@ (800364c <enableInterruptSupportForTouch+0x60>)
 8003636:	f000 fc63 	bl	8003f00 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 800363a:	2028      	movs	r0, #40	@ 0x28
 800363c:	f7ff fe56 	bl	80032ec <__NVIC_EnableIRQ>

}
 8003640:	bf00      	nop
 8003642:	3718      	adds	r7, #24
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	40023800 	.word	0x40023800
 800364c:	40020000 	.word	0x40020000

08003650 <verifyHAL_I2C_IS_OKAY>:


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8003650:	b580      	push	{r7, lr}
 8003652:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8003654:	4b06      	ldr	r3, [pc, #24]	@ (8003670 <verifyHAL_I2C_IS_OKAY+0x20>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d006      	beq.n	800366a <verifyHAL_I2C_IS_OKAY+0x1a>
    {
    	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14); // Error with I2C
 800365c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003660:	4804      	ldr	r0, [pc, #16]	@ (8003674 <verifyHAL_I2C_IS_OKAY+0x24>)
 8003662:	f000 ff36 	bl	80044d2 <HAL_GPIO_TogglePin>
        while(1);
 8003666:	bf00      	nop
 8003668:	e7fd      	b.n	8003666 <verifyHAL_I2C_IS_OKAY+0x16>
    }
}
 800366a:	bf00      	nop
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	20025ccc 	.word	0x20025ccc
 8003674:	40021800 	.word	0x40021800

08003678 <I2C3_Init>:

static void I2C3_Init()
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b082      	sub	sp, #8
 800367c:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 800367e:	2300      	movs	r3, #0
 8003680:	603b      	str	r3, [r7, #0]
 8003682:	4b18      	ldr	r3, [pc, #96]	@ (80036e4 <I2C3_Init+0x6c>)
 8003684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003686:	4a17      	ldr	r2, [pc, #92]	@ (80036e4 <I2C3_Init+0x6c>)
 8003688:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800368c:	6413      	str	r3, [r2, #64]	@ 0x40
 800368e:	4b15      	ldr	r3, [pc, #84]	@ (80036e4 <I2C3_Init+0x6c>)
 8003690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003692:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 800369a:	4b13      	ldr	r3, [pc, #76]	@ (80036e8 <I2C3_Init+0x70>)
 800369c:	4a13      	ldr	r2, [pc, #76]	@ (80036ec <I2C3_Init+0x74>)
 800369e:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 80036a0:	4b11      	ldr	r3, [pc, #68]	@ (80036e8 <I2C3_Init+0x70>)
 80036a2:	4a13      	ldr	r2, [pc, #76]	@ (80036f0 <I2C3_Init+0x78>)
 80036a4:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80036a6:	4b10      	ldr	r3, [pc, #64]	@ (80036e8 <I2C3_Init+0x70>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 80036ac:	4b0e      	ldr	r3, [pc, #56]	@ (80036e8 <I2C3_Init+0x70>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036b2:	4b0d      	ldr	r3, [pc, #52]	@ (80036e8 <I2C3_Init+0x70>)
 80036b4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80036b8:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 80036ba:	4b0b      	ldr	r3, [pc, #44]	@ (80036e8 <I2C3_Init+0x70>)
 80036bc:	2200      	movs	r2, #0
 80036be:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036c0:	4b09      	ldr	r3, [pc, #36]	@ (80036e8 <I2C3_Init+0x70>)
 80036c2:	2200      	movs	r2, #0
 80036c4:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode?

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 80036c6:	4808      	ldr	r0, [pc, #32]	@ (80036e8 <I2C3_Init+0x70>)
 80036c8:	f000 ff36 	bl	8004538 <HAL_I2C_Init>
 80036cc:	4603      	mov	r3, r0
 80036ce:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80036d0:	79fb      	ldrb	r3, [r7, #7]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 80036d6:	bf00      	nop
 80036d8:	e7fd      	b.n	80036d6 <I2C3_Init+0x5e>
    }
    return;
 80036da:	bf00      	nop
}
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	40023800 	.word	0x40023800
 80036e8:	20025c78 	.word	0x20025c78
 80036ec:	40005c00 	.word	0x40005c00
 80036f0:	000186a0 	.word	0x000186a0

080036f4 <I2C3_MspInit>:

// GPIO Initializations
static void I2C3_MspInit(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b088      	sub	sp, #32
 80036f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036fa:	f107 030c 	add.w	r3, r7, #12
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	605a      	str	r2, [r3, #4]
 8003704:	609a      	str	r2, [r3, #8]
 8003706:	60da      	str	r2, [r3, #12]
 8003708:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	4b20      	ldr	r3, [pc, #128]	@ (8003790 <I2C3_MspInit+0x9c>)
 8003710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003712:	4a1f      	ldr	r2, [pc, #124]	@ (8003790 <I2C3_MspInit+0x9c>)
 8003714:	f043 0304 	orr.w	r3, r3, #4
 8003718:	6313      	str	r3, [r2, #48]	@ 0x30
 800371a:	4b1d      	ldr	r3, [pc, #116]	@ (8003790 <I2C3_MspInit+0x9c>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371e:	f003 0304 	and.w	r3, r3, #4
 8003722:	60bb      	str	r3, [r7, #8]
 8003724:	68bb      	ldr	r3, [r7, #8]

    // GPIOA
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003726:	2300      	movs	r3, #0
 8003728:	607b      	str	r3, [r7, #4]
 800372a:	4b19      	ldr	r3, [pc, #100]	@ (8003790 <I2C3_MspInit+0x9c>)
 800372c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800372e:	4a18      	ldr	r2, [pc, #96]	@ (8003790 <I2C3_MspInit+0x9c>)
 8003730:	f043 0301 	orr.w	r3, r3, #1
 8003734:	6313      	str	r3, [r2, #48]	@ 0x30
 8003736:	4b16      	ldr	r3, [pc, #88]	@ (8003790 <I2C3_MspInit+0x9c>)
 8003738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	607b      	str	r3, [r7, #4]
 8003740:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8003742:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003746:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003748:	2312      	movs	r3, #18
 800374a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374c:	2300      	movs	r3, #0
 800374e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003750:	2300      	movs	r3, #0
 8003752:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003754:	2304      	movs	r3, #4
 8003756:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003758:	f107 030c 	add.w	r3, r7, #12
 800375c:	4619      	mov	r1, r3
 800375e:	480d      	ldr	r0, [pc, #52]	@ (8003794 <I2C3_MspInit+0xa0>)
 8003760:	f000 fbce 	bl	8003f00 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8003764:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003768:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800376a:	2312      	movs	r3, #18
 800376c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376e:	2300      	movs	r3, #0
 8003770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003772:	2300      	movs	r3, #0
 8003774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003776:	2304      	movs	r3, #4
 8003778:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800377a:	f107 030c 	add.w	r3, r7, #12
 800377e:	4619      	mov	r1, r3
 8003780:	4805      	ldr	r0, [pc, #20]	@ (8003798 <I2C3_MspInit+0xa4>)
 8003782:	f000 fbbd 	bl	8003f00 <HAL_GPIO_Init>

}
 8003786:	bf00      	nop
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	40023800 	.word	0x40023800
 8003794:	40020800 	.word	0x40020800
 8003798:	40020000 	.word	0x40020000

0800379c <I2C3_Write>:

// This function should only be used for single BYTE transfers
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b088      	sub	sp, #32
 80037a0:	af04      	add	r7, sp, #16
 80037a2:	4603      	mov	r3, r0
 80037a4:	80fb      	strh	r3, [r7, #6]
 80037a6:	460b      	mov	r3, r1
 80037a8:	717b      	strb	r3, [r7, #5]
 80037aa:	4613      	mov	r3, r2
 80037ac:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 80037ae:	793b      	ldrb	r3, [r7, #4]
 80037b0:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call?
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80037b2:	797b      	ldrb	r3, [r7, #5]
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	88f9      	ldrh	r1, [r7, #6]
 80037b8:	4b0a      	ldr	r3, [pc, #40]	@ (80037e4 <I2C3_Write+0x48>)
 80037ba:	9302      	str	r3, [sp, #8]
 80037bc:	2301      	movs	r3, #1
 80037be:	9301      	str	r3, [sp, #4]
 80037c0:	f107 030f 	add.w	r3, r7, #15
 80037c4:	9300      	str	r3, [sp, #0]
 80037c6:	2301      	movs	r3, #1
 80037c8:	4807      	ldr	r0, [pc, #28]	@ (80037e8 <I2C3_Write+0x4c>)
 80037ca:	f000 fff9 	bl	80047c0 <HAL_I2C_Mem_Write>
 80037ce:	4603      	mov	r3, r0
 80037d0:	461a      	mov	r2, r3
 80037d2:	4b06      	ldr	r3, [pc, #24]	@ (80037ec <I2C3_Write+0x50>)
 80037d4:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80037d6:	f7ff ff3b 	bl	8003650 <verifyHAL_I2C_IS_OKAY>
}
 80037da:	bf00      	nop
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	0003d090 	.word	0x0003d090
 80037e8:	20025c78 	.word	0x20025c78
 80037ec:	20025ccc 	.word	0x20025ccc

080037f0 <I2C3_Read>:

// This function should only be used for single BYTE transfers
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b086      	sub	sp, #24
 80037f4:	af04      	add	r7, sp, #16
 80037f6:	4603      	mov	r3, r0
 80037f8:	603a      	str	r2, [r7, #0]
 80037fa:	71fb      	strb	r3, [r7, #7]
 80037fc:	460b      	mov	r3, r1
 80037fe:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	b299      	uxth	r1, r3
 8003804:	79bb      	ldrb	r3, [r7, #6]
 8003806:	b29a      	uxth	r2, r3
 8003808:	4b09      	ldr	r3, [pc, #36]	@ (8003830 <I2C3_Read+0x40>)
 800380a:	9302      	str	r3, [sp, #8]
 800380c:	2301      	movs	r3, #1
 800380e:	9301      	str	r3, [sp, #4]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	2301      	movs	r3, #1
 8003816:	4807      	ldr	r0, [pc, #28]	@ (8003834 <I2C3_Read+0x44>)
 8003818:	f001 f8cc 	bl	80049b4 <HAL_I2C_Mem_Read>
 800381c:	4603      	mov	r3, r0
 800381e:	461a      	mov	r2, r3
 8003820:	4b05      	ldr	r3, [pc, #20]	@ (8003838 <I2C3_Read+0x48>)
 8003822:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8003824:	f7ff ff14 	bl	8003650 <verifyHAL_I2C_IS_OKAY>
}
 8003828:	bf00      	nop
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	0003d090 	.word	0x0003d090
 8003834:	20025c78 	.word	0x20025c78
 8003838:	20025ccc 	.word	0x20025ccc

0800383c <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af04      	add	r7, sp, #16
 8003842:	603a      	str	r2, [r7, #0]
 8003844:	461a      	mov	r2, r3
 8003846:	4603      	mov	r3, r0
 8003848:	71fb      	strb	r3, [r7, #7]
 800384a:	460b      	mov	r3, r1
 800384c:	71bb      	strb	r3, [r7, #6]
 800384e:	4613      	mov	r3, r2
 8003850:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	b299      	uxth	r1, r3
 8003856:	79bb      	ldrb	r3, [r7, #6]
 8003858:	b29a      	uxth	r2, r3
 800385a:	4b07      	ldr	r3, [pc, #28]	@ (8003878 <I2C3_MulitByteRead+0x3c>)
 800385c:	9302      	str	r3, [sp, #8]
 800385e:	88bb      	ldrh	r3, [r7, #4]
 8003860:	9301      	str	r3, [sp, #4]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	2301      	movs	r3, #1
 8003868:	4804      	ldr	r0, [pc, #16]	@ (800387c <I2C3_MulitByteRead+0x40>)
 800386a:	f001 f8a3 	bl	80049b4 <HAL_I2C_Mem_Read>
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	0003d090 	.word	0x0003d090
 800387c:	20025c78 	.word	0x20025c78

08003880 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 800388a:	204d      	movs	r0, #77	@ 0x4d
 800388c:	f7ff fe13 	bl	80034b6 <STMPE811_Read>
 8003890:	4603      	mov	r3, r0
 8003892:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8003894:	204e      	movs	r0, #78	@ 0x4e
 8003896:	f7ff fe0e 	bl	80034b6 <STMPE811_Read>
 800389a:	4603      	mov	r3, r0
 800389c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800389e:	7a7b      	ldrb	r3, [r7, #9]
 80038a0:	021b      	lsls	r3, r3, #8
 80038a2:	b21a      	sxth	r2, r3
 80038a4:	7a3b      	ldrb	r3, [r7, #8]
 80038a6:	b21b      	sxth	r3, r3
 80038a8:	4313      	orrs	r3, r2
 80038aa:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 80038ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038b0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80038b4:	4293      	cmp	r3, r2
 80038b6:	dc06      	bgt.n	80038c6 <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 80038b8:	89fb      	ldrh	r3, [r7, #14]
 80038ba:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 80038be:	330c      	adds	r3, #12
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	81fb      	strh	r3, [r7, #14]
 80038c4:	e005      	b.n	80038d2 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 80038c6:	89fb      	ldrh	r3, [r7, #14]
 80038c8:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80038cc:	3308      	adds	r3, #8
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 80038d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038d6:	4a18      	ldr	r2, [pc, #96]	@ (8003938 <TM_STMPE811_ReadX+0xb8>)
 80038d8:	fb82 1203 	smull	r1, r2, r2, r3
 80038dc:	441a      	add	r2, r3
 80038de:	10d2      	asrs	r2, r2, #3
 80038e0:	17db      	asrs	r3, r3, #31
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 80038e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038ea:	2bef      	cmp	r3, #239	@ 0xef
 80038ec:	dd02      	ble.n	80038f4 <TM_STMPE811_ReadX+0x74>
        val = 239;
 80038ee:	23ef      	movs	r3, #239	@ 0xef
 80038f0:	81fb      	strh	r3, [r7, #14]
 80038f2:	e005      	b.n	8003900 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 80038f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	da01      	bge.n	8003900 <TM_STMPE811_ReadX+0x80>
        val = 0;
 80038fc:	2300      	movs	r3, #0
 80038fe:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8003900:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	429a      	cmp	r2, r3
 8003908:	dd05      	ble.n	8003916 <TM_STMPE811_ReadX+0x96>
 800390a:	89fa      	ldrh	r2, [r7, #14]
 800390c:	88fb      	ldrh	r3, [r7, #6]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	b29b      	uxth	r3, r3
 8003912:	b21b      	sxth	r3, r3
 8003914:	e004      	b.n	8003920 <TM_STMPE811_ReadX+0xa0>
 8003916:	89fb      	ldrh	r3, [r7, #14]
 8003918:	88fa      	ldrh	r2, [r7, #6]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	b29b      	uxth	r3, r3
 800391e:	b21b      	sxth	r3, r3
 8003920:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8003922:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003926:	2b04      	cmp	r3, #4
 8003928:	dd01      	ble.n	800392e <TM_STMPE811_ReadX+0xae>
        return val;
 800392a:	89fb      	ldrh	r3, [r7, #14]
 800392c:	e000      	b.n	8003930 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 800392e:	88fb      	ldrh	r3, [r7, #6]
}
 8003930:	4618      	mov	r0, r3
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	88888889 	.word	0x88888889

0800393c <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	4603      	mov	r3, r0
 8003944:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8003946:	204f      	movs	r0, #79	@ 0x4f
 8003948:	f7ff fdb5 	bl	80034b6 <STMPE811_Read>
 800394c:	4603      	mov	r3, r0
 800394e:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003950:	2050      	movs	r0, #80	@ 0x50
 8003952:	f7ff fdb0 	bl	80034b6 <STMPE811_Read>
 8003956:	4603      	mov	r3, r0
 8003958:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 800395a:	7a7b      	ldrb	r3, [r7, #9]
 800395c:	021b      	lsls	r3, r3, #8
 800395e:	b21a      	sxth	r2, r3
 8003960:	7a3b      	ldrb	r3, [r7, #8]
 8003962:	b21b      	sxth	r3, r3
 8003964:	4313      	orrs	r3, r2
 8003966:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8003968:	89fb      	ldrh	r3, [r7, #14]
 800396a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800396e:	b29b      	uxth	r3, r3
 8003970:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8003972:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003976:	4a19      	ldr	r2, [pc, #100]	@ (80039dc <TM_STMPE811_ReadY+0xa0>)
 8003978:	fb82 1203 	smull	r1, r2, r2, r3
 800397c:	1052      	asrs	r2, r2, #1
 800397e:	17db      	asrs	r3, r3, #31
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8003984:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003988:	2b00      	cmp	r3, #0
 800398a:	dc02      	bgt.n	8003992 <TM_STMPE811_ReadY+0x56>
        val = 0;
 800398c:	2300      	movs	r3, #0
 800398e:	81fb      	strh	r3, [r7, #14]
 8003990:	e007      	b.n	80039a2 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8003992:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003996:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800399a:	db02      	blt.n	80039a2 <TM_STMPE811_ReadY+0x66>
        val = 319;
 800399c:	f240 133f 	movw	r3, #319	@ 0x13f
 80039a0:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 80039a2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80039a6:	88fb      	ldrh	r3, [r7, #6]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	dd05      	ble.n	80039b8 <TM_STMPE811_ReadY+0x7c>
 80039ac:	89fa      	ldrh	r2, [r7, #14]
 80039ae:	88fb      	ldrh	r3, [r7, #6]
 80039b0:	1ad3      	subs	r3, r2, r3
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	b21b      	sxth	r3, r3
 80039b6:	e004      	b.n	80039c2 <TM_STMPE811_ReadY+0x86>
 80039b8:	89fb      	ldrh	r3, [r7, #14]
 80039ba:	88fa      	ldrh	r2, [r7, #6]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	b29b      	uxth	r3, r3
 80039c0:	b21b      	sxth	r3, r3
 80039c2:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 80039c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80039c8:	2b04      	cmp	r3, #4
 80039ca:	dd01      	ble.n	80039d0 <TM_STMPE811_ReadY+0x94>
        return val;
 80039cc:	89fb      	ldrh	r3, [r7, #14]
 80039ce:	e000      	b.n	80039d2 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 80039d0:	88fb      	ldrh	r3, [r7, #6]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	2e8ba2e9 	.word	0x2e8ba2e9

080039e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039e8:	4a14      	ldr	r2, [pc, #80]	@ (8003a3c <_sbrk+0x5c>)
 80039ea:	4b15      	ldr	r3, [pc, #84]	@ (8003a40 <_sbrk+0x60>)
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039f4:	4b13      	ldr	r3, [pc, #76]	@ (8003a44 <_sbrk+0x64>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d102      	bne.n	8003a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039fc:	4b11      	ldr	r3, [pc, #68]	@ (8003a44 <_sbrk+0x64>)
 80039fe:	4a12      	ldr	r2, [pc, #72]	@ (8003a48 <_sbrk+0x68>)
 8003a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a02:	4b10      	ldr	r3, [pc, #64]	@ (8003a44 <_sbrk+0x64>)
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4413      	add	r3, r2
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d207      	bcs.n	8003a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a10:	f004 fb58 	bl	80080c4 <__errno>
 8003a14:	4603      	mov	r3, r0
 8003a16:	220c      	movs	r2, #12
 8003a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a1e:	e009      	b.n	8003a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a20:	4b08      	ldr	r3, [pc, #32]	@ (8003a44 <_sbrk+0x64>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a26:	4b07      	ldr	r3, [pc, #28]	@ (8003a44 <_sbrk+0x64>)
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	4a05      	ldr	r2, [pc, #20]	@ (8003a44 <_sbrk+0x64>)
 8003a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a32:	68fb      	ldr	r3, [r7, #12]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3718      	adds	r7, #24
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	20030000 	.word	0x20030000
 8003a40:	00000400 	.word	0x00000400
 8003a44:	20025cd0 	.word	0x20025cd0
 8003a48:	20025ed0 	.word	0x20025ed0

08003a4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a50:	4b06      	ldr	r3, [pc, #24]	@ (8003a6c <SystemInit+0x20>)
 8003a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a56:	4a05      	ldr	r2, [pc, #20]	@ (8003a6c <SystemInit+0x20>)
 8003a58:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a5c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a60:	bf00      	nop
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	e000ed00 	.word	0xe000ed00

08003a70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003a70:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003aa8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a74:	f7ff ffea 	bl	8003a4c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a78:	480c      	ldr	r0, [pc, #48]	@ (8003aac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a7a:	490d      	ldr	r1, [pc, #52]	@ (8003ab0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ab4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a80:	e002      	b.n	8003a88 <LoopCopyDataInit>

08003a82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a86:	3304      	adds	r3, #4

08003a88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a8c:	d3f9      	bcc.n	8003a82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a8e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ab8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a90:	4c0a      	ldr	r4, [pc, #40]	@ (8003abc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a94:	e001      	b.n	8003a9a <LoopFillZerobss>

08003a96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a98:	3204      	adds	r2, #4

08003a9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a9c:	d3fb      	bcc.n	8003a96 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003a9e:	f004 fb17 	bl	80080d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003aa2:	f7fe fcfb 	bl	800249c <main>
  bx  lr    
 8003aa6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003aa8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003aac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ab0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8003ab4:	0800a090 	.word	0x0800a090
  ldr r2, =_sbss
 8003ab8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8003abc:	20025ed0 	.word	0x20025ed0

08003ac0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ac0:	e7fe      	b.n	8003ac0 <ADC_IRQHandler>
	...

08003ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8003b04 <HAL_Init+0x40>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a0d      	ldr	r2, [pc, #52]	@ (8003b04 <HAL_Init+0x40>)
 8003ace:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8003b04 <HAL_Init+0x40>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8003b04 <HAL_Init+0x40>)
 8003ada:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ae0:	4b08      	ldr	r3, [pc, #32]	@ (8003b04 <HAL_Init+0x40>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a07      	ldr	r2, [pc, #28]	@ (8003b04 <HAL_Init+0x40>)
 8003ae6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003aec:	2003      	movs	r0, #3
 8003aee:	f000 f991 	bl	8003e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003af2:	2000      	movs	r0, #0
 8003af4:	f000 f808 	bl	8003b08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003af8:	f7ff f918 	bl	8002d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003afc:	2300      	movs	r3, #0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40023c00 	.word	0x40023c00

08003b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b10:	4b12      	ldr	r3, [pc, #72]	@ (8003b5c <HAL_InitTick+0x54>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	4b12      	ldr	r3, [pc, #72]	@ (8003b60 <HAL_InitTick+0x58>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	4619      	mov	r1, r3
 8003b1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b26:	4618      	mov	r0, r3
 8003b28:	f000 f9b7 	bl	8003e9a <HAL_SYSTICK_Config>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e00e      	b.n	8003b54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b0f      	cmp	r3, #15
 8003b3a:	d80a      	bhi.n	8003b52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b44:	f000 f971 	bl	8003e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b48:	4a06      	ldr	r2, [pc, #24]	@ (8003b64 <HAL_InitTick+0x5c>)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	e000      	b.n	8003b54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	20000010 	.word	0x20000010
 8003b60:	20000018 	.word	0x20000018
 8003b64:	20000014 	.word	0x20000014

08003b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b6c:	4b06      	ldr	r3, [pc, #24]	@ (8003b88 <HAL_IncTick+0x20>)
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	461a      	mov	r2, r3
 8003b72:	4b06      	ldr	r3, [pc, #24]	@ (8003b8c <HAL_IncTick+0x24>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4413      	add	r3, r2
 8003b78:	4a04      	ldr	r2, [pc, #16]	@ (8003b8c <HAL_IncTick+0x24>)
 8003b7a:	6013      	str	r3, [r2, #0]
}
 8003b7c:	bf00      	nop
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	20000018 	.word	0x20000018
 8003b8c:	20025cd4 	.word	0x20025cd4

08003b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  return uwTick;
 8003b94:	4b03      	ldr	r3, [pc, #12]	@ (8003ba4 <HAL_GetTick+0x14>)
 8003b96:	681b      	ldr	r3, [r3, #0]
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
 8003ba2:	bf00      	nop
 8003ba4:	20025cd4 	.word	0x20025cd4

08003ba8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b084      	sub	sp, #16
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bb0:	f7ff ffee 	bl	8003b90 <HAL_GetTick>
 8003bb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bc0:	d005      	beq.n	8003bce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bec <HAL_Delay+0x44>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4413      	add	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003bce:	bf00      	nop
 8003bd0:	f7ff ffde 	bl	8003b90 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d8f7      	bhi.n	8003bd0 <HAL_Delay+0x28>
  {
  }
}
 8003be0:	bf00      	nop
 8003be2:	bf00      	nop
 8003be4:	3710      	adds	r7, #16
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000018 	.word	0x20000018

08003bf0 <__NVIC_SetPriorityGrouping>:
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c00:	4b0c      	ldr	r3, [pc, #48]	@ (8003c34 <__NVIC_SetPriorityGrouping+0x44>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c22:	4a04      	ldr	r2, [pc, #16]	@ (8003c34 <__NVIC_SetPriorityGrouping+0x44>)
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	60d3      	str	r3, [r2, #12]
}
 8003c28:	bf00      	nop
 8003c2a:	3714      	adds	r7, #20
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	e000ed00 	.word	0xe000ed00

08003c38 <__NVIC_GetPriorityGrouping>:
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c3c:	4b04      	ldr	r3, [pc, #16]	@ (8003c50 <__NVIC_GetPriorityGrouping+0x18>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	0a1b      	lsrs	r3, r3, #8
 8003c42:	f003 0307 	and.w	r3, r3, #7
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr
 8003c50:	e000ed00 	.word	0xe000ed00

08003c54 <__NVIC_EnableIRQ>:
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	db0b      	blt.n	8003c7e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c66:	79fb      	ldrb	r3, [r7, #7]
 8003c68:	f003 021f 	and.w	r2, r3, #31
 8003c6c:	4907      	ldr	r1, [pc, #28]	@ (8003c8c <__NVIC_EnableIRQ+0x38>)
 8003c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c72:	095b      	lsrs	r3, r3, #5
 8003c74:	2001      	movs	r0, #1
 8003c76:	fa00 f202 	lsl.w	r2, r0, r2
 8003c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	e000e100 	.word	0xe000e100

08003c90 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	4603      	mov	r3, r0
 8003c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	db12      	blt.n	8003cc8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ca2:	79fb      	ldrb	r3, [r7, #7]
 8003ca4:	f003 021f 	and.w	r2, r3, #31
 8003ca8:	490a      	ldr	r1, [pc, #40]	@ (8003cd4 <__NVIC_DisableIRQ+0x44>)
 8003caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cae:	095b      	lsrs	r3, r3, #5
 8003cb0:	2001      	movs	r0, #1
 8003cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8003cb6:	3320      	adds	r3, #32
 8003cb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003cbc:	f3bf 8f4f 	dsb	sy
}
 8003cc0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003cc2:	f3bf 8f6f 	isb	sy
}
 8003cc6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003cc8:	bf00      	nop
 8003cca:	370c      	adds	r7, #12
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	e000e100 	.word	0xe000e100

08003cd8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	db0c      	blt.n	8003d04 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	f003 021f 	and.w	r2, r3, #31
 8003cf0:	4907      	ldr	r1, [pc, #28]	@ (8003d10 <__NVIC_ClearPendingIRQ+0x38>)
 8003cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	2001      	movs	r0, #1
 8003cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8003cfe:	3360      	adds	r3, #96	@ 0x60
 8003d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	e000e100 	.word	0xe000e100

08003d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	6039      	str	r1, [r7, #0]
 8003d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	db0a      	blt.n	8003d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	b2da      	uxtb	r2, r3
 8003d2c:	490c      	ldr	r1, [pc, #48]	@ (8003d60 <__NVIC_SetPriority+0x4c>)
 8003d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d32:	0112      	lsls	r2, r2, #4
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	440b      	add	r3, r1
 8003d38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d3c:	e00a      	b.n	8003d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	4908      	ldr	r1, [pc, #32]	@ (8003d64 <__NVIC_SetPriority+0x50>)
 8003d44:	79fb      	ldrb	r3, [r7, #7]
 8003d46:	f003 030f 	and.w	r3, r3, #15
 8003d4a:	3b04      	subs	r3, #4
 8003d4c:	0112      	lsls	r2, r2, #4
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	440b      	add	r3, r1
 8003d52:	761a      	strb	r2, [r3, #24]
}
 8003d54:	bf00      	nop
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	e000e100 	.word	0xe000e100
 8003d64:	e000ed00 	.word	0xe000ed00

08003d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b089      	sub	sp, #36	@ 0x24
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	f1c3 0307 	rsb	r3, r3, #7
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	bf28      	it	cs
 8003d86:	2304      	movcs	r3, #4
 8003d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	2b06      	cmp	r3, #6
 8003d90:	d902      	bls.n	8003d98 <NVIC_EncodePriority+0x30>
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	3b03      	subs	r3, #3
 8003d96:	e000      	b.n	8003d9a <NVIC_EncodePriority+0x32>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	fa02 f303 	lsl.w	r3, r2, r3
 8003da6:	43da      	mvns	r2, r3
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	401a      	ands	r2, r3
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003db0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	fa01 f303 	lsl.w	r3, r1, r3
 8003dba:	43d9      	mvns	r1, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc0:	4313      	orrs	r3, r2
         );
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3724      	adds	r7, #36	@ 0x24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
	...

08003dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003de0:	d301      	bcc.n	8003de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003de2:	2301      	movs	r3, #1
 8003de4:	e00f      	b.n	8003e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003de6:	4a0a      	ldr	r2, [pc, #40]	@ (8003e10 <SysTick_Config+0x40>)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003dee:	210f      	movs	r1, #15
 8003df0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003df4:	f7ff ff8e 	bl	8003d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003df8:	4b05      	ldr	r3, [pc, #20]	@ (8003e10 <SysTick_Config+0x40>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003dfe:	4b04      	ldr	r3, [pc, #16]	@ (8003e10 <SysTick_Config+0x40>)
 8003e00:	2207      	movs	r2, #7
 8003e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3708      	adds	r7, #8
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	e000e010 	.word	0xe000e010

08003e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f7ff fee7 	bl	8003bf0 <__NVIC_SetPriorityGrouping>
}
 8003e22:	bf00      	nop
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b086      	sub	sp, #24
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	4603      	mov	r3, r0
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	607a      	str	r2, [r7, #4]
 8003e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e3c:	f7ff fefc 	bl	8003c38 <__NVIC_GetPriorityGrouping>
 8003e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	68b9      	ldr	r1, [r7, #8]
 8003e46:	6978      	ldr	r0, [r7, #20]
 8003e48:	f7ff ff8e 	bl	8003d68 <NVIC_EncodePriority>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e52:	4611      	mov	r1, r2
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7ff ff5d 	bl	8003d14 <__NVIC_SetPriority>
}
 8003e5a:	bf00      	nop
 8003e5c:	3718      	adds	r7, #24
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}

08003e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e62:	b580      	push	{r7, lr}
 8003e64:	b082      	sub	sp, #8
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	4603      	mov	r3, r0
 8003e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff feef 	bl	8003c54 <__NVIC_EnableIRQ>
}
 8003e76:	bf00      	nop
 8003e78:	3708      	adds	r7, #8
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b082      	sub	sp, #8
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	4603      	mov	r3, r0
 8003e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7ff feff 	bl	8003c90 <__NVIC_DisableIRQ>
}
 8003e92:	bf00      	nop
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e9a:	b580      	push	{r7, lr}
 8003e9c:	b082      	sub	sp, #8
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7ff ff94 	bl	8003dd0 <SysTick_Config>
 8003ea8:	4603      	mov	r3, r0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b082      	sub	sp, #8
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	4603      	mov	r3, r0
 8003eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f7ff ff09 	bl	8003cd8 <__NVIC_ClearPendingIRQ>
}
 8003ec6:	bf00      	nop
 8003ec8:	3708      	adds	r7, #8
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b085      	sub	sp, #20
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 031f 	and.w	r3, r3, #31
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8003eea:	4a04      	ldr	r2, [pc, #16]	@ (8003efc <HAL_EXTI_ClearPending+0x2c>)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6153      	str	r3, [r2, #20]
}
 8003ef0:	bf00      	nop
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	40013c00 	.word	0x40013c00

08003f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b089      	sub	sp, #36	@ 0x24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f16:	2300      	movs	r3, #0
 8003f18:	61fb      	str	r3, [r7, #28]
 8003f1a:	e177      	b.n	800420c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	f040 8166 	bne.w	8004206 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d005      	beq.n	8003f52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d130      	bne.n	8003fb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	2203      	movs	r2, #3
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	43db      	mvns	r3, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4013      	ands	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f88:	2201      	movs	r2, #1
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	43db      	mvns	r3, r3
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	4013      	ands	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	091b      	lsrs	r3, r3, #4
 8003f9e:	f003 0201 	and.w	r2, r3, #1
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	2b03      	cmp	r3, #3
 8003fbe:	d017      	beq.n	8003ff0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	2203      	movs	r2, #3
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d123      	bne.n	8004044 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	08da      	lsrs	r2, r3, #3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3208      	adds	r2, #8
 8004004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004008:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	220f      	movs	r2, #15
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	43db      	mvns	r3, r3
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	4013      	ands	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4313      	orrs	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	08da      	lsrs	r2, r3, #3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3208      	adds	r2, #8
 800403e:	69b9      	ldr	r1, [r7, #24]
 8004040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	2203      	movs	r2, #3
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4013      	ands	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f003 0203 	and.w	r2, r3, #3
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4313      	orrs	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 80c0 	beq.w	8004206 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	4b66      	ldr	r3, [pc, #408]	@ (8004224 <HAL_GPIO_Init+0x324>)
 800408c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408e:	4a65      	ldr	r2, [pc, #404]	@ (8004224 <HAL_GPIO_Init+0x324>)
 8004090:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004094:	6453      	str	r3, [r2, #68]	@ 0x44
 8004096:	4b63      	ldr	r3, [pc, #396]	@ (8004224 <HAL_GPIO_Init+0x324>)
 8004098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040a2:	4a61      	ldr	r2, [pc, #388]	@ (8004228 <HAL_GPIO_Init+0x328>)
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	089b      	lsrs	r3, r3, #2
 80040a8:	3302      	adds	r3, #2
 80040aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	220f      	movs	r2, #15
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	43db      	mvns	r3, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4013      	ands	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a58      	ldr	r2, [pc, #352]	@ (800422c <HAL_GPIO_Init+0x32c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d037      	beq.n	800413e <HAL_GPIO_Init+0x23e>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a57      	ldr	r2, [pc, #348]	@ (8004230 <HAL_GPIO_Init+0x330>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d031      	beq.n	800413a <HAL_GPIO_Init+0x23a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a56      	ldr	r2, [pc, #344]	@ (8004234 <HAL_GPIO_Init+0x334>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d02b      	beq.n	8004136 <HAL_GPIO_Init+0x236>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a55      	ldr	r2, [pc, #340]	@ (8004238 <HAL_GPIO_Init+0x338>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d025      	beq.n	8004132 <HAL_GPIO_Init+0x232>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a54      	ldr	r2, [pc, #336]	@ (800423c <HAL_GPIO_Init+0x33c>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d01f      	beq.n	800412e <HAL_GPIO_Init+0x22e>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a53      	ldr	r2, [pc, #332]	@ (8004240 <HAL_GPIO_Init+0x340>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d019      	beq.n	800412a <HAL_GPIO_Init+0x22a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a52      	ldr	r2, [pc, #328]	@ (8004244 <HAL_GPIO_Init+0x344>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d013      	beq.n	8004126 <HAL_GPIO_Init+0x226>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a51      	ldr	r2, [pc, #324]	@ (8004248 <HAL_GPIO_Init+0x348>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00d      	beq.n	8004122 <HAL_GPIO_Init+0x222>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a50      	ldr	r2, [pc, #320]	@ (800424c <HAL_GPIO_Init+0x34c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d007      	beq.n	800411e <HAL_GPIO_Init+0x21e>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a4f      	ldr	r2, [pc, #316]	@ (8004250 <HAL_GPIO_Init+0x350>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d101      	bne.n	800411a <HAL_GPIO_Init+0x21a>
 8004116:	2309      	movs	r3, #9
 8004118:	e012      	b.n	8004140 <HAL_GPIO_Init+0x240>
 800411a:	230a      	movs	r3, #10
 800411c:	e010      	b.n	8004140 <HAL_GPIO_Init+0x240>
 800411e:	2308      	movs	r3, #8
 8004120:	e00e      	b.n	8004140 <HAL_GPIO_Init+0x240>
 8004122:	2307      	movs	r3, #7
 8004124:	e00c      	b.n	8004140 <HAL_GPIO_Init+0x240>
 8004126:	2306      	movs	r3, #6
 8004128:	e00a      	b.n	8004140 <HAL_GPIO_Init+0x240>
 800412a:	2305      	movs	r3, #5
 800412c:	e008      	b.n	8004140 <HAL_GPIO_Init+0x240>
 800412e:	2304      	movs	r3, #4
 8004130:	e006      	b.n	8004140 <HAL_GPIO_Init+0x240>
 8004132:	2303      	movs	r3, #3
 8004134:	e004      	b.n	8004140 <HAL_GPIO_Init+0x240>
 8004136:	2302      	movs	r3, #2
 8004138:	e002      	b.n	8004140 <HAL_GPIO_Init+0x240>
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <HAL_GPIO_Init+0x240>
 800413e:	2300      	movs	r3, #0
 8004140:	69fa      	ldr	r2, [r7, #28]
 8004142:	f002 0203 	and.w	r2, r2, #3
 8004146:	0092      	lsls	r2, r2, #2
 8004148:	4093      	lsls	r3, r2
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4313      	orrs	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004150:	4935      	ldr	r1, [pc, #212]	@ (8004228 <HAL_GPIO_Init+0x328>)
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	089b      	lsrs	r3, r3, #2
 8004156:	3302      	adds	r3, #2
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800415e:	4b3d      	ldr	r3, [pc, #244]	@ (8004254 <HAL_GPIO_Init+0x354>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	43db      	mvns	r3, r3
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	4013      	ands	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004182:	4a34      	ldr	r2, [pc, #208]	@ (8004254 <HAL_GPIO_Init+0x354>)
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004188:	4b32      	ldr	r3, [pc, #200]	@ (8004254 <HAL_GPIO_Init+0x354>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	43db      	mvns	r3, r3
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	4013      	ands	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041ac:	4a29      	ldr	r2, [pc, #164]	@ (8004254 <HAL_GPIO_Init+0x354>)
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041b2:	4b28      	ldr	r3, [pc, #160]	@ (8004254 <HAL_GPIO_Init+0x354>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	43db      	mvns	r3, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4013      	ands	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041d6:	4a1f      	ldr	r2, [pc, #124]	@ (8004254 <HAL_GPIO_Init+0x354>)
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004254 <HAL_GPIO_Init+0x354>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	43db      	mvns	r3, r3
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	4013      	ands	r3, r2
 80041ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004200:	4a14      	ldr	r2, [pc, #80]	@ (8004254 <HAL_GPIO_Init+0x354>)
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	3301      	adds	r3, #1
 800420a:	61fb      	str	r3, [r7, #28]
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	2b0f      	cmp	r3, #15
 8004210:	f67f ae84 	bls.w	8003f1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004214:	bf00      	nop
 8004216:	bf00      	nop
 8004218:	3724      	adds	r7, #36	@ 0x24
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40023800 	.word	0x40023800
 8004228:	40013800 	.word	0x40013800
 800422c:	40020000 	.word	0x40020000
 8004230:	40020400 	.word	0x40020400
 8004234:	40020800 	.word	0x40020800
 8004238:	40020c00 	.word	0x40020c00
 800423c:	40021000 	.word	0x40021000
 8004240:	40021400 	.word	0x40021400
 8004244:	40021800 	.word	0x40021800
 8004248:	40021c00 	.word	0x40021c00
 800424c:	40022000 	.word	0x40022000
 8004250:	40022400 	.word	0x40022400
 8004254:	40013c00 	.word	0x40013c00

08004258 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004258:	b480      	push	{r7}
 800425a:	b087      	sub	sp, #28
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004262:	2300      	movs	r3, #0
 8004264:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004266:	2300      	movs	r3, #0
 8004268:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800426a:	2300      	movs	r3, #0
 800426c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800426e:	2300      	movs	r3, #0
 8004270:	617b      	str	r3, [r7, #20]
 8004272:	e0d9      	b.n	8004428 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004274:	2201      	movs	r2, #1
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	4013      	ands	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	429a      	cmp	r2, r3
 800428c:	f040 80c9 	bne.w	8004422 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004290:	4a6b      	ldr	r2, [pc, #428]	@ (8004440 <HAL_GPIO_DeInit+0x1e8>)
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	089b      	lsrs	r3, r3, #2
 8004296:	3302      	adds	r3, #2
 8004298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800429c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f003 0303 	and.w	r3, r3, #3
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	220f      	movs	r2, #15
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	4013      	ands	r3, r2
 80042b0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a63      	ldr	r2, [pc, #396]	@ (8004444 <HAL_GPIO_DeInit+0x1ec>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d037      	beq.n	800432a <HAL_GPIO_DeInit+0xd2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a62      	ldr	r2, [pc, #392]	@ (8004448 <HAL_GPIO_DeInit+0x1f0>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d031      	beq.n	8004326 <HAL_GPIO_DeInit+0xce>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a61      	ldr	r2, [pc, #388]	@ (800444c <HAL_GPIO_DeInit+0x1f4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d02b      	beq.n	8004322 <HAL_GPIO_DeInit+0xca>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a60      	ldr	r2, [pc, #384]	@ (8004450 <HAL_GPIO_DeInit+0x1f8>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d025      	beq.n	800431e <HAL_GPIO_DeInit+0xc6>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a5f      	ldr	r2, [pc, #380]	@ (8004454 <HAL_GPIO_DeInit+0x1fc>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d01f      	beq.n	800431a <HAL_GPIO_DeInit+0xc2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a5e      	ldr	r2, [pc, #376]	@ (8004458 <HAL_GPIO_DeInit+0x200>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d019      	beq.n	8004316 <HAL_GPIO_DeInit+0xbe>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a5d      	ldr	r2, [pc, #372]	@ (800445c <HAL_GPIO_DeInit+0x204>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d013      	beq.n	8004312 <HAL_GPIO_DeInit+0xba>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a5c      	ldr	r2, [pc, #368]	@ (8004460 <HAL_GPIO_DeInit+0x208>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d00d      	beq.n	800430e <HAL_GPIO_DeInit+0xb6>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a5b      	ldr	r2, [pc, #364]	@ (8004464 <HAL_GPIO_DeInit+0x20c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d007      	beq.n	800430a <HAL_GPIO_DeInit+0xb2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a5a      	ldr	r2, [pc, #360]	@ (8004468 <HAL_GPIO_DeInit+0x210>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d101      	bne.n	8004306 <HAL_GPIO_DeInit+0xae>
 8004302:	2309      	movs	r3, #9
 8004304:	e012      	b.n	800432c <HAL_GPIO_DeInit+0xd4>
 8004306:	230a      	movs	r3, #10
 8004308:	e010      	b.n	800432c <HAL_GPIO_DeInit+0xd4>
 800430a:	2308      	movs	r3, #8
 800430c:	e00e      	b.n	800432c <HAL_GPIO_DeInit+0xd4>
 800430e:	2307      	movs	r3, #7
 8004310:	e00c      	b.n	800432c <HAL_GPIO_DeInit+0xd4>
 8004312:	2306      	movs	r3, #6
 8004314:	e00a      	b.n	800432c <HAL_GPIO_DeInit+0xd4>
 8004316:	2305      	movs	r3, #5
 8004318:	e008      	b.n	800432c <HAL_GPIO_DeInit+0xd4>
 800431a:	2304      	movs	r3, #4
 800431c:	e006      	b.n	800432c <HAL_GPIO_DeInit+0xd4>
 800431e:	2303      	movs	r3, #3
 8004320:	e004      	b.n	800432c <HAL_GPIO_DeInit+0xd4>
 8004322:	2302      	movs	r3, #2
 8004324:	e002      	b.n	800432c <HAL_GPIO_DeInit+0xd4>
 8004326:	2301      	movs	r3, #1
 8004328:	e000      	b.n	800432c <HAL_GPIO_DeInit+0xd4>
 800432a:	2300      	movs	r3, #0
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	f002 0203 	and.w	r2, r2, #3
 8004332:	0092      	lsls	r2, r2, #2
 8004334:	4093      	lsls	r3, r2
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	429a      	cmp	r2, r3
 800433a:	d132      	bne.n	80043a2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800433c:	4b4b      	ldr	r3, [pc, #300]	@ (800446c <HAL_GPIO_DeInit+0x214>)
 800433e:	681a      	ldr	r2, [r3, #0]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	43db      	mvns	r3, r3
 8004344:	4949      	ldr	r1, [pc, #292]	@ (800446c <HAL_GPIO_DeInit+0x214>)
 8004346:	4013      	ands	r3, r2
 8004348:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800434a:	4b48      	ldr	r3, [pc, #288]	@ (800446c <HAL_GPIO_DeInit+0x214>)
 800434c:	685a      	ldr	r2, [r3, #4]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	43db      	mvns	r3, r3
 8004352:	4946      	ldr	r1, [pc, #280]	@ (800446c <HAL_GPIO_DeInit+0x214>)
 8004354:	4013      	ands	r3, r2
 8004356:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004358:	4b44      	ldr	r3, [pc, #272]	@ (800446c <HAL_GPIO_DeInit+0x214>)
 800435a:	68da      	ldr	r2, [r3, #12]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	43db      	mvns	r3, r3
 8004360:	4942      	ldr	r1, [pc, #264]	@ (800446c <HAL_GPIO_DeInit+0x214>)
 8004362:	4013      	ands	r3, r2
 8004364:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004366:	4b41      	ldr	r3, [pc, #260]	@ (800446c <HAL_GPIO_DeInit+0x214>)
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	43db      	mvns	r3, r3
 800436e:	493f      	ldr	r1, [pc, #252]	@ (800446c <HAL_GPIO_DeInit+0x214>)
 8004370:	4013      	ands	r3, r2
 8004372:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	220f      	movs	r2, #15
 800437e:	fa02 f303 	lsl.w	r3, r2, r3
 8004382:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004384:	4a2e      	ldr	r2, [pc, #184]	@ (8004440 <HAL_GPIO_DeInit+0x1e8>)
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	089b      	lsrs	r3, r3, #2
 800438a:	3302      	adds	r3, #2
 800438c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	43da      	mvns	r2, r3
 8004394:	482a      	ldr	r0, [pc, #168]	@ (8004440 <HAL_GPIO_DeInit+0x1e8>)
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	089b      	lsrs	r3, r3, #2
 800439a:	400a      	ands	r2, r1
 800439c:	3302      	adds	r3, #2
 800439e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	005b      	lsls	r3, r3, #1
 80043aa:	2103      	movs	r1, #3
 80043ac:	fa01 f303 	lsl.w	r3, r1, r3
 80043b0:	43db      	mvns	r3, r3
 80043b2:	401a      	ands	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	08da      	lsrs	r2, r3, #3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	3208      	adds	r2, #8
 80043c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	220f      	movs	r2, #15
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	43db      	mvns	r3, r3
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	08d2      	lsrs	r2, r2, #3
 80043d8:	4019      	ands	r1, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	3208      	adds	r2, #8
 80043de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	2103      	movs	r1, #3
 80043ec:	fa01 f303 	lsl.w	r3, r1, r3
 80043f0:	43db      	mvns	r3, r3
 80043f2:	401a      	ands	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	2101      	movs	r1, #1
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	fa01 f303 	lsl.w	r3, r1, r3
 8004404:	43db      	mvns	r3, r3
 8004406:	401a      	ands	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	005b      	lsls	r3, r3, #1
 8004414:	2103      	movs	r1, #3
 8004416:	fa01 f303 	lsl.w	r3, r1, r3
 800441a:	43db      	mvns	r3, r3
 800441c:	401a      	ands	r2, r3
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	3301      	adds	r3, #1
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	2b0f      	cmp	r3, #15
 800442c:	f67f af22 	bls.w	8004274 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004430:	bf00      	nop
 8004432:	bf00      	nop
 8004434:	371c      	adds	r7, #28
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40013800 	.word	0x40013800
 8004444:	40020000 	.word	0x40020000
 8004448:	40020400 	.word	0x40020400
 800444c:	40020800 	.word	0x40020800
 8004450:	40020c00 	.word	0x40020c00
 8004454:	40021000 	.word	0x40021000
 8004458:	40021400 	.word	0x40021400
 800445c:	40021800 	.word	0x40021800
 8004460:	40021c00 	.word	0x40021c00
 8004464:	40022000 	.word	0x40022000
 8004468:	40022400 	.word	0x40022400
 800446c:	40013c00 	.word	0x40013c00

08004470 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	887b      	ldrh	r3, [r7, #2]
 8004482:	4013      	ands	r3, r2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004488:	2301      	movs	r3, #1
 800448a:	73fb      	strb	r3, [r7, #15]
 800448c:	e001      	b.n	8004492 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800448e:	2300      	movs	r3, #0
 8004490:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004492:	7bfb      	ldrb	r3, [r7, #15]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	460b      	mov	r3, r1
 80044aa:	807b      	strh	r3, [r7, #2]
 80044ac:	4613      	mov	r3, r2
 80044ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044b0:	787b      	ldrb	r3, [r7, #1]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044b6:	887a      	ldrh	r2, [r7, #2]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044bc:	e003      	b.n	80044c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044be:	887b      	ldrh	r3, [r7, #2]
 80044c0:	041a      	lsls	r2, r3, #16
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	619a      	str	r2, [r3, #24]
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr

080044d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b085      	sub	sp, #20
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	460b      	mov	r3, r1
 80044dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695b      	ldr	r3, [r3, #20]
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044e4:	887a      	ldrh	r2, [r7, #2]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4013      	ands	r3, r2
 80044ea:	041a      	lsls	r2, r3, #16
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	43d9      	mvns	r1, r3
 80044f0:	887b      	ldrh	r3, [r7, #2]
 80044f2:	400b      	ands	r3, r1
 80044f4:	431a      	orrs	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	619a      	str	r2, [r3, #24]
}
 80044fa:	bf00      	nop
 80044fc:	3714      	adds	r7, #20
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
	...

08004508 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	4603      	mov	r3, r0
 8004510:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004512:	4b08      	ldr	r3, [pc, #32]	@ (8004534 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004514:	695a      	ldr	r2, [r3, #20]
 8004516:	88fb      	ldrh	r3, [r7, #6]
 8004518:	4013      	ands	r3, r2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d006      	beq.n	800452c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800451e:	4a05      	ldr	r2, [pc, #20]	@ (8004534 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004520:	88fb      	ldrh	r3, [r7, #6]
 8004522:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004524:	88fb      	ldrh	r3, [r7, #6]
 8004526:	4618      	mov	r0, r3
 8004528:	f7fe fe7e 	bl	8003228 <HAL_GPIO_EXTI_Callback>
  }
}
 800452c:	bf00      	nop
 800452e:	3708      	adds	r7, #8
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40013c00 	.word	0x40013c00

08004538 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b084      	sub	sp, #16
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e12b      	b.n	80047a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7fe fc0c 	bl	8002d7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2224      	movs	r2, #36	@ 0x24
 8004568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0201 	bic.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800458a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800459a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800459c:	f001 ff82 	bl	80064a4 <HAL_RCC_GetPCLK1Freq>
 80045a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	4a81      	ldr	r2, [pc, #516]	@ (80047ac <HAL_I2C_Init+0x274>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d807      	bhi.n	80045bc <HAL_I2C_Init+0x84>
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	4a80      	ldr	r2, [pc, #512]	@ (80047b0 <HAL_I2C_Init+0x278>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	bf94      	ite	ls
 80045b4:	2301      	movls	r3, #1
 80045b6:	2300      	movhi	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	e006      	b.n	80045ca <HAL_I2C_Init+0x92>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4a7d      	ldr	r2, [pc, #500]	@ (80047b4 <HAL_I2C_Init+0x27c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	bf94      	ite	ls
 80045c4:	2301      	movls	r3, #1
 80045c6:	2300      	movhi	r3, #0
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e0e7      	b.n	80047a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	4a78      	ldr	r2, [pc, #480]	@ (80047b8 <HAL_I2C_Init+0x280>)
 80045d6:	fba2 2303 	umull	r2, r3, r2, r3
 80045da:	0c9b      	lsrs	r3, r3, #18
 80045dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68ba      	ldr	r2, [r7, #8]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6a1b      	ldr	r3, [r3, #32]
 80045f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	4a6a      	ldr	r2, [pc, #424]	@ (80047ac <HAL_I2C_Init+0x274>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d802      	bhi.n	800460c <HAL_I2C_Init+0xd4>
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	3301      	adds	r3, #1
 800460a:	e009      	b.n	8004620 <HAL_I2C_Init+0xe8>
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004612:	fb02 f303 	mul.w	r3, r2, r3
 8004616:	4a69      	ldr	r2, [pc, #420]	@ (80047bc <HAL_I2C_Init+0x284>)
 8004618:	fba2 2303 	umull	r2, r3, r2, r3
 800461c:	099b      	lsrs	r3, r3, #6
 800461e:	3301      	adds	r3, #1
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6812      	ldr	r2, [r2, #0]
 8004624:	430b      	orrs	r3, r1
 8004626:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004632:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	495c      	ldr	r1, [pc, #368]	@ (80047ac <HAL_I2C_Init+0x274>)
 800463c:	428b      	cmp	r3, r1
 800463e:	d819      	bhi.n	8004674 <HAL_I2C_Init+0x13c>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	1e59      	subs	r1, r3, #1
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	fbb1 f3f3 	udiv	r3, r1, r3
 800464e:	1c59      	adds	r1, r3, #1
 8004650:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004654:	400b      	ands	r3, r1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d00a      	beq.n	8004670 <HAL_I2C_Init+0x138>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	1e59      	subs	r1, r3, #1
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	fbb1 f3f3 	udiv	r3, r1, r3
 8004668:	3301      	adds	r3, #1
 800466a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800466e:	e051      	b.n	8004714 <HAL_I2C_Init+0x1dc>
 8004670:	2304      	movs	r3, #4
 8004672:	e04f      	b.n	8004714 <HAL_I2C_Init+0x1dc>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d111      	bne.n	80046a0 <HAL_I2C_Init+0x168>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	1e58      	subs	r0, r3, #1
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6859      	ldr	r1, [r3, #4]
 8004684:	460b      	mov	r3, r1
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	440b      	add	r3, r1
 800468a:	fbb0 f3f3 	udiv	r3, r0, r3
 800468e:	3301      	adds	r3, #1
 8004690:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004694:	2b00      	cmp	r3, #0
 8004696:	bf0c      	ite	eq
 8004698:	2301      	moveq	r3, #1
 800469a:	2300      	movne	r3, #0
 800469c:	b2db      	uxtb	r3, r3
 800469e:	e012      	b.n	80046c6 <HAL_I2C_Init+0x18e>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	1e58      	subs	r0, r3, #1
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6859      	ldr	r1, [r3, #4]
 80046a8:	460b      	mov	r3, r1
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	0099      	lsls	r1, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80046b6:	3301      	adds	r3, #1
 80046b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046bc:	2b00      	cmp	r3, #0
 80046be:	bf0c      	ite	eq
 80046c0:	2301      	moveq	r3, #1
 80046c2:	2300      	movne	r3, #0
 80046c4:	b2db      	uxtb	r3, r3
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <HAL_I2C_Init+0x196>
 80046ca:	2301      	movs	r3, #1
 80046cc:	e022      	b.n	8004714 <HAL_I2C_Init+0x1dc>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10e      	bne.n	80046f4 <HAL_I2C_Init+0x1bc>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	1e58      	subs	r0, r3, #1
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6859      	ldr	r1, [r3, #4]
 80046de:	460b      	mov	r3, r1
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	440b      	add	r3, r1
 80046e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80046e8:	3301      	adds	r3, #1
 80046ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046f2:	e00f      	b.n	8004714 <HAL_I2C_Init+0x1dc>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	1e58      	subs	r0, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6859      	ldr	r1, [r3, #4]
 80046fc:	460b      	mov	r3, r1
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	0099      	lsls	r1, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	fbb0 f3f3 	udiv	r3, r0, r3
 800470a:	3301      	adds	r3, #1
 800470c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004710:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	6809      	ldr	r1, [r1, #0]
 8004718:	4313      	orrs	r3, r2
 800471a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69da      	ldr	r2, [r3, #28]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a1b      	ldr	r3, [r3, #32]
 800472e:	431a      	orrs	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	430a      	orrs	r2, r1
 8004736:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004742:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6911      	ldr	r1, [r2, #16]
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	68d2      	ldr	r2, [r2, #12]
 800474e:	4311      	orrs	r1, r2
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6812      	ldr	r2, [r2, #0]
 8004754:	430b      	orrs	r3, r1
 8004756:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	695a      	ldr	r2, [r3, #20]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	430a      	orrs	r2, r1
 8004772:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f042 0201 	orr.w	r2, r2, #1
 8004782:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2220      	movs	r2, #32
 800478e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	000186a0 	.word	0x000186a0
 80047b0:	001e847f 	.word	0x001e847f
 80047b4:	003d08ff 	.word	0x003d08ff
 80047b8:	431bde83 	.word	0x431bde83
 80047bc:	10624dd3 	.word	0x10624dd3

080047c0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b088      	sub	sp, #32
 80047c4:	af02      	add	r7, sp, #8
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	4608      	mov	r0, r1
 80047ca:	4611      	mov	r1, r2
 80047cc:	461a      	mov	r2, r3
 80047ce:	4603      	mov	r3, r0
 80047d0:	817b      	strh	r3, [r7, #10]
 80047d2:	460b      	mov	r3, r1
 80047d4:	813b      	strh	r3, [r7, #8]
 80047d6:	4613      	mov	r3, r2
 80047d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047da:	f7ff f9d9 	bl	8003b90 <HAL_GetTick>
 80047de:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b20      	cmp	r3, #32
 80047ea:	f040 80d9 	bne.w	80049a0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	9300      	str	r3, [sp, #0]
 80047f2:	2319      	movs	r3, #25
 80047f4:	2201      	movs	r2, #1
 80047f6:	496d      	ldr	r1, [pc, #436]	@ (80049ac <HAL_I2C_Mem_Write+0x1ec>)
 80047f8:	68f8      	ldr	r0, [r7, #12]
 80047fa:	f000 fc8b 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004804:	2302      	movs	r3, #2
 8004806:	e0cc      	b.n	80049a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800480e:	2b01      	cmp	r3, #1
 8004810:	d101      	bne.n	8004816 <HAL_I2C_Mem_Write+0x56>
 8004812:	2302      	movs	r3, #2
 8004814:	e0c5      	b.n	80049a2 <HAL_I2C_Mem_Write+0x1e2>
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b01      	cmp	r3, #1
 800482a:	d007      	beq.n	800483c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0201 	orr.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800484a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2221      	movs	r2, #33	@ 0x21
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2240      	movs	r2, #64	@ 0x40
 8004858:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	6a3a      	ldr	r2, [r7, #32]
 8004866:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800486c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004872:	b29a      	uxth	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4a4d      	ldr	r2, [pc, #308]	@ (80049b0 <HAL_I2C_Mem_Write+0x1f0>)
 800487c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800487e:	88f8      	ldrh	r0, [r7, #6]
 8004880:	893a      	ldrh	r2, [r7, #8]
 8004882:	8979      	ldrh	r1, [r7, #10]
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488a:	9300      	str	r3, [sp, #0]
 800488c:	4603      	mov	r3, r0
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 fac2 	bl	8004e18 <I2C_RequestMemoryWrite>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d052      	beq.n	8004940 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	e081      	b.n	80049a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80048a2:	68f8      	ldr	r0, [r7, #12]
 80048a4:	f000 fd50 	bl	8005348 <I2C_WaitOnTXEFlagUntilTimeout>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00d      	beq.n	80048ca <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d107      	bne.n	80048c6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e06b      	b.n	80049a2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ce:	781a      	ldrb	r2, [r3, #0]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048da:	1c5a      	adds	r2, r3, #1
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048e4:	3b01      	subs	r3, #1
 80048e6:	b29a      	uxth	r2, r3
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	3b01      	subs	r3, #1
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b04      	cmp	r3, #4
 8004906:	d11b      	bne.n	8004940 <HAL_I2C_Mem_Write+0x180>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800490c:	2b00      	cmp	r3, #0
 800490e:	d017      	beq.n	8004940 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004914:	781a      	ldrb	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004920:	1c5a      	adds	r2, r3, #1
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800492a:	3b01      	subs	r3, #1
 800492c:	b29a      	uxth	r2, r3
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004936:	b29b      	uxth	r3, r3
 8004938:	3b01      	subs	r3, #1
 800493a:	b29a      	uxth	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004944:	2b00      	cmp	r3, #0
 8004946:	d1aa      	bne.n	800489e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f000 fd43 	bl	80053d8 <I2C_WaitOnBTFFlagUntilTimeout>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00d      	beq.n	8004974 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495c:	2b04      	cmp	r3, #4
 800495e:	d107      	bne.n	8004970 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800496e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e016      	b.n	80049a2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004982:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800499c:	2300      	movs	r3, #0
 800499e:	e000      	b.n	80049a2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80049a0:	2302      	movs	r3, #2
  }
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	00100002 	.word	0x00100002
 80049b0:	ffff0000 	.word	0xffff0000

080049b4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b08c      	sub	sp, #48	@ 0x30
 80049b8:	af02      	add	r7, sp, #8
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	4608      	mov	r0, r1
 80049be:	4611      	mov	r1, r2
 80049c0:	461a      	mov	r2, r3
 80049c2:	4603      	mov	r3, r0
 80049c4:	817b      	strh	r3, [r7, #10]
 80049c6:	460b      	mov	r3, r1
 80049c8:	813b      	strh	r3, [r7, #8]
 80049ca:	4613      	mov	r3, r2
 80049cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049ce:	f7ff f8df 	bl	8003b90 <HAL_GetTick>
 80049d2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b20      	cmp	r3, #32
 80049de:	f040 8214 	bne.w	8004e0a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	2319      	movs	r3, #25
 80049e8:	2201      	movs	r2, #1
 80049ea:	497b      	ldr	r1, [pc, #492]	@ (8004bd8 <HAL_I2C_Mem_Read+0x224>)
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 fb91 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d001      	beq.n	80049fc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80049f8:	2302      	movs	r3, #2
 80049fa:	e207      	b.n	8004e0c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d101      	bne.n	8004a0a <HAL_I2C_Mem_Read+0x56>
 8004a06:	2302      	movs	r3, #2
 8004a08:	e200      	b.n	8004e0c <HAL_I2C_Mem_Read+0x458>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d007      	beq.n	8004a30 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f042 0201 	orr.w	r2, r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a3e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2222      	movs	r2, #34	@ 0x22
 8004a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2240      	movs	r2, #64	@ 0x40
 8004a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a5a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004a60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4a5b      	ldr	r2, [pc, #364]	@ (8004bdc <HAL_I2C_Mem_Read+0x228>)
 8004a70:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a72:	88f8      	ldrh	r0, [r7, #6]
 8004a74:	893a      	ldrh	r2, [r7, #8]
 8004a76:	8979      	ldrh	r1, [r7, #10]
 8004a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7a:	9301      	str	r3, [sp, #4]
 8004a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	4603      	mov	r3, r0
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 fa5e 	bl	8004f44 <I2C_RequestMemoryRead>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e1bc      	b.n	8004e0c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d113      	bne.n	8004ac2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	623b      	str	r3, [r7, #32]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	695b      	ldr	r3, [r3, #20]
 8004aa4:	623b      	str	r3, [r7, #32]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	699b      	ldr	r3, [r3, #24]
 8004aac:	623b      	str	r3, [r7, #32]
 8004aae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	e190      	b.n	8004de4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d11b      	bne.n	8004b02 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ad8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ada:	2300      	movs	r3, #0
 8004adc:	61fb      	str	r3, [r7, #28]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	61fb      	str	r3, [r7, #28]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	61fb      	str	r3, [r7, #28]
 8004aee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004afe:	601a      	str	r2, [r3, #0]
 8004b00:	e170      	b.n	8004de4 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d11b      	bne.n	8004b42 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	61bb      	str	r3, [r7, #24]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	695b      	ldr	r3, [r3, #20]
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	61bb      	str	r3, [r7, #24]
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	e150      	b.n	8004de4 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b42:	2300      	movs	r3, #0
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	695b      	ldr	r3, [r3, #20]
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	617b      	str	r3, [r7, #20]
 8004b56:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004b58:	e144      	b.n	8004de4 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b5e:	2b03      	cmp	r3, #3
 8004b60:	f200 80f1 	bhi.w	8004d46 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d123      	bne.n	8004bb4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b6e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 fc79 	bl	8005468 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d001      	beq.n	8004b80 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e145      	b.n	8004e0c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691a      	ldr	r2, [r3, #16]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8a:	b2d2      	uxtb	r2, r2
 8004b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b92:	1c5a      	adds	r2, r3, #1
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	3b01      	subs	r3, #1
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004bb2:	e117      	b.n	8004de4 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d14e      	bne.n	8004c5a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	4906      	ldr	r1, [pc, #24]	@ (8004be0 <HAL_I2C_Mem_Read+0x22c>)
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 faa4 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d008      	beq.n	8004be4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e11a      	b.n	8004e0c <HAL_I2C_Mem_Read+0x458>
 8004bd6:	bf00      	nop
 8004bd8:	00100002 	.word	0x00100002
 8004bdc:	ffff0000 	.word	0xffff0000
 8004be0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bf2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691a      	ldr	r2, [r3, #16]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfe:	b2d2      	uxtb	r2, r2
 8004c00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c10:	3b01      	subs	r3, #1
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	691a      	ldr	r2, [r3, #16]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c30:	b2d2      	uxtb	r2, r2
 8004c32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c38:	1c5a      	adds	r2, r3, #1
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c42:	3b01      	subs	r3, #1
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c58:	e0c4      	b.n	8004de4 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c60:	2200      	movs	r2, #0
 8004c62:	496c      	ldr	r1, [pc, #432]	@ (8004e14 <HAL_I2C_Mem_Read+0x460>)
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f000 fa55 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e0cb      	b.n	8004e0c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691a      	ldr	r2, [r3, #16]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8e:	b2d2      	uxtb	r2, r2
 8004c90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c96:	1c5a      	adds	r2, r3, #1
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	b29a      	uxth	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	4955      	ldr	r1, [pc, #340]	@ (8004e14 <HAL_I2C_Mem_Read+0x460>)
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 fa27 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e09d      	b.n	8004e0c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cde:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	691a      	ldr	r2, [r3, #16]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	b29a      	uxth	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	691a      	ldr	r2, [r3, #16]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d24:	1c5a      	adds	r2, r3, #1
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d44:	e04e      	b.n	8004de4 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d48:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004d4a:	68f8      	ldr	r0, [r7, #12]
 8004d4c:	f000 fb8c 	bl	8005468 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e058      	b.n	8004e0c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	691a      	ldr	r2, [r3, #16]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d64:	b2d2      	uxtb	r2, r2
 8004d66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d76:	3b01      	subs	r3, #1
 8004d78:	b29a      	uxth	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	3b01      	subs	r3, #1
 8004d86:	b29a      	uxth	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	f003 0304 	and.w	r3, r3, #4
 8004d96:	2b04      	cmp	r3, #4
 8004d98:	d124      	bne.n	8004de4 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d107      	bne.n	8004db2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004db0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc4:	1c5a      	adds	r2, r3, #1
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	b29a      	uxth	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f47f aeb6 	bne.w	8004b5a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2220      	movs	r2, #32
 8004df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004e06:	2300      	movs	r3, #0
 8004e08:	e000      	b.n	8004e0c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004e0a:	2302      	movs	r3, #2
  }
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3728      	adds	r7, #40	@ 0x28
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	00010004 	.word	0x00010004

08004e18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af02      	add	r7, sp, #8
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	4608      	mov	r0, r1
 8004e22:	4611      	mov	r1, r2
 8004e24:	461a      	mov	r2, r3
 8004e26:	4603      	mov	r3, r0
 8004e28:	817b      	strh	r3, [r7, #10]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	813b      	strh	r3, [r7, #8]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e40:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f000 f960 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00d      	beq.n	8004e76 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e68:	d103      	bne.n	8004e72 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e70:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e05f      	b.n	8004f36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e76:	897b      	ldrh	r3, [r7, #10]
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e84:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e88:	6a3a      	ldr	r2, [r7, #32]
 8004e8a:	492d      	ldr	r1, [pc, #180]	@ (8004f40 <I2C_RequestMemoryWrite+0x128>)
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 f9bb 	bl	8005208 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d001      	beq.n	8004e9c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e04c      	b.n	8004f36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	617b      	str	r3, [r7, #20]
 8004eb0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eb4:	6a39      	ldr	r1, [r7, #32]
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 fa46 	bl	8005348 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00d      	beq.n	8004ede <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec6:	2b04      	cmp	r3, #4
 8004ec8:	d107      	bne.n	8004eda <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ed8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e02b      	b.n	8004f36 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ede:	88fb      	ldrh	r3, [r7, #6]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d105      	bne.n	8004ef0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ee4:	893b      	ldrh	r3, [r7, #8]
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	611a      	str	r2, [r3, #16]
 8004eee:	e021      	b.n	8004f34 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ef0:	893b      	ldrh	r3, [r7, #8]
 8004ef2:	0a1b      	lsrs	r3, r3, #8
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f00:	6a39      	ldr	r1, [r7, #32]
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f000 fa20 	bl	8005348 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00d      	beq.n	8004f2a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f12:	2b04      	cmp	r3, #4
 8004f14:	d107      	bne.n	8004f26 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f24:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e005      	b.n	8004f36 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f2a:	893b      	ldrh	r3, [r7, #8]
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	00010002 	.word	0x00010002

08004f44 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b088      	sub	sp, #32
 8004f48:	af02      	add	r7, sp, #8
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	4608      	mov	r0, r1
 8004f4e:	4611      	mov	r1, r2
 8004f50:	461a      	mov	r2, r3
 8004f52:	4603      	mov	r3, r0
 8004f54:	817b      	strh	r3, [r7, #10]
 8004f56:	460b      	mov	r3, r1
 8004f58:	813b      	strh	r3, [r7, #8]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f6c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f7c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	6a3b      	ldr	r3, [r7, #32]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f8a:	68f8      	ldr	r0, [r7, #12]
 8004f8c:	f000 f8c2 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d00d      	beq.n	8004fb2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fa0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004fa4:	d103      	bne.n	8004fae <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fac:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004fae:	2303      	movs	r3, #3
 8004fb0:	e0aa      	b.n	8005108 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004fb2:	897b      	ldrh	r3, [r7, #10]
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004fc0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc4:	6a3a      	ldr	r2, [r7, #32]
 8004fc6:	4952      	ldr	r1, [pc, #328]	@ (8005110 <I2C_RequestMemoryRead+0x1cc>)
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 f91d 	bl	8005208 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e097      	b.n	8005108 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fd8:	2300      	movs	r3, #0
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	617b      	str	r3, [r7, #20]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ff0:	6a39      	ldr	r1, [r7, #32]
 8004ff2:	68f8      	ldr	r0, [r7, #12]
 8004ff4:	f000 f9a8 	bl	8005348 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00d      	beq.n	800501a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005002:	2b04      	cmp	r3, #4
 8005004:	d107      	bne.n	8005016 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005014:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e076      	b.n	8005108 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800501a:	88fb      	ldrh	r3, [r7, #6]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d105      	bne.n	800502c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005020:	893b      	ldrh	r3, [r7, #8]
 8005022:	b2da      	uxtb	r2, r3
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	611a      	str	r2, [r3, #16]
 800502a:	e021      	b.n	8005070 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800502c:	893b      	ldrh	r3, [r7, #8]
 800502e:	0a1b      	lsrs	r3, r3, #8
 8005030:	b29b      	uxth	r3, r3
 8005032:	b2da      	uxtb	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800503a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800503c:	6a39      	ldr	r1, [r7, #32]
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 f982 	bl	8005348 <I2C_WaitOnTXEFlagUntilTimeout>
 8005044:	4603      	mov	r3, r0
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00d      	beq.n	8005066 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800504e:	2b04      	cmp	r3, #4
 8005050:	d107      	bne.n	8005062 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005060:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e050      	b.n	8005108 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005066:	893b      	ldrh	r3, [r7, #8]
 8005068:	b2da      	uxtb	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005070:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005072:	6a39      	ldr	r1, [r7, #32]
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 f967 	bl	8005348 <I2C_WaitOnTXEFlagUntilTimeout>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d00d      	beq.n	800509c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005084:	2b04      	cmp	r3, #4
 8005086:	d107      	bne.n	8005098 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005096:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e035      	b.n	8005108 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050aa:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ae:	9300      	str	r3, [sp, #0]
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 f82b 	bl	8005114 <I2C_WaitOnFlagUntilTimeout>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00d      	beq.n	80050e0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050d2:	d103      	bne.n	80050dc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80050dc:	2303      	movs	r3, #3
 80050de:	e013      	b.n	8005108 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80050e0:	897b      	ldrh	r3, [r7, #10]
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	f043 0301 	orr.w	r3, r3, #1
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f2:	6a3a      	ldr	r2, [r7, #32]
 80050f4:	4906      	ldr	r1, [pc, #24]	@ (8005110 <I2C_RequestMemoryRead+0x1cc>)
 80050f6:	68f8      	ldr	r0, [r7, #12]
 80050f8:	f000 f886 	bl	8005208 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050fc:	4603      	mov	r3, r0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d001      	beq.n	8005106 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e000      	b.n	8005108 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005106:	2300      	movs	r3, #0
}
 8005108:	4618      	mov	r0, r3
 800510a:	3718      	adds	r7, #24
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	00010002 	.word	0x00010002

08005114 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	60f8      	str	r0, [r7, #12]
 800511c:	60b9      	str	r1, [r7, #8]
 800511e:	603b      	str	r3, [r7, #0]
 8005120:	4613      	mov	r3, r2
 8005122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005124:	e048      	b.n	80051b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800512c:	d044      	beq.n	80051b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800512e:	f7fe fd2f 	bl	8003b90 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	683a      	ldr	r2, [r7, #0]
 800513a:	429a      	cmp	r2, r3
 800513c:	d302      	bcc.n	8005144 <I2C_WaitOnFlagUntilTimeout+0x30>
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d139      	bne.n	80051b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	0c1b      	lsrs	r3, r3, #16
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b01      	cmp	r3, #1
 800514c:	d10d      	bne.n	800516a <I2C_WaitOnFlagUntilTimeout+0x56>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	43da      	mvns	r2, r3
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	4013      	ands	r3, r2
 800515a:	b29b      	uxth	r3, r3
 800515c:	2b00      	cmp	r3, #0
 800515e:	bf0c      	ite	eq
 8005160:	2301      	moveq	r3, #1
 8005162:	2300      	movne	r3, #0
 8005164:	b2db      	uxtb	r3, r3
 8005166:	461a      	mov	r2, r3
 8005168:	e00c      	b.n	8005184 <I2C_WaitOnFlagUntilTimeout+0x70>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	699b      	ldr	r3, [r3, #24]
 8005170:	43da      	mvns	r2, r3
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	4013      	ands	r3, r2
 8005176:	b29b      	uxth	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	bf0c      	ite	eq
 800517c:	2301      	moveq	r3, #1
 800517e:	2300      	movne	r3, #0
 8005180:	b2db      	uxtb	r3, r3
 8005182:	461a      	mov	r2, r3
 8005184:	79fb      	ldrb	r3, [r7, #7]
 8005186:	429a      	cmp	r2, r3
 8005188:	d116      	bne.n	80051b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051a4:	f043 0220 	orr.w	r2, r3, #32
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e023      	b.n	8005200 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	0c1b      	lsrs	r3, r3, #16
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d10d      	bne.n	80051de <I2C_WaitOnFlagUntilTimeout+0xca>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	695b      	ldr	r3, [r3, #20]
 80051c8:	43da      	mvns	r2, r3
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	4013      	ands	r3, r2
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	bf0c      	ite	eq
 80051d4:	2301      	moveq	r3, #1
 80051d6:	2300      	movne	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	461a      	mov	r2, r3
 80051dc:	e00c      	b.n	80051f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	43da      	mvns	r2, r3
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	4013      	ands	r3, r2
 80051ea:	b29b      	uxth	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	bf0c      	ite	eq
 80051f0:	2301      	moveq	r3, #1
 80051f2:	2300      	movne	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	461a      	mov	r2, r3
 80051f8:	79fb      	ldrb	r3, [r7, #7]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d093      	beq.n	8005126 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	4618      	mov	r0, r3
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005216:	e071      	b.n	80052fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005226:	d123      	bne.n	8005270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005236:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005240:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2220      	movs	r2, #32
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525c:	f043 0204 	orr.w	r2, r3, #4
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e067      	b.n	8005340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005276:	d041      	beq.n	80052fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005278:	f7fe fc8a 	bl	8003b90 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	429a      	cmp	r2, r3
 8005286:	d302      	bcc.n	800528e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d136      	bne.n	80052fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	0c1b      	lsrs	r3, r3, #16
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b01      	cmp	r3, #1
 8005296:	d10c      	bne.n	80052b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	43da      	mvns	r2, r3
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	4013      	ands	r3, r2
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	bf14      	ite	ne
 80052aa:	2301      	movne	r3, #1
 80052ac:	2300      	moveq	r3, #0
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	e00b      	b.n	80052ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	43da      	mvns	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	4013      	ands	r3, r2
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	bf14      	ite	ne
 80052c4:	2301      	movne	r3, #1
 80052c6:	2300      	moveq	r3, #0
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d016      	beq.n	80052fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e8:	f043 0220 	orr.w	r2, r3, #32
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e021      	b.n	8005340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	0c1b      	lsrs	r3, r3, #16
 8005300:	b2db      	uxtb	r3, r3
 8005302:	2b01      	cmp	r3, #1
 8005304:	d10c      	bne.n	8005320 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	695b      	ldr	r3, [r3, #20]
 800530c:	43da      	mvns	r2, r3
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	4013      	ands	r3, r2
 8005312:	b29b      	uxth	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	bf14      	ite	ne
 8005318:	2301      	movne	r3, #1
 800531a:	2300      	moveq	r3, #0
 800531c:	b2db      	uxtb	r3, r3
 800531e:	e00b      	b.n	8005338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	43da      	mvns	r2, r3
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4013      	ands	r3, r2
 800532c:	b29b      	uxth	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	bf14      	ite	ne
 8005332:	2301      	movne	r3, #1
 8005334:	2300      	moveq	r3, #0
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b00      	cmp	r3, #0
 800533a:	f47f af6d 	bne.w	8005218 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005354:	e034      	b.n	80053c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005356:	68f8      	ldr	r0, [r7, #12]
 8005358:	f000 f8e3 	bl	8005522 <I2C_IsAcknowledgeFailed>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e034      	b.n	80053d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800536c:	d028      	beq.n	80053c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800536e:	f7fe fc0f 	bl	8003b90 <HAL_GetTick>
 8005372:	4602      	mov	r2, r0
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	1ad3      	subs	r3, r2, r3
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	429a      	cmp	r2, r3
 800537c:	d302      	bcc.n	8005384 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d11d      	bne.n	80053c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800538e:	2b80      	cmp	r3, #128	@ 0x80
 8005390:	d016      	beq.n	80053c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2220      	movs	r2, #32
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ac:	f043 0220 	orr.w	r2, r3, #32
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e007      	b.n	80053d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053ca:	2b80      	cmp	r3, #128	@ 0x80
 80053cc:	d1c3      	bne.n	8005356 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3710      	adds	r7, #16
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b084      	sub	sp, #16
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053e4:	e034      	b.n	8005450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053e6:	68f8      	ldr	r0, [r7, #12]
 80053e8:	f000 f89b 	bl	8005522 <I2C_IsAcknowledgeFailed>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d001      	beq.n	80053f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e034      	b.n	8005460 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053fc:	d028      	beq.n	8005450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053fe:	f7fe fbc7 	bl	8003b90 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	429a      	cmp	r2, r3
 800540c:	d302      	bcc.n	8005414 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d11d      	bne.n	8005450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695b      	ldr	r3, [r3, #20]
 800541a:	f003 0304 	and.w	r3, r3, #4
 800541e:	2b04      	cmp	r3, #4
 8005420:	d016      	beq.n	8005450 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2200      	movs	r2, #0
 8005426:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2220      	movs	r2, #32
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543c:	f043 0220 	orr.w	r2, r3, #32
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e007      	b.n	8005460 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	f003 0304 	and.w	r3, r3, #4
 800545a:	2b04      	cmp	r3, #4
 800545c:	d1c3      	bne.n	80053e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005474:	e049      	b.n	800550a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	f003 0310 	and.w	r3, r3, #16
 8005480:	2b10      	cmp	r3, #16
 8005482:	d119      	bne.n	80054b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f06f 0210 	mvn.w	r2, #16
 800548c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2200      	movs	r2, #0
 8005492:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2220      	movs	r2, #32
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e030      	b.n	800551a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b8:	f7fe fb6a 	bl	8003b90 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	68ba      	ldr	r2, [r7, #8]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d302      	bcc.n	80054ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d11d      	bne.n	800550a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d8:	2b40      	cmp	r3, #64	@ 0x40
 80054da:	d016      	beq.n	800550a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2200      	movs	r2, #0
 80054e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2220      	movs	r2, #32
 80054e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054f6:	f043 0220 	orr.w	r2, r3, #32
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e007      	b.n	800551a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	695b      	ldr	r3, [r3, #20]
 8005510:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005514:	2b40      	cmp	r3, #64	@ 0x40
 8005516:	d1ae      	bne.n	8005476 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3710      	adds	r7, #16
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005522:	b480      	push	{r7}
 8005524:	b083      	sub	sp, #12
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005538:	d11b      	bne.n	8005572 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005542:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2220      	movs	r2, #32
 800554e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555e:	f043 0204 	orr.w	r2, r3, #4
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e000      	b.n	8005574 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b20      	cmp	r3, #32
 8005594:	d129      	bne.n	80055ea <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2224      	movs	r2, #36	@ 0x24
 800559a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0201 	bic.w	r2, r2, #1
 80055ac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f022 0210 	bic.w	r2, r2, #16
 80055bc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f042 0201 	orr.w	r2, r2, #1
 80055dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2220      	movs	r2, #32
 80055e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80055e6:	2300      	movs	r3, #0
 80055e8:	e000      	b.n	80055ec <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80055ea:	2302      	movs	r3, #2
  }
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005602:	2300      	movs	r3, #0
 8005604:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b20      	cmp	r3, #32
 8005610:	d12a      	bne.n	8005668 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2224      	movs	r2, #36	@ 0x24
 8005616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f022 0201 	bic.w	r2, r2, #1
 8005628:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005630:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005632:	89fb      	ldrh	r3, [r7, #14]
 8005634:	f023 030f 	bic.w	r3, r3, #15
 8005638:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	b29a      	uxth	r2, r3
 800563e:	89fb      	ldrh	r3, [r7, #14]
 8005640:	4313      	orrs	r3, r2
 8005642:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	89fa      	ldrh	r2, [r7, #14]
 800564a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f042 0201 	orr.w	r2, r2, #1
 800565a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2220      	movs	r2, #32
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005664:	2300      	movs	r3, #0
 8005666:	e000      	b.n	800566a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005668:	2302      	movs	r3, #2
  }
}
 800566a:	4618      	mov	r0, r3
 800566c:	3714      	adds	r7, #20
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
	...

08005678 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b084      	sub	sp, #16
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d101      	bne.n	800568a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e0bf      	b.n	800580a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d106      	bne.n	80056a4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7fd fbd6 	bl	8002e50 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2202      	movs	r2, #2
 80056a8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	699a      	ldr	r2, [r3, #24]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80056ba:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6999      	ldr	r1, [r3, #24]
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80056d0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6899      	ldr	r1, [r3, #8]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	4b4a      	ldr	r3, [pc, #296]	@ (8005814 <HAL_LTDC_Init+0x19c>)
 80056ec:	400b      	ands	r3, r1
 80056ee:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	041b      	lsls	r3, r3, #16
 80056f6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6899      	ldr	r1, [r3, #8]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699a      	ldr	r2, [r3, #24]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	431a      	orrs	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68d9      	ldr	r1, [r3, #12]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	4b3e      	ldr	r3, [pc, #248]	@ (8005814 <HAL_LTDC_Init+0x19c>)
 800571a:	400b      	ands	r3, r1
 800571c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	041b      	lsls	r3, r3, #16
 8005724:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68d9      	ldr	r1, [r3, #12]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a1a      	ldr	r2, [r3, #32]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6919      	ldr	r1, [r3, #16]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	4b33      	ldr	r3, [pc, #204]	@ (8005814 <HAL_LTDC_Init+0x19c>)
 8005748:	400b      	ands	r3, r1
 800574a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005750:	041b      	lsls	r3, r3, #16
 8005752:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6919      	ldr	r1, [r3, #16]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	431a      	orrs	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	6959      	ldr	r1, [r3, #20]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	4b27      	ldr	r3, [pc, #156]	@ (8005814 <HAL_LTDC_Init+0x19c>)
 8005776:	400b      	ands	r3, r1
 8005778:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800577e:	041b      	lsls	r3, r3, #16
 8005780:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	6959      	ldr	r1, [r3, #20]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	431a      	orrs	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	430a      	orrs	r2, r1
 8005796:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800579e:	021b      	lsls	r3, r3, #8
 80057a0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80057a8:	041b      	lsls	r3, r3, #16
 80057aa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80057ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80057ce:	431a      	orrs	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f042 0206 	orr.w	r2, r2, #6
 80057e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699a      	ldr	r2, [r3, #24]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f042 0201 	orr.w	r2, r2, #1
 80057f6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	f000f800 	.word	0xf000f800

08005818 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005818:	b5b0      	push	{r4, r5, r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800582a:	2b01      	cmp	r3, #1
 800582c:	d101      	bne.n	8005832 <HAL_LTDC_ConfigLayer+0x1a>
 800582e:	2302      	movs	r3, #2
 8005830:	e02c      	b.n	800588c <HAL_LTDC_ConfigLayer+0x74>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2202      	movs	r2, #2
 800583e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2134      	movs	r1, #52	@ 0x34
 8005848:	fb01 f303 	mul.w	r3, r1, r3
 800584c:	4413      	add	r3, r2
 800584e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	4614      	mov	r4, r2
 8005856:	461d      	mov	r5, r3
 8005858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800585a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800585c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800585e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005860:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005864:	682b      	ldr	r3, [r5, #0]
 8005866:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	68b9      	ldr	r1, [r7, #8]
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 f811 	bl	8005894 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2201      	movs	r2, #1
 8005878:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2201      	movs	r2, #1
 800587e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bdb0      	pop	{r4, r5, r7, pc}

08005894 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005894:	b480      	push	{r7}
 8005896:	b089      	sub	sp, #36	@ 0x24
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	685a      	ldr	r2, [r3, #4]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	0c1b      	lsrs	r3, r3, #16
 80058ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058b0:	4413      	add	r3, r2
 80058b2:	041b      	lsls	r3, r3, #16
 80058b4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	01db      	lsls	r3, r3, #7
 80058c0:	4413      	add	r3, r2
 80058c2:	3384      	adds	r3, #132	@ 0x84
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	6812      	ldr	r2, [r2, #0]
 80058ca:	4611      	mov	r1, r2
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	01d2      	lsls	r2, r2, #7
 80058d0:	440a      	add	r2, r1
 80058d2:	3284      	adds	r2, #132	@ 0x84
 80058d4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80058d8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	0c1b      	lsrs	r3, r3, #16
 80058e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80058ea:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80058ec:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4619      	mov	r1, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	01db      	lsls	r3, r3, #7
 80058f8:	440b      	add	r3, r1
 80058fa:	3384      	adds	r3, #132	@ 0x84
 80058fc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005902:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	68da      	ldr	r2, [r3, #12]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005912:	4413      	add	r3, r2
 8005914:	041b      	lsls	r3, r3, #16
 8005916:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	461a      	mov	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	01db      	lsls	r3, r3, #7
 8005922:	4413      	add	r3, r2
 8005924:	3384      	adds	r3, #132	@ 0x84
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	6812      	ldr	r2, [r2, #0]
 800592c:	4611      	mov	r1, r2
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	01d2      	lsls	r2, r2, #7
 8005932:	440a      	add	r2, r1
 8005934:	3284      	adds	r2, #132	@ 0x84
 8005936:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800593a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800594a:	4413      	add	r3, r2
 800594c:	1c5a      	adds	r2, r3, #1
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4619      	mov	r1, r3
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	01db      	lsls	r3, r3, #7
 8005958:	440b      	add	r3, r1
 800595a:	3384      	adds	r3, #132	@ 0x84
 800595c:	4619      	mov	r1, r3
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	4313      	orrs	r3, r2
 8005962:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	461a      	mov	r2, r3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	01db      	lsls	r3, r3, #7
 800596e:	4413      	add	r3, r2
 8005970:	3384      	adds	r3, #132	@ 0x84
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	6812      	ldr	r2, [r2, #0]
 8005978:	4611      	mov	r1, r2
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	01d2      	lsls	r2, r2, #7
 800597e:	440a      	add	r2, r1
 8005980:	3284      	adds	r2, #132	@ 0x84
 8005982:	f023 0307 	bic.w	r3, r3, #7
 8005986:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	461a      	mov	r2, r3
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	01db      	lsls	r3, r3, #7
 8005992:	4413      	add	r3, r2
 8005994:	3384      	adds	r3, #132	@ 0x84
 8005996:	461a      	mov	r2, r3
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80059a4:	021b      	lsls	r3, r3, #8
 80059a6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80059ae:	041b      	lsls	r3, r3, #16
 80059b0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	699b      	ldr	r3, [r3, #24]
 80059b6:	061b      	lsls	r3, r3, #24
 80059b8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	461a      	mov	r2, r3
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	01db      	lsls	r3, r3, #7
 80059c4:	4413      	add	r3, r2
 80059c6:	3384      	adds	r3, #132	@ 0x84
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	461a      	mov	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	01db      	lsls	r3, r3, #7
 80059d4:	4413      	add	r3, r2
 80059d6:	3384      	adds	r3, #132	@ 0x84
 80059d8:	461a      	mov	r2, r3
 80059da:	2300      	movs	r3, #0
 80059dc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80059e4:	461a      	mov	r2, r3
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	431a      	orrs	r2, r3
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	431a      	orrs	r2, r3
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	4619      	mov	r1, r3
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	01db      	lsls	r3, r3, #7
 80059f8:	440b      	add	r3, r1
 80059fa:	3384      	adds	r3, #132	@ 0x84
 80059fc:	4619      	mov	r1, r3
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	461a      	mov	r2, r3
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	01db      	lsls	r3, r3, #7
 8005a0e:	4413      	add	r3, r2
 8005a10:	3384      	adds	r3, #132	@ 0x84
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	6812      	ldr	r2, [r2, #0]
 8005a18:	4611      	mov	r1, r2
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	01d2      	lsls	r2, r2, #7
 8005a1e:	440a      	add	r2, r1
 8005a20:	3284      	adds	r2, #132	@ 0x84
 8005a22:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005a26:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	01db      	lsls	r3, r3, #7
 8005a32:	4413      	add	r3, r2
 8005a34:	3384      	adds	r3, #132	@ 0x84
 8005a36:	461a      	mov	r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	461a      	mov	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	01db      	lsls	r3, r3, #7
 8005a48:	4413      	add	r3, r2
 8005a4a:	3384      	adds	r3, #132	@ 0x84
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	68fa      	ldr	r2, [r7, #12]
 8005a50:	6812      	ldr	r2, [r2, #0]
 8005a52:	4611      	mov	r1, r2
 8005a54:	687a      	ldr	r2, [r7, #4]
 8005a56:	01d2      	lsls	r2, r2, #7
 8005a58:	440a      	add	r2, r1
 8005a5a:	3284      	adds	r2, #132	@ 0x84
 8005a5c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005a60:	f023 0307 	bic.w	r3, r3, #7
 8005a64:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	69da      	ldr	r2, [r3, #28]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	6a1b      	ldr	r3, [r3, #32]
 8005a6e:	68f9      	ldr	r1, [r7, #12]
 8005a70:	6809      	ldr	r1, [r1, #0]
 8005a72:	4608      	mov	r0, r1
 8005a74:	6879      	ldr	r1, [r7, #4]
 8005a76:	01c9      	lsls	r1, r1, #7
 8005a78:	4401      	add	r1, r0
 8005a7a:	3184      	adds	r1, #132	@ 0x84
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	461a      	mov	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	01db      	lsls	r3, r3, #7
 8005a8a:	4413      	add	r3, r2
 8005a8c:	3384      	adds	r3, #132	@ 0x84
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	461a      	mov	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	01db      	lsls	r3, r3, #7
 8005a9a:	4413      	add	r3, r2
 8005a9c:	3384      	adds	r3, #132	@ 0x84
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	01db      	lsls	r3, r3, #7
 8005aae:	4413      	add	r3, r2
 8005ab0:	3384      	adds	r3, #132	@ 0x84
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d102      	bne.n	8005ac8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005ac2:	2304      	movs	r3, #4
 8005ac4:	61fb      	str	r3, [r7, #28]
 8005ac6:	e01b      	b.n	8005b00 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d102      	bne.n	8005ad6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	61fb      	str	r3, [r7, #28]
 8005ad4:	e014      	b.n	8005b00 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d00b      	beq.n	8005af6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d007      	beq.n	8005af6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d003      	beq.n	8005af6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005af2:	2b07      	cmp	r3, #7
 8005af4:	d102      	bne.n	8005afc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005af6:	2302      	movs	r3, #2
 8005af8:	61fb      	str	r3, [r7, #28]
 8005afa:	e001      	b.n	8005b00 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005afc:	2301      	movs	r3, #1
 8005afe:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	461a      	mov	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	01db      	lsls	r3, r3, #7
 8005b0a:	4413      	add	r3, r2
 8005b0c:	3384      	adds	r3, #132	@ 0x84
 8005b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	6812      	ldr	r2, [r2, #0]
 8005b14:	4611      	mov	r1, r2
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	01d2      	lsls	r2, r2, #7
 8005b1a:	440a      	add	r2, r1
 8005b1c:	3284      	adds	r2, #132	@ 0x84
 8005b1e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005b22:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b28:	69fa      	ldr	r2, [r7, #28]
 8005b2a:	fb02 f303 	mul.w	r3, r2, r3
 8005b2e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	6859      	ldr	r1, [r3, #4]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	1acb      	subs	r3, r1, r3
 8005b3a:	69f9      	ldr	r1, [r7, #28]
 8005b3c:	fb01 f303 	mul.w	r3, r1, r3
 8005b40:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005b42:	68f9      	ldr	r1, [r7, #12]
 8005b44:	6809      	ldr	r1, [r1, #0]
 8005b46:	4608      	mov	r0, r1
 8005b48:	6879      	ldr	r1, [r7, #4]
 8005b4a:	01c9      	lsls	r1, r1, #7
 8005b4c:	4401      	add	r1, r0
 8005b4e:	3184      	adds	r1, #132	@ 0x84
 8005b50:	4313      	orrs	r3, r2
 8005b52:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	461a      	mov	r2, r3
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	01db      	lsls	r3, r3, #7
 8005b5e:	4413      	add	r3, r2
 8005b60:	3384      	adds	r3, #132	@ 0x84
 8005b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	6812      	ldr	r2, [r2, #0]
 8005b68:	4611      	mov	r1, r2
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	01d2      	lsls	r2, r2, #7
 8005b6e:	440a      	add	r2, r1
 8005b70:	3284      	adds	r2, #132	@ 0x84
 8005b72:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005b76:	f023 0307 	bic.w	r3, r3, #7
 8005b7a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	461a      	mov	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	01db      	lsls	r3, r3, #7
 8005b86:	4413      	add	r3, r2
 8005b88:	3384      	adds	r3, #132	@ 0x84
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b90:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	01db      	lsls	r3, r3, #7
 8005b9c:	4413      	add	r3, r2
 8005b9e:	3384      	adds	r3, #132	@ 0x84
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	6812      	ldr	r2, [r2, #0]
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	01d2      	lsls	r2, r2, #7
 8005bac:	440a      	add	r2, r1
 8005bae:	3284      	adds	r2, #132	@ 0x84
 8005bb0:	f043 0301 	orr.w	r3, r3, #1
 8005bb4:	6013      	str	r3, [r2, #0]
}
 8005bb6:	bf00      	nop
 8005bb8:	3724      	adds	r7, #36	@ 0x24
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
	...

08005bc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e267      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d075      	beq.n	8005cce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005be2:	4b88      	ldr	r3, [pc, #544]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	f003 030c 	and.w	r3, r3, #12
 8005bea:	2b04      	cmp	r3, #4
 8005bec:	d00c      	beq.n	8005c08 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bee:	4b85      	ldr	r3, [pc, #532]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005bf6:	2b08      	cmp	r3, #8
 8005bf8:	d112      	bne.n	8005c20 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bfa:	4b82      	ldr	r3, [pc, #520]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c06:	d10b      	bne.n	8005c20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c08:	4b7e      	ldr	r3, [pc, #504]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d05b      	beq.n	8005ccc <HAL_RCC_OscConfig+0x108>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d157      	bne.n	8005ccc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e242      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c28:	d106      	bne.n	8005c38 <HAL_RCC_OscConfig+0x74>
 8005c2a:	4b76      	ldr	r3, [pc, #472]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a75      	ldr	r2, [pc, #468]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	e01d      	b.n	8005c74 <HAL_RCC_OscConfig+0xb0>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c40:	d10c      	bne.n	8005c5c <HAL_RCC_OscConfig+0x98>
 8005c42:	4b70      	ldr	r3, [pc, #448]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a6f      	ldr	r2, [pc, #444]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005c48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c4c:	6013      	str	r3, [r2, #0]
 8005c4e:	4b6d      	ldr	r3, [pc, #436]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a6c      	ldr	r2, [pc, #432]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005c54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c58:	6013      	str	r3, [r2, #0]
 8005c5a:	e00b      	b.n	8005c74 <HAL_RCC_OscConfig+0xb0>
 8005c5c:	4b69      	ldr	r3, [pc, #420]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a68      	ldr	r2, [pc, #416]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005c62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c66:	6013      	str	r3, [r2, #0]
 8005c68:	4b66      	ldr	r3, [pc, #408]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a65      	ldr	r2, [pc, #404]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005c6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d013      	beq.n	8005ca4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c7c:	f7fd ff88 	bl	8003b90 <HAL_GetTick>
 8005c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c82:	e008      	b.n	8005c96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c84:	f7fd ff84 	bl	8003b90 <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	2b64      	cmp	r3, #100	@ 0x64
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e207      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c96:	4b5b      	ldr	r3, [pc, #364]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d0f0      	beq.n	8005c84 <HAL_RCC_OscConfig+0xc0>
 8005ca2:	e014      	b.n	8005cce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ca4:	f7fd ff74 	bl	8003b90 <HAL_GetTick>
 8005ca8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005caa:	e008      	b.n	8005cbe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cac:	f7fd ff70 	bl	8003b90 <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	2b64      	cmp	r3, #100	@ 0x64
 8005cb8:	d901      	bls.n	8005cbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cba:	2303      	movs	r3, #3
 8005cbc:	e1f3      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cbe:	4b51      	ldr	r3, [pc, #324]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1f0      	bne.n	8005cac <HAL_RCC_OscConfig+0xe8>
 8005cca:	e000      	b.n	8005cce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ccc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d063      	beq.n	8005da2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005cda:	4b4a      	ldr	r3, [pc, #296]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 030c 	and.w	r3, r3, #12
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00b      	beq.n	8005cfe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ce6:	4b47      	ldr	r3, [pc, #284]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005cee:	2b08      	cmp	r3, #8
 8005cf0:	d11c      	bne.n	8005d2c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cf2:	4b44      	ldr	r3, [pc, #272]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d116      	bne.n	8005d2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cfe:	4b41      	ldr	r3, [pc, #260]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d005      	beq.n	8005d16 <HAL_RCC_OscConfig+0x152>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d001      	beq.n	8005d16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e1c7      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d16:	4b3b      	ldr	r3, [pc, #236]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	691b      	ldr	r3, [r3, #16]
 8005d22:	00db      	lsls	r3, r3, #3
 8005d24:	4937      	ldr	r1, [pc, #220]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d2a:	e03a      	b.n	8005da2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d020      	beq.n	8005d76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d34:	4b34      	ldr	r3, [pc, #208]	@ (8005e08 <HAL_RCC_OscConfig+0x244>)
 8005d36:	2201      	movs	r2, #1
 8005d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d3a:	f7fd ff29 	bl	8003b90 <HAL_GetTick>
 8005d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d40:	e008      	b.n	8005d54 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d42:	f7fd ff25 	bl	8003b90 <HAL_GetTick>
 8005d46:	4602      	mov	r2, r0
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	1ad3      	subs	r3, r2, r3
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	d901      	bls.n	8005d54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e1a8      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d54:	4b2b      	ldr	r3, [pc, #172]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0302 	and.w	r3, r3, #2
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d0f0      	beq.n	8005d42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d60:	4b28      	ldr	r3, [pc, #160]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	4925      	ldr	r1, [pc, #148]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	600b      	str	r3, [r1, #0]
 8005d74:	e015      	b.n	8005da2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d76:	4b24      	ldr	r3, [pc, #144]	@ (8005e08 <HAL_RCC_OscConfig+0x244>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d7c:	f7fd ff08 	bl	8003b90 <HAL_GetTick>
 8005d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d82:	e008      	b.n	8005d96 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d84:	f7fd ff04 	bl	8003b90 <HAL_GetTick>
 8005d88:	4602      	mov	r2, r0
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	1ad3      	subs	r3, r2, r3
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d901      	bls.n	8005d96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d92:	2303      	movs	r3, #3
 8005d94:	e187      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d96:	4b1b      	ldr	r3, [pc, #108]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1f0      	bne.n	8005d84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0308 	and.w	r3, r3, #8
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d036      	beq.n	8005e1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d016      	beq.n	8005de4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005db6:	4b15      	ldr	r3, [pc, #84]	@ (8005e0c <HAL_RCC_OscConfig+0x248>)
 8005db8:	2201      	movs	r2, #1
 8005dba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dbc:	f7fd fee8 	bl	8003b90 <HAL_GetTick>
 8005dc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dc2:	e008      	b.n	8005dd6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dc4:	f7fd fee4 	bl	8003b90 <HAL_GetTick>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	693b      	ldr	r3, [r7, #16]
 8005dcc:	1ad3      	subs	r3, r2, r3
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d901      	bls.n	8005dd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e167      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005e04 <HAL_RCC_OscConfig+0x240>)
 8005dd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d0f0      	beq.n	8005dc4 <HAL_RCC_OscConfig+0x200>
 8005de2:	e01b      	b.n	8005e1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005de4:	4b09      	ldr	r3, [pc, #36]	@ (8005e0c <HAL_RCC_OscConfig+0x248>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005dea:	f7fd fed1 	bl	8003b90 <HAL_GetTick>
 8005dee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005df0:	e00e      	b.n	8005e10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005df2:	f7fd fecd 	bl	8003b90 <HAL_GetTick>
 8005df6:	4602      	mov	r2, r0
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	1ad3      	subs	r3, r2, r3
 8005dfc:	2b02      	cmp	r3, #2
 8005dfe:	d907      	bls.n	8005e10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e00:	2303      	movs	r3, #3
 8005e02:	e150      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
 8005e04:	40023800 	.word	0x40023800
 8005e08:	42470000 	.word	0x42470000
 8005e0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e10:	4b88      	ldr	r3, [pc, #544]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005e12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d1ea      	bne.n	8005df2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0304 	and.w	r3, r3, #4
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 8097 	beq.w	8005f58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e2e:	4b81      	ldr	r3, [pc, #516]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d10f      	bne.n	8005e5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	60bb      	str	r3, [r7, #8]
 8005e3e:	4b7d      	ldr	r3, [pc, #500]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e42:	4a7c      	ldr	r2, [pc, #496]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005e44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e4a:	4b7a      	ldr	r3, [pc, #488]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e52:	60bb      	str	r3, [r7, #8]
 8005e54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e56:	2301      	movs	r3, #1
 8005e58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e5a:	4b77      	ldr	r3, [pc, #476]	@ (8006038 <HAL_RCC_OscConfig+0x474>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d118      	bne.n	8005e98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e66:	4b74      	ldr	r3, [pc, #464]	@ (8006038 <HAL_RCC_OscConfig+0x474>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a73      	ldr	r2, [pc, #460]	@ (8006038 <HAL_RCC_OscConfig+0x474>)
 8005e6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e72:	f7fd fe8d 	bl	8003b90 <HAL_GetTick>
 8005e76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e78:	e008      	b.n	8005e8c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e7a:	f7fd fe89 	bl	8003b90 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	2b02      	cmp	r3, #2
 8005e86:	d901      	bls.n	8005e8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e10c      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e8c:	4b6a      	ldr	r3, [pc, #424]	@ (8006038 <HAL_RCC_OscConfig+0x474>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0f0      	beq.n	8005e7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d106      	bne.n	8005eae <HAL_RCC_OscConfig+0x2ea>
 8005ea0:	4b64      	ldr	r3, [pc, #400]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ea4:	4a63      	ldr	r2, [pc, #396]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005ea6:	f043 0301 	orr.w	r3, r3, #1
 8005eaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8005eac:	e01c      	b.n	8005ee8 <HAL_RCC_OscConfig+0x324>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	2b05      	cmp	r3, #5
 8005eb4:	d10c      	bne.n	8005ed0 <HAL_RCC_OscConfig+0x30c>
 8005eb6:	4b5f      	ldr	r3, [pc, #380]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eba:	4a5e      	ldr	r2, [pc, #376]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005ebc:	f043 0304 	orr.w	r3, r3, #4
 8005ec0:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ec2:	4b5c      	ldr	r3, [pc, #368]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec6:	4a5b      	ldr	r2, [pc, #364]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005ec8:	f043 0301 	orr.w	r3, r3, #1
 8005ecc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ece:	e00b      	b.n	8005ee8 <HAL_RCC_OscConfig+0x324>
 8005ed0:	4b58      	ldr	r3, [pc, #352]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ed4:	4a57      	ldr	r2, [pc, #348]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005ed6:	f023 0301 	bic.w	r3, r3, #1
 8005eda:	6713      	str	r3, [r2, #112]	@ 0x70
 8005edc:	4b55      	ldr	r3, [pc, #340]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ee0:	4a54      	ldr	r2, [pc, #336]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005ee2:	f023 0304 	bic.w	r3, r3, #4
 8005ee6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d015      	beq.n	8005f1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef0:	f7fd fe4e 	bl	8003b90 <HAL_GetTick>
 8005ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ef6:	e00a      	b.n	8005f0e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ef8:	f7fd fe4a 	bl	8003b90 <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d901      	bls.n	8005f0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f0a:	2303      	movs	r3, #3
 8005f0c:	e0cb      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f0e:	4b49      	ldr	r3, [pc, #292]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f12:	f003 0302 	and.w	r3, r3, #2
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d0ee      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x334>
 8005f1a:	e014      	b.n	8005f46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f1c:	f7fd fe38 	bl	8003b90 <HAL_GetTick>
 8005f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f22:	e00a      	b.n	8005f3a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f24:	f7fd fe34 	bl	8003b90 <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d901      	bls.n	8005f3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e0b5      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f3a:	4b3e      	ldr	r3, [pc, #248]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1ee      	bne.n	8005f24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f46:	7dfb      	ldrb	r3, [r7, #23]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d105      	bne.n	8005f58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f4c:	4b39      	ldr	r3, [pc, #228]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f50:	4a38      	ldr	r2, [pc, #224]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005f52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 80a1 	beq.w	80060a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f62:	4b34      	ldr	r3, [pc, #208]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f003 030c 	and.w	r3, r3, #12
 8005f6a:	2b08      	cmp	r3, #8
 8005f6c:	d05c      	beq.n	8006028 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d141      	bne.n	8005ffa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f76:	4b31      	ldr	r3, [pc, #196]	@ (800603c <HAL_RCC_OscConfig+0x478>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f7c:	f7fd fe08 	bl	8003b90 <HAL_GetTick>
 8005f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f82:	e008      	b.n	8005f96 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f84:	f7fd fe04 	bl	8003b90 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e087      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f96:	4b27      	ldr	r3, [pc, #156]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1f0      	bne.n	8005f84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	69da      	ldr	r2, [r3, #28]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb0:	019b      	lsls	r3, r3, #6
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb8:	085b      	lsrs	r3, r3, #1
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	041b      	lsls	r3, r3, #16
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fc4:	061b      	lsls	r3, r3, #24
 8005fc6:	491b      	ldr	r1, [pc, #108]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800603c <HAL_RCC_OscConfig+0x478>)
 8005fce:	2201      	movs	r2, #1
 8005fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fd2:	f7fd fddd 	bl	8003b90 <HAL_GetTick>
 8005fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fd8:	e008      	b.n	8005fec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fda:	f7fd fdd9 	bl	8003b90 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d901      	bls.n	8005fec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e05c      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fec:	4b11      	ldr	r3, [pc, #68]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d0f0      	beq.n	8005fda <HAL_RCC_OscConfig+0x416>
 8005ff8:	e054      	b.n	80060a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ffa:	4b10      	ldr	r3, [pc, #64]	@ (800603c <HAL_RCC_OscConfig+0x478>)
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006000:	f7fd fdc6 	bl	8003b90 <HAL_GetTick>
 8006004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006006:	e008      	b.n	800601a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006008:	f7fd fdc2 	bl	8003b90 <HAL_GetTick>
 800600c:	4602      	mov	r2, r0
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	1ad3      	subs	r3, r2, r3
 8006012:	2b02      	cmp	r3, #2
 8006014:	d901      	bls.n	800601a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e045      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800601a:	4b06      	ldr	r3, [pc, #24]	@ (8006034 <HAL_RCC_OscConfig+0x470>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1f0      	bne.n	8006008 <HAL_RCC_OscConfig+0x444>
 8006026:	e03d      	b.n	80060a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	699b      	ldr	r3, [r3, #24]
 800602c:	2b01      	cmp	r3, #1
 800602e:	d107      	bne.n	8006040 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e038      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
 8006034:	40023800 	.word	0x40023800
 8006038:	40007000 	.word	0x40007000
 800603c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006040:	4b1b      	ldr	r3, [pc, #108]	@ (80060b0 <HAL_RCC_OscConfig+0x4ec>)
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d028      	beq.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006058:	429a      	cmp	r2, r3
 800605a:	d121      	bne.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006066:	429a      	cmp	r2, r3
 8006068:	d11a      	bne.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006070:	4013      	ands	r3, r2
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006076:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006078:	4293      	cmp	r3, r2
 800607a:	d111      	bne.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006086:	085b      	lsrs	r3, r3, #1
 8006088:	3b01      	subs	r3, #1
 800608a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800608c:	429a      	cmp	r2, r3
 800608e:	d107      	bne.n	80060a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800609a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800609c:	429a      	cmp	r2, r3
 800609e:	d001      	beq.n	80060a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	e000      	b.n	80060a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3718      	adds	r7, #24
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}
 80060ae:	bf00      	nop
 80060b0:	40023800 	.word	0x40023800

080060b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d101      	bne.n	80060c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e0cc      	b.n	8006262 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060c8:	4b68      	ldr	r3, [pc, #416]	@ (800626c <HAL_RCC_ClockConfig+0x1b8>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f003 030f 	and.w	r3, r3, #15
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d90c      	bls.n	80060f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060d6:	4b65      	ldr	r3, [pc, #404]	@ (800626c <HAL_RCC_ClockConfig+0x1b8>)
 80060d8:	683a      	ldr	r2, [r7, #0]
 80060da:	b2d2      	uxtb	r2, r2
 80060dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060de:	4b63      	ldr	r3, [pc, #396]	@ (800626c <HAL_RCC_ClockConfig+0x1b8>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 030f 	and.w	r3, r3, #15
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d001      	beq.n	80060f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e0b8      	b.n	8006262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d020      	beq.n	800613e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	2b00      	cmp	r3, #0
 8006106:	d005      	beq.n	8006114 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006108:	4b59      	ldr	r3, [pc, #356]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	4a58      	ldr	r2, [pc, #352]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 800610e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006112:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0308 	and.w	r3, r3, #8
 800611c:	2b00      	cmp	r3, #0
 800611e:	d005      	beq.n	800612c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006120:	4b53      	ldr	r3, [pc, #332]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006122:	689b      	ldr	r3, [r3, #8]
 8006124:	4a52      	ldr	r2, [pc, #328]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006126:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800612a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800612c:	4b50      	ldr	r3, [pc, #320]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	494d      	ldr	r1, [pc, #308]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 800613a:	4313      	orrs	r3, r2
 800613c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 0301 	and.w	r3, r3, #1
 8006146:	2b00      	cmp	r3, #0
 8006148:	d044      	beq.n	80061d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	2b01      	cmp	r3, #1
 8006150:	d107      	bne.n	8006162 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006152:	4b47      	ldr	r3, [pc, #284]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800615a:	2b00      	cmp	r3, #0
 800615c:	d119      	bne.n	8006192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	e07f      	b.n	8006262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	2b02      	cmp	r3, #2
 8006168:	d003      	beq.n	8006172 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800616e:	2b03      	cmp	r3, #3
 8006170:	d107      	bne.n	8006182 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006172:	4b3f      	ldr	r3, [pc, #252]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d109      	bne.n	8006192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e06f      	b.n	8006262 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006182:	4b3b      	ldr	r3, [pc, #236]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 0302 	and.w	r3, r3, #2
 800618a:	2b00      	cmp	r3, #0
 800618c:	d101      	bne.n	8006192 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e067      	b.n	8006262 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006192:	4b37      	ldr	r3, [pc, #220]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f023 0203 	bic.w	r2, r3, #3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	4934      	ldr	r1, [pc, #208]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80061a4:	f7fd fcf4 	bl	8003b90 <HAL_GetTick>
 80061a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061aa:	e00a      	b.n	80061c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061ac:	f7fd fcf0 	bl	8003b90 <HAL_GetTick>
 80061b0:	4602      	mov	r2, r0
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d901      	bls.n	80061c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061be:	2303      	movs	r3, #3
 80061c0:	e04f      	b.n	8006262 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061c2:	4b2b      	ldr	r3, [pc, #172]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f003 020c 	and.w	r2, r3, #12
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d1eb      	bne.n	80061ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061d4:	4b25      	ldr	r3, [pc, #148]	@ (800626c <HAL_RCC_ClockConfig+0x1b8>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 030f 	and.w	r3, r3, #15
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d20c      	bcs.n	80061fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061e2:	4b22      	ldr	r3, [pc, #136]	@ (800626c <HAL_RCC_ClockConfig+0x1b8>)
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	b2d2      	uxtb	r2, r2
 80061e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ea:	4b20      	ldr	r3, [pc, #128]	@ (800626c <HAL_RCC_ClockConfig+0x1b8>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 030f 	and.w	r3, r3, #15
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d001      	beq.n	80061fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061f8:	2301      	movs	r3, #1
 80061fa:	e032      	b.n	8006262 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f003 0304 	and.w	r3, r3, #4
 8006204:	2b00      	cmp	r3, #0
 8006206:	d008      	beq.n	800621a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006208:	4b19      	ldr	r3, [pc, #100]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	4916      	ldr	r1, [pc, #88]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006216:	4313      	orrs	r3, r2
 8006218:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0308 	and.w	r3, r3, #8
 8006222:	2b00      	cmp	r3, #0
 8006224:	d009      	beq.n	800623a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006226:	4b12      	ldr	r3, [pc, #72]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	00db      	lsls	r3, r3, #3
 8006234:	490e      	ldr	r1, [pc, #56]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006236:	4313      	orrs	r3, r2
 8006238:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800623a:	f000 f821 	bl	8006280 <HAL_RCC_GetSysClockFreq>
 800623e:	4602      	mov	r2, r0
 8006240:	4b0b      	ldr	r3, [pc, #44]	@ (8006270 <HAL_RCC_ClockConfig+0x1bc>)
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	091b      	lsrs	r3, r3, #4
 8006246:	f003 030f 	and.w	r3, r3, #15
 800624a:	490a      	ldr	r1, [pc, #40]	@ (8006274 <HAL_RCC_ClockConfig+0x1c0>)
 800624c:	5ccb      	ldrb	r3, [r1, r3]
 800624e:	fa22 f303 	lsr.w	r3, r2, r3
 8006252:	4a09      	ldr	r2, [pc, #36]	@ (8006278 <HAL_RCC_ClockConfig+0x1c4>)
 8006254:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006256:	4b09      	ldr	r3, [pc, #36]	@ (800627c <HAL_RCC_ClockConfig+0x1c8>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4618      	mov	r0, r3
 800625c:	f7fd fc54 	bl	8003b08 <HAL_InitTick>

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3710      	adds	r7, #16
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
 800626a:	bf00      	nop
 800626c:	40023c00 	.word	0x40023c00
 8006270:	40023800 	.word	0x40023800
 8006274:	0800a018 	.word	0x0800a018
 8006278:	20000010 	.word	0x20000010
 800627c:	20000014 	.word	0x20000014

08006280 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006284:	b094      	sub	sp, #80	@ 0x50
 8006286:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006288:	2300      	movs	r3, #0
 800628a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006290:	2300      	movs	r3, #0
 8006292:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006294:	2300      	movs	r3, #0
 8006296:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006298:	4b79      	ldr	r3, [pc, #484]	@ (8006480 <HAL_RCC_GetSysClockFreq+0x200>)
 800629a:	689b      	ldr	r3, [r3, #8]
 800629c:	f003 030c 	and.w	r3, r3, #12
 80062a0:	2b08      	cmp	r3, #8
 80062a2:	d00d      	beq.n	80062c0 <HAL_RCC_GetSysClockFreq+0x40>
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	f200 80e1 	bhi.w	800646c <HAL_RCC_GetSysClockFreq+0x1ec>
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d002      	beq.n	80062b4 <HAL_RCC_GetSysClockFreq+0x34>
 80062ae:	2b04      	cmp	r3, #4
 80062b0:	d003      	beq.n	80062ba <HAL_RCC_GetSysClockFreq+0x3a>
 80062b2:	e0db      	b.n	800646c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062b4:	4b73      	ldr	r3, [pc, #460]	@ (8006484 <HAL_RCC_GetSysClockFreq+0x204>)
 80062b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062b8:	e0db      	b.n	8006472 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062ba:	4b73      	ldr	r3, [pc, #460]	@ (8006488 <HAL_RCC_GetSysClockFreq+0x208>)
 80062bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062be:	e0d8      	b.n	8006472 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062c0:	4b6f      	ldr	r3, [pc, #444]	@ (8006480 <HAL_RCC_GetSysClockFreq+0x200>)
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062ca:	4b6d      	ldr	r3, [pc, #436]	@ (8006480 <HAL_RCC_GetSysClockFreq+0x200>)
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d063      	beq.n	800639e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062d6:	4b6a      	ldr	r3, [pc, #424]	@ (8006480 <HAL_RCC_GetSysClockFreq+0x200>)
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	099b      	lsrs	r3, r3, #6
 80062dc:	2200      	movs	r2, #0
 80062de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80062e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80062ea:	2300      	movs	r3, #0
 80062ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80062ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80062f2:	4622      	mov	r2, r4
 80062f4:	462b      	mov	r3, r5
 80062f6:	f04f 0000 	mov.w	r0, #0
 80062fa:	f04f 0100 	mov.w	r1, #0
 80062fe:	0159      	lsls	r1, r3, #5
 8006300:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006304:	0150      	lsls	r0, r2, #5
 8006306:	4602      	mov	r2, r0
 8006308:	460b      	mov	r3, r1
 800630a:	4621      	mov	r1, r4
 800630c:	1a51      	subs	r1, r2, r1
 800630e:	6139      	str	r1, [r7, #16]
 8006310:	4629      	mov	r1, r5
 8006312:	eb63 0301 	sbc.w	r3, r3, r1
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	f04f 0200 	mov.w	r2, #0
 800631c:	f04f 0300 	mov.w	r3, #0
 8006320:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006324:	4659      	mov	r1, fp
 8006326:	018b      	lsls	r3, r1, #6
 8006328:	4651      	mov	r1, sl
 800632a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800632e:	4651      	mov	r1, sl
 8006330:	018a      	lsls	r2, r1, #6
 8006332:	4651      	mov	r1, sl
 8006334:	ebb2 0801 	subs.w	r8, r2, r1
 8006338:	4659      	mov	r1, fp
 800633a:	eb63 0901 	sbc.w	r9, r3, r1
 800633e:	f04f 0200 	mov.w	r2, #0
 8006342:	f04f 0300 	mov.w	r3, #0
 8006346:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800634a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800634e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006352:	4690      	mov	r8, r2
 8006354:	4699      	mov	r9, r3
 8006356:	4623      	mov	r3, r4
 8006358:	eb18 0303 	adds.w	r3, r8, r3
 800635c:	60bb      	str	r3, [r7, #8]
 800635e:	462b      	mov	r3, r5
 8006360:	eb49 0303 	adc.w	r3, r9, r3
 8006364:	60fb      	str	r3, [r7, #12]
 8006366:	f04f 0200 	mov.w	r2, #0
 800636a:	f04f 0300 	mov.w	r3, #0
 800636e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006372:	4629      	mov	r1, r5
 8006374:	024b      	lsls	r3, r1, #9
 8006376:	4621      	mov	r1, r4
 8006378:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800637c:	4621      	mov	r1, r4
 800637e:	024a      	lsls	r2, r1, #9
 8006380:	4610      	mov	r0, r2
 8006382:	4619      	mov	r1, r3
 8006384:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006386:	2200      	movs	r2, #0
 8006388:	62bb      	str	r3, [r7, #40]	@ 0x28
 800638a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800638c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006390:	f7f9 ff86 	bl	80002a0 <__aeabi_uldivmod>
 8006394:	4602      	mov	r2, r0
 8006396:	460b      	mov	r3, r1
 8006398:	4613      	mov	r3, r2
 800639a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800639c:	e058      	b.n	8006450 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800639e:	4b38      	ldr	r3, [pc, #224]	@ (8006480 <HAL_RCC_GetSysClockFreq+0x200>)
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	099b      	lsrs	r3, r3, #6
 80063a4:	2200      	movs	r2, #0
 80063a6:	4618      	mov	r0, r3
 80063a8:	4611      	mov	r1, r2
 80063aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80063ae:	623b      	str	r3, [r7, #32]
 80063b0:	2300      	movs	r3, #0
 80063b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80063b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80063b8:	4642      	mov	r2, r8
 80063ba:	464b      	mov	r3, r9
 80063bc:	f04f 0000 	mov.w	r0, #0
 80063c0:	f04f 0100 	mov.w	r1, #0
 80063c4:	0159      	lsls	r1, r3, #5
 80063c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063ca:	0150      	lsls	r0, r2, #5
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	4641      	mov	r1, r8
 80063d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80063d6:	4649      	mov	r1, r9
 80063d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80063dc:	f04f 0200 	mov.w	r2, #0
 80063e0:	f04f 0300 	mov.w	r3, #0
 80063e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80063e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80063ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80063f0:	ebb2 040a 	subs.w	r4, r2, sl
 80063f4:	eb63 050b 	sbc.w	r5, r3, fp
 80063f8:	f04f 0200 	mov.w	r2, #0
 80063fc:	f04f 0300 	mov.w	r3, #0
 8006400:	00eb      	lsls	r3, r5, #3
 8006402:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006406:	00e2      	lsls	r2, r4, #3
 8006408:	4614      	mov	r4, r2
 800640a:	461d      	mov	r5, r3
 800640c:	4643      	mov	r3, r8
 800640e:	18e3      	adds	r3, r4, r3
 8006410:	603b      	str	r3, [r7, #0]
 8006412:	464b      	mov	r3, r9
 8006414:	eb45 0303 	adc.w	r3, r5, r3
 8006418:	607b      	str	r3, [r7, #4]
 800641a:	f04f 0200 	mov.w	r2, #0
 800641e:	f04f 0300 	mov.w	r3, #0
 8006422:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006426:	4629      	mov	r1, r5
 8006428:	028b      	lsls	r3, r1, #10
 800642a:	4621      	mov	r1, r4
 800642c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006430:	4621      	mov	r1, r4
 8006432:	028a      	lsls	r2, r1, #10
 8006434:	4610      	mov	r0, r2
 8006436:	4619      	mov	r1, r3
 8006438:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800643a:	2200      	movs	r2, #0
 800643c:	61bb      	str	r3, [r7, #24]
 800643e:	61fa      	str	r2, [r7, #28]
 8006440:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006444:	f7f9 ff2c 	bl	80002a0 <__aeabi_uldivmod>
 8006448:	4602      	mov	r2, r0
 800644a:	460b      	mov	r3, r1
 800644c:	4613      	mov	r3, r2
 800644e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006450:	4b0b      	ldr	r3, [pc, #44]	@ (8006480 <HAL_RCC_GetSysClockFreq+0x200>)
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	0c1b      	lsrs	r3, r3, #16
 8006456:	f003 0303 	and.w	r3, r3, #3
 800645a:	3301      	adds	r3, #1
 800645c:	005b      	lsls	r3, r3, #1
 800645e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006460:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006464:	fbb2 f3f3 	udiv	r3, r2, r3
 8006468:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800646a:	e002      	b.n	8006472 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800646c:	4b05      	ldr	r3, [pc, #20]	@ (8006484 <HAL_RCC_GetSysClockFreq+0x204>)
 800646e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006470:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006472:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006474:	4618      	mov	r0, r3
 8006476:	3750      	adds	r7, #80	@ 0x50
 8006478:	46bd      	mov	sp, r7
 800647a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800647e:	bf00      	nop
 8006480:	40023800 	.word	0x40023800
 8006484:	00f42400 	.word	0x00f42400
 8006488:	007a1200 	.word	0x007a1200

0800648c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800648c:	b480      	push	{r7}
 800648e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006490:	4b03      	ldr	r3, [pc, #12]	@ (80064a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006492:	681b      	ldr	r3, [r3, #0]
}
 8006494:	4618      	mov	r0, r3
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	20000010 	.word	0x20000010

080064a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064a8:	f7ff fff0 	bl	800648c <HAL_RCC_GetHCLKFreq>
 80064ac:	4602      	mov	r2, r0
 80064ae:	4b05      	ldr	r3, [pc, #20]	@ (80064c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	0a9b      	lsrs	r3, r3, #10
 80064b4:	f003 0307 	and.w	r3, r3, #7
 80064b8:	4903      	ldr	r1, [pc, #12]	@ (80064c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064ba:	5ccb      	ldrb	r3, [r1, r3]
 80064bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	40023800 	.word	0x40023800
 80064c8:	0800a028 	.word	0x0800a028

080064cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b086      	sub	sp, #24
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064d4:	2300      	movs	r3, #0
 80064d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f003 0301 	and.w	r3, r3, #1
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10b      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d105      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d075      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006500:	4b91      	ldr	r3, [pc, #580]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006502:	2200      	movs	r2, #0
 8006504:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006506:	f7fd fb43 	bl	8003b90 <HAL_GetTick>
 800650a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800650c:	e008      	b.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800650e:	f7fd fb3f 	bl	8003b90 <HAL_GetTick>
 8006512:	4602      	mov	r2, r0
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	2b02      	cmp	r3, #2
 800651a:	d901      	bls.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800651c:	2303      	movs	r3, #3
 800651e:	e189      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006520:	4b8a      	ldr	r3, [pc, #552]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1f0      	bne.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0301 	and.w	r3, r3, #1
 8006534:	2b00      	cmp	r3, #0
 8006536:	d009      	beq.n	800654c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	019a      	lsls	r2, r3, #6
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	071b      	lsls	r3, r3, #28
 8006544:	4981      	ldr	r1, [pc, #516]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006546:	4313      	orrs	r3, r2
 8006548:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b00      	cmp	r3, #0
 8006556:	d01f      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006558:	4b7c      	ldr	r3, [pc, #496]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800655a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800655e:	0f1b      	lsrs	r3, r3, #28
 8006560:	f003 0307 	and.w	r3, r3, #7
 8006564:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	019a      	lsls	r2, r3, #6
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	061b      	lsls	r3, r3, #24
 8006572:	431a      	orrs	r2, r3
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	071b      	lsls	r3, r3, #28
 8006578:	4974      	ldr	r1, [pc, #464]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800657a:	4313      	orrs	r3, r2
 800657c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006580:	4b72      	ldr	r3, [pc, #456]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006582:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006586:	f023 021f 	bic.w	r2, r3, #31
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	69db      	ldr	r3, [r3, #28]
 800658e:	3b01      	subs	r3, #1
 8006590:	496e      	ldr	r1, [pc, #440]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006592:	4313      	orrs	r3, r2
 8006594:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d00d      	beq.n	80065c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	019a      	lsls	r2, r3, #6
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	061b      	lsls	r3, r3, #24
 80065b0:	431a      	orrs	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	071b      	lsls	r3, r3, #28
 80065b8:	4964      	ldr	r1, [pc, #400]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80065c0:	4b61      	ldr	r3, [pc, #388]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80065c2:	2201      	movs	r2, #1
 80065c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065c6:	f7fd fae3 	bl	8003b90 <HAL_GetTick>
 80065ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065cc:	e008      	b.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80065ce:	f7fd fadf 	bl	8003b90 <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d901      	bls.n	80065e0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	e129      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065e0:	4b5a      	ldr	r3, [pc, #360]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d0f0      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0304 	and.w	r3, r3, #4
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d105      	bne.n	8006604 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006600:	2b00      	cmp	r3, #0
 8006602:	d079      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006604:	4b52      	ldr	r3, [pc, #328]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006606:	2200      	movs	r2, #0
 8006608:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800660a:	f7fd fac1 	bl	8003b90 <HAL_GetTick>
 800660e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006610:	e008      	b.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006612:	f7fd fabd 	bl	8003b90 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	2b02      	cmp	r3, #2
 800661e:	d901      	bls.n	8006624 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e107      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006624:	4b49      	ldr	r3, [pc, #292]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800662c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006630:	d0ef      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 0304 	and.w	r3, r3, #4
 800663a:	2b00      	cmp	r3, #0
 800663c:	d020      	beq.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800663e:	4b43      	ldr	r3, [pc, #268]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006640:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006644:	0f1b      	lsrs	r3, r3, #28
 8006646:	f003 0307 	and.w	r3, r3, #7
 800664a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	019a      	lsls	r2, r3, #6
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	061b      	lsls	r3, r3, #24
 8006658:	431a      	orrs	r2, r3
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	071b      	lsls	r3, r3, #28
 800665e:	493b      	ldr	r1, [pc, #236]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006660:	4313      	orrs	r3, r2
 8006662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006666:	4b39      	ldr	r3, [pc, #228]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006668:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800666c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	3b01      	subs	r3, #1
 8006676:	021b      	lsls	r3, r3, #8
 8006678:	4934      	ldr	r1, [pc, #208]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800667a:	4313      	orrs	r3, r2
 800667c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0308 	and.w	r3, r3, #8
 8006688:	2b00      	cmp	r3, #0
 800668a:	d01e      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800668c:	4b2f      	ldr	r3, [pc, #188]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800668e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006692:	0e1b      	lsrs	r3, r3, #24
 8006694:	f003 030f 	and.w	r3, r3, #15
 8006698:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	019a      	lsls	r2, r3, #6
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	061b      	lsls	r3, r3, #24
 80066a4:	431a      	orrs	r2, r3
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	071b      	lsls	r3, r3, #28
 80066ac:	4927      	ldr	r1, [pc, #156]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066ae:	4313      	orrs	r3, r2
 80066b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80066b4:	4b25      	ldr	r3, [pc, #148]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066ba:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c2:	4922      	ldr	r1, [pc, #136]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066c4:	4313      	orrs	r3, r2
 80066c6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80066ca:	4b21      	ldr	r3, [pc, #132]	@ (8006750 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80066cc:	2201      	movs	r2, #1
 80066ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066d0:	f7fd fa5e 	bl	8003b90 <HAL_GetTick>
 80066d4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80066d6:	e008      	b.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80066d8:	f7fd fa5a 	bl	8003b90 <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d901      	bls.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e0a4      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80066ea:	4b18      	ldr	r3, [pc, #96]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066f6:	d1ef      	bne.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f003 0320 	and.w	r3, r3, #32
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 808b 	beq.w	800681c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006706:	2300      	movs	r3, #0
 8006708:	60fb      	str	r3, [r7, #12]
 800670a:	4b10      	ldr	r3, [pc, #64]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800670c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800670e:	4a0f      	ldr	r2, [pc, #60]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006710:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006714:	6413      	str	r3, [r2, #64]	@ 0x40
 8006716:	4b0d      	ldr	r3, [pc, #52]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800671a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800671e:	60fb      	str	r3, [r7, #12]
 8006720:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006722:	4b0c      	ldr	r3, [pc, #48]	@ (8006754 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a0b      	ldr	r2, [pc, #44]	@ (8006754 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800672c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800672e:	f7fd fa2f 	bl	8003b90 <HAL_GetTick>
 8006732:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006734:	e010      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006736:	f7fd fa2b 	bl	8003b90 <HAL_GetTick>
 800673a:	4602      	mov	r2, r0
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	2b02      	cmp	r3, #2
 8006742:	d909      	bls.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e075      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006748:	42470068 	.word	0x42470068
 800674c:	40023800 	.word	0x40023800
 8006750:	42470070 	.word	0x42470070
 8006754:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006758:	4b38      	ldr	r3, [pc, #224]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006760:	2b00      	cmp	r3, #0
 8006762:	d0e8      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006764:	4b36      	ldr	r3, [pc, #216]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006768:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800676c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d02f      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006778:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	429a      	cmp	r2, r3
 8006780:	d028      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006782:	4b2f      	ldr	r3, [pc, #188]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800678a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800678c:	4b2d      	ldr	r3, [pc, #180]	@ (8006844 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800678e:	2201      	movs	r2, #1
 8006790:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006792:	4b2c      	ldr	r3, [pc, #176]	@ (8006844 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006794:	2200      	movs	r2, #0
 8006796:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006798:	4a29      	ldr	r2, [pc, #164]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800679e:	4b28      	ldr	r3, [pc, #160]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d114      	bne.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80067aa:	f7fd f9f1 	bl	8003b90 <HAL_GetTick>
 80067ae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067b0:	e00a      	b.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067b2:	f7fd f9ed 	bl	8003b90 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d901      	bls.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e035      	b.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067c8:	4b1d      	ldr	r3, [pc, #116]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d0ee      	beq.n	80067b2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067e0:	d10d      	bne.n	80067fe <HAL_RCCEx_PeriphCLKConfig+0x332>
 80067e2:	4b17      	ldr	r3, [pc, #92]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067e4:	689b      	ldr	r3, [r3, #8]
 80067e6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ee:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80067f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067f6:	4912      	ldr	r1, [pc, #72]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	608b      	str	r3, [r1, #8]
 80067fc:	e005      	b.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80067fe:	4b10      	ldr	r3, [pc, #64]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	4a0f      	ldr	r2, [pc, #60]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006804:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006808:	6093      	str	r3, [r2, #8]
 800680a:	4b0d      	ldr	r3, [pc, #52]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800680c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006812:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006816:	490a      	ldr	r1, [pc, #40]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006818:	4313      	orrs	r3, r2
 800681a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f003 0310 	and.w	r3, r3, #16
 8006824:	2b00      	cmp	r3, #0
 8006826:	d004      	beq.n	8006832 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800682e:	4b06      	ldr	r3, [pc, #24]	@ (8006848 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006830:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006832:	2300      	movs	r3, #0
}
 8006834:	4618      	mov	r0, r3
 8006836:	3718      	adds	r7, #24
 8006838:	46bd      	mov	sp, r7
 800683a:	bd80      	pop	{r7, pc}
 800683c:	40007000 	.word	0x40007000
 8006840:	40023800 	.word	0x40023800
 8006844:	42470e40 	.word	0x42470e40
 8006848:	424711e0 	.word	0x424711e0

0800684c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e01c      	b.n	8006898 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	795b      	ldrb	r3, [r3, #5]
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b00      	cmp	r3, #0
 8006866:	d105      	bne.n	8006874 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7fc fc16 	bl	80030a0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f042 0204 	orr.w	r2, r2, #4
 8006888:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068aa:	2300      	movs	r3, #0
 80068ac:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	791b      	ldrb	r3, [r3, #4]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d101      	bne.n	80068ba <HAL_RNG_GenerateRandomNumber+0x1a>
 80068b6:	2302      	movs	r3, #2
 80068b8:	e044      	b.n	8006944 <HAL_RNG_GenerateRandomNumber+0xa4>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	795b      	ldrb	r3, [r3, #5]
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d133      	bne.n	8006932 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2202      	movs	r2, #2
 80068ce:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068d0:	f7fd f95e 	bl	8003b90 <HAL_GetTick>
 80068d4:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80068d6:	e018      	b.n	800690a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80068d8:	f7fd f95a 	bl	8003b90 <HAL_GetTick>
 80068dc:	4602      	mov	r2, r0
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b02      	cmp	r3, #2
 80068e4:	d911      	bls.n	800690a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d00a      	beq.n	800690a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2202      	movs	r2, #2
 80068fe:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8006906:	2301      	movs	r3, #1
 8006908:	e01c      	b.n	8006944 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	2b01      	cmp	r3, #1
 8006916:	d1df      	bne.n	80068d8 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	689a      	ldr	r2, [r3, #8]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68da      	ldr	r2, [r3, #12]
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	715a      	strb	r2, [r3, #5]
 8006930:	e004      	b.n	800693c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2204      	movs	r2, #4
 8006936:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	711a      	strb	r2, [r3, #4]

  return status;
 8006942:	7bfb      	ldrb	r3, [r7, #15]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	e07b      	b.n	8006a56 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006962:	2b00      	cmp	r3, #0
 8006964:	d108      	bne.n	8006978 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800696e:	d009      	beq.n	8006984 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	61da      	str	r2, [r3, #28]
 8006976:	e005      	b.n	8006984 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2200      	movs	r2, #0
 800697c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	d106      	bne.n	80069a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f7fc fba0 	bl	80030e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2202      	movs	r2, #2
 80069a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	681a      	ldr	r2, [r3, #0]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80069cc:	431a      	orrs	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069d6:	431a      	orrs	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	691b      	ldr	r3, [r3, #16]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	431a      	orrs	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	f003 0301 	and.w	r3, r3, #1
 80069ea:	431a      	orrs	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	699b      	ldr	r3, [r3, #24]
 80069f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069f4:	431a      	orrs	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069fe:	431a      	orrs	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a1b      	ldr	r3, [r3, #32]
 8006a04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a08:	ea42 0103 	orr.w	r1, r2, r3
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a10:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	0c1b      	lsrs	r3, r3, #16
 8006a22:	f003 0104 	and.w	r1, r3, #4
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2a:	f003 0210 	and.w	r2, r3, #16
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	430a      	orrs	r2, r1
 8006a34:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	69da      	ldr	r2, [r3, #28]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a44:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3708      	adds	r7, #8
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b082      	sub	sp, #8
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d101      	bne.n	8006a70 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e01a      	b.n	8006aa6 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2202      	movs	r2, #2
 8006a74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a86:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7fc fb73 	bl	8003174 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006aa4:	2300      	movs	r3, #0
}
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	3708      	adds	r7, #8
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}

08006aae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aae:	b580      	push	{r7, lr}
 8006ab0:	b088      	sub	sp, #32
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	60f8      	str	r0, [r7, #12]
 8006ab6:	60b9      	str	r1, [r7, #8]
 8006ab8:	603b      	str	r3, [r7, #0]
 8006aba:	4613      	mov	r3, r2
 8006abc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006abe:	f7fd f867 	bl	8003b90 <HAL_GetTick>
 8006ac2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006ac4:	88fb      	ldrh	r3, [r7, #6]
 8006ac6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d001      	beq.n	8006ad8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	e12a      	b.n	8006d2e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d002      	beq.n	8006ae4 <HAL_SPI_Transmit+0x36>
 8006ade:	88fb      	ldrh	r3, [r7, #6]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e122      	b.n	8006d2e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d101      	bne.n	8006af6 <HAL_SPI_Transmit+0x48>
 8006af2:	2302      	movs	r3, #2
 8006af4:	e11b      	b.n	8006d2e <HAL_SPI_Transmit+0x280>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2203      	movs	r2, #3
 8006b02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	88fa      	ldrh	r2, [r7, #6]
 8006b16:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	88fa      	ldrh	r2, [r7, #6]
 8006b1c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2200      	movs	r2, #0
 8006b34:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b44:	d10f      	bne.n	8006b66 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b70:	2b40      	cmp	r3, #64	@ 0x40
 8006b72:	d007      	beq.n	8006b84 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b8c:	d152      	bne.n	8006c34 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d002      	beq.n	8006b9c <HAL_SPI_Transmit+0xee>
 8006b96:	8b7b      	ldrh	r3, [r7, #26]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d145      	bne.n	8006c28 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba0:	881a      	ldrh	r2, [r3, #0]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bac:	1c9a      	adds	r2, r3, #2
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bb6:	b29b      	uxth	r3, r3
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	b29a      	uxth	r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006bc0:	e032      	b.n	8006c28 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f003 0302 	and.w	r3, r3, #2
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	d112      	bne.n	8006bf6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd4:	881a      	ldrh	r2, [r3, #0]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006be0:	1c9a      	adds	r2, r3, #2
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	3b01      	subs	r3, #1
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006bf4:	e018      	b.n	8006c28 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bf6:	f7fc ffcb 	bl	8003b90 <HAL_GetTick>
 8006bfa:	4602      	mov	r2, r0
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	1ad3      	subs	r3, r2, r3
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d803      	bhi.n	8006c0e <HAL_SPI_Transmit+0x160>
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c0c:	d102      	bne.n	8006c14 <HAL_SPI_Transmit+0x166>
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d109      	bne.n	8006c28 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e082      	b.n	8006d2e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1c7      	bne.n	8006bc2 <HAL_SPI_Transmit+0x114>
 8006c32:	e053      	b.n	8006cdc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d002      	beq.n	8006c42 <HAL_SPI_Transmit+0x194>
 8006c3c:	8b7b      	ldrh	r3, [r7, #26]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d147      	bne.n	8006cd2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	330c      	adds	r3, #12
 8006c4c:	7812      	ldrb	r2, [r2, #0]
 8006c4e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c54:	1c5a      	adds	r2, r3, #1
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c5e:	b29b      	uxth	r3, r3
 8006c60:	3b01      	subs	r3, #1
 8006c62:	b29a      	uxth	r2, r3
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006c68:	e033      	b.n	8006cd2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f003 0302 	and.w	r3, r3, #2
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d113      	bne.n	8006ca0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	330c      	adds	r3, #12
 8006c82:	7812      	ldrb	r2, [r2, #0]
 8006c84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c8a:	1c5a      	adds	r2, r3, #1
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	3b01      	subs	r3, #1
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006c9e:	e018      	b.n	8006cd2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ca0:	f7fc ff76 	bl	8003b90 <HAL_GetTick>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	69fb      	ldr	r3, [r7, #28]
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	683a      	ldr	r2, [r7, #0]
 8006cac:	429a      	cmp	r2, r3
 8006cae:	d803      	bhi.n	8006cb8 <HAL_SPI_Transmit+0x20a>
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006cb6:	d102      	bne.n	8006cbe <HAL_SPI_Transmit+0x210>
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d109      	bne.n	8006cd2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e02d      	b.n	8006d2e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1c6      	bne.n	8006c6a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cdc:	69fa      	ldr	r2, [r7, #28]
 8006cde:	6839      	ldr	r1, [r7, #0]
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 f8bf 	bl	8006e64 <SPI_EndRxTxTransaction>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d002      	beq.n	8006cf2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	689b      	ldr	r3, [r3, #8]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d10a      	bne.n	8006d10 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	617b      	str	r3, [r7, #20]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	617b      	str	r3, [r7, #20]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	617b      	str	r3, [r7, #20]
 8006d0e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2201      	movs	r2, #1
 8006d14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e000      	b.n	8006d2e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
  }
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3720      	adds	r7, #32
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006d36:	b480      	push	{r7}
 8006d38:	b083      	sub	sp, #12
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d44:	b2db      	uxtb	r3, r3
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	370c      	adds	r7, #12
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d50:	4770      	bx	lr
	...

08006d54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b088      	sub	sp, #32
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	603b      	str	r3, [r7, #0]
 8006d60:	4613      	mov	r3, r2
 8006d62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d64:	f7fc ff14 	bl	8003b90 <HAL_GetTick>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d6c:	1a9b      	subs	r3, r3, r2
 8006d6e:	683a      	ldr	r2, [r7, #0]
 8006d70:	4413      	add	r3, r2
 8006d72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d74:	f7fc ff0c 	bl	8003b90 <HAL_GetTick>
 8006d78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d7a:	4b39      	ldr	r3, [pc, #228]	@ (8006e60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	015b      	lsls	r3, r3, #5
 8006d80:	0d1b      	lsrs	r3, r3, #20
 8006d82:	69fa      	ldr	r2, [r7, #28]
 8006d84:	fb02 f303 	mul.w	r3, r2, r3
 8006d88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d8a:	e054      	b.n	8006e36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d92:	d050      	beq.n	8006e36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d94:	f7fc fefc 	bl	8003b90 <HAL_GetTick>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	69fa      	ldr	r2, [r7, #28]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d902      	bls.n	8006daa <SPI_WaitFlagStateUntilTimeout+0x56>
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d13d      	bne.n	8006e26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006db8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dc2:	d111      	bne.n	8006de8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	689b      	ldr	r3, [r3, #8]
 8006dc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dcc:	d004      	beq.n	8006dd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dd6:	d107      	bne.n	8006de8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006de6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006df0:	d10f      	bne.n	8006e12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e00:	601a      	str	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e017      	b.n	8006e56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d101      	bne.n	8006e30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	3b01      	subs	r3, #1
 8006e34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689a      	ldr	r2, [r3, #8]
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	4013      	ands	r3, r2
 8006e40:	68ba      	ldr	r2, [r7, #8]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	bf0c      	ite	eq
 8006e46:	2301      	moveq	r3, #1
 8006e48:	2300      	movne	r3, #0
 8006e4a:	b2db      	uxtb	r3, r3
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	79fb      	ldrb	r3, [r7, #7]
 8006e50:	429a      	cmp	r2, r3
 8006e52:	d19b      	bne.n	8006d8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3720      	adds	r7, #32
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	20000010 	.word	0x20000010

08006e64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b088      	sub	sp, #32
 8006e68:	af02      	add	r7, sp, #8
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2201      	movs	r2, #1
 8006e78:	2102      	movs	r1, #2
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f7ff ff6a 	bl	8006d54 <SPI_WaitFlagStateUntilTimeout>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d007      	beq.n	8006e96 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e8a:	f043 0220 	orr.w	r2, r3, #32
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e032      	b.n	8006efc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e96:	4b1b      	ldr	r3, [pc, #108]	@ (8006f04 <SPI_EndRxTxTransaction+0xa0>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a1b      	ldr	r2, [pc, #108]	@ (8006f08 <SPI_EndRxTxTransaction+0xa4>)
 8006e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea0:	0d5b      	lsrs	r3, r3, #21
 8006ea2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006ea6:	fb02 f303 	mul.w	r3, r2, r3
 8006eaa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006eb4:	d112      	bne.n	8006edc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	2180      	movs	r1, #128	@ 0x80
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f7ff ff47 	bl	8006d54 <SPI_WaitFlagStateUntilTimeout>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d016      	beq.n	8006efa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ed0:	f043 0220 	orr.w	r2, r3, #32
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e00f      	b.n	8006efc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d00a      	beq.n	8006ef8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ef2:	2b80      	cmp	r3, #128	@ 0x80
 8006ef4:	d0f2      	beq.n	8006edc <SPI_EndRxTxTransaction+0x78>
 8006ef6:	e000      	b.n	8006efa <SPI_EndRxTxTransaction+0x96>
        break;
 8006ef8:	bf00      	nop
  }

  return HAL_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3718      	adds	r7, #24
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	20000010 	.word	0x20000010
 8006f08:	165e9f81 	.word	0x165e9f81

08006f0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d101      	bne.n	8006f1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e041      	b.n	8006fa2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f24:	b2db      	uxtb	r3, r3
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d106      	bne.n	8006f38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7fc f93c 	bl	80031b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	3304      	adds	r3, #4
 8006f48:	4619      	mov	r1, r3
 8006f4a:	4610      	mov	r0, r2
 8006f4c:	f000 fb14 	bl	8007578 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
	...

08006fac <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d001      	beq.n	8006fc4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e046      	b.n	8007052 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a23      	ldr	r2, [pc, #140]	@ (8007060 <HAL_TIM_Base_Start+0xb4>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d022      	beq.n	800701c <HAL_TIM_Base_Start+0x70>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fde:	d01d      	beq.n	800701c <HAL_TIM_Base_Start+0x70>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a1f      	ldr	r2, [pc, #124]	@ (8007064 <HAL_TIM_Base_Start+0xb8>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d018      	beq.n	800701c <HAL_TIM_Base_Start+0x70>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4a1e      	ldr	r2, [pc, #120]	@ (8007068 <HAL_TIM_Base_Start+0xbc>)
 8006ff0:	4293      	cmp	r3, r2
 8006ff2:	d013      	beq.n	800701c <HAL_TIM_Base_Start+0x70>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a1c      	ldr	r2, [pc, #112]	@ (800706c <HAL_TIM_Base_Start+0xc0>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d00e      	beq.n	800701c <HAL_TIM_Base_Start+0x70>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a1b      	ldr	r2, [pc, #108]	@ (8007070 <HAL_TIM_Base_Start+0xc4>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d009      	beq.n	800701c <HAL_TIM_Base_Start+0x70>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a19      	ldr	r2, [pc, #100]	@ (8007074 <HAL_TIM_Base_Start+0xc8>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d004      	beq.n	800701c <HAL_TIM_Base_Start+0x70>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a18      	ldr	r2, [pc, #96]	@ (8007078 <HAL_TIM_Base_Start+0xcc>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d111      	bne.n	8007040 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2b06      	cmp	r3, #6
 800702c:	d010      	beq.n	8007050 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f042 0201 	orr.w	r2, r2, #1
 800703c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800703e:	e007      	b.n	8007050 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681a      	ldr	r2, [r3, #0]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f042 0201 	orr.w	r2, r2, #1
 800704e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	40010000 	.word	0x40010000
 8007064:	40000400 	.word	0x40000400
 8007068:	40000800 	.word	0x40000800
 800706c:	40000c00 	.word	0x40000c00
 8007070:	40010400 	.word	0x40010400
 8007074:	40014000 	.word	0x40014000
 8007078:	40001800 	.word	0x40001800

0800707c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b01      	cmp	r3, #1
 800708e:	d001      	beq.n	8007094 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	e04e      	b.n	8007132 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	68da      	ldr	r2, [r3, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f042 0201 	orr.w	r2, r2, #1
 80070aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a23      	ldr	r2, [pc, #140]	@ (8007140 <HAL_TIM_Base_Start_IT+0xc4>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d022      	beq.n	80070fc <HAL_TIM_Base_Start_IT+0x80>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070be:	d01d      	beq.n	80070fc <HAL_TIM_Base_Start_IT+0x80>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a1f      	ldr	r2, [pc, #124]	@ (8007144 <HAL_TIM_Base_Start_IT+0xc8>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d018      	beq.n	80070fc <HAL_TIM_Base_Start_IT+0x80>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a1e      	ldr	r2, [pc, #120]	@ (8007148 <HAL_TIM_Base_Start_IT+0xcc>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d013      	beq.n	80070fc <HAL_TIM_Base_Start_IT+0x80>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a1c      	ldr	r2, [pc, #112]	@ (800714c <HAL_TIM_Base_Start_IT+0xd0>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d00e      	beq.n	80070fc <HAL_TIM_Base_Start_IT+0x80>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a1b      	ldr	r2, [pc, #108]	@ (8007150 <HAL_TIM_Base_Start_IT+0xd4>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d009      	beq.n	80070fc <HAL_TIM_Base_Start_IT+0x80>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a19      	ldr	r2, [pc, #100]	@ (8007154 <HAL_TIM_Base_Start_IT+0xd8>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d004      	beq.n	80070fc <HAL_TIM_Base_Start_IT+0x80>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a18      	ldr	r2, [pc, #96]	@ (8007158 <HAL_TIM_Base_Start_IT+0xdc>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d111      	bne.n	8007120 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f003 0307 	and.w	r3, r3, #7
 8007106:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2b06      	cmp	r3, #6
 800710c:	d010      	beq.n	8007130 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f042 0201 	orr.w	r2, r2, #1
 800711c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800711e:	e007      	b.n	8007130 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f042 0201 	orr.w	r2, r2, #1
 800712e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	40010000 	.word	0x40010000
 8007144:	40000400 	.word	0x40000400
 8007148:	40000800 	.word	0x40000800
 800714c:	40000c00 	.word	0x40000c00
 8007150:	40010400 	.word	0x40010400
 8007154:	40014000 	.word	0x40014000
 8007158:	40001800 	.word	0x40001800

0800715c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68da      	ldr	r2, [r3, #12]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f022 0201 	bic.w	r2, r2, #1
 8007172:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	6a1a      	ldr	r2, [r3, #32]
 800717a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800717e:	4013      	ands	r3, r2
 8007180:	2b00      	cmp	r3, #0
 8007182:	d10f      	bne.n	80071a4 <HAL_TIM_Base_Stop_IT+0x48>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6a1a      	ldr	r2, [r3, #32]
 800718a:	f240 4344 	movw	r3, #1092	@ 0x444
 800718e:	4013      	ands	r3, r2
 8007190:	2b00      	cmp	r3, #0
 8007192:	d107      	bne.n	80071a4 <HAL_TIM_Base_Stop_IT+0x48>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f022 0201 	bic.w	r2, r2, #1
 80071a2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	370c      	adds	r7, #12
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr

080071ba <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071ba:	b580      	push	{r7, lr}
 80071bc:	b084      	sub	sp, #16
 80071be:	af00      	add	r7, sp, #0
 80071c0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f003 0302 	and.w	r3, r3, #2
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d020      	beq.n	800721e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f003 0302 	and.w	r3, r3, #2
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d01b      	beq.n	800721e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f06f 0202 	mvn.w	r2, #2
 80071ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	f003 0303 	and.w	r3, r3, #3
 8007200:	2b00      	cmp	r3, #0
 8007202:	d003      	beq.n	800720c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f999 	bl	800753c <HAL_TIM_IC_CaptureCallback>
 800720a:	e005      	b.n	8007218 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f98b 	bl	8007528 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f99c 	bl	8007550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	f003 0304 	and.w	r3, r3, #4
 8007224:	2b00      	cmp	r3, #0
 8007226:	d020      	beq.n	800726a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f003 0304 	and.w	r3, r3, #4
 800722e:	2b00      	cmp	r3, #0
 8007230:	d01b      	beq.n	800726a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f06f 0204 	mvn.w	r2, #4
 800723a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2202      	movs	r2, #2
 8007240:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800724c:	2b00      	cmp	r3, #0
 800724e:	d003      	beq.n	8007258 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 f973 	bl	800753c <HAL_TIM_IC_CaptureCallback>
 8007256:	e005      	b.n	8007264 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 f965 	bl	8007528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f000 f976 	bl	8007550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f003 0308 	and.w	r3, r3, #8
 8007270:	2b00      	cmp	r3, #0
 8007272:	d020      	beq.n	80072b6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f003 0308 	and.w	r3, r3, #8
 800727a:	2b00      	cmp	r3, #0
 800727c:	d01b      	beq.n	80072b6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f06f 0208 	mvn.w	r2, #8
 8007286:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2204      	movs	r2, #4
 800728c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	69db      	ldr	r3, [r3, #28]
 8007294:	f003 0303 	and.w	r3, r3, #3
 8007298:	2b00      	cmp	r3, #0
 800729a:	d003      	beq.n	80072a4 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f94d 	bl	800753c <HAL_TIM_IC_CaptureCallback>
 80072a2:	e005      	b.n	80072b0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f000 f93f 	bl	8007528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 f950 	bl	8007550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	f003 0310 	and.w	r3, r3, #16
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d020      	beq.n	8007302 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f003 0310 	and.w	r3, r3, #16
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d01b      	beq.n	8007302 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f06f 0210 	mvn.w	r2, #16
 80072d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2208      	movs	r2, #8
 80072d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	69db      	ldr	r3, [r3, #28]
 80072e0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d003      	beq.n	80072f0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f927 	bl	800753c <HAL_TIM_IC_CaptureCallback>
 80072ee:	e005      	b.n	80072fc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f919 	bl	8007528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f92a 	bl	8007550 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	f003 0301 	and.w	r3, r3, #1
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00c      	beq.n	8007326 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f003 0301 	and.w	r3, r3, #1
 8007312:	2b00      	cmp	r3, #0
 8007314:	d007      	beq.n	8007326 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f06f 0201 	mvn.w	r2, #1
 800731e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7fb ff93 	bl	800324c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00c      	beq.n	800734a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007336:	2b00      	cmp	r3, #0
 8007338:	d007      	beq.n	800734a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f000 fae3 	bl	8007910 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00c      	beq.n	800736e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800735a:	2b00      	cmp	r3, #0
 800735c:	d007      	beq.n	800736e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007366:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f8fb 	bl	8007564 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	f003 0320 	and.w	r3, r3, #32
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00c      	beq.n	8007392 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	f003 0320 	and.w	r3, r3, #32
 800737e:	2b00      	cmp	r3, #0
 8007380:	d007      	beq.n	8007392 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f06f 0220 	mvn.w	r2, #32
 800738a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fab5 	bl	80078fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007392:	bf00      	nop
 8007394:	3710      	adds	r7, #16
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}

0800739a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800739a:	b580      	push	{r7, lr}
 800739c:	b084      	sub	sp, #16
 800739e:	af00      	add	r7, sp, #0
 80073a0:	6078      	str	r0, [r7, #4]
 80073a2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d101      	bne.n	80073b6 <HAL_TIM_ConfigClockSource+0x1c>
 80073b2:	2302      	movs	r3, #2
 80073b4:	e0b4      	b.n	8007520 <HAL_TIM_ConfigClockSource+0x186>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2202      	movs	r2, #2
 80073c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80073d4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073dc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073ee:	d03e      	beq.n	800746e <HAL_TIM_ConfigClockSource+0xd4>
 80073f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073f4:	f200 8087 	bhi.w	8007506 <HAL_TIM_ConfigClockSource+0x16c>
 80073f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073fc:	f000 8086 	beq.w	800750c <HAL_TIM_ConfigClockSource+0x172>
 8007400:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007404:	d87f      	bhi.n	8007506 <HAL_TIM_ConfigClockSource+0x16c>
 8007406:	2b70      	cmp	r3, #112	@ 0x70
 8007408:	d01a      	beq.n	8007440 <HAL_TIM_ConfigClockSource+0xa6>
 800740a:	2b70      	cmp	r3, #112	@ 0x70
 800740c:	d87b      	bhi.n	8007506 <HAL_TIM_ConfigClockSource+0x16c>
 800740e:	2b60      	cmp	r3, #96	@ 0x60
 8007410:	d050      	beq.n	80074b4 <HAL_TIM_ConfigClockSource+0x11a>
 8007412:	2b60      	cmp	r3, #96	@ 0x60
 8007414:	d877      	bhi.n	8007506 <HAL_TIM_ConfigClockSource+0x16c>
 8007416:	2b50      	cmp	r3, #80	@ 0x50
 8007418:	d03c      	beq.n	8007494 <HAL_TIM_ConfigClockSource+0xfa>
 800741a:	2b50      	cmp	r3, #80	@ 0x50
 800741c:	d873      	bhi.n	8007506 <HAL_TIM_ConfigClockSource+0x16c>
 800741e:	2b40      	cmp	r3, #64	@ 0x40
 8007420:	d058      	beq.n	80074d4 <HAL_TIM_ConfigClockSource+0x13a>
 8007422:	2b40      	cmp	r3, #64	@ 0x40
 8007424:	d86f      	bhi.n	8007506 <HAL_TIM_ConfigClockSource+0x16c>
 8007426:	2b30      	cmp	r3, #48	@ 0x30
 8007428:	d064      	beq.n	80074f4 <HAL_TIM_ConfigClockSource+0x15a>
 800742a:	2b30      	cmp	r3, #48	@ 0x30
 800742c:	d86b      	bhi.n	8007506 <HAL_TIM_ConfigClockSource+0x16c>
 800742e:	2b20      	cmp	r3, #32
 8007430:	d060      	beq.n	80074f4 <HAL_TIM_ConfigClockSource+0x15a>
 8007432:	2b20      	cmp	r3, #32
 8007434:	d867      	bhi.n	8007506 <HAL_TIM_ConfigClockSource+0x16c>
 8007436:	2b00      	cmp	r3, #0
 8007438:	d05c      	beq.n	80074f4 <HAL_TIM_ConfigClockSource+0x15a>
 800743a:	2b10      	cmp	r3, #16
 800743c:	d05a      	beq.n	80074f4 <HAL_TIM_ConfigClockSource+0x15a>
 800743e:	e062      	b.n	8007506 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007450:	f000 f9b8 	bl	80077c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007462:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	609a      	str	r2, [r3, #8]
      break;
 800746c:	e04f      	b.n	800750e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800747e:	f000 f9a1 	bl	80077c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	689a      	ldr	r2, [r3, #8]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007490:	609a      	str	r2, [r3, #8]
      break;
 8007492:	e03c      	b.n	800750e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074a0:	461a      	mov	r2, r3
 80074a2:	f000 f915 	bl	80076d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2150      	movs	r1, #80	@ 0x50
 80074ac:	4618      	mov	r0, r3
 80074ae:	f000 f96e 	bl	800778e <TIM_ITRx_SetConfig>
      break;
 80074b2:	e02c      	b.n	800750e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074c0:	461a      	mov	r2, r3
 80074c2:	f000 f934 	bl	800772e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	2160      	movs	r1, #96	@ 0x60
 80074cc:	4618      	mov	r0, r3
 80074ce:	f000 f95e 	bl	800778e <TIM_ITRx_SetConfig>
      break;
 80074d2:	e01c      	b.n	800750e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074e0:	461a      	mov	r2, r3
 80074e2:	f000 f8f5 	bl	80076d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2140      	movs	r1, #64	@ 0x40
 80074ec:	4618      	mov	r0, r3
 80074ee:	f000 f94e 	bl	800778e <TIM_ITRx_SetConfig>
      break;
 80074f2:	e00c      	b.n	800750e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4619      	mov	r1, r3
 80074fe:	4610      	mov	r0, r2
 8007500:	f000 f945 	bl	800778e <TIM_ITRx_SetConfig>
      break;
 8007504:	e003      	b.n	800750e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007506:	2301      	movs	r3, #1
 8007508:	73fb      	strb	r3, [r7, #15]
      break;
 800750a:	e000      	b.n	800750e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800750c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2200      	movs	r2, #0
 800751a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800751e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}

08007528 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	4a46      	ldr	r2, [pc, #280]	@ (80076a4 <TIM_Base_SetConfig+0x12c>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d013      	beq.n	80075b8 <TIM_Base_SetConfig+0x40>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007596:	d00f      	beq.n	80075b8 <TIM_Base_SetConfig+0x40>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a43      	ldr	r2, [pc, #268]	@ (80076a8 <TIM_Base_SetConfig+0x130>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d00b      	beq.n	80075b8 <TIM_Base_SetConfig+0x40>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a42      	ldr	r2, [pc, #264]	@ (80076ac <TIM_Base_SetConfig+0x134>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d007      	beq.n	80075b8 <TIM_Base_SetConfig+0x40>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a41      	ldr	r2, [pc, #260]	@ (80076b0 <TIM_Base_SetConfig+0x138>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d003      	beq.n	80075b8 <TIM_Base_SetConfig+0x40>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a40      	ldr	r2, [pc, #256]	@ (80076b4 <TIM_Base_SetConfig+0x13c>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d108      	bne.n	80075ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4a35      	ldr	r2, [pc, #212]	@ (80076a4 <TIM_Base_SetConfig+0x12c>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d02b      	beq.n	800762a <TIM_Base_SetConfig+0xb2>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075d8:	d027      	beq.n	800762a <TIM_Base_SetConfig+0xb2>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a32      	ldr	r2, [pc, #200]	@ (80076a8 <TIM_Base_SetConfig+0x130>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d023      	beq.n	800762a <TIM_Base_SetConfig+0xb2>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a31      	ldr	r2, [pc, #196]	@ (80076ac <TIM_Base_SetConfig+0x134>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d01f      	beq.n	800762a <TIM_Base_SetConfig+0xb2>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a30      	ldr	r2, [pc, #192]	@ (80076b0 <TIM_Base_SetConfig+0x138>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d01b      	beq.n	800762a <TIM_Base_SetConfig+0xb2>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a2f      	ldr	r2, [pc, #188]	@ (80076b4 <TIM_Base_SetConfig+0x13c>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d017      	beq.n	800762a <TIM_Base_SetConfig+0xb2>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a2e      	ldr	r2, [pc, #184]	@ (80076b8 <TIM_Base_SetConfig+0x140>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d013      	beq.n	800762a <TIM_Base_SetConfig+0xb2>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a2d      	ldr	r2, [pc, #180]	@ (80076bc <TIM_Base_SetConfig+0x144>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d00f      	beq.n	800762a <TIM_Base_SetConfig+0xb2>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a2c      	ldr	r2, [pc, #176]	@ (80076c0 <TIM_Base_SetConfig+0x148>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d00b      	beq.n	800762a <TIM_Base_SetConfig+0xb2>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a2b      	ldr	r2, [pc, #172]	@ (80076c4 <TIM_Base_SetConfig+0x14c>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d007      	beq.n	800762a <TIM_Base_SetConfig+0xb2>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a2a      	ldr	r2, [pc, #168]	@ (80076c8 <TIM_Base_SetConfig+0x150>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d003      	beq.n	800762a <TIM_Base_SetConfig+0xb2>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a29      	ldr	r2, [pc, #164]	@ (80076cc <TIM_Base_SetConfig+0x154>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d108      	bne.n	800763c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	4313      	orrs	r3, r2
 800763a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	695b      	ldr	r3, [r3, #20]
 8007646:	4313      	orrs	r3, r2
 8007648:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	689a      	ldr	r2, [r3, #8]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a10      	ldr	r2, [pc, #64]	@ (80076a4 <TIM_Base_SetConfig+0x12c>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d003      	beq.n	8007670 <TIM_Base_SetConfig+0xf8>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a12      	ldr	r2, [pc, #72]	@ (80076b4 <TIM_Base_SetConfig+0x13c>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d103      	bne.n	8007678 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	691a      	ldr	r2, [r3, #16]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	f003 0301 	and.w	r3, r3, #1
 8007686:	2b01      	cmp	r3, #1
 8007688:	d105      	bne.n	8007696 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	691b      	ldr	r3, [r3, #16]
 800768e:	f023 0201 	bic.w	r2, r3, #1
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	611a      	str	r2, [r3, #16]
  }
}
 8007696:	bf00      	nop
 8007698:	3714      	adds	r7, #20
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	40010000 	.word	0x40010000
 80076a8:	40000400 	.word	0x40000400
 80076ac:	40000800 	.word	0x40000800
 80076b0:	40000c00 	.word	0x40000c00
 80076b4:	40010400 	.word	0x40010400
 80076b8:	40014000 	.word	0x40014000
 80076bc:	40014400 	.word	0x40014400
 80076c0:	40014800 	.word	0x40014800
 80076c4:	40001800 	.word	0x40001800
 80076c8:	40001c00 	.word	0x40001c00
 80076cc:	40002000 	.word	0x40002000

080076d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b087      	sub	sp, #28
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	60f8      	str	r0, [r7, #12]
 80076d8:	60b9      	str	r1, [r7, #8]
 80076da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6a1b      	ldr	r3, [r3, #32]
 80076e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	f023 0201 	bic.w	r2, r3, #1
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	699b      	ldr	r3, [r3, #24]
 80076f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	011b      	lsls	r3, r3, #4
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	4313      	orrs	r3, r2
 8007704:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	f023 030a 	bic.w	r3, r3, #10
 800770c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	4313      	orrs	r3, r2
 8007714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	693a      	ldr	r2, [r7, #16]
 800771a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	621a      	str	r2, [r3, #32]
}
 8007722:	bf00      	nop
 8007724:	371c      	adds	r7, #28
 8007726:	46bd      	mov	sp, r7
 8007728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772c:	4770      	bx	lr

0800772e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800772e:	b480      	push	{r7}
 8007730:	b087      	sub	sp, #28
 8007732:	af00      	add	r7, sp, #0
 8007734:	60f8      	str	r0, [r7, #12]
 8007736:	60b9      	str	r1, [r7, #8]
 8007738:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	6a1b      	ldr	r3, [r3, #32]
 8007744:	f023 0210 	bic.w	r2, r3, #16
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	699b      	ldr	r3, [r3, #24]
 8007750:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007758:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	031b      	lsls	r3, r3, #12
 800775e:	693a      	ldr	r2, [r7, #16]
 8007760:	4313      	orrs	r3, r2
 8007762:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800776a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	011b      	lsls	r3, r3, #4
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	4313      	orrs	r3, r2
 8007774:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	693a      	ldr	r2, [r7, #16]
 800777a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	621a      	str	r2, [r3, #32]
}
 8007782:	bf00      	nop
 8007784:	371c      	adds	r7, #28
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr

0800778e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800778e:	b480      	push	{r7}
 8007790:	b085      	sub	sp, #20
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	4313      	orrs	r3, r2
 80077ac:	f043 0307 	orr.w	r3, r3, #7
 80077b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	609a      	str	r2, [r3, #8]
}
 80077b8:	bf00      	nop
 80077ba:	3714      	adds	r7, #20
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b087      	sub	sp, #28
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
 80077d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	021a      	lsls	r2, r3, #8
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	431a      	orrs	r2, r3
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	4313      	orrs	r3, r2
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	609a      	str	r2, [r3, #8]
}
 80077f8:	bf00      	nop
 80077fa:	371c      	adds	r7, #28
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
 800780c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007814:	2b01      	cmp	r3, #1
 8007816:	d101      	bne.n	800781c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007818:	2302      	movs	r3, #2
 800781a:	e05a      	b.n	80078d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2202      	movs	r2, #2
 8007828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007842:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	68fa      	ldr	r2, [r7, #12]
 800784a:	4313      	orrs	r3, r2
 800784c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a21      	ldr	r2, [pc, #132]	@ (80078e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d022      	beq.n	80078a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007868:	d01d      	beq.n	80078a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a1d      	ldr	r2, [pc, #116]	@ (80078e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d018      	beq.n	80078a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a1b      	ldr	r2, [pc, #108]	@ (80078e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d013      	beq.n	80078a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a1a      	ldr	r2, [pc, #104]	@ (80078ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d00e      	beq.n	80078a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a18      	ldr	r2, [pc, #96]	@ (80078f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d009      	beq.n	80078a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a17      	ldr	r2, [pc, #92]	@ (80078f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007898:	4293      	cmp	r3, r2
 800789a:	d004      	beq.n	80078a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	4a15      	ldr	r2, [pc, #84]	@ (80078f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d10c      	bne.n	80078c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	685b      	ldr	r3, [r3, #4]
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68ba      	ldr	r2, [r7, #8]
 80078be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2201      	movs	r2, #1
 80078c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3714      	adds	r7, #20
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	40010000 	.word	0x40010000
 80078e4:	40000400 	.word	0x40000400
 80078e8:	40000800 	.word	0x40000800
 80078ec:	40000c00 	.word	0x40000c00
 80078f0:	40010400 	.word	0x40010400
 80078f4:	40014000 	.word	0x40014000
 80078f8:	40001800 	.word	0x40001800

080078fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007918:	bf00      	nop
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <findslot>:
 8007924:	4b0a      	ldr	r3, [pc, #40]	@ (8007950 <findslot+0x2c>)
 8007926:	b510      	push	{r4, lr}
 8007928:	4604      	mov	r4, r0
 800792a:	6818      	ldr	r0, [r3, #0]
 800792c:	b118      	cbz	r0, 8007936 <findslot+0x12>
 800792e:	6a03      	ldr	r3, [r0, #32]
 8007930:	b90b      	cbnz	r3, 8007936 <findslot+0x12>
 8007932:	f000 fb19 	bl	8007f68 <__sinit>
 8007936:	2c13      	cmp	r4, #19
 8007938:	d807      	bhi.n	800794a <findslot+0x26>
 800793a:	4806      	ldr	r0, [pc, #24]	@ (8007954 <findslot+0x30>)
 800793c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8007940:	3201      	adds	r2, #1
 8007942:	d002      	beq.n	800794a <findslot+0x26>
 8007944:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8007948:	bd10      	pop	{r4, pc}
 800794a:	2000      	movs	r0, #0
 800794c:	e7fc      	b.n	8007948 <findslot+0x24>
 800794e:	bf00      	nop
 8007950:	20000030 	.word	0x20000030
 8007954:	20025ce4 	.word	0x20025ce4

08007958 <error>:
 8007958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795a:	4604      	mov	r4, r0
 800795c:	f000 fbb2 	bl	80080c4 <__errno>
 8007960:	2613      	movs	r6, #19
 8007962:	4605      	mov	r5, r0
 8007964:	2700      	movs	r7, #0
 8007966:	4630      	mov	r0, r6
 8007968:	4639      	mov	r1, r7
 800796a:	beab      	bkpt	0x00ab
 800796c:	4606      	mov	r6, r0
 800796e:	602e      	str	r6, [r5, #0]
 8007970:	4620      	mov	r0, r4
 8007972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007974 <checkerror>:
 8007974:	1c43      	adds	r3, r0, #1
 8007976:	d101      	bne.n	800797c <checkerror+0x8>
 8007978:	f7ff bfee 	b.w	8007958 <error>
 800797c:	4770      	bx	lr

0800797e <_swiread>:
 800797e:	b530      	push	{r4, r5, lr}
 8007980:	b085      	sub	sp, #20
 8007982:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007986:	9203      	str	r2, [sp, #12]
 8007988:	2406      	movs	r4, #6
 800798a:	ad01      	add	r5, sp, #4
 800798c:	4620      	mov	r0, r4
 800798e:	4629      	mov	r1, r5
 8007990:	beab      	bkpt	0x00ab
 8007992:	4604      	mov	r4, r0
 8007994:	4620      	mov	r0, r4
 8007996:	f7ff ffed 	bl	8007974 <checkerror>
 800799a:	b005      	add	sp, #20
 800799c:	bd30      	pop	{r4, r5, pc}

0800799e <_read>:
 800799e:	b570      	push	{r4, r5, r6, lr}
 80079a0:	460e      	mov	r6, r1
 80079a2:	4614      	mov	r4, r2
 80079a4:	f7ff ffbe 	bl	8007924 <findslot>
 80079a8:	4605      	mov	r5, r0
 80079aa:	b930      	cbnz	r0, 80079ba <_read+0x1c>
 80079ac:	f000 fb8a 	bl	80080c4 <__errno>
 80079b0:	2309      	movs	r3, #9
 80079b2:	6003      	str	r3, [r0, #0]
 80079b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079b8:	bd70      	pop	{r4, r5, r6, pc}
 80079ba:	6800      	ldr	r0, [r0, #0]
 80079bc:	4622      	mov	r2, r4
 80079be:	4631      	mov	r1, r6
 80079c0:	f7ff ffdd 	bl	800797e <_swiread>
 80079c4:	1c43      	adds	r3, r0, #1
 80079c6:	d0f5      	beq.n	80079b4 <_read+0x16>
 80079c8:	686b      	ldr	r3, [r5, #4]
 80079ca:	1a20      	subs	r0, r4, r0
 80079cc:	4403      	add	r3, r0
 80079ce:	606b      	str	r3, [r5, #4]
 80079d0:	e7f2      	b.n	80079b8 <_read+0x1a>

080079d2 <_swilseek>:
 80079d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079d4:	460c      	mov	r4, r1
 80079d6:	4616      	mov	r6, r2
 80079d8:	f7ff ffa4 	bl	8007924 <findslot>
 80079dc:	4605      	mov	r5, r0
 80079de:	b940      	cbnz	r0, 80079f2 <_swilseek+0x20>
 80079e0:	f000 fb70 	bl	80080c4 <__errno>
 80079e4:	2309      	movs	r3, #9
 80079e6:	6003      	str	r3, [r0, #0]
 80079e8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80079ec:	4620      	mov	r0, r4
 80079ee:	b003      	add	sp, #12
 80079f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079f2:	2e02      	cmp	r6, #2
 80079f4:	d903      	bls.n	80079fe <_swilseek+0x2c>
 80079f6:	f000 fb65 	bl	80080c4 <__errno>
 80079fa:	2316      	movs	r3, #22
 80079fc:	e7f3      	b.n	80079e6 <_swilseek+0x14>
 80079fe:	2e01      	cmp	r6, #1
 8007a00:	d112      	bne.n	8007a28 <_swilseek+0x56>
 8007a02:	6843      	ldr	r3, [r0, #4]
 8007a04:	18e4      	adds	r4, r4, r3
 8007a06:	d4f6      	bmi.n	80079f6 <_swilseek+0x24>
 8007a08:	682b      	ldr	r3, [r5, #0]
 8007a0a:	260a      	movs	r6, #10
 8007a0c:	e9cd 3400 	strd	r3, r4, [sp]
 8007a10:	466f      	mov	r7, sp
 8007a12:	4630      	mov	r0, r6
 8007a14:	4639      	mov	r1, r7
 8007a16:	beab      	bkpt	0x00ab
 8007a18:	4606      	mov	r6, r0
 8007a1a:	4630      	mov	r0, r6
 8007a1c:	f7ff ffaa 	bl	8007974 <checkerror>
 8007a20:	2800      	cmp	r0, #0
 8007a22:	dbe1      	blt.n	80079e8 <_swilseek+0x16>
 8007a24:	606c      	str	r4, [r5, #4]
 8007a26:	e7e1      	b.n	80079ec <_swilseek+0x1a>
 8007a28:	2e02      	cmp	r6, #2
 8007a2a:	6803      	ldr	r3, [r0, #0]
 8007a2c:	d1ec      	bne.n	8007a08 <_swilseek+0x36>
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	260c      	movs	r6, #12
 8007a32:	466f      	mov	r7, sp
 8007a34:	4630      	mov	r0, r6
 8007a36:	4639      	mov	r1, r7
 8007a38:	beab      	bkpt	0x00ab
 8007a3a:	4606      	mov	r6, r0
 8007a3c:	4630      	mov	r0, r6
 8007a3e:	f7ff ff99 	bl	8007974 <checkerror>
 8007a42:	1c43      	adds	r3, r0, #1
 8007a44:	d0d0      	beq.n	80079e8 <_swilseek+0x16>
 8007a46:	4404      	add	r4, r0
 8007a48:	e7de      	b.n	8007a08 <_swilseek+0x36>

08007a4a <_lseek>:
 8007a4a:	f7ff bfc2 	b.w	80079d2 <_swilseek>

08007a4e <_swiwrite>:
 8007a4e:	b530      	push	{r4, r5, lr}
 8007a50:	b085      	sub	sp, #20
 8007a52:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007a56:	9203      	str	r2, [sp, #12]
 8007a58:	2405      	movs	r4, #5
 8007a5a:	ad01      	add	r5, sp, #4
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	4629      	mov	r1, r5
 8007a60:	beab      	bkpt	0x00ab
 8007a62:	4604      	mov	r4, r0
 8007a64:	4620      	mov	r0, r4
 8007a66:	f7ff ff85 	bl	8007974 <checkerror>
 8007a6a:	b005      	add	sp, #20
 8007a6c:	bd30      	pop	{r4, r5, pc}

08007a6e <_write>:
 8007a6e:	b570      	push	{r4, r5, r6, lr}
 8007a70:	460e      	mov	r6, r1
 8007a72:	4615      	mov	r5, r2
 8007a74:	f7ff ff56 	bl	8007924 <findslot>
 8007a78:	4604      	mov	r4, r0
 8007a7a:	b930      	cbnz	r0, 8007a8a <_write+0x1c>
 8007a7c:	f000 fb22 	bl	80080c4 <__errno>
 8007a80:	2309      	movs	r3, #9
 8007a82:	6003      	str	r3, [r0, #0]
 8007a84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a88:	bd70      	pop	{r4, r5, r6, pc}
 8007a8a:	6800      	ldr	r0, [r0, #0]
 8007a8c:	462a      	mov	r2, r5
 8007a8e:	4631      	mov	r1, r6
 8007a90:	f7ff ffdd 	bl	8007a4e <_swiwrite>
 8007a94:	1e03      	subs	r3, r0, #0
 8007a96:	dbf5      	blt.n	8007a84 <_write+0x16>
 8007a98:	6862      	ldr	r2, [r4, #4]
 8007a9a:	1ae8      	subs	r0, r5, r3
 8007a9c:	4402      	add	r2, r0
 8007a9e:	42ab      	cmp	r3, r5
 8007aa0:	6062      	str	r2, [r4, #4]
 8007aa2:	d1f1      	bne.n	8007a88 <_write+0x1a>
 8007aa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007aa8:	2000      	movs	r0, #0
 8007aaa:	f7ff bf55 	b.w	8007958 <error>

08007aae <_swiclose>:
 8007aae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ab0:	2402      	movs	r4, #2
 8007ab2:	9001      	str	r0, [sp, #4]
 8007ab4:	ad01      	add	r5, sp, #4
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	4629      	mov	r1, r5
 8007aba:	beab      	bkpt	0x00ab
 8007abc:	4604      	mov	r4, r0
 8007abe:	4620      	mov	r0, r4
 8007ac0:	f7ff ff58 	bl	8007974 <checkerror>
 8007ac4:	b003      	add	sp, #12
 8007ac6:	bd30      	pop	{r4, r5, pc}

08007ac8 <_close>:
 8007ac8:	b538      	push	{r3, r4, r5, lr}
 8007aca:	4605      	mov	r5, r0
 8007acc:	f7ff ff2a 	bl	8007924 <findslot>
 8007ad0:	4604      	mov	r4, r0
 8007ad2:	b930      	cbnz	r0, 8007ae2 <_close+0x1a>
 8007ad4:	f000 faf6 	bl	80080c4 <__errno>
 8007ad8:	2309      	movs	r3, #9
 8007ada:	6003      	str	r3, [r0, #0]
 8007adc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ae0:	bd38      	pop	{r3, r4, r5, pc}
 8007ae2:	3d01      	subs	r5, #1
 8007ae4:	2d01      	cmp	r5, #1
 8007ae6:	d809      	bhi.n	8007afc <_close+0x34>
 8007ae8:	4b07      	ldr	r3, [pc, #28]	@ (8007b08 <_close+0x40>)
 8007aea:	689a      	ldr	r2, [r3, #8]
 8007aec:	691b      	ldr	r3, [r3, #16]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d104      	bne.n	8007afc <_close+0x34>
 8007af2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007af6:	6023      	str	r3, [r4, #0]
 8007af8:	2000      	movs	r0, #0
 8007afa:	e7f1      	b.n	8007ae0 <_close+0x18>
 8007afc:	6820      	ldr	r0, [r4, #0]
 8007afe:	f7ff ffd6 	bl	8007aae <_swiclose>
 8007b02:	2800      	cmp	r0, #0
 8007b04:	d0f5      	beq.n	8007af2 <_close+0x2a>
 8007b06:	e7eb      	b.n	8007ae0 <_close+0x18>
 8007b08:	20025ce4 	.word	0x20025ce4

08007b0c <_swistat>:
 8007b0c:	b570      	push	{r4, r5, r6, lr}
 8007b0e:	460c      	mov	r4, r1
 8007b10:	f7ff ff08 	bl	8007924 <findslot>
 8007b14:	4605      	mov	r5, r0
 8007b16:	b930      	cbnz	r0, 8007b26 <_swistat+0x1a>
 8007b18:	f000 fad4 	bl	80080c4 <__errno>
 8007b1c:	2309      	movs	r3, #9
 8007b1e:	6003      	str	r3, [r0, #0]
 8007b20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b24:	bd70      	pop	{r4, r5, r6, pc}
 8007b26:	6863      	ldr	r3, [r4, #4]
 8007b28:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007b2c:	6063      	str	r3, [r4, #4]
 8007b2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b32:	64a3      	str	r3, [r4, #72]	@ 0x48
 8007b34:	260c      	movs	r6, #12
 8007b36:	4630      	mov	r0, r6
 8007b38:	4629      	mov	r1, r5
 8007b3a:	beab      	bkpt	0x00ab
 8007b3c:	4605      	mov	r5, r0
 8007b3e:	4628      	mov	r0, r5
 8007b40:	f7ff ff18 	bl	8007974 <checkerror>
 8007b44:	1c43      	adds	r3, r0, #1
 8007b46:	d0eb      	beq.n	8007b20 <_swistat+0x14>
 8007b48:	6120      	str	r0, [r4, #16]
 8007b4a:	2000      	movs	r0, #0
 8007b4c:	e7ea      	b.n	8007b24 <_swistat+0x18>

08007b4e <_fstat>:
 8007b4e:	460b      	mov	r3, r1
 8007b50:	b510      	push	{r4, lr}
 8007b52:	2100      	movs	r1, #0
 8007b54:	4604      	mov	r4, r0
 8007b56:	2258      	movs	r2, #88	@ 0x58
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f000 faab 	bl	80080b4 <memset>
 8007b5e:	4601      	mov	r1, r0
 8007b60:	4620      	mov	r0, r4
 8007b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b66:	f7ff bfd1 	b.w	8007b0c <_swistat>

08007b6a <_stat>:
 8007b6a:	b538      	push	{r3, r4, r5, lr}
 8007b6c:	460d      	mov	r5, r1
 8007b6e:	4604      	mov	r4, r0
 8007b70:	2258      	movs	r2, #88	@ 0x58
 8007b72:	2100      	movs	r1, #0
 8007b74:	4628      	mov	r0, r5
 8007b76:	f000 fa9d 	bl	80080b4 <memset>
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	f000 f811 	bl	8007ba4 <_swiopen>
 8007b82:	1c43      	adds	r3, r0, #1
 8007b84:	4604      	mov	r4, r0
 8007b86:	d00b      	beq.n	8007ba0 <_stat+0x36>
 8007b88:	686b      	ldr	r3, [r5, #4]
 8007b8a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007b8e:	606b      	str	r3, [r5, #4]
 8007b90:	4629      	mov	r1, r5
 8007b92:	f7ff ffbb 	bl	8007b0c <_swistat>
 8007b96:	4605      	mov	r5, r0
 8007b98:	4620      	mov	r0, r4
 8007b9a:	f7ff ff95 	bl	8007ac8 <_close>
 8007b9e:	462c      	mov	r4, r5
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	bd38      	pop	{r3, r4, r5, pc}

08007ba4 <_swiopen>:
 8007ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba8:	4f29      	ldr	r7, [pc, #164]	@ (8007c50 <_swiopen+0xac>)
 8007baa:	b096      	sub	sp, #88	@ 0x58
 8007bac:	4682      	mov	sl, r0
 8007bae:	460e      	mov	r6, r1
 8007bb0:	2400      	movs	r4, #0
 8007bb2:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8007bbc:	d00c      	beq.n	8007bd8 <_swiopen+0x34>
 8007bbe:	3401      	adds	r4, #1
 8007bc0:	2c14      	cmp	r4, #20
 8007bc2:	d1f6      	bne.n	8007bb2 <_swiopen+0xe>
 8007bc4:	f000 fa7e 	bl	80080c4 <__errno>
 8007bc8:	2318      	movs	r3, #24
 8007bca:	6003      	str	r3, [r0, #0]
 8007bcc:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	b016      	add	sp, #88	@ 0x58
 8007bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bd8:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8007bdc:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007be0:	46e9      	mov	r9, sp
 8007be2:	d109      	bne.n	8007bf8 <_swiopen+0x54>
 8007be4:	4649      	mov	r1, r9
 8007be6:	4650      	mov	r0, sl
 8007be8:	f7ff ffbf 	bl	8007b6a <_stat>
 8007bec:	3001      	adds	r0, #1
 8007bee:	d003      	beq.n	8007bf8 <_swiopen+0x54>
 8007bf0:	f000 fa68 	bl	80080c4 <__errno>
 8007bf4:	2311      	movs	r3, #17
 8007bf6:	e7e8      	b.n	8007bca <_swiopen+0x26>
 8007bf8:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8007bfc:	f240 6301 	movw	r3, #1537	@ 0x601
 8007c00:	07b2      	lsls	r2, r6, #30
 8007c02:	bf48      	it	mi
 8007c04:	f045 0502 	orrmi.w	r5, r5, #2
 8007c08:	421e      	tst	r6, r3
 8007c0a:	bf18      	it	ne
 8007c0c:	f045 0504 	orrne.w	r5, r5, #4
 8007c10:	0733      	lsls	r3, r6, #28
 8007c12:	bf48      	it	mi
 8007c14:	f025 0504 	bicmi.w	r5, r5, #4
 8007c18:	4650      	mov	r0, sl
 8007c1a:	bf48      	it	mi
 8007c1c:	f045 0508 	orrmi.w	r5, r5, #8
 8007c20:	f8cd a000 	str.w	sl, [sp]
 8007c24:	f7f8 fae4 	bl	80001f0 <strlen>
 8007c28:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8007c2c:	2501      	movs	r5, #1
 8007c2e:	4628      	mov	r0, r5
 8007c30:	4649      	mov	r1, r9
 8007c32:	beab      	bkpt	0x00ab
 8007c34:	4605      	mov	r5, r0
 8007c36:	2d00      	cmp	r5, #0
 8007c38:	db05      	blt.n	8007c46 <_swiopen+0xa2>
 8007c3a:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8007c3e:	4447      	add	r7, r8
 8007c40:	2300      	movs	r3, #0
 8007c42:	607b      	str	r3, [r7, #4]
 8007c44:	e7c4      	b.n	8007bd0 <_swiopen+0x2c>
 8007c46:	4628      	mov	r0, r5
 8007c48:	f7ff fe86 	bl	8007958 <error>
 8007c4c:	4604      	mov	r4, r0
 8007c4e:	e7bf      	b.n	8007bd0 <_swiopen+0x2c>
 8007c50:	20025ce4 	.word	0x20025ce4

08007c54 <_get_semihosting_exts>:
 8007c54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c58:	4606      	mov	r6, r0
 8007c5a:	460f      	mov	r7, r1
 8007c5c:	4829      	ldr	r0, [pc, #164]	@ (8007d04 <_get_semihosting_exts+0xb0>)
 8007c5e:	2100      	movs	r1, #0
 8007c60:	4615      	mov	r5, r2
 8007c62:	f7ff ff9f 	bl	8007ba4 <_swiopen>
 8007c66:	462a      	mov	r2, r5
 8007c68:	4604      	mov	r4, r0
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	f000 fa21 	bl	80080b4 <memset>
 8007c72:	1c63      	adds	r3, r4, #1
 8007c74:	d014      	beq.n	8007ca0 <_get_semihosting_exts+0x4c>
 8007c76:	4620      	mov	r0, r4
 8007c78:	f7ff fe54 	bl	8007924 <findslot>
 8007c7c:	f04f 080c 	mov.w	r8, #12
 8007c80:	4681      	mov	r9, r0
 8007c82:	4640      	mov	r0, r8
 8007c84:	4649      	mov	r1, r9
 8007c86:	beab      	bkpt	0x00ab
 8007c88:	4680      	mov	r8, r0
 8007c8a:	4640      	mov	r0, r8
 8007c8c:	f7ff fe72 	bl	8007974 <checkerror>
 8007c90:	2803      	cmp	r0, #3
 8007c92:	dd02      	ble.n	8007c9a <_get_semihosting_exts+0x46>
 8007c94:	1ec3      	subs	r3, r0, #3
 8007c96:	42ab      	cmp	r3, r5
 8007c98:	dc07      	bgt.n	8007caa <_get_semihosting_exts+0x56>
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f7ff ff14 	bl	8007ac8 <_close>
 8007ca0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ca4:	b003      	add	sp, #12
 8007ca6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007caa:	2204      	movs	r2, #4
 8007cac:	eb0d 0102 	add.w	r1, sp, r2
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	f7ff fe74 	bl	800799e <_read>
 8007cb6:	2803      	cmp	r0, #3
 8007cb8:	ddef      	ble.n	8007c9a <_get_semihosting_exts+0x46>
 8007cba:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007cbe:	2b53      	cmp	r3, #83	@ 0x53
 8007cc0:	d1eb      	bne.n	8007c9a <_get_semihosting_exts+0x46>
 8007cc2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007cc6:	2b48      	cmp	r3, #72	@ 0x48
 8007cc8:	d1e7      	bne.n	8007c9a <_get_semihosting_exts+0x46>
 8007cca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007cce:	2b46      	cmp	r3, #70	@ 0x46
 8007cd0:	d1e3      	bne.n	8007c9a <_get_semihosting_exts+0x46>
 8007cd2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007cd6:	2b42      	cmp	r3, #66	@ 0x42
 8007cd8:	d1df      	bne.n	8007c9a <_get_semihosting_exts+0x46>
 8007cda:	2201      	movs	r2, #1
 8007cdc:	4639      	mov	r1, r7
 8007cde:	4620      	mov	r0, r4
 8007ce0:	f7ff fe77 	bl	80079d2 <_swilseek>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	dbd8      	blt.n	8007c9a <_get_semihosting_exts+0x46>
 8007ce8:	462a      	mov	r2, r5
 8007cea:	4631      	mov	r1, r6
 8007cec:	4620      	mov	r0, r4
 8007cee:	f7ff fe56 	bl	800799e <_read>
 8007cf2:	4605      	mov	r5, r0
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f7ff fee7 	bl	8007ac8 <_close>
 8007cfa:	4628      	mov	r0, r5
 8007cfc:	f7ff fe3a 	bl	8007974 <checkerror>
 8007d00:	e7d0      	b.n	8007ca4 <_get_semihosting_exts+0x50>
 8007d02:	bf00      	nop
 8007d04:	0800a030 	.word	0x0800a030

08007d08 <initialise_semihosting_exts>:
 8007d08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d0a:	4d0a      	ldr	r5, [pc, #40]	@ (8007d34 <initialise_semihosting_exts+0x2c>)
 8007d0c:	4c0a      	ldr	r4, [pc, #40]	@ (8007d38 <initialise_semihosting_exts+0x30>)
 8007d0e:	2100      	movs	r1, #0
 8007d10:	2201      	movs	r2, #1
 8007d12:	a801      	add	r0, sp, #4
 8007d14:	6029      	str	r1, [r5, #0]
 8007d16:	6022      	str	r2, [r4, #0]
 8007d18:	f7ff ff9c 	bl	8007c54 <_get_semihosting_exts>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	dd07      	ble.n	8007d30 <initialise_semihosting_exts+0x28>
 8007d20:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007d24:	f003 0201 	and.w	r2, r3, #1
 8007d28:	f003 0302 	and.w	r3, r3, #2
 8007d2c:	602a      	str	r2, [r5, #0]
 8007d2e:	6023      	str	r3, [r4, #0]
 8007d30:	b003      	add	sp, #12
 8007d32:	bd30      	pop	{r4, r5, pc}
 8007d34:	20000020 	.word	0x20000020
 8007d38:	2000001c 	.word	0x2000001c

08007d3c <_has_ext_stdout_stderr>:
 8007d3c:	b510      	push	{r4, lr}
 8007d3e:	4c04      	ldr	r4, [pc, #16]	@ (8007d50 <_has_ext_stdout_stderr+0x14>)
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	da01      	bge.n	8007d4a <_has_ext_stdout_stderr+0xe>
 8007d46:	f7ff ffdf 	bl	8007d08 <initialise_semihosting_exts>
 8007d4a:	6820      	ldr	r0, [r4, #0]
 8007d4c:	bd10      	pop	{r4, pc}
 8007d4e:	bf00      	nop
 8007d50:	2000001c 	.word	0x2000001c

08007d54 <initialise_monitor_handles>:
 8007d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d58:	b085      	sub	sp, #20
 8007d5a:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8007e0c <initialise_monitor_handles+0xb8>
 8007d5e:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d62:	2303      	movs	r3, #3
 8007d64:	2400      	movs	r4, #0
 8007d66:	9303      	str	r3, [sp, #12]
 8007d68:	af01      	add	r7, sp, #4
 8007d6a:	9402      	str	r4, [sp, #8]
 8007d6c:	2501      	movs	r5, #1
 8007d6e:	4628      	mov	r0, r5
 8007d70:	4639      	mov	r1, r7
 8007d72:	beab      	bkpt	0x00ab
 8007d74:	4605      	mov	r5, r0
 8007d76:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8007e10 <initialise_monitor_handles+0xbc>
 8007d7a:	4623      	mov	r3, r4
 8007d7c:	4c20      	ldr	r4, [pc, #128]	@ (8007e00 <initialise_monitor_handles+0xac>)
 8007d7e:	f8c8 5000 	str.w	r5, [r8]
 8007d82:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d86:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	2b14      	cmp	r3, #20
 8007d8e:	d1fa      	bne.n	8007d86 <initialise_monitor_handles+0x32>
 8007d90:	f7ff ffd4 	bl	8007d3c <_has_ext_stdout_stderr>
 8007d94:	4d1b      	ldr	r5, [pc, #108]	@ (8007e04 <initialise_monitor_handles+0xb0>)
 8007d96:	b1d0      	cbz	r0, 8007dce <initialise_monitor_handles+0x7a>
 8007d98:	f04f 0a03 	mov.w	sl, #3
 8007d9c:	2304      	movs	r3, #4
 8007d9e:	f8cd 9004 	str.w	r9, [sp, #4]
 8007da2:	2601      	movs	r6, #1
 8007da4:	f8cd a00c 	str.w	sl, [sp, #12]
 8007da8:	9302      	str	r3, [sp, #8]
 8007daa:	4630      	mov	r0, r6
 8007dac:	4639      	mov	r1, r7
 8007dae:	beab      	bkpt	0x00ab
 8007db0:	4683      	mov	fp, r0
 8007db2:	4b15      	ldr	r3, [pc, #84]	@ (8007e08 <initialise_monitor_handles+0xb4>)
 8007db4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007db8:	f8c3 b000 	str.w	fp, [r3]
 8007dbc:	2308      	movs	r3, #8
 8007dbe:	f8cd a00c 	str.w	sl, [sp, #12]
 8007dc2:	9302      	str	r3, [sp, #8]
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	4639      	mov	r1, r7
 8007dc8:	beab      	bkpt	0x00ab
 8007dca:	4606      	mov	r6, r0
 8007dcc:	602e      	str	r6, [r5, #0]
 8007dce:	682b      	ldr	r3, [r5, #0]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	bf02      	ittt	eq
 8007dd4:	4b0c      	ldreq	r3, [pc, #48]	@ (8007e08 <initialise_monitor_handles+0xb4>)
 8007dd6:	681b      	ldreq	r3, [r3, #0]
 8007dd8:	602b      	streq	r3, [r5, #0]
 8007dda:	2600      	movs	r6, #0
 8007ddc:	f8d8 3000 	ldr.w	r3, [r8]
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	6066      	str	r6, [r4, #4]
 8007de4:	f7ff ffaa 	bl	8007d3c <_has_ext_stdout_stderr>
 8007de8:	b130      	cbz	r0, 8007df8 <initialise_monitor_handles+0xa4>
 8007dea:	4b07      	ldr	r3, [pc, #28]	@ (8007e08 <initialise_monitor_handles+0xb4>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8007df2:	682b      	ldr	r3, [r5, #0]
 8007df4:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8007df8:	b005      	add	sp, #20
 8007dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dfe:	bf00      	nop
 8007e00:	20025ce4 	.word	0x20025ce4
 8007e04:	20025cd8 	.word	0x20025cd8
 8007e08:	20025cdc 	.word	0x20025cdc
 8007e0c:	0800a046 	.word	0x0800a046
 8007e10:	20025ce0 	.word	0x20025ce0

08007e14 <_isatty>:
 8007e14:	b570      	push	{r4, r5, r6, lr}
 8007e16:	f7ff fd85 	bl	8007924 <findslot>
 8007e1a:	2409      	movs	r4, #9
 8007e1c:	4605      	mov	r5, r0
 8007e1e:	b920      	cbnz	r0, 8007e2a <_isatty+0x16>
 8007e20:	f000 f950 	bl	80080c4 <__errno>
 8007e24:	6004      	str	r4, [r0, #0]
 8007e26:	2000      	movs	r0, #0
 8007e28:	bd70      	pop	{r4, r5, r6, pc}
 8007e2a:	4620      	mov	r0, r4
 8007e2c:	4629      	mov	r1, r5
 8007e2e:	beab      	bkpt	0x00ab
 8007e30:	4604      	mov	r4, r0
 8007e32:	2c01      	cmp	r4, #1
 8007e34:	4620      	mov	r0, r4
 8007e36:	d0f7      	beq.n	8007e28 <_isatty+0x14>
 8007e38:	f000 f944 	bl	80080c4 <__errno>
 8007e3c:	2513      	movs	r5, #19
 8007e3e:	4604      	mov	r4, r0
 8007e40:	2600      	movs	r6, #0
 8007e42:	4628      	mov	r0, r5
 8007e44:	4631      	mov	r1, r6
 8007e46:	beab      	bkpt	0x00ab
 8007e48:	4605      	mov	r5, r0
 8007e4a:	6025      	str	r5, [r4, #0]
 8007e4c:	e7eb      	b.n	8007e26 <_isatty+0x12>
	...

08007e50 <std>:
 8007e50:	2300      	movs	r3, #0
 8007e52:	b510      	push	{r4, lr}
 8007e54:	4604      	mov	r4, r0
 8007e56:	e9c0 3300 	strd	r3, r3, [r0]
 8007e5a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e5e:	6083      	str	r3, [r0, #8]
 8007e60:	8181      	strh	r1, [r0, #12]
 8007e62:	6643      	str	r3, [r0, #100]	@ 0x64
 8007e64:	81c2      	strh	r2, [r0, #14]
 8007e66:	6183      	str	r3, [r0, #24]
 8007e68:	4619      	mov	r1, r3
 8007e6a:	2208      	movs	r2, #8
 8007e6c:	305c      	adds	r0, #92	@ 0x5c
 8007e6e:	f000 f921 	bl	80080b4 <memset>
 8007e72:	4b0d      	ldr	r3, [pc, #52]	@ (8007ea8 <std+0x58>)
 8007e74:	6263      	str	r3, [r4, #36]	@ 0x24
 8007e76:	4b0d      	ldr	r3, [pc, #52]	@ (8007eac <std+0x5c>)
 8007e78:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007eb0 <std+0x60>)
 8007e7c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007eb4 <std+0x64>)
 8007e80:	6323      	str	r3, [r4, #48]	@ 0x30
 8007e82:	4b0d      	ldr	r3, [pc, #52]	@ (8007eb8 <std+0x68>)
 8007e84:	6224      	str	r4, [r4, #32]
 8007e86:	429c      	cmp	r4, r3
 8007e88:	d006      	beq.n	8007e98 <std+0x48>
 8007e8a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007e8e:	4294      	cmp	r4, r2
 8007e90:	d002      	beq.n	8007e98 <std+0x48>
 8007e92:	33d0      	adds	r3, #208	@ 0xd0
 8007e94:	429c      	cmp	r4, r3
 8007e96:	d105      	bne.n	8007ea4 <std+0x54>
 8007e98:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ea0:	f000 b93a 	b.w	8008118 <__retarget_lock_init_recursive>
 8007ea4:	bd10      	pop	{r4, pc}
 8007ea6:	bf00      	nop
 8007ea8:	08008971 	.word	0x08008971
 8007eac:	08008993 	.word	0x08008993
 8007eb0:	080089cb 	.word	0x080089cb
 8007eb4:	080089ef 	.word	0x080089ef
 8007eb8:	20025d84 	.word	0x20025d84

08007ebc <stdio_exit_handler>:
 8007ebc:	4a02      	ldr	r2, [pc, #8]	@ (8007ec8 <stdio_exit_handler+0xc>)
 8007ebe:	4903      	ldr	r1, [pc, #12]	@ (8007ecc <stdio_exit_handler+0x10>)
 8007ec0:	4803      	ldr	r0, [pc, #12]	@ (8007ed0 <stdio_exit_handler+0x14>)
 8007ec2:	f000 b869 	b.w	8007f98 <_fwalk_sglue>
 8007ec6:	bf00      	nop
 8007ec8:	20000024 	.word	0x20000024
 8007ecc:	08008909 	.word	0x08008909
 8007ed0:	20000034 	.word	0x20000034

08007ed4 <cleanup_stdio>:
 8007ed4:	6841      	ldr	r1, [r0, #4]
 8007ed6:	4b0c      	ldr	r3, [pc, #48]	@ (8007f08 <cleanup_stdio+0x34>)
 8007ed8:	4299      	cmp	r1, r3
 8007eda:	b510      	push	{r4, lr}
 8007edc:	4604      	mov	r4, r0
 8007ede:	d001      	beq.n	8007ee4 <cleanup_stdio+0x10>
 8007ee0:	f000 fd12 	bl	8008908 <_fflush_r>
 8007ee4:	68a1      	ldr	r1, [r4, #8]
 8007ee6:	4b09      	ldr	r3, [pc, #36]	@ (8007f0c <cleanup_stdio+0x38>)
 8007ee8:	4299      	cmp	r1, r3
 8007eea:	d002      	beq.n	8007ef2 <cleanup_stdio+0x1e>
 8007eec:	4620      	mov	r0, r4
 8007eee:	f000 fd0b 	bl	8008908 <_fflush_r>
 8007ef2:	68e1      	ldr	r1, [r4, #12]
 8007ef4:	4b06      	ldr	r3, [pc, #24]	@ (8007f10 <cleanup_stdio+0x3c>)
 8007ef6:	4299      	cmp	r1, r3
 8007ef8:	d004      	beq.n	8007f04 <cleanup_stdio+0x30>
 8007efa:	4620      	mov	r0, r4
 8007efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f00:	f000 bd02 	b.w	8008908 <_fflush_r>
 8007f04:	bd10      	pop	{r4, pc}
 8007f06:	bf00      	nop
 8007f08:	20025d84 	.word	0x20025d84
 8007f0c:	20025dec 	.word	0x20025dec
 8007f10:	20025e54 	.word	0x20025e54

08007f14 <global_stdio_init.part.0>:
 8007f14:	b510      	push	{r4, lr}
 8007f16:	4b0b      	ldr	r3, [pc, #44]	@ (8007f44 <global_stdio_init.part.0+0x30>)
 8007f18:	4c0b      	ldr	r4, [pc, #44]	@ (8007f48 <global_stdio_init.part.0+0x34>)
 8007f1a:	4a0c      	ldr	r2, [pc, #48]	@ (8007f4c <global_stdio_init.part.0+0x38>)
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	4620      	mov	r0, r4
 8007f20:	2200      	movs	r2, #0
 8007f22:	2104      	movs	r1, #4
 8007f24:	f7ff ff94 	bl	8007e50 <std>
 8007f28:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	2109      	movs	r1, #9
 8007f30:	f7ff ff8e 	bl	8007e50 <std>
 8007f34:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007f38:	2202      	movs	r2, #2
 8007f3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f3e:	2112      	movs	r1, #18
 8007f40:	f7ff bf86 	b.w	8007e50 <std>
 8007f44:	20025ebc 	.word	0x20025ebc
 8007f48:	20025d84 	.word	0x20025d84
 8007f4c:	08007ebd 	.word	0x08007ebd

08007f50 <__sfp_lock_acquire>:
 8007f50:	4801      	ldr	r0, [pc, #4]	@ (8007f58 <__sfp_lock_acquire+0x8>)
 8007f52:	f000 b8e2 	b.w	800811a <__retarget_lock_acquire_recursive>
 8007f56:	bf00      	nop
 8007f58:	20025ec1 	.word	0x20025ec1

08007f5c <__sfp_lock_release>:
 8007f5c:	4801      	ldr	r0, [pc, #4]	@ (8007f64 <__sfp_lock_release+0x8>)
 8007f5e:	f000 b8dd 	b.w	800811c <__retarget_lock_release_recursive>
 8007f62:	bf00      	nop
 8007f64:	20025ec1 	.word	0x20025ec1

08007f68 <__sinit>:
 8007f68:	b510      	push	{r4, lr}
 8007f6a:	4604      	mov	r4, r0
 8007f6c:	f7ff fff0 	bl	8007f50 <__sfp_lock_acquire>
 8007f70:	6a23      	ldr	r3, [r4, #32]
 8007f72:	b11b      	cbz	r3, 8007f7c <__sinit+0x14>
 8007f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f78:	f7ff bff0 	b.w	8007f5c <__sfp_lock_release>
 8007f7c:	4b04      	ldr	r3, [pc, #16]	@ (8007f90 <__sinit+0x28>)
 8007f7e:	6223      	str	r3, [r4, #32]
 8007f80:	4b04      	ldr	r3, [pc, #16]	@ (8007f94 <__sinit+0x2c>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1f5      	bne.n	8007f74 <__sinit+0xc>
 8007f88:	f7ff ffc4 	bl	8007f14 <global_stdio_init.part.0>
 8007f8c:	e7f2      	b.n	8007f74 <__sinit+0xc>
 8007f8e:	bf00      	nop
 8007f90:	08007ed5 	.word	0x08007ed5
 8007f94:	20025ebc 	.word	0x20025ebc

08007f98 <_fwalk_sglue>:
 8007f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f9c:	4607      	mov	r7, r0
 8007f9e:	4688      	mov	r8, r1
 8007fa0:	4614      	mov	r4, r2
 8007fa2:	2600      	movs	r6, #0
 8007fa4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fa8:	f1b9 0901 	subs.w	r9, r9, #1
 8007fac:	d505      	bpl.n	8007fba <_fwalk_sglue+0x22>
 8007fae:	6824      	ldr	r4, [r4, #0]
 8007fb0:	2c00      	cmp	r4, #0
 8007fb2:	d1f7      	bne.n	8007fa4 <_fwalk_sglue+0xc>
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fba:	89ab      	ldrh	r3, [r5, #12]
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d907      	bls.n	8007fd0 <_fwalk_sglue+0x38>
 8007fc0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fc4:	3301      	adds	r3, #1
 8007fc6:	d003      	beq.n	8007fd0 <_fwalk_sglue+0x38>
 8007fc8:	4629      	mov	r1, r5
 8007fca:	4638      	mov	r0, r7
 8007fcc:	47c0      	blx	r8
 8007fce:	4306      	orrs	r6, r0
 8007fd0:	3568      	adds	r5, #104	@ 0x68
 8007fd2:	e7e9      	b.n	8007fa8 <_fwalk_sglue+0x10>

08007fd4 <iprintf>:
 8007fd4:	b40f      	push	{r0, r1, r2, r3}
 8007fd6:	b507      	push	{r0, r1, r2, lr}
 8007fd8:	4906      	ldr	r1, [pc, #24]	@ (8007ff4 <iprintf+0x20>)
 8007fda:	ab04      	add	r3, sp, #16
 8007fdc:	6808      	ldr	r0, [r1, #0]
 8007fde:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fe2:	6881      	ldr	r1, [r0, #8]
 8007fe4:	9301      	str	r3, [sp, #4]
 8007fe6:	f000 f8c3 	bl	8008170 <_vfiprintf_r>
 8007fea:	b003      	add	sp, #12
 8007fec:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ff0:	b004      	add	sp, #16
 8007ff2:	4770      	bx	lr
 8007ff4:	20000030 	.word	0x20000030

08007ff8 <_puts_r>:
 8007ff8:	6a03      	ldr	r3, [r0, #32]
 8007ffa:	b570      	push	{r4, r5, r6, lr}
 8007ffc:	6884      	ldr	r4, [r0, #8]
 8007ffe:	4605      	mov	r5, r0
 8008000:	460e      	mov	r6, r1
 8008002:	b90b      	cbnz	r3, 8008008 <_puts_r+0x10>
 8008004:	f7ff ffb0 	bl	8007f68 <__sinit>
 8008008:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800800a:	07db      	lsls	r3, r3, #31
 800800c:	d405      	bmi.n	800801a <_puts_r+0x22>
 800800e:	89a3      	ldrh	r3, [r4, #12]
 8008010:	0598      	lsls	r0, r3, #22
 8008012:	d402      	bmi.n	800801a <_puts_r+0x22>
 8008014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008016:	f000 f880 	bl	800811a <__retarget_lock_acquire_recursive>
 800801a:	89a3      	ldrh	r3, [r4, #12]
 800801c:	0719      	lsls	r1, r3, #28
 800801e:	d502      	bpl.n	8008026 <_puts_r+0x2e>
 8008020:	6923      	ldr	r3, [r4, #16]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d135      	bne.n	8008092 <_puts_r+0x9a>
 8008026:	4621      	mov	r1, r4
 8008028:	4628      	mov	r0, r5
 800802a:	f000 fd23 	bl	8008a74 <__swsetup_r>
 800802e:	b380      	cbz	r0, 8008092 <_puts_r+0x9a>
 8008030:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008034:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008036:	07da      	lsls	r2, r3, #31
 8008038:	d405      	bmi.n	8008046 <_puts_r+0x4e>
 800803a:	89a3      	ldrh	r3, [r4, #12]
 800803c:	059b      	lsls	r3, r3, #22
 800803e:	d402      	bmi.n	8008046 <_puts_r+0x4e>
 8008040:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008042:	f000 f86b 	bl	800811c <__retarget_lock_release_recursive>
 8008046:	4628      	mov	r0, r5
 8008048:	bd70      	pop	{r4, r5, r6, pc}
 800804a:	2b00      	cmp	r3, #0
 800804c:	da04      	bge.n	8008058 <_puts_r+0x60>
 800804e:	69a2      	ldr	r2, [r4, #24]
 8008050:	429a      	cmp	r2, r3
 8008052:	dc17      	bgt.n	8008084 <_puts_r+0x8c>
 8008054:	290a      	cmp	r1, #10
 8008056:	d015      	beq.n	8008084 <_puts_r+0x8c>
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	1c5a      	adds	r2, r3, #1
 800805c:	6022      	str	r2, [r4, #0]
 800805e:	7019      	strb	r1, [r3, #0]
 8008060:	68a3      	ldr	r3, [r4, #8]
 8008062:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008066:	3b01      	subs	r3, #1
 8008068:	60a3      	str	r3, [r4, #8]
 800806a:	2900      	cmp	r1, #0
 800806c:	d1ed      	bne.n	800804a <_puts_r+0x52>
 800806e:	2b00      	cmp	r3, #0
 8008070:	da11      	bge.n	8008096 <_puts_r+0x9e>
 8008072:	4622      	mov	r2, r4
 8008074:	210a      	movs	r1, #10
 8008076:	4628      	mov	r0, r5
 8008078:	f000 fcbd 	bl	80089f6 <__swbuf_r>
 800807c:	3001      	adds	r0, #1
 800807e:	d0d7      	beq.n	8008030 <_puts_r+0x38>
 8008080:	250a      	movs	r5, #10
 8008082:	e7d7      	b.n	8008034 <_puts_r+0x3c>
 8008084:	4622      	mov	r2, r4
 8008086:	4628      	mov	r0, r5
 8008088:	f000 fcb5 	bl	80089f6 <__swbuf_r>
 800808c:	3001      	adds	r0, #1
 800808e:	d1e7      	bne.n	8008060 <_puts_r+0x68>
 8008090:	e7ce      	b.n	8008030 <_puts_r+0x38>
 8008092:	3e01      	subs	r6, #1
 8008094:	e7e4      	b.n	8008060 <_puts_r+0x68>
 8008096:	6823      	ldr	r3, [r4, #0]
 8008098:	1c5a      	adds	r2, r3, #1
 800809a:	6022      	str	r2, [r4, #0]
 800809c:	220a      	movs	r2, #10
 800809e:	701a      	strb	r2, [r3, #0]
 80080a0:	e7ee      	b.n	8008080 <_puts_r+0x88>
	...

080080a4 <puts>:
 80080a4:	4b02      	ldr	r3, [pc, #8]	@ (80080b0 <puts+0xc>)
 80080a6:	4601      	mov	r1, r0
 80080a8:	6818      	ldr	r0, [r3, #0]
 80080aa:	f7ff bfa5 	b.w	8007ff8 <_puts_r>
 80080ae:	bf00      	nop
 80080b0:	20000030 	.word	0x20000030

080080b4 <memset>:
 80080b4:	4402      	add	r2, r0
 80080b6:	4603      	mov	r3, r0
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d100      	bne.n	80080be <memset+0xa>
 80080bc:	4770      	bx	lr
 80080be:	f803 1b01 	strb.w	r1, [r3], #1
 80080c2:	e7f9      	b.n	80080b8 <memset+0x4>

080080c4 <__errno>:
 80080c4:	4b01      	ldr	r3, [pc, #4]	@ (80080cc <__errno+0x8>)
 80080c6:	6818      	ldr	r0, [r3, #0]
 80080c8:	4770      	bx	lr
 80080ca:	bf00      	nop
 80080cc:	20000030 	.word	0x20000030

080080d0 <__libc_init_array>:
 80080d0:	b570      	push	{r4, r5, r6, lr}
 80080d2:	4d0d      	ldr	r5, [pc, #52]	@ (8008108 <__libc_init_array+0x38>)
 80080d4:	4c0d      	ldr	r4, [pc, #52]	@ (800810c <__libc_init_array+0x3c>)
 80080d6:	1b64      	subs	r4, r4, r5
 80080d8:	10a4      	asrs	r4, r4, #2
 80080da:	2600      	movs	r6, #0
 80080dc:	42a6      	cmp	r6, r4
 80080de:	d109      	bne.n	80080f4 <__libc_init_array+0x24>
 80080e0:	4d0b      	ldr	r5, [pc, #44]	@ (8008110 <__libc_init_array+0x40>)
 80080e2:	4c0c      	ldr	r4, [pc, #48]	@ (8008114 <__libc_init_array+0x44>)
 80080e4:	f000 fe40 	bl	8008d68 <_init>
 80080e8:	1b64      	subs	r4, r4, r5
 80080ea:	10a4      	asrs	r4, r4, #2
 80080ec:	2600      	movs	r6, #0
 80080ee:	42a6      	cmp	r6, r4
 80080f0:	d105      	bne.n	80080fe <__libc_init_array+0x2e>
 80080f2:	bd70      	pop	{r4, r5, r6, pc}
 80080f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80080f8:	4798      	blx	r3
 80080fa:	3601      	adds	r6, #1
 80080fc:	e7ee      	b.n	80080dc <__libc_init_array+0xc>
 80080fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008102:	4798      	blx	r3
 8008104:	3601      	adds	r6, #1
 8008106:	e7f2      	b.n	80080ee <__libc_init_array+0x1e>
 8008108:	0800a088 	.word	0x0800a088
 800810c:	0800a088 	.word	0x0800a088
 8008110:	0800a088 	.word	0x0800a088
 8008114:	0800a08c 	.word	0x0800a08c

08008118 <__retarget_lock_init_recursive>:
 8008118:	4770      	bx	lr

0800811a <__retarget_lock_acquire_recursive>:
 800811a:	4770      	bx	lr

0800811c <__retarget_lock_release_recursive>:
 800811c:	4770      	bx	lr

0800811e <__sfputc_r>:
 800811e:	6893      	ldr	r3, [r2, #8]
 8008120:	3b01      	subs	r3, #1
 8008122:	2b00      	cmp	r3, #0
 8008124:	b410      	push	{r4}
 8008126:	6093      	str	r3, [r2, #8]
 8008128:	da08      	bge.n	800813c <__sfputc_r+0x1e>
 800812a:	6994      	ldr	r4, [r2, #24]
 800812c:	42a3      	cmp	r3, r4
 800812e:	db01      	blt.n	8008134 <__sfputc_r+0x16>
 8008130:	290a      	cmp	r1, #10
 8008132:	d103      	bne.n	800813c <__sfputc_r+0x1e>
 8008134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008138:	f000 bc5d 	b.w	80089f6 <__swbuf_r>
 800813c:	6813      	ldr	r3, [r2, #0]
 800813e:	1c58      	adds	r0, r3, #1
 8008140:	6010      	str	r0, [r2, #0]
 8008142:	7019      	strb	r1, [r3, #0]
 8008144:	4608      	mov	r0, r1
 8008146:	f85d 4b04 	ldr.w	r4, [sp], #4
 800814a:	4770      	bx	lr

0800814c <__sfputs_r>:
 800814c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800814e:	4606      	mov	r6, r0
 8008150:	460f      	mov	r7, r1
 8008152:	4614      	mov	r4, r2
 8008154:	18d5      	adds	r5, r2, r3
 8008156:	42ac      	cmp	r4, r5
 8008158:	d101      	bne.n	800815e <__sfputs_r+0x12>
 800815a:	2000      	movs	r0, #0
 800815c:	e007      	b.n	800816e <__sfputs_r+0x22>
 800815e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008162:	463a      	mov	r2, r7
 8008164:	4630      	mov	r0, r6
 8008166:	f7ff ffda 	bl	800811e <__sfputc_r>
 800816a:	1c43      	adds	r3, r0, #1
 800816c:	d1f3      	bne.n	8008156 <__sfputs_r+0xa>
 800816e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008170 <_vfiprintf_r>:
 8008170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008174:	460d      	mov	r5, r1
 8008176:	b09d      	sub	sp, #116	@ 0x74
 8008178:	4614      	mov	r4, r2
 800817a:	4698      	mov	r8, r3
 800817c:	4606      	mov	r6, r0
 800817e:	b118      	cbz	r0, 8008188 <_vfiprintf_r+0x18>
 8008180:	6a03      	ldr	r3, [r0, #32]
 8008182:	b90b      	cbnz	r3, 8008188 <_vfiprintf_r+0x18>
 8008184:	f7ff fef0 	bl	8007f68 <__sinit>
 8008188:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800818a:	07d9      	lsls	r1, r3, #31
 800818c:	d405      	bmi.n	800819a <_vfiprintf_r+0x2a>
 800818e:	89ab      	ldrh	r3, [r5, #12]
 8008190:	059a      	lsls	r2, r3, #22
 8008192:	d402      	bmi.n	800819a <_vfiprintf_r+0x2a>
 8008194:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008196:	f7ff ffc0 	bl	800811a <__retarget_lock_acquire_recursive>
 800819a:	89ab      	ldrh	r3, [r5, #12]
 800819c:	071b      	lsls	r3, r3, #28
 800819e:	d501      	bpl.n	80081a4 <_vfiprintf_r+0x34>
 80081a0:	692b      	ldr	r3, [r5, #16]
 80081a2:	b99b      	cbnz	r3, 80081cc <_vfiprintf_r+0x5c>
 80081a4:	4629      	mov	r1, r5
 80081a6:	4630      	mov	r0, r6
 80081a8:	f000 fc64 	bl	8008a74 <__swsetup_r>
 80081ac:	b170      	cbz	r0, 80081cc <_vfiprintf_r+0x5c>
 80081ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081b0:	07dc      	lsls	r4, r3, #31
 80081b2:	d504      	bpl.n	80081be <_vfiprintf_r+0x4e>
 80081b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081b8:	b01d      	add	sp, #116	@ 0x74
 80081ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081be:	89ab      	ldrh	r3, [r5, #12]
 80081c0:	0598      	lsls	r0, r3, #22
 80081c2:	d4f7      	bmi.n	80081b4 <_vfiprintf_r+0x44>
 80081c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081c6:	f7ff ffa9 	bl	800811c <__retarget_lock_release_recursive>
 80081ca:	e7f3      	b.n	80081b4 <_vfiprintf_r+0x44>
 80081cc:	2300      	movs	r3, #0
 80081ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80081d0:	2320      	movs	r3, #32
 80081d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80081da:	2330      	movs	r3, #48	@ 0x30
 80081dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800838c <_vfiprintf_r+0x21c>
 80081e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081e4:	f04f 0901 	mov.w	r9, #1
 80081e8:	4623      	mov	r3, r4
 80081ea:	469a      	mov	sl, r3
 80081ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081f0:	b10a      	cbz	r2, 80081f6 <_vfiprintf_r+0x86>
 80081f2:	2a25      	cmp	r2, #37	@ 0x25
 80081f4:	d1f9      	bne.n	80081ea <_vfiprintf_r+0x7a>
 80081f6:	ebba 0b04 	subs.w	fp, sl, r4
 80081fa:	d00b      	beq.n	8008214 <_vfiprintf_r+0xa4>
 80081fc:	465b      	mov	r3, fp
 80081fe:	4622      	mov	r2, r4
 8008200:	4629      	mov	r1, r5
 8008202:	4630      	mov	r0, r6
 8008204:	f7ff ffa2 	bl	800814c <__sfputs_r>
 8008208:	3001      	adds	r0, #1
 800820a:	f000 80a7 	beq.w	800835c <_vfiprintf_r+0x1ec>
 800820e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008210:	445a      	add	r2, fp
 8008212:	9209      	str	r2, [sp, #36]	@ 0x24
 8008214:	f89a 3000 	ldrb.w	r3, [sl]
 8008218:	2b00      	cmp	r3, #0
 800821a:	f000 809f 	beq.w	800835c <_vfiprintf_r+0x1ec>
 800821e:	2300      	movs	r3, #0
 8008220:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008224:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008228:	f10a 0a01 	add.w	sl, sl, #1
 800822c:	9304      	str	r3, [sp, #16]
 800822e:	9307      	str	r3, [sp, #28]
 8008230:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008234:	931a      	str	r3, [sp, #104]	@ 0x68
 8008236:	4654      	mov	r4, sl
 8008238:	2205      	movs	r2, #5
 800823a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800823e:	4853      	ldr	r0, [pc, #332]	@ (800838c <_vfiprintf_r+0x21c>)
 8008240:	f7f7 ffde 	bl	8000200 <memchr>
 8008244:	9a04      	ldr	r2, [sp, #16]
 8008246:	b9d8      	cbnz	r0, 8008280 <_vfiprintf_r+0x110>
 8008248:	06d1      	lsls	r1, r2, #27
 800824a:	bf44      	itt	mi
 800824c:	2320      	movmi	r3, #32
 800824e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008252:	0713      	lsls	r3, r2, #28
 8008254:	bf44      	itt	mi
 8008256:	232b      	movmi	r3, #43	@ 0x2b
 8008258:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800825c:	f89a 3000 	ldrb.w	r3, [sl]
 8008260:	2b2a      	cmp	r3, #42	@ 0x2a
 8008262:	d015      	beq.n	8008290 <_vfiprintf_r+0x120>
 8008264:	9a07      	ldr	r2, [sp, #28]
 8008266:	4654      	mov	r4, sl
 8008268:	2000      	movs	r0, #0
 800826a:	f04f 0c0a 	mov.w	ip, #10
 800826e:	4621      	mov	r1, r4
 8008270:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008274:	3b30      	subs	r3, #48	@ 0x30
 8008276:	2b09      	cmp	r3, #9
 8008278:	d94b      	bls.n	8008312 <_vfiprintf_r+0x1a2>
 800827a:	b1b0      	cbz	r0, 80082aa <_vfiprintf_r+0x13a>
 800827c:	9207      	str	r2, [sp, #28]
 800827e:	e014      	b.n	80082aa <_vfiprintf_r+0x13a>
 8008280:	eba0 0308 	sub.w	r3, r0, r8
 8008284:	fa09 f303 	lsl.w	r3, r9, r3
 8008288:	4313      	orrs	r3, r2
 800828a:	9304      	str	r3, [sp, #16]
 800828c:	46a2      	mov	sl, r4
 800828e:	e7d2      	b.n	8008236 <_vfiprintf_r+0xc6>
 8008290:	9b03      	ldr	r3, [sp, #12]
 8008292:	1d19      	adds	r1, r3, #4
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	9103      	str	r1, [sp, #12]
 8008298:	2b00      	cmp	r3, #0
 800829a:	bfbb      	ittet	lt
 800829c:	425b      	neglt	r3, r3
 800829e:	f042 0202 	orrlt.w	r2, r2, #2
 80082a2:	9307      	strge	r3, [sp, #28]
 80082a4:	9307      	strlt	r3, [sp, #28]
 80082a6:	bfb8      	it	lt
 80082a8:	9204      	strlt	r2, [sp, #16]
 80082aa:	7823      	ldrb	r3, [r4, #0]
 80082ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80082ae:	d10a      	bne.n	80082c6 <_vfiprintf_r+0x156>
 80082b0:	7863      	ldrb	r3, [r4, #1]
 80082b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80082b4:	d132      	bne.n	800831c <_vfiprintf_r+0x1ac>
 80082b6:	9b03      	ldr	r3, [sp, #12]
 80082b8:	1d1a      	adds	r2, r3, #4
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	9203      	str	r2, [sp, #12]
 80082be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082c2:	3402      	adds	r4, #2
 80082c4:	9305      	str	r3, [sp, #20]
 80082c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800839c <_vfiprintf_r+0x22c>
 80082ca:	7821      	ldrb	r1, [r4, #0]
 80082cc:	2203      	movs	r2, #3
 80082ce:	4650      	mov	r0, sl
 80082d0:	f7f7 ff96 	bl	8000200 <memchr>
 80082d4:	b138      	cbz	r0, 80082e6 <_vfiprintf_r+0x176>
 80082d6:	9b04      	ldr	r3, [sp, #16]
 80082d8:	eba0 000a 	sub.w	r0, r0, sl
 80082dc:	2240      	movs	r2, #64	@ 0x40
 80082de:	4082      	lsls	r2, r0
 80082e0:	4313      	orrs	r3, r2
 80082e2:	3401      	adds	r4, #1
 80082e4:	9304      	str	r3, [sp, #16]
 80082e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ea:	4829      	ldr	r0, [pc, #164]	@ (8008390 <_vfiprintf_r+0x220>)
 80082ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082f0:	2206      	movs	r2, #6
 80082f2:	f7f7 ff85 	bl	8000200 <memchr>
 80082f6:	2800      	cmp	r0, #0
 80082f8:	d03f      	beq.n	800837a <_vfiprintf_r+0x20a>
 80082fa:	4b26      	ldr	r3, [pc, #152]	@ (8008394 <_vfiprintf_r+0x224>)
 80082fc:	bb1b      	cbnz	r3, 8008346 <_vfiprintf_r+0x1d6>
 80082fe:	9b03      	ldr	r3, [sp, #12]
 8008300:	3307      	adds	r3, #7
 8008302:	f023 0307 	bic.w	r3, r3, #7
 8008306:	3308      	adds	r3, #8
 8008308:	9303      	str	r3, [sp, #12]
 800830a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800830c:	443b      	add	r3, r7
 800830e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008310:	e76a      	b.n	80081e8 <_vfiprintf_r+0x78>
 8008312:	fb0c 3202 	mla	r2, ip, r2, r3
 8008316:	460c      	mov	r4, r1
 8008318:	2001      	movs	r0, #1
 800831a:	e7a8      	b.n	800826e <_vfiprintf_r+0xfe>
 800831c:	2300      	movs	r3, #0
 800831e:	3401      	adds	r4, #1
 8008320:	9305      	str	r3, [sp, #20]
 8008322:	4619      	mov	r1, r3
 8008324:	f04f 0c0a 	mov.w	ip, #10
 8008328:	4620      	mov	r0, r4
 800832a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800832e:	3a30      	subs	r2, #48	@ 0x30
 8008330:	2a09      	cmp	r2, #9
 8008332:	d903      	bls.n	800833c <_vfiprintf_r+0x1cc>
 8008334:	2b00      	cmp	r3, #0
 8008336:	d0c6      	beq.n	80082c6 <_vfiprintf_r+0x156>
 8008338:	9105      	str	r1, [sp, #20]
 800833a:	e7c4      	b.n	80082c6 <_vfiprintf_r+0x156>
 800833c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008340:	4604      	mov	r4, r0
 8008342:	2301      	movs	r3, #1
 8008344:	e7f0      	b.n	8008328 <_vfiprintf_r+0x1b8>
 8008346:	ab03      	add	r3, sp, #12
 8008348:	9300      	str	r3, [sp, #0]
 800834a:	462a      	mov	r2, r5
 800834c:	4b12      	ldr	r3, [pc, #72]	@ (8008398 <_vfiprintf_r+0x228>)
 800834e:	a904      	add	r1, sp, #16
 8008350:	4630      	mov	r0, r6
 8008352:	f3af 8000 	nop.w
 8008356:	4607      	mov	r7, r0
 8008358:	1c78      	adds	r0, r7, #1
 800835a:	d1d6      	bne.n	800830a <_vfiprintf_r+0x19a>
 800835c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800835e:	07d9      	lsls	r1, r3, #31
 8008360:	d405      	bmi.n	800836e <_vfiprintf_r+0x1fe>
 8008362:	89ab      	ldrh	r3, [r5, #12]
 8008364:	059a      	lsls	r2, r3, #22
 8008366:	d402      	bmi.n	800836e <_vfiprintf_r+0x1fe>
 8008368:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800836a:	f7ff fed7 	bl	800811c <__retarget_lock_release_recursive>
 800836e:	89ab      	ldrh	r3, [r5, #12]
 8008370:	065b      	lsls	r3, r3, #25
 8008372:	f53f af1f 	bmi.w	80081b4 <_vfiprintf_r+0x44>
 8008376:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008378:	e71e      	b.n	80081b8 <_vfiprintf_r+0x48>
 800837a:	ab03      	add	r3, sp, #12
 800837c:	9300      	str	r3, [sp, #0]
 800837e:	462a      	mov	r2, r5
 8008380:	4b05      	ldr	r3, [pc, #20]	@ (8008398 <_vfiprintf_r+0x228>)
 8008382:	a904      	add	r1, sp, #16
 8008384:	4630      	mov	r0, r6
 8008386:	f000 f91b 	bl	80085c0 <_printf_i>
 800838a:	e7e4      	b.n	8008356 <_vfiprintf_r+0x1e6>
 800838c:	0800a04a 	.word	0x0800a04a
 8008390:	0800a054 	.word	0x0800a054
 8008394:	00000000 	.word	0x00000000
 8008398:	0800814d 	.word	0x0800814d
 800839c:	0800a050 	.word	0x0800a050

080083a0 <sbrk_aligned>:
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	4e0f      	ldr	r6, [pc, #60]	@ (80083e0 <sbrk_aligned+0x40>)
 80083a4:	460c      	mov	r4, r1
 80083a6:	6831      	ldr	r1, [r6, #0]
 80083a8:	4605      	mov	r5, r0
 80083aa:	b911      	cbnz	r1, 80083b2 <sbrk_aligned+0x12>
 80083ac:	f000 fc70 	bl	8008c90 <_sbrk_r>
 80083b0:	6030      	str	r0, [r6, #0]
 80083b2:	4621      	mov	r1, r4
 80083b4:	4628      	mov	r0, r5
 80083b6:	f000 fc6b 	bl	8008c90 <_sbrk_r>
 80083ba:	1c43      	adds	r3, r0, #1
 80083bc:	d103      	bne.n	80083c6 <sbrk_aligned+0x26>
 80083be:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80083c2:	4620      	mov	r0, r4
 80083c4:	bd70      	pop	{r4, r5, r6, pc}
 80083c6:	1cc4      	adds	r4, r0, #3
 80083c8:	f024 0403 	bic.w	r4, r4, #3
 80083cc:	42a0      	cmp	r0, r4
 80083ce:	d0f8      	beq.n	80083c2 <sbrk_aligned+0x22>
 80083d0:	1a21      	subs	r1, r4, r0
 80083d2:	4628      	mov	r0, r5
 80083d4:	f000 fc5c 	bl	8008c90 <_sbrk_r>
 80083d8:	3001      	adds	r0, #1
 80083da:	d1f2      	bne.n	80083c2 <sbrk_aligned+0x22>
 80083dc:	e7ef      	b.n	80083be <sbrk_aligned+0x1e>
 80083de:	bf00      	nop
 80083e0:	20025ec4 	.word	0x20025ec4

080083e4 <_malloc_r>:
 80083e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083e8:	1ccd      	adds	r5, r1, #3
 80083ea:	f025 0503 	bic.w	r5, r5, #3
 80083ee:	3508      	adds	r5, #8
 80083f0:	2d0c      	cmp	r5, #12
 80083f2:	bf38      	it	cc
 80083f4:	250c      	movcc	r5, #12
 80083f6:	2d00      	cmp	r5, #0
 80083f8:	4606      	mov	r6, r0
 80083fa:	db01      	blt.n	8008400 <_malloc_r+0x1c>
 80083fc:	42a9      	cmp	r1, r5
 80083fe:	d904      	bls.n	800840a <_malloc_r+0x26>
 8008400:	230c      	movs	r3, #12
 8008402:	6033      	str	r3, [r6, #0]
 8008404:	2000      	movs	r0, #0
 8008406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800840a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084e0 <_malloc_r+0xfc>
 800840e:	f000 faa3 	bl	8008958 <__malloc_lock>
 8008412:	f8d8 3000 	ldr.w	r3, [r8]
 8008416:	461c      	mov	r4, r3
 8008418:	bb44      	cbnz	r4, 800846c <_malloc_r+0x88>
 800841a:	4629      	mov	r1, r5
 800841c:	4630      	mov	r0, r6
 800841e:	f7ff ffbf 	bl	80083a0 <sbrk_aligned>
 8008422:	1c43      	adds	r3, r0, #1
 8008424:	4604      	mov	r4, r0
 8008426:	d158      	bne.n	80084da <_malloc_r+0xf6>
 8008428:	f8d8 4000 	ldr.w	r4, [r8]
 800842c:	4627      	mov	r7, r4
 800842e:	2f00      	cmp	r7, #0
 8008430:	d143      	bne.n	80084ba <_malloc_r+0xd6>
 8008432:	2c00      	cmp	r4, #0
 8008434:	d04b      	beq.n	80084ce <_malloc_r+0xea>
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	4639      	mov	r1, r7
 800843a:	4630      	mov	r0, r6
 800843c:	eb04 0903 	add.w	r9, r4, r3
 8008440:	f000 fc26 	bl	8008c90 <_sbrk_r>
 8008444:	4581      	cmp	r9, r0
 8008446:	d142      	bne.n	80084ce <_malloc_r+0xea>
 8008448:	6821      	ldr	r1, [r4, #0]
 800844a:	1a6d      	subs	r5, r5, r1
 800844c:	4629      	mov	r1, r5
 800844e:	4630      	mov	r0, r6
 8008450:	f7ff ffa6 	bl	80083a0 <sbrk_aligned>
 8008454:	3001      	adds	r0, #1
 8008456:	d03a      	beq.n	80084ce <_malloc_r+0xea>
 8008458:	6823      	ldr	r3, [r4, #0]
 800845a:	442b      	add	r3, r5
 800845c:	6023      	str	r3, [r4, #0]
 800845e:	f8d8 3000 	ldr.w	r3, [r8]
 8008462:	685a      	ldr	r2, [r3, #4]
 8008464:	bb62      	cbnz	r2, 80084c0 <_malloc_r+0xdc>
 8008466:	f8c8 7000 	str.w	r7, [r8]
 800846a:	e00f      	b.n	800848c <_malloc_r+0xa8>
 800846c:	6822      	ldr	r2, [r4, #0]
 800846e:	1b52      	subs	r2, r2, r5
 8008470:	d420      	bmi.n	80084b4 <_malloc_r+0xd0>
 8008472:	2a0b      	cmp	r2, #11
 8008474:	d917      	bls.n	80084a6 <_malloc_r+0xc2>
 8008476:	1961      	adds	r1, r4, r5
 8008478:	42a3      	cmp	r3, r4
 800847a:	6025      	str	r5, [r4, #0]
 800847c:	bf18      	it	ne
 800847e:	6059      	strne	r1, [r3, #4]
 8008480:	6863      	ldr	r3, [r4, #4]
 8008482:	bf08      	it	eq
 8008484:	f8c8 1000 	streq.w	r1, [r8]
 8008488:	5162      	str	r2, [r4, r5]
 800848a:	604b      	str	r3, [r1, #4]
 800848c:	4630      	mov	r0, r6
 800848e:	f000 fa69 	bl	8008964 <__malloc_unlock>
 8008492:	f104 000b 	add.w	r0, r4, #11
 8008496:	1d23      	adds	r3, r4, #4
 8008498:	f020 0007 	bic.w	r0, r0, #7
 800849c:	1ac2      	subs	r2, r0, r3
 800849e:	bf1c      	itt	ne
 80084a0:	1a1b      	subne	r3, r3, r0
 80084a2:	50a3      	strne	r3, [r4, r2]
 80084a4:	e7af      	b.n	8008406 <_malloc_r+0x22>
 80084a6:	6862      	ldr	r2, [r4, #4]
 80084a8:	42a3      	cmp	r3, r4
 80084aa:	bf0c      	ite	eq
 80084ac:	f8c8 2000 	streq.w	r2, [r8]
 80084b0:	605a      	strne	r2, [r3, #4]
 80084b2:	e7eb      	b.n	800848c <_malloc_r+0xa8>
 80084b4:	4623      	mov	r3, r4
 80084b6:	6864      	ldr	r4, [r4, #4]
 80084b8:	e7ae      	b.n	8008418 <_malloc_r+0x34>
 80084ba:	463c      	mov	r4, r7
 80084bc:	687f      	ldr	r7, [r7, #4]
 80084be:	e7b6      	b.n	800842e <_malloc_r+0x4a>
 80084c0:	461a      	mov	r2, r3
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	42a3      	cmp	r3, r4
 80084c6:	d1fb      	bne.n	80084c0 <_malloc_r+0xdc>
 80084c8:	2300      	movs	r3, #0
 80084ca:	6053      	str	r3, [r2, #4]
 80084cc:	e7de      	b.n	800848c <_malloc_r+0xa8>
 80084ce:	230c      	movs	r3, #12
 80084d0:	6033      	str	r3, [r6, #0]
 80084d2:	4630      	mov	r0, r6
 80084d4:	f000 fa46 	bl	8008964 <__malloc_unlock>
 80084d8:	e794      	b.n	8008404 <_malloc_r+0x20>
 80084da:	6005      	str	r5, [r0, #0]
 80084dc:	e7d6      	b.n	800848c <_malloc_r+0xa8>
 80084de:	bf00      	nop
 80084e0:	20025ec8 	.word	0x20025ec8

080084e4 <_printf_common>:
 80084e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e8:	4616      	mov	r6, r2
 80084ea:	4698      	mov	r8, r3
 80084ec:	688a      	ldr	r2, [r1, #8]
 80084ee:	690b      	ldr	r3, [r1, #16]
 80084f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084f4:	4293      	cmp	r3, r2
 80084f6:	bfb8      	it	lt
 80084f8:	4613      	movlt	r3, r2
 80084fa:	6033      	str	r3, [r6, #0]
 80084fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008500:	4607      	mov	r7, r0
 8008502:	460c      	mov	r4, r1
 8008504:	b10a      	cbz	r2, 800850a <_printf_common+0x26>
 8008506:	3301      	adds	r3, #1
 8008508:	6033      	str	r3, [r6, #0]
 800850a:	6823      	ldr	r3, [r4, #0]
 800850c:	0699      	lsls	r1, r3, #26
 800850e:	bf42      	ittt	mi
 8008510:	6833      	ldrmi	r3, [r6, #0]
 8008512:	3302      	addmi	r3, #2
 8008514:	6033      	strmi	r3, [r6, #0]
 8008516:	6825      	ldr	r5, [r4, #0]
 8008518:	f015 0506 	ands.w	r5, r5, #6
 800851c:	d106      	bne.n	800852c <_printf_common+0x48>
 800851e:	f104 0a19 	add.w	sl, r4, #25
 8008522:	68e3      	ldr	r3, [r4, #12]
 8008524:	6832      	ldr	r2, [r6, #0]
 8008526:	1a9b      	subs	r3, r3, r2
 8008528:	42ab      	cmp	r3, r5
 800852a:	dc26      	bgt.n	800857a <_printf_common+0x96>
 800852c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008530:	6822      	ldr	r2, [r4, #0]
 8008532:	3b00      	subs	r3, #0
 8008534:	bf18      	it	ne
 8008536:	2301      	movne	r3, #1
 8008538:	0692      	lsls	r2, r2, #26
 800853a:	d42b      	bmi.n	8008594 <_printf_common+0xb0>
 800853c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008540:	4641      	mov	r1, r8
 8008542:	4638      	mov	r0, r7
 8008544:	47c8      	blx	r9
 8008546:	3001      	adds	r0, #1
 8008548:	d01e      	beq.n	8008588 <_printf_common+0xa4>
 800854a:	6823      	ldr	r3, [r4, #0]
 800854c:	6922      	ldr	r2, [r4, #16]
 800854e:	f003 0306 	and.w	r3, r3, #6
 8008552:	2b04      	cmp	r3, #4
 8008554:	bf02      	ittt	eq
 8008556:	68e5      	ldreq	r5, [r4, #12]
 8008558:	6833      	ldreq	r3, [r6, #0]
 800855a:	1aed      	subeq	r5, r5, r3
 800855c:	68a3      	ldr	r3, [r4, #8]
 800855e:	bf0c      	ite	eq
 8008560:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008564:	2500      	movne	r5, #0
 8008566:	4293      	cmp	r3, r2
 8008568:	bfc4      	itt	gt
 800856a:	1a9b      	subgt	r3, r3, r2
 800856c:	18ed      	addgt	r5, r5, r3
 800856e:	2600      	movs	r6, #0
 8008570:	341a      	adds	r4, #26
 8008572:	42b5      	cmp	r5, r6
 8008574:	d11a      	bne.n	80085ac <_printf_common+0xc8>
 8008576:	2000      	movs	r0, #0
 8008578:	e008      	b.n	800858c <_printf_common+0xa8>
 800857a:	2301      	movs	r3, #1
 800857c:	4652      	mov	r2, sl
 800857e:	4641      	mov	r1, r8
 8008580:	4638      	mov	r0, r7
 8008582:	47c8      	blx	r9
 8008584:	3001      	adds	r0, #1
 8008586:	d103      	bne.n	8008590 <_printf_common+0xac>
 8008588:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800858c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008590:	3501      	adds	r5, #1
 8008592:	e7c6      	b.n	8008522 <_printf_common+0x3e>
 8008594:	18e1      	adds	r1, r4, r3
 8008596:	1c5a      	adds	r2, r3, #1
 8008598:	2030      	movs	r0, #48	@ 0x30
 800859a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800859e:	4422      	add	r2, r4
 80085a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80085a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80085a8:	3302      	adds	r3, #2
 80085aa:	e7c7      	b.n	800853c <_printf_common+0x58>
 80085ac:	2301      	movs	r3, #1
 80085ae:	4622      	mov	r2, r4
 80085b0:	4641      	mov	r1, r8
 80085b2:	4638      	mov	r0, r7
 80085b4:	47c8      	blx	r9
 80085b6:	3001      	adds	r0, #1
 80085b8:	d0e6      	beq.n	8008588 <_printf_common+0xa4>
 80085ba:	3601      	adds	r6, #1
 80085bc:	e7d9      	b.n	8008572 <_printf_common+0x8e>
	...

080085c0 <_printf_i>:
 80085c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085c4:	7e0f      	ldrb	r7, [r1, #24]
 80085c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80085c8:	2f78      	cmp	r7, #120	@ 0x78
 80085ca:	4691      	mov	r9, r2
 80085cc:	4680      	mov	r8, r0
 80085ce:	460c      	mov	r4, r1
 80085d0:	469a      	mov	sl, r3
 80085d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80085d6:	d807      	bhi.n	80085e8 <_printf_i+0x28>
 80085d8:	2f62      	cmp	r7, #98	@ 0x62
 80085da:	d80a      	bhi.n	80085f2 <_printf_i+0x32>
 80085dc:	2f00      	cmp	r7, #0
 80085de:	f000 80d2 	beq.w	8008786 <_printf_i+0x1c6>
 80085e2:	2f58      	cmp	r7, #88	@ 0x58
 80085e4:	f000 80b9 	beq.w	800875a <_printf_i+0x19a>
 80085e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80085f0:	e03a      	b.n	8008668 <_printf_i+0xa8>
 80085f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80085f6:	2b15      	cmp	r3, #21
 80085f8:	d8f6      	bhi.n	80085e8 <_printf_i+0x28>
 80085fa:	a101      	add	r1, pc, #4	@ (adr r1, 8008600 <_printf_i+0x40>)
 80085fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008600:	08008659 	.word	0x08008659
 8008604:	0800866d 	.word	0x0800866d
 8008608:	080085e9 	.word	0x080085e9
 800860c:	080085e9 	.word	0x080085e9
 8008610:	080085e9 	.word	0x080085e9
 8008614:	080085e9 	.word	0x080085e9
 8008618:	0800866d 	.word	0x0800866d
 800861c:	080085e9 	.word	0x080085e9
 8008620:	080085e9 	.word	0x080085e9
 8008624:	080085e9 	.word	0x080085e9
 8008628:	080085e9 	.word	0x080085e9
 800862c:	0800876d 	.word	0x0800876d
 8008630:	08008697 	.word	0x08008697
 8008634:	08008727 	.word	0x08008727
 8008638:	080085e9 	.word	0x080085e9
 800863c:	080085e9 	.word	0x080085e9
 8008640:	0800878f 	.word	0x0800878f
 8008644:	080085e9 	.word	0x080085e9
 8008648:	08008697 	.word	0x08008697
 800864c:	080085e9 	.word	0x080085e9
 8008650:	080085e9 	.word	0x080085e9
 8008654:	0800872f 	.word	0x0800872f
 8008658:	6833      	ldr	r3, [r6, #0]
 800865a:	1d1a      	adds	r2, r3, #4
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	6032      	str	r2, [r6, #0]
 8008660:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008664:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008668:	2301      	movs	r3, #1
 800866a:	e09d      	b.n	80087a8 <_printf_i+0x1e8>
 800866c:	6833      	ldr	r3, [r6, #0]
 800866e:	6820      	ldr	r0, [r4, #0]
 8008670:	1d19      	adds	r1, r3, #4
 8008672:	6031      	str	r1, [r6, #0]
 8008674:	0606      	lsls	r6, r0, #24
 8008676:	d501      	bpl.n	800867c <_printf_i+0xbc>
 8008678:	681d      	ldr	r5, [r3, #0]
 800867a:	e003      	b.n	8008684 <_printf_i+0xc4>
 800867c:	0645      	lsls	r5, r0, #25
 800867e:	d5fb      	bpl.n	8008678 <_printf_i+0xb8>
 8008680:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008684:	2d00      	cmp	r5, #0
 8008686:	da03      	bge.n	8008690 <_printf_i+0xd0>
 8008688:	232d      	movs	r3, #45	@ 0x2d
 800868a:	426d      	negs	r5, r5
 800868c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008690:	4859      	ldr	r0, [pc, #356]	@ (80087f8 <_printf_i+0x238>)
 8008692:	230a      	movs	r3, #10
 8008694:	e011      	b.n	80086ba <_printf_i+0xfa>
 8008696:	6821      	ldr	r1, [r4, #0]
 8008698:	6833      	ldr	r3, [r6, #0]
 800869a:	0608      	lsls	r0, r1, #24
 800869c:	f853 5b04 	ldr.w	r5, [r3], #4
 80086a0:	d402      	bmi.n	80086a8 <_printf_i+0xe8>
 80086a2:	0649      	lsls	r1, r1, #25
 80086a4:	bf48      	it	mi
 80086a6:	b2ad      	uxthmi	r5, r5
 80086a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80086aa:	4853      	ldr	r0, [pc, #332]	@ (80087f8 <_printf_i+0x238>)
 80086ac:	6033      	str	r3, [r6, #0]
 80086ae:	bf14      	ite	ne
 80086b0:	230a      	movne	r3, #10
 80086b2:	2308      	moveq	r3, #8
 80086b4:	2100      	movs	r1, #0
 80086b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80086ba:	6866      	ldr	r6, [r4, #4]
 80086bc:	60a6      	str	r6, [r4, #8]
 80086be:	2e00      	cmp	r6, #0
 80086c0:	bfa2      	ittt	ge
 80086c2:	6821      	ldrge	r1, [r4, #0]
 80086c4:	f021 0104 	bicge.w	r1, r1, #4
 80086c8:	6021      	strge	r1, [r4, #0]
 80086ca:	b90d      	cbnz	r5, 80086d0 <_printf_i+0x110>
 80086cc:	2e00      	cmp	r6, #0
 80086ce:	d04b      	beq.n	8008768 <_printf_i+0x1a8>
 80086d0:	4616      	mov	r6, r2
 80086d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80086d6:	fb03 5711 	mls	r7, r3, r1, r5
 80086da:	5dc7      	ldrb	r7, [r0, r7]
 80086dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086e0:	462f      	mov	r7, r5
 80086e2:	42bb      	cmp	r3, r7
 80086e4:	460d      	mov	r5, r1
 80086e6:	d9f4      	bls.n	80086d2 <_printf_i+0x112>
 80086e8:	2b08      	cmp	r3, #8
 80086ea:	d10b      	bne.n	8008704 <_printf_i+0x144>
 80086ec:	6823      	ldr	r3, [r4, #0]
 80086ee:	07df      	lsls	r7, r3, #31
 80086f0:	d508      	bpl.n	8008704 <_printf_i+0x144>
 80086f2:	6923      	ldr	r3, [r4, #16]
 80086f4:	6861      	ldr	r1, [r4, #4]
 80086f6:	4299      	cmp	r1, r3
 80086f8:	bfde      	ittt	le
 80086fa:	2330      	movle	r3, #48	@ 0x30
 80086fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008700:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008704:	1b92      	subs	r2, r2, r6
 8008706:	6122      	str	r2, [r4, #16]
 8008708:	f8cd a000 	str.w	sl, [sp]
 800870c:	464b      	mov	r3, r9
 800870e:	aa03      	add	r2, sp, #12
 8008710:	4621      	mov	r1, r4
 8008712:	4640      	mov	r0, r8
 8008714:	f7ff fee6 	bl	80084e4 <_printf_common>
 8008718:	3001      	adds	r0, #1
 800871a:	d14a      	bne.n	80087b2 <_printf_i+0x1f2>
 800871c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008720:	b004      	add	sp, #16
 8008722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008726:	6823      	ldr	r3, [r4, #0]
 8008728:	f043 0320 	orr.w	r3, r3, #32
 800872c:	6023      	str	r3, [r4, #0]
 800872e:	4833      	ldr	r0, [pc, #204]	@ (80087fc <_printf_i+0x23c>)
 8008730:	2778      	movs	r7, #120	@ 0x78
 8008732:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008736:	6823      	ldr	r3, [r4, #0]
 8008738:	6831      	ldr	r1, [r6, #0]
 800873a:	061f      	lsls	r7, r3, #24
 800873c:	f851 5b04 	ldr.w	r5, [r1], #4
 8008740:	d402      	bmi.n	8008748 <_printf_i+0x188>
 8008742:	065f      	lsls	r7, r3, #25
 8008744:	bf48      	it	mi
 8008746:	b2ad      	uxthmi	r5, r5
 8008748:	6031      	str	r1, [r6, #0]
 800874a:	07d9      	lsls	r1, r3, #31
 800874c:	bf44      	itt	mi
 800874e:	f043 0320 	orrmi.w	r3, r3, #32
 8008752:	6023      	strmi	r3, [r4, #0]
 8008754:	b11d      	cbz	r5, 800875e <_printf_i+0x19e>
 8008756:	2310      	movs	r3, #16
 8008758:	e7ac      	b.n	80086b4 <_printf_i+0xf4>
 800875a:	4827      	ldr	r0, [pc, #156]	@ (80087f8 <_printf_i+0x238>)
 800875c:	e7e9      	b.n	8008732 <_printf_i+0x172>
 800875e:	6823      	ldr	r3, [r4, #0]
 8008760:	f023 0320 	bic.w	r3, r3, #32
 8008764:	6023      	str	r3, [r4, #0]
 8008766:	e7f6      	b.n	8008756 <_printf_i+0x196>
 8008768:	4616      	mov	r6, r2
 800876a:	e7bd      	b.n	80086e8 <_printf_i+0x128>
 800876c:	6833      	ldr	r3, [r6, #0]
 800876e:	6825      	ldr	r5, [r4, #0]
 8008770:	6961      	ldr	r1, [r4, #20]
 8008772:	1d18      	adds	r0, r3, #4
 8008774:	6030      	str	r0, [r6, #0]
 8008776:	062e      	lsls	r6, r5, #24
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	d501      	bpl.n	8008780 <_printf_i+0x1c0>
 800877c:	6019      	str	r1, [r3, #0]
 800877e:	e002      	b.n	8008786 <_printf_i+0x1c6>
 8008780:	0668      	lsls	r0, r5, #25
 8008782:	d5fb      	bpl.n	800877c <_printf_i+0x1bc>
 8008784:	8019      	strh	r1, [r3, #0]
 8008786:	2300      	movs	r3, #0
 8008788:	6123      	str	r3, [r4, #16]
 800878a:	4616      	mov	r6, r2
 800878c:	e7bc      	b.n	8008708 <_printf_i+0x148>
 800878e:	6833      	ldr	r3, [r6, #0]
 8008790:	1d1a      	adds	r2, r3, #4
 8008792:	6032      	str	r2, [r6, #0]
 8008794:	681e      	ldr	r6, [r3, #0]
 8008796:	6862      	ldr	r2, [r4, #4]
 8008798:	2100      	movs	r1, #0
 800879a:	4630      	mov	r0, r6
 800879c:	f7f7 fd30 	bl	8000200 <memchr>
 80087a0:	b108      	cbz	r0, 80087a6 <_printf_i+0x1e6>
 80087a2:	1b80      	subs	r0, r0, r6
 80087a4:	6060      	str	r0, [r4, #4]
 80087a6:	6863      	ldr	r3, [r4, #4]
 80087a8:	6123      	str	r3, [r4, #16]
 80087aa:	2300      	movs	r3, #0
 80087ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087b0:	e7aa      	b.n	8008708 <_printf_i+0x148>
 80087b2:	6923      	ldr	r3, [r4, #16]
 80087b4:	4632      	mov	r2, r6
 80087b6:	4649      	mov	r1, r9
 80087b8:	4640      	mov	r0, r8
 80087ba:	47d0      	blx	sl
 80087bc:	3001      	adds	r0, #1
 80087be:	d0ad      	beq.n	800871c <_printf_i+0x15c>
 80087c0:	6823      	ldr	r3, [r4, #0]
 80087c2:	079b      	lsls	r3, r3, #30
 80087c4:	d413      	bmi.n	80087ee <_printf_i+0x22e>
 80087c6:	68e0      	ldr	r0, [r4, #12]
 80087c8:	9b03      	ldr	r3, [sp, #12]
 80087ca:	4298      	cmp	r0, r3
 80087cc:	bfb8      	it	lt
 80087ce:	4618      	movlt	r0, r3
 80087d0:	e7a6      	b.n	8008720 <_printf_i+0x160>
 80087d2:	2301      	movs	r3, #1
 80087d4:	4632      	mov	r2, r6
 80087d6:	4649      	mov	r1, r9
 80087d8:	4640      	mov	r0, r8
 80087da:	47d0      	blx	sl
 80087dc:	3001      	adds	r0, #1
 80087de:	d09d      	beq.n	800871c <_printf_i+0x15c>
 80087e0:	3501      	adds	r5, #1
 80087e2:	68e3      	ldr	r3, [r4, #12]
 80087e4:	9903      	ldr	r1, [sp, #12]
 80087e6:	1a5b      	subs	r3, r3, r1
 80087e8:	42ab      	cmp	r3, r5
 80087ea:	dcf2      	bgt.n	80087d2 <_printf_i+0x212>
 80087ec:	e7eb      	b.n	80087c6 <_printf_i+0x206>
 80087ee:	2500      	movs	r5, #0
 80087f0:	f104 0619 	add.w	r6, r4, #25
 80087f4:	e7f5      	b.n	80087e2 <_printf_i+0x222>
 80087f6:	bf00      	nop
 80087f8:	0800a05b 	.word	0x0800a05b
 80087fc:	0800a06c 	.word	0x0800a06c

08008800 <__sflush_r>:
 8008800:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008808:	0716      	lsls	r6, r2, #28
 800880a:	4605      	mov	r5, r0
 800880c:	460c      	mov	r4, r1
 800880e:	d454      	bmi.n	80088ba <__sflush_r+0xba>
 8008810:	684b      	ldr	r3, [r1, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	dc02      	bgt.n	800881c <__sflush_r+0x1c>
 8008816:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008818:	2b00      	cmp	r3, #0
 800881a:	dd48      	ble.n	80088ae <__sflush_r+0xae>
 800881c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800881e:	2e00      	cmp	r6, #0
 8008820:	d045      	beq.n	80088ae <__sflush_r+0xae>
 8008822:	2300      	movs	r3, #0
 8008824:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008828:	682f      	ldr	r7, [r5, #0]
 800882a:	6a21      	ldr	r1, [r4, #32]
 800882c:	602b      	str	r3, [r5, #0]
 800882e:	d030      	beq.n	8008892 <__sflush_r+0x92>
 8008830:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008832:	89a3      	ldrh	r3, [r4, #12]
 8008834:	0759      	lsls	r1, r3, #29
 8008836:	d505      	bpl.n	8008844 <__sflush_r+0x44>
 8008838:	6863      	ldr	r3, [r4, #4]
 800883a:	1ad2      	subs	r2, r2, r3
 800883c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800883e:	b10b      	cbz	r3, 8008844 <__sflush_r+0x44>
 8008840:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008842:	1ad2      	subs	r2, r2, r3
 8008844:	2300      	movs	r3, #0
 8008846:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008848:	6a21      	ldr	r1, [r4, #32]
 800884a:	4628      	mov	r0, r5
 800884c:	47b0      	blx	r6
 800884e:	1c43      	adds	r3, r0, #1
 8008850:	89a3      	ldrh	r3, [r4, #12]
 8008852:	d106      	bne.n	8008862 <__sflush_r+0x62>
 8008854:	6829      	ldr	r1, [r5, #0]
 8008856:	291d      	cmp	r1, #29
 8008858:	d82b      	bhi.n	80088b2 <__sflush_r+0xb2>
 800885a:	4a2a      	ldr	r2, [pc, #168]	@ (8008904 <__sflush_r+0x104>)
 800885c:	410a      	asrs	r2, r1
 800885e:	07d6      	lsls	r6, r2, #31
 8008860:	d427      	bmi.n	80088b2 <__sflush_r+0xb2>
 8008862:	2200      	movs	r2, #0
 8008864:	6062      	str	r2, [r4, #4]
 8008866:	04d9      	lsls	r1, r3, #19
 8008868:	6922      	ldr	r2, [r4, #16]
 800886a:	6022      	str	r2, [r4, #0]
 800886c:	d504      	bpl.n	8008878 <__sflush_r+0x78>
 800886e:	1c42      	adds	r2, r0, #1
 8008870:	d101      	bne.n	8008876 <__sflush_r+0x76>
 8008872:	682b      	ldr	r3, [r5, #0]
 8008874:	b903      	cbnz	r3, 8008878 <__sflush_r+0x78>
 8008876:	6560      	str	r0, [r4, #84]	@ 0x54
 8008878:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800887a:	602f      	str	r7, [r5, #0]
 800887c:	b1b9      	cbz	r1, 80088ae <__sflush_r+0xae>
 800887e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008882:	4299      	cmp	r1, r3
 8008884:	d002      	beq.n	800888c <__sflush_r+0x8c>
 8008886:	4628      	mov	r0, r5
 8008888:	f000 fa24 	bl	8008cd4 <_free_r>
 800888c:	2300      	movs	r3, #0
 800888e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008890:	e00d      	b.n	80088ae <__sflush_r+0xae>
 8008892:	2301      	movs	r3, #1
 8008894:	4628      	mov	r0, r5
 8008896:	47b0      	blx	r6
 8008898:	4602      	mov	r2, r0
 800889a:	1c50      	adds	r0, r2, #1
 800889c:	d1c9      	bne.n	8008832 <__sflush_r+0x32>
 800889e:	682b      	ldr	r3, [r5, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d0c6      	beq.n	8008832 <__sflush_r+0x32>
 80088a4:	2b1d      	cmp	r3, #29
 80088a6:	d001      	beq.n	80088ac <__sflush_r+0xac>
 80088a8:	2b16      	cmp	r3, #22
 80088aa:	d11e      	bne.n	80088ea <__sflush_r+0xea>
 80088ac:	602f      	str	r7, [r5, #0]
 80088ae:	2000      	movs	r0, #0
 80088b0:	e022      	b.n	80088f8 <__sflush_r+0xf8>
 80088b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088b6:	b21b      	sxth	r3, r3
 80088b8:	e01b      	b.n	80088f2 <__sflush_r+0xf2>
 80088ba:	690f      	ldr	r7, [r1, #16]
 80088bc:	2f00      	cmp	r7, #0
 80088be:	d0f6      	beq.n	80088ae <__sflush_r+0xae>
 80088c0:	0793      	lsls	r3, r2, #30
 80088c2:	680e      	ldr	r6, [r1, #0]
 80088c4:	bf08      	it	eq
 80088c6:	694b      	ldreq	r3, [r1, #20]
 80088c8:	600f      	str	r7, [r1, #0]
 80088ca:	bf18      	it	ne
 80088cc:	2300      	movne	r3, #0
 80088ce:	eba6 0807 	sub.w	r8, r6, r7
 80088d2:	608b      	str	r3, [r1, #8]
 80088d4:	f1b8 0f00 	cmp.w	r8, #0
 80088d8:	dde9      	ble.n	80088ae <__sflush_r+0xae>
 80088da:	6a21      	ldr	r1, [r4, #32]
 80088dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80088de:	4643      	mov	r3, r8
 80088e0:	463a      	mov	r2, r7
 80088e2:	4628      	mov	r0, r5
 80088e4:	47b0      	blx	r6
 80088e6:	2800      	cmp	r0, #0
 80088e8:	dc08      	bgt.n	80088fc <__sflush_r+0xfc>
 80088ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088f2:	81a3      	strh	r3, [r4, #12]
 80088f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088fc:	4407      	add	r7, r0
 80088fe:	eba8 0800 	sub.w	r8, r8, r0
 8008902:	e7e7      	b.n	80088d4 <__sflush_r+0xd4>
 8008904:	dfbffffe 	.word	0xdfbffffe

08008908 <_fflush_r>:
 8008908:	b538      	push	{r3, r4, r5, lr}
 800890a:	690b      	ldr	r3, [r1, #16]
 800890c:	4605      	mov	r5, r0
 800890e:	460c      	mov	r4, r1
 8008910:	b913      	cbnz	r3, 8008918 <_fflush_r+0x10>
 8008912:	2500      	movs	r5, #0
 8008914:	4628      	mov	r0, r5
 8008916:	bd38      	pop	{r3, r4, r5, pc}
 8008918:	b118      	cbz	r0, 8008922 <_fflush_r+0x1a>
 800891a:	6a03      	ldr	r3, [r0, #32]
 800891c:	b90b      	cbnz	r3, 8008922 <_fflush_r+0x1a>
 800891e:	f7ff fb23 	bl	8007f68 <__sinit>
 8008922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d0f3      	beq.n	8008912 <_fflush_r+0xa>
 800892a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800892c:	07d0      	lsls	r0, r2, #31
 800892e:	d404      	bmi.n	800893a <_fflush_r+0x32>
 8008930:	0599      	lsls	r1, r3, #22
 8008932:	d402      	bmi.n	800893a <_fflush_r+0x32>
 8008934:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008936:	f7ff fbf0 	bl	800811a <__retarget_lock_acquire_recursive>
 800893a:	4628      	mov	r0, r5
 800893c:	4621      	mov	r1, r4
 800893e:	f7ff ff5f 	bl	8008800 <__sflush_r>
 8008942:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008944:	07da      	lsls	r2, r3, #31
 8008946:	4605      	mov	r5, r0
 8008948:	d4e4      	bmi.n	8008914 <_fflush_r+0xc>
 800894a:	89a3      	ldrh	r3, [r4, #12]
 800894c:	059b      	lsls	r3, r3, #22
 800894e:	d4e1      	bmi.n	8008914 <_fflush_r+0xc>
 8008950:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008952:	f7ff fbe3 	bl	800811c <__retarget_lock_release_recursive>
 8008956:	e7dd      	b.n	8008914 <_fflush_r+0xc>

08008958 <__malloc_lock>:
 8008958:	4801      	ldr	r0, [pc, #4]	@ (8008960 <__malloc_lock+0x8>)
 800895a:	f7ff bbde 	b.w	800811a <__retarget_lock_acquire_recursive>
 800895e:	bf00      	nop
 8008960:	20025ec0 	.word	0x20025ec0

08008964 <__malloc_unlock>:
 8008964:	4801      	ldr	r0, [pc, #4]	@ (800896c <__malloc_unlock+0x8>)
 8008966:	f7ff bbd9 	b.w	800811c <__retarget_lock_release_recursive>
 800896a:	bf00      	nop
 800896c:	20025ec0 	.word	0x20025ec0

08008970 <__sread>:
 8008970:	b510      	push	{r4, lr}
 8008972:	460c      	mov	r4, r1
 8008974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008978:	f000 f978 	bl	8008c6c <_read_r>
 800897c:	2800      	cmp	r0, #0
 800897e:	bfab      	itete	ge
 8008980:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008982:	89a3      	ldrhlt	r3, [r4, #12]
 8008984:	181b      	addge	r3, r3, r0
 8008986:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800898a:	bfac      	ite	ge
 800898c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800898e:	81a3      	strhlt	r3, [r4, #12]
 8008990:	bd10      	pop	{r4, pc}

08008992 <__swrite>:
 8008992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008996:	461f      	mov	r7, r3
 8008998:	898b      	ldrh	r3, [r1, #12]
 800899a:	05db      	lsls	r3, r3, #23
 800899c:	4605      	mov	r5, r0
 800899e:	460c      	mov	r4, r1
 80089a0:	4616      	mov	r6, r2
 80089a2:	d505      	bpl.n	80089b0 <__swrite+0x1e>
 80089a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a8:	2302      	movs	r3, #2
 80089aa:	2200      	movs	r2, #0
 80089ac:	f000 f94c 	bl	8008c48 <_lseek_r>
 80089b0:	89a3      	ldrh	r3, [r4, #12]
 80089b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80089ba:	81a3      	strh	r3, [r4, #12]
 80089bc:	4632      	mov	r2, r6
 80089be:	463b      	mov	r3, r7
 80089c0:	4628      	mov	r0, r5
 80089c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089c6:	f000 b973 	b.w	8008cb0 <_write_r>

080089ca <__sseek>:
 80089ca:	b510      	push	{r4, lr}
 80089cc:	460c      	mov	r4, r1
 80089ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089d2:	f000 f939 	bl	8008c48 <_lseek_r>
 80089d6:	1c43      	adds	r3, r0, #1
 80089d8:	89a3      	ldrh	r3, [r4, #12]
 80089da:	bf15      	itete	ne
 80089dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80089de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80089e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80089e6:	81a3      	strheq	r3, [r4, #12]
 80089e8:	bf18      	it	ne
 80089ea:	81a3      	strhne	r3, [r4, #12]
 80089ec:	bd10      	pop	{r4, pc}

080089ee <__sclose>:
 80089ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089f2:	f000 b8f7 	b.w	8008be4 <_close_r>

080089f6 <__swbuf_r>:
 80089f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f8:	460e      	mov	r6, r1
 80089fa:	4614      	mov	r4, r2
 80089fc:	4605      	mov	r5, r0
 80089fe:	b118      	cbz	r0, 8008a08 <__swbuf_r+0x12>
 8008a00:	6a03      	ldr	r3, [r0, #32]
 8008a02:	b90b      	cbnz	r3, 8008a08 <__swbuf_r+0x12>
 8008a04:	f7ff fab0 	bl	8007f68 <__sinit>
 8008a08:	69a3      	ldr	r3, [r4, #24]
 8008a0a:	60a3      	str	r3, [r4, #8]
 8008a0c:	89a3      	ldrh	r3, [r4, #12]
 8008a0e:	071a      	lsls	r2, r3, #28
 8008a10:	d501      	bpl.n	8008a16 <__swbuf_r+0x20>
 8008a12:	6923      	ldr	r3, [r4, #16]
 8008a14:	b943      	cbnz	r3, 8008a28 <__swbuf_r+0x32>
 8008a16:	4621      	mov	r1, r4
 8008a18:	4628      	mov	r0, r5
 8008a1a:	f000 f82b 	bl	8008a74 <__swsetup_r>
 8008a1e:	b118      	cbz	r0, 8008a28 <__swbuf_r+0x32>
 8008a20:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008a24:	4638      	mov	r0, r7
 8008a26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a28:	6823      	ldr	r3, [r4, #0]
 8008a2a:	6922      	ldr	r2, [r4, #16]
 8008a2c:	1a98      	subs	r0, r3, r2
 8008a2e:	6963      	ldr	r3, [r4, #20]
 8008a30:	b2f6      	uxtb	r6, r6
 8008a32:	4283      	cmp	r3, r0
 8008a34:	4637      	mov	r7, r6
 8008a36:	dc05      	bgt.n	8008a44 <__swbuf_r+0x4e>
 8008a38:	4621      	mov	r1, r4
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	f7ff ff64 	bl	8008908 <_fflush_r>
 8008a40:	2800      	cmp	r0, #0
 8008a42:	d1ed      	bne.n	8008a20 <__swbuf_r+0x2a>
 8008a44:	68a3      	ldr	r3, [r4, #8]
 8008a46:	3b01      	subs	r3, #1
 8008a48:	60a3      	str	r3, [r4, #8]
 8008a4a:	6823      	ldr	r3, [r4, #0]
 8008a4c:	1c5a      	adds	r2, r3, #1
 8008a4e:	6022      	str	r2, [r4, #0]
 8008a50:	701e      	strb	r6, [r3, #0]
 8008a52:	6962      	ldr	r2, [r4, #20]
 8008a54:	1c43      	adds	r3, r0, #1
 8008a56:	429a      	cmp	r2, r3
 8008a58:	d004      	beq.n	8008a64 <__swbuf_r+0x6e>
 8008a5a:	89a3      	ldrh	r3, [r4, #12]
 8008a5c:	07db      	lsls	r3, r3, #31
 8008a5e:	d5e1      	bpl.n	8008a24 <__swbuf_r+0x2e>
 8008a60:	2e0a      	cmp	r6, #10
 8008a62:	d1df      	bne.n	8008a24 <__swbuf_r+0x2e>
 8008a64:	4621      	mov	r1, r4
 8008a66:	4628      	mov	r0, r5
 8008a68:	f7ff ff4e 	bl	8008908 <_fflush_r>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d0d9      	beq.n	8008a24 <__swbuf_r+0x2e>
 8008a70:	e7d6      	b.n	8008a20 <__swbuf_r+0x2a>
	...

08008a74 <__swsetup_r>:
 8008a74:	b538      	push	{r3, r4, r5, lr}
 8008a76:	4b29      	ldr	r3, [pc, #164]	@ (8008b1c <__swsetup_r+0xa8>)
 8008a78:	4605      	mov	r5, r0
 8008a7a:	6818      	ldr	r0, [r3, #0]
 8008a7c:	460c      	mov	r4, r1
 8008a7e:	b118      	cbz	r0, 8008a88 <__swsetup_r+0x14>
 8008a80:	6a03      	ldr	r3, [r0, #32]
 8008a82:	b90b      	cbnz	r3, 8008a88 <__swsetup_r+0x14>
 8008a84:	f7ff fa70 	bl	8007f68 <__sinit>
 8008a88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a8c:	0719      	lsls	r1, r3, #28
 8008a8e:	d422      	bmi.n	8008ad6 <__swsetup_r+0x62>
 8008a90:	06da      	lsls	r2, r3, #27
 8008a92:	d407      	bmi.n	8008aa4 <__swsetup_r+0x30>
 8008a94:	2209      	movs	r2, #9
 8008a96:	602a      	str	r2, [r5, #0]
 8008a98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a9c:	81a3      	strh	r3, [r4, #12]
 8008a9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008aa2:	e033      	b.n	8008b0c <__swsetup_r+0x98>
 8008aa4:	0758      	lsls	r0, r3, #29
 8008aa6:	d512      	bpl.n	8008ace <__swsetup_r+0x5a>
 8008aa8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008aaa:	b141      	cbz	r1, 8008abe <__swsetup_r+0x4a>
 8008aac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ab0:	4299      	cmp	r1, r3
 8008ab2:	d002      	beq.n	8008aba <__swsetup_r+0x46>
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	f000 f90d 	bl	8008cd4 <_free_r>
 8008aba:	2300      	movs	r3, #0
 8008abc:	6363      	str	r3, [r4, #52]	@ 0x34
 8008abe:	89a3      	ldrh	r3, [r4, #12]
 8008ac0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008ac4:	81a3      	strh	r3, [r4, #12]
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	6063      	str	r3, [r4, #4]
 8008aca:	6923      	ldr	r3, [r4, #16]
 8008acc:	6023      	str	r3, [r4, #0]
 8008ace:	89a3      	ldrh	r3, [r4, #12]
 8008ad0:	f043 0308 	orr.w	r3, r3, #8
 8008ad4:	81a3      	strh	r3, [r4, #12]
 8008ad6:	6923      	ldr	r3, [r4, #16]
 8008ad8:	b94b      	cbnz	r3, 8008aee <__swsetup_r+0x7a>
 8008ada:	89a3      	ldrh	r3, [r4, #12]
 8008adc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008ae0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ae4:	d003      	beq.n	8008aee <__swsetup_r+0x7a>
 8008ae6:	4621      	mov	r1, r4
 8008ae8:	4628      	mov	r0, r5
 8008aea:	f000 f83f 	bl	8008b6c <__smakebuf_r>
 8008aee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008af2:	f013 0201 	ands.w	r2, r3, #1
 8008af6:	d00a      	beq.n	8008b0e <__swsetup_r+0x9a>
 8008af8:	2200      	movs	r2, #0
 8008afa:	60a2      	str	r2, [r4, #8]
 8008afc:	6962      	ldr	r2, [r4, #20]
 8008afe:	4252      	negs	r2, r2
 8008b00:	61a2      	str	r2, [r4, #24]
 8008b02:	6922      	ldr	r2, [r4, #16]
 8008b04:	b942      	cbnz	r2, 8008b18 <__swsetup_r+0xa4>
 8008b06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008b0a:	d1c5      	bne.n	8008a98 <__swsetup_r+0x24>
 8008b0c:	bd38      	pop	{r3, r4, r5, pc}
 8008b0e:	0799      	lsls	r1, r3, #30
 8008b10:	bf58      	it	pl
 8008b12:	6962      	ldrpl	r2, [r4, #20]
 8008b14:	60a2      	str	r2, [r4, #8]
 8008b16:	e7f4      	b.n	8008b02 <__swsetup_r+0x8e>
 8008b18:	2000      	movs	r0, #0
 8008b1a:	e7f7      	b.n	8008b0c <__swsetup_r+0x98>
 8008b1c:	20000030 	.word	0x20000030

08008b20 <__swhatbuf_r>:
 8008b20:	b570      	push	{r4, r5, r6, lr}
 8008b22:	460c      	mov	r4, r1
 8008b24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b28:	2900      	cmp	r1, #0
 8008b2a:	b096      	sub	sp, #88	@ 0x58
 8008b2c:	4615      	mov	r5, r2
 8008b2e:	461e      	mov	r6, r3
 8008b30:	da0d      	bge.n	8008b4e <__swhatbuf_r+0x2e>
 8008b32:	89a3      	ldrh	r3, [r4, #12]
 8008b34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b38:	f04f 0100 	mov.w	r1, #0
 8008b3c:	bf14      	ite	ne
 8008b3e:	2340      	movne	r3, #64	@ 0x40
 8008b40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b44:	2000      	movs	r0, #0
 8008b46:	6031      	str	r1, [r6, #0]
 8008b48:	602b      	str	r3, [r5, #0]
 8008b4a:	b016      	add	sp, #88	@ 0x58
 8008b4c:	bd70      	pop	{r4, r5, r6, pc}
 8008b4e:	466a      	mov	r2, sp
 8008b50:	f000 f858 	bl	8008c04 <_fstat_r>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	dbec      	blt.n	8008b32 <__swhatbuf_r+0x12>
 8008b58:	9901      	ldr	r1, [sp, #4]
 8008b5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b62:	4259      	negs	r1, r3
 8008b64:	4159      	adcs	r1, r3
 8008b66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b6a:	e7eb      	b.n	8008b44 <__swhatbuf_r+0x24>

08008b6c <__smakebuf_r>:
 8008b6c:	898b      	ldrh	r3, [r1, #12]
 8008b6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b70:	079d      	lsls	r5, r3, #30
 8008b72:	4606      	mov	r6, r0
 8008b74:	460c      	mov	r4, r1
 8008b76:	d507      	bpl.n	8008b88 <__smakebuf_r+0x1c>
 8008b78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b7c:	6023      	str	r3, [r4, #0]
 8008b7e:	6123      	str	r3, [r4, #16]
 8008b80:	2301      	movs	r3, #1
 8008b82:	6163      	str	r3, [r4, #20]
 8008b84:	b003      	add	sp, #12
 8008b86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b88:	ab01      	add	r3, sp, #4
 8008b8a:	466a      	mov	r2, sp
 8008b8c:	f7ff ffc8 	bl	8008b20 <__swhatbuf_r>
 8008b90:	9f00      	ldr	r7, [sp, #0]
 8008b92:	4605      	mov	r5, r0
 8008b94:	4639      	mov	r1, r7
 8008b96:	4630      	mov	r0, r6
 8008b98:	f7ff fc24 	bl	80083e4 <_malloc_r>
 8008b9c:	b948      	cbnz	r0, 8008bb2 <__smakebuf_r+0x46>
 8008b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ba2:	059a      	lsls	r2, r3, #22
 8008ba4:	d4ee      	bmi.n	8008b84 <__smakebuf_r+0x18>
 8008ba6:	f023 0303 	bic.w	r3, r3, #3
 8008baa:	f043 0302 	orr.w	r3, r3, #2
 8008bae:	81a3      	strh	r3, [r4, #12]
 8008bb0:	e7e2      	b.n	8008b78 <__smakebuf_r+0xc>
 8008bb2:	89a3      	ldrh	r3, [r4, #12]
 8008bb4:	6020      	str	r0, [r4, #0]
 8008bb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bba:	81a3      	strh	r3, [r4, #12]
 8008bbc:	9b01      	ldr	r3, [sp, #4]
 8008bbe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008bc2:	b15b      	cbz	r3, 8008bdc <__smakebuf_r+0x70>
 8008bc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bc8:	4630      	mov	r0, r6
 8008bca:	f000 f82d 	bl	8008c28 <_isatty_r>
 8008bce:	b128      	cbz	r0, 8008bdc <__smakebuf_r+0x70>
 8008bd0:	89a3      	ldrh	r3, [r4, #12]
 8008bd2:	f023 0303 	bic.w	r3, r3, #3
 8008bd6:	f043 0301 	orr.w	r3, r3, #1
 8008bda:	81a3      	strh	r3, [r4, #12]
 8008bdc:	89a3      	ldrh	r3, [r4, #12]
 8008bde:	431d      	orrs	r5, r3
 8008be0:	81a5      	strh	r5, [r4, #12]
 8008be2:	e7cf      	b.n	8008b84 <__smakebuf_r+0x18>

08008be4 <_close_r>:
 8008be4:	b538      	push	{r3, r4, r5, lr}
 8008be6:	4d06      	ldr	r5, [pc, #24]	@ (8008c00 <_close_r+0x1c>)
 8008be8:	2300      	movs	r3, #0
 8008bea:	4604      	mov	r4, r0
 8008bec:	4608      	mov	r0, r1
 8008bee:	602b      	str	r3, [r5, #0]
 8008bf0:	f7fe ff6a 	bl	8007ac8 <_close>
 8008bf4:	1c43      	adds	r3, r0, #1
 8008bf6:	d102      	bne.n	8008bfe <_close_r+0x1a>
 8008bf8:	682b      	ldr	r3, [r5, #0]
 8008bfa:	b103      	cbz	r3, 8008bfe <_close_r+0x1a>
 8008bfc:	6023      	str	r3, [r4, #0]
 8008bfe:	bd38      	pop	{r3, r4, r5, pc}
 8008c00:	20025ecc 	.word	0x20025ecc

08008c04 <_fstat_r>:
 8008c04:	b538      	push	{r3, r4, r5, lr}
 8008c06:	4d07      	ldr	r5, [pc, #28]	@ (8008c24 <_fstat_r+0x20>)
 8008c08:	2300      	movs	r3, #0
 8008c0a:	4604      	mov	r4, r0
 8008c0c:	4608      	mov	r0, r1
 8008c0e:	4611      	mov	r1, r2
 8008c10:	602b      	str	r3, [r5, #0]
 8008c12:	f7fe ff9c 	bl	8007b4e <_fstat>
 8008c16:	1c43      	adds	r3, r0, #1
 8008c18:	d102      	bne.n	8008c20 <_fstat_r+0x1c>
 8008c1a:	682b      	ldr	r3, [r5, #0]
 8008c1c:	b103      	cbz	r3, 8008c20 <_fstat_r+0x1c>
 8008c1e:	6023      	str	r3, [r4, #0]
 8008c20:	bd38      	pop	{r3, r4, r5, pc}
 8008c22:	bf00      	nop
 8008c24:	20025ecc 	.word	0x20025ecc

08008c28 <_isatty_r>:
 8008c28:	b538      	push	{r3, r4, r5, lr}
 8008c2a:	4d06      	ldr	r5, [pc, #24]	@ (8008c44 <_isatty_r+0x1c>)
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	4604      	mov	r4, r0
 8008c30:	4608      	mov	r0, r1
 8008c32:	602b      	str	r3, [r5, #0]
 8008c34:	f7ff f8ee 	bl	8007e14 <_isatty>
 8008c38:	1c43      	adds	r3, r0, #1
 8008c3a:	d102      	bne.n	8008c42 <_isatty_r+0x1a>
 8008c3c:	682b      	ldr	r3, [r5, #0]
 8008c3e:	b103      	cbz	r3, 8008c42 <_isatty_r+0x1a>
 8008c40:	6023      	str	r3, [r4, #0]
 8008c42:	bd38      	pop	{r3, r4, r5, pc}
 8008c44:	20025ecc 	.word	0x20025ecc

08008c48 <_lseek_r>:
 8008c48:	b538      	push	{r3, r4, r5, lr}
 8008c4a:	4d07      	ldr	r5, [pc, #28]	@ (8008c68 <_lseek_r+0x20>)
 8008c4c:	4604      	mov	r4, r0
 8008c4e:	4608      	mov	r0, r1
 8008c50:	4611      	mov	r1, r2
 8008c52:	2200      	movs	r2, #0
 8008c54:	602a      	str	r2, [r5, #0]
 8008c56:	461a      	mov	r2, r3
 8008c58:	f7fe fef7 	bl	8007a4a <_lseek>
 8008c5c:	1c43      	adds	r3, r0, #1
 8008c5e:	d102      	bne.n	8008c66 <_lseek_r+0x1e>
 8008c60:	682b      	ldr	r3, [r5, #0]
 8008c62:	b103      	cbz	r3, 8008c66 <_lseek_r+0x1e>
 8008c64:	6023      	str	r3, [r4, #0]
 8008c66:	bd38      	pop	{r3, r4, r5, pc}
 8008c68:	20025ecc 	.word	0x20025ecc

08008c6c <_read_r>:
 8008c6c:	b538      	push	{r3, r4, r5, lr}
 8008c6e:	4d07      	ldr	r5, [pc, #28]	@ (8008c8c <_read_r+0x20>)
 8008c70:	4604      	mov	r4, r0
 8008c72:	4608      	mov	r0, r1
 8008c74:	4611      	mov	r1, r2
 8008c76:	2200      	movs	r2, #0
 8008c78:	602a      	str	r2, [r5, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	f7fe fe8f 	bl	800799e <_read>
 8008c80:	1c43      	adds	r3, r0, #1
 8008c82:	d102      	bne.n	8008c8a <_read_r+0x1e>
 8008c84:	682b      	ldr	r3, [r5, #0]
 8008c86:	b103      	cbz	r3, 8008c8a <_read_r+0x1e>
 8008c88:	6023      	str	r3, [r4, #0]
 8008c8a:	bd38      	pop	{r3, r4, r5, pc}
 8008c8c:	20025ecc 	.word	0x20025ecc

08008c90 <_sbrk_r>:
 8008c90:	b538      	push	{r3, r4, r5, lr}
 8008c92:	4d06      	ldr	r5, [pc, #24]	@ (8008cac <_sbrk_r+0x1c>)
 8008c94:	2300      	movs	r3, #0
 8008c96:	4604      	mov	r4, r0
 8008c98:	4608      	mov	r0, r1
 8008c9a:	602b      	str	r3, [r5, #0]
 8008c9c:	f7fa fea0 	bl	80039e0 <_sbrk>
 8008ca0:	1c43      	adds	r3, r0, #1
 8008ca2:	d102      	bne.n	8008caa <_sbrk_r+0x1a>
 8008ca4:	682b      	ldr	r3, [r5, #0]
 8008ca6:	b103      	cbz	r3, 8008caa <_sbrk_r+0x1a>
 8008ca8:	6023      	str	r3, [r4, #0]
 8008caa:	bd38      	pop	{r3, r4, r5, pc}
 8008cac:	20025ecc 	.word	0x20025ecc

08008cb0 <_write_r>:
 8008cb0:	b538      	push	{r3, r4, r5, lr}
 8008cb2:	4d07      	ldr	r5, [pc, #28]	@ (8008cd0 <_write_r+0x20>)
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	4608      	mov	r0, r1
 8008cb8:	4611      	mov	r1, r2
 8008cba:	2200      	movs	r2, #0
 8008cbc:	602a      	str	r2, [r5, #0]
 8008cbe:	461a      	mov	r2, r3
 8008cc0:	f7fe fed5 	bl	8007a6e <_write>
 8008cc4:	1c43      	adds	r3, r0, #1
 8008cc6:	d102      	bne.n	8008cce <_write_r+0x1e>
 8008cc8:	682b      	ldr	r3, [r5, #0]
 8008cca:	b103      	cbz	r3, 8008cce <_write_r+0x1e>
 8008ccc:	6023      	str	r3, [r4, #0]
 8008cce:	bd38      	pop	{r3, r4, r5, pc}
 8008cd0:	20025ecc 	.word	0x20025ecc

08008cd4 <_free_r>:
 8008cd4:	b538      	push	{r3, r4, r5, lr}
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	2900      	cmp	r1, #0
 8008cda:	d041      	beq.n	8008d60 <_free_r+0x8c>
 8008cdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ce0:	1f0c      	subs	r4, r1, #4
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	bfb8      	it	lt
 8008ce6:	18e4      	addlt	r4, r4, r3
 8008ce8:	f7ff fe36 	bl	8008958 <__malloc_lock>
 8008cec:	4a1d      	ldr	r2, [pc, #116]	@ (8008d64 <_free_r+0x90>)
 8008cee:	6813      	ldr	r3, [r2, #0]
 8008cf0:	b933      	cbnz	r3, 8008d00 <_free_r+0x2c>
 8008cf2:	6063      	str	r3, [r4, #4]
 8008cf4:	6014      	str	r4, [r2, #0]
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cfc:	f7ff be32 	b.w	8008964 <__malloc_unlock>
 8008d00:	42a3      	cmp	r3, r4
 8008d02:	d908      	bls.n	8008d16 <_free_r+0x42>
 8008d04:	6820      	ldr	r0, [r4, #0]
 8008d06:	1821      	adds	r1, r4, r0
 8008d08:	428b      	cmp	r3, r1
 8008d0a:	bf01      	itttt	eq
 8008d0c:	6819      	ldreq	r1, [r3, #0]
 8008d0e:	685b      	ldreq	r3, [r3, #4]
 8008d10:	1809      	addeq	r1, r1, r0
 8008d12:	6021      	streq	r1, [r4, #0]
 8008d14:	e7ed      	b.n	8008cf2 <_free_r+0x1e>
 8008d16:	461a      	mov	r2, r3
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	b10b      	cbz	r3, 8008d20 <_free_r+0x4c>
 8008d1c:	42a3      	cmp	r3, r4
 8008d1e:	d9fa      	bls.n	8008d16 <_free_r+0x42>
 8008d20:	6811      	ldr	r1, [r2, #0]
 8008d22:	1850      	adds	r0, r2, r1
 8008d24:	42a0      	cmp	r0, r4
 8008d26:	d10b      	bne.n	8008d40 <_free_r+0x6c>
 8008d28:	6820      	ldr	r0, [r4, #0]
 8008d2a:	4401      	add	r1, r0
 8008d2c:	1850      	adds	r0, r2, r1
 8008d2e:	4283      	cmp	r3, r0
 8008d30:	6011      	str	r1, [r2, #0]
 8008d32:	d1e0      	bne.n	8008cf6 <_free_r+0x22>
 8008d34:	6818      	ldr	r0, [r3, #0]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	6053      	str	r3, [r2, #4]
 8008d3a:	4408      	add	r0, r1
 8008d3c:	6010      	str	r0, [r2, #0]
 8008d3e:	e7da      	b.n	8008cf6 <_free_r+0x22>
 8008d40:	d902      	bls.n	8008d48 <_free_r+0x74>
 8008d42:	230c      	movs	r3, #12
 8008d44:	602b      	str	r3, [r5, #0]
 8008d46:	e7d6      	b.n	8008cf6 <_free_r+0x22>
 8008d48:	6820      	ldr	r0, [r4, #0]
 8008d4a:	1821      	adds	r1, r4, r0
 8008d4c:	428b      	cmp	r3, r1
 8008d4e:	bf04      	itt	eq
 8008d50:	6819      	ldreq	r1, [r3, #0]
 8008d52:	685b      	ldreq	r3, [r3, #4]
 8008d54:	6063      	str	r3, [r4, #4]
 8008d56:	bf04      	itt	eq
 8008d58:	1809      	addeq	r1, r1, r0
 8008d5a:	6021      	streq	r1, [r4, #0]
 8008d5c:	6054      	str	r4, [r2, #4]
 8008d5e:	e7ca      	b.n	8008cf6 <_free_r+0x22>
 8008d60:	bd38      	pop	{r3, r4, r5, pc}
 8008d62:	bf00      	nop
 8008d64:	20025ec8 	.word	0x20025ec8

08008d68 <_init>:
 8008d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6a:	bf00      	nop
 8008d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d6e:	bc08      	pop	{r3}
 8008d70:	469e      	mov	lr, r3
 8008d72:	4770      	bx	lr

08008d74 <_fini>:
 8008d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d76:	bf00      	nop
 8008d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d7a:	bc08      	pop	{r3}
 8008d7c:	469e      	mov	lr, r3
 8008d7e:	4770      	bx	lr
