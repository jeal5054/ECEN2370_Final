
JAllenLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005594  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005744  08005744  00006744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005820  08005820  00007068  2**0
                  CONTENTS
  4 .ARM          00000008  08005820  08005820  00006820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005828  08005828  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005828  08005828  00006828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800582c  0800582c  0000682c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005830  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007068  2**0
                  CONTENTS
 10 .bss          00000454  20000068  20000068  00007068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004bc  200004bc  00007068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011143  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000276b  00000000  00000000  000181db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001180  00000000  00000000  0001a948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d9d  00000000  00000000  0001bac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d89  00000000  00000000  0001c865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015845  00000000  00000000  000415ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddde1  00000000  00000000  00056e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00134c14  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052c0  00000000  00000000  00134c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00139f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800572c 	.word	0x0800572c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	0800572c 	.word	0x0800572c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <applicationInit>:
 */
#include "ApplicationCode.h"
#include "InterruptControl.h"
#include "Matrixdef.h"

void applicationInit(){
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	//applicationInterruptInit();
	addScheduledEvent(MATRIX_UPDATE_EVENT);
 8000584:	2004      	movs	r0, #4
 8000586:	f000 fe19 	bl	80011bc <addScheduledEvent>
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <RND_NUM>:
 */
#include "Matrixdef.h"

#define MATRIX_LCD 0

void RND_NUM(void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	static RNG_HandleTypeDef hrng;
	hrng.Instance = RNG;
 8000594:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <RND_NUM+0x40>)
 8000596:	4a0f      	ldr	r2, [pc, #60]	@ (80005d4 <RND_NUM+0x44>)
 8000598:	601a      	str	r2, [r3, #0]
	if (HAL_RNG_GenerateRandomNumber(&hrng, &randomNumber) != HAL_OK) {
 800059a:	490f      	ldr	r1, [pc, #60]	@ (80005d8 <RND_NUM+0x48>)
 800059c:	480c      	ldr	r0, [pc, #48]	@ (80005d0 <RND_NUM+0x40>)
 800059e:	f003 fbe9 	bl	8003d74 <HAL_RNG_GenerateRandomNumber>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <RND_NUM+0x1c>
		while(1);
 80005a8:	bf00      	nop
 80005aa:	e7fd      	b.n	80005a8 <RND_NUM+0x18>
	}
	randomNumber = randomNumber % 7;
 80005ac:	4b0a      	ldr	r3, [pc, #40]	@ (80005d8 <RND_NUM+0x48>)
 80005ae:	6819      	ldr	r1, [r3, #0]
 80005b0:	4b0a      	ldr	r3, [pc, #40]	@ (80005dc <RND_NUM+0x4c>)
 80005b2:	fba3 2301 	umull	r2, r3, r3, r1
 80005b6:	1aca      	subs	r2, r1, r3
 80005b8:	0852      	lsrs	r2, r2, #1
 80005ba:	4413      	add	r3, r2
 80005bc:	089a      	lsrs	r2, r3, #2
 80005be:	4613      	mov	r3, r2
 80005c0:	00db      	lsls	r3, r3, #3
 80005c2:	1a9b      	subs	r3, r3, r2
 80005c4:	1aca      	subs	r2, r1, r3
 80005c6:	4b04      	ldr	r3, [pc, #16]	@ (80005d8 <RND_NUM+0x48>)
 80005c8:	601a      	str	r2, [r3, #0]
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	20000118 	.word	0x20000118
 80005d4:	50060800 	.word	0x50060800
 80005d8:	20000114 	.word	0x20000114
 80005dc:	24924925 	.word	0x24924925

080005e0 <check_State>:

uint8_t check_State(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	if(     (object.originbit.x <= 0) || (object.originbit.x >= 9) ||
 80005e4:	4b3a      	ldr	r3, [pc, #232]	@ (80006d0 <check_State+0xf0>)
 80005e6:	789b      	ldrb	r3, [r3, #2]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d01b      	beq.n	8000624 <check_State+0x44>
 80005ec:	4b38      	ldr	r3, [pc, #224]	@ (80006d0 <check_State+0xf0>)
 80005ee:	789b      	ldrb	r3, [r3, #2]
 80005f0:	2b08      	cmp	r3, #8
 80005f2:	d817      	bhi.n	8000624 <check_State+0x44>
	   (object.suboriginbit_0.x <= 0) || (object.suboriginbit_0.x >= 9) ||
 80005f4:	4b36      	ldr	r3, [pc, #216]	@ (80006d0 <check_State+0xf0>)
 80005f6:	791b      	ldrb	r3, [r3, #4]
	if(     (object.originbit.x <= 0) || (object.originbit.x >= 9) ||
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d013      	beq.n	8000624 <check_State+0x44>
	   (object.suboriginbit_0.x <= 0) || (object.suboriginbit_0.x >= 9) ||
 80005fc:	4b34      	ldr	r3, [pc, #208]	@ (80006d0 <check_State+0xf0>)
 80005fe:	791b      	ldrb	r3, [r3, #4]
 8000600:	2b08      	cmp	r3, #8
 8000602:	d80f      	bhi.n	8000624 <check_State+0x44>
	   (object.suboriginbit_1.x <= 0) || (object.suboriginbit_1.x >= 9) ||
 8000604:	4b32      	ldr	r3, [pc, #200]	@ (80006d0 <check_State+0xf0>)
 8000606:	799b      	ldrb	r3, [r3, #6]
	   (object.suboriginbit_0.x <= 0) || (object.suboriginbit_0.x >= 9) ||
 8000608:	2b00      	cmp	r3, #0
 800060a:	d00b      	beq.n	8000624 <check_State+0x44>
	   (object.suboriginbit_1.x <= 0) || (object.suboriginbit_1.x >= 9) ||
 800060c:	4b30      	ldr	r3, [pc, #192]	@ (80006d0 <check_State+0xf0>)
 800060e:	799b      	ldrb	r3, [r3, #6]
 8000610:	2b08      	cmp	r3, #8
 8000612:	d807      	bhi.n	8000624 <check_State+0x44>
	   (object.suboriginbit_2.x <= 0) || (object.suboriginbit_2.x >= 9) )
 8000614:	4b2e      	ldr	r3, [pc, #184]	@ (80006d0 <check_State+0xf0>)
 8000616:	7a1b      	ldrb	r3, [r3, #8]
	   (object.suboriginbit_1.x <= 0) || (object.suboriginbit_1.x >= 9) ||
 8000618:	2b00      	cmp	r3, #0
 800061a:	d003      	beq.n	8000624 <check_State+0x44>
	   (object.suboriginbit_2.x <= 0) || (object.suboriginbit_2.x >= 9) )
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <check_State+0xf0>)
 800061e:	7a1b      	ldrb	r3, [r3, #8]
 8000620:	2b08      	cmp	r3, #8
 8000622:	d901      	bls.n	8000628 <check_State+0x48>
	{
		return 0; // This means object has gone outside of the bounds
 8000624:	2300      	movs	r3, #0
 8000626:	e050      	b.n	80006ca <check_State+0xea>
	} else if( (object.originbit.y <= 0)      || (object.suboriginbit_0.y <= 0) ||
 8000628:	4b29      	ldr	r3, [pc, #164]	@ (80006d0 <check_State+0xf0>)
 800062a:	78db      	ldrb	r3, [r3, #3]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d00b      	beq.n	8000648 <check_State+0x68>
 8000630:	4b27      	ldr	r3, [pc, #156]	@ (80006d0 <check_State+0xf0>)
 8000632:	795b      	ldrb	r3, [r3, #5]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d007      	beq.n	8000648 <check_State+0x68>
			   (object.suboriginbit_1.y <= 0) || (object.suboriginbit_2.y <= 0) )
 8000638:	4b25      	ldr	r3, [pc, #148]	@ (80006d0 <check_State+0xf0>)
 800063a:	79db      	ldrb	r3, [r3, #7]
	} else if( (object.originbit.y <= 0)      || (object.suboriginbit_0.y <= 0) ||
 800063c:	2b00      	cmp	r3, #0
 800063e:	d003      	beq.n	8000648 <check_State+0x68>
			   (object.suboriginbit_1.y <= 0) || (object.suboriginbit_2.y <= 0) )
 8000640:	4b23      	ldr	r3, [pc, #140]	@ (80006d0 <check_State+0xf0>)
 8000642:	7a5b      	ldrb	r3, [r3, #9]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d13f      	bne.n	80006c8 <check_State+0xe8>
	{
		// initiate the ending protocal
		// Place the object in the matrix, generate new object
		dummyTable[object.originbit.x][object.originbit.y] = 1;
 8000648:	4b21      	ldr	r3, [pc, #132]	@ (80006d0 <check_State+0xf0>)
 800064a:	789b      	ldrb	r3, [r3, #2]
 800064c:	4619      	mov	r1, r3
 800064e:	4b20      	ldr	r3, [pc, #128]	@ (80006d0 <check_State+0xf0>)
 8000650:	78db      	ldrb	r3, [r3, #3]
 8000652:	4618      	mov	r0, r3
 8000654:	4a1f      	ldr	r2, [pc, #124]	@ (80006d4 <check_State+0xf4>)
 8000656:	460b      	mov	r3, r1
 8000658:	009b      	lsls	r3, r3, #2
 800065a:	440b      	add	r3, r1
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	4413      	add	r3, r2
 8000660:	4403      	add	r3, r0
 8000662:	2201      	movs	r2, #1
 8000664:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_0.x][object.suboriginbit_0.y] = 1;
 8000666:	4b1a      	ldr	r3, [pc, #104]	@ (80006d0 <check_State+0xf0>)
 8000668:	791b      	ldrb	r3, [r3, #4]
 800066a:	4619      	mov	r1, r3
 800066c:	4b18      	ldr	r3, [pc, #96]	@ (80006d0 <check_State+0xf0>)
 800066e:	795b      	ldrb	r3, [r3, #5]
 8000670:	4618      	mov	r0, r3
 8000672:	4a18      	ldr	r2, [pc, #96]	@ (80006d4 <check_State+0xf4>)
 8000674:	460b      	mov	r3, r1
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	440b      	add	r3, r1
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	4413      	add	r3, r2
 800067e:	4403      	add	r3, r0
 8000680:	2201      	movs	r2, #1
 8000682:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_1.x][object.suboriginbit_1.y] = 1;
 8000684:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <check_State+0xf0>)
 8000686:	799b      	ldrb	r3, [r3, #6]
 8000688:	4619      	mov	r1, r3
 800068a:	4b11      	ldr	r3, [pc, #68]	@ (80006d0 <check_State+0xf0>)
 800068c:	79db      	ldrb	r3, [r3, #7]
 800068e:	4618      	mov	r0, r3
 8000690:	4a10      	ldr	r2, [pc, #64]	@ (80006d4 <check_State+0xf4>)
 8000692:	460b      	mov	r3, r1
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	440b      	add	r3, r1
 8000698:	005b      	lsls	r3, r3, #1
 800069a:	4413      	add	r3, r2
 800069c:	4403      	add	r3, r0
 800069e:	2201      	movs	r2, #1
 80006a0:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_2.x][object.suboriginbit_2.y] = 1;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	@ (80006d0 <check_State+0xf0>)
 80006a4:	7a1b      	ldrb	r3, [r3, #8]
 80006a6:	4619      	mov	r1, r3
 80006a8:	4b09      	ldr	r3, [pc, #36]	@ (80006d0 <check_State+0xf0>)
 80006aa:	7a5b      	ldrb	r3, [r3, #9]
 80006ac:	4618      	mov	r0, r3
 80006ae:	4a09      	ldr	r2, [pc, #36]	@ (80006d4 <check_State+0xf4>)
 80006b0:	460b      	mov	r3, r1
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	440b      	add	r3, r1
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	4413      	add	r3, r2
 80006ba:	4403      	add	r3, r0
 80006bc:	2201      	movs	r2, #1
 80006be:	701a      	strb	r2, [r3, #0]
		object_Select();
 80006c0:	f000 f80a 	bl	80006d8 <object_Select>
		return 1; // This means object has hit the button
 80006c4:	2301      	movs	r3, #1
 80006c6:	e000      	b.n	80006ca <check_State+0xea>
	} else {
		return 2; // In case we want to see nothing can be done
 80006c8:	2302      	movs	r3, #2
	}
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000084 	.word	0x20000084
 80006d4:	20000090 	.word	0x20000090

080006d8 <object_Select>:

void object_Select(void){
 80006d8:	b580      	push	{r7, lr}
 80006da:	b096      	sub	sp, #88	@ 0x58
 80006dc:	af00      	add	r7, sp, #0
	RND_NUM();
 80006de:	f7ff ff57 	bl	8000590 <RND_NUM>
	switch(randomNumber) {
 80006e2:	4b4a      	ldr	r3, [pc, #296]	@ (800080c <object_Select+0x134>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	2b06      	cmp	r3, #6
 80006e8:	f200 808b 	bhi.w	8000802 <object_Select+0x12a>
 80006ec:	a201      	add	r2, pc, #4	@ (adr r2, 80006f4 <object_Select+0x1c>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	08000711 	.word	0x08000711
 80006f8:	08000735 	.word	0x08000735
 80006fc:	08000759 	.word	0x08000759
 8000700:	0800077d 	.word	0x0800077d
 8000704:	080007a1 	.word	0x080007a1
 8000708:	080007c3 	.word	0x080007c3
 800070c:	080007e5 	.word	0x080007e5
		case(ORICKY):
			Object Oricky = {
 8000710:	4a3f      	ldr	r2, [pc, #252]	@ (8000810 <object_Select+0x138>)
 8000712:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000716:	ca07      	ldmia	r2, {r0, r1, r2}
 8000718:	c303      	stmia	r3!, {r0, r1}
 800071a:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, // 1 [1] 1
				.suboriginbit_0 = {0, 0}, 
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Oricky;
 800071c:	4b3d      	ldr	r3, [pc, #244]	@ (8000814 <object_Select+0x13c>)
 800071e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8000722:	ca07      	ldmia	r2, {r0, r1, r2}
 8000724:	c303      	stmia	r3!, {r0, r1}
 8000726:	801a      	strh	r2, [r3, #0]
		    transform_rotation(Oricky.Rotation);
 8000728:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800072c:	4618      	mov	r0, r3
 800072e:	f000 f87f 	bl	8000830 <transform_rotation>
			break;
 8000732:	e066      	b.n	8000802 <object_Select+0x12a>

		case(BRICKY):
			Object Bricky = {
 8000734:	4a38      	ldr	r2, [pc, #224]	@ (8000818 <object_Select+0x140>)
 8000736:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800073a:	ca07      	ldmia	r2, {r0, r1, r2}
 800073c:	c303      	stmia	r3!, {r0, r1}
 800073e:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, // 1 [1] 1
				.suboriginbit_0 = {0, 0}, 
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Bricky;
 8000740:	4b34      	ldr	r3, [pc, #208]	@ (8000814 <object_Select+0x13c>)
 8000742:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000746:	ca07      	ldmia	r2, {r0, r1, r2}
 8000748:	c303      	stmia	r3!, {r0, r1}
 800074a:	801a      	strh	r2, [r3, #0]
			transform_rotation(Bricky.Rotation);
 800074c:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8000750:	4618      	mov	r0, r3
 8000752:	f000 f86d 	bl	8000830 <transform_rotation>
			break;
 8000756:	e054      	b.n	8000802 <object_Select+0x12a>

		case(CLEVELAND):
			Object Cleveland = {
 8000758:	4a30      	ldr	r2, [pc, #192]	@ (800081c <object_Select+0x144>)
 800075a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800075e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000760:	c303      	stmia	r3!, {r0, r1}
 8000762:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, //    [1] 1
				.suboriginbit_0 = {0, 0},  
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Cleveland;
 8000764:	4b2b      	ldr	r3, [pc, #172]	@ (8000814 <object_Select+0x13c>)
 8000766:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800076a:	ca07      	ldmia	r2, {r0, r1, r2}
 800076c:	c303      	stmia	r3!, {r0, r1}
 800076e:	801a      	strh	r2, [r3, #0]
		    transform_rotation(Cleveland.Rotation);
 8000770:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000774:	4618      	mov	r0, r3
 8000776:	f000 f85b 	bl	8000830 <transform_rotation>
			break;
 800077a:	e042      	b.n	8000802 <object_Select+0x12a>

		case(RHODE):
			Object Rhode = {
 800077c:	4a28      	ldr	r2, [pc, #160]	@ (8000820 <object_Select+0x148>)
 800077e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000782:	ca07      	ldmia	r2, {r0, r1, r2}
 8000784:	c303      	stmia	r3!, {r0, r1}
 8000786:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, //     1 [1]
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Rhode;
 8000788:	4b22      	ldr	r3, [pc, #136]	@ (8000814 <object_Select+0x13c>)
 800078a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800078e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000790:	c303      	stmia	r3!, {r0, r1}
 8000792:	801a      	strh	r2, [r3, #0]
			transform_rotation(Rhode.Rotation);
 8000794:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f849 	bl	8000830 <transform_rotation>
			break;
 800079e:	e030      	b.n	8000802 <object_Select+0x12a>

		case(HERO):
			Object Hero = {
 80007a0:	4a20      	ldr	r2, [pc, #128]	@ (8000824 <object_Select+0x14c>)
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80007a8:	c303      	stmia	r3!, {r0, r1}
 80007aa:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, 			 //  1 1 [1] 1
				.suboriginbit_0 = {0, 0}, 
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Hero;
 80007ac:	4b19      	ldr	r3, [pc, #100]	@ (8000814 <object_Select+0x13c>)
 80007ae:	f107 021c 	add.w	r2, r7, #28
 80007b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80007b4:	c303      	stmia	r3!, {r0, r1}
 80007b6:	801a      	strh	r2, [r3, #0]
			transform_rotation(Hero.Rotation);
 80007b8:	7f7b      	ldrb	r3, [r7, #29]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 f838 	bl	8000830 <transform_rotation>
			break;
 80007c0:	e01f      	b.n	8000802 <object_Select+0x12a>

		case(TEEWEE):
			Object Teewee = {
 80007c2:	4a19      	ldr	r2, [pc, #100]	@ (8000828 <object_Select+0x150>)
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80007ca:	c303      	stmia	r3!, {r0, r1}
 80007cc:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, 			 	// 1 [1] 1
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Teewee;
 80007ce:	4b11      	ldr	r3, [pc, #68]	@ (8000814 <object_Select+0x13c>)
 80007d0:	f107 0210 	add.w	r2, r7, #16
 80007d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80007d6:	c303      	stmia	r3!, {r0, r1}
 80007d8:	801a      	strh	r2, [r3, #0]
			transform_rotation(Teewee.Rotation);
 80007da:	7c7b      	ldrb	r3, [r7, #17]
 80007dc:	4618      	mov	r0, r3
 80007de:	f000 f827 	bl	8000830 <transform_rotation>
			break;
 80007e2:	e00e      	b.n	8000802 <object_Select+0x12a>

		case(SMASHBOY):
			Object Smashboy = {
 80007e4:	4a11      	ldr	r2, [pc, #68]	@ (800082c <object_Select+0x154>)
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80007ea:	c303      	stmia	r3!, {r0, r1}
 80007ec:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, 			 	//[1] 1
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Smashboy;
 80007ee:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <object_Select+0x13c>)
 80007f0:	1d3a      	adds	r2, r7, #4
 80007f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80007f4:	c303      	stmia	r3!, {r0, r1}
 80007f6:	801a      	strh	r2, [r3, #0]
			transform_rotation(Smashboy.Rotation);
 80007f8:	797b      	ldrb	r3, [r7, #5]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 f818 	bl	8000830 <transform_rotation>
			break;
 8000800:	bf00      	nop

	}
}
 8000802:	bf00      	nop
 8000804:	3758      	adds	r7, #88	@ 0x58
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000114 	.word	0x20000114
 8000810:	08005744 	.word	0x08005744
 8000814:	20000084 	.word	0x20000084
 8000818:	08005750 	.word	0x08005750
 800081c:	0800575c 	.word	0x0800575c
 8000820:	08005768 	.word	0x08005768
 8000824:	08005774 	.word	0x08005774
 8000828:	08005780 	.word	0x08005780
 800082c:	0800578c 	.word	0x0800578c

08000830 <transform_rotation>:
	if(check_State()) {
		object = temp;
	}
}

void transform_rotation(rotation new_rotation){
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
	Object temp = object;
 800083a:	4a9a      	ldr	r2, [pc, #616]	@ (8000aa4 <transform_rotation+0x274>)
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	ca07      	ldmia	r2, {r0, r1, r2}
 8000842:	c303      	stmia	r3!, {r0, r1}
 8000844:	801a      	strh	r2, [r3, #0]
	switch(object.name){
 8000846:	4b97      	ldr	r3, [pc, #604]	@ (8000aa4 <transform_rotation+0x274>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b06      	cmp	r3, #6
 800084c:	f200 83ee 	bhi.w	800102c <transform_rotation+0x7fc>
 8000850:	a201      	add	r2, pc, #4	@ (adr r2, 8000858 <transform_rotation+0x28>)
 8000852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000856:	bf00      	nop
 8000858:	08000875 	.word	0x08000875
 800085c:	08000997 	.word	0x08000997
 8000860:	08000a87 	.word	0x08000a87
 8000864:	08000bab 	.word	0x08000bab
 8000868:	08000ccb 	.word	0x08000ccb
 800086c:	08000ddf 	.word	0x08000ddf
 8000870:	08000eef 	.word	0x08000eef
		case(ORICKY):
			switch(new_rotation) {
 8000874:	79fb      	ldrb	r3, [r7, #7]
 8000876:	2b03      	cmp	r3, #3
 8000878:	f200 83cb 	bhi.w	8001012 <transform_rotation+0x7e2>
 800087c:	a201      	add	r2, pc, #4	@ (adr r2, 8000884 <transform_rotation+0x54>)
 800087e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000882:	bf00      	nop
 8000884:	08000895 	.word	0x08000895
 8000888:	080008d5 	.word	0x080008d5
 800088c:	08000915 	.word	0x08000915
 8000890:	08000955 	.word	0x08000955
				case(ROTATION_0):
						//       1
						// 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;   //		 1
 8000894:	4b83      	ldr	r3, [pc, #524]	@ (8000aa4 <transform_rotation+0x274>)
 8000896:	789b      	ldrb	r3, [r3, #2]
 8000898:	3b01      	subs	r3, #1
 800089a:	b2da      	uxtb	r2, r3
 800089c:	4b81      	ldr	r3, [pc, #516]	@ (8000aa4 <transform_rotation+0x274>)
 800089e:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		// [1] 1 1
 80008a0:	4b80      	ldr	r3, [pc, #512]	@ (8000aa4 <transform_rotation+0x274>)
 80008a2:	78da      	ldrb	r2, [r3, #3]
 80008a4:	4b7f      	ldr	r3, [pc, #508]	@ (8000aa4 <transform_rotation+0x274>)
 80008a6:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;	//        1
 80008a8:	4b7e      	ldr	r3, [pc, #504]	@ (8000aa4 <transform_rotation+0x274>)
 80008aa:	789b      	ldrb	r3, [r3, #2]
 80008ac:	3301      	adds	r3, #1
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	4b7c      	ldr	r3, [pc, #496]	@ (8000aa4 <transform_rotation+0x274>)
 80008b2:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		//  1  1 [1]
 80008b4:	4b7b      	ldr	r3, [pc, #492]	@ (8000aa4 <transform_rotation+0x274>)
 80008b6:	78da      	ldrb	r2, [r3, #3]
 80008b8:	4b7a      	ldr	r3, [pc, #488]	@ (8000aa4 <transform_rotation+0x274>)
 80008ba:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	// 	  [1]
 80008bc:	4b79      	ldr	r3, [pc, #484]	@ (8000aa4 <transform_rotation+0x274>)
 80008be:	789b      	ldrb	r3, [r3, #2]
 80008c0:	3301      	adds	r3, #1
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	4b77      	ldr	r3, [pc, #476]	@ (8000aa4 <transform_rotation+0x274>)
 80008c6:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	// 1 1 1
 80008c8:	4b76      	ldr	r3, [pc, #472]	@ (8000aa4 <transform_rotation+0x274>)
 80008ca:	78db      	ldrb	r3, [r3, #3]
 80008cc:	3301      	adds	r3, #1
 80008ce:	b2da      	uxtb	r2, r3
 80008d0:	4b74      	ldr	r3, [pc, #464]	@ (8000aa4 <transform_rotation+0x274>)
 80008d2:	725a      	strb	r2, [r3, #9]
				case(ROTATION_1):
						// 1  1
						//   [1]
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 80008d4:	4b73      	ldr	r3, [pc, #460]	@ (8000aa4 <transform_rotation+0x274>)
 80008d6:	789a      	ldrb	r2, [r3, #2]
 80008d8:	4b72      	ldr	r3, [pc, #456]	@ (8000aa4 <transform_rotation+0x274>)
 80008da:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y - 1;
 80008dc:	4b71      	ldr	r3, [pc, #452]	@ (8000aa4 <transform_rotation+0x274>)
 80008de:	78db      	ldrb	r3, [r3, #3]
 80008e0:	3b01      	subs	r3, #1
 80008e2:	b2da      	uxtb	r2, r3
 80008e4:	4b6f      	ldr	r3, [pc, #444]	@ (8000aa4 <transform_rotation+0x274>)
 80008e6:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 80008e8:	4b6e      	ldr	r3, [pc, #440]	@ (8000aa4 <transform_rotation+0x274>)
 80008ea:	789a      	ldrb	r2, [r3, #2]
 80008ec:	4b6d      	ldr	r3, [pc, #436]	@ (8000aa4 <transform_rotation+0x274>)
 80008ee:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;
 80008f0:	4b6c      	ldr	r3, [pc, #432]	@ (8000aa4 <transform_rotation+0x274>)
 80008f2:	78db      	ldrb	r3, [r3, #3]
 80008f4:	3301      	adds	r3, #1
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	4b6a      	ldr	r3, [pc, #424]	@ (8000aa4 <transform_rotation+0x274>)
 80008fa:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 80008fc:	4b69      	ldr	r3, [pc, #420]	@ (8000aa4 <transform_rotation+0x274>)
 80008fe:	789b      	ldrb	r3, [r3, #2]
 8000900:	3b01      	subs	r3, #1
 8000902:	b2da      	uxtb	r2, r3
 8000904:	4b67      	ldr	r3, [pc, #412]	@ (8000aa4 <transform_rotation+0x274>)
 8000906:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1;
 8000908:	4b66      	ldr	r3, [pc, #408]	@ (8000aa4 <transform_rotation+0x274>)
 800090a:	78db      	ldrb	r3, [r3, #3]
 800090c:	3301      	adds	r3, #1
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b64      	ldr	r3, [pc, #400]	@ (8000aa4 <transform_rotation+0x274>)
 8000912:	725a      	strb	r2, [r3, #9]

				case(ROTATION_2):
						// 1  [1]  1
						// 1
					object.suboriginbit_0.x = object.originbit.x + 1;
 8000914:	4b63      	ldr	r3, [pc, #396]	@ (8000aa4 <transform_rotation+0x274>)
 8000916:	789b      	ldrb	r3, [r3, #2]
 8000918:	3301      	adds	r3, #1
 800091a:	b2da      	uxtb	r2, r3
 800091c:	4b61      	ldr	r3, [pc, #388]	@ (8000aa4 <transform_rotation+0x274>)
 800091e:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000920:	4b60      	ldr	r3, [pc, #384]	@ (8000aa4 <transform_rotation+0x274>)
 8000922:	78da      	ldrb	r2, [r3, #3]
 8000924:	4b5f      	ldr	r3, [pc, #380]	@ (8000aa4 <transform_rotation+0x274>)
 8000926:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;
 8000928:	4b5e      	ldr	r3, [pc, #376]	@ (8000aa4 <transform_rotation+0x274>)
 800092a:	789b      	ldrb	r3, [r3, #2]
 800092c:	3b01      	subs	r3, #1
 800092e:	b2da      	uxtb	r2, r3
 8000930:	4b5c      	ldr	r3, [pc, #368]	@ (8000aa4 <transform_rotation+0x274>)
 8000932:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000934:	4b5b      	ldr	r3, [pc, #364]	@ (8000aa4 <transform_rotation+0x274>)
 8000936:	78da      	ldrb	r2, [r3, #3]
 8000938:	4b5a      	ldr	r3, [pc, #360]	@ (8000aa4 <transform_rotation+0x274>)
 800093a:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 800093c:	4b59      	ldr	r3, [pc, #356]	@ (8000aa4 <transform_rotation+0x274>)
 800093e:	789b      	ldrb	r3, [r3, #2]
 8000940:	3b01      	subs	r3, #1
 8000942:	b2da      	uxtb	r2, r3
 8000944:	4b57      	ldr	r3, [pc, #348]	@ (8000aa4 <transform_rotation+0x274>)
 8000946:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8000948:	4b56      	ldr	r3, [pc, #344]	@ (8000aa4 <transform_rotation+0x274>)
 800094a:	78db      	ldrb	r3, [r3, #3]
 800094c:	3b01      	subs	r3, #1
 800094e:	b2da      	uxtb	r2, r3
 8000950:	4b54      	ldr	r3, [pc, #336]	@ (8000aa4 <transform_rotation+0x274>)
 8000952:	725a      	strb	r2, [r3, #9]

				case(ROTATION_3):
						//  1
						// [1]
						//  1 1
					object.suboriginbit_0.x = object.originbit.x;
 8000954:	4b53      	ldr	r3, [pc, #332]	@ (8000aa4 <transform_rotation+0x274>)
 8000956:	789a      	ldrb	r2, [r3, #2]
 8000958:	4b52      	ldr	r3, [pc, #328]	@ (8000aa4 <transform_rotation+0x274>)
 800095a:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 800095c:	4b51      	ldr	r3, [pc, #324]	@ (8000aa4 <transform_rotation+0x274>)
 800095e:	78db      	ldrb	r3, [r3, #3]
 8000960:	3301      	adds	r3, #1
 8000962:	b2da      	uxtb	r2, r3
 8000964:	4b4f      	ldr	r3, [pc, #316]	@ (8000aa4 <transform_rotation+0x274>)
 8000966:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000968:	4b4e      	ldr	r3, [pc, #312]	@ (8000aa4 <transform_rotation+0x274>)
 800096a:	789a      	ldrb	r2, [r3, #2]
 800096c:	4b4d      	ldr	r3, [pc, #308]	@ (8000aa4 <transform_rotation+0x274>)
 800096e:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8000970:	4b4c      	ldr	r3, [pc, #304]	@ (8000aa4 <transform_rotation+0x274>)
 8000972:	78db      	ldrb	r3, [r3, #3]
 8000974:	3b01      	subs	r3, #1
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b4a      	ldr	r3, [pc, #296]	@ (8000aa4 <transform_rotation+0x274>)
 800097a:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;
 800097c:	4b49      	ldr	r3, [pc, #292]	@ (8000aa4 <transform_rotation+0x274>)
 800097e:	789b      	ldrb	r3, [r3, #2]
 8000980:	3301      	adds	r3, #1
 8000982:	b2da      	uxtb	r2, r3
 8000984:	4b47      	ldr	r3, [pc, #284]	@ (8000aa4 <transform_rotation+0x274>)
 8000986:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8000988:	4b46      	ldr	r3, [pc, #280]	@ (8000aa4 <transform_rotation+0x274>)
 800098a:	78db      	ldrb	r3, [r3, #3]
 800098c:	3b01      	subs	r3, #1
 800098e:	b2da      	uxtb	r2, r3
 8000990:	4b44      	ldr	r3, [pc, #272]	@ (8000aa4 <transform_rotation+0x274>)
 8000992:	725a      	strb	r2, [r3, #9]
			}
			break;
 8000994:	e33d      	b.n	8001012 <transform_rotation+0x7e2>
		case(BRICKY):
			switch(new_rotation) {
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b03      	cmp	r3, #3
 800099a:	f200 833c 	bhi.w	8001016 <transform_rotation+0x7e6>
 800099e:	a201      	add	r2, pc, #4	@ (adr r2, 80009a4 <transform_rotation+0x174>)
 80009a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a4:	080009b5 	.word	0x080009b5
 80009a8:	080009f5 	.word	0x080009f5
 80009ac:	08000a25 	.word	0x08000a25
 80009b0:	08000a55 	.word	0x08000a55
				case(ROTATION_0):
						// 1
						// 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;   //	1
 80009b4:	4b3b      	ldr	r3, [pc, #236]	@ (8000aa4 <transform_rotation+0x274>)
 80009b6:	789b      	ldrb	r3, [r3, #2]
 80009b8:	3b01      	subs	r3, #1
 80009ba:	b2da      	uxtb	r2, r3
 80009bc:	4b39      	ldr	r3, [pc, #228]	@ (8000aa4 <transform_rotation+0x274>)
 80009be:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		// [1] 1 1
 80009c0:	4b38      	ldr	r3, [pc, #224]	@ (8000aa4 <transform_rotation+0x274>)
 80009c2:	78da      	ldrb	r2, [r3, #3]
 80009c4:	4b37      	ldr	r3, [pc, #220]	@ (8000aa4 <transform_rotation+0x274>)
 80009c6:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;	//  1
 80009c8:	4b36      	ldr	r3, [pc, #216]	@ (8000aa4 <transform_rotation+0x274>)
 80009ca:	789b      	ldrb	r3, [r3, #2]
 80009cc:	3301      	adds	r3, #1
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	4b34      	ldr	r3, [pc, #208]	@ (8000aa4 <transform_rotation+0x274>)
 80009d2:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		//  1  1 [1]
 80009d4:	4b33      	ldr	r3, [pc, #204]	@ (8000aa4 <transform_rotation+0x274>)
 80009d6:	78da      	ldrb	r2, [r3, #3]
 80009d8:	4b32      	ldr	r3, [pc, #200]	@ (8000aa4 <transform_rotation+0x274>)
 80009da:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;	//[1]
 80009dc:	4b31      	ldr	r3, [pc, #196]	@ (8000aa4 <transform_rotation+0x274>)
 80009de:	789b      	ldrb	r3, [r3, #2]
 80009e0:	3b01      	subs	r3, #1
 80009e2:	b2da      	uxtb	r2, r3
 80009e4:	4b2f      	ldr	r3, [pc, #188]	@ (8000aa4 <transform_rotation+0x274>)
 80009e6:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	// 1 1 1
 80009e8:	4b2e      	ldr	r3, [pc, #184]	@ (8000aa4 <transform_rotation+0x274>)
 80009ea:	78db      	ldrb	r3, [r3, #3]
 80009ec:	3301      	adds	r3, #1
 80009ee:	b2da      	uxtb	r2, r3
 80009f0:	4b2c      	ldr	r3, [pc, #176]	@ (8000aa4 <transform_rotation+0x274>)
 80009f2:	725a      	strb	r2, [r3, #9]
				case(ROTATION_1):
						// 1 1
						//[1]
						// 1
					object.suboriginbit_0.x = object.originbit.x;
 80009f4:	4b2b      	ldr	r3, [pc, #172]	@ (8000aa4 <transform_rotation+0x274>)
 80009f6:	789a      	ldrb	r2, [r3, #2]
 80009f8:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa4 <transform_rotation+0x274>)
 80009fa:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 80009fc:	4b29      	ldr	r3, [pc, #164]	@ (8000aa4 <transform_rotation+0x274>)
 80009fe:	78da      	ldrb	r2, [r3, #3]
 8000a00:	4b28      	ldr	r3, [pc, #160]	@ (8000aa4 <transform_rotation+0x274>)
 8000a02:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000a04:	4b27      	ldr	r3, [pc, #156]	@ (8000aa4 <transform_rotation+0x274>)
 8000a06:	789a      	ldrb	r2, [r3, #2]
 8000a08:	4b26      	ldr	r3, [pc, #152]	@ (8000aa4 <transform_rotation+0x274>)
 8000a0a:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000a0c:	4b25      	ldr	r3, [pc, #148]	@ (8000aa4 <transform_rotation+0x274>)
 8000a0e:	78da      	ldrb	r2, [r3, #3]
 8000a10:	4b24      	ldr	r3, [pc, #144]	@ (8000aa4 <transform_rotation+0x274>)
 8000a12:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000a14:	4b23      	ldr	r3, [pc, #140]	@ (8000aa4 <transform_rotation+0x274>)
 8000a16:	789a      	ldrb	r2, [r3, #2]
 8000a18:	4b22      	ldr	r3, [pc, #136]	@ (8000aa4 <transform_rotation+0x274>)
 8000a1a:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 8000a1c:	4b21      	ldr	r3, [pc, #132]	@ (8000aa4 <transform_rotation+0x274>)
 8000a1e:	78da      	ldrb	r2, [r3, #3]
 8000a20:	4b20      	ldr	r3, [pc, #128]	@ (8000aa4 <transform_rotation+0x274>)
 8000a22:	725a      	strb	r2, [r3, #9]
				case(ROTATION_2):
						// 1 [1] 1
						//       1
					object.suboriginbit_0.x = object.originbit.x;
 8000a24:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa4 <transform_rotation+0x274>)
 8000a26:	789a      	ldrb	r2, [r3, #2]
 8000a28:	4b1e      	ldr	r3, [pc, #120]	@ (8000aa4 <transform_rotation+0x274>)
 8000a2a:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa4 <transform_rotation+0x274>)
 8000a2e:	78da      	ldrb	r2, [r3, #3]
 8000a30:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa4 <transform_rotation+0x274>)
 8000a32:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa4 <transform_rotation+0x274>)
 8000a36:	789a      	ldrb	r2, [r3, #2]
 8000a38:	4b1a      	ldr	r3, [pc, #104]	@ (8000aa4 <transform_rotation+0x274>)
 8000a3a:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000a3c:	4b19      	ldr	r3, [pc, #100]	@ (8000aa4 <transform_rotation+0x274>)
 8000a3e:	78da      	ldrb	r2, [r3, #3]
 8000a40:	4b18      	ldr	r3, [pc, #96]	@ (8000aa4 <transform_rotation+0x274>)
 8000a42:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000a44:	4b17      	ldr	r3, [pc, #92]	@ (8000aa4 <transform_rotation+0x274>)
 8000a46:	789a      	ldrb	r2, [r3, #2]
 8000a48:	4b16      	ldr	r3, [pc, #88]	@ (8000aa4 <transform_rotation+0x274>)
 8000a4a:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	@ (8000aa4 <transform_rotation+0x274>)
 8000a4e:	78da      	ldrb	r2, [r3, #3]
 8000a50:	4b14      	ldr	r3, [pc, #80]	@ (8000aa4 <transform_rotation+0x274>)
 8000a52:	725a      	strb	r2, [r3, #9]
				case(ROTATION_3):
						//   1
						//  [1]
						// 1 1
					object.suboriginbit_0.x = object.originbit.x;
 8000a54:	4b13      	ldr	r3, [pc, #76]	@ (8000aa4 <transform_rotation+0x274>)
 8000a56:	789a      	ldrb	r2, [r3, #2]
 8000a58:	4b12      	ldr	r3, [pc, #72]	@ (8000aa4 <transform_rotation+0x274>)
 8000a5a:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000a5c:	4b11      	ldr	r3, [pc, #68]	@ (8000aa4 <transform_rotation+0x274>)
 8000a5e:	78da      	ldrb	r2, [r3, #3]
 8000a60:	4b10      	ldr	r3, [pc, #64]	@ (8000aa4 <transform_rotation+0x274>)
 8000a62:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <transform_rotation+0x274>)
 8000a66:	789a      	ldrb	r2, [r3, #2]
 8000a68:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <transform_rotation+0x274>)
 8000a6a:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa4 <transform_rotation+0x274>)
 8000a6e:	78da      	ldrb	r2, [r3, #3]
 8000a70:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <transform_rotation+0x274>)
 8000a72:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000a74:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa4 <transform_rotation+0x274>)
 8000a76:	789a      	ldrb	r2, [r3, #2]
 8000a78:	4b0a      	ldr	r3, [pc, #40]	@ (8000aa4 <transform_rotation+0x274>)
 8000a7a:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <transform_rotation+0x274>)
 8000a7e:	78da      	ldrb	r2, [r3, #3]
 8000a80:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <transform_rotation+0x274>)
 8000a82:	725a      	strb	r2, [r3, #9]
			}

			break;
 8000a84:	e2c7      	b.n	8001016 <transform_rotation+0x7e6>
		case(CLEVELAND):
			switch(new_rotation) {
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	2b03      	cmp	r3, #3
 8000a8a:	f200 82c6 	bhi.w	800101a <transform_rotation+0x7ea>
 8000a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8000a94 <transform_rotation+0x264>)
 8000a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a94:	08000aa9 	.word	0x08000aa9
 8000a98:	08000ae9 	.word	0x08000ae9
 8000a9c:	08000b29 	.word	0x08000b29
 8000aa0:	08000b69 	.word	0x08000b69
 8000aa4:	20000084 	.word	0x20000084
				case(ROTATION_0):
						// 1 1
						//  [1] 1
					object.suboriginbit_0.x = object.originbit.x;			 //	1 [1]
 8000aa8:	4b8f      	ldr	r3, [pc, #572]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000aaa:	789a      	ldrb	r2, [r3, #2]
 8000aac:	4b8e      	ldr	r3, [pc, #568]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000aae:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;		 //    1 1
 8000ab0:	4b8d      	ldr	r3, [pc, #564]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000ab2:	78db      	ldrb	r3, [r3, #3]
 8000ab4:	3301      	adds	r3, #1
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b8b      	ldr	r3, [pc, #556]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000aba:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;		 // [1] 1
 8000abc:	4b8a      	ldr	r3, [pc, #552]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000abe:	789b      	ldrb	r3, [r3, #2]
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	4b88      	ldr	r3, [pc, #544]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000ac6:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;		 //     1 1
 8000ac8:	4b87      	ldr	r3, [pc, #540]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000aca:	78db      	ldrb	r3, [r3, #3]
 8000acc:	3301      	adds	r3, #1
 8000ace:	b2da      	uxtb	r2, r3
 8000ad0:	4b85      	ldr	r3, [pc, #532]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000ad2:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;		 //  1 1
 8000ad4:	4b84      	ldr	r3, [pc, #528]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000ad6:	789b      	ldrb	r3, [r3, #2]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b82      	ldr	r3, [pc, #520]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000ade:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y; 	     	//    1 [1]
 8000ae0:	4b81      	ldr	r3, [pc, #516]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000ae2:	78da      	ldrb	r2, [r3, #3]
 8000ae4:	4b80      	ldr	r3, [pc, #512]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000ae6:	725a      	strb	r2, [r3, #9]
				case(ROTATION_1):
						//     1
						// [1] 1
						//  1
					object.suboriginbit_0.x = object.originbit.x+1;
 8000ae8:	4b7f      	ldr	r3, [pc, #508]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000aea:	789b      	ldrb	r3, [r3, #2]
 8000aec:	3301      	adds	r3, #1
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	4b7d      	ldr	r3, [pc, #500]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000af2:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000af4:	4b7c      	ldr	r3, [pc, #496]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000af6:	78da      	ldrb	r2, [r3, #3]
 8000af8:	4b7b      	ldr	r3, [pc, #492]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000afa:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x+1;
 8000afc:	4b7a      	ldr	r3, [pc, #488]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000afe:	789b      	ldrb	r3, [r3, #2]
 8000b00:	3301      	adds	r3, #1
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	4b78      	ldr	r3, [pc, #480]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b06:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y+1;
 8000b08:	4b77      	ldr	r3, [pc, #476]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b0a:	78db      	ldrb	r3, [r3, #3]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	4b75      	ldr	r3, [pc, #468]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b12:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000b14:	4b74      	ldr	r3, [pc, #464]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b16:	789a      	ldrb	r2, [r3, #2]
 8000b18:	4b73      	ldr	r3, [pc, #460]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b1a:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y-1;
 8000b1c:	4b72      	ldr	r3, [pc, #456]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b1e:	78db      	ldrb	r3, [r3, #3]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	4b70      	ldr	r3, [pc, #448]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b26:	725a      	strb	r2, [r3, #9]
				case(ROTATION_2):
						// 1 [1]
						//    1  1
					object.suboriginbit_0.x = object.originbit.x - 1;
 8000b28:	4b6f      	ldr	r3, [pc, #444]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b2a:	789b      	ldrb	r3, [r3, #2]
 8000b2c:	3b01      	subs	r3, #1
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	4b6d      	ldr	r3, [pc, #436]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b32:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000b34:	4b6c      	ldr	r3, [pc, #432]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b36:	78da      	ldrb	r2, [r3, #3]
 8000b38:	4b6b      	ldr	r3, [pc, #428]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b3a:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000b3c:	4b6a      	ldr	r3, [pc, #424]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b3e:	789a      	ldrb	r2, [r3, #2]
 8000b40:	4b69      	ldr	r3, [pc, #420]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b42:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8000b44:	4b68      	ldr	r3, [pc, #416]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b46:	78db      	ldrb	r3, [r3, #3]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	4b66      	ldr	r3, [pc, #408]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b4e:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;
 8000b50:	4b65      	ldr	r3, [pc, #404]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b52:	789b      	ldrb	r3, [r3, #2]
 8000b54:	3301      	adds	r3, #1
 8000b56:	b2da      	uxtb	r2, r3
 8000b58:	4b63      	ldr	r3, [pc, #396]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b5a:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8000b5c:	4b62      	ldr	r3, [pc, #392]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b5e:	78db      	ldrb	r3, [r3, #3]
 8000b60:	3b01      	subs	r3, #1
 8000b62:	b2da      	uxtb	r2, r3
 8000b64:	4b60      	ldr	r3, [pc, #384]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b66:	725a      	strb	r2, [r3, #9]
				case(ROTATION_3):
						//     1
						//  1 [1]
						//  1
					object.suboriginbit_0.x = object.originbit.x - 1;
 8000b68:	4b5f      	ldr	r3, [pc, #380]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b6a:	789b      	ldrb	r3, [r3, #2]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	4b5d      	ldr	r3, [pc, #372]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b72:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000b74:	4b5c      	ldr	r3, [pc, #368]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b76:	78da      	ldrb	r2, [r3, #3]
 8000b78:	4b5b      	ldr	r3, [pc, #364]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b7a:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;
 8000b7c:	4b5a      	ldr	r3, [pc, #360]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b7e:	789b      	ldrb	r3, [r3, #2]
 8000b80:	3b01      	subs	r3, #1
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	4b58      	ldr	r3, [pc, #352]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b86:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8000b88:	4b57      	ldr	r3, [pc, #348]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b8a:	78db      	ldrb	r3, [r3, #3]
 8000b8c:	3b01      	subs	r3, #1
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	4b55      	ldr	r3, [pc, #340]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b92:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000b94:	4b54      	ldr	r3, [pc, #336]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b96:	789a      	ldrb	r2, [r3, #2]
 8000b98:	4b53      	ldr	r3, [pc, #332]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b9a:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1;
 8000b9c:	4b52      	ldr	r3, [pc, #328]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000b9e:	78db      	ldrb	r3, [r3, #3]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	4b50      	ldr	r3, [pc, #320]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000ba6:	725a      	strb	r2, [r3, #9]
			}
			break;
 8000ba8:	e237      	b.n	800101a <transform_rotation+0x7ea>
		case(RHODE):
			switch(new_rotation) {
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	2b03      	cmp	r3, #3
 8000bae:	f200 8236 	bhi.w	800101e <transform_rotation+0x7ee>
 8000bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8000bb8 <transform_rotation+0x388>)
 8000bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb8:	08000bc9 	.word	0x08000bc9
 8000bbc:	08000c09 	.word	0x08000c09
 8000bc0:	08000c49 	.word	0x08000c49
 8000bc4:	08000c89 	.word	0x08000c89
				case(ROTATION_0):
						//    1 1
						// 1 [1]
					object.suboriginbit_0.x = object.originbit.x;			 //	  [1] 1
 8000bc8:	4b47      	ldr	r3, [pc, #284]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000bca:	789a      	ldrb	r2, [r3, #2]
 8000bcc:	4b46      	ldr	r3, [pc, #280]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000bce:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;		 //  1 1
 8000bd0:	4b45      	ldr	r3, [pc, #276]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000bd2:	78db      	ldrb	r3, [r3, #3]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	b2da      	uxtb	r2, r3
 8000bd8:	4b43      	ldr	r3, [pc, #268]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000bda:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;		 //    1 [1]
 8000bdc:	4b42      	ldr	r3, [pc, #264]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000bde:	789b      	ldrb	r3, [r3, #2]
 8000be0:	3301      	adds	r3, #1
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	4b40      	ldr	r3, [pc, #256]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000be6:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;		 //  1 1
 8000be8:	4b3f      	ldr	r3, [pc, #252]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000bea:	78db      	ldrb	r3, [r3, #3]
 8000bec:	3301      	adds	r3, #1
 8000bee:	b2da      	uxtb	r2, r3
 8000bf0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000bf2:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;		 //     1 1
 8000bf4:	4b3c      	ldr	r3, [pc, #240]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000bf6:	789b      	ldrb	r3, [r3, #2]
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000bfe:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y; 	     // [1] 1
 8000c00:	4b39      	ldr	r3, [pc, #228]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c02:	78da      	ldrb	r2, [r3, #3]
 8000c04:	4b38      	ldr	r3, [pc, #224]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c06:	725a      	strb	r2, [r3, #9]
				case(ROTATION_1):
						// 1
						//[1] 1
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 8000c08:	4b37      	ldr	r3, [pc, #220]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c0a:	789a      	ldrb	r2, [r3, #2]
 8000c0c:	4b36      	ldr	r3, [pc, #216]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c0e:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 8000c10:	4b35      	ldr	r3, [pc, #212]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c12:	78db      	ldrb	r3, [r3, #3]
 8000c14:	3301      	adds	r3, #1
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	4b33      	ldr	r3, [pc, #204]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c1a:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;
 8000c1c:	4b32      	ldr	r3, [pc, #200]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c1e:	789b      	ldrb	r3, [r3, #2]
 8000c20:	3301      	adds	r3, #1
 8000c22:	b2da      	uxtb	r2, r3
 8000c24:	4b30      	ldr	r3, [pc, #192]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c26:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000c28:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c2a:	78da      	ldrb	r2, [r3, #3]
 8000c2c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c2e:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;
 8000c30:	4b2d      	ldr	r3, [pc, #180]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c32:	789b      	ldrb	r3, [r3, #2]
 8000c34:	3301      	adds	r3, #1
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c3a:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8000c3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c3e:	78db      	ldrb	r3, [r3, #3]
 8000c40:	3b01      	subs	r3, #1
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b28      	ldr	r3, [pc, #160]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c46:	725a      	strb	r2, [r3, #9]
				case(ROTATION_2):
						//  [1] 1
						// 1 1
					object.suboriginbit_0.x = object.originbit.x + 1;
 8000c48:	4b27      	ldr	r3, [pc, #156]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c4a:	789b      	ldrb	r3, [r3, #2]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	b2da      	uxtb	r2, r3
 8000c50:	4b25      	ldr	r3, [pc, #148]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c52:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000c54:	4b24      	ldr	r3, [pc, #144]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c56:	78da      	ldrb	r2, [r3, #3]
 8000c58:	4b23      	ldr	r3, [pc, #140]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c5a:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000c5c:	4b22      	ldr	r3, [pc, #136]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c5e:	789a      	ldrb	r2, [r3, #2]
 8000c60:	4b21      	ldr	r3, [pc, #132]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c62:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8000c64:	4b20      	ldr	r3, [pc, #128]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c66:	78db      	ldrb	r3, [r3, #3]
 8000c68:	3b01      	subs	r3, #1
 8000c6a:	b2da      	uxtb	r2, r3
 8000c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c6e:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 8000c70:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c72:	789b      	ldrb	r3, [r3, #2]
 8000c74:	3b01      	subs	r3, #1
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c7a:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c7e:	78db      	ldrb	r3, [r3, #3]
 8000c80:	3b01      	subs	r3, #1
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	4b18      	ldr	r3, [pc, #96]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c86:	725a      	strb	r2, [r3, #9]
				case(ROTATION_3):
						// 1
						// 1 [1]
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 8000c88:	4b17      	ldr	r3, [pc, #92]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c8a:	789a      	ldrb	r2, [r3, #2]
 8000c8c:	4b16      	ldr	r3, [pc, #88]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c8e:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y - 1;
 8000c90:	4b15      	ldr	r3, [pc, #84]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c92:	78db      	ldrb	r3, [r3, #3]
 8000c94:	3b01      	subs	r3, #1
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	4b13      	ldr	r3, [pc, #76]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c9a:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000c9e:	789b      	ldrb	r3, [r3, #2]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000ca6:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000caa:	78da      	ldrb	r2, [r3, #3]
 8000cac:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000cae:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000cb2:	789b      	ldrb	r3, [r3, #2]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000cba:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1;
 8000cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000cbe:	78db      	ldrb	r3, [r3, #3]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <transform_rotation+0x4b8>)
 8000cc6:	725a      	strb	r2, [r3, #9]
			}
			break;
 8000cc8:	e1a9      	b.n	800101e <transform_rotation+0x7ee>
		case(HERO):
			switch(new_rotation) {
 8000cca:	79fb      	ldrb	r3, [r7, #7]
 8000ccc:	2b03      	cmp	r3, #3
 8000cce:	f200 81a8 	bhi.w	8001022 <transform_rotation+0x7f2>
 8000cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8000cd8 <transform_rotation+0x4a8>)
 8000cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd8:	08000ced 	.word	0x08000ced
 8000cdc:	08000d29 	.word	0x08000d29
 8000ce0:	08000d65 	.word	0x08000d65
 8000ce4:	08000da1 	.word	0x08000da1
 8000ce8:	20000084 	.word	0x20000084
				case(ROTATION_0):
						// 1 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;	 //
 8000cec:	4b87      	ldr	r3, [pc, #540]	@ (8000f0c <transform_rotation+0x6dc>)
 8000cee:	789b      	ldrb	r3, [r3, #2]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	4b85      	ldr	r3, [pc, #532]	@ (8000f0c <transform_rotation+0x6dc>)
 8000cf6:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 // 1 [1] 1 1
 8000cf8:	4b84      	ldr	r3, [pc, #528]	@ (8000f0c <transform_rotation+0x6dc>)
 8000cfa:	78da      	ldrb	r2, [r3, #3]
 8000cfc:	4b83      	ldr	r3, [pc, #524]	@ (8000f0c <transform_rotation+0x6dc>)
 8000cfe:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 2;	 //
 8000d00:	4b82      	ldr	r3, [pc, #520]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d02:	789b      	ldrb	r3, [r3, #2]
 8000d04:	3b02      	subs	r3, #2
 8000d06:	b2da      	uxtb	r2, r3
 8000d08:	4b80      	ldr	r3, [pc, #512]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d0a:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		 // [1] 1 1 1
 8000d0c:	4b7f      	ldr	r3, [pc, #508]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d0e:	78da      	ldrb	r2, [r3, #3]
 8000d10:	4b7e      	ldr	r3, [pc, #504]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d12:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //
 8000d14:	4b7d      	ldr	r3, [pc, #500]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d16:	789b      	ldrb	r3, [r3, #2]
 8000d18:	3301      	adds	r3, #1
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	4b7b      	ldr	r3, [pc, #492]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d1e:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y; 	     //  1 1 1 [1]
 8000d20:	4b7a      	ldr	r3, [pc, #488]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d22:	78da      	ldrb	r2, [r3, #3]
 8000d24:	4b79      	ldr	r3, [pc, #484]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d26:	725a      	strb	r2, [r3, #9]
				case(ROTATION_1):
						//  1
						//  1
						// [1]
						//  1
					object.suboriginbit_0.x = object.originbit.x;
 8000d28:	4b78      	ldr	r3, [pc, #480]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d2a:	789a      	ldrb	r2, [r3, #2]
 8000d2c:	4b77      	ldr	r3, [pc, #476]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d2e:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 8000d30:	4b76      	ldr	r3, [pc, #472]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d32:	78db      	ldrb	r3, [r3, #3]
 8000d34:	3301      	adds	r3, #1
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	4b74      	ldr	r3, [pc, #464]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d3a:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000d3c:	4b73      	ldr	r3, [pc, #460]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d3e:	789a      	ldrb	r2, [r3, #2]
 8000d40:	4b72      	ldr	r3, [pc, #456]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d42:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8000d44:	4b71      	ldr	r3, [pc, #452]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d46:	78db      	ldrb	r3, [r3, #3]
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	4b6f      	ldr	r3, [pc, #444]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d4e:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000d50:	4b6e      	ldr	r3, [pc, #440]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d52:	789a      	ldrb	r2, [r3, #2]
 8000d54:	4b6d      	ldr	r3, [pc, #436]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d56:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 2;
 8000d58:	4b6c      	ldr	r3, [pc, #432]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d5a:	78db      	ldrb	r3, [r3, #3]
 8000d5c:	3302      	adds	r3, #2
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	4b6a      	ldr	r3, [pc, #424]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d62:	725a      	strb	r2, [r3, #9]
				case(ROTATION_2):
						// 1 [1] 1 1
					object.suboriginbit_0.x = object.originbit.x - 1;
 8000d64:	4b69      	ldr	r3, [pc, #420]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d66:	789b      	ldrb	r3, [r3, #2]
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	4b67      	ldr	r3, [pc, #412]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d6e:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000d70:	4b66      	ldr	r3, [pc, #408]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d72:	78da      	ldrb	r2, [r3, #3]
 8000d74:	4b65      	ldr	r3, [pc, #404]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d76:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;
 8000d78:	4b64      	ldr	r3, [pc, #400]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d7a:	789b      	ldrb	r3, [r3, #2]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	4b62      	ldr	r3, [pc, #392]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d82:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000d84:	4b61      	ldr	r3, [pc, #388]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d86:	78da      	ldrb	r2, [r3, #3]
 8000d88:	4b60      	ldr	r3, [pc, #384]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d8a:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 2;
 8000d8c:	4b5f      	ldr	r3, [pc, #380]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d8e:	789b      	ldrb	r3, [r3, #2]
 8000d90:	3302      	adds	r3, #2
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	4b5d      	ldr	r3, [pc, #372]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d96:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 8000d98:	4b5c      	ldr	r3, [pc, #368]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d9a:	78da      	ldrb	r2, [r3, #3]
 8000d9c:	4b5b      	ldr	r3, [pc, #364]	@ (8000f0c <transform_rotation+0x6dc>)
 8000d9e:	725a      	strb	r2, [r3, #9]
				case(ROTATION_3):
						//  1
						// [1]
						//  1
						//  1
					object.suboriginbit_0.x = object.originbit.x;
 8000da0:	4b5a      	ldr	r3, [pc, #360]	@ (8000f0c <transform_rotation+0x6dc>)
 8000da2:	789a      	ldrb	r2, [r3, #2]
 8000da4:	4b59      	ldr	r3, [pc, #356]	@ (8000f0c <transform_rotation+0x6dc>)
 8000da6:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 8000da8:	4b58      	ldr	r3, [pc, #352]	@ (8000f0c <transform_rotation+0x6dc>)
 8000daa:	78db      	ldrb	r3, [r3, #3]
 8000dac:	3301      	adds	r3, #1
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	4b56      	ldr	r3, [pc, #344]	@ (8000f0c <transform_rotation+0x6dc>)
 8000db2:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000db4:	4b55      	ldr	r3, [pc, #340]	@ (8000f0c <transform_rotation+0x6dc>)
 8000db6:	789a      	ldrb	r2, [r3, #2]
 8000db8:	4b54      	ldr	r3, [pc, #336]	@ (8000f0c <transform_rotation+0x6dc>)
 8000dba:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8000dbc:	4b53      	ldr	r3, [pc, #332]	@ (8000f0c <transform_rotation+0x6dc>)
 8000dbe:	78db      	ldrb	r3, [r3, #3]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b51      	ldr	r3, [pc, #324]	@ (8000f0c <transform_rotation+0x6dc>)
 8000dc6:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000dc8:	4b50      	ldr	r3, [pc, #320]	@ (8000f0c <transform_rotation+0x6dc>)
 8000dca:	789a      	ldrb	r2, [r3, #2]
 8000dcc:	4b4f      	ldr	r3, [pc, #316]	@ (8000f0c <transform_rotation+0x6dc>)
 8000dce:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 2;
 8000dd0:	4b4e      	ldr	r3, [pc, #312]	@ (8000f0c <transform_rotation+0x6dc>)
 8000dd2:	78db      	ldrb	r3, [r3, #3]
 8000dd4:	3b02      	subs	r3, #2
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	4b4c      	ldr	r3, [pc, #304]	@ (8000f0c <transform_rotation+0x6dc>)
 8000dda:	725a      	strb	r2, [r3, #9]
			}

			break;
 8000ddc:	e121      	b.n	8001022 <transform_rotation+0x7f2>
		case(TEEWEE):
			switch(new_rotation) {
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	2b03      	cmp	r3, #3
 8000de2:	f200 8120 	bhi.w	8001026 <transform_rotation+0x7f6>
 8000de6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dec <transform_rotation+0x5bc>)
 8000de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dec:	08000dfd 	.word	0x08000dfd
 8000df0:	08000e39 	.word	0x08000e39
 8000df4:	08000e75 	.word	0x08000e75
 8000df8:	08000eb1 	.word	0x08000eb1
				case(ROTATION_0):
						//    1
						// 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;	 //     1
 8000dfc:	4b43      	ldr	r3, [pc, #268]	@ (8000f0c <transform_rotation+0x6dc>)
 8000dfe:	789b      	ldrb	r3, [r3, #2]
 8000e00:	3b01      	subs	r3, #1
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	4b41      	ldr	r3, [pc, #260]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e06:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 // [1] 1 1
 8000e08:	4b40      	ldr	r3, [pc, #256]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e0a:	78da      	ldrb	r2, [r3, #3]
 8000e0c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e0e:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;	 //	  1
 8000e10:	4b3e      	ldr	r3, [pc, #248]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e12:	789b      	ldrb	r3, [r3, #2]
 8000e14:	3301      	adds	r3, #1
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	4b3c      	ldr	r3, [pc, #240]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e1a:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		 // 1 1 [1]
 8000e1c:	4b3b      	ldr	r3, [pc, #236]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e1e:	78da      	ldrb	r2, [r3, #3]
 8000e20:	4b3a      	ldr	r3, [pc, #232]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e22:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;	     //	 [1]
 8000e24:	4b39      	ldr	r3, [pc, #228]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e26:	789a      	ldrb	r2, [r3, #2]
 8000e28:	4b38      	ldr	r3, [pc, #224]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e2a:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1 1 1
 8000e2c:	4b37      	ldr	r3, [pc, #220]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e2e:	78db      	ldrb	r3, [r3, #3]
 8000e30:	3301      	adds	r3, #1
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	4b35      	ldr	r3, [pc, #212]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e36:	725a      	strb	r2, [r3, #9]
				case(ROTATION_1):
						//  1
						// [1] 1
						//  1
					object.suboriginbit_0.x = object.originbit.x + 1;
 8000e38:	4b34      	ldr	r3, [pc, #208]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e3a:	789b      	ldrb	r3, [r3, #2]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	b2da      	uxtb	r2, r3
 8000e40:	4b32      	ldr	r3, [pc, #200]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e42:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000e44:	4b31      	ldr	r3, [pc, #196]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e46:	78da      	ldrb	r2, [r3, #3]
 8000e48:	4b30      	ldr	r3, [pc, #192]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e4a:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000e4c:	4b2f      	ldr	r3, [pc, #188]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e4e:	789a      	ldrb	r2, [r3, #2]
 8000e50:	4b2e      	ldr	r3, [pc, #184]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e52:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;
 8000e54:	4b2d      	ldr	r3, [pc, #180]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e56:	78db      	ldrb	r3, [r3, #3]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	b2da      	uxtb	r2, r3
 8000e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e5e:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000e60:	4b2a      	ldr	r3, [pc, #168]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e62:	789a      	ldrb	r2, [r3, #2]
 8000e64:	4b29      	ldr	r3, [pc, #164]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e66:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8000e68:	4b28      	ldr	r3, [pc, #160]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e6a:	78db      	ldrb	r3, [r3, #3]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	4b26      	ldr	r3, [pc, #152]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e72:	725a      	strb	r2, [r3, #9]
				case(ROTATION_2):
						// 1 [1] 1
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 8000e74:	4b25      	ldr	r3, [pc, #148]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e76:	789a      	ldrb	r2, [r3, #2]
 8000e78:	4b24      	ldr	r3, [pc, #144]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e7a:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y - 1;
 8000e7c:	4b23      	ldr	r3, [pc, #140]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e7e:	78db      	ldrb	r3, [r3, #3]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	4b21      	ldr	r3, [pc, #132]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e86:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;
 8000e88:	4b20      	ldr	r3, [pc, #128]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e8a:	789b      	ldrb	r3, [r3, #2]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	4b1e      	ldr	r3, [pc, #120]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e92:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000e94:	4b1d      	ldr	r3, [pc, #116]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e96:	78da      	ldrb	r2, [r3, #3]
 8000e98:	4b1c      	ldr	r3, [pc, #112]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e9a:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f0c <transform_rotation+0x6dc>)
 8000e9e:	789b      	ldrb	r3, [r3, #2]
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	b2da      	uxtb	r2, r3
 8000ea4:	4b19      	ldr	r3, [pc, #100]	@ (8000f0c <transform_rotation+0x6dc>)
 8000ea6:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 8000ea8:	4b18      	ldr	r3, [pc, #96]	@ (8000f0c <transform_rotation+0x6dc>)
 8000eaa:	78da      	ldrb	r2, [r3, #3]
 8000eac:	4b17      	ldr	r3, [pc, #92]	@ (8000f0c <transform_rotation+0x6dc>)
 8000eae:	725a      	strb	r2, [r3, #9]
				case(ROTATION_3):
						//    1
						// 1 [1]
						//    1
					object.suboriginbit_0.x = object.originbit.x - 1;
 8000eb0:	4b16      	ldr	r3, [pc, #88]	@ (8000f0c <transform_rotation+0x6dc>)
 8000eb2:	789b      	ldrb	r3, [r3, #2]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	b2da      	uxtb	r2, r3
 8000eb8:	4b14      	ldr	r3, [pc, #80]	@ (8000f0c <transform_rotation+0x6dc>)
 8000eba:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000ebc:	4b13      	ldr	r3, [pc, #76]	@ (8000f0c <transform_rotation+0x6dc>)
 8000ebe:	78da      	ldrb	r2, [r3, #3]
 8000ec0:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <transform_rotation+0x6dc>)
 8000ec2:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <transform_rotation+0x6dc>)
 8000ec6:	789a      	ldrb	r2, [r3, #2]
 8000ec8:	4b10      	ldr	r3, [pc, #64]	@ (8000f0c <transform_rotation+0x6dc>)
 8000eca:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <transform_rotation+0x6dc>)
 8000ece:	78db      	ldrb	r3, [r3, #3]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <transform_rotation+0x6dc>)
 8000ed6:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <transform_rotation+0x6dc>)
 8000eda:	789a      	ldrb	r2, [r3, #2]
 8000edc:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <transform_rotation+0x6dc>)
 8000ede:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8000ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8000f0c <transform_rotation+0x6dc>)
 8000ee2:	78db      	ldrb	r3, [r3, #3]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <transform_rotation+0x6dc>)
 8000eea:	725a      	strb	r2, [r3, #9]
			}

			break;
 8000eec:	e09b      	b.n	8001026 <transform_rotation+0x7f6>
		case(SMASHBOY):
			switch(new_rotation) {
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b03      	cmp	r3, #3
 8000ef2:	f200 809a 	bhi.w	800102a <transform_rotation+0x7fa>
 8000ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8000efc <transform_rotation+0x6cc>)
 8000ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000efc:	08000f11 	.word	0x08000f11
 8000f00:	08000f51 	.word	0x08000f51
 8000f04:	08000f91 	.word	0x08000f91
 8000f08:	08000fd1 	.word	0x08000fd1
 8000f0c:	20000084 	.word	0x20000084
				case(ROTATION_0):
					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 8000f10:	4b4e      	ldr	r3, [pc, #312]	@ (800104c <transform_rotation+0x81c>)
 8000f12:	789b      	ldrb	r3, [r3, #2]
 8000f14:	3301      	adds	r3, #1
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b4c      	ldr	r3, [pc, #304]	@ (800104c <transform_rotation+0x81c>)
 8000f1a:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 8000f1c:	4b4b      	ldr	r3, [pc, #300]	@ (800104c <transform_rotation+0x81c>)
 8000f1e:	78da      	ldrb	r2, [r3, #3]
 8000f20:	4b4a      	ldr	r3, [pc, #296]	@ (800104c <transform_rotation+0x81c>)
 8000f22:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 8000f24:	4b49      	ldr	r3, [pc, #292]	@ (800104c <transform_rotation+0x81c>)
 8000f26:	789a      	ldrb	r2, [r3, #2]
 8000f28:	4b48      	ldr	r3, [pc, #288]	@ (800104c <transform_rotation+0x81c>)
 8000f2a:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 8000f2c:	4b47      	ldr	r3, [pc, #284]	@ (800104c <transform_rotation+0x81c>)
 8000f2e:	78db      	ldrb	r3, [r3, #3]
 8000f30:	3301      	adds	r3, #1
 8000f32:	b2da      	uxtb	r2, r3
 8000f34:	4b45      	ldr	r3, [pc, #276]	@ (800104c <transform_rotation+0x81c>)
 8000f36:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 8000f38:	4b44      	ldr	r3, [pc, #272]	@ (800104c <transform_rotation+0x81c>)
 8000f3a:	789b      	ldrb	r3, [r3, #2]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	4b42      	ldr	r3, [pc, #264]	@ (800104c <transform_rotation+0x81c>)
 8000f42:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 8000f44:	4b41      	ldr	r3, [pc, #260]	@ (800104c <transform_rotation+0x81c>)
 8000f46:	78db      	ldrb	r3, [r3, #3]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	b2da      	uxtb	r2, r3
 8000f4c:	4b3f      	ldr	r3, [pc, #252]	@ (800104c <transform_rotation+0x81c>)
 8000f4e:	725a      	strb	r2, [r3, #9]
				case(ROTATION_1):

					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 8000f50:	4b3e      	ldr	r3, [pc, #248]	@ (800104c <transform_rotation+0x81c>)
 8000f52:	789b      	ldrb	r3, [r3, #2]
 8000f54:	3301      	adds	r3, #1
 8000f56:	b2da      	uxtb	r2, r3
 8000f58:	4b3c      	ldr	r3, [pc, #240]	@ (800104c <transform_rotation+0x81c>)
 8000f5a:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 8000f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800104c <transform_rotation+0x81c>)
 8000f5e:	78da      	ldrb	r2, [r3, #3]
 8000f60:	4b3a      	ldr	r3, [pc, #232]	@ (800104c <transform_rotation+0x81c>)
 8000f62:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 8000f64:	4b39      	ldr	r3, [pc, #228]	@ (800104c <transform_rotation+0x81c>)
 8000f66:	789a      	ldrb	r2, [r3, #2]
 8000f68:	4b38      	ldr	r3, [pc, #224]	@ (800104c <transform_rotation+0x81c>)
 8000f6a:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 8000f6c:	4b37      	ldr	r3, [pc, #220]	@ (800104c <transform_rotation+0x81c>)
 8000f6e:	78db      	ldrb	r3, [r3, #3]
 8000f70:	3301      	adds	r3, #1
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	4b35      	ldr	r3, [pc, #212]	@ (800104c <transform_rotation+0x81c>)
 8000f76:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 8000f78:	4b34      	ldr	r3, [pc, #208]	@ (800104c <transform_rotation+0x81c>)
 8000f7a:	789b      	ldrb	r3, [r3, #2]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	b2da      	uxtb	r2, r3
 8000f80:	4b32      	ldr	r3, [pc, #200]	@ (800104c <transform_rotation+0x81c>)
 8000f82:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 8000f84:	4b31      	ldr	r3, [pc, #196]	@ (800104c <transform_rotation+0x81c>)
 8000f86:	78db      	ldrb	r3, [r3, #3]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	4b2f      	ldr	r3, [pc, #188]	@ (800104c <transform_rotation+0x81c>)
 8000f8e:	725a      	strb	r2, [r3, #9]
				case(ROTATION_2):
					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 8000f90:	4b2e      	ldr	r3, [pc, #184]	@ (800104c <transform_rotation+0x81c>)
 8000f92:	789b      	ldrb	r3, [r3, #2]
 8000f94:	3301      	adds	r3, #1
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	4b2c      	ldr	r3, [pc, #176]	@ (800104c <transform_rotation+0x81c>)
 8000f9a:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 8000f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800104c <transform_rotation+0x81c>)
 8000f9e:	78da      	ldrb	r2, [r3, #3]
 8000fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800104c <transform_rotation+0x81c>)
 8000fa2:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 8000fa4:	4b29      	ldr	r3, [pc, #164]	@ (800104c <transform_rotation+0x81c>)
 8000fa6:	789a      	ldrb	r2, [r3, #2]
 8000fa8:	4b28      	ldr	r3, [pc, #160]	@ (800104c <transform_rotation+0x81c>)
 8000faa:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 8000fac:	4b27      	ldr	r3, [pc, #156]	@ (800104c <transform_rotation+0x81c>)
 8000fae:	78db      	ldrb	r3, [r3, #3]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	4b25      	ldr	r3, [pc, #148]	@ (800104c <transform_rotation+0x81c>)
 8000fb6:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 8000fb8:	4b24      	ldr	r3, [pc, #144]	@ (800104c <transform_rotation+0x81c>)
 8000fba:	789b      	ldrb	r3, [r3, #2]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	4b22      	ldr	r3, [pc, #136]	@ (800104c <transform_rotation+0x81c>)
 8000fc2:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 8000fc4:	4b21      	ldr	r3, [pc, #132]	@ (800104c <transform_rotation+0x81c>)
 8000fc6:	78db      	ldrb	r3, [r3, #3]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800104c <transform_rotation+0x81c>)
 8000fce:	725a      	strb	r2, [r3, #9]
				case(ROTATION_3):

					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800104c <transform_rotation+0x81c>)
 8000fd2:	789b      	ldrb	r3, [r3, #2]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	b2da      	uxtb	r2, r3
 8000fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800104c <transform_rotation+0x81c>)
 8000fda:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800104c <transform_rotation+0x81c>)
 8000fde:	78da      	ldrb	r2, [r3, #3]
 8000fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800104c <transform_rotation+0x81c>)
 8000fe2:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 8000fe4:	4b19      	ldr	r3, [pc, #100]	@ (800104c <transform_rotation+0x81c>)
 8000fe6:	789a      	ldrb	r2, [r3, #2]
 8000fe8:	4b18      	ldr	r3, [pc, #96]	@ (800104c <transform_rotation+0x81c>)
 8000fea:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 8000fec:	4b17      	ldr	r3, [pc, #92]	@ (800104c <transform_rotation+0x81c>)
 8000fee:	78db      	ldrb	r3, [r3, #3]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b15      	ldr	r3, [pc, #84]	@ (800104c <transform_rotation+0x81c>)
 8000ff6:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 8000ff8:	4b14      	ldr	r3, [pc, #80]	@ (800104c <transform_rotation+0x81c>)
 8000ffa:	789b      	ldrb	r3, [r3, #2]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	4b12      	ldr	r3, [pc, #72]	@ (800104c <transform_rotation+0x81c>)
 8001002:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 8001004:	4b11      	ldr	r3, [pc, #68]	@ (800104c <transform_rotation+0x81c>)
 8001006:	78db      	ldrb	r3, [r3, #3]
 8001008:	3301      	adds	r3, #1
 800100a:	b2da      	uxtb	r2, r3
 800100c:	4b0f      	ldr	r3, [pc, #60]	@ (800104c <transform_rotation+0x81c>)
 800100e:	725a      	strb	r2, [r3, #9]
			}
		break;
 8001010:	e00b      	b.n	800102a <transform_rotation+0x7fa>
			break;
 8001012:	bf00      	nop
 8001014:	e00a      	b.n	800102c <transform_rotation+0x7fc>
			break;
 8001016:	bf00      	nop
 8001018:	e008      	b.n	800102c <transform_rotation+0x7fc>
			break;
 800101a:	bf00      	nop
 800101c:	e006      	b.n	800102c <transform_rotation+0x7fc>
			break;
 800101e:	bf00      	nop
 8001020:	e004      	b.n	800102c <transform_rotation+0x7fc>
			break;
 8001022:	bf00      	nop
 8001024:	e002      	b.n	800102c <transform_rotation+0x7fc>
			break;
 8001026:	bf00      	nop
 8001028:	e000      	b.n	800102c <transform_rotation+0x7fc>
		break;
 800102a:	bf00      	nop
	}



	if (check_State() == 0) {
 800102c:	f7ff fad8 	bl	80005e0 <check_State>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d105      	bne.n	8001042 <transform_rotation+0x812>
		object = temp;
 8001036:	4b05      	ldr	r3, [pc, #20]	@ (800104c <transform_rotation+0x81c>)
 8001038:	f107 020c 	add.w	r2, r7, #12
 800103c:	ca07      	ldmia	r2, {r0, r1, r2}
 800103e:	c303      	stmia	r3!, {r0, r1}
 8001040:	801a      	strh	r2, [r3, #0]
	}

}
 8001042:	bf00      	nop
 8001044:	3718      	adds	r7, #24
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000084 	.word	0x20000084

08001050 <update_Matrix>:

void update_Matrix(void){
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
	dummyTable[object.originbit.y][object.originbit.x] = 1;
 8001056:	4b48      	ldr	r3, [pc, #288]	@ (8001178 <update_Matrix+0x128>)
 8001058:	78db      	ldrb	r3, [r3, #3]
 800105a:	4619      	mov	r1, r3
 800105c:	4b46      	ldr	r3, [pc, #280]	@ (8001178 <update_Matrix+0x128>)
 800105e:	789b      	ldrb	r3, [r3, #2]
 8001060:	4618      	mov	r0, r3
 8001062:	4a46      	ldr	r2, [pc, #280]	@ (800117c <update_Matrix+0x12c>)
 8001064:	460b      	mov	r3, r1
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	440b      	add	r3, r1
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	4413      	add	r3, r2
 800106e:	4403      	add	r3, r0
 8001070:	2201      	movs	r2, #1
 8001072:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_0.y][object.suboriginbit_0.x] = 1;
 8001074:	4b40      	ldr	r3, [pc, #256]	@ (8001178 <update_Matrix+0x128>)
 8001076:	795b      	ldrb	r3, [r3, #5]
 8001078:	4619      	mov	r1, r3
 800107a:	4b3f      	ldr	r3, [pc, #252]	@ (8001178 <update_Matrix+0x128>)
 800107c:	791b      	ldrb	r3, [r3, #4]
 800107e:	4618      	mov	r0, r3
 8001080:	4a3e      	ldr	r2, [pc, #248]	@ (800117c <update_Matrix+0x12c>)
 8001082:	460b      	mov	r3, r1
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	440b      	add	r3, r1
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4413      	add	r3, r2
 800108c:	4403      	add	r3, r0
 800108e:	2201      	movs	r2, #1
 8001090:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_1.y][object.suboriginbit_1.x] = 1;
 8001092:	4b39      	ldr	r3, [pc, #228]	@ (8001178 <update_Matrix+0x128>)
 8001094:	79db      	ldrb	r3, [r3, #7]
 8001096:	4619      	mov	r1, r3
 8001098:	4b37      	ldr	r3, [pc, #220]	@ (8001178 <update_Matrix+0x128>)
 800109a:	799b      	ldrb	r3, [r3, #6]
 800109c:	4618      	mov	r0, r3
 800109e:	4a37      	ldr	r2, [pc, #220]	@ (800117c <update_Matrix+0x12c>)
 80010a0:	460b      	mov	r3, r1
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	440b      	add	r3, r1
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	4413      	add	r3, r2
 80010aa:	4403      	add	r3, r0
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_2.y][object.suboriginbit_2.x] = 1;
 80010b0:	4b31      	ldr	r3, [pc, #196]	@ (8001178 <update_Matrix+0x128>)
 80010b2:	7a5b      	ldrb	r3, [r3, #9]
 80010b4:	4619      	mov	r1, r3
 80010b6:	4b30      	ldr	r3, [pc, #192]	@ (8001178 <update_Matrix+0x128>)
 80010b8:	7a1b      	ldrb	r3, [r3, #8]
 80010ba:	4618      	mov	r0, r3
 80010bc:	4a2f      	ldr	r2, [pc, #188]	@ (800117c <update_Matrix+0x12c>)
 80010be:	460b      	mov	r3, r1
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	440b      	add	r3, r1
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	4413      	add	r3, r2
 80010c8:	4403      	add	r3, r0
 80010ca:	2201      	movs	r2, #1
 80010cc:	701a      	strb	r2, [r3, #0]

#if MATRIX_LCD == 1
	// Connect to the LCD screen and update that

#elif MATRIX_LCD == 0
	printf("Matrix Representation:\n");
 80010ce:	482c      	ldr	r0, [pc, #176]	@ (8001180 <update_Matrix+0x130>)
 80010d0:	f003 fc66 	bl	80049a0 <puts>

	for (int i = 0; i < ROWS; i++) {
 80010d4:	2300      	movs	r3, #0
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	e020      	b.n	800111c <update_Matrix+0xcc>
		printf("%3d|", i);
 80010da:	68f9      	ldr	r1, [r7, #12]
 80010dc:	4829      	ldr	r0, [pc, #164]	@ (8001184 <update_Matrix+0x134>)
 80010de:	f003 fbef 	bl	80048c0 <iprintf>
		for (int j = 0; j < COLS; j++) {
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	e010      	b.n	800110a <update_Matrix+0xba>
			printf("%5d", dummyTable[i][j]);
 80010e8:	4924      	ldr	r1, [pc, #144]	@ (800117c <update_Matrix+0x12c>)
 80010ea:	68fa      	ldr	r2, [r7, #12]
 80010ec:	4613      	mov	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	18ca      	adds	r2, r1, r3
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	4413      	add	r3, r2
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	4619      	mov	r1, r3
 80010fe:	4822      	ldr	r0, [pc, #136]	@ (8001188 <update_Matrix+0x138>)
 8001100:	f003 fbde 	bl	80048c0 <iprintf>
		for (int j = 0; j < COLS; j++) {
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	3301      	adds	r3, #1
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	68bb      	ldr	r3, [r7, #8]
 800110c:	2b09      	cmp	r3, #9
 800110e:	ddeb      	ble.n	80010e8 <update_Matrix+0x98>
		}
		printf("\n");
 8001110:	200a      	movs	r0, #10
 8001112:	f003 fbe7 	bl	80048e4 <putchar>
	for (int i = 0; i < ROWS; i++) {
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	3301      	adds	r3, #1
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2b0c      	cmp	r3, #12
 8001120:	dddb      	ble.n	80010da <update_Matrix+0x8a>
	}

	printf("   +");
 8001122:	481a      	ldr	r0, [pc, #104]	@ (800118c <update_Matrix+0x13c>)
 8001124:	f003 fbcc 	bl	80048c0 <iprintf>
	for (int j = 0; j < COLS; j++) {
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	e005      	b.n	800113a <update_Matrix+0xea>
		printf("-----");
 800112e:	4818      	ldr	r0, [pc, #96]	@ (8001190 <update_Matrix+0x140>)
 8001130:	f003 fbc6 	bl	80048c0 <iprintf>
	for (int j = 0; j < COLS; j++) {
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3301      	adds	r3, #1
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b09      	cmp	r3, #9
 800113e:	ddf6      	ble.n	800112e <update_Matrix+0xde>
	}
	printf("\n");
 8001140:	200a      	movs	r0, #10
 8001142:	f003 fbcf 	bl	80048e4 <putchar>

	printf("%5s", " ");
 8001146:	4913      	ldr	r1, [pc, #76]	@ (8001194 <update_Matrix+0x144>)
 8001148:	4813      	ldr	r0, [pc, #76]	@ (8001198 <update_Matrix+0x148>)
 800114a:	f003 fbb9 	bl	80048c0 <iprintf>
	for (int i = 0; i < COLS; i++) {
 800114e:	2300      	movs	r3, #0
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	e006      	b.n	8001162 <update_Matrix+0x112>
		printf("%5d", i);
 8001154:	6839      	ldr	r1, [r7, #0]
 8001156:	480c      	ldr	r0, [pc, #48]	@ (8001188 <update_Matrix+0x138>)
 8001158:	f003 fbb2 	bl	80048c0 <iprintf>
	for (int i = 0; i < COLS; i++) {
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	3301      	adds	r3, #1
 8001160:	603b      	str	r3, [r7, #0]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	2b09      	cmp	r3, #9
 8001166:	ddf5      	ble.n	8001154 <update_Matrix+0x104>
	}
	printf("\n");
 8001168:	200a      	movs	r0, #10
 800116a:	f003 fbbb 	bl	80048e4 <putchar>

#endif

}
 800116e:	bf00      	nop
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000084 	.word	0x20000084
 800117c:	20000090 	.word	0x20000090
 8001180:	08005798 	.word	0x08005798
 8001184:	080057b0 	.word	0x080057b0
 8001188:	080057b8 	.word	0x080057b8
 800118c:	080057bc 	.word	0x080057bc
 8001190:	080057c4 	.word	0x080057c4
 8001194:	080057cc 	.word	0x080057cc
 8001198:	080057d0 	.word	0x080057d0

0800119c <getScheduledEvents>:
 */
#include "Scheduler.h"

static uint32_t scheduledEvents;

uint32_t getScheduledEvents(){
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
	uint32_t returnVal = scheduledEvents;
 80011a2:	4b05      	ldr	r3, [pc, #20]	@ (80011b8 <getScheduledEvents+0x1c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	607b      	str	r3, [r7, #4]
	return returnVal;
 80011a8:	687b      	ldr	r3, [r7, #4]
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	20000128 	.word	0x20000128

080011bc <addScheduledEvent>:

void addScheduledEvent(uint32_t event){
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	scheduledEvents |= (event);
 80011c4:	4b05      	ldr	r3, [pc, #20]	@ (80011dc <addScheduledEvent+0x20>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	4a03      	ldr	r2, [pc, #12]	@ (80011dc <addScheduledEvent+0x20>)
 80011ce:	6013      	str	r3, [r2, #0]
}
 80011d0:	bf00      	nop
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	20000128 	.word	0x20000128

080011e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e6:	f000 ff8f 	bl	8002108 <HAL_Init>

  /* USER CODE BEGIN Init */
  applicationInit();
 80011ea:	f7ff f9c9 	bl	8000580 <applicationInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ee:	f000 f815 	bl	800121c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f2:	f000 fa09 	bl	8001608 <MX_GPIO_Init>
  MX_LTDC_Init();
 80011f6:	f000 f8bd 	bl	8001374 <MX_LTDC_Init>
  MX_I2C3_Init();
 80011fa:	f000 f87b 	bl	80012f4 <MX_I2C3_Init>
  MX_RNG_Init();
 80011fe:	f000 f96b 	bl	80014d8 <MX_RNG_Init>
  MX_TIM2_Init();
 8001202:	f000 f9b3 	bl	800156c <MX_TIM2_Init>
  MX_SPI5_Init();
 8001206:	f000 f97b 	bl	8001500 <MX_SPI5_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 eventsToRun = getScheduledEvents();
 800120a:	f7ff ffc7 	bl	800119c <getScheduledEvents>
 800120e:	6078      	str	r0, [r7, #4]
	 if(eventsToRun && MATRIX_UPDATE_EVENT) {update_Matrix();}
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d0f9      	beq.n	800120a <main+0x2a>
 8001216:	f7ff ff1b 	bl	8001050 <update_Matrix>
	 eventsToRun = getScheduledEvents();
 800121a:	e7f6      	b.n	800120a <main+0x2a>

0800121c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b094      	sub	sp, #80	@ 0x50
 8001220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001222:	f107 0320 	add.w	r3, r7, #32
 8001226:	2230      	movs	r2, #48	@ 0x30
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f003 fbc0 	bl	80049b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	4b29      	ldr	r3, [pc, #164]	@ (80012ec <SystemClock_Config+0xd0>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001248:	4a28      	ldr	r2, [pc, #160]	@ (80012ec <SystemClock_Config+0xd0>)
 800124a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800124e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001250:	4b26      	ldr	r3, [pc, #152]	@ (80012ec <SystemClock_Config+0xd0>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001254:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800125c:	2300      	movs	r3, #0
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	4b23      	ldr	r3, [pc, #140]	@ (80012f0 <SystemClock_Config+0xd4>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001268:	4a21      	ldr	r2, [pc, #132]	@ (80012f0 <SystemClock_Config+0xd4>)
 800126a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <SystemClock_Config+0xd4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800127c:	2302      	movs	r3, #2
 800127e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001280:	2301      	movs	r3, #1
 8001282:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001284:	2310      	movs	r3, #16
 8001286:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001288:	2302      	movs	r3, #2
 800128a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800128c:	2300      	movs	r3, #0
 800128e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001290:	2308      	movs	r3, #8
 8001292:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001294:	2332      	movs	r3, #50	@ 0x32
 8001296:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001298:	2304      	movs	r3, #4
 800129a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800129c:	2307      	movs	r3, #7
 800129e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a0:	f107 0320 	add.w	r3, r7, #32
 80012a4:	4618      	mov	r0, r3
 80012a6:	f001 fef7 	bl	8003098 <HAL_RCC_OscConfig>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80012b0:	f000 fb6e 	bl	8001990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b4:	230f      	movs	r3, #15
 80012b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012b8:	2302      	movs	r3, #2
 80012ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80012c0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80012c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80012c6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f002 f958 	bl	8003588 <HAL_RCC_ClockConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012de:	f000 fb57 	bl	8001990 <Error_Handler>
  }
}
 80012e2:	bf00      	nop
 80012e4:	3750      	adds	r7, #80	@ 0x50
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40007000 	.word	0x40007000

080012f4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80012f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001368 <MX_I2C3_Init+0x74>)
 80012fa:	4a1c      	ldr	r2, [pc, #112]	@ (800136c <MX_I2C3_Init+0x78>)
 80012fc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80012fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001368 <MX_I2C3_Init+0x74>)
 8001300:	4a1b      	ldr	r2, [pc, #108]	@ (8001370 <MX_I2C3_Init+0x7c>)
 8001302:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001304:	4b18      	ldr	r3, [pc, #96]	@ (8001368 <MX_I2C3_Init+0x74>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800130a:	4b17      	ldr	r3, [pc, #92]	@ (8001368 <MX_I2C3_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001310:	4b15      	ldr	r3, [pc, #84]	@ (8001368 <MX_I2C3_Init+0x74>)
 8001312:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001316:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001318:	4b13      	ldr	r3, [pc, #76]	@ (8001368 <MX_I2C3_Init+0x74>)
 800131a:	2200      	movs	r2, #0
 800131c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800131e:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <MX_I2C3_Init+0x74>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001324:	4b10      	ldr	r3, [pc, #64]	@ (8001368 <MX_I2C3_Init+0x74>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800132a:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <MX_I2C3_Init+0x74>)
 800132c:	2200      	movs	r2, #0
 800132e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001330:	480d      	ldr	r0, [pc, #52]	@ (8001368 <MX_I2C3_Init+0x74>)
 8001332:	f001 fa4b 	bl	80027cc <HAL_I2C_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800133c:	f000 fb28 	bl	8001990 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001340:	2100      	movs	r1, #0
 8001342:	4809      	ldr	r0, [pc, #36]	@ (8001368 <MX_I2C3_Init+0x74>)
 8001344:	f001 fb86 	bl	8002a54 <HAL_I2CEx_ConfigAnalogFilter>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800134e:	f000 fb1f 	bl	8001990 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001352:	2100      	movs	r1, #0
 8001354:	4804      	ldr	r0, [pc, #16]	@ (8001368 <MX_I2C3_Init+0x74>)
 8001356:	f001 fbb9 	bl	8002acc <HAL_I2CEx_ConfigDigitalFilter>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001360:	f000 fb16 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	2000012c 	.word	0x2000012c
 800136c:	40005c00 	.word	0x40005c00
 8001370:	000186a0 	.word	0x000186a0

08001374 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b09a      	sub	sp, #104	@ 0x68
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800137a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800137e:	2234      	movs	r2, #52	@ 0x34
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f003 fb14 	bl	80049b0 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8001388:	463b      	mov	r3, r7
 800138a:	2234      	movs	r2, #52	@ 0x34
 800138c:	2100      	movs	r1, #0
 800138e:	4618      	mov	r0, r3
 8001390:	f003 fb0e 	bl	80049b0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001394:	4b4e      	ldr	r3, [pc, #312]	@ (80014d0 <MX_LTDC_Init+0x15c>)
 8001396:	4a4f      	ldr	r2, [pc, #316]	@ (80014d4 <MX_LTDC_Init+0x160>)
 8001398:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800139a:	4b4d      	ldr	r3, [pc, #308]	@ (80014d0 <MX_LTDC_Init+0x15c>)
 800139c:	2200      	movs	r2, #0
 800139e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80013a0:	4b4b      	ldr	r3, [pc, #300]	@ (80014d0 <MX_LTDC_Init+0x15c>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80013a6:	4b4a      	ldr	r3, [pc, #296]	@ (80014d0 <MX_LTDC_Init+0x15c>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80013ac:	4b48      	ldr	r3, [pc, #288]	@ (80014d0 <MX_LTDC_Init+0x15c>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80013b2:	4b47      	ldr	r3, [pc, #284]	@ (80014d0 <MX_LTDC_Init+0x15c>)
 80013b4:	2207      	movs	r2, #7
 80013b6:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80013b8:	4b45      	ldr	r3, [pc, #276]	@ (80014d0 <MX_LTDC_Init+0x15c>)
 80013ba:	2203      	movs	r2, #3
 80013bc:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80013be:	4b44      	ldr	r3, [pc, #272]	@ (80014d0 <MX_LTDC_Init+0x15c>)
 80013c0:	220e      	movs	r2, #14
 80013c2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80013c4:	4b42      	ldr	r3, [pc, #264]	@ (80014d0 <MX_LTDC_Init+0x15c>)
 80013c6:	2205      	movs	r2, #5
 80013c8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80013ca:	4b41      	ldr	r3, [pc, #260]	@ (80014d0 <MX_LTDC_Init+0x15c>)
 80013cc:	f240 228e 	movw	r2, #654	@ 0x28e
 80013d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80013d2:	4b3f      	ldr	r3, [pc, #252]	@ (80014d0 <MX_LTDC_Init+0x15c>)
 80013d4:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80013d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80013da:	4b3d      	ldr	r3, [pc, #244]	@ (80014d0 <MX_LTDC_Init+0x15c>)
 80013dc:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80013e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80013e2:	4b3b      	ldr	r3, [pc, #236]	@ (80014d0 <MX_LTDC_Init+0x15c>)
 80013e4:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80013e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80013ea:	4b39      	ldr	r3, [pc, #228]	@ (80014d0 <MX_LTDC_Init+0x15c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80013f2:	4b37      	ldr	r3, [pc, #220]	@ (80014d0 <MX_LTDC_Init+0x15c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80013fa:	4b35      	ldr	r3, [pc, #212]	@ (80014d0 <MX_LTDC_Init+0x15c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001402:	4833      	ldr	r0, [pc, #204]	@ (80014d0 <MX_LTDC_Init+0x15c>)
 8001404:	f001 fba2 	bl	8002b4c <HAL_LTDC_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800140e:	f000 fabf 	bl	8001990 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001422:	2300      	movs	r3, #0
 8001424:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800142e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001432:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001434:	2305      	movs	r3, #5
 8001436:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001444:	2300      	movs	r3, #0
 8001446:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001456:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800145a:	2200      	movs	r2, #0
 800145c:	4619      	mov	r1, r3
 800145e:	481c      	ldr	r0, [pc, #112]	@ (80014d0 <MX_LTDC_Init+0x15c>)
 8001460:	f001 fc44 	bl	8002cec <HAL_LTDC_ConfigLayer>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800146a:	f000 fa91 	bl	8001990 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800148a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800148e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001490:	2305      	movs	r3, #5
 8001492:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80014b2:	463b      	mov	r3, r7
 80014b4:	2201      	movs	r2, #1
 80014b6:	4619      	mov	r1, r3
 80014b8:	4805      	ldr	r0, [pc, #20]	@ (80014d0 <MX_LTDC_Init+0x15c>)
 80014ba:	f001 fc17 	bl	8002cec <HAL_LTDC_ConfigLayer>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80014c4:	f000 fa64 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80014c8:	bf00      	nop
 80014ca:	3768      	adds	r7, #104	@ 0x68
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000180 	.word	0x20000180
 80014d4:	40016800 	.word	0x40016800

080014d8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80014dc:	4b06      	ldr	r3, [pc, #24]	@ (80014f8 <MX_RNG_Init+0x20>)
 80014de:	4a07      	ldr	r2, [pc, #28]	@ (80014fc <MX_RNG_Init+0x24>)
 80014e0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80014e2:	4805      	ldr	r0, [pc, #20]	@ (80014f8 <MX_RNG_Init+0x20>)
 80014e4:	f002 fc1c 	bl	8003d20 <HAL_RNG_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80014ee:	f000 fa4f 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	20000228 	.word	0x20000228
 80014fc:	50060800 	.word	0x50060800

08001500 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001504:	4b17      	ldr	r3, [pc, #92]	@ (8001564 <MX_SPI5_Init+0x64>)
 8001506:	4a18      	ldr	r2, [pc, #96]	@ (8001568 <MX_SPI5_Init+0x68>)
 8001508:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800150a:	4b16      	ldr	r3, [pc, #88]	@ (8001564 <MX_SPI5_Init+0x64>)
 800150c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001510:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001512:	4b14      	ldr	r3, [pc, #80]	@ (8001564 <MX_SPI5_Init+0x64>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001518:	4b12      	ldr	r3, [pc, #72]	@ (8001564 <MX_SPI5_Init+0x64>)
 800151a:	2200      	movs	r2, #0
 800151c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800151e:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <MX_SPI5_Init+0x64>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001524:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <MX_SPI5_Init+0x64>)
 8001526:	2200      	movs	r2, #0
 8001528:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800152a:	4b0e      	ldr	r3, [pc, #56]	@ (8001564 <MX_SPI5_Init+0x64>)
 800152c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001530:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001532:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <MX_SPI5_Init+0x64>)
 8001534:	2200      	movs	r2, #0
 8001536:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001538:	4b0a      	ldr	r3, [pc, #40]	@ (8001564 <MX_SPI5_Init+0x64>)
 800153a:	2200      	movs	r2, #0
 800153c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800153e:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <MX_SPI5_Init+0x64>)
 8001540:	2200      	movs	r2, #0
 8001542:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001544:	4b07      	ldr	r3, [pc, #28]	@ (8001564 <MX_SPI5_Init+0x64>)
 8001546:	2200      	movs	r2, #0
 8001548:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800154a:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <MX_SPI5_Init+0x64>)
 800154c:	220a      	movs	r2, #10
 800154e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001550:	4804      	ldr	r0, [pc, #16]	@ (8001564 <MX_SPI5_Init+0x64>)
 8001552:	f002 fc65 	bl	8003e20 <HAL_SPI_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800155c:	f000 fa18 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000238 	.word	0x20000238
 8001568:	40015000 	.word	0x40015000

0800156c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001572:	f107 0308 	add.w	r3, r7, #8
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001580:	463b      	mov	r3, r7
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001588:	4b1d      	ldr	r3, [pc, #116]	@ (8001600 <MX_TIM2_Init+0x94>)
 800158a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800158e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001590:	4b1b      	ldr	r3, [pc, #108]	@ (8001600 <MX_TIM2_Init+0x94>)
 8001592:	2200      	movs	r2, #0
 8001594:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001596:	4b1a      	ldr	r3, [pc, #104]	@ (8001600 <MX_TIM2_Init+0x94>)
 8001598:	2210      	movs	r2, #16
 800159a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 15999999;
 800159c:	4b18      	ldr	r3, [pc, #96]	@ (8001600 <MX_TIM2_Init+0x94>)
 800159e:	4a19      	ldr	r2, [pc, #100]	@ (8001604 <MX_TIM2_Init+0x98>)
 80015a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a2:	4b17      	ldr	r3, [pc, #92]	@ (8001600 <MX_TIM2_Init+0x94>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a8:	4b15      	ldr	r3, [pc, #84]	@ (8001600 <MX_TIM2_Init+0x94>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015ae:	4814      	ldr	r0, [pc, #80]	@ (8001600 <MX_TIM2_Init+0x94>)
 80015b0:	f002 fcbf 	bl	8003f32 <HAL_TIM_Base_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80015ba:	f000 f9e9 	bl	8001990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015be:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015c4:	f107 0308 	add.w	r3, r7, #8
 80015c8:	4619      	mov	r1, r3
 80015ca:	480d      	ldr	r0, [pc, #52]	@ (8001600 <MX_TIM2_Init+0x94>)
 80015cc:	f002 fdf0 	bl	80041b0 <HAL_TIM_ConfigClockSource>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80015d6:	f000 f9db 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015e2:	463b      	mov	r3, r7
 80015e4:	4619      	mov	r1, r3
 80015e6:	4806      	ldr	r0, [pc, #24]	@ (8001600 <MX_TIM2_Init+0x94>)
 80015e8:	f003 f818 	bl	800461c <HAL_TIMEx_MasterConfigSynchronization>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80015f2:	f000 f9cd 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000290 	.word	0x20000290
 8001604:	00f423ff 	.word	0x00f423ff

08001608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08e      	sub	sp, #56	@ 0x38
 800160c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
 800161c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
 8001622:	4bb3      	ldr	r3, [pc, #716]	@ (80018f0 <MX_GPIO_Init+0x2e8>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	4ab2      	ldr	r2, [pc, #712]	@ (80018f0 <MX_GPIO_Init+0x2e8>)
 8001628:	f043 0304 	orr.w	r3, r3, #4
 800162c:	6313      	str	r3, [r2, #48]	@ 0x30
 800162e:	4bb0      	ldr	r3, [pc, #704]	@ (80018f0 <MX_GPIO_Init+0x2e8>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	623b      	str	r3, [r7, #32]
 8001638:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
 800163e:	4bac      	ldr	r3, [pc, #688]	@ (80018f0 <MX_GPIO_Init+0x2e8>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	4aab      	ldr	r2, [pc, #684]	@ (80018f0 <MX_GPIO_Init+0x2e8>)
 8001644:	f043 0320 	orr.w	r3, r3, #32
 8001648:	6313      	str	r3, [r2, #48]	@ 0x30
 800164a:	4ba9      	ldr	r3, [pc, #676]	@ (80018f0 <MX_GPIO_Init+0x2e8>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164e:	f003 0320 	and.w	r3, r3, #32
 8001652:	61fb      	str	r3, [r7, #28]
 8001654:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001656:	2300      	movs	r3, #0
 8001658:	61bb      	str	r3, [r7, #24]
 800165a:	4ba5      	ldr	r3, [pc, #660]	@ (80018f0 <MX_GPIO_Init+0x2e8>)
 800165c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165e:	4aa4      	ldr	r2, [pc, #656]	@ (80018f0 <MX_GPIO_Init+0x2e8>)
 8001660:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001664:	6313      	str	r3, [r2, #48]	@ 0x30
 8001666:	4ba2      	ldr	r3, [pc, #648]	@ (80018f0 <MX_GPIO_Init+0x2e8>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800166e:	61bb      	str	r3, [r7, #24]
 8001670:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
 8001676:	4b9e      	ldr	r3, [pc, #632]	@ (80018f0 <MX_GPIO_Init+0x2e8>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	4a9d      	ldr	r2, [pc, #628]	@ (80018f0 <MX_GPIO_Init+0x2e8>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	6313      	str	r3, [r2, #48]	@ 0x30
 8001682:	4b9b      	ldr	r3, [pc, #620]	@ (80018f0 <MX_GPIO_Init+0x2e8>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	4b97      	ldr	r3, [pc, #604]	@ (80018f0 <MX_GPIO_Init+0x2e8>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	4a96      	ldr	r2, [pc, #600]	@ (80018f0 <MX_GPIO_Init+0x2e8>)
 8001698:	f043 0302 	orr.w	r3, r3, #2
 800169c:	6313      	str	r3, [r2, #48]	@ 0x30
 800169e:	4b94      	ldr	r3, [pc, #592]	@ (80018f0 <MX_GPIO_Init+0x2e8>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	4b90      	ldr	r3, [pc, #576]	@ (80018f0 <MX_GPIO_Init+0x2e8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	4a8f      	ldr	r2, [pc, #572]	@ (80018f0 <MX_GPIO_Init+0x2e8>)
 80016b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80016b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ba:	4b8d      	ldr	r3, [pc, #564]	@ (80018f0 <MX_GPIO_Init+0x2e8>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	4b89      	ldr	r3, [pc, #548]	@ (80018f0 <MX_GPIO_Init+0x2e8>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	4a88      	ldr	r2, [pc, #544]	@ (80018f0 <MX_GPIO_Init+0x2e8>)
 80016d0:	f043 0310 	orr.w	r3, r3, #16
 80016d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d6:	4b86      	ldr	r3, [pc, #536]	@ (80018f0 <MX_GPIO_Init+0x2e8>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	f003 0310 	and.w	r3, r3, #16
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	607b      	str	r3, [r7, #4]
 80016e6:	4b82      	ldr	r3, [pc, #520]	@ (80018f0 <MX_GPIO_Init+0x2e8>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	4a81      	ldr	r2, [pc, #516]	@ (80018f0 <MX_GPIO_Init+0x2e8>)
 80016ec:	f043 0308 	orr.w	r3, r3, #8
 80016f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f2:	4b7f      	ldr	r3, [pc, #508]	@ (80018f0 <MX_GPIO_Init+0x2e8>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	f003 0308 	and.w	r3, r3, #8
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80016fe:	2200      	movs	r2, #0
 8001700:	2116      	movs	r1, #22
 8001702:	487c      	ldr	r0, [pc, #496]	@ (80018f4 <MX_GPIO_Init+0x2ec>)
 8001704:	f001 f830 	bl	8002768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001708:	2200      	movs	r2, #0
 800170a:	2180      	movs	r1, #128	@ 0x80
 800170c:	487a      	ldr	r0, [pc, #488]	@ (80018f8 <MX_GPIO_Init+0x2f0>)
 800170e:	f001 f82b 	bl	8002768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001712:	2200      	movs	r2, #0
 8001714:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001718:	4878      	ldr	r0, [pc, #480]	@ (80018fc <MX_GPIO_Init+0x2f4>)
 800171a:	f001 f825 	bl	8002768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001724:	4876      	ldr	r0, [pc, #472]	@ (8001900 <MX_GPIO_Init+0x2f8>)
 8001726:	f001 f81f 	bl	8002768 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800172a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800173c:	230c      	movs	r3, #12
 800173e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001740:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001744:	4619      	mov	r1, r3
 8001746:	486f      	ldr	r0, [pc, #444]	@ (8001904 <MX_GPIO_Init+0x2fc>)
 8001748:	f000 fe62 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800174c:	2301      	movs	r3, #1
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800175c:	230c      	movs	r3, #12
 800175e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001760:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001764:	4619      	mov	r1, r3
 8001766:	4863      	ldr	r0, [pc, #396]	@ (80018f4 <MX_GPIO_Init+0x2ec>)
 8001768:	f000 fe52 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800176c:	2316      	movs	r3, #22
 800176e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001770:	2301      	movs	r3, #1
 8001772:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001778:	2300      	movs	r3, #0
 800177a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800177c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001780:	4619      	mov	r1, r3
 8001782:	485c      	ldr	r0, [pc, #368]	@ (80018f4 <MX_GPIO_Init+0x2ec>)
 8001784:	f000 fe44 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001788:	2301      	movs	r3, #1
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800178c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001790:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001796:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800179a:	4619      	mov	r1, r3
 800179c:	4856      	ldr	r0, [pc, #344]	@ (80018f8 <MX_GPIO_Init+0x2f0>)
 800179e:	f000 fe37 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80017a2:	f248 0306 	movw	r3, #32774	@ 0x8006
 80017a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017a8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80017ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017b6:	4619      	mov	r1, r3
 80017b8:	484f      	ldr	r0, [pc, #316]	@ (80018f8 <MX_GPIO_Init+0x2f0>)
 80017ba:	f000 fe29 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80017be:	2380      	movs	r3, #128	@ 0x80
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c2:	2301      	movs	r3, #1
 80017c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017d2:	4619      	mov	r1, r3
 80017d4:	4848      	ldr	r0, [pc, #288]	@ (80018f8 <MX_GPIO_Init+0x2f0>)
 80017d6:	f000 fe1b 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80017da:	2320      	movs	r3, #32
 80017dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017de:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80017e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ec:	4619      	mov	r1, r3
 80017ee:	4841      	ldr	r0, [pc, #260]	@ (80018f4 <MX_GPIO_Init+0x2ec>)
 80017f0:	f000 fe0e 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80017f4:	2304      	movs	r3, #4
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f8:	2300      	movs	r3, #0
 80017fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001800:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001804:	4619      	mov	r1, r3
 8001806:	4840      	ldr	r0, [pc, #256]	@ (8001908 <MX_GPIO_Init+0x300>)
 8001808:	f000 fe02 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800180c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001810:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800181e:	230c      	movs	r3, #12
 8001820:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001822:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001826:	4619      	mov	r1, r3
 8001828:	4835      	ldr	r0, [pc, #212]	@ (8001900 <MX_GPIO_Init+0x2f8>)
 800182a:	f000 fdf1 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800182e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001832:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800183c:	2303      	movs	r3, #3
 800183e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001840:	230c      	movs	r3, #12
 8001842:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001844:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001848:	4619      	mov	r1, r3
 800184a:	4830      	ldr	r0, [pc, #192]	@ (800190c <MX_GPIO_Init+0x304>)
 800184c:	f000 fde0 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001850:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001854:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001856:	2302      	movs	r3, #2
 8001858:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001862:	230c      	movs	r3, #12
 8001864:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001866:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800186a:	4619      	mov	r1, r3
 800186c:	4826      	ldr	r0, [pc, #152]	@ (8001908 <MX_GPIO_Init+0x300>)
 800186e:	f000 fdcf 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001872:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001876:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001878:	2300      	movs	r3, #0
 800187a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001880:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001884:	4619      	mov	r1, r3
 8001886:	4820      	ldr	r0, [pc, #128]	@ (8001908 <MX_GPIO_Init+0x300>)
 8001888:	f000 fdc2 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800188c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001890:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189a:	2303      	movs	r3, #3
 800189c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800189e:	230c      	movs	r3, #12
 80018a0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018a6:	4619      	mov	r1, r3
 80018a8:	4814      	ldr	r0, [pc, #80]	@ (80018fc <MX_GPIO_Init+0x2f4>)
 80018aa:	f000 fdb1 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80018ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80018b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b4:	2300      	movs	r3, #0
 80018b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80018bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018c0:	4619      	mov	r1, r3
 80018c2:	480e      	ldr	r0, [pc, #56]	@ (80018fc <MX_GPIO_Init+0x2f4>)
 80018c4:	f000 fda4 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80018c8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80018cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ce:	2301      	movs	r3, #1
 80018d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018de:	4619      	mov	r1, r3
 80018e0:	4806      	ldr	r0, [pc, #24]	@ (80018fc <MX_GPIO_Init+0x2f4>)
 80018e2:	f000 fd95 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80018e6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80018ec:	e010      	b.n	8001910 <MX_GPIO_Init+0x308>
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800
 80018f4:	40020800 	.word	0x40020800
 80018f8:	40020000 	.word	0x40020000
 80018fc:	40020c00 	.word	0x40020c00
 8001900:	40021800 	.word	0x40021800
 8001904:	40021400 	.word	0x40021400
 8001908:	40020400 	.word	0x40020400
 800190c:	40021000 	.word	0x40021000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001918:	2303      	movs	r3, #3
 800191a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800191c:	2307      	movs	r3, #7
 800191e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001920:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001924:	4619      	mov	r1, r3
 8001926:	4817      	ldr	r0, [pc, #92]	@ (8001984 <MX_GPIO_Init+0x37c>)
 8001928:	f000 fd72 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 800192c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001930:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001932:	2301      	movs	r3, #1
 8001934:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193a:	2300      	movs	r3, #0
 800193c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800193e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001942:	4619      	mov	r1, r3
 8001944:	4810      	ldr	r0, [pc, #64]	@ (8001988 <MX_GPIO_Init+0x380>)
 8001946:	f000 fd63 	bl	8002410 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800194a:	2360      	movs	r3, #96	@ 0x60
 800194c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001956:	2303      	movs	r3, #3
 8001958:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800195a:	230c      	movs	r3, #12
 800195c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800195e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001962:	4619      	mov	r1, r3
 8001964:	4809      	ldr	r0, [pc, #36]	@ (800198c <MX_GPIO_Init+0x384>)
 8001966:	f000 fd53 	bl	8002410 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	2100      	movs	r1, #0
 800196e:	2006      	movs	r0, #6
 8001970:	f000 fd17 	bl	80023a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001974:	2006      	movs	r0, #6
 8001976:	f000 fd30 	bl	80023da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800197a:	bf00      	nop
 800197c:	3738      	adds	r7, #56	@ 0x38
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40020000 	.word	0x40020000
 8001988:	40021800 	.word	0x40021800
 800198c:	40020400 	.word	0x40020400

08001990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001994:	b672      	cpsid	i
}
 8001996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001998:	bf00      	nop
 800199a:	e7fd      	b.n	8001998 <Error_Handler+0x8>

0800199c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	4b10      	ldr	r3, [pc, #64]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019aa:	4a0f      	ldr	r2, [pc, #60]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019b2:	4b0d      	ldr	r3, [pc, #52]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ba:	607b      	str	r3, [r7, #4]
 80019bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019be:	2300      	movs	r3, #0
 80019c0:	603b      	str	r3, [r7, #0]
 80019c2:	4b09      	ldr	r3, [pc, #36]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	4a08      	ldr	r2, [pc, #32]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019ce:	4b06      	ldr	r3, [pc, #24]	@ (80019e8 <HAL_MspInit+0x4c>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d6:	603b      	str	r3, [r7, #0]
 80019d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019da:	2007      	movs	r0, #7
 80019dc:	f000 fcd6 	bl	800238c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e0:	bf00      	nop
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	40023800 	.word	0x40023800

080019ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08a      	sub	sp, #40	@ 0x28
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a29      	ldr	r2, [pc, #164]	@ (8001ab0 <HAL_I2C_MspInit+0xc4>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d14b      	bne.n	8001aa6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	4b28      	ldr	r3, [pc, #160]	@ (8001ab4 <HAL_I2C_MspInit+0xc8>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	4a27      	ldr	r2, [pc, #156]	@ (8001ab4 <HAL_I2C_MspInit+0xc8>)
 8001a18:	f043 0304 	orr.w	r3, r3, #4
 8001a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1e:	4b25      	ldr	r3, [pc, #148]	@ (8001ab4 <HAL_I2C_MspInit+0xc8>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	613b      	str	r3, [r7, #16]
 8001a28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b21      	ldr	r3, [pc, #132]	@ (8001ab4 <HAL_I2C_MspInit+0xc8>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	4a20      	ldr	r2, [pc, #128]	@ (8001ab4 <HAL_I2C_MspInit+0xc8>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab4 <HAL_I2C_MspInit+0xc8>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001a46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a4c:	2312      	movs	r3, #18
 8001a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a50:	2300      	movs	r3, #0
 8001a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a54:	2300      	movs	r3, #0
 8001a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a58:	2304      	movs	r3, #4
 8001a5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001a5c:	f107 0314 	add.w	r3, r7, #20
 8001a60:	4619      	mov	r1, r3
 8001a62:	4815      	ldr	r0, [pc, #84]	@ (8001ab8 <HAL_I2C_MspInit+0xcc>)
 8001a64:	f000 fcd4 	bl	8002410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001a68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a6e:	2312      	movs	r3, #18
 8001a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a76:	2300      	movs	r3, #0
 8001a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a7a:	2304      	movs	r3, #4
 8001a7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4619      	mov	r1, r3
 8001a84:	480d      	ldr	r0, [pc, #52]	@ (8001abc <HAL_I2C_MspInit+0xd0>)
 8001a86:	f000 fcc3 	bl	8002410 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <HAL_I2C_MspInit+0xc8>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a92:	4a08      	ldr	r2, [pc, #32]	@ (8001ab4 <HAL_I2C_MspInit+0xc8>)
 8001a94:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a9a:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <HAL_I2C_MspInit+0xc8>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001aa6:	bf00      	nop
 8001aa8:	3728      	adds	r7, #40	@ 0x28
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40005c00 	.word	0x40005c00
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40020800 	.word	0x40020800
 8001abc:	40020000 	.word	0x40020000

08001ac0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b09a      	sub	sp, #104	@ 0x68
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ad8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001adc:	2230      	movs	r2, #48	@ 0x30
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f002 ff65 	bl	80049b0 <memset>
  if(hltdc->Instance==LTDC)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a81      	ldr	r2, [pc, #516]	@ (8001cf0 <HAL_LTDC_MspInit+0x230>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	f040 80fa 	bne.w	8001ce6 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001af2:	2308      	movs	r3, #8
 8001af4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001af6:	2332      	movs	r3, #50	@ 0x32
 8001af8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001afa:	2302      	movs	r3, #2
 8001afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001afe:	2300      	movs	r3, #0
 8001b00:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b06:	4618      	mov	r0, r3
 8001b08:	f001 ff4a 	bl	80039a0 <HAL_RCCEx_PeriphCLKConfig>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001b12:	f7ff ff3d 	bl	8001990 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	623b      	str	r3, [r7, #32]
 8001b1a:	4b76      	ldr	r3, [pc, #472]	@ (8001cf4 <HAL_LTDC_MspInit+0x234>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b1e:	4a75      	ldr	r2, [pc, #468]	@ (8001cf4 <HAL_LTDC_MspInit+0x234>)
 8001b20:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001b24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b26:	4b73      	ldr	r3, [pc, #460]	@ (8001cf4 <HAL_LTDC_MspInit+0x234>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b2a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b2e:	623b      	str	r3, [r7, #32]
 8001b30:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b32:	2300      	movs	r3, #0
 8001b34:	61fb      	str	r3, [r7, #28]
 8001b36:	4b6f      	ldr	r3, [pc, #444]	@ (8001cf4 <HAL_LTDC_MspInit+0x234>)
 8001b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3a:	4a6e      	ldr	r2, [pc, #440]	@ (8001cf4 <HAL_LTDC_MspInit+0x234>)
 8001b3c:	f043 0320 	orr.w	r3, r3, #32
 8001b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b42:	4b6c      	ldr	r3, [pc, #432]	@ (8001cf4 <HAL_LTDC_MspInit+0x234>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	f003 0320 	and.w	r3, r3, #32
 8001b4a:	61fb      	str	r3, [r7, #28]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
 8001b52:	4b68      	ldr	r3, [pc, #416]	@ (8001cf4 <HAL_LTDC_MspInit+0x234>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b56:	4a67      	ldr	r2, [pc, #412]	@ (8001cf4 <HAL_LTDC_MspInit+0x234>)
 8001b58:	f043 0301 	orr.w	r3, r3, #1
 8001b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5e:	4b65      	ldr	r3, [pc, #404]	@ (8001cf4 <HAL_LTDC_MspInit+0x234>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	61bb      	str	r3, [r7, #24]
 8001b68:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	4b61      	ldr	r3, [pc, #388]	@ (8001cf4 <HAL_LTDC_MspInit+0x234>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b72:	4a60      	ldr	r2, [pc, #384]	@ (8001cf4 <HAL_LTDC_MspInit+0x234>)
 8001b74:	f043 0302 	orr.w	r3, r3, #2
 8001b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7a:	4b5e      	ldr	r3, [pc, #376]	@ (8001cf4 <HAL_LTDC_MspInit+0x234>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	4b5a      	ldr	r3, [pc, #360]	@ (8001cf4 <HAL_LTDC_MspInit+0x234>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	4a59      	ldr	r2, [pc, #356]	@ (8001cf4 <HAL_LTDC_MspInit+0x234>)
 8001b90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b96:	4b57      	ldr	r3, [pc, #348]	@ (8001cf4 <HAL_LTDC_MspInit+0x234>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4b53      	ldr	r3, [pc, #332]	@ (8001cf4 <HAL_LTDC_MspInit+0x234>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	4a52      	ldr	r2, [pc, #328]	@ (8001cf4 <HAL_LTDC_MspInit+0x234>)
 8001bac:	f043 0304 	orr.w	r3, r3, #4
 8001bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bb2:	4b50      	ldr	r3, [pc, #320]	@ (8001cf4 <HAL_LTDC_MspInit+0x234>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	4b4c      	ldr	r3, [pc, #304]	@ (8001cf4 <HAL_LTDC_MspInit+0x234>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	4a4b      	ldr	r2, [pc, #300]	@ (8001cf4 <HAL_LTDC_MspInit+0x234>)
 8001bc8:	f043 0308 	orr.w	r3, r3, #8
 8001bcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bce:	4b49      	ldr	r3, [pc, #292]	@ (8001cf4 <HAL_LTDC_MspInit+0x234>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001bda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bde:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be0:	2302      	movs	r3, #2
 8001be2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be4:	2300      	movs	r3, #0
 8001be6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be8:	2300      	movs	r3, #0
 8001bea:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001bec:	230e      	movs	r3, #14
 8001bee:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001bf0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4840      	ldr	r0, [pc, #256]	@ (8001cf8 <HAL_LTDC_MspInit+0x238>)
 8001bf8:	f000 fc0a 	bl	8002410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001bfc:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001c00:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c0e:	230e      	movs	r3, #14
 8001c10:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c12:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c16:	4619      	mov	r1, r3
 8001c18:	4838      	ldr	r0, [pc, #224]	@ (8001cfc <HAL_LTDC_MspInit+0x23c>)
 8001c1a:	f000 fbf9 	bl	8002410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001c2e:	2309      	movs	r3, #9
 8001c30:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c32:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c36:	4619      	mov	r1, r3
 8001c38:	4831      	ldr	r0, [pc, #196]	@ (8001d00 <HAL_LTDC_MspInit+0x240>)
 8001c3a:	f000 fbe9 	bl	8002410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001c3e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001c42:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c50:	230e      	movs	r3, #14
 8001c52:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c54:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4829      	ldr	r0, [pc, #164]	@ (8001d00 <HAL_LTDC_MspInit+0x240>)
 8001c5c:	f000 fbd8 	bl	8002410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001c60:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001c64:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c66:	2302      	movs	r3, #2
 8001c68:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c72:	230e      	movs	r3, #14
 8001c74:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c76:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4821      	ldr	r0, [pc, #132]	@ (8001d04 <HAL_LTDC_MspInit+0x244>)
 8001c7e:	f000 fbc7 	bl	8002410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001c82:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001c86:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c94:	230e      	movs	r3, #14
 8001c96:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c98:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	481a      	ldr	r0, [pc, #104]	@ (8001d08 <HAL_LTDC_MspInit+0x248>)
 8001ca0:	f000 fbb6 	bl	8002410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001ca4:	2348      	movs	r3, #72	@ 0x48
 8001ca6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cac:	2300      	movs	r3, #0
 8001cae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cb4:	230e      	movs	r3, #14
 8001cb6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cb8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4813      	ldr	r0, [pc, #76]	@ (8001d0c <HAL_LTDC_MspInit+0x24c>)
 8001cc0:	f000 fba6 	bl	8002410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001cc4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001cc8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cca:	2302      	movs	r3, #2
 8001ccc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001cd6:	2309      	movs	r3, #9
 8001cd8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cda:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4808      	ldr	r0, [pc, #32]	@ (8001d04 <HAL_LTDC_MspInit+0x244>)
 8001ce2:	f000 fb95 	bl	8002410 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001ce6:	bf00      	nop
 8001ce8:	3768      	adds	r7, #104	@ 0x68
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40016800 	.word	0x40016800
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	40021400 	.word	0x40021400
 8001cfc:	40020000 	.word	0x40020000
 8001d00:	40020400 	.word	0x40020400
 8001d04:	40021800 	.word	0x40021800
 8001d08:	40020800 	.word	0x40020800
 8001d0c:	40020c00 	.word	0x40020c00

08001d10 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a0b      	ldr	r2, [pc, #44]	@ (8001d4c <HAL_RNG_MspInit+0x3c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d10d      	bne.n	8001d3e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4b0a      	ldr	r3, [pc, #40]	@ (8001d50 <HAL_RNG_MspInit+0x40>)
 8001d28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d2a:	4a09      	ldr	r2, [pc, #36]	@ (8001d50 <HAL_RNG_MspInit+0x40>)
 8001d2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d30:	6353      	str	r3, [r2, #52]	@ 0x34
 8001d32:	4b07      	ldr	r3, [pc, #28]	@ (8001d50 <HAL_RNG_MspInit+0x40>)
 8001d34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001d3e:	bf00      	nop
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	50060800 	.word	0x50060800
 8001d50:	40023800 	.word	0x40023800

08001d54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08a      	sub	sp, #40	@ 0x28
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a19      	ldr	r2, [pc, #100]	@ (8001dd8 <HAL_SPI_MspInit+0x84>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d12c      	bne.n	8001dd0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	613b      	str	r3, [r7, #16]
 8001d7a:	4b18      	ldr	r3, [pc, #96]	@ (8001ddc <HAL_SPI_MspInit+0x88>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7e:	4a17      	ldr	r2, [pc, #92]	@ (8001ddc <HAL_SPI_MspInit+0x88>)
 8001d80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d86:	4b15      	ldr	r3, [pc, #84]	@ (8001ddc <HAL_SPI_MspInit+0x88>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d8e:	613b      	str	r3, [r7, #16]
 8001d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	4b11      	ldr	r3, [pc, #68]	@ (8001ddc <HAL_SPI_MspInit+0x88>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9a:	4a10      	ldr	r2, [pc, #64]	@ (8001ddc <HAL_SPI_MspInit+0x88>)
 8001d9c:	f043 0320 	orr.w	r3, r3, #32
 8001da0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001da2:	4b0e      	ldr	r3, [pc, #56]	@ (8001ddc <HAL_SPI_MspInit+0x88>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	f003 0320 	and.w	r3, r3, #32
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001dae:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001dc0:	2305      	movs	r3, #5
 8001dc2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4805      	ldr	r0, [pc, #20]	@ (8001de0 <HAL_SPI_MspInit+0x8c>)
 8001dcc:	f000 fb20 	bl	8002410 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001dd0:	bf00      	nop
 8001dd2:	3728      	adds	r7, #40	@ 0x28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40015000 	.word	0x40015000
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40021400 	.word	0x40021400

08001de4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001df4:	d115      	bne.n	8001e22 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	4b0c      	ldr	r3, [pc, #48]	@ (8001e2c <HAL_TIM_Base_MspInit+0x48>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfe:	4a0b      	ldr	r2, [pc, #44]	@ (8001e2c <HAL_TIM_Base_MspInit+0x48>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e06:	4b09      	ldr	r3, [pc, #36]	@ (8001e2c <HAL_TIM_Base_MspInit+0x48>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e12:	2200      	movs	r2, #0
 8001e14:	2100      	movs	r1, #0
 8001e16:	201c      	movs	r0, #28
 8001e18:	f000 fac3 	bl	80023a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e1c:	201c      	movs	r0, #28
 8001e1e:	f000 fadc 	bl	80023da <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40023800 	.word	0x40023800

08001e30 <HAL_GPIO_EXTI_Callback>:

}

/* USER CODE BEGIN 1 */
// Interrupt callback function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) {  // Button pin
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d107      	bne.n	8001e50 <HAL_GPIO_EXTI_Callback+0x20>
    	// Send flag to rotate stuff
    	rotation new_rotation = object.Rotation + 1;
 8001e40:	4b05      	ldr	r3, [pc, #20]	@ (8001e58 <HAL_GPIO_EXTI_Callback+0x28>)
 8001e42:	785b      	ldrb	r3, [r3, #1]
 8001e44:	3301      	adds	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
    	transform_rotation(new_rotation);
 8001e48:	7bfb      	ldrb	r3, [r7, #15]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fcf0 	bl	8000830 <transform_rotation>
    }
}
 8001e50:	bf00      	nop
 8001e52:	3710      	adds	r7, #16
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	200002d8 	.word	0x200002d8

08001e5c <HAL_TIM_PeriodElapsedCallback>:

// Interrupt callback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e6c:	f040 8090 	bne.w	8001f90 <HAL_TIM_PeriodElapsedCallback+0x134>
        // erase the previous state
    	dummyTable[object.originbit.y][object.originbit.x] = 0;
 8001e70:	4b4a      	ldr	r3, [pc, #296]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001e72:	78db      	ldrb	r3, [r3, #3]
 8001e74:	4619      	mov	r1, r3
 8001e76:	4b49      	ldr	r3, [pc, #292]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001e78:	789b      	ldrb	r3, [r3, #2]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	4a48      	ldr	r2, [pc, #288]	@ (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001e7e:	460b      	mov	r3, r1
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	4403      	add	r3, r0
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_0.y][object.suboriginbit_0.x] = 0;
 8001e8e:	4b43      	ldr	r3, [pc, #268]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001e90:	795b      	ldrb	r3, [r3, #5]
 8001e92:	4619      	mov	r1, r3
 8001e94:	4b41      	ldr	r3, [pc, #260]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001e96:	791b      	ldrb	r3, [r3, #4]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	4a41      	ldr	r2, [pc, #260]	@ (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001e9c:	460b      	mov	r3, r1
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	4403      	add	r3, r0
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_1.y][object.suboriginbit_1.x] = 0;
 8001eac:	4b3b      	ldr	r3, [pc, #236]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001eae:	79db      	ldrb	r3, [r3, #7]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4b3a      	ldr	r3, [pc, #232]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001eb4:	799b      	ldrb	r3, [r3, #6]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	4a39      	ldr	r2, [pc, #228]	@ (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001eba:	460b      	mov	r3, r1
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	4413      	add	r3, r2
 8001ec4:	4403      	add	r3, r0
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_2.y][object.suboriginbit_2.x] = 0;
 8001eca:	4b34      	ldr	r3, [pc, #208]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001ecc:	7a5b      	ldrb	r3, [r3, #9]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4b32      	ldr	r3, [pc, #200]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001ed2:	7a1b      	ldrb	r3, [r3, #8]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	4a32      	ldr	r2, [pc, #200]	@ (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001ed8:	460b      	mov	r3, r1
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4413      	add	r3, r2
 8001ee2:	4403      	add	r3, r0
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
		// create the new object location
    	object.originbit.y -= 1;
 8001ee8:	4b2c      	ldr	r3, [pc, #176]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001eea:	78db      	ldrb	r3, [r3, #3]
 8001eec:	3b01      	subs	r3, #1
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	4b2a      	ldr	r3, [pc, #168]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001ef2:	70da      	strb	r2, [r3, #3]
    	object.suboriginbit_0.y -= 1;
 8001ef4:	4b29      	ldr	r3, [pc, #164]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001ef6:	795b      	ldrb	r3, [r3, #5]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	4b27      	ldr	r3, [pc, #156]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001efe:	715a      	strb	r2, [r3, #5]
    	object.suboriginbit_1.y -= 1;
 8001f00:	4b26      	ldr	r3, [pc, #152]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f02:	79db      	ldrb	r3, [r3, #7]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b2da      	uxtb	r2, r3
 8001f08:	4b24      	ldr	r3, [pc, #144]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f0a:	71da      	strb	r2, [r3, #7]
    	object.suboriginbit_2.y -= 1;
 8001f0c:	4b23      	ldr	r3, [pc, #140]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f0e:	7a5b      	ldrb	r3, [r3, #9]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	4b21      	ldr	r3, [pc, #132]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f16:	725a      	strb	r2, [r3, #9]
    	// draw the new state
    	dummyTable[object.originbit.y][object.originbit.x] = 1;
 8001f18:	4b20      	ldr	r3, [pc, #128]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f1a:	78db      	ldrb	r3, [r3, #3]
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	4b1f      	ldr	r3, [pc, #124]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f20:	789b      	ldrb	r3, [r3, #2]
 8001f22:	4618      	mov	r0, r3
 8001f24:	4a1e      	ldr	r2, [pc, #120]	@ (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001f26:	460b      	mov	r3, r1
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	440b      	add	r3, r1
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	4413      	add	r3, r2
 8001f30:	4403      	add	r3, r0
 8001f32:	2201      	movs	r2, #1
 8001f34:	701a      	strb	r2, [r3, #0]
    	dummyTable[object.suboriginbit_0.y][object.suboriginbit_0.x] = 1;
 8001f36:	4b19      	ldr	r3, [pc, #100]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f38:	795b      	ldrb	r3, [r3, #5]
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4b17      	ldr	r3, [pc, #92]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f3e:	791b      	ldrb	r3, [r3, #4]
 8001f40:	4618      	mov	r0, r3
 8001f42:	4a17      	ldr	r2, [pc, #92]	@ (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001f44:	460b      	mov	r3, r1
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4403      	add	r3, r0
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
    	dummyTable[object.suboriginbit_1.y][object.suboriginbit_1.x] = 1;
 8001f54:	4b11      	ldr	r3, [pc, #68]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f56:	79db      	ldrb	r3, [r3, #7]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4b10      	ldr	r3, [pc, #64]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f5c:	799b      	ldrb	r3, [r3, #6]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	4a0f      	ldr	r2, [pc, #60]	@ (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001f62:	460b      	mov	r3, r1
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	440b      	add	r3, r1
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	4413      	add	r3, r2
 8001f6c:	4403      	add	r3, r0
 8001f6e:	2201      	movs	r2, #1
 8001f70:	701a      	strb	r2, [r3, #0]
    	dummyTable[object.suboriginbit_2.y][object.suboriginbit_2.x] = 1;
 8001f72:	4b0a      	ldr	r3, [pc, #40]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f74:	7a5b      	ldrb	r3, [r3, #9]
 8001f76:	4619      	mov	r1, r3
 8001f78:	4b08      	ldr	r3, [pc, #32]	@ (8001f9c <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f7a:	7a1b      	ldrb	r3, [r3, #8]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	4a08      	ldr	r2, [pc, #32]	@ (8001fa0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001f80:	460b      	mov	r3, r1
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	4413      	add	r3, r2
 8001f8a:	4403      	add	r3, r0
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	701a      	strb	r2, [r3, #0]
    }
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	200002d8 	.word	0x200002d8
 8001fa0:	200002e4 	.word	0x200002e4

08001fa4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fa8:	bf00      	nop
 8001faa:	e7fd      	b.n	8001fa8 <NMI_Handler+0x4>

08001fac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <HardFault_Handler+0x4>

08001fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <MemManage_Handler+0x4>

08001fbc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc0:	bf00      	nop
 8001fc2:	e7fd      	b.n	8001fc0 <BusFault_Handler+0x4>

08001fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fc8:	bf00      	nop
 8001fca:	e7fd      	b.n	8001fc8 <UsageFault_Handler+0x4>

08001fcc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr

08001fe8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fec:	bf00      	nop
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr

08001ff6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ffa:	f000 f8d7 	bl	80021ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}

08002002 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002006:	2001      	movs	r0, #1
 8002008:	f000 fbc8 	bl	800279c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}

08002010 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002014:	4802      	ldr	r0, [pc, #8]	@ (8002020 <TIM2_IRQHandler+0x10>)
 8002016:	f001 ffdb 	bl	8003fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800201a:	bf00      	nop
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	20000290 	.word	0x20000290

08002024 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800202c:	4a14      	ldr	r2, [pc, #80]	@ (8002080 <_sbrk+0x5c>)
 800202e:	4b15      	ldr	r3, [pc, #84]	@ (8002084 <_sbrk+0x60>)
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002038:	4b13      	ldr	r3, [pc, #76]	@ (8002088 <_sbrk+0x64>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d102      	bne.n	8002046 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002040:	4b11      	ldr	r3, [pc, #68]	@ (8002088 <_sbrk+0x64>)
 8002042:	4a12      	ldr	r2, [pc, #72]	@ (800208c <_sbrk+0x68>)
 8002044:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002046:	4b10      	ldr	r3, [pc, #64]	@ (8002088 <_sbrk+0x64>)
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4413      	add	r3, r2
 800204e:	693a      	ldr	r2, [r7, #16]
 8002050:	429a      	cmp	r2, r3
 8002052:	d207      	bcs.n	8002064 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002054:	f002 fcb4 	bl	80049c0 <__errno>
 8002058:	4603      	mov	r3, r0
 800205a:	220c      	movs	r2, #12
 800205c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800205e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002062:	e009      	b.n	8002078 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002064:	4b08      	ldr	r3, [pc, #32]	@ (8002088 <_sbrk+0x64>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800206a:	4b07      	ldr	r3, [pc, #28]	@ (8002088 <_sbrk+0x64>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	4a05      	ldr	r2, [pc, #20]	@ (8002088 <_sbrk+0x64>)
 8002074:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002076:	68fb      	ldr	r3, [r7, #12]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3718      	adds	r7, #24
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20030000 	.word	0x20030000
 8002084:	00000400 	.word	0x00000400
 8002088:	20000368 	.word	0x20000368
 800208c:	200004c0 	.word	0x200004c0

08002090 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002094:	4b06      	ldr	r3, [pc, #24]	@ (80020b0 <SystemInit+0x20>)
 8002096:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800209a:	4a05      	ldr	r2, [pc, #20]	@ (80020b0 <SystemInit+0x20>)
 800209c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020a4:	bf00      	nop
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80020b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020ec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020b8:	f7ff ffea 	bl	8002090 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020bc:	480c      	ldr	r0, [pc, #48]	@ (80020f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020be:	490d      	ldr	r1, [pc, #52]	@ (80020f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020c0:	4a0d      	ldr	r2, [pc, #52]	@ (80020f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c4:	e002      	b.n	80020cc <LoopCopyDataInit>

080020c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020ca:	3304      	adds	r3, #4

080020cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020d0:	d3f9      	bcc.n	80020c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020d2:	4a0a      	ldr	r2, [pc, #40]	@ (80020fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020d4:	4c0a      	ldr	r4, [pc, #40]	@ (8002100 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d8:	e001      	b.n	80020de <LoopFillZerobss>

080020da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020dc:	3204      	adds	r2, #4

080020de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020e0:	d3fb      	bcc.n	80020da <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80020e2:	f002 fc73 	bl	80049cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020e6:	f7ff f87b 	bl	80011e0 <main>
  bx  lr    
 80020ea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80020ec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80020f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80020f8:	08005830 	.word	0x08005830
  ldr r2, =_sbss
 80020fc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002100:	200004bc 	.word	0x200004bc

08002104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002104:	e7fe      	b.n	8002104 <ADC_IRQHandler>
	...

08002108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800210c:	4b0e      	ldr	r3, [pc, #56]	@ (8002148 <HAL_Init+0x40>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0d      	ldr	r2, [pc, #52]	@ (8002148 <HAL_Init+0x40>)
 8002112:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002116:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002118:	4b0b      	ldr	r3, [pc, #44]	@ (8002148 <HAL_Init+0x40>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0a      	ldr	r2, [pc, #40]	@ (8002148 <HAL_Init+0x40>)
 800211e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002122:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002124:	4b08      	ldr	r3, [pc, #32]	@ (8002148 <HAL_Init+0x40>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a07      	ldr	r2, [pc, #28]	@ (8002148 <HAL_Init+0x40>)
 800212a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800212e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002130:	2003      	movs	r0, #3
 8002132:	f000 f92b 	bl	800238c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002136:	2000      	movs	r0, #0
 8002138:	f000 f808 	bl	800214c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800213c:	f7ff fc2e 	bl	800199c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002140:	2300      	movs	r3, #0
}
 8002142:	4618      	mov	r0, r3
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	40023c00 	.word	0x40023c00

0800214c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002154:	4b12      	ldr	r3, [pc, #72]	@ (80021a0 <HAL_InitTick+0x54>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4b12      	ldr	r3, [pc, #72]	@ (80021a4 <HAL_InitTick+0x58>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	4619      	mov	r1, r3
 800215e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002162:	fbb3 f3f1 	udiv	r3, r3, r1
 8002166:	fbb2 f3f3 	udiv	r3, r2, r3
 800216a:	4618      	mov	r0, r3
 800216c:	f000 f943 	bl	80023f6 <HAL_SYSTICK_Config>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e00e      	b.n	8002198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b0f      	cmp	r3, #15
 800217e:	d80a      	bhi.n	8002196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002180:	2200      	movs	r2, #0
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002188:	f000 f90b 	bl	80023a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800218c:	4a06      	ldr	r2, [pc, #24]	@ (80021a8 <HAL_InitTick+0x5c>)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
 8002194:	e000      	b.n	8002198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000000 	.word	0x20000000
 80021a4:	20000008 	.word	0x20000008
 80021a8:	20000004 	.word	0x20000004

080021ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021b0:	4b06      	ldr	r3, [pc, #24]	@ (80021cc <HAL_IncTick+0x20>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <HAL_IncTick+0x24>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4413      	add	r3, r2
 80021bc:	4a04      	ldr	r2, [pc, #16]	@ (80021d0 <HAL_IncTick+0x24>)
 80021be:	6013      	str	r3, [r2, #0]
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	20000008 	.word	0x20000008
 80021d0:	2000036c 	.word	0x2000036c

080021d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return uwTick;
 80021d8:	4b03      	ldr	r3, [pc, #12]	@ (80021e8 <HAL_GetTick+0x14>)
 80021da:	681b      	ldr	r3, [r3, #0]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	2000036c 	.word	0x2000036c

080021ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021fc:	4b0c      	ldr	r3, [pc, #48]	@ (8002230 <__NVIC_SetPriorityGrouping+0x44>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002202:	68ba      	ldr	r2, [r7, #8]
 8002204:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002208:	4013      	ands	r3, r2
 800220a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002214:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002218:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800221c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800221e:	4a04      	ldr	r2, [pc, #16]	@ (8002230 <__NVIC_SetPriorityGrouping+0x44>)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	60d3      	str	r3, [r2, #12]
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002238:	4b04      	ldr	r3, [pc, #16]	@ (800224c <__NVIC_GetPriorityGrouping+0x18>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	0a1b      	lsrs	r3, r3, #8
 800223e:	f003 0307 	and.w	r3, r3, #7
}
 8002242:	4618      	mov	r0, r3
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002250:	b480      	push	{r7}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
 8002256:	4603      	mov	r3, r0
 8002258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	2b00      	cmp	r3, #0
 8002260:	db0b      	blt.n	800227a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	f003 021f 	and.w	r2, r3, #31
 8002268:	4907      	ldr	r1, [pc, #28]	@ (8002288 <__NVIC_EnableIRQ+0x38>)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	2001      	movs	r0, #1
 8002272:	fa00 f202 	lsl.w	r2, r0, r2
 8002276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	e000e100 	.word	0xe000e100

0800228c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	6039      	str	r1, [r7, #0]
 8002296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229c:	2b00      	cmp	r3, #0
 800229e:	db0a      	blt.n	80022b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	490c      	ldr	r1, [pc, #48]	@ (80022d8 <__NVIC_SetPriority+0x4c>)
 80022a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022aa:	0112      	lsls	r2, r2, #4
 80022ac:	b2d2      	uxtb	r2, r2
 80022ae:	440b      	add	r3, r1
 80022b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b4:	e00a      	b.n	80022cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	4908      	ldr	r1, [pc, #32]	@ (80022dc <__NVIC_SetPriority+0x50>)
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	f003 030f 	and.w	r3, r3, #15
 80022c2:	3b04      	subs	r3, #4
 80022c4:	0112      	lsls	r2, r2, #4
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	440b      	add	r3, r1
 80022ca:	761a      	strb	r2, [r3, #24]
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	e000e100 	.word	0xe000e100
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b089      	sub	sp, #36	@ 0x24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f1c3 0307 	rsb	r3, r3, #7
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	bf28      	it	cs
 80022fe:	2304      	movcs	r3, #4
 8002300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	3304      	adds	r3, #4
 8002306:	2b06      	cmp	r3, #6
 8002308:	d902      	bls.n	8002310 <NVIC_EncodePriority+0x30>
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3b03      	subs	r3, #3
 800230e:	e000      	b.n	8002312 <NVIC_EncodePriority+0x32>
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002314:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43da      	mvns	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	401a      	ands	r2, r3
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002328:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	fa01 f303 	lsl.w	r3, r1, r3
 8002332:	43d9      	mvns	r1, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002338:	4313      	orrs	r3, r2
         );
}
 800233a:	4618      	mov	r0, r3
 800233c:	3724      	adds	r7, #36	@ 0x24
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	3b01      	subs	r3, #1
 8002354:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002358:	d301      	bcc.n	800235e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800235a:	2301      	movs	r3, #1
 800235c:	e00f      	b.n	800237e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800235e:	4a0a      	ldr	r2, [pc, #40]	@ (8002388 <SysTick_Config+0x40>)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002366:	210f      	movs	r1, #15
 8002368:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800236c:	f7ff ff8e 	bl	800228c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002370:	4b05      	ldr	r3, [pc, #20]	@ (8002388 <SysTick_Config+0x40>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002376:	4b04      	ldr	r3, [pc, #16]	@ (8002388 <SysTick_Config+0x40>)
 8002378:	2207      	movs	r2, #7
 800237a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	e000e010 	.word	0xe000e010

0800238c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ff29 	bl	80021ec <__NVIC_SetPriorityGrouping>
}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b086      	sub	sp, #24
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	4603      	mov	r3, r0
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
 80023ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023b4:	f7ff ff3e 	bl	8002234 <__NVIC_GetPriorityGrouping>
 80023b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ba:	687a      	ldr	r2, [r7, #4]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	6978      	ldr	r0, [r7, #20]
 80023c0:	f7ff ff8e 	bl	80022e0 <NVIC_EncodePriority>
 80023c4:	4602      	mov	r2, r0
 80023c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ca:	4611      	mov	r1, r2
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff ff5d 	bl	800228c <__NVIC_SetPriority>
}
 80023d2:	bf00      	nop
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b082      	sub	sp, #8
 80023de:	af00      	add	r7, sp, #0
 80023e0:	4603      	mov	r3, r0
 80023e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff31 	bl	8002250 <__NVIC_EnableIRQ>
}
 80023ee:	bf00      	nop
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff ffa2 	bl	8002348 <SysTick_Config>
 8002404:	4603      	mov	r3, r0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
	...

08002410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002410:	b480      	push	{r7}
 8002412:	b089      	sub	sp, #36	@ 0x24
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800241e:	2300      	movs	r3, #0
 8002420:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002422:	2300      	movs	r3, #0
 8002424:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	e177      	b.n	800271c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800242c:	2201      	movs	r2, #1
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	697a      	ldr	r2, [r7, #20]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	429a      	cmp	r2, r3
 8002446:	f040 8166 	bne.w	8002716 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	2b01      	cmp	r3, #1
 8002454:	d005      	beq.n	8002462 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800245e:	2b02      	cmp	r3, #2
 8002460:	d130      	bne.n	80024c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	2203      	movs	r2, #3
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002498:	2201      	movs	r2, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	091b      	lsrs	r3, r3, #4
 80024ae:	f003 0201 	and.w	r2, r3, #1
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f003 0303 	and.w	r3, r3, #3
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d017      	beq.n	8002500 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	2203      	movs	r2, #3
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	43db      	mvns	r3, r3
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	4013      	ands	r3, r2
 80024e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d123      	bne.n	8002554 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	08da      	lsrs	r2, r3, #3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3208      	adds	r2, #8
 8002514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	220f      	movs	r2, #15
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	691a      	ldr	r2, [r3, #16]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	f003 0307 	and.w	r3, r3, #7
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	4313      	orrs	r3, r2
 8002544:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	08da      	lsrs	r2, r3, #3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	3208      	adds	r2, #8
 800254e:	69b9      	ldr	r1, [r7, #24]
 8002550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	2203      	movs	r2, #3
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	43db      	mvns	r3, r3
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4013      	ands	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0203 	and.w	r2, r3, #3
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4313      	orrs	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002590:	2b00      	cmp	r3, #0
 8002592:	f000 80c0 	beq.w	8002716 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	4b66      	ldr	r3, [pc, #408]	@ (8002734 <HAL_GPIO_Init+0x324>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800259e:	4a65      	ldr	r2, [pc, #404]	@ (8002734 <HAL_GPIO_Init+0x324>)
 80025a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80025a6:	4b63      	ldr	r3, [pc, #396]	@ (8002734 <HAL_GPIO_Init+0x324>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025b2:	4a61      	ldr	r2, [pc, #388]	@ (8002738 <HAL_GPIO_Init+0x328>)
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	089b      	lsrs	r3, r3, #2
 80025b8:	3302      	adds	r3, #2
 80025ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f003 0303 	and.w	r3, r3, #3
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	220f      	movs	r2, #15
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a58      	ldr	r2, [pc, #352]	@ (800273c <HAL_GPIO_Init+0x32c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d037      	beq.n	800264e <HAL_GPIO_Init+0x23e>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a57      	ldr	r2, [pc, #348]	@ (8002740 <HAL_GPIO_Init+0x330>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d031      	beq.n	800264a <HAL_GPIO_Init+0x23a>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a56      	ldr	r2, [pc, #344]	@ (8002744 <HAL_GPIO_Init+0x334>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d02b      	beq.n	8002646 <HAL_GPIO_Init+0x236>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a55      	ldr	r2, [pc, #340]	@ (8002748 <HAL_GPIO_Init+0x338>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d025      	beq.n	8002642 <HAL_GPIO_Init+0x232>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	4a54      	ldr	r2, [pc, #336]	@ (800274c <HAL_GPIO_Init+0x33c>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d01f      	beq.n	800263e <HAL_GPIO_Init+0x22e>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a53      	ldr	r2, [pc, #332]	@ (8002750 <HAL_GPIO_Init+0x340>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d019      	beq.n	800263a <HAL_GPIO_Init+0x22a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a52      	ldr	r2, [pc, #328]	@ (8002754 <HAL_GPIO_Init+0x344>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d013      	beq.n	8002636 <HAL_GPIO_Init+0x226>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a51      	ldr	r2, [pc, #324]	@ (8002758 <HAL_GPIO_Init+0x348>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d00d      	beq.n	8002632 <HAL_GPIO_Init+0x222>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a50      	ldr	r2, [pc, #320]	@ (800275c <HAL_GPIO_Init+0x34c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d007      	beq.n	800262e <HAL_GPIO_Init+0x21e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a4f      	ldr	r2, [pc, #316]	@ (8002760 <HAL_GPIO_Init+0x350>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d101      	bne.n	800262a <HAL_GPIO_Init+0x21a>
 8002626:	2309      	movs	r3, #9
 8002628:	e012      	b.n	8002650 <HAL_GPIO_Init+0x240>
 800262a:	230a      	movs	r3, #10
 800262c:	e010      	b.n	8002650 <HAL_GPIO_Init+0x240>
 800262e:	2308      	movs	r3, #8
 8002630:	e00e      	b.n	8002650 <HAL_GPIO_Init+0x240>
 8002632:	2307      	movs	r3, #7
 8002634:	e00c      	b.n	8002650 <HAL_GPIO_Init+0x240>
 8002636:	2306      	movs	r3, #6
 8002638:	e00a      	b.n	8002650 <HAL_GPIO_Init+0x240>
 800263a:	2305      	movs	r3, #5
 800263c:	e008      	b.n	8002650 <HAL_GPIO_Init+0x240>
 800263e:	2304      	movs	r3, #4
 8002640:	e006      	b.n	8002650 <HAL_GPIO_Init+0x240>
 8002642:	2303      	movs	r3, #3
 8002644:	e004      	b.n	8002650 <HAL_GPIO_Init+0x240>
 8002646:	2302      	movs	r3, #2
 8002648:	e002      	b.n	8002650 <HAL_GPIO_Init+0x240>
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <HAL_GPIO_Init+0x240>
 800264e:	2300      	movs	r3, #0
 8002650:	69fa      	ldr	r2, [r7, #28]
 8002652:	f002 0203 	and.w	r2, r2, #3
 8002656:	0092      	lsls	r2, r2, #2
 8002658:	4093      	lsls	r3, r2
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002660:	4935      	ldr	r1, [pc, #212]	@ (8002738 <HAL_GPIO_Init+0x328>)
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	089b      	lsrs	r3, r3, #2
 8002666:	3302      	adds	r3, #2
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800266e:	4b3d      	ldr	r3, [pc, #244]	@ (8002764 <HAL_GPIO_Init+0x354>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	43db      	mvns	r3, r3
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	4013      	ands	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002692:	4a34      	ldr	r2, [pc, #208]	@ (8002764 <HAL_GPIO_Init+0x354>)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002698:	4b32      	ldr	r3, [pc, #200]	@ (8002764 <HAL_GPIO_Init+0x354>)
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	43db      	mvns	r3, r3
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4013      	ands	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026bc:	4a29      	ldr	r2, [pc, #164]	@ (8002764 <HAL_GPIO_Init+0x354>)
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026c2:	4b28      	ldr	r3, [pc, #160]	@ (8002764 <HAL_GPIO_Init+0x354>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026e6:	4a1f      	ldr	r2, [pc, #124]	@ (8002764 <HAL_GPIO_Init+0x354>)
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002764 <HAL_GPIO_Init+0x354>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	43db      	mvns	r3, r3
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	4013      	ands	r3, r2
 80026fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002710:	4a14      	ldr	r2, [pc, #80]	@ (8002764 <HAL_GPIO_Init+0x354>)
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3301      	adds	r3, #1
 800271a:	61fb      	str	r3, [r7, #28]
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	2b0f      	cmp	r3, #15
 8002720:	f67f ae84 	bls.w	800242c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002724:	bf00      	nop
 8002726:	bf00      	nop
 8002728:	3724      	adds	r7, #36	@ 0x24
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40023800 	.word	0x40023800
 8002738:	40013800 	.word	0x40013800
 800273c:	40020000 	.word	0x40020000
 8002740:	40020400 	.word	0x40020400
 8002744:	40020800 	.word	0x40020800
 8002748:	40020c00 	.word	0x40020c00
 800274c:	40021000 	.word	0x40021000
 8002750:	40021400 	.word	0x40021400
 8002754:	40021800 	.word	0x40021800
 8002758:	40021c00 	.word	0x40021c00
 800275c:	40022000 	.word	0x40022000
 8002760:	40022400 	.word	0x40022400
 8002764:	40013c00 	.word	0x40013c00

08002768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	807b      	strh	r3, [r7, #2]
 8002774:	4613      	mov	r3, r2
 8002776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002778:	787b      	ldrb	r3, [r7, #1]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800277e:	887a      	ldrh	r2, [r7, #2]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002784:	e003      	b.n	800278e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002786:	887b      	ldrh	r3, [r7, #2]
 8002788:	041a      	lsls	r2, r3, #16
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	619a      	str	r2, [r3, #24]
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
	...

0800279c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027a6:	4b08      	ldr	r3, [pc, #32]	@ (80027c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027a8:	695a      	ldr	r2, [r3, #20]
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	4013      	ands	r3, r2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d006      	beq.n	80027c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027b2:	4a05      	ldr	r2, [pc, #20]	@ (80027c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027b4:	88fb      	ldrh	r3, [r7, #6]
 80027b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027b8:	88fb      	ldrh	r3, [r7, #6]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff fb38 	bl	8001e30 <HAL_GPIO_EXTI_Callback>
  }
}
 80027c0:	bf00      	nop
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40013c00 	.word	0x40013c00

080027cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e12b      	b.n	8002a36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7ff f8fa 	bl	80019ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2224      	movs	r2, #36	@ 0x24
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0201 	bic.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800281e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800282e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002830:	f001 f8a2 	bl	8003978 <HAL_RCC_GetPCLK1Freq>
 8002834:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	4a81      	ldr	r2, [pc, #516]	@ (8002a40 <HAL_I2C_Init+0x274>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d807      	bhi.n	8002850 <HAL_I2C_Init+0x84>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4a80      	ldr	r2, [pc, #512]	@ (8002a44 <HAL_I2C_Init+0x278>)
 8002844:	4293      	cmp	r3, r2
 8002846:	bf94      	ite	ls
 8002848:	2301      	movls	r3, #1
 800284a:	2300      	movhi	r3, #0
 800284c:	b2db      	uxtb	r3, r3
 800284e:	e006      	b.n	800285e <HAL_I2C_Init+0x92>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4a7d      	ldr	r2, [pc, #500]	@ (8002a48 <HAL_I2C_Init+0x27c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	bf94      	ite	ls
 8002858:	2301      	movls	r3, #1
 800285a:	2300      	movhi	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e0e7      	b.n	8002a36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	4a78      	ldr	r2, [pc, #480]	@ (8002a4c <HAL_I2C_Init+0x280>)
 800286a:	fba2 2303 	umull	r2, r3, r2, r3
 800286e:	0c9b      	lsrs	r3, r3, #18
 8002870:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	430a      	orrs	r2, r1
 8002884:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	4a6a      	ldr	r2, [pc, #424]	@ (8002a40 <HAL_I2C_Init+0x274>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d802      	bhi.n	80028a0 <HAL_I2C_Init+0xd4>
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	3301      	adds	r3, #1
 800289e:	e009      	b.n	80028b4 <HAL_I2C_Init+0xe8>
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028a6:	fb02 f303 	mul.w	r3, r2, r3
 80028aa:	4a69      	ldr	r2, [pc, #420]	@ (8002a50 <HAL_I2C_Init+0x284>)
 80028ac:	fba2 2303 	umull	r2, r3, r2, r3
 80028b0:	099b      	lsrs	r3, r3, #6
 80028b2:	3301      	adds	r3, #1
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6812      	ldr	r2, [r2, #0]
 80028b8:	430b      	orrs	r3, r1
 80028ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	69db      	ldr	r3, [r3, #28]
 80028c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80028c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	495c      	ldr	r1, [pc, #368]	@ (8002a40 <HAL_I2C_Init+0x274>)
 80028d0:	428b      	cmp	r3, r1
 80028d2:	d819      	bhi.n	8002908 <HAL_I2C_Init+0x13c>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	1e59      	subs	r1, r3, #1
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	fbb1 f3f3 	udiv	r3, r1, r3
 80028e2:	1c59      	adds	r1, r3, #1
 80028e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80028e8:	400b      	ands	r3, r1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00a      	beq.n	8002904 <HAL_I2C_Init+0x138>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1e59      	subs	r1, r3, #1
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80028fc:	3301      	adds	r3, #1
 80028fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002902:	e051      	b.n	80029a8 <HAL_I2C_Init+0x1dc>
 8002904:	2304      	movs	r3, #4
 8002906:	e04f      	b.n	80029a8 <HAL_I2C_Init+0x1dc>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d111      	bne.n	8002934 <HAL_I2C_Init+0x168>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	1e58      	subs	r0, r3, #1
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6859      	ldr	r1, [r3, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	440b      	add	r3, r1
 800291e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002922:	3301      	adds	r3, #1
 8002924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002928:	2b00      	cmp	r3, #0
 800292a:	bf0c      	ite	eq
 800292c:	2301      	moveq	r3, #1
 800292e:	2300      	movne	r3, #0
 8002930:	b2db      	uxtb	r3, r3
 8002932:	e012      	b.n	800295a <HAL_I2C_Init+0x18e>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	1e58      	subs	r0, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6859      	ldr	r1, [r3, #4]
 800293c:	460b      	mov	r3, r1
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	0099      	lsls	r1, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	fbb0 f3f3 	udiv	r3, r0, r3
 800294a:	3301      	adds	r3, #1
 800294c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002950:	2b00      	cmp	r3, #0
 8002952:	bf0c      	ite	eq
 8002954:	2301      	moveq	r3, #1
 8002956:	2300      	movne	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_I2C_Init+0x196>
 800295e:	2301      	movs	r3, #1
 8002960:	e022      	b.n	80029a8 <HAL_I2C_Init+0x1dc>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10e      	bne.n	8002988 <HAL_I2C_Init+0x1bc>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	1e58      	subs	r0, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6859      	ldr	r1, [r3, #4]
 8002972:	460b      	mov	r3, r1
 8002974:	005b      	lsls	r3, r3, #1
 8002976:	440b      	add	r3, r1
 8002978:	fbb0 f3f3 	udiv	r3, r0, r3
 800297c:	3301      	adds	r3, #1
 800297e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002982:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002986:	e00f      	b.n	80029a8 <HAL_I2C_Init+0x1dc>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1e58      	subs	r0, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6859      	ldr	r1, [r3, #4]
 8002990:	460b      	mov	r3, r1
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	0099      	lsls	r1, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	fbb0 f3f3 	udiv	r3, r0, r3
 800299e:	3301      	adds	r3, #1
 80029a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	6809      	ldr	r1, [r1, #0]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69da      	ldr	r2, [r3, #28]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a1b      	ldr	r3, [r3, #32]
 80029c2:	431a      	orrs	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	430a      	orrs	r2, r1
 80029ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80029d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6911      	ldr	r1, [r2, #16]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	68d2      	ldr	r2, [r2, #12]
 80029e2:	4311      	orrs	r1, r2
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	430b      	orrs	r3, r1
 80029ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695a      	ldr	r2, [r3, #20]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	431a      	orrs	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	430a      	orrs	r2, r1
 8002a06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	000186a0 	.word	0x000186a0
 8002a44:	001e847f 	.word	0x001e847f
 8002a48:	003d08ff 	.word	0x003d08ff
 8002a4c:	431bde83 	.word	0x431bde83
 8002a50:	10624dd3 	.word	0x10624dd3

08002a54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b20      	cmp	r3, #32
 8002a68:	d129      	bne.n	8002abe <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2224      	movs	r2, #36	@ 0x24
 8002a6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0201 	bic.w	r2, r2, #1
 8002a80:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f022 0210 	bic.w	r2, r2, #16
 8002a90:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	683a      	ldr	r2, [r7, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f042 0201 	orr.w	r2, r2, #1
 8002ab0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002aba:	2300      	movs	r3, #0
 8002abc:	e000      	b.n	8002ac0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002abe:	2302      	movs	r3, #2
  }
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	d12a      	bne.n	8002b3c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2224      	movs	r2, #36	@ 0x24
 8002aea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0201 	bic.w	r2, r2, #1
 8002afc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b04:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002b06:	89fb      	ldrh	r3, [r7, #14]
 8002b08:	f023 030f 	bic.w	r3, r3, #15
 8002b0c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	89fb      	ldrh	r3, [r7, #14]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	89fa      	ldrh	r2, [r7, #14]
 8002b1e:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	e000      	b.n	8002b3e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002b3c:	2302      	movs	r3, #2
  }
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
	...

08002b4c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e0bf      	b.n	8002cde <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d106      	bne.n	8002b78 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7fe ffa4 	bl	8001ac0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	699a      	ldr	r2, [r3, #24]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002b8e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6999      	ldr	r1, [r3, #24]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685a      	ldr	r2, [r3, #4]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002ba4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6899      	ldr	r1, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	4b4a      	ldr	r3, [pc, #296]	@ (8002ce8 <HAL_LTDC_Init+0x19c>)
 8002bc0:	400b      	ands	r3, r1
 8002bc2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	041b      	lsls	r3, r3, #16
 8002bca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6899      	ldr	r1, [r3, #8]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68d9      	ldr	r1, [r3, #12]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	4b3e      	ldr	r3, [pc, #248]	@ (8002ce8 <HAL_LTDC_Init+0x19c>)
 8002bee:	400b      	ands	r3, r1
 8002bf0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	041b      	lsls	r3, r3, #16
 8002bf8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	68d9      	ldr	r1, [r3, #12]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6a1a      	ldr	r2, [r3, #32]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6919      	ldr	r1, [r3, #16]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	4b33      	ldr	r3, [pc, #204]	@ (8002ce8 <HAL_LTDC_Init+0x19c>)
 8002c1c:	400b      	ands	r3, r1
 8002c1e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c24:	041b      	lsls	r3, r3, #16
 8002c26:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6919      	ldr	r1, [r3, #16]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	431a      	orrs	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6959      	ldr	r1, [r3, #20]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	4b27      	ldr	r3, [pc, #156]	@ (8002ce8 <HAL_LTDC_Init+0x19c>)
 8002c4a:	400b      	ands	r3, r1
 8002c4c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c52:	041b      	lsls	r3, r3, #16
 8002c54:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6959      	ldr	r1, [r3, #20]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c72:	021b      	lsls	r3, r3, #8
 8002c74:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002c7c:	041b      	lsls	r3, r3, #16
 8002c7e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 0206 	orr.w	r2, r2, #6
 8002cba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699a      	ldr	r2, [r3, #24]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	f000f800 	.word	0xf000f800

08002cec <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002cec:	b5b0      	push	{r4, r5, r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_LTDC_ConfigLayer+0x1a>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e02c      	b.n	8002d60 <HAL_LTDC_ConfigLayer+0x74>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2202      	movs	r2, #2
 8002d12:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002d16:	68fa      	ldr	r2, [r7, #12]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2134      	movs	r1, #52	@ 0x34
 8002d1c:	fb01 f303 	mul.w	r3, r1, r3
 8002d20:	4413      	add	r3, r2
 8002d22:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8002d26:	68bb      	ldr	r3, [r7, #8]
 8002d28:	4614      	mov	r4, r2
 8002d2a:	461d      	mov	r5, r3
 8002d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d38:	682b      	ldr	r3, [r5, #0]
 8002d3a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	68b9      	ldr	r1, [r7, #8]
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 f811 	bl	8002d68 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bdb0      	pop	{r4, r5, r7, pc}

08002d68 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b089      	sub	sp, #36	@ 0x24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	0c1b      	lsrs	r3, r3, #16
 8002d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d84:	4413      	add	r3, r2
 8002d86:	041b      	lsls	r3, r3, #16
 8002d88:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	461a      	mov	r2, r3
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	01db      	lsls	r3, r3, #7
 8002d94:	4413      	add	r3, r2
 8002d96:	3384      	adds	r3, #132	@ 0x84
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	6812      	ldr	r2, [r2, #0]
 8002d9e:	4611      	mov	r1, r2
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	01d2      	lsls	r2, r2, #7
 8002da4:	440a      	add	r2, r1
 8002da6:	3284      	adds	r2, #132	@ 0x84
 8002da8:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002dac:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	0c1b      	lsrs	r3, r3, #16
 8002dba:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002dbe:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002dc0:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	01db      	lsls	r3, r3, #7
 8002dcc:	440b      	add	r3, r1
 8002dce:	3384      	adds	r3, #132	@ 0x84
 8002dd0:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002dd6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002de6:	4413      	add	r3, r2
 8002de8:	041b      	lsls	r3, r3, #16
 8002dea:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	01db      	lsls	r3, r3, #7
 8002df6:	4413      	add	r3, r2
 8002df8:	3384      	adds	r3, #132	@ 0x84
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	6812      	ldr	r2, [r2, #0]
 8002e00:	4611      	mov	r1, r2
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	01d2      	lsls	r2, r2, #7
 8002e06:	440a      	add	r2, r1
 8002e08:	3284      	adds	r2, #132	@ 0x84
 8002e0a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002e0e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e1e:	4413      	add	r3, r2
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4619      	mov	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	01db      	lsls	r3, r3, #7
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3384      	adds	r3, #132	@ 0x84
 8002e30:	4619      	mov	r1, r3
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	01db      	lsls	r3, r3, #7
 8002e42:	4413      	add	r3, r2
 8002e44:	3384      	adds	r3, #132	@ 0x84
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	68fa      	ldr	r2, [r7, #12]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	4611      	mov	r1, r2
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	01d2      	lsls	r2, r2, #7
 8002e52:	440a      	add	r2, r1
 8002e54:	3284      	adds	r2, #132	@ 0x84
 8002e56:	f023 0307 	bic.w	r3, r3, #7
 8002e5a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	461a      	mov	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	01db      	lsls	r3, r3, #7
 8002e66:	4413      	add	r3, r2
 8002e68:	3384      	adds	r3, #132	@ 0x84
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002e78:	021b      	lsls	r3, r3, #8
 8002e7a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002e82:	041b      	lsls	r3, r3, #16
 8002e84:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	061b      	lsls	r3, r3, #24
 8002e8c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	461a      	mov	r2, r3
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	01db      	lsls	r3, r3, #7
 8002e98:	4413      	add	r3, r2
 8002e9a:	3384      	adds	r3, #132	@ 0x84
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	01db      	lsls	r3, r3, #7
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3384      	adds	r3, #132	@ 0x84
 8002eac:	461a      	mov	r2, r3
 8002eae:	2300      	movs	r3, #0
 8002eb0:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002eb8:	461a      	mov	r2, r3
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	01db      	lsls	r3, r3, #7
 8002ecc:	440b      	add	r3, r1
 8002ece:	3384      	adds	r3, #132	@ 0x84
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	461a      	mov	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	01db      	lsls	r3, r3, #7
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3384      	adds	r3, #132	@ 0x84
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	6812      	ldr	r2, [r2, #0]
 8002eec:	4611      	mov	r1, r2
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	01d2      	lsls	r2, r2, #7
 8002ef2:	440a      	add	r2, r1
 8002ef4:	3284      	adds	r2, #132	@ 0x84
 8002ef6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002efa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	01db      	lsls	r3, r3, #7
 8002f06:	4413      	add	r3, r2
 8002f08:	3384      	adds	r3, #132	@ 0x84
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	01db      	lsls	r3, r3, #7
 8002f1c:	4413      	add	r3, r2
 8002f1e:	3384      	adds	r3, #132	@ 0x84
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	6812      	ldr	r2, [r2, #0]
 8002f26:	4611      	mov	r1, r2
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	01d2      	lsls	r2, r2, #7
 8002f2c:	440a      	add	r2, r1
 8002f2e:	3284      	adds	r2, #132	@ 0x84
 8002f30:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002f34:	f023 0307 	bic.w	r3, r3, #7
 8002f38:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	69da      	ldr	r2, [r3, #28]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	68f9      	ldr	r1, [r7, #12]
 8002f44:	6809      	ldr	r1, [r1, #0]
 8002f46:	4608      	mov	r0, r1
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	01c9      	lsls	r1, r1, #7
 8002f4c:	4401      	add	r1, r0
 8002f4e:	3184      	adds	r1, #132	@ 0x84
 8002f50:	4313      	orrs	r3, r2
 8002f52:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	461a      	mov	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	01db      	lsls	r3, r3, #7
 8002f5e:	4413      	add	r3, r2
 8002f60:	3384      	adds	r3, #132	@ 0x84
 8002f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	461a      	mov	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	01db      	lsls	r3, r3, #7
 8002f6e:	4413      	add	r3, r2
 8002f70:	3384      	adds	r3, #132	@ 0x84
 8002f72:	461a      	mov	r2, r3
 8002f74:	2300      	movs	r3, #0
 8002f76:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	01db      	lsls	r3, r3, #7
 8002f82:	4413      	add	r3, r2
 8002f84:	3384      	adds	r3, #132	@ 0x84
 8002f86:	461a      	mov	r2, r3
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d102      	bne.n	8002f9c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8002f96:	2304      	movs	r3, #4
 8002f98:	61fb      	str	r3, [r7, #28]
 8002f9a:	e01b      	b.n	8002fd4 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d102      	bne.n	8002faa <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8002fa4:	2303      	movs	r3, #3
 8002fa6:	61fb      	str	r3, [r7, #28]
 8002fa8:	e014      	b.n	8002fd4 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d00b      	beq.n	8002fca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d007      	beq.n	8002fca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002fbe:	2b03      	cmp	r3, #3
 8002fc0:	d003      	beq.n	8002fca <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002fc6:	2b07      	cmp	r3, #7
 8002fc8:	d102      	bne.n	8002fd0 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	61fb      	str	r3, [r7, #28]
 8002fce:	e001      	b.n	8002fd4 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	461a      	mov	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	01db      	lsls	r3, r3, #7
 8002fde:	4413      	add	r3, r2
 8002fe0:	3384      	adds	r3, #132	@ 0x84
 8002fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	4611      	mov	r1, r2
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	01d2      	lsls	r2, r2, #7
 8002fee:	440a      	add	r2, r1
 8002ff0:	3284      	adds	r2, #132	@ 0x84
 8002ff2:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8002ff6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	fb02 f303 	mul.w	r3, r2, r3
 8003002:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	1acb      	subs	r3, r1, r3
 800300e:	69f9      	ldr	r1, [r7, #28]
 8003010:	fb01 f303 	mul.w	r3, r1, r3
 8003014:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003016:	68f9      	ldr	r1, [r7, #12]
 8003018:	6809      	ldr	r1, [r1, #0]
 800301a:	4608      	mov	r0, r1
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	01c9      	lsls	r1, r1, #7
 8003020:	4401      	add	r1, r0
 8003022:	3184      	adds	r1, #132	@ 0x84
 8003024:	4313      	orrs	r3, r2
 8003026:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	01db      	lsls	r3, r3, #7
 8003032:	4413      	add	r3, r2
 8003034:	3384      	adds	r3, #132	@ 0x84
 8003036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	6812      	ldr	r2, [r2, #0]
 800303c:	4611      	mov	r1, r2
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	01d2      	lsls	r2, r2, #7
 8003042:	440a      	add	r2, r1
 8003044:	3284      	adds	r2, #132	@ 0x84
 8003046:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800304a:	f023 0307 	bic.w	r3, r3, #7
 800304e:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	461a      	mov	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	01db      	lsls	r3, r3, #7
 800305a:	4413      	add	r3, r2
 800305c:	3384      	adds	r3, #132	@ 0x84
 800305e:	461a      	mov	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003064:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	01db      	lsls	r3, r3, #7
 8003070:	4413      	add	r3, r2
 8003072:	3384      	adds	r3, #132	@ 0x84
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	6812      	ldr	r2, [r2, #0]
 800307a:	4611      	mov	r1, r2
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	01d2      	lsls	r2, r2, #7
 8003080:	440a      	add	r2, r1
 8003082:	3284      	adds	r2, #132	@ 0x84
 8003084:	f043 0301 	orr.w	r3, r3, #1
 8003088:	6013      	str	r3, [r2, #0]
}
 800308a:	bf00      	nop
 800308c:	3724      	adds	r7, #36	@ 0x24
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
	...

08003098 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d101      	bne.n	80030aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e267      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d075      	beq.n	80031a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030b6:	4b88      	ldr	r3, [pc, #544]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f003 030c 	and.w	r3, r3, #12
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d00c      	beq.n	80030dc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030c2:	4b85      	ldr	r3, [pc, #532]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030ca:	2b08      	cmp	r3, #8
 80030cc:	d112      	bne.n	80030f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ce:	4b82      	ldr	r3, [pc, #520]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030da:	d10b      	bne.n	80030f4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030dc:	4b7e      	ldr	r3, [pc, #504]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d05b      	beq.n	80031a0 <HAL_RCC_OscConfig+0x108>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d157      	bne.n	80031a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e242      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030fc:	d106      	bne.n	800310c <HAL_RCC_OscConfig+0x74>
 80030fe:	4b76      	ldr	r3, [pc, #472]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a75      	ldr	r2, [pc, #468]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003108:	6013      	str	r3, [r2, #0]
 800310a:	e01d      	b.n	8003148 <HAL_RCC_OscConfig+0xb0>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0x98>
 8003116:	4b70      	ldr	r3, [pc, #448]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a6f      	ldr	r2, [pc, #444]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 800311c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	4b6d      	ldr	r3, [pc, #436]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a6c      	ldr	r2, [pc, #432]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003128:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	e00b      	b.n	8003148 <HAL_RCC_OscConfig+0xb0>
 8003130:	4b69      	ldr	r3, [pc, #420]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a68      	ldr	r2, [pc, #416]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003136:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	4b66      	ldr	r3, [pc, #408]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a65      	ldr	r2, [pc, #404]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003142:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003146:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d013      	beq.n	8003178 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003150:	f7ff f840 	bl	80021d4 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003158:	f7ff f83c 	bl	80021d4 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b64      	cmp	r3, #100	@ 0x64
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e207      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316a:	4b5b      	ldr	r3, [pc, #364]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0xc0>
 8003176:	e014      	b.n	80031a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003178:	f7ff f82c 	bl	80021d4 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003180:	f7ff f828 	bl	80021d4 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b64      	cmp	r3, #100	@ 0x64
 800318c:	d901      	bls.n	8003192 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e1f3      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003192:	4b51      	ldr	r3, [pc, #324]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d1f0      	bne.n	8003180 <HAL_RCC_OscConfig+0xe8>
 800319e:	e000      	b.n	80031a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d063      	beq.n	8003276 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031ae:	4b4a      	ldr	r3, [pc, #296]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 030c 	and.w	r3, r3, #12
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d00b      	beq.n	80031d2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031ba:	4b47      	ldr	r3, [pc, #284]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031c2:	2b08      	cmp	r3, #8
 80031c4:	d11c      	bne.n	8003200 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031c6:	4b44      	ldr	r3, [pc, #272]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d116      	bne.n	8003200 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031d2:	4b41      	ldr	r3, [pc, #260]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d005      	beq.n	80031ea <HAL_RCC_OscConfig+0x152>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d001      	beq.n	80031ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e1c7      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ea:	4b3b      	ldr	r3, [pc, #236]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	4937      	ldr	r1, [pc, #220]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031fe:	e03a      	b.n	8003276 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d020      	beq.n	800324a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003208:	4b34      	ldr	r3, [pc, #208]	@ (80032dc <HAL_RCC_OscConfig+0x244>)
 800320a:	2201      	movs	r2, #1
 800320c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320e:	f7fe ffe1 	bl	80021d4 <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003216:	f7fe ffdd 	bl	80021d4 <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e1a8      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003228:	4b2b      	ldr	r3, [pc, #172]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d0f0      	beq.n	8003216 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003234:	4b28      	ldr	r3, [pc, #160]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	00db      	lsls	r3, r3, #3
 8003242:	4925      	ldr	r1, [pc, #148]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 8003244:	4313      	orrs	r3, r2
 8003246:	600b      	str	r3, [r1, #0]
 8003248:	e015      	b.n	8003276 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800324a:	4b24      	ldr	r3, [pc, #144]	@ (80032dc <HAL_RCC_OscConfig+0x244>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7fe ffc0 	bl	80021d4 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003258:	f7fe ffbc 	bl	80021d4 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e187      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326a:	4b1b      	ldr	r3, [pc, #108]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0308 	and.w	r3, r3, #8
 800327e:	2b00      	cmp	r3, #0
 8003280:	d036      	beq.n	80032f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d016      	beq.n	80032b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800328a:	4b15      	ldr	r3, [pc, #84]	@ (80032e0 <HAL_RCC_OscConfig+0x248>)
 800328c:	2201      	movs	r2, #1
 800328e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003290:	f7fe ffa0 	bl	80021d4 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003298:	f7fe ff9c 	bl	80021d4 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e167      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032aa:	4b0b      	ldr	r3, [pc, #44]	@ (80032d8 <HAL_RCC_OscConfig+0x240>)
 80032ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f0      	beq.n	8003298 <HAL_RCC_OscConfig+0x200>
 80032b6:	e01b      	b.n	80032f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b8:	4b09      	ldr	r3, [pc, #36]	@ (80032e0 <HAL_RCC_OscConfig+0x248>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032be:	f7fe ff89 	bl	80021d4 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c4:	e00e      	b.n	80032e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c6:	f7fe ff85 	bl	80021d4 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d907      	bls.n	80032e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e150      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
 80032d8:	40023800 	.word	0x40023800
 80032dc:	42470000 	.word	0x42470000
 80032e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032e4:	4b88      	ldr	r3, [pc, #544]	@ (8003508 <HAL_RCC_OscConfig+0x470>)
 80032e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1ea      	bne.n	80032c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0304 	and.w	r3, r3, #4
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 8097 	beq.w	800342c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032fe:	2300      	movs	r3, #0
 8003300:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003302:	4b81      	ldr	r3, [pc, #516]	@ (8003508 <HAL_RCC_OscConfig+0x470>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10f      	bne.n	800332e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800330e:	2300      	movs	r3, #0
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	4b7d      	ldr	r3, [pc, #500]	@ (8003508 <HAL_RCC_OscConfig+0x470>)
 8003314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003316:	4a7c      	ldr	r2, [pc, #496]	@ (8003508 <HAL_RCC_OscConfig+0x470>)
 8003318:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800331c:	6413      	str	r3, [r2, #64]	@ 0x40
 800331e:	4b7a      	ldr	r3, [pc, #488]	@ (8003508 <HAL_RCC_OscConfig+0x470>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003326:	60bb      	str	r3, [r7, #8]
 8003328:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800332a:	2301      	movs	r3, #1
 800332c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800332e:	4b77      	ldr	r3, [pc, #476]	@ (800350c <HAL_RCC_OscConfig+0x474>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003336:	2b00      	cmp	r3, #0
 8003338:	d118      	bne.n	800336c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800333a:	4b74      	ldr	r3, [pc, #464]	@ (800350c <HAL_RCC_OscConfig+0x474>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a73      	ldr	r2, [pc, #460]	@ (800350c <HAL_RCC_OscConfig+0x474>)
 8003340:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003344:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003346:	f7fe ff45 	bl	80021d4 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334e:	f7fe ff41 	bl	80021d4 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e10c      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003360:	4b6a      	ldr	r3, [pc, #424]	@ (800350c <HAL_RCC_OscConfig+0x474>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b01      	cmp	r3, #1
 8003372:	d106      	bne.n	8003382 <HAL_RCC_OscConfig+0x2ea>
 8003374:	4b64      	ldr	r3, [pc, #400]	@ (8003508 <HAL_RCC_OscConfig+0x470>)
 8003376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003378:	4a63      	ldr	r2, [pc, #396]	@ (8003508 <HAL_RCC_OscConfig+0x470>)
 800337a:	f043 0301 	orr.w	r3, r3, #1
 800337e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003380:	e01c      	b.n	80033bc <HAL_RCC_OscConfig+0x324>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2b05      	cmp	r3, #5
 8003388:	d10c      	bne.n	80033a4 <HAL_RCC_OscConfig+0x30c>
 800338a:	4b5f      	ldr	r3, [pc, #380]	@ (8003508 <HAL_RCC_OscConfig+0x470>)
 800338c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800338e:	4a5e      	ldr	r2, [pc, #376]	@ (8003508 <HAL_RCC_OscConfig+0x470>)
 8003390:	f043 0304 	orr.w	r3, r3, #4
 8003394:	6713      	str	r3, [r2, #112]	@ 0x70
 8003396:	4b5c      	ldr	r3, [pc, #368]	@ (8003508 <HAL_RCC_OscConfig+0x470>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800339a:	4a5b      	ldr	r2, [pc, #364]	@ (8003508 <HAL_RCC_OscConfig+0x470>)
 800339c:	f043 0301 	orr.w	r3, r3, #1
 80033a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80033a2:	e00b      	b.n	80033bc <HAL_RCC_OscConfig+0x324>
 80033a4:	4b58      	ldr	r3, [pc, #352]	@ (8003508 <HAL_RCC_OscConfig+0x470>)
 80033a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a8:	4a57      	ldr	r2, [pc, #348]	@ (8003508 <HAL_RCC_OscConfig+0x470>)
 80033aa:	f023 0301 	bic.w	r3, r3, #1
 80033ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80033b0:	4b55      	ldr	r3, [pc, #340]	@ (8003508 <HAL_RCC_OscConfig+0x470>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b4:	4a54      	ldr	r2, [pc, #336]	@ (8003508 <HAL_RCC_OscConfig+0x470>)
 80033b6:	f023 0304 	bic.w	r3, r3, #4
 80033ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d015      	beq.n	80033f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033c4:	f7fe ff06 	bl	80021d4 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ca:	e00a      	b.n	80033e2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033cc:	f7fe ff02 	bl	80021d4 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033da:	4293      	cmp	r3, r2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e0cb      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e2:	4b49      	ldr	r3, [pc, #292]	@ (8003508 <HAL_RCC_OscConfig+0x470>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0ee      	beq.n	80033cc <HAL_RCC_OscConfig+0x334>
 80033ee:	e014      	b.n	800341a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033f0:	f7fe fef0 	bl	80021d4 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033f6:	e00a      	b.n	800340e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033f8:	f7fe feec 	bl	80021d4 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003406:	4293      	cmp	r3, r2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e0b5      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800340e:	4b3e      	ldr	r3, [pc, #248]	@ (8003508 <HAL_RCC_OscConfig+0x470>)
 8003410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1ee      	bne.n	80033f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800341a:	7dfb      	ldrb	r3, [r7, #23]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d105      	bne.n	800342c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003420:	4b39      	ldr	r3, [pc, #228]	@ (8003508 <HAL_RCC_OscConfig+0x470>)
 8003422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003424:	4a38      	ldr	r2, [pc, #224]	@ (8003508 <HAL_RCC_OscConfig+0x470>)
 8003426:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800342a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80a1 	beq.w	8003578 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003436:	4b34      	ldr	r3, [pc, #208]	@ (8003508 <HAL_RCC_OscConfig+0x470>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 030c 	and.w	r3, r3, #12
 800343e:	2b08      	cmp	r3, #8
 8003440:	d05c      	beq.n	80034fc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d141      	bne.n	80034ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344a:	4b31      	ldr	r3, [pc, #196]	@ (8003510 <HAL_RCC_OscConfig+0x478>)
 800344c:	2200      	movs	r2, #0
 800344e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003450:	f7fe fec0 	bl	80021d4 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003458:	f7fe febc 	bl	80021d4 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e087      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346a:	4b27      	ldr	r3, [pc, #156]	@ (8003508 <HAL_RCC_OscConfig+0x470>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f0      	bne.n	8003458 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69da      	ldr	r2, [r3, #28]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003484:	019b      	lsls	r3, r3, #6
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800348c:	085b      	lsrs	r3, r3, #1
 800348e:	3b01      	subs	r3, #1
 8003490:	041b      	lsls	r3, r3, #16
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003498:	061b      	lsls	r3, r3, #24
 800349a:	491b      	ldr	r1, [pc, #108]	@ (8003508 <HAL_RCC_OscConfig+0x470>)
 800349c:	4313      	orrs	r3, r2
 800349e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003510 <HAL_RCC_OscConfig+0x478>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a6:	f7fe fe95 	bl	80021d4 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ae:	f7fe fe91 	bl	80021d4 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e05c      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c0:	4b11      	ldr	r3, [pc, #68]	@ (8003508 <HAL_RCC_OscConfig+0x470>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0f0      	beq.n	80034ae <HAL_RCC_OscConfig+0x416>
 80034cc:	e054      	b.n	8003578 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ce:	4b10      	ldr	r3, [pc, #64]	@ (8003510 <HAL_RCC_OscConfig+0x478>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d4:	f7fe fe7e 	bl	80021d4 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034dc:	f7fe fe7a 	bl	80021d4 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e045      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ee:	4b06      	ldr	r3, [pc, #24]	@ (8003508 <HAL_RCC_OscConfig+0x470>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0x444>
 80034fa:	e03d      	b.n	8003578 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d107      	bne.n	8003514 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e038      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
 8003508:	40023800 	.word	0x40023800
 800350c:	40007000 	.word	0x40007000
 8003510:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003514:	4b1b      	ldr	r3, [pc, #108]	@ (8003584 <HAL_RCC_OscConfig+0x4ec>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d028      	beq.n	8003574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800352c:	429a      	cmp	r2, r3
 800352e:	d121      	bne.n	8003574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353a:	429a      	cmp	r2, r3
 800353c:	d11a      	bne.n	8003574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003544:	4013      	ands	r3, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800354a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800354c:	4293      	cmp	r3, r2
 800354e:	d111      	bne.n	8003574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800355a:	085b      	lsrs	r3, r3, #1
 800355c:	3b01      	subs	r3, #1
 800355e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003560:	429a      	cmp	r2, r3
 8003562:	d107      	bne.n	8003574 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d001      	beq.n	8003578 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e000      	b.n	800357a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003578:	2300      	movs	r3, #0
}
 800357a:	4618      	mov	r0, r3
 800357c:	3718      	adds	r7, #24
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40023800 	.word	0x40023800

08003588 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e0cc      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800359c:	4b68      	ldr	r3, [pc, #416]	@ (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 030f 	and.w	r3, r3, #15
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d90c      	bls.n	80035c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035aa:	4b65      	ldr	r3, [pc, #404]	@ (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b2:	4b63      	ldr	r3, [pc, #396]	@ (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e0b8      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d020      	beq.n	8003612 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d005      	beq.n	80035e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035dc:	4b59      	ldr	r3, [pc, #356]	@ (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	4a58      	ldr	r2, [pc, #352]	@ (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80035e2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d005      	beq.n	8003600 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035f4:	4b53      	ldr	r3, [pc, #332]	@ (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	4a52      	ldr	r2, [pc, #328]	@ (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80035fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003600:	4b50      	ldr	r3, [pc, #320]	@ (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	494d      	ldr	r1, [pc, #308]	@ (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	4313      	orrs	r3, r2
 8003610:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0301 	and.w	r3, r3, #1
 800361a:	2b00      	cmp	r3, #0
 800361c:	d044      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d107      	bne.n	8003636 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	4b47      	ldr	r3, [pc, #284]	@ (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d119      	bne.n	8003666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e07f      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d003      	beq.n	8003646 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003642:	2b03      	cmp	r3, #3
 8003644:	d107      	bne.n	8003656 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003646:	4b3f      	ldr	r3, [pc, #252]	@ (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800364e:	2b00      	cmp	r3, #0
 8003650:	d109      	bne.n	8003666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e06f      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003656:	4b3b      	ldr	r3, [pc, #236]	@ (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0302 	and.w	r3, r3, #2
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e067      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003666:	4b37      	ldr	r3, [pc, #220]	@ (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f023 0203 	bic.w	r2, r3, #3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	4934      	ldr	r1, [pc, #208]	@ (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	4313      	orrs	r3, r2
 8003676:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003678:	f7fe fdac 	bl	80021d4 <HAL_GetTick>
 800367c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800367e:	e00a      	b.n	8003696 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003680:	f7fe fda8 	bl	80021d4 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800368e:	4293      	cmp	r3, r2
 8003690:	d901      	bls.n	8003696 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e04f      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003696:	4b2b      	ldr	r3, [pc, #172]	@ (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	f003 020c 	and.w	r2, r3, #12
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d1eb      	bne.n	8003680 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036a8:	4b25      	ldr	r3, [pc, #148]	@ (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 030f 	and.w	r3, r3, #15
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d20c      	bcs.n	80036d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b6:	4b22      	ldr	r3, [pc, #136]	@ (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036be:	4b20      	ldr	r3, [pc, #128]	@ (8003740 <HAL_RCC_ClockConfig+0x1b8>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	d001      	beq.n	80036d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e032      	b.n	8003736 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0304 	and.w	r3, r3, #4
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d008      	beq.n	80036ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036dc:	4b19      	ldr	r3, [pc, #100]	@ (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	689b      	ldr	r3, [r3, #8]
 80036e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	4916      	ldr	r1, [pc, #88]	@ (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	4313      	orrs	r3, r2
 80036ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036fa:	4b12      	ldr	r3, [pc, #72]	@ (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	691b      	ldr	r3, [r3, #16]
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	490e      	ldr	r1, [pc, #56]	@ (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800370e:	f000 f821 	bl	8003754 <HAL_RCC_GetSysClockFreq>
 8003712:	4602      	mov	r2, r0
 8003714:	4b0b      	ldr	r3, [pc, #44]	@ (8003744 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	091b      	lsrs	r3, r3, #4
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	490a      	ldr	r1, [pc, #40]	@ (8003748 <HAL_RCC_ClockConfig+0x1c0>)
 8003720:	5ccb      	ldrb	r3, [r1, r3]
 8003722:	fa22 f303 	lsr.w	r3, r2, r3
 8003726:	4a09      	ldr	r2, [pc, #36]	@ (800374c <HAL_RCC_ClockConfig+0x1c4>)
 8003728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800372a:	4b09      	ldr	r3, [pc, #36]	@ (8003750 <HAL_RCC_ClockConfig+0x1c8>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f7fe fd0c 	bl	800214c <HAL_InitTick>

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40023c00 	.word	0x40023c00
 8003744:	40023800 	.word	0x40023800
 8003748:	080057d4 	.word	0x080057d4
 800374c:	20000000 	.word	0x20000000
 8003750:	20000004 	.word	0x20000004

08003754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003754:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003758:	b094      	sub	sp, #80	@ 0x50
 800375a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800375c:	2300      	movs	r3, #0
 800375e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800376c:	4b79      	ldr	r3, [pc, #484]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x200>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 030c 	and.w	r3, r3, #12
 8003774:	2b08      	cmp	r3, #8
 8003776:	d00d      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0x40>
 8003778:	2b08      	cmp	r3, #8
 800377a:	f200 80e1 	bhi.w	8003940 <HAL_RCC_GetSysClockFreq+0x1ec>
 800377e:	2b00      	cmp	r3, #0
 8003780:	d002      	beq.n	8003788 <HAL_RCC_GetSysClockFreq+0x34>
 8003782:	2b04      	cmp	r3, #4
 8003784:	d003      	beq.n	800378e <HAL_RCC_GetSysClockFreq+0x3a>
 8003786:	e0db      	b.n	8003940 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003788:	4b73      	ldr	r3, [pc, #460]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x204>)
 800378a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800378c:	e0db      	b.n	8003946 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800378e:	4b73      	ldr	r3, [pc, #460]	@ (800395c <HAL_RCC_GetSysClockFreq+0x208>)
 8003790:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003792:	e0d8      	b.n	8003946 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003794:	4b6f      	ldr	r3, [pc, #444]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x200>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800379c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800379e:	4b6d      	ldr	r3, [pc, #436]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x200>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d063      	beq.n	8003872 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037aa:	4b6a      	ldr	r3, [pc, #424]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	099b      	lsrs	r3, r3, #6
 80037b0:	2200      	movs	r2, #0
 80037b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80037b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80037be:	2300      	movs	r3, #0
 80037c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80037c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80037c6:	4622      	mov	r2, r4
 80037c8:	462b      	mov	r3, r5
 80037ca:	f04f 0000 	mov.w	r0, #0
 80037ce:	f04f 0100 	mov.w	r1, #0
 80037d2:	0159      	lsls	r1, r3, #5
 80037d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037d8:	0150      	lsls	r0, r2, #5
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	4621      	mov	r1, r4
 80037e0:	1a51      	subs	r1, r2, r1
 80037e2:	6139      	str	r1, [r7, #16]
 80037e4:	4629      	mov	r1, r5
 80037e6:	eb63 0301 	sbc.w	r3, r3, r1
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037f8:	4659      	mov	r1, fp
 80037fa:	018b      	lsls	r3, r1, #6
 80037fc:	4651      	mov	r1, sl
 80037fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003802:	4651      	mov	r1, sl
 8003804:	018a      	lsls	r2, r1, #6
 8003806:	4651      	mov	r1, sl
 8003808:	ebb2 0801 	subs.w	r8, r2, r1
 800380c:	4659      	mov	r1, fp
 800380e:	eb63 0901 	sbc.w	r9, r3, r1
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800381e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003822:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003826:	4690      	mov	r8, r2
 8003828:	4699      	mov	r9, r3
 800382a:	4623      	mov	r3, r4
 800382c:	eb18 0303 	adds.w	r3, r8, r3
 8003830:	60bb      	str	r3, [r7, #8]
 8003832:	462b      	mov	r3, r5
 8003834:	eb49 0303 	adc.w	r3, r9, r3
 8003838:	60fb      	str	r3, [r7, #12]
 800383a:	f04f 0200 	mov.w	r2, #0
 800383e:	f04f 0300 	mov.w	r3, #0
 8003842:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003846:	4629      	mov	r1, r5
 8003848:	024b      	lsls	r3, r1, #9
 800384a:	4621      	mov	r1, r4
 800384c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003850:	4621      	mov	r1, r4
 8003852:	024a      	lsls	r2, r1, #9
 8003854:	4610      	mov	r0, r2
 8003856:	4619      	mov	r1, r3
 8003858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800385a:	2200      	movs	r2, #0
 800385c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800385e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003860:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003864:	f7fc fd14 	bl	8000290 <__aeabi_uldivmod>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4613      	mov	r3, r2
 800386e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003870:	e058      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003872:	4b38      	ldr	r3, [pc, #224]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x200>)
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	099b      	lsrs	r3, r3, #6
 8003878:	2200      	movs	r2, #0
 800387a:	4618      	mov	r0, r3
 800387c:	4611      	mov	r1, r2
 800387e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003882:	623b      	str	r3, [r7, #32]
 8003884:	2300      	movs	r3, #0
 8003886:	627b      	str	r3, [r7, #36]	@ 0x24
 8003888:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800388c:	4642      	mov	r2, r8
 800388e:	464b      	mov	r3, r9
 8003890:	f04f 0000 	mov.w	r0, #0
 8003894:	f04f 0100 	mov.w	r1, #0
 8003898:	0159      	lsls	r1, r3, #5
 800389a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800389e:	0150      	lsls	r0, r2, #5
 80038a0:	4602      	mov	r2, r0
 80038a2:	460b      	mov	r3, r1
 80038a4:	4641      	mov	r1, r8
 80038a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80038aa:	4649      	mov	r1, r9
 80038ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80038b0:	f04f 0200 	mov.w	r2, #0
 80038b4:	f04f 0300 	mov.w	r3, #0
 80038b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038c4:	ebb2 040a 	subs.w	r4, r2, sl
 80038c8:	eb63 050b 	sbc.w	r5, r3, fp
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	00eb      	lsls	r3, r5, #3
 80038d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038da:	00e2      	lsls	r2, r4, #3
 80038dc:	4614      	mov	r4, r2
 80038de:	461d      	mov	r5, r3
 80038e0:	4643      	mov	r3, r8
 80038e2:	18e3      	adds	r3, r4, r3
 80038e4:	603b      	str	r3, [r7, #0]
 80038e6:	464b      	mov	r3, r9
 80038e8:	eb45 0303 	adc.w	r3, r5, r3
 80038ec:	607b      	str	r3, [r7, #4]
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038fa:	4629      	mov	r1, r5
 80038fc:	028b      	lsls	r3, r1, #10
 80038fe:	4621      	mov	r1, r4
 8003900:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003904:	4621      	mov	r1, r4
 8003906:	028a      	lsls	r2, r1, #10
 8003908:	4610      	mov	r0, r2
 800390a:	4619      	mov	r1, r3
 800390c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800390e:	2200      	movs	r2, #0
 8003910:	61bb      	str	r3, [r7, #24]
 8003912:	61fa      	str	r2, [r7, #28]
 8003914:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003918:	f7fc fcba 	bl	8000290 <__aeabi_uldivmod>
 800391c:	4602      	mov	r2, r0
 800391e:	460b      	mov	r3, r1
 8003920:	4613      	mov	r3, r2
 8003922:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003924:	4b0b      	ldr	r3, [pc, #44]	@ (8003954 <HAL_RCC_GetSysClockFreq+0x200>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	0c1b      	lsrs	r3, r3, #16
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	3301      	adds	r3, #1
 8003930:	005b      	lsls	r3, r3, #1
 8003932:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003934:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003936:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003938:	fbb2 f3f3 	udiv	r3, r2, r3
 800393c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800393e:	e002      	b.n	8003946 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003940:	4b05      	ldr	r3, [pc, #20]	@ (8003958 <HAL_RCC_GetSysClockFreq+0x204>)
 8003942:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003944:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003946:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003948:	4618      	mov	r0, r3
 800394a:	3750      	adds	r7, #80	@ 0x50
 800394c:	46bd      	mov	sp, r7
 800394e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003952:	bf00      	nop
 8003954:	40023800 	.word	0x40023800
 8003958:	00f42400 	.word	0x00f42400
 800395c:	007a1200 	.word	0x007a1200

08003960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003964:	4b03      	ldr	r3, [pc, #12]	@ (8003974 <HAL_RCC_GetHCLKFreq+0x14>)
 8003966:	681b      	ldr	r3, [r3, #0]
}
 8003968:	4618      	mov	r0, r3
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20000000 	.word	0x20000000

08003978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800397c:	f7ff fff0 	bl	8003960 <HAL_RCC_GetHCLKFreq>
 8003980:	4602      	mov	r2, r0
 8003982:	4b05      	ldr	r3, [pc, #20]	@ (8003998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	0a9b      	lsrs	r3, r3, #10
 8003988:	f003 0307 	and.w	r3, r3, #7
 800398c:	4903      	ldr	r1, [pc, #12]	@ (800399c <HAL_RCC_GetPCLK1Freq+0x24>)
 800398e:	5ccb      	ldrb	r3, [r1, r3]
 8003990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003994:	4618      	mov	r0, r3
 8003996:	bd80      	pop	{r7, pc}
 8003998:	40023800 	.word	0x40023800
 800399c:	080057e4 	.word	0x080057e4

080039a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b086      	sub	sp, #24
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80039ac:	2300      	movs	r3, #0
 80039ae:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10b      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d105      	bne.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d075      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039d4:	4b91      	ldr	r3, [pc, #580]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039da:	f7fe fbfb 	bl	80021d4 <HAL_GetTick>
 80039de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039e0:	e008      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039e2:	f7fe fbf7 	bl	80021d4 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e189      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039f4:	4b8a      	ldr	r3, [pc, #552]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1f0      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d009      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	019a      	lsls	r2, r3, #6
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	071b      	lsls	r3, r3, #28
 8003a18:	4981      	ldr	r1, [pc, #516]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d01f      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a2c:	4b7c      	ldr	r3, [pc, #496]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a32:	0f1b      	lsrs	r3, r3, #28
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	019a      	lsls	r2, r3, #6
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	061b      	lsls	r3, r3, #24
 8003a46:	431a      	orrs	r2, r3
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	071b      	lsls	r3, r3, #28
 8003a4c:	4974      	ldr	r1, [pc, #464]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a54:	4b72      	ldr	r3, [pc, #456]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a5a:	f023 021f 	bic.w	r2, r3, #31
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	496e      	ldr	r1, [pc, #440]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00d      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	019a      	lsls	r2, r3, #6
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	061b      	lsls	r3, r3, #24
 8003a84:	431a      	orrs	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	071b      	lsls	r3, r3, #28
 8003a8c:	4964      	ldr	r1, [pc, #400]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a94:	4b61      	ldr	r3, [pc, #388]	@ (8003c1c <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003a96:	2201      	movs	r2, #1
 8003a98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a9a:	f7fe fb9b 	bl	80021d4 <HAL_GetTick>
 8003a9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003aa0:	e008      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003aa2:	f7fe fb97 	bl	80021d4 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d901      	bls.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e129      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ab4:	4b5a      	ldr	r3, [pc, #360]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d0f0      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0304 	and.w	r3, r3, #4
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d105      	bne.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d079      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ad8:	4b52      	ldr	r3, [pc, #328]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ade:	f7fe fb79 	bl	80021d4 <HAL_GetTick>
 8003ae2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ae6:	f7fe fb75 	bl	80021d4 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e107      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003af8:	4b49      	ldr	r3, [pc, #292]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b04:	d0ef      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0304 	and.w	r3, r3, #4
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d020      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b12:	4b43      	ldr	r3, [pc, #268]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b18:	0f1b      	lsrs	r3, r3, #28
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	019a      	lsls	r2, r3, #6
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	061b      	lsls	r3, r3, #24
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	071b      	lsls	r3, r3, #28
 8003b32:	493b      	ldr	r1, [pc, #236]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b3a:	4b39      	ldr	r3, [pc, #228]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b40:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	021b      	lsls	r3, r3, #8
 8003b4c:	4934      	ldr	r1, [pc, #208]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d01e      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b60:	4b2f      	ldr	r3, [pc, #188]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b66:	0e1b      	lsrs	r3, r3, #24
 8003b68:	f003 030f 	and.w	r3, r3, #15
 8003b6c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	019a      	lsls	r2, r3, #6
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	061b      	lsls	r3, r3, #24
 8003b78:	431a      	orrs	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	071b      	lsls	r3, r3, #28
 8003b80:	4927      	ldr	r1, [pc, #156]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b88:	4b25      	ldr	r3, [pc, #148]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b8e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b96:	4922      	ldr	r1, [pc, #136]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003b9e:	4b21      	ldr	r3, [pc, #132]	@ (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ba4:	f7fe fb16 	bl	80021d4 <HAL_GetTick>
 8003ba8:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003baa:	e008      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bac:	f7fe fb12 	bl	80021d4 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e0a4      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bbe:	4b18      	ldr	r3, [pc, #96]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bca:	d1ef      	bne.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0320 	and.w	r3, r3, #32
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	f000 808b 	beq.w	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
 8003bde:	4b10      	ldr	r3, [pc, #64]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be2:	4a0f      	ldr	r2, [pc, #60]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bea:	4b0d      	ldr	r3, [pc, #52]	@ (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bf2:	60fb      	str	r3, [r7, #12]
 8003bf4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a0b      	ldr	r2, [pc, #44]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003bfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c00:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c02:	f7fe fae7 	bl	80021d4 <HAL_GetTick>
 8003c06:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003c08:	e010      	b.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c0a:	f7fe fae3 	bl	80021d4 <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d909      	bls.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003c18:	2303      	movs	r3, #3
 8003c1a:	e075      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003c1c:	42470068 	.word	0x42470068
 8003c20:	40023800 	.word	0x40023800
 8003c24:	42470070 	.word	0x42470070
 8003c28:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003c2c:	4b38      	ldr	r3, [pc, #224]	@ (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0e8      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c38:	4b36      	ldr	r3, [pc, #216]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c40:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d02f      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d028      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c56:	4b2f      	ldr	r3, [pc, #188]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c5e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c60:	4b2d      	ldr	r3, [pc, #180]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003c62:	2201      	movs	r2, #1
 8003c64:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c66:	4b2c      	ldr	r3, [pc, #176]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c6c:	4a29      	ldr	r2, [pc, #164]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c72:	4b28      	ldr	r3, [pc, #160]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d114      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c7e:	f7fe faa9 	bl	80021d4 <HAL_GetTick>
 8003c82:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c84:	e00a      	b.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c86:	f7fe faa5 	bl	80021d4 <HAL_GetTick>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e035      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca0:	f003 0302 	and.w	r3, r3, #2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0ee      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cb0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cb4:	d10d      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003cb6:	4b17      	ldr	r3, [pc, #92]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003cc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cca:	4912      	ldr	r1, [pc, #72]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	608b      	str	r3, [r1, #8]
 8003cd0:	e005      	b.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003cd2:	4b10      	ldr	r3, [pc, #64]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	4a0f      	ldr	r2, [pc, #60]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003cd8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003cdc:	6093      	str	r3, [r2, #8]
 8003cde:	4b0d      	ldr	r3, [pc, #52]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ce0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cea:	490a      	ldr	r1, [pc, #40]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0310 	and.w	r3, r3, #16
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d004      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8003d02:	4b06      	ldr	r3, [pc, #24]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003d04:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40007000 	.word	0x40007000
 8003d14:	40023800 	.word	0x40023800
 8003d18:	42470e40 	.word	0x42470e40
 8003d1c:	424711e0 	.word	0x424711e0

08003d20 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e01c      	b.n	8003d6c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	795b      	ldrb	r3, [r3, #5]
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d105      	bne.n	8003d48 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fd ffe4 	bl	8001d10 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f042 0204 	orr.w	r2, r2, #4
 8003d5c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	791b      	ldrb	r3, [r3, #4]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d101      	bne.n	8003d8e <HAL_RNG_GenerateRandomNumber+0x1a>
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e044      	b.n	8003e18 <HAL_RNG_GenerateRandomNumber+0xa4>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	795b      	ldrb	r3, [r3, #5]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d133      	bne.n	8003e06 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2202      	movs	r2, #2
 8003da2:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003da4:	f7fe fa16 	bl	80021d4 <HAL_GetTick>
 8003da8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003daa:	e018      	b.n	8003dde <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003dac:	f7fe fa12 	bl	80021d4 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d911      	bls.n	8003dde <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d00a      	beq.n	8003dde <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e01c      	b.n	8003e18 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d1df      	bne.n	8003dac <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68da      	ldr	r2, [r3, #12]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	715a      	strb	r2, [r3, #5]
 8003e04:	e004      	b.n	8003e10 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2204      	movs	r2, #4
 8003e0a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	711a      	strb	r2, [r3, #4]

  return status;
 8003e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e07b      	b.n	8003f2a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d108      	bne.n	8003e4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e42:	d009      	beq.n	8003e58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	61da      	str	r2, [r3, #28]
 8003e4a:	e005      	b.n	8003e58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f7fd ff6e 	bl	8001d54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a1b      	ldr	r3, [r3, #32]
 8003ed8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003edc:	ea42 0103 	orr.w	r1, r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	0c1b      	lsrs	r3, r3, #16
 8003ef6:	f003 0104 	and.w	r1, r3, #4
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efe:	f003 0210 	and.w	r2, r3, #16
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69da      	ldr	r2, [r3, #28]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3708      	adds	r7, #8
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b082      	sub	sp, #8
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e041      	b.n	8003fc8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d106      	bne.n	8003f5e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7fd ff43 	bl	8001de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2202      	movs	r2, #2
 8003f62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	3304      	adds	r3, #4
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4610      	mov	r0, r2
 8003f72:	f000 fa0d 	bl	8004390 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2201      	movs	r2, #1
 8003f7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d020      	beq.n	8004034 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d01b      	beq.n	8004034 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f06f 0202 	mvn.w	r2, #2
 8004004:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	2b00      	cmp	r3, #0
 8004018:	d003      	beq.n	8004022 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f999 	bl	8004352 <HAL_TIM_IC_CaptureCallback>
 8004020:	e005      	b.n	800402e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f98b 	bl	800433e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 f99c 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b00      	cmp	r3, #0
 800403c:	d020      	beq.n	8004080 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d01b      	beq.n	8004080 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0204 	mvn.w	r2, #4
 8004050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2202      	movs	r2, #2
 8004056:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f973 	bl	8004352 <HAL_TIM_IC_CaptureCallback>
 800406c:	e005      	b.n	800407a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f965 	bl	800433e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f000 f976 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f003 0308 	and.w	r3, r3, #8
 8004086:	2b00      	cmp	r3, #0
 8004088:	d020      	beq.n	80040cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f003 0308 	and.w	r3, r3, #8
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01b      	beq.n	80040cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f06f 0208 	mvn.w	r2, #8
 800409c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2204      	movs	r2, #4
 80040a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f94d 	bl	8004352 <HAL_TIM_IC_CaptureCallback>
 80040b8:	e005      	b.n	80040c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f93f 	bl	800433e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f950 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f003 0310 	and.w	r3, r3, #16
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d020      	beq.n	8004118 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f003 0310 	and.w	r3, r3, #16
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d01b      	beq.n	8004118 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f06f 0210 	mvn.w	r2, #16
 80040e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2208      	movs	r2, #8
 80040ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d003      	beq.n	8004106 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f927 	bl	8004352 <HAL_TIM_IC_CaptureCallback>
 8004104:	e005      	b.n	8004112 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f919 	bl	800433e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 f92a 	bl	8004366 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f003 0301 	and.w	r3, r3, #1
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00c      	beq.n	800413c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f003 0301 	and.w	r3, r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	d007      	beq.n	800413c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f06f 0201 	mvn.w	r2, #1
 8004134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fd fe90 	bl	8001e5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00c      	beq.n	8004160 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800414c:	2b00      	cmp	r3, #0
 800414e:	d007      	beq.n	8004160 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 fae4 	bl	8004728 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00c      	beq.n	8004184 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004170:	2b00      	cmp	r3, #0
 8004172:	d007      	beq.n	8004184 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800417c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f8fb 	bl	800437a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f003 0320 	and.w	r3, r3, #32
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00c      	beq.n	80041a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f003 0320 	and.w	r3, r3, #32
 8004194:	2b00      	cmp	r3, #0
 8004196:	d007      	beq.n	80041a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0220 	mvn.w	r2, #32
 80041a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 fab6 	bl	8004714 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041a8:	bf00      	nop
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041ba:	2300      	movs	r3, #0
 80041bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <HAL_TIM_ConfigClockSource+0x1c>
 80041c8:	2302      	movs	r3, #2
 80041ca:	e0b4      	b.n	8004336 <HAL_TIM_ConfigClockSource+0x186>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2202      	movs	r2, #2
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80041ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004204:	d03e      	beq.n	8004284 <HAL_TIM_ConfigClockSource+0xd4>
 8004206:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800420a:	f200 8087 	bhi.w	800431c <HAL_TIM_ConfigClockSource+0x16c>
 800420e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004212:	f000 8086 	beq.w	8004322 <HAL_TIM_ConfigClockSource+0x172>
 8004216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800421a:	d87f      	bhi.n	800431c <HAL_TIM_ConfigClockSource+0x16c>
 800421c:	2b70      	cmp	r3, #112	@ 0x70
 800421e:	d01a      	beq.n	8004256 <HAL_TIM_ConfigClockSource+0xa6>
 8004220:	2b70      	cmp	r3, #112	@ 0x70
 8004222:	d87b      	bhi.n	800431c <HAL_TIM_ConfigClockSource+0x16c>
 8004224:	2b60      	cmp	r3, #96	@ 0x60
 8004226:	d050      	beq.n	80042ca <HAL_TIM_ConfigClockSource+0x11a>
 8004228:	2b60      	cmp	r3, #96	@ 0x60
 800422a:	d877      	bhi.n	800431c <HAL_TIM_ConfigClockSource+0x16c>
 800422c:	2b50      	cmp	r3, #80	@ 0x50
 800422e:	d03c      	beq.n	80042aa <HAL_TIM_ConfigClockSource+0xfa>
 8004230:	2b50      	cmp	r3, #80	@ 0x50
 8004232:	d873      	bhi.n	800431c <HAL_TIM_ConfigClockSource+0x16c>
 8004234:	2b40      	cmp	r3, #64	@ 0x40
 8004236:	d058      	beq.n	80042ea <HAL_TIM_ConfigClockSource+0x13a>
 8004238:	2b40      	cmp	r3, #64	@ 0x40
 800423a:	d86f      	bhi.n	800431c <HAL_TIM_ConfigClockSource+0x16c>
 800423c:	2b30      	cmp	r3, #48	@ 0x30
 800423e:	d064      	beq.n	800430a <HAL_TIM_ConfigClockSource+0x15a>
 8004240:	2b30      	cmp	r3, #48	@ 0x30
 8004242:	d86b      	bhi.n	800431c <HAL_TIM_ConfigClockSource+0x16c>
 8004244:	2b20      	cmp	r3, #32
 8004246:	d060      	beq.n	800430a <HAL_TIM_ConfigClockSource+0x15a>
 8004248:	2b20      	cmp	r3, #32
 800424a:	d867      	bhi.n	800431c <HAL_TIM_ConfigClockSource+0x16c>
 800424c:	2b00      	cmp	r3, #0
 800424e:	d05c      	beq.n	800430a <HAL_TIM_ConfigClockSource+0x15a>
 8004250:	2b10      	cmp	r3, #16
 8004252:	d05a      	beq.n	800430a <HAL_TIM_ConfigClockSource+0x15a>
 8004254:	e062      	b.n	800431c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004266:	f000 f9b9 	bl	80045dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004278:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68ba      	ldr	r2, [r7, #8]
 8004280:	609a      	str	r2, [r3, #8]
      break;
 8004282:	e04f      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004294:	f000 f9a2 	bl	80045dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	689a      	ldr	r2, [r3, #8]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042a6:	609a      	str	r2, [r3, #8]
      break;
 80042a8:	e03c      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042b6:	461a      	mov	r2, r3
 80042b8:	f000 f916 	bl	80044e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2150      	movs	r1, #80	@ 0x50
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 f96f 	bl	80045a6 <TIM_ITRx_SetConfig>
      break;
 80042c8:	e02c      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042d6:	461a      	mov	r2, r3
 80042d8:	f000 f935 	bl	8004546 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2160      	movs	r1, #96	@ 0x60
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 f95f 	bl	80045a6 <TIM_ITRx_SetConfig>
      break;
 80042e8:	e01c      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042f6:	461a      	mov	r2, r3
 80042f8:	f000 f8f6 	bl	80044e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2140      	movs	r1, #64	@ 0x40
 8004302:	4618      	mov	r0, r3
 8004304:	f000 f94f 	bl	80045a6 <TIM_ITRx_SetConfig>
      break;
 8004308:	e00c      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4619      	mov	r1, r3
 8004314:	4610      	mov	r0, r2
 8004316:	f000 f946 	bl	80045a6 <TIM_ITRx_SetConfig>
      break;
 800431a:	e003      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	73fb      	strb	r3, [r7, #15]
      break;
 8004320:	e000      	b.n	8004324 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004322:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004334:	7bfb      	ldrb	r3, [r7, #15]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3710      	adds	r7, #16
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}

0800433e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr

0800437a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800437a:	b480      	push	{r7}
 800437c:	b083      	sub	sp, #12
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004382:	bf00      	nop
 8004384:	370c      	adds	r7, #12
 8004386:	46bd      	mov	sp, r7
 8004388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438c:	4770      	bx	lr
	...

08004390 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a46      	ldr	r2, [pc, #280]	@ (80044bc <TIM_Base_SetConfig+0x12c>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d013      	beq.n	80043d0 <TIM_Base_SetConfig+0x40>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ae:	d00f      	beq.n	80043d0 <TIM_Base_SetConfig+0x40>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a43      	ldr	r2, [pc, #268]	@ (80044c0 <TIM_Base_SetConfig+0x130>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d00b      	beq.n	80043d0 <TIM_Base_SetConfig+0x40>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a42      	ldr	r2, [pc, #264]	@ (80044c4 <TIM_Base_SetConfig+0x134>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d007      	beq.n	80043d0 <TIM_Base_SetConfig+0x40>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a41      	ldr	r2, [pc, #260]	@ (80044c8 <TIM_Base_SetConfig+0x138>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d003      	beq.n	80043d0 <TIM_Base_SetConfig+0x40>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a40      	ldr	r2, [pc, #256]	@ (80044cc <TIM_Base_SetConfig+0x13c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d108      	bne.n	80043e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a35      	ldr	r2, [pc, #212]	@ (80044bc <TIM_Base_SetConfig+0x12c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d02b      	beq.n	8004442 <TIM_Base_SetConfig+0xb2>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043f0:	d027      	beq.n	8004442 <TIM_Base_SetConfig+0xb2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a32      	ldr	r2, [pc, #200]	@ (80044c0 <TIM_Base_SetConfig+0x130>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d023      	beq.n	8004442 <TIM_Base_SetConfig+0xb2>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a31      	ldr	r2, [pc, #196]	@ (80044c4 <TIM_Base_SetConfig+0x134>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d01f      	beq.n	8004442 <TIM_Base_SetConfig+0xb2>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	4a30      	ldr	r2, [pc, #192]	@ (80044c8 <TIM_Base_SetConfig+0x138>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d01b      	beq.n	8004442 <TIM_Base_SetConfig+0xb2>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a2f      	ldr	r2, [pc, #188]	@ (80044cc <TIM_Base_SetConfig+0x13c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d017      	beq.n	8004442 <TIM_Base_SetConfig+0xb2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	4a2e      	ldr	r2, [pc, #184]	@ (80044d0 <TIM_Base_SetConfig+0x140>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d013      	beq.n	8004442 <TIM_Base_SetConfig+0xb2>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a2d      	ldr	r2, [pc, #180]	@ (80044d4 <TIM_Base_SetConfig+0x144>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d00f      	beq.n	8004442 <TIM_Base_SetConfig+0xb2>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a2c      	ldr	r2, [pc, #176]	@ (80044d8 <TIM_Base_SetConfig+0x148>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00b      	beq.n	8004442 <TIM_Base_SetConfig+0xb2>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a2b      	ldr	r2, [pc, #172]	@ (80044dc <TIM_Base_SetConfig+0x14c>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d007      	beq.n	8004442 <TIM_Base_SetConfig+0xb2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a2a      	ldr	r2, [pc, #168]	@ (80044e0 <TIM_Base_SetConfig+0x150>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d003      	beq.n	8004442 <TIM_Base_SetConfig+0xb2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a29      	ldr	r2, [pc, #164]	@ (80044e4 <TIM_Base_SetConfig+0x154>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d108      	bne.n	8004454 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	68fa      	ldr	r2, [r7, #12]
 8004466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	689a      	ldr	r2, [r3, #8]
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a10      	ldr	r2, [pc, #64]	@ (80044bc <TIM_Base_SetConfig+0x12c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d003      	beq.n	8004488 <TIM_Base_SetConfig+0xf8>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a12      	ldr	r2, [pc, #72]	@ (80044cc <TIM_Base_SetConfig+0x13c>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d103      	bne.n	8004490 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d105      	bne.n	80044ae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f023 0201 	bic.w	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	611a      	str	r2, [r3, #16]
  }
}
 80044ae:	bf00      	nop
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40010000 	.word	0x40010000
 80044c0:	40000400 	.word	0x40000400
 80044c4:	40000800 	.word	0x40000800
 80044c8:	40000c00 	.word	0x40000c00
 80044cc:	40010400 	.word	0x40010400
 80044d0:	40014000 	.word	0x40014000
 80044d4:	40014400 	.word	0x40014400
 80044d8:	40014800 	.word	0x40014800
 80044dc:	40001800 	.word	0x40001800
 80044e0:	40001c00 	.word	0x40001c00
 80044e4:	40002000 	.word	0x40002000

080044e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b087      	sub	sp, #28
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	f023 0201 	bic.w	r2, r3, #1
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	011b      	lsls	r3, r3, #4
 8004518:	693a      	ldr	r2, [r7, #16]
 800451a:	4313      	orrs	r3, r2
 800451c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f023 030a 	bic.w	r3, r3, #10
 8004524:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	4313      	orrs	r3, r2
 800452c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	621a      	str	r2, [r3, #32]
}
 800453a:	bf00      	nop
 800453c:	371c      	adds	r7, #28
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004546:	b480      	push	{r7}
 8004548:	b087      	sub	sp, #28
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	60b9      	str	r1, [r7, #8]
 8004550:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	f023 0210 	bic.w	r2, r3, #16
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004570:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	031b      	lsls	r3, r3, #12
 8004576:	693a      	ldr	r2, [r7, #16]
 8004578:	4313      	orrs	r3, r2
 800457a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004582:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	4313      	orrs	r3, r2
 800458c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	621a      	str	r2, [r3, #32]
}
 800459a:	bf00      	nop
 800459c:	371c      	adds	r7, #28
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045a6:	b480      	push	{r7}
 80045a8:	b085      	sub	sp, #20
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
 80045ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	4313      	orrs	r3, r2
 80045c4:	f043 0307 	orr.w	r3, r3, #7
 80045c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	609a      	str	r2, [r3, #8]
}
 80045d0:	bf00      	nop
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
 80045e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80045f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	021a      	lsls	r2, r3, #8
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	431a      	orrs	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4313      	orrs	r3, r2
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	4313      	orrs	r3, r2
 8004608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	609a      	str	r2, [r3, #8]
}
 8004610:	bf00      	nop
 8004612:	371c      	adds	r7, #28
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800462c:	2b01      	cmp	r3, #1
 800462e:	d101      	bne.n	8004634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004630:	2302      	movs	r3, #2
 8004632:	e05a      	b.n	80046ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2202      	movs	r2, #2
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800465a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	68fa      	ldr	r2, [r7, #12]
 8004662:	4313      	orrs	r3, r2
 8004664:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a21      	ldr	r2, [pc, #132]	@ (80046f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d022      	beq.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004680:	d01d      	beq.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a1d      	ldr	r2, [pc, #116]	@ (80046fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d018      	beq.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a1b      	ldr	r2, [pc, #108]	@ (8004700 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d013      	beq.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a1a      	ldr	r2, [pc, #104]	@ (8004704 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d00e      	beq.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a18      	ldr	r2, [pc, #96]	@ (8004708 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d009      	beq.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a17      	ldr	r2, [pc, #92]	@ (800470c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d004      	beq.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a15      	ldr	r2, [pc, #84]	@ (8004710 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d10c      	bne.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	4313      	orrs	r3, r2
 80046ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3714      	adds	r7, #20
 80046ee:	46bd      	mov	sp, r7
 80046f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f4:	4770      	bx	lr
 80046f6:	bf00      	nop
 80046f8:	40010000 	.word	0x40010000
 80046fc:	40000400 	.word	0x40000400
 8004700:	40000800 	.word	0x40000800
 8004704:	40000c00 	.word	0x40000c00
 8004708:	40010400 	.word	0x40010400
 800470c:	40014000 	.word	0x40014000
 8004710:	40001800 	.word	0x40001800

08004714 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800471c:	bf00      	nop
 800471e:	370c      	adds	r7, #12
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <std>:
 800473c:	2300      	movs	r3, #0
 800473e:	b510      	push	{r4, lr}
 8004740:	4604      	mov	r4, r0
 8004742:	e9c0 3300 	strd	r3, r3, [r0]
 8004746:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800474a:	6083      	str	r3, [r0, #8]
 800474c:	8181      	strh	r1, [r0, #12]
 800474e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004750:	81c2      	strh	r2, [r0, #14]
 8004752:	6183      	str	r3, [r0, #24]
 8004754:	4619      	mov	r1, r3
 8004756:	2208      	movs	r2, #8
 8004758:	305c      	adds	r0, #92	@ 0x5c
 800475a:	f000 f929 	bl	80049b0 <memset>
 800475e:	4b0d      	ldr	r3, [pc, #52]	@ (8004794 <std+0x58>)
 8004760:	6263      	str	r3, [r4, #36]	@ 0x24
 8004762:	4b0d      	ldr	r3, [pc, #52]	@ (8004798 <std+0x5c>)
 8004764:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004766:	4b0d      	ldr	r3, [pc, #52]	@ (800479c <std+0x60>)
 8004768:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800476a:	4b0d      	ldr	r3, [pc, #52]	@ (80047a0 <std+0x64>)
 800476c:	6323      	str	r3, [r4, #48]	@ 0x30
 800476e:	4b0d      	ldr	r3, [pc, #52]	@ (80047a4 <std+0x68>)
 8004770:	6224      	str	r4, [r4, #32]
 8004772:	429c      	cmp	r4, r3
 8004774:	d006      	beq.n	8004784 <std+0x48>
 8004776:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800477a:	4294      	cmp	r4, r2
 800477c:	d002      	beq.n	8004784 <std+0x48>
 800477e:	33d0      	adds	r3, #208	@ 0xd0
 8004780:	429c      	cmp	r4, r3
 8004782:	d105      	bne.n	8004790 <std+0x54>
 8004784:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800478c:	f000 b942 	b.w	8004a14 <__retarget_lock_init_recursive>
 8004790:	bd10      	pop	{r4, pc}
 8004792:	bf00      	nop
 8004794:	0800526d 	.word	0x0800526d
 8004798:	0800528f 	.word	0x0800528f
 800479c:	080052c7 	.word	0x080052c7
 80047a0:	080052eb 	.word	0x080052eb
 80047a4:	20000370 	.word	0x20000370

080047a8 <stdio_exit_handler>:
 80047a8:	4a02      	ldr	r2, [pc, #8]	@ (80047b4 <stdio_exit_handler+0xc>)
 80047aa:	4903      	ldr	r1, [pc, #12]	@ (80047b8 <stdio_exit_handler+0x10>)
 80047ac:	4803      	ldr	r0, [pc, #12]	@ (80047bc <stdio_exit_handler+0x14>)
 80047ae:	f000 b869 	b.w	8004884 <_fwalk_sglue>
 80047b2:	bf00      	nop
 80047b4:	2000000c 	.word	0x2000000c
 80047b8:	08005205 	.word	0x08005205
 80047bc:	2000001c 	.word	0x2000001c

080047c0 <cleanup_stdio>:
 80047c0:	6841      	ldr	r1, [r0, #4]
 80047c2:	4b0c      	ldr	r3, [pc, #48]	@ (80047f4 <cleanup_stdio+0x34>)
 80047c4:	4299      	cmp	r1, r3
 80047c6:	b510      	push	{r4, lr}
 80047c8:	4604      	mov	r4, r0
 80047ca:	d001      	beq.n	80047d0 <cleanup_stdio+0x10>
 80047cc:	f000 fd1a 	bl	8005204 <_fflush_r>
 80047d0:	68a1      	ldr	r1, [r4, #8]
 80047d2:	4b09      	ldr	r3, [pc, #36]	@ (80047f8 <cleanup_stdio+0x38>)
 80047d4:	4299      	cmp	r1, r3
 80047d6:	d002      	beq.n	80047de <cleanup_stdio+0x1e>
 80047d8:	4620      	mov	r0, r4
 80047da:	f000 fd13 	bl	8005204 <_fflush_r>
 80047de:	68e1      	ldr	r1, [r4, #12]
 80047e0:	4b06      	ldr	r3, [pc, #24]	@ (80047fc <cleanup_stdio+0x3c>)
 80047e2:	4299      	cmp	r1, r3
 80047e4:	d004      	beq.n	80047f0 <cleanup_stdio+0x30>
 80047e6:	4620      	mov	r0, r4
 80047e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047ec:	f000 bd0a 	b.w	8005204 <_fflush_r>
 80047f0:	bd10      	pop	{r4, pc}
 80047f2:	bf00      	nop
 80047f4:	20000370 	.word	0x20000370
 80047f8:	200003d8 	.word	0x200003d8
 80047fc:	20000440 	.word	0x20000440

08004800 <global_stdio_init.part.0>:
 8004800:	b510      	push	{r4, lr}
 8004802:	4b0b      	ldr	r3, [pc, #44]	@ (8004830 <global_stdio_init.part.0+0x30>)
 8004804:	4c0b      	ldr	r4, [pc, #44]	@ (8004834 <global_stdio_init.part.0+0x34>)
 8004806:	4a0c      	ldr	r2, [pc, #48]	@ (8004838 <global_stdio_init.part.0+0x38>)
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	4620      	mov	r0, r4
 800480c:	2200      	movs	r2, #0
 800480e:	2104      	movs	r1, #4
 8004810:	f7ff ff94 	bl	800473c <std>
 8004814:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004818:	2201      	movs	r2, #1
 800481a:	2109      	movs	r1, #9
 800481c:	f7ff ff8e 	bl	800473c <std>
 8004820:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004824:	2202      	movs	r2, #2
 8004826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800482a:	2112      	movs	r1, #18
 800482c:	f7ff bf86 	b.w	800473c <std>
 8004830:	200004a8 	.word	0x200004a8
 8004834:	20000370 	.word	0x20000370
 8004838:	080047a9 	.word	0x080047a9

0800483c <__sfp_lock_acquire>:
 800483c:	4801      	ldr	r0, [pc, #4]	@ (8004844 <__sfp_lock_acquire+0x8>)
 800483e:	f000 b8ea 	b.w	8004a16 <__retarget_lock_acquire_recursive>
 8004842:	bf00      	nop
 8004844:	200004ad 	.word	0x200004ad

08004848 <__sfp_lock_release>:
 8004848:	4801      	ldr	r0, [pc, #4]	@ (8004850 <__sfp_lock_release+0x8>)
 800484a:	f000 b8e5 	b.w	8004a18 <__retarget_lock_release_recursive>
 800484e:	bf00      	nop
 8004850:	200004ad 	.word	0x200004ad

08004854 <__sinit>:
 8004854:	b510      	push	{r4, lr}
 8004856:	4604      	mov	r4, r0
 8004858:	f7ff fff0 	bl	800483c <__sfp_lock_acquire>
 800485c:	6a23      	ldr	r3, [r4, #32]
 800485e:	b11b      	cbz	r3, 8004868 <__sinit+0x14>
 8004860:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004864:	f7ff bff0 	b.w	8004848 <__sfp_lock_release>
 8004868:	4b04      	ldr	r3, [pc, #16]	@ (800487c <__sinit+0x28>)
 800486a:	6223      	str	r3, [r4, #32]
 800486c:	4b04      	ldr	r3, [pc, #16]	@ (8004880 <__sinit+0x2c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1f5      	bne.n	8004860 <__sinit+0xc>
 8004874:	f7ff ffc4 	bl	8004800 <global_stdio_init.part.0>
 8004878:	e7f2      	b.n	8004860 <__sinit+0xc>
 800487a:	bf00      	nop
 800487c:	080047c1 	.word	0x080047c1
 8004880:	200004a8 	.word	0x200004a8

08004884 <_fwalk_sglue>:
 8004884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004888:	4607      	mov	r7, r0
 800488a:	4688      	mov	r8, r1
 800488c:	4614      	mov	r4, r2
 800488e:	2600      	movs	r6, #0
 8004890:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004894:	f1b9 0901 	subs.w	r9, r9, #1
 8004898:	d505      	bpl.n	80048a6 <_fwalk_sglue+0x22>
 800489a:	6824      	ldr	r4, [r4, #0]
 800489c:	2c00      	cmp	r4, #0
 800489e:	d1f7      	bne.n	8004890 <_fwalk_sglue+0xc>
 80048a0:	4630      	mov	r0, r6
 80048a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048a6:	89ab      	ldrh	r3, [r5, #12]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d907      	bls.n	80048bc <_fwalk_sglue+0x38>
 80048ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048b0:	3301      	adds	r3, #1
 80048b2:	d003      	beq.n	80048bc <_fwalk_sglue+0x38>
 80048b4:	4629      	mov	r1, r5
 80048b6:	4638      	mov	r0, r7
 80048b8:	47c0      	blx	r8
 80048ba:	4306      	orrs	r6, r0
 80048bc:	3568      	adds	r5, #104	@ 0x68
 80048be:	e7e9      	b.n	8004894 <_fwalk_sglue+0x10>

080048c0 <iprintf>:
 80048c0:	b40f      	push	{r0, r1, r2, r3}
 80048c2:	b507      	push	{r0, r1, r2, lr}
 80048c4:	4906      	ldr	r1, [pc, #24]	@ (80048e0 <iprintf+0x20>)
 80048c6:	ab04      	add	r3, sp, #16
 80048c8:	6808      	ldr	r0, [r1, #0]
 80048ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80048ce:	6881      	ldr	r1, [r0, #8]
 80048d0:	9301      	str	r3, [sp, #4]
 80048d2:	f000 f8cb 	bl	8004a6c <_vfiprintf_r>
 80048d6:	b003      	add	sp, #12
 80048d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80048dc:	b004      	add	sp, #16
 80048de:	4770      	bx	lr
 80048e0:	20000018 	.word	0x20000018

080048e4 <putchar>:
 80048e4:	4b02      	ldr	r3, [pc, #8]	@ (80048f0 <putchar+0xc>)
 80048e6:	4601      	mov	r1, r0
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	6882      	ldr	r2, [r0, #8]
 80048ec:	f000 bdf8 	b.w	80054e0 <_putc_r>
 80048f0:	20000018 	.word	0x20000018

080048f4 <_puts_r>:
 80048f4:	6a03      	ldr	r3, [r0, #32]
 80048f6:	b570      	push	{r4, r5, r6, lr}
 80048f8:	6884      	ldr	r4, [r0, #8]
 80048fa:	4605      	mov	r5, r0
 80048fc:	460e      	mov	r6, r1
 80048fe:	b90b      	cbnz	r3, 8004904 <_puts_r+0x10>
 8004900:	f7ff ffa8 	bl	8004854 <__sinit>
 8004904:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004906:	07db      	lsls	r3, r3, #31
 8004908:	d405      	bmi.n	8004916 <_puts_r+0x22>
 800490a:	89a3      	ldrh	r3, [r4, #12]
 800490c:	0598      	lsls	r0, r3, #22
 800490e:	d402      	bmi.n	8004916 <_puts_r+0x22>
 8004910:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004912:	f000 f880 	bl	8004a16 <__retarget_lock_acquire_recursive>
 8004916:	89a3      	ldrh	r3, [r4, #12]
 8004918:	0719      	lsls	r1, r3, #28
 800491a:	d502      	bpl.n	8004922 <_puts_r+0x2e>
 800491c:	6923      	ldr	r3, [r4, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d135      	bne.n	800498e <_puts_r+0x9a>
 8004922:	4621      	mov	r1, r4
 8004924:	4628      	mov	r0, r5
 8004926:	f000 fd23 	bl	8005370 <__swsetup_r>
 800492a:	b380      	cbz	r0, 800498e <_puts_r+0x9a>
 800492c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004930:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004932:	07da      	lsls	r2, r3, #31
 8004934:	d405      	bmi.n	8004942 <_puts_r+0x4e>
 8004936:	89a3      	ldrh	r3, [r4, #12]
 8004938:	059b      	lsls	r3, r3, #22
 800493a:	d402      	bmi.n	8004942 <_puts_r+0x4e>
 800493c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800493e:	f000 f86b 	bl	8004a18 <__retarget_lock_release_recursive>
 8004942:	4628      	mov	r0, r5
 8004944:	bd70      	pop	{r4, r5, r6, pc}
 8004946:	2b00      	cmp	r3, #0
 8004948:	da04      	bge.n	8004954 <_puts_r+0x60>
 800494a:	69a2      	ldr	r2, [r4, #24]
 800494c:	429a      	cmp	r2, r3
 800494e:	dc17      	bgt.n	8004980 <_puts_r+0x8c>
 8004950:	290a      	cmp	r1, #10
 8004952:	d015      	beq.n	8004980 <_puts_r+0x8c>
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	6022      	str	r2, [r4, #0]
 800495a:	7019      	strb	r1, [r3, #0]
 800495c:	68a3      	ldr	r3, [r4, #8]
 800495e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004962:	3b01      	subs	r3, #1
 8004964:	60a3      	str	r3, [r4, #8]
 8004966:	2900      	cmp	r1, #0
 8004968:	d1ed      	bne.n	8004946 <_puts_r+0x52>
 800496a:	2b00      	cmp	r3, #0
 800496c:	da11      	bge.n	8004992 <_puts_r+0x9e>
 800496e:	4622      	mov	r2, r4
 8004970:	210a      	movs	r1, #10
 8004972:	4628      	mov	r0, r5
 8004974:	f000 fcbd 	bl	80052f2 <__swbuf_r>
 8004978:	3001      	adds	r0, #1
 800497a:	d0d7      	beq.n	800492c <_puts_r+0x38>
 800497c:	250a      	movs	r5, #10
 800497e:	e7d7      	b.n	8004930 <_puts_r+0x3c>
 8004980:	4622      	mov	r2, r4
 8004982:	4628      	mov	r0, r5
 8004984:	f000 fcb5 	bl	80052f2 <__swbuf_r>
 8004988:	3001      	adds	r0, #1
 800498a:	d1e7      	bne.n	800495c <_puts_r+0x68>
 800498c:	e7ce      	b.n	800492c <_puts_r+0x38>
 800498e:	3e01      	subs	r6, #1
 8004990:	e7e4      	b.n	800495c <_puts_r+0x68>
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	6022      	str	r2, [r4, #0]
 8004998:	220a      	movs	r2, #10
 800499a:	701a      	strb	r2, [r3, #0]
 800499c:	e7ee      	b.n	800497c <_puts_r+0x88>
	...

080049a0 <puts>:
 80049a0:	4b02      	ldr	r3, [pc, #8]	@ (80049ac <puts+0xc>)
 80049a2:	4601      	mov	r1, r0
 80049a4:	6818      	ldr	r0, [r3, #0]
 80049a6:	f7ff bfa5 	b.w	80048f4 <_puts_r>
 80049aa:	bf00      	nop
 80049ac:	20000018 	.word	0x20000018

080049b0 <memset>:
 80049b0:	4402      	add	r2, r0
 80049b2:	4603      	mov	r3, r0
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d100      	bne.n	80049ba <memset+0xa>
 80049b8:	4770      	bx	lr
 80049ba:	f803 1b01 	strb.w	r1, [r3], #1
 80049be:	e7f9      	b.n	80049b4 <memset+0x4>

080049c0 <__errno>:
 80049c0:	4b01      	ldr	r3, [pc, #4]	@ (80049c8 <__errno+0x8>)
 80049c2:	6818      	ldr	r0, [r3, #0]
 80049c4:	4770      	bx	lr
 80049c6:	bf00      	nop
 80049c8:	20000018 	.word	0x20000018

080049cc <__libc_init_array>:
 80049cc:	b570      	push	{r4, r5, r6, lr}
 80049ce:	4d0d      	ldr	r5, [pc, #52]	@ (8004a04 <__libc_init_array+0x38>)
 80049d0:	4c0d      	ldr	r4, [pc, #52]	@ (8004a08 <__libc_init_array+0x3c>)
 80049d2:	1b64      	subs	r4, r4, r5
 80049d4:	10a4      	asrs	r4, r4, #2
 80049d6:	2600      	movs	r6, #0
 80049d8:	42a6      	cmp	r6, r4
 80049da:	d109      	bne.n	80049f0 <__libc_init_array+0x24>
 80049dc:	4d0b      	ldr	r5, [pc, #44]	@ (8004a0c <__libc_init_array+0x40>)
 80049de:	4c0c      	ldr	r4, [pc, #48]	@ (8004a10 <__libc_init_array+0x44>)
 80049e0:	f000 fea4 	bl	800572c <_init>
 80049e4:	1b64      	subs	r4, r4, r5
 80049e6:	10a4      	asrs	r4, r4, #2
 80049e8:	2600      	movs	r6, #0
 80049ea:	42a6      	cmp	r6, r4
 80049ec:	d105      	bne.n	80049fa <__libc_init_array+0x2e>
 80049ee:	bd70      	pop	{r4, r5, r6, pc}
 80049f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049f4:	4798      	blx	r3
 80049f6:	3601      	adds	r6, #1
 80049f8:	e7ee      	b.n	80049d8 <__libc_init_array+0xc>
 80049fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80049fe:	4798      	blx	r3
 8004a00:	3601      	adds	r6, #1
 8004a02:	e7f2      	b.n	80049ea <__libc_init_array+0x1e>
 8004a04:	08005828 	.word	0x08005828
 8004a08:	08005828 	.word	0x08005828
 8004a0c:	08005828 	.word	0x08005828
 8004a10:	0800582c 	.word	0x0800582c

08004a14 <__retarget_lock_init_recursive>:
 8004a14:	4770      	bx	lr

08004a16 <__retarget_lock_acquire_recursive>:
 8004a16:	4770      	bx	lr

08004a18 <__retarget_lock_release_recursive>:
 8004a18:	4770      	bx	lr

08004a1a <__sfputc_r>:
 8004a1a:	6893      	ldr	r3, [r2, #8]
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	b410      	push	{r4}
 8004a22:	6093      	str	r3, [r2, #8]
 8004a24:	da08      	bge.n	8004a38 <__sfputc_r+0x1e>
 8004a26:	6994      	ldr	r4, [r2, #24]
 8004a28:	42a3      	cmp	r3, r4
 8004a2a:	db01      	blt.n	8004a30 <__sfputc_r+0x16>
 8004a2c:	290a      	cmp	r1, #10
 8004a2e:	d103      	bne.n	8004a38 <__sfputc_r+0x1e>
 8004a30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a34:	f000 bc5d 	b.w	80052f2 <__swbuf_r>
 8004a38:	6813      	ldr	r3, [r2, #0]
 8004a3a:	1c58      	adds	r0, r3, #1
 8004a3c:	6010      	str	r0, [r2, #0]
 8004a3e:	7019      	strb	r1, [r3, #0]
 8004a40:	4608      	mov	r0, r1
 8004a42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <__sfputs_r>:
 8004a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4a:	4606      	mov	r6, r0
 8004a4c:	460f      	mov	r7, r1
 8004a4e:	4614      	mov	r4, r2
 8004a50:	18d5      	adds	r5, r2, r3
 8004a52:	42ac      	cmp	r4, r5
 8004a54:	d101      	bne.n	8004a5a <__sfputs_r+0x12>
 8004a56:	2000      	movs	r0, #0
 8004a58:	e007      	b.n	8004a6a <__sfputs_r+0x22>
 8004a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a5e:	463a      	mov	r2, r7
 8004a60:	4630      	mov	r0, r6
 8004a62:	f7ff ffda 	bl	8004a1a <__sfputc_r>
 8004a66:	1c43      	adds	r3, r0, #1
 8004a68:	d1f3      	bne.n	8004a52 <__sfputs_r+0xa>
 8004a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004a6c <_vfiprintf_r>:
 8004a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a70:	460d      	mov	r5, r1
 8004a72:	b09d      	sub	sp, #116	@ 0x74
 8004a74:	4614      	mov	r4, r2
 8004a76:	4698      	mov	r8, r3
 8004a78:	4606      	mov	r6, r0
 8004a7a:	b118      	cbz	r0, 8004a84 <_vfiprintf_r+0x18>
 8004a7c:	6a03      	ldr	r3, [r0, #32]
 8004a7e:	b90b      	cbnz	r3, 8004a84 <_vfiprintf_r+0x18>
 8004a80:	f7ff fee8 	bl	8004854 <__sinit>
 8004a84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a86:	07d9      	lsls	r1, r3, #31
 8004a88:	d405      	bmi.n	8004a96 <_vfiprintf_r+0x2a>
 8004a8a:	89ab      	ldrh	r3, [r5, #12]
 8004a8c:	059a      	lsls	r2, r3, #22
 8004a8e:	d402      	bmi.n	8004a96 <_vfiprintf_r+0x2a>
 8004a90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a92:	f7ff ffc0 	bl	8004a16 <__retarget_lock_acquire_recursive>
 8004a96:	89ab      	ldrh	r3, [r5, #12]
 8004a98:	071b      	lsls	r3, r3, #28
 8004a9a:	d501      	bpl.n	8004aa0 <_vfiprintf_r+0x34>
 8004a9c:	692b      	ldr	r3, [r5, #16]
 8004a9e:	b99b      	cbnz	r3, 8004ac8 <_vfiprintf_r+0x5c>
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	4630      	mov	r0, r6
 8004aa4:	f000 fc64 	bl	8005370 <__swsetup_r>
 8004aa8:	b170      	cbz	r0, 8004ac8 <_vfiprintf_r+0x5c>
 8004aaa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004aac:	07dc      	lsls	r4, r3, #31
 8004aae:	d504      	bpl.n	8004aba <_vfiprintf_r+0x4e>
 8004ab0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ab4:	b01d      	add	sp, #116	@ 0x74
 8004ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aba:	89ab      	ldrh	r3, [r5, #12]
 8004abc:	0598      	lsls	r0, r3, #22
 8004abe:	d4f7      	bmi.n	8004ab0 <_vfiprintf_r+0x44>
 8004ac0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ac2:	f7ff ffa9 	bl	8004a18 <__retarget_lock_release_recursive>
 8004ac6:	e7f3      	b.n	8004ab0 <_vfiprintf_r+0x44>
 8004ac8:	2300      	movs	r3, #0
 8004aca:	9309      	str	r3, [sp, #36]	@ 0x24
 8004acc:	2320      	movs	r3, #32
 8004ace:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ad2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ad6:	2330      	movs	r3, #48	@ 0x30
 8004ad8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004c88 <_vfiprintf_r+0x21c>
 8004adc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ae0:	f04f 0901 	mov.w	r9, #1
 8004ae4:	4623      	mov	r3, r4
 8004ae6:	469a      	mov	sl, r3
 8004ae8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004aec:	b10a      	cbz	r2, 8004af2 <_vfiprintf_r+0x86>
 8004aee:	2a25      	cmp	r2, #37	@ 0x25
 8004af0:	d1f9      	bne.n	8004ae6 <_vfiprintf_r+0x7a>
 8004af2:	ebba 0b04 	subs.w	fp, sl, r4
 8004af6:	d00b      	beq.n	8004b10 <_vfiprintf_r+0xa4>
 8004af8:	465b      	mov	r3, fp
 8004afa:	4622      	mov	r2, r4
 8004afc:	4629      	mov	r1, r5
 8004afe:	4630      	mov	r0, r6
 8004b00:	f7ff ffa2 	bl	8004a48 <__sfputs_r>
 8004b04:	3001      	adds	r0, #1
 8004b06:	f000 80a7 	beq.w	8004c58 <_vfiprintf_r+0x1ec>
 8004b0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b0c:	445a      	add	r2, fp
 8004b0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b10:	f89a 3000 	ldrb.w	r3, [sl]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 809f 	beq.w	8004c58 <_vfiprintf_r+0x1ec>
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b24:	f10a 0a01 	add.w	sl, sl, #1
 8004b28:	9304      	str	r3, [sp, #16]
 8004b2a:	9307      	str	r3, [sp, #28]
 8004b2c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b30:	931a      	str	r3, [sp, #104]	@ 0x68
 8004b32:	4654      	mov	r4, sl
 8004b34:	2205      	movs	r2, #5
 8004b36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b3a:	4853      	ldr	r0, [pc, #332]	@ (8004c88 <_vfiprintf_r+0x21c>)
 8004b3c:	f7fb fb58 	bl	80001f0 <memchr>
 8004b40:	9a04      	ldr	r2, [sp, #16]
 8004b42:	b9d8      	cbnz	r0, 8004b7c <_vfiprintf_r+0x110>
 8004b44:	06d1      	lsls	r1, r2, #27
 8004b46:	bf44      	itt	mi
 8004b48:	2320      	movmi	r3, #32
 8004b4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b4e:	0713      	lsls	r3, r2, #28
 8004b50:	bf44      	itt	mi
 8004b52:	232b      	movmi	r3, #43	@ 0x2b
 8004b54:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b58:	f89a 3000 	ldrb.w	r3, [sl]
 8004b5c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b5e:	d015      	beq.n	8004b8c <_vfiprintf_r+0x120>
 8004b60:	9a07      	ldr	r2, [sp, #28]
 8004b62:	4654      	mov	r4, sl
 8004b64:	2000      	movs	r0, #0
 8004b66:	f04f 0c0a 	mov.w	ip, #10
 8004b6a:	4621      	mov	r1, r4
 8004b6c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b70:	3b30      	subs	r3, #48	@ 0x30
 8004b72:	2b09      	cmp	r3, #9
 8004b74:	d94b      	bls.n	8004c0e <_vfiprintf_r+0x1a2>
 8004b76:	b1b0      	cbz	r0, 8004ba6 <_vfiprintf_r+0x13a>
 8004b78:	9207      	str	r2, [sp, #28]
 8004b7a:	e014      	b.n	8004ba6 <_vfiprintf_r+0x13a>
 8004b7c:	eba0 0308 	sub.w	r3, r0, r8
 8004b80:	fa09 f303 	lsl.w	r3, r9, r3
 8004b84:	4313      	orrs	r3, r2
 8004b86:	9304      	str	r3, [sp, #16]
 8004b88:	46a2      	mov	sl, r4
 8004b8a:	e7d2      	b.n	8004b32 <_vfiprintf_r+0xc6>
 8004b8c:	9b03      	ldr	r3, [sp, #12]
 8004b8e:	1d19      	adds	r1, r3, #4
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	9103      	str	r1, [sp, #12]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	bfbb      	ittet	lt
 8004b98:	425b      	neglt	r3, r3
 8004b9a:	f042 0202 	orrlt.w	r2, r2, #2
 8004b9e:	9307      	strge	r3, [sp, #28]
 8004ba0:	9307      	strlt	r3, [sp, #28]
 8004ba2:	bfb8      	it	lt
 8004ba4:	9204      	strlt	r2, [sp, #16]
 8004ba6:	7823      	ldrb	r3, [r4, #0]
 8004ba8:	2b2e      	cmp	r3, #46	@ 0x2e
 8004baa:	d10a      	bne.n	8004bc2 <_vfiprintf_r+0x156>
 8004bac:	7863      	ldrb	r3, [r4, #1]
 8004bae:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bb0:	d132      	bne.n	8004c18 <_vfiprintf_r+0x1ac>
 8004bb2:	9b03      	ldr	r3, [sp, #12]
 8004bb4:	1d1a      	adds	r2, r3, #4
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	9203      	str	r2, [sp, #12]
 8004bba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004bbe:	3402      	adds	r4, #2
 8004bc0:	9305      	str	r3, [sp, #20]
 8004bc2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004c98 <_vfiprintf_r+0x22c>
 8004bc6:	7821      	ldrb	r1, [r4, #0]
 8004bc8:	2203      	movs	r2, #3
 8004bca:	4650      	mov	r0, sl
 8004bcc:	f7fb fb10 	bl	80001f0 <memchr>
 8004bd0:	b138      	cbz	r0, 8004be2 <_vfiprintf_r+0x176>
 8004bd2:	9b04      	ldr	r3, [sp, #16]
 8004bd4:	eba0 000a 	sub.w	r0, r0, sl
 8004bd8:	2240      	movs	r2, #64	@ 0x40
 8004bda:	4082      	lsls	r2, r0
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	3401      	adds	r4, #1
 8004be0:	9304      	str	r3, [sp, #16]
 8004be2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004be6:	4829      	ldr	r0, [pc, #164]	@ (8004c8c <_vfiprintf_r+0x220>)
 8004be8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004bec:	2206      	movs	r2, #6
 8004bee:	f7fb faff 	bl	80001f0 <memchr>
 8004bf2:	2800      	cmp	r0, #0
 8004bf4:	d03f      	beq.n	8004c76 <_vfiprintf_r+0x20a>
 8004bf6:	4b26      	ldr	r3, [pc, #152]	@ (8004c90 <_vfiprintf_r+0x224>)
 8004bf8:	bb1b      	cbnz	r3, 8004c42 <_vfiprintf_r+0x1d6>
 8004bfa:	9b03      	ldr	r3, [sp, #12]
 8004bfc:	3307      	adds	r3, #7
 8004bfe:	f023 0307 	bic.w	r3, r3, #7
 8004c02:	3308      	adds	r3, #8
 8004c04:	9303      	str	r3, [sp, #12]
 8004c06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c08:	443b      	add	r3, r7
 8004c0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c0c:	e76a      	b.n	8004ae4 <_vfiprintf_r+0x78>
 8004c0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c12:	460c      	mov	r4, r1
 8004c14:	2001      	movs	r0, #1
 8004c16:	e7a8      	b.n	8004b6a <_vfiprintf_r+0xfe>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	3401      	adds	r4, #1
 8004c1c:	9305      	str	r3, [sp, #20]
 8004c1e:	4619      	mov	r1, r3
 8004c20:	f04f 0c0a 	mov.w	ip, #10
 8004c24:	4620      	mov	r0, r4
 8004c26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c2a:	3a30      	subs	r2, #48	@ 0x30
 8004c2c:	2a09      	cmp	r2, #9
 8004c2e:	d903      	bls.n	8004c38 <_vfiprintf_r+0x1cc>
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0c6      	beq.n	8004bc2 <_vfiprintf_r+0x156>
 8004c34:	9105      	str	r1, [sp, #20]
 8004c36:	e7c4      	b.n	8004bc2 <_vfiprintf_r+0x156>
 8004c38:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c3c:	4604      	mov	r4, r0
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e7f0      	b.n	8004c24 <_vfiprintf_r+0x1b8>
 8004c42:	ab03      	add	r3, sp, #12
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	462a      	mov	r2, r5
 8004c48:	4b12      	ldr	r3, [pc, #72]	@ (8004c94 <_vfiprintf_r+0x228>)
 8004c4a:	a904      	add	r1, sp, #16
 8004c4c:	4630      	mov	r0, r6
 8004c4e:	f3af 8000 	nop.w
 8004c52:	4607      	mov	r7, r0
 8004c54:	1c78      	adds	r0, r7, #1
 8004c56:	d1d6      	bne.n	8004c06 <_vfiprintf_r+0x19a>
 8004c58:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c5a:	07d9      	lsls	r1, r3, #31
 8004c5c:	d405      	bmi.n	8004c6a <_vfiprintf_r+0x1fe>
 8004c5e:	89ab      	ldrh	r3, [r5, #12]
 8004c60:	059a      	lsls	r2, r3, #22
 8004c62:	d402      	bmi.n	8004c6a <_vfiprintf_r+0x1fe>
 8004c64:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c66:	f7ff fed7 	bl	8004a18 <__retarget_lock_release_recursive>
 8004c6a:	89ab      	ldrh	r3, [r5, #12]
 8004c6c:	065b      	lsls	r3, r3, #25
 8004c6e:	f53f af1f 	bmi.w	8004ab0 <_vfiprintf_r+0x44>
 8004c72:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c74:	e71e      	b.n	8004ab4 <_vfiprintf_r+0x48>
 8004c76:	ab03      	add	r3, sp, #12
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	462a      	mov	r2, r5
 8004c7c:	4b05      	ldr	r3, [pc, #20]	@ (8004c94 <_vfiprintf_r+0x228>)
 8004c7e:	a904      	add	r1, sp, #16
 8004c80:	4630      	mov	r0, r6
 8004c82:	f000 f91b 	bl	8004ebc <_printf_i>
 8004c86:	e7e4      	b.n	8004c52 <_vfiprintf_r+0x1e6>
 8004c88:	080057ec 	.word	0x080057ec
 8004c8c:	080057f6 	.word	0x080057f6
 8004c90:	00000000 	.word	0x00000000
 8004c94:	08004a49 	.word	0x08004a49
 8004c98:	080057f2 	.word	0x080057f2

08004c9c <sbrk_aligned>:
 8004c9c:	b570      	push	{r4, r5, r6, lr}
 8004c9e:	4e0f      	ldr	r6, [pc, #60]	@ (8004cdc <sbrk_aligned+0x40>)
 8004ca0:	460c      	mov	r4, r1
 8004ca2:	6831      	ldr	r1, [r6, #0]
 8004ca4:	4605      	mov	r5, r0
 8004ca6:	b911      	cbnz	r1, 8004cae <sbrk_aligned+0x12>
 8004ca8:	f000 fca4 	bl	80055f4 <_sbrk_r>
 8004cac:	6030      	str	r0, [r6, #0]
 8004cae:	4621      	mov	r1, r4
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	f000 fc9f 	bl	80055f4 <_sbrk_r>
 8004cb6:	1c43      	adds	r3, r0, #1
 8004cb8:	d103      	bne.n	8004cc2 <sbrk_aligned+0x26>
 8004cba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	bd70      	pop	{r4, r5, r6, pc}
 8004cc2:	1cc4      	adds	r4, r0, #3
 8004cc4:	f024 0403 	bic.w	r4, r4, #3
 8004cc8:	42a0      	cmp	r0, r4
 8004cca:	d0f8      	beq.n	8004cbe <sbrk_aligned+0x22>
 8004ccc:	1a21      	subs	r1, r4, r0
 8004cce:	4628      	mov	r0, r5
 8004cd0:	f000 fc90 	bl	80055f4 <_sbrk_r>
 8004cd4:	3001      	adds	r0, #1
 8004cd6:	d1f2      	bne.n	8004cbe <sbrk_aligned+0x22>
 8004cd8:	e7ef      	b.n	8004cba <sbrk_aligned+0x1e>
 8004cda:	bf00      	nop
 8004cdc:	200004b0 	.word	0x200004b0

08004ce0 <_malloc_r>:
 8004ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ce4:	1ccd      	adds	r5, r1, #3
 8004ce6:	f025 0503 	bic.w	r5, r5, #3
 8004cea:	3508      	adds	r5, #8
 8004cec:	2d0c      	cmp	r5, #12
 8004cee:	bf38      	it	cc
 8004cf0:	250c      	movcc	r5, #12
 8004cf2:	2d00      	cmp	r5, #0
 8004cf4:	4606      	mov	r6, r0
 8004cf6:	db01      	blt.n	8004cfc <_malloc_r+0x1c>
 8004cf8:	42a9      	cmp	r1, r5
 8004cfa:	d904      	bls.n	8004d06 <_malloc_r+0x26>
 8004cfc:	230c      	movs	r3, #12
 8004cfe:	6033      	str	r3, [r6, #0]
 8004d00:	2000      	movs	r0, #0
 8004d02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ddc <_malloc_r+0xfc>
 8004d0a:	f000 faa3 	bl	8005254 <__malloc_lock>
 8004d0e:	f8d8 3000 	ldr.w	r3, [r8]
 8004d12:	461c      	mov	r4, r3
 8004d14:	bb44      	cbnz	r4, 8004d68 <_malloc_r+0x88>
 8004d16:	4629      	mov	r1, r5
 8004d18:	4630      	mov	r0, r6
 8004d1a:	f7ff ffbf 	bl	8004c9c <sbrk_aligned>
 8004d1e:	1c43      	adds	r3, r0, #1
 8004d20:	4604      	mov	r4, r0
 8004d22:	d158      	bne.n	8004dd6 <_malloc_r+0xf6>
 8004d24:	f8d8 4000 	ldr.w	r4, [r8]
 8004d28:	4627      	mov	r7, r4
 8004d2a:	2f00      	cmp	r7, #0
 8004d2c:	d143      	bne.n	8004db6 <_malloc_r+0xd6>
 8004d2e:	2c00      	cmp	r4, #0
 8004d30:	d04b      	beq.n	8004dca <_malloc_r+0xea>
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	4639      	mov	r1, r7
 8004d36:	4630      	mov	r0, r6
 8004d38:	eb04 0903 	add.w	r9, r4, r3
 8004d3c:	f000 fc5a 	bl	80055f4 <_sbrk_r>
 8004d40:	4581      	cmp	r9, r0
 8004d42:	d142      	bne.n	8004dca <_malloc_r+0xea>
 8004d44:	6821      	ldr	r1, [r4, #0]
 8004d46:	1a6d      	subs	r5, r5, r1
 8004d48:	4629      	mov	r1, r5
 8004d4a:	4630      	mov	r0, r6
 8004d4c:	f7ff ffa6 	bl	8004c9c <sbrk_aligned>
 8004d50:	3001      	adds	r0, #1
 8004d52:	d03a      	beq.n	8004dca <_malloc_r+0xea>
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	442b      	add	r3, r5
 8004d58:	6023      	str	r3, [r4, #0]
 8004d5a:	f8d8 3000 	ldr.w	r3, [r8]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	bb62      	cbnz	r2, 8004dbc <_malloc_r+0xdc>
 8004d62:	f8c8 7000 	str.w	r7, [r8]
 8004d66:	e00f      	b.n	8004d88 <_malloc_r+0xa8>
 8004d68:	6822      	ldr	r2, [r4, #0]
 8004d6a:	1b52      	subs	r2, r2, r5
 8004d6c:	d420      	bmi.n	8004db0 <_malloc_r+0xd0>
 8004d6e:	2a0b      	cmp	r2, #11
 8004d70:	d917      	bls.n	8004da2 <_malloc_r+0xc2>
 8004d72:	1961      	adds	r1, r4, r5
 8004d74:	42a3      	cmp	r3, r4
 8004d76:	6025      	str	r5, [r4, #0]
 8004d78:	bf18      	it	ne
 8004d7a:	6059      	strne	r1, [r3, #4]
 8004d7c:	6863      	ldr	r3, [r4, #4]
 8004d7e:	bf08      	it	eq
 8004d80:	f8c8 1000 	streq.w	r1, [r8]
 8004d84:	5162      	str	r2, [r4, r5]
 8004d86:	604b      	str	r3, [r1, #4]
 8004d88:	4630      	mov	r0, r6
 8004d8a:	f000 fa69 	bl	8005260 <__malloc_unlock>
 8004d8e:	f104 000b 	add.w	r0, r4, #11
 8004d92:	1d23      	adds	r3, r4, #4
 8004d94:	f020 0007 	bic.w	r0, r0, #7
 8004d98:	1ac2      	subs	r2, r0, r3
 8004d9a:	bf1c      	itt	ne
 8004d9c:	1a1b      	subne	r3, r3, r0
 8004d9e:	50a3      	strne	r3, [r4, r2]
 8004da0:	e7af      	b.n	8004d02 <_malloc_r+0x22>
 8004da2:	6862      	ldr	r2, [r4, #4]
 8004da4:	42a3      	cmp	r3, r4
 8004da6:	bf0c      	ite	eq
 8004da8:	f8c8 2000 	streq.w	r2, [r8]
 8004dac:	605a      	strne	r2, [r3, #4]
 8004dae:	e7eb      	b.n	8004d88 <_malloc_r+0xa8>
 8004db0:	4623      	mov	r3, r4
 8004db2:	6864      	ldr	r4, [r4, #4]
 8004db4:	e7ae      	b.n	8004d14 <_malloc_r+0x34>
 8004db6:	463c      	mov	r4, r7
 8004db8:	687f      	ldr	r7, [r7, #4]
 8004dba:	e7b6      	b.n	8004d2a <_malloc_r+0x4a>
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	42a3      	cmp	r3, r4
 8004dc2:	d1fb      	bne.n	8004dbc <_malloc_r+0xdc>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	6053      	str	r3, [r2, #4]
 8004dc8:	e7de      	b.n	8004d88 <_malloc_r+0xa8>
 8004dca:	230c      	movs	r3, #12
 8004dcc:	6033      	str	r3, [r6, #0]
 8004dce:	4630      	mov	r0, r6
 8004dd0:	f000 fa46 	bl	8005260 <__malloc_unlock>
 8004dd4:	e794      	b.n	8004d00 <_malloc_r+0x20>
 8004dd6:	6005      	str	r5, [r0, #0]
 8004dd8:	e7d6      	b.n	8004d88 <_malloc_r+0xa8>
 8004dda:	bf00      	nop
 8004ddc:	200004b4 	.word	0x200004b4

08004de0 <_printf_common>:
 8004de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004de4:	4616      	mov	r6, r2
 8004de6:	4698      	mov	r8, r3
 8004de8:	688a      	ldr	r2, [r1, #8]
 8004dea:	690b      	ldr	r3, [r1, #16]
 8004dec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004df0:	4293      	cmp	r3, r2
 8004df2:	bfb8      	it	lt
 8004df4:	4613      	movlt	r3, r2
 8004df6:	6033      	str	r3, [r6, #0]
 8004df8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004dfc:	4607      	mov	r7, r0
 8004dfe:	460c      	mov	r4, r1
 8004e00:	b10a      	cbz	r2, 8004e06 <_printf_common+0x26>
 8004e02:	3301      	adds	r3, #1
 8004e04:	6033      	str	r3, [r6, #0]
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	0699      	lsls	r1, r3, #26
 8004e0a:	bf42      	ittt	mi
 8004e0c:	6833      	ldrmi	r3, [r6, #0]
 8004e0e:	3302      	addmi	r3, #2
 8004e10:	6033      	strmi	r3, [r6, #0]
 8004e12:	6825      	ldr	r5, [r4, #0]
 8004e14:	f015 0506 	ands.w	r5, r5, #6
 8004e18:	d106      	bne.n	8004e28 <_printf_common+0x48>
 8004e1a:	f104 0a19 	add.w	sl, r4, #25
 8004e1e:	68e3      	ldr	r3, [r4, #12]
 8004e20:	6832      	ldr	r2, [r6, #0]
 8004e22:	1a9b      	subs	r3, r3, r2
 8004e24:	42ab      	cmp	r3, r5
 8004e26:	dc26      	bgt.n	8004e76 <_printf_common+0x96>
 8004e28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e2c:	6822      	ldr	r2, [r4, #0]
 8004e2e:	3b00      	subs	r3, #0
 8004e30:	bf18      	it	ne
 8004e32:	2301      	movne	r3, #1
 8004e34:	0692      	lsls	r2, r2, #26
 8004e36:	d42b      	bmi.n	8004e90 <_printf_common+0xb0>
 8004e38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e3c:	4641      	mov	r1, r8
 8004e3e:	4638      	mov	r0, r7
 8004e40:	47c8      	blx	r9
 8004e42:	3001      	adds	r0, #1
 8004e44:	d01e      	beq.n	8004e84 <_printf_common+0xa4>
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	6922      	ldr	r2, [r4, #16]
 8004e4a:	f003 0306 	and.w	r3, r3, #6
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	bf02      	ittt	eq
 8004e52:	68e5      	ldreq	r5, [r4, #12]
 8004e54:	6833      	ldreq	r3, [r6, #0]
 8004e56:	1aed      	subeq	r5, r5, r3
 8004e58:	68a3      	ldr	r3, [r4, #8]
 8004e5a:	bf0c      	ite	eq
 8004e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e60:	2500      	movne	r5, #0
 8004e62:	4293      	cmp	r3, r2
 8004e64:	bfc4      	itt	gt
 8004e66:	1a9b      	subgt	r3, r3, r2
 8004e68:	18ed      	addgt	r5, r5, r3
 8004e6a:	2600      	movs	r6, #0
 8004e6c:	341a      	adds	r4, #26
 8004e6e:	42b5      	cmp	r5, r6
 8004e70:	d11a      	bne.n	8004ea8 <_printf_common+0xc8>
 8004e72:	2000      	movs	r0, #0
 8004e74:	e008      	b.n	8004e88 <_printf_common+0xa8>
 8004e76:	2301      	movs	r3, #1
 8004e78:	4652      	mov	r2, sl
 8004e7a:	4641      	mov	r1, r8
 8004e7c:	4638      	mov	r0, r7
 8004e7e:	47c8      	blx	r9
 8004e80:	3001      	adds	r0, #1
 8004e82:	d103      	bne.n	8004e8c <_printf_common+0xac>
 8004e84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e8c:	3501      	adds	r5, #1
 8004e8e:	e7c6      	b.n	8004e1e <_printf_common+0x3e>
 8004e90:	18e1      	adds	r1, r4, r3
 8004e92:	1c5a      	adds	r2, r3, #1
 8004e94:	2030      	movs	r0, #48	@ 0x30
 8004e96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e9a:	4422      	add	r2, r4
 8004e9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ea0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004ea4:	3302      	adds	r3, #2
 8004ea6:	e7c7      	b.n	8004e38 <_printf_common+0x58>
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	4622      	mov	r2, r4
 8004eac:	4641      	mov	r1, r8
 8004eae:	4638      	mov	r0, r7
 8004eb0:	47c8      	blx	r9
 8004eb2:	3001      	adds	r0, #1
 8004eb4:	d0e6      	beq.n	8004e84 <_printf_common+0xa4>
 8004eb6:	3601      	adds	r6, #1
 8004eb8:	e7d9      	b.n	8004e6e <_printf_common+0x8e>
	...

08004ebc <_printf_i>:
 8004ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec0:	7e0f      	ldrb	r7, [r1, #24]
 8004ec2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ec4:	2f78      	cmp	r7, #120	@ 0x78
 8004ec6:	4691      	mov	r9, r2
 8004ec8:	4680      	mov	r8, r0
 8004eca:	460c      	mov	r4, r1
 8004ecc:	469a      	mov	sl, r3
 8004ece:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ed2:	d807      	bhi.n	8004ee4 <_printf_i+0x28>
 8004ed4:	2f62      	cmp	r7, #98	@ 0x62
 8004ed6:	d80a      	bhi.n	8004eee <_printf_i+0x32>
 8004ed8:	2f00      	cmp	r7, #0
 8004eda:	f000 80d2 	beq.w	8005082 <_printf_i+0x1c6>
 8004ede:	2f58      	cmp	r7, #88	@ 0x58
 8004ee0:	f000 80b9 	beq.w	8005056 <_printf_i+0x19a>
 8004ee4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ee8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004eec:	e03a      	b.n	8004f64 <_printf_i+0xa8>
 8004eee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ef2:	2b15      	cmp	r3, #21
 8004ef4:	d8f6      	bhi.n	8004ee4 <_printf_i+0x28>
 8004ef6:	a101      	add	r1, pc, #4	@ (adr r1, 8004efc <_printf_i+0x40>)
 8004ef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004efc:	08004f55 	.word	0x08004f55
 8004f00:	08004f69 	.word	0x08004f69
 8004f04:	08004ee5 	.word	0x08004ee5
 8004f08:	08004ee5 	.word	0x08004ee5
 8004f0c:	08004ee5 	.word	0x08004ee5
 8004f10:	08004ee5 	.word	0x08004ee5
 8004f14:	08004f69 	.word	0x08004f69
 8004f18:	08004ee5 	.word	0x08004ee5
 8004f1c:	08004ee5 	.word	0x08004ee5
 8004f20:	08004ee5 	.word	0x08004ee5
 8004f24:	08004ee5 	.word	0x08004ee5
 8004f28:	08005069 	.word	0x08005069
 8004f2c:	08004f93 	.word	0x08004f93
 8004f30:	08005023 	.word	0x08005023
 8004f34:	08004ee5 	.word	0x08004ee5
 8004f38:	08004ee5 	.word	0x08004ee5
 8004f3c:	0800508b 	.word	0x0800508b
 8004f40:	08004ee5 	.word	0x08004ee5
 8004f44:	08004f93 	.word	0x08004f93
 8004f48:	08004ee5 	.word	0x08004ee5
 8004f4c:	08004ee5 	.word	0x08004ee5
 8004f50:	0800502b 	.word	0x0800502b
 8004f54:	6833      	ldr	r3, [r6, #0]
 8004f56:	1d1a      	adds	r2, r3, #4
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	6032      	str	r2, [r6, #0]
 8004f5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f64:	2301      	movs	r3, #1
 8004f66:	e09d      	b.n	80050a4 <_printf_i+0x1e8>
 8004f68:	6833      	ldr	r3, [r6, #0]
 8004f6a:	6820      	ldr	r0, [r4, #0]
 8004f6c:	1d19      	adds	r1, r3, #4
 8004f6e:	6031      	str	r1, [r6, #0]
 8004f70:	0606      	lsls	r6, r0, #24
 8004f72:	d501      	bpl.n	8004f78 <_printf_i+0xbc>
 8004f74:	681d      	ldr	r5, [r3, #0]
 8004f76:	e003      	b.n	8004f80 <_printf_i+0xc4>
 8004f78:	0645      	lsls	r5, r0, #25
 8004f7a:	d5fb      	bpl.n	8004f74 <_printf_i+0xb8>
 8004f7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f80:	2d00      	cmp	r5, #0
 8004f82:	da03      	bge.n	8004f8c <_printf_i+0xd0>
 8004f84:	232d      	movs	r3, #45	@ 0x2d
 8004f86:	426d      	negs	r5, r5
 8004f88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f8c:	4859      	ldr	r0, [pc, #356]	@ (80050f4 <_printf_i+0x238>)
 8004f8e:	230a      	movs	r3, #10
 8004f90:	e011      	b.n	8004fb6 <_printf_i+0xfa>
 8004f92:	6821      	ldr	r1, [r4, #0]
 8004f94:	6833      	ldr	r3, [r6, #0]
 8004f96:	0608      	lsls	r0, r1, #24
 8004f98:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f9c:	d402      	bmi.n	8004fa4 <_printf_i+0xe8>
 8004f9e:	0649      	lsls	r1, r1, #25
 8004fa0:	bf48      	it	mi
 8004fa2:	b2ad      	uxthmi	r5, r5
 8004fa4:	2f6f      	cmp	r7, #111	@ 0x6f
 8004fa6:	4853      	ldr	r0, [pc, #332]	@ (80050f4 <_printf_i+0x238>)
 8004fa8:	6033      	str	r3, [r6, #0]
 8004faa:	bf14      	ite	ne
 8004fac:	230a      	movne	r3, #10
 8004fae:	2308      	moveq	r3, #8
 8004fb0:	2100      	movs	r1, #0
 8004fb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fb6:	6866      	ldr	r6, [r4, #4]
 8004fb8:	60a6      	str	r6, [r4, #8]
 8004fba:	2e00      	cmp	r6, #0
 8004fbc:	bfa2      	ittt	ge
 8004fbe:	6821      	ldrge	r1, [r4, #0]
 8004fc0:	f021 0104 	bicge.w	r1, r1, #4
 8004fc4:	6021      	strge	r1, [r4, #0]
 8004fc6:	b90d      	cbnz	r5, 8004fcc <_printf_i+0x110>
 8004fc8:	2e00      	cmp	r6, #0
 8004fca:	d04b      	beq.n	8005064 <_printf_i+0x1a8>
 8004fcc:	4616      	mov	r6, r2
 8004fce:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fd2:	fb03 5711 	mls	r7, r3, r1, r5
 8004fd6:	5dc7      	ldrb	r7, [r0, r7]
 8004fd8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fdc:	462f      	mov	r7, r5
 8004fde:	42bb      	cmp	r3, r7
 8004fe0:	460d      	mov	r5, r1
 8004fe2:	d9f4      	bls.n	8004fce <_printf_i+0x112>
 8004fe4:	2b08      	cmp	r3, #8
 8004fe6:	d10b      	bne.n	8005000 <_printf_i+0x144>
 8004fe8:	6823      	ldr	r3, [r4, #0]
 8004fea:	07df      	lsls	r7, r3, #31
 8004fec:	d508      	bpl.n	8005000 <_printf_i+0x144>
 8004fee:	6923      	ldr	r3, [r4, #16]
 8004ff0:	6861      	ldr	r1, [r4, #4]
 8004ff2:	4299      	cmp	r1, r3
 8004ff4:	bfde      	ittt	le
 8004ff6:	2330      	movle	r3, #48	@ 0x30
 8004ff8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ffc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005000:	1b92      	subs	r2, r2, r6
 8005002:	6122      	str	r2, [r4, #16]
 8005004:	f8cd a000 	str.w	sl, [sp]
 8005008:	464b      	mov	r3, r9
 800500a:	aa03      	add	r2, sp, #12
 800500c:	4621      	mov	r1, r4
 800500e:	4640      	mov	r0, r8
 8005010:	f7ff fee6 	bl	8004de0 <_printf_common>
 8005014:	3001      	adds	r0, #1
 8005016:	d14a      	bne.n	80050ae <_printf_i+0x1f2>
 8005018:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800501c:	b004      	add	sp, #16
 800501e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	f043 0320 	orr.w	r3, r3, #32
 8005028:	6023      	str	r3, [r4, #0]
 800502a:	4833      	ldr	r0, [pc, #204]	@ (80050f8 <_printf_i+0x23c>)
 800502c:	2778      	movs	r7, #120	@ 0x78
 800502e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005032:	6823      	ldr	r3, [r4, #0]
 8005034:	6831      	ldr	r1, [r6, #0]
 8005036:	061f      	lsls	r7, r3, #24
 8005038:	f851 5b04 	ldr.w	r5, [r1], #4
 800503c:	d402      	bmi.n	8005044 <_printf_i+0x188>
 800503e:	065f      	lsls	r7, r3, #25
 8005040:	bf48      	it	mi
 8005042:	b2ad      	uxthmi	r5, r5
 8005044:	6031      	str	r1, [r6, #0]
 8005046:	07d9      	lsls	r1, r3, #31
 8005048:	bf44      	itt	mi
 800504a:	f043 0320 	orrmi.w	r3, r3, #32
 800504e:	6023      	strmi	r3, [r4, #0]
 8005050:	b11d      	cbz	r5, 800505a <_printf_i+0x19e>
 8005052:	2310      	movs	r3, #16
 8005054:	e7ac      	b.n	8004fb0 <_printf_i+0xf4>
 8005056:	4827      	ldr	r0, [pc, #156]	@ (80050f4 <_printf_i+0x238>)
 8005058:	e7e9      	b.n	800502e <_printf_i+0x172>
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	f023 0320 	bic.w	r3, r3, #32
 8005060:	6023      	str	r3, [r4, #0]
 8005062:	e7f6      	b.n	8005052 <_printf_i+0x196>
 8005064:	4616      	mov	r6, r2
 8005066:	e7bd      	b.n	8004fe4 <_printf_i+0x128>
 8005068:	6833      	ldr	r3, [r6, #0]
 800506a:	6825      	ldr	r5, [r4, #0]
 800506c:	6961      	ldr	r1, [r4, #20]
 800506e:	1d18      	adds	r0, r3, #4
 8005070:	6030      	str	r0, [r6, #0]
 8005072:	062e      	lsls	r6, r5, #24
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	d501      	bpl.n	800507c <_printf_i+0x1c0>
 8005078:	6019      	str	r1, [r3, #0]
 800507a:	e002      	b.n	8005082 <_printf_i+0x1c6>
 800507c:	0668      	lsls	r0, r5, #25
 800507e:	d5fb      	bpl.n	8005078 <_printf_i+0x1bc>
 8005080:	8019      	strh	r1, [r3, #0]
 8005082:	2300      	movs	r3, #0
 8005084:	6123      	str	r3, [r4, #16]
 8005086:	4616      	mov	r6, r2
 8005088:	e7bc      	b.n	8005004 <_printf_i+0x148>
 800508a:	6833      	ldr	r3, [r6, #0]
 800508c:	1d1a      	adds	r2, r3, #4
 800508e:	6032      	str	r2, [r6, #0]
 8005090:	681e      	ldr	r6, [r3, #0]
 8005092:	6862      	ldr	r2, [r4, #4]
 8005094:	2100      	movs	r1, #0
 8005096:	4630      	mov	r0, r6
 8005098:	f7fb f8aa 	bl	80001f0 <memchr>
 800509c:	b108      	cbz	r0, 80050a2 <_printf_i+0x1e6>
 800509e:	1b80      	subs	r0, r0, r6
 80050a0:	6060      	str	r0, [r4, #4]
 80050a2:	6863      	ldr	r3, [r4, #4]
 80050a4:	6123      	str	r3, [r4, #16]
 80050a6:	2300      	movs	r3, #0
 80050a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050ac:	e7aa      	b.n	8005004 <_printf_i+0x148>
 80050ae:	6923      	ldr	r3, [r4, #16]
 80050b0:	4632      	mov	r2, r6
 80050b2:	4649      	mov	r1, r9
 80050b4:	4640      	mov	r0, r8
 80050b6:	47d0      	blx	sl
 80050b8:	3001      	adds	r0, #1
 80050ba:	d0ad      	beq.n	8005018 <_printf_i+0x15c>
 80050bc:	6823      	ldr	r3, [r4, #0]
 80050be:	079b      	lsls	r3, r3, #30
 80050c0:	d413      	bmi.n	80050ea <_printf_i+0x22e>
 80050c2:	68e0      	ldr	r0, [r4, #12]
 80050c4:	9b03      	ldr	r3, [sp, #12]
 80050c6:	4298      	cmp	r0, r3
 80050c8:	bfb8      	it	lt
 80050ca:	4618      	movlt	r0, r3
 80050cc:	e7a6      	b.n	800501c <_printf_i+0x160>
 80050ce:	2301      	movs	r3, #1
 80050d0:	4632      	mov	r2, r6
 80050d2:	4649      	mov	r1, r9
 80050d4:	4640      	mov	r0, r8
 80050d6:	47d0      	blx	sl
 80050d8:	3001      	adds	r0, #1
 80050da:	d09d      	beq.n	8005018 <_printf_i+0x15c>
 80050dc:	3501      	adds	r5, #1
 80050de:	68e3      	ldr	r3, [r4, #12]
 80050e0:	9903      	ldr	r1, [sp, #12]
 80050e2:	1a5b      	subs	r3, r3, r1
 80050e4:	42ab      	cmp	r3, r5
 80050e6:	dcf2      	bgt.n	80050ce <_printf_i+0x212>
 80050e8:	e7eb      	b.n	80050c2 <_printf_i+0x206>
 80050ea:	2500      	movs	r5, #0
 80050ec:	f104 0619 	add.w	r6, r4, #25
 80050f0:	e7f5      	b.n	80050de <_printf_i+0x222>
 80050f2:	bf00      	nop
 80050f4:	080057fd 	.word	0x080057fd
 80050f8:	0800580e 	.word	0x0800580e

080050fc <__sflush_r>:
 80050fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005104:	0716      	lsls	r6, r2, #28
 8005106:	4605      	mov	r5, r0
 8005108:	460c      	mov	r4, r1
 800510a:	d454      	bmi.n	80051b6 <__sflush_r+0xba>
 800510c:	684b      	ldr	r3, [r1, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	dc02      	bgt.n	8005118 <__sflush_r+0x1c>
 8005112:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005114:	2b00      	cmp	r3, #0
 8005116:	dd48      	ble.n	80051aa <__sflush_r+0xae>
 8005118:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800511a:	2e00      	cmp	r6, #0
 800511c:	d045      	beq.n	80051aa <__sflush_r+0xae>
 800511e:	2300      	movs	r3, #0
 8005120:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005124:	682f      	ldr	r7, [r5, #0]
 8005126:	6a21      	ldr	r1, [r4, #32]
 8005128:	602b      	str	r3, [r5, #0]
 800512a:	d030      	beq.n	800518e <__sflush_r+0x92>
 800512c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800512e:	89a3      	ldrh	r3, [r4, #12]
 8005130:	0759      	lsls	r1, r3, #29
 8005132:	d505      	bpl.n	8005140 <__sflush_r+0x44>
 8005134:	6863      	ldr	r3, [r4, #4]
 8005136:	1ad2      	subs	r2, r2, r3
 8005138:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800513a:	b10b      	cbz	r3, 8005140 <__sflush_r+0x44>
 800513c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800513e:	1ad2      	subs	r2, r2, r3
 8005140:	2300      	movs	r3, #0
 8005142:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005144:	6a21      	ldr	r1, [r4, #32]
 8005146:	4628      	mov	r0, r5
 8005148:	47b0      	blx	r6
 800514a:	1c43      	adds	r3, r0, #1
 800514c:	89a3      	ldrh	r3, [r4, #12]
 800514e:	d106      	bne.n	800515e <__sflush_r+0x62>
 8005150:	6829      	ldr	r1, [r5, #0]
 8005152:	291d      	cmp	r1, #29
 8005154:	d82b      	bhi.n	80051ae <__sflush_r+0xb2>
 8005156:	4a2a      	ldr	r2, [pc, #168]	@ (8005200 <__sflush_r+0x104>)
 8005158:	410a      	asrs	r2, r1
 800515a:	07d6      	lsls	r6, r2, #31
 800515c:	d427      	bmi.n	80051ae <__sflush_r+0xb2>
 800515e:	2200      	movs	r2, #0
 8005160:	6062      	str	r2, [r4, #4]
 8005162:	04d9      	lsls	r1, r3, #19
 8005164:	6922      	ldr	r2, [r4, #16]
 8005166:	6022      	str	r2, [r4, #0]
 8005168:	d504      	bpl.n	8005174 <__sflush_r+0x78>
 800516a:	1c42      	adds	r2, r0, #1
 800516c:	d101      	bne.n	8005172 <__sflush_r+0x76>
 800516e:	682b      	ldr	r3, [r5, #0]
 8005170:	b903      	cbnz	r3, 8005174 <__sflush_r+0x78>
 8005172:	6560      	str	r0, [r4, #84]	@ 0x54
 8005174:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005176:	602f      	str	r7, [r5, #0]
 8005178:	b1b9      	cbz	r1, 80051aa <__sflush_r+0xae>
 800517a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800517e:	4299      	cmp	r1, r3
 8005180:	d002      	beq.n	8005188 <__sflush_r+0x8c>
 8005182:	4628      	mov	r0, r5
 8005184:	f000 fa58 	bl	8005638 <_free_r>
 8005188:	2300      	movs	r3, #0
 800518a:	6363      	str	r3, [r4, #52]	@ 0x34
 800518c:	e00d      	b.n	80051aa <__sflush_r+0xae>
 800518e:	2301      	movs	r3, #1
 8005190:	4628      	mov	r0, r5
 8005192:	47b0      	blx	r6
 8005194:	4602      	mov	r2, r0
 8005196:	1c50      	adds	r0, r2, #1
 8005198:	d1c9      	bne.n	800512e <__sflush_r+0x32>
 800519a:	682b      	ldr	r3, [r5, #0]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0c6      	beq.n	800512e <__sflush_r+0x32>
 80051a0:	2b1d      	cmp	r3, #29
 80051a2:	d001      	beq.n	80051a8 <__sflush_r+0xac>
 80051a4:	2b16      	cmp	r3, #22
 80051a6:	d11e      	bne.n	80051e6 <__sflush_r+0xea>
 80051a8:	602f      	str	r7, [r5, #0]
 80051aa:	2000      	movs	r0, #0
 80051ac:	e022      	b.n	80051f4 <__sflush_r+0xf8>
 80051ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051b2:	b21b      	sxth	r3, r3
 80051b4:	e01b      	b.n	80051ee <__sflush_r+0xf2>
 80051b6:	690f      	ldr	r7, [r1, #16]
 80051b8:	2f00      	cmp	r7, #0
 80051ba:	d0f6      	beq.n	80051aa <__sflush_r+0xae>
 80051bc:	0793      	lsls	r3, r2, #30
 80051be:	680e      	ldr	r6, [r1, #0]
 80051c0:	bf08      	it	eq
 80051c2:	694b      	ldreq	r3, [r1, #20]
 80051c4:	600f      	str	r7, [r1, #0]
 80051c6:	bf18      	it	ne
 80051c8:	2300      	movne	r3, #0
 80051ca:	eba6 0807 	sub.w	r8, r6, r7
 80051ce:	608b      	str	r3, [r1, #8]
 80051d0:	f1b8 0f00 	cmp.w	r8, #0
 80051d4:	dde9      	ble.n	80051aa <__sflush_r+0xae>
 80051d6:	6a21      	ldr	r1, [r4, #32]
 80051d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80051da:	4643      	mov	r3, r8
 80051dc:	463a      	mov	r2, r7
 80051de:	4628      	mov	r0, r5
 80051e0:	47b0      	blx	r6
 80051e2:	2800      	cmp	r0, #0
 80051e4:	dc08      	bgt.n	80051f8 <__sflush_r+0xfc>
 80051e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051ee:	81a3      	strh	r3, [r4, #12]
 80051f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051f8:	4407      	add	r7, r0
 80051fa:	eba8 0800 	sub.w	r8, r8, r0
 80051fe:	e7e7      	b.n	80051d0 <__sflush_r+0xd4>
 8005200:	dfbffffe 	.word	0xdfbffffe

08005204 <_fflush_r>:
 8005204:	b538      	push	{r3, r4, r5, lr}
 8005206:	690b      	ldr	r3, [r1, #16]
 8005208:	4605      	mov	r5, r0
 800520a:	460c      	mov	r4, r1
 800520c:	b913      	cbnz	r3, 8005214 <_fflush_r+0x10>
 800520e:	2500      	movs	r5, #0
 8005210:	4628      	mov	r0, r5
 8005212:	bd38      	pop	{r3, r4, r5, pc}
 8005214:	b118      	cbz	r0, 800521e <_fflush_r+0x1a>
 8005216:	6a03      	ldr	r3, [r0, #32]
 8005218:	b90b      	cbnz	r3, 800521e <_fflush_r+0x1a>
 800521a:	f7ff fb1b 	bl	8004854 <__sinit>
 800521e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d0f3      	beq.n	800520e <_fflush_r+0xa>
 8005226:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005228:	07d0      	lsls	r0, r2, #31
 800522a:	d404      	bmi.n	8005236 <_fflush_r+0x32>
 800522c:	0599      	lsls	r1, r3, #22
 800522e:	d402      	bmi.n	8005236 <_fflush_r+0x32>
 8005230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005232:	f7ff fbf0 	bl	8004a16 <__retarget_lock_acquire_recursive>
 8005236:	4628      	mov	r0, r5
 8005238:	4621      	mov	r1, r4
 800523a:	f7ff ff5f 	bl	80050fc <__sflush_r>
 800523e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005240:	07da      	lsls	r2, r3, #31
 8005242:	4605      	mov	r5, r0
 8005244:	d4e4      	bmi.n	8005210 <_fflush_r+0xc>
 8005246:	89a3      	ldrh	r3, [r4, #12]
 8005248:	059b      	lsls	r3, r3, #22
 800524a:	d4e1      	bmi.n	8005210 <_fflush_r+0xc>
 800524c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800524e:	f7ff fbe3 	bl	8004a18 <__retarget_lock_release_recursive>
 8005252:	e7dd      	b.n	8005210 <_fflush_r+0xc>

08005254 <__malloc_lock>:
 8005254:	4801      	ldr	r0, [pc, #4]	@ (800525c <__malloc_lock+0x8>)
 8005256:	f7ff bbde 	b.w	8004a16 <__retarget_lock_acquire_recursive>
 800525a:	bf00      	nop
 800525c:	200004ac 	.word	0x200004ac

08005260 <__malloc_unlock>:
 8005260:	4801      	ldr	r0, [pc, #4]	@ (8005268 <__malloc_unlock+0x8>)
 8005262:	f7ff bbd9 	b.w	8004a18 <__retarget_lock_release_recursive>
 8005266:	bf00      	nop
 8005268:	200004ac 	.word	0x200004ac

0800526c <__sread>:
 800526c:	b510      	push	{r4, lr}
 800526e:	460c      	mov	r4, r1
 8005270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005274:	f000 f9ac 	bl	80055d0 <_read_r>
 8005278:	2800      	cmp	r0, #0
 800527a:	bfab      	itete	ge
 800527c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800527e:	89a3      	ldrhlt	r3, [r4, #12]
 8005280:	181b      	addge	r3, r3, r0
 8005282:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005286:	bfac      	ite	ge
 8005288:	6563      	strge	r3, [r4, #84]	@ 0x54
 800528a:	81a3      	strhlt	r3, [r4, #12]
 800528c:	bd10      	pop	{r4, pc}

0800528e <__swrite>:
 800528e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005292:	461f      	mov	r7, r3
 8005294:	898b      	ldrh	r3, [r1, #12]
 8005296:	05db      	lsls	r3, r3, #23
 8005298:	4605      	mov	r5, r0
 800529a:	460c      	mov	r4, r1
 800529c:	4616      	mov	r6, r2
 800529e:	d505      	bpl.n	80052ac <__swrite+0x1e>
 80052a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052a4:	2302      	movs	r3, #2
 80052a6:	2200      	movs	r2, #0
 80052a8:	f000 f980 	bl	80055ac <_lseek_r>
 80052ac:	89a3      	ldrh	r3, [r4, #12]
 80052ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052b6:	81a3      	strh	r3, [r4, #12]
 80052b8:	4632      	mov	r2, r6
 80052ba:	463b      	mov	r3, r7
 80052bc:	4628      	mov	r0, r5
 80052be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052c2:	f000 b9a7 	b.w	8005614 <_write_r>

080052c6 <__sseek>:
 80052c6:	b510      	push	{r4, lr}
 80052c8:	460c      	mov	r4, r1
 80052ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ce:	f000 f96d 	bl	80055ac <_lseek_r>
 80052d2:	1c43      	adds	r3, r0, #1
 80052d4:	89a3      	ldrh	r3, [r4, #12]
 80052d6:	bf15      	itete	ne
 80052d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80052da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80052de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80052e2:	81a3      	strheq	r3, [r4, #12]
 80052e4:	bf18      	it	ne
 80052e6:	81a3      	strhne	r3, [r4, #12]
 80052e8:	bd10      	pop	{r4, pc}

080052ea <__sclose>:
 80052ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ee:	f000 b92b 	b.w	8005548 <_close_r>

080052f2 <__swbuf_r>:
 80052f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f4:	460e      	mov	r6, r1
 80052f6:	4614      	mov	r4, r2
 80052f8:	4605      	mov	r5, r0
 80052fa:	b118      	cbz	r0, 8005304 <__swbuf_r+0x12>
 80052fc:	6a03      	ldr	r3, [r0, #32]
 80052fe:	b90b      	cbnz	r3, 8005304 <__swbuf_r+0x12>
 8005300:	f7ff faa8 	bl	8004854 <__sinit>
 8005304:	69a3      	ldr	r3, [r4, #24]
 8005306:	60a3      	str	r3, [r4, #8]
 8005308:	89a3      	ldrh	r3, [r4, #12]
 800530a:	071a      	lsls	r2, r3, #28
 800530c:	d501      	bpl.n	8005312 <__swbuf_r+0x20>
 800530e:	6923      	ldr	r3, [r4, #16]
 8005310:	b943      	cbnz	r3, 8005324 <__swbuf_r+0x32>
 8005312:	4621      	mov	r1, r4
 8005314:	4628      	mov	r0, r5
 8005316:	f000 f82b 	bl	8005370 <__swsetup_r>
 800531a:	b118      	cbz	r0, 8005324 <__swbuf_r+0x32>
 800531c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005320:	4638      	mov	r0, r7
 8005322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005324:	6823      	ldr	r3, [r4, #0]
 8005326:	6922      	ldr	r2, [r4, #16]
 8005328:	1a98      	subs	r0, r3, r2
 800532a:	6963      	ldr	r3, [r4, #20]
 800532c:	b2f6      	uxtb	r6, r6
 800532e:	4283      	cmp	r3, r0
 8005330:	4637      	mov	r7, r6
 8005332:	dc05      	bgt.n	8005340 <__swbuf_r+0x4e>
 8005334:	4621      	mov	r1, r4
 8005336:	4628      	mov	r0, r5
 8005338:	f7ff ff64 	bl	8005204 <_fflush_r>
 800533c:	2800      	cmp	r0, #0
 800533e:	d1ed      	bne.n	800531c <__swbuf_r+0x2a>
 8005340:	68a3      	ldr	r3, [r4, #8]
 8005342:	3b01      	subs	r3, #1
 8005344:	60a3      	str	r3, [r4, #8]
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	1c5a      	adds	r2, r3, #1
 800534a:	6022      	str	r2, [r4, #0]
 800534c:	701e      	strb	r6, [r3, #0]
 800534e:	6962      	ldr	r2, [r4, #20]
 8005350:	1c43      	adds	r3, r0, #1
 8005352:	429a      	cmp	r2, r3
 8005354:	d004      	beq.n	8005360 <__swbuf_r+0x6e>
 8005356:	89a3      	ldrh	r3, [r4, #12]
 8005358:	07db      	lsls	r3, r3, #31
 800535a:	d5e1      	bpl.n	8005320 <__swbuf_r+0x2e>
 800535c:	2e0a      	cmp	r6, #10
 800535e:	d1df      	bne.n	8005320 <__swbuf_r+0x2e>
 8005360:	4621      	mov	r1, r4
 8005362:	4628      	mov	r0, r5
 8005364:	f7ff ff4e 	bl	8005204 <_fflush_r>
 8005368:	2800      	cmp	r0, #0
 800536a:	d0d9      	beq.n	8005320 <__swbuf_r+0x2e>
 800536c:	e7d6      	b.n	800531c <__swbuf_r+0x2a>
	...

08005370 <__swsetup_r>:
 8005370:	b538      	push	{r3, r4, r5, lr}
 8005372:	4b29      	ldr	r3, [pc, #164]	@ (8005418 <__swsetup_r+0xa8>)
 8005374:	4605      	mov	r5, r0
 8005376:	6818      	ldr	r0, [r3, #0]
 8005378:	460c      	mov	r4, r1
 800537a:	b118      	cbz	r0, 8005384 <__swsetup_r+0x14>
 800537c:	6a03      	ldr	r3, [r0, #32]
 800537e:	b90b      	cbnz	r3, 8005384 <__swsetup_r+0x14>
 8005380:	f7ff fa68 	bl	8004854 <__sinit>
 8005384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005388:	0719      	lsls	r1, r3, #28
 800538a:	d422      	bmi.n	80053d2 <__swsetup_r+0x62>
 800538c:	06da      	lsls	r2, r3, #27
 800538e:	d407      	bmi.n	80053a0 <__swsetup_r+0x30>
 8005390:	2209      	movs	r2, #9
 8005392:	602a      	str	r2, [r5, #0]
 8005394:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005398:	81a3      	strh	r3, [r4, #12]
 800539a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800539e:	e033      	b.n	8005408 <__swsetup_r+0x98>
 80053a0:	0758      	lsls	r0, r3, #29
 80053a2:	d512      	bpl.n	80053ca <__swsetup_r+0x5a>
 80053a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053a6:	b141      	cbz	r1, 80053ba <__swsetup_r+0x4a>
 80053a8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80053ac:	4299      	cmp	r1, r3
 80053ae:	d002      	beq.n	80053b6 <__swsetup_r+0x46>
 80053b0:	4628      	mov	r0, r5
 80053b2:	f000 f941 	bl	8005638 <_free_r>
 80053b6:	2300      	movs	r3, #0
 80053b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80053ba:	89a3      	ldrh	r3, [r4, #12]
 80053bc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80053c0:	81a3      	strh	r3, [r4, #12]
 80053c2:	2300      	movs	r3, #0
 80053c4:	6063      	str	r3, [r4, #4]
 80053c6:	6923      	ldr	r3, [r4, #16]
 80053c8:	6023      	str	r3, [r4, #0]
 80053ca:	89a3      	ldrh	r3, [r4, #12]
 80053cc:	f043 0308 	orr.w	r3, r3, #8
 80053d0:	81a3      	strh	r3, [r4, #12]
 80053d2:	6923      	ldr	r3, [r4, #16]
 80053d4:	b94b      	cbnz	r3, 80053ea <__swsetup_r+0x7a>
 80053d6:	89a3      	ldrh	r3, [r4, #12]
 80053d8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80053dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80053e0:	d003      	beq.n	80053ea <__swsetup_r+0x7a>
 80053e2:	4621      	mov	r1, r4
 80053e4:	4628      	mov	r0, r5
 80053e6:	f000 f83f 	bl	8005468 <__smakebuf_r>
 80053ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053ee:	f013 0201 	ands.w	r2, r3, #1
 80053f2:	d00a      	beq.n	800540a <__swsetup_r+0x9a>
 80053f4:	2200      	movs	r2, #0
 80053f6:	60a2      	str	r2, [r4, #8]
 80053f8:	6962      	ldr	r2, [r4, #20]
 80053fa:	4252      	negs	r2, r2
 80053fc:	61a2      	str	r2, [r4, #24]
 80053fe:	6922      	ldr	r2, [r4, #16]
 8005400:	b942      	cbnz	r2, 8005414 <__swsetup_r+0xa4>
 8005402:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005406:	d1c5      	bne.n	8005394 <__swsetup_r+0x24>
 8005408:	bd38      	pop	{r3, r4, r5, pc}
 800540a:	0799      	lsls	r1, r3, #30
 800540c:	bf58      	it	pl
 800540e:	6962      	ldrpl	r2, [r4, #20]
 8005410:	60a2      	str	r2, [r4, #8]
 8005412:	e7f4      	b.n	80053fe <__swsetup_r+0x8e>
 8005414:	2000      	movs	r0, #0
 8005416:	e7f7      	b.n	8005408 <__swsetup_r+0x98>
 8005418:	20000018 	.word	0x20000018

0800541c <__swhatbuf_r>:
 800541c:	b570      	push	{r4, r5, r6, lr}
 800541e:	460c      	mov	r4, r1
 8005420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005424:	2900      	cmp	r1, #0
 8005426:	b096      	sub	sp, #88	@ 0x58
 8005428:	4615      	mov	r5, r2
 800542a:	461e      	mov	r6, r3
 800542c:	da0d      	bge.n	800544a <__swhatbuf_r+0x2e>
 800542e:	89a3      	ldrh	r3, [r4, #12]
 8005430:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005434:	f04f 0100 	mov.w	r1, #0
 8005438:	bf14      	ite	ne
 800543a:	2340      	movne	r3, #64	@ 0x40
 800543c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005440:	2000      	movs	r0, #0
 8005442:	6031      	str	r1, [r6, #0]
 8005444:	602b      	str	r3, [r5, #0]
 8005446:	b016      	add	sp, #88	@ 0x58
 8005448:	bd70      	pop	{r4, r5, r6, pc}
 800544a:	466a      	mov	r2, sp
 800544c:	f000 f88c 	bl	8005568 <_fstat_r>
 8005450:	2800      	cmp	r0, #0
 8005452:	dbec      	blt.n	800542e <__swhatbuf_r+0x12>
 8005454:	9901      	ldr	r1, [sp, #4]
 8005456:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800545a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800545e:	4259      	negs	r1, r3
 8005460:	4159      	adcs	r1, r3
 8005462:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005466:	e7eb      	b.n	8005440 <__swhatbuf_r+0x24>

08005468 <__smakebuf_r>:
 8005468:	898b      	ldrh	r3, [r1, #12]
 800546a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800546c:	079d      	lsls	r5, r3, #30
 800546e:	4606      	mov	r6, r0
 8005470:	460c      	mov	r4, r1
 8005472:	d507      	bpl.n	8005484 <__smakebuf_r+0x1c>
 8005474:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005478:	6023      	str	r3, [r4, #0]
 800547a:	6123      	str	r3, [r4, #16]
 800547c:	2301      	movs	r3, #1
 800547e:	6163      	str	r3, [r4, #20]
 8005480:	b003      	add	sp, #12
 8005482:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005484:	ab01      	add	r3, sp, #4
 8005486:	466a      	mov	r2, sp
 8005488:	f7ff ffc8 	bl	800541c <__swhatbuf_r>
 800548c:	9f00      	ldr	r7, [sp, #0]
 800548e:	4605      	mov	r5, r0
 8005490:	4639      	mov	r1, r7
 8005492:	4630      	mov	r0, r6
 8005494:	f7ff fc24 	bl	8004ce0 <_malloc_r>
 8005498:	b948      	cbnz	r0, 80054ae <__smakebuf_r+0x46>
 800549a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800549e:	059a      	lsls	r2, r3, #22
 80054a0:	d4ee      	bmi.n	8005480 <__smakebuf_r+0x18>
 80054a2:	f023 0303 	bic.w	r3, r3, #3
 80054a6:	f043 0302 	orr.w	r3, r3, #2
 80054aa:	81a3      	strh	r3, [r4, #12]
 80054ac:	e7e2      	b.n	8005474 <__smakebuf_r+0xc>
 80054ae:	89a3      	ldrh	r3, [r4, #12]
 80054b0:	6020      	str	r0, [r4, #0]
 80054b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054b6:	81a3      	strh	r3, [r4, #12]
 80054b8:	9b01      	ldr	r3, [sp, #4]
 80054ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80054be:	b15b      	cbz	r3, 80054d8 <__smakebuf_r+0x70>
 80054c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054c4:	4630      	mov	r0, r6
 80054c6:	f000 f861 	bl	800558c <_isatty_r>
 80054ca:	b128      	cbz	r0, 80054d8 <__smakebuf_r+0x70>
 80054cc:	89a3      	ldrh	r3, [r4, #12]
 80054ce:	f023 0303 	bic.w	r3, r3, #3
 80054d2:	f043 0301 	orr.w	r3, r3, #1
 80054d6:	81a3      	strh	r3, [r4, #12]
 80054d8:	89a3      	ldrh	r3, [r4, #12]
 80054da:	431d      	orrs	r5, r3
 80054dc:	81a5      	strh	r5, [r4, #12]
 80054de:	e7cf      	b.n	8005480 <__smakebuf_r+0x18>

080054e0 <_putc_r>:
 80054e0:	b570      	push	{r4, r5, r6, lr}
 80054e2:	460d      	mov	r5, r1
 80054e4:	4614      	mov	r4, r2
 80054e6:	4606      	mov	r6, r0
 80054e8:	b118      	cbz	r0, 80054f2 <_putc_r+0x12>
 80054ea:	6a03      	ldr	r3, [r0, #32]
 80054ec:	b90b      	cbnz	r3, 80054f2 <_putc_r+0x12>
 80054ee:	f7ff f9b1 	bl	8004854 <__sinit>
 80054f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054f4:	07d8      	lsls	r0, r3, #31
 80054f6:	d405      	bmi.n	8005504 <_putc_r+0x24>
 80054f8:	89a3      	ldrh	r3, [r4, #12]
 80054fa:	0599      	lsls	r1, r3, #22
 80054fc:	d402      	bmi.n	8005504 <_putc_r+0x24>
 80054fe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005500:	f7ff fa89 	bl	8004a16 <__retarget_lock_acquire_recursive>
 8005504:	68a3      	ldr	r3, [r4, #8]
 8005506:	3b01      	subs	r3, #1
 8005508:	2b00      	cmp	r3, #0
 800550a:	60a3      	str	r3, [r4, #8]
 800550c:	da05      	bge.n	800551a <_putc_r+0x3a>
 800550e:	69a2      	ldr	r2, [r4, #24]
 8005510:	4293      	cmp	r3, r2
 8005512:	db12      	blt.n	800553a <_putc_r+0x5a>
 8005514:	b2eb      	uxtb	r3, r5
 8005516:	2b0a      	cmp	r3, #10
 8005518:	d00f      	beq.n	800553a <_putc_r+0x5a>
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	1c5a      	adds	r2, r3, #1
 800551e:	6022      	str	r2, [r4, #0]
 8005520:	701d      	strb	r5, [r3, #0]
 8005522:	b2ed      	uxtb	r5, r5
 8005524:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005526:	07da      	lsls	r2, r3, #31
 8005528:	d405      	bmi.n	8005536 <_putc_r+0x56>
 800552a:	89a3      	ldrh	r3, [r4, #12]
 800552c:	059b      	lsls	r3, r3, #22
 800552e:	d402      	bmi.n	8005536 <_putc_r+0x56>
 8005530:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005532:	f7ff fa71 	bl	8004a18 <__retarget_lock_release_recursive>
 8005536:	4628      	mov	r0, r5
 8005538:	bd70      	pop	{r4, r5, r6, pc}
 800553a:	4629      	mov	r1, r5
 800553c:	4622      	mov	r2, r4
 800553e:	4630      	mov	r0, r6
 8005540:	f7ff fed7 	bl	80052f2 <__swbuf_r>
 8005544:	4605      	mov	r5, r0
 8005546:	e7ed      	b.n	8005524 <_putc_r+0x44>

08005548 <_close_r>:
 8005548:	b538      	push	{r3, r4, r5, lr}
 800554a:	4d06      	ldr	r5, [pc, #24]	@ (8005564 <_close_r+0x1c>)
 800554c:	2300      	movs	r3, #0
 800554e:	4604      	mov	r4, r0
 8005550:	4608      	mov	r0, r1
 8005552:	602b      	str	r3, [r5, #0]
 8005554:	f000 f8ba 	bl	80056cc <_close>
 8005558:	1c43      	adds	r3, r0, #1
 800555a:	d102      	bne.n	8005562 <_close_r+0x1a>
 800555c:	682b      	ldr	r3, [r5, #0]
 800555e:	b103      	cbz	r3, 8005562 <_close_r+0x1a>
 8005560:	6023      	str	r3, [r4, #0]
 8005562:	bd38      	pop	{r3, r4, r5, pc}
 8005564:	200004b8 	.word	0x200004b8

08005568 <_fstat_r>:
 8005568:	b538      	push	{r3, r4, r5, lr}
 800556a:	4d07      	ldr	r5, [pc, #28]	@ (8005588 <_fstat_r+0x20>)
 800556c:	2300      	movs	r3, #0
 800556e:	4604      	mov	r4, r0
 8005570:	4608      	mov	r0, r1
 8005572:	4611      	mov	r1, r2
 8005574:	602b      	str	r3, [r5, #0]
 8005576:	f000 f8b1 	bl	80056dc <_fstat>
 800557a:	1c43      	adds	r3, r0, #1
 800557c:	d102      	bne.n	8005584 <_fstat_r+0x1c>
 800557e:	682b      	ldr	r3, [r5, #0]
 8005580:	b103      	cbz	r3, 8005584 <_fstat_r+0x1c>
 8005582:	6023      	str	r3, [r4, #0]
 8005584:	bd38      	pop	{r3, r4, r5, pc}
 8005586:	bf00      	nop
 8005588:	200004b8 	.word	0x200004b8

0800558c <_isatty_r>:
 800558c:	b538      	push	{r3, r4, r5, lr}
 800558e:	4d06      	ldr	r5, [pc, #24]	@ (80055a8 <_isatty_r+0x1c>)
 8005590:	2300      	movs	r3, #0
 8005592:	4604      	mov	r4, r0
 8005594:	4608      	mov	r0, r1
 8005596:	602b      	str	r3, [r5, #0]
 8005598:	f000 f8a8 	bl	80056ec <_isatty>
 800559c:	1c43      	adds	r3, r0, #1
 800559e:	d102      	bne.n	80055a6 <_isatty_r+0x1a>
 80055a0:	682b      	ldr	r3, [r5, #0]
 80055a2:	b103      	cbz	r3, 80055a6 <_isatty_r+0x1a>
 80055a4:	6023      	str	r3, [r4, #0]
 80055a6:	bd38      	pop	{r3, r4, r5, pc}
 80055a8:	200004b8 	.word	0x200004b8

080055ac <_lseek_r>:
 80055ac:	b538      	push	{r3, r4, r5, lr}
 80055ae:	4d07      	ldr	r5, [pc, #28]	@ (80055cc <_lseek_r+0x20>)
 80055b0:	4604      	mov	r4, r0
 80055b2:	4608      	mov	r0, r1
 80055b4:	4611      	mov	r1, r2
 80055b6:	2200      	movs	r2, #0
 80055b8:	602a      	str	r2, [r5, #0]
 80055ba:	461a      	mov	r2, r3
 80055bc:	f000 f89e 	bl	80056fc <_lseek>
 80055c0:	1c43      	adds	r3, r0, #1
 80055c2:	d102      	bne.n	80055ca <_lseek_r+0x1e>
 80055c4:	682b      	ldr	r3, [r5, #0]
 80055c6:	b103      	cbz	r3, 80055ca <_lseek_r+0x1e>
 80055c8:	6023      	str	r3, [r4, #0]
 80055ca:	bd38      	pop	{r3, r4, r5, pc}
 80055cc:	200004b8 	.word	0x200004b8

080055d0 <_read_r>:
 80055d0:	b538      	push	{r3, r4, r5, lr}
 80055d2:	4d07      	ldr	r5, [pc, #28]	@ (80055f0 <_read_r+0x20>)
 80055d4:	4604      	mov	r4, r0
 80055d6:	4608      	mov	r0, r1
 80055d8:	4611      	mov	r1, r2
 80055da:	2200      	movs	r2, #0
 80055dc:	602a      	str	r2, [r5, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	f000 f894 	bl	800570c <_read>
 80055e4:	1c43      	adds	r3, r0, #1
 80055e6:	d102      	bne.n	80055ee <_read_r+0x1e>
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	b103      	cbz	r3, 80055ee <_read_r+0x1e>
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	bd38      	pop	{r3, r4, r5, pc}
 80055f0:	200004b8 	.word	0x200004b8

080055f4 <_sbrk_r>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	4d06      	ldr	r5, [pc, #24]	@ (8005610 <_sbrk_r+0x1c>)
 80055f8:	2300      	movs	r3, #0
 80055fa:	4604      	mov	r4, r0
 80055fc:	4608      	mov	r0, r1
 80055fe:	602b      	str	r3, [r5, #0]
 8005600:	f7fc fd10 	bl	8002024 <_sbrk>
 8005604:	1c43      	adds	r3, r0, #1
 8005606:	d102      	bne.n	800560e <_sbrk_r+0x1a>
 8005608:	682b      	ldr	r3, [r5, #0]
 800560a:	b103      	cbz	r3, 800560e <_sbrk_r+0x1a>
 800560c:	6023      	str	r3, [r4, #0]
 800560e:	bd38      	pop	{r3, r4, r5, pc}
 8005610:	200004b8 	.word	0x200004b8

08005614 <_write_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	4d07      	ldr	r5, [pc, #28]	@ (8005634 <_write_r+0x20>)
 8005618:	4604      	mov	r4, r0
 800561a:	4608      	mov	r0, r1
 800561c:	4611      	mov	r1, r2
 800561e:	2200      	movs	r2, #0
 8005620:	602a      	str	r2, [r5, #0]
 8005622:	461a      	mov	r2, r3
 8005624:	f000 f87a 	bl	800571c <_write>
 8005628:	1c43      	adds	r3, r0, #1
 800562a:	d102      	bne.n	8005632 <_write_r+0x1e>
 800562c:	682b      	ldr	r3, [r5, #0]
 800562e:	b103      	cbz	r3, 8005632 <_write_r+0x1e>
 8005630:	6023      	str	r3, [r4, #0]
 8005632:	bd38      	pop	{r3, r4, r5, pc}
 8005634:	200004b8 	.word	0x200004b8

08005638 <_free_r>:
 8005638:	b538      	push	{r3, r4, r5, lr}
 800563a:	4605      	mov	r5, r0
 800563c:	2900      	cmp	r1, #0
 800563e:	d041      	beq.n	80056c4 <_free_r+0x8c>
 8005640:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005644:	1f0c      	subs	r4, r1, #4
 8005646:	2b00      	cmp	r3, #0
 8005648:	bfb8      	it	lt
 800564a:	18e4      	addlt	r4, r4, r3
 800564c:	f7ff fe02 	bl	8005254 <__malloc_lock>
 8005650:	4a1d      	ldr	r2, [pc, #116]	@ (80056c8 <_free_r+0x90>)
 8005652:	6813      	ldr	r3, [r2, #0]
 8005654:	b933      	cbnz	r3, 8005664 <_free_r+0x2c>
 8005656:	6063      	str	r3, [r4, #4]
 8005658:	6014      	str	r4, [r2, #0]
 800565a:	4628      	mov	r0, r5
 800565c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005660:	f7ff bdfe 	b.w	8005260 <__malloc_unlock>
 8005664:	42a3      	cmp	r3, r4
 8005666:	d908      	bls.n	800567a <_free_r+0x42>
 8005668:	6820      	ldr	r0, [r4, #0]
 800566a:	1821      	adds	r1, r4, r0
 800566c:	428b      	cmp	r3, r1
 800566e:	bf01      	itttt	eq
 8005670:	6819      	ldreq	r1, [r3, #0]
 8005672:	685b      	ldreq	r3, [r3, #4]
 8005674:	1809      	addeq	r1, r1, r0
 8005676:	6021      	streq	r1, [r4, #0]
 8005678:	e7ed      	b.n	8005656 <_free_r+0x1e>
 800567a:	461a      	mov	r2, r3
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	b10b      	cbz	r3, 8005684 <_free_r+0x4c>
 8005680:	42a3      	cmp	r3, r4
 8005682:	d9fa      	bls.n	800567a <_free_r+0x42>
 8005684:	6811      	ldr	r1, [r2, #0]
 8005686:	1850      	adds	r0, r2, r1
 8005688:	42a0      	cmp	r0, r4
 800568a:	d10b      	bne.n	80056a4 <_free_r+0x6c>
 800568c:	6820      	ldr	r0, [r4, #0]
 800568e:	4401      	add	r1, r0
 8005690:	1850      	adds	r0, r2, r1
 8005692:	4283      	cmp	r3, r0
 8005694:	6011      	str	r1, [r2, #0]
 8005696:	d1e0      	bne.n	800565a <_free_r+0x22>
 8005698:	6818      	ldr	r0, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	6053      	str	r3, [r2, #4]
 800569e:	4408      	add	r0, r1
 80056a0:	6010      	str	r0, [r2, #0]
 80056a2:	e7da      	b.n	800565a <_free_r+0x22>
 80056a4:	d902      	bls.n	80056ac <_free_r+0x74>
 80056a6:	230c      	movs	r3, #12
 80056a8:	602b      	str	r3, [r5, #0]
 80056aa:	e7d6      	b.n	800565a <_free_r+0x22>
 80056ac:	6820      	ldr	r0, [r4, #0]
 80056ae:	1821      	adds	r1, r4, r0
 80056b0:	428b      	cmp	r3, r1
 80056b2:	bf04      	itt	eq
 80056b4:	6819      	ldreq	r1, [r3, #0]
 80056b6:	685b      	ldreq	r3, [r3, #4]
 80056b8:	6063      	str	r3, [r4, #4]
 80056ba:	bf04      	itt	eq
 80056bc:	1809      	addeq	r1, r1, r0
 80056be:	6021      	streq	r1, [r4, #0]
 80056c0:	6054      	str	r4, [r2, #4]
 80056c2:	e7ca      	b.n	800565a <_free_r+0x22>
 80056c4:	bd38      	pop	{r3, r4, r5, pc}
 80056c6:	bf00      	nop
 80056c8:	200004b4 	.word	0x200004b4

080056cc <_close>:
 80056cc:	4b02      	ldr	r3, [pc, #8]	@ (80056d8 <_close+0xc>)
 80056ce:	2258      	movs	r2, #88	@ 0x58
 80056d0:	601a      	str	r2, [r3, #0]
 80056d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056d6:	4770      	bx	lr
 80056d8:	200004b8 	.word	0x200004b8

080056dc <_fstat>:
 80056dc:	4b02      	ldr	r3, [pc, #8]	@ (80056e8 <_fstat+0xc>)
 80056de:	2258      	movs	r2, #88	@ 0x58
 80056e0:	601a      	str	r2, [r3, #0]
 80056e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80056e6:	4770      	bx	lr
 80056e8:	200004b8 	.word	0x200004b8

080056ec <_isatty>:
 80056ec:	4b02      	ldr	r3, [pc, #8]	@ (80056f8 <_isatty+0xc>)
 80056ee:	2258      	movs	r2, #88	@ 0x58
 80056f0:	601a      	str	r2, [r3, #0]
 80056f2:	2000      	movs	r0, #0
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	200004b8 	.word	0x200004b8

080056fc <_lseek>:
 80056fc:	4b02      	ldr	r3, [pc, #8]	@ (8005708 <_lseek+0xc>)
 80056fe:	2258      	movs	r2, #88	@ 0x58
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005706:	4770      	bx	lr
 8005708:	200004b8 	.word	0x200004b8

0800570c <_read>:
 800570c:	4b02      	ldr	r3, [pc, #8]	@ (8005718 <_read+0xc>)
 800570e:	2258      	movs	r2, #88	@ 0x58
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005716:	4770      	bx	lr
 8005718:	200004b8 	.word	0x200004b8

0800571c <_write>:
 800571c:	4b02      	ldr	r3, [pc, #8]	@ (8005728 <_write+0xc>)
 800571e:	2258      	movs	r2, #88	@ 0x58
 8005720:	601a      	str	r2, [r3, #0]
 8005722:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005726:	4770      	bx	lr
 8005728:	200004b8 	.word	0x200004b8

0800572c <_init>:
 800572c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800572e:	bf00      	nop
 8005730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005732:	bc08      	pop	{r3}
 8005734:	469e      	mov	lr, r3
 8005736:	4770      	bx	lr

08005738 <_fini>:
 8005738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573a:	bf00      	nop
 800573c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800573e:	bc08      	pop	{r3}
 8005740:	469e      	mov	lr, r3
 8005742:	4770      	bx	lr
