
JAllenLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bc8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001300  08008d78  08008d78  00009d78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a078  0800a078  0000c080  2**0
                  CONTENTS
  4 .ARM          00000008  0800a078  0800a078  0000b078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a080  0800a080  0000c080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a080  0800a080  0000b080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a084  0800a084  0000b084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800a088  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c080  2**0
                  CONTENTS
 10 .bss          00025e50  20000080  20000080  0000c080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20025ed0  20025ed0  0000c080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014db0  00000000  00000000  0000c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033ef  00000000  00000000  00020e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001418  00000000  00000000  00024250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f80  00000000  00000000  00025668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026e01  00000000  00000000  000265e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001979a  00000000  00000000  0004d3e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e12f6  00000000  00000000  00066b83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00147e79  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ee8  00000000  00000000  00147ebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0014dda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008d60 	.word	0x08008d60

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08008d60 	.word	0x08008d60

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <applicationInit>:
static STMPE811_TouchData StaticTouchData;
static EXTI_HandleTypeDef LCDTouchIRQ;

void LCDTouchScreenInterruptGPIOInit(void);

void applicationInit(){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	//applicationInterruptInit();
	object_Select();
 8000594:	f000 fdc4 	bl	8001120 <object_Select>
	addScheduledEvent(MATRIX_UPDATE_EVENT);
 8000598:	2004      	movs	r0, #4
 800059a:	f001 fc8b 	bl	8001eb4 <addScheduledEvent>

	LTCD__Init();
 800059e:	f000 f9df 	bl	8000960 <LTCD__Init>
	LTCD_Layer_Init(0);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f000 f99c 	bl	80008e0 <LTCD_Layer_Init>
	LCD_Clear(0,LCD_COLOR_WHITE);
 80005a8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80005ac:	2000      	movs	r0, #0
 80005ae:	f000 fa5b 	bl	8000a68 <LCD_Clear>

	InitializeLCDTouch();
 80005b2:	f000 fb31 	bl	8000c18 <InitializeLCDTouch>
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005b6:	4b03      	ldr	r3, [pc, #12]	@ (80005c4 <applicationInit+0x34>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	719a      	strb	r2, [r3, #6]
	LCDTouchScreenInterruptGPIOInit();
 80005bc:	f000 f804 	bl	80005c8 <LCDTouchScreenInterruptGPIOInit>
}
 80005c0:	bf00      	nop
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	2000009c 	.word	0x2000009c

080005c8 <LCDTouchScreenInterruptGPIOInit>:


void LCDTouchScreenInterruptGPIOInit(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef LCDConfig = {0};
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
    LCDConfig.Pin = GPIO_PIN_15;
 80005dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80005e0:	607b      	str	r3, [r7, #4]
    LCDConfig.Mode = GPIO_MODE_IT_RISING_FALLING;
 80005e2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80005e6:	60bb      	str	r3, [r7, #8]
    LCDConfig.Pull = GPIO_NOPULL;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
    LCDConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ec:	2302      	movs	r3, #2
 80005ee:	613b      	str	r3, [r7, #16]

    // Clock enable
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	603b      	str	r3, [r7, #0]
 80005f4:	4b0d      	ldr	r3, [pc, #52]	@ (800062c <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f8:	4a0c      	ldr	r2, [pc, #48]	@ (800062c <LCDTouchScreenInterruptGPIOInit+0x64>)
 80005fa:	f043 0301 	orr.w	r3, r3, #1
 80005fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000600:	4b0a      	ldr	r3, [pc, #40]	@ (800062c <LCDTouchScreenInterruptGPIOInit+0x64>)
 8000602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000604:	f003 0301 	and.w	r3, r3, #1
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]

    // GPIO Init
    HAL_GPIO_Init(GPIOA, &LCDConfig);
 800060c:	1d3b      	adds	r3, r7, #4
 800060e:	4619      	mov	r1, r3
 8000610:	4807      	ldr	r0, [pc, #28]	@ (8000630 <LCDTouchScreenInterruptGPIOInit+0x68>)
 8000612:	f003 fc71 	bl	8003ef8 <HAL_GPIO_Init>

    // Interrupt Configuration
    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000616:	2028      	movs	r0, #40	@ 0x28
 8000618:	f003 fc1f 	bl	8003e5a <HAL_NVIC_EnableIRQ>

	LCDTouchIRQ.Line = EXTI_LINE_15;
 800061c:	4b05      	ldr	r3, [pc, #20]	@ (8000634 <LCDTouchScreenInterruptGPIOInit+0x6c>)
 800061e:	4a06      	ldr	r2, [pc, #24]	@ (8000638 <LCDTouchScreenInterruptGPIOInit+0x70>)
 8000620:	601a      	str	r2, [r3, #0]

}
 8000622:	bf00      	nop
 8000624:	3718      	adds	r7, #24
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40023800 	.word	0x40023800
 8000630:	40020000 	.word	0x40020000
 8000634:	200000a4 	.word	0x200000a4
 8000638:	0600000f 	.word	0x0600000f

0800063c <EXTI15_10_IRQHandler>:
#define TOUCH_DETECTED_IRQ_STATUS_BIT   (1 << 0)  // Touchscreen detected bitmask

static uint8_t statusFlag;

void EXTI15_10_IRQHandler()
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // May consider making this a universial interrupt guard
 8000642:	2028      	movs	r0, #40	@ 0x28
 8000644:	f003 fc17 	bl	8003e76 <HAL_NVIC_DisableIRQ>
	bool isTouchDetected = false;
 8000648:	2300      	movs	r3, #0
 800064a:	71fb      	strb	r3, [r7, #7]

	static uint32_t count;
	count = 0;
 800064c:	4b39      	ldr	r3, [pc, #228]	@ (8000734 <EXTI15_10_IRQHandler+0xf8>)
 800064e:	2200      	movs	r2, #0
 8000650:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000652:	e006      	b.n	8000662 <EXTI15_10_IRQHandler+0x26>
		count = STMPE811_Read(STMPE811_FIFO_SIZE);
 8000654:	204c      	movs	r0, #76	@ 0x4c
 8000656:	f002 ff2a 	bl	80034ae <STMPE811_Read>
 800065a:	4603      	mov	r3, r0
 800065c:	461a      	mov	r2, r3
 800065e:	4b35      	ldr	r3, [pc, #212]	@ (8000734 <EXTI15_10_IRQHandler+0xf8>)
 8000660:	601a      	str	r2, [r3, #0]
	while(count == 0){
 8000662:	4b34      	ldr	r3, [pc, #208]	@ (8000734 <EXTI15_10_IRQHandler+0xf8>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d0f4      	beq.n	8000654 <EXTI15_10_IRQHandler+0x18>
	}

	// Disable touch interrupt bit on the STMPE811
	uint8_t currentIRQEnables = ReadRegisterFromTouchModule(STMPE811_INT_EN);
 800066a:	200a      	movs	r0, #10
 800066c:	f000 faea 	bl	8000c44 <ReadRegisterFromTouchModule>
 8000670:	4603      	mov	r3, r0
 8000672:	71bb      	strb	r3, [r7, #6]
	WriteDataToTouchModule(STMPE811_INT_EN, 0x00);
 8000674:	2100      	movs	r1, #0
 8000676:	200a      	movs	r0, #10
 8000678:	f000 faf2 	bl	8000c60 <WriteDataToTouchModule>

	// Clear the interrupt bit in the STMPE811
	statusFlag = ReadRegisterFromTouchModule(STMPE811_INT_STA);
 800067c:	200b      	movs	r0, #11
 800067e:	f000 fae1 	bl	8000c44 <ReadRegisterFromTouchModule>
 8000682:	4603      	mov	r3, r0
 8000684:	461a      	mov	r2, r3
 8000686:	4b2c      	ldr	r3, [pc, #176]	@ (8000738 <EXTI15_10_IRQHandler+0xfc>)
 8000688:	701a      	strb	r2, [r3, #0]
	uint8_t clearIRQData = (statusFlag | TOUCH_DETECTED_IRQ_STATUS_BIT); // Write one to clear bit
 800068a:	4b2b      	ldr	r3, [pc, #172]	@ (8000738 <EXTI15_10_IRQHandler+0xfc>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	f043 0301 	orr.w	r3, r3, #1
 8000692:	717b      	strb	r3, [r7, #5]
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000694:	797b      	ldrb	r3, [r7, #5]
 8000696:	4619      	mov	r1, r3
 8000698:	200b      	movs	r0, #11
 800069a:	f000 fae1 	bl	8000c60 <WriteDataToTouchModule>

	uint8_t ctrlReg = ReadRegisterFromTouchModule(STMPE811_TSC_CTRL);
 800069e:	2040      	movs	r0, #64	@ 0x40
 80006a0:	f000 fad0 	bl	8000c44 <ReadRegisterFromTouchModule>
 80006a4:	4603      	mov	r3, r0
 80006a6:	713b      	strb	r3, [r7, #4]
	if (ctrlReg & 0x80)
 80006a8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	da01      	bge.n	80006b4 <EXTI15_10_IRQHandler+0x78>
	{
		isTouchDetected = true;
 80006b0:	2301      	movs	r3, #1
 80006b2:	71fb      	strb	r3, [r7, #7]
	}

	// Determine if it is pressed or unpressed
	if(isTouchDetected) // Touch has been detected
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d018      	beq.n	80006ec <EXTI15_10_IRQHandler+0xb0>
	{
		printf("\nPressed");
 80006ba:	4820      	ldr	r0, [pc, #128]	@ (800073c <EXTI15_10_IRQHandler+0x100>)
 80006bc:	f007 fc86 	bl	8007fcc <iprintf>
		// May need to do numerous retries?
		DetermineTouchPosition(&StaticTouchData);
 80006c0:	481f      	ldr	r0, [pc, #124]	@ (8000740 <EXTI15_10_IRQHandler+0x104>)
 80006c2:	f000 fab4 	bl	8000c2e <DetermineTouchPosition>
		/* Touch valid */
		//TODO: add touch rotations in later
		if(StaticTouchData.x >= 120) {
 80006c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000740 <EXTI15_10_IRQHandler+0x104>)
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	2b77      	cmp	r3, #119	@ 0x77
 80006cc:	d902      	bls.n	80006d4 <EXTI15_10_IRQHandler+0x98>
			shift_Right();
 80006ce:	f000 fe0d 	bl	80012ec <shift_Right>
 80006d2:	e001      	b.n	80006d8 <EXTI15_10_IRQHandler+0x9c>
		} else {
			shift_Left();
 80006d4:	f000 fdce 	bl	8001274 <shift_Left>
		}
		printf("\nX: %03d\nY: %03d \n", StaticTouchData.x, StaticTouchData.y);
 80006d8:	4b19      	ldr	r3, [pc, #100]	@ (8000740 <EXTI15_10_IRQHandler+0x104>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	4619      	mov	r1, r3
 80006de:	4b18      	ldr	r3, [pc, #96]	@ (8000740 <EXTI15_10_IRQHandler+0x104>)
 80006e0:	885b      	ldrh	r3, [r3, #2]
 80006e2:	461a      	mov	r2, r3
 80006e4:	4817      	ldr	r0, [pc, #92]	@ (8000744 <EXTI15_10_IRQHandler+0x108>)
 80006e6:	f007 fc71 	bl	8007fcc <iprintf>
 80006ea:	e002      	b.n	80006f2 <EXTI15_10_IRQHandler+0xb6>
		//LCD_Clear(0, LCD_COLOR_RED);

	}else{

		/* Touch not pressed */
		printf("\nNot pressed \n");
 80006ec:	4816      	ldr	r0, [pc, #88]	@ (8000748 <EXTI15_10_IRQHandler+0x10c>)
 80006ee:	f007 fcd5 	bl	800809c <puts>
		//LCD_Clear(0, LCD_COLOR_GREEN);
	}

	STMPE811_Write(STMPE811_FIFO_STA, 0x01);
 80006f2:	2101      	movs	r1, #1
 80006f4:	204b      	movs	r0, #75	@ 0x4b
 80006f6:	f002 feeb 	bl	80034d0 <STMPE811_Write>
	STMPE811_Write(STMPE811_FIFO_STA, 0x00);
 80006fa:	2100      	movs	r1, #0
 80006fc:	204b      	movs	r0, #75	@ 0x4b
 80006fe:	f002 fee7 	bl	80034d0 <STMPE811_Write>

	// Re-enable IRQs
    WriteDataToTouchModule(STMPE811_INT_EN, currentIRQEnables);
 8000702:	79bb      	ldrb	r3, [r7, #6]
 8000704:	4619      	mov	r1, r3
 8000706:	200a      	movs	r0, #10
 8000708:	f000 faaa 	bl	8000c60 <WriteDataToTouchModule>
	HAL_EXTI_ClearPending(&LCDTouchIRQ, EXTI_TRIGGER_RISING_FALLING);
 800070c:	2103      	movs	r1, #3
 800070e:	480f      	ldr	r0, [pc, #60]	@ (800074c <EXTI15_10_IRQHandler+0x110>)
 8000710:	f003 fbda 	bl	8003ec8 <HAL_EXTI_ClearPending>

	HAL_NVIC_ClearPendingIRQ(EXTI15_10_IRQn);
 8000714:	2028      	movs	r0, #40	@ 0x28
 8000716:	f003 fbc8 	bl	8003eaa <HAL_NVIC_ClearPendingIRQ>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800071a:	2028      	movs	r0, #40	@ 0x28
 800071c:	f003 fb9d 	bl	8003e5a <HAL_NVIC_EnableIRQ>

	//Potential ERRATA? Clearing IRQ bit again due to an IRQ being triggered DURING the handling of this IRQ..
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);
 8000720:	797b      	ldrb	r3, [r7, #5]
 8000722:	4619      	mov	r1, r3
 8000724:	200b      	movs	r0, #11
 8000726:	f000 fa9b 	bl	8000c60 <WriteDataToTouchModule>

}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200000b0 	.word	0x200000b0
 8000738:	200000ac 	.word	0x200000ac
 800073c:	08008d78 	.word	0x08008d78
 8000740:	2000009c 	.word	0x2000009c
 8000744:	08008d84 	.word	0x08008d84
 8000748:	08008d98 	.word	0x08008d98
 800074c:	200000a4 	.word	0x200000a4

08000750 <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08c      	sub	sp, #48	@ 0x30
 8000754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
 800075a:	4b5a      	ldr	r3, [pc, #360]	@ (80008c4 <LCD_GPIO_Init+0x174>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800075e:	4a59      	ldr	r2, [pc, #356]	@ (80008c4 <LCD_GPIO_Init+0x174>)
 8000760:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000764:	6453      	str	r3, [r2, #68]	@ 0x44
 8000766:	4b57      	ldr	r3, [pc, #348]	@ (80008c4 <LCD_GPIO_Init+0x174>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800076e:	61bb      	str	r3, [r7, #24]
 8000770:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	617b      	str	r3, [r7, #20]
 8000776:	4b53      	ldr	r3, [pc, #332]	@ (80008c4 <LCD_GPIO_Init+0x174>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a52      	ldr	r2, [pc, #328]	@ (80008c4 <LCD_GPIO_Init+0x174>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b50      	ldr	r3, [pc, #320]	@ (80008c4 <LCD_GPIO_Init+0x174>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	617b      	str	r3, [r7, #20]
 800078c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
 8000792:	4b4c      	ldr	r3, [pc, #304]	@ (80008c4 <LCD_GPIO_Init+0x174>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a4b      	ldr	r2, [pc, #300]	@ (80008c4 <LCD_GPIO_Init+0x174>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b49      	ldr	r3, [pc, #292]	@ (80008c4 <LCD_GPIO_Init+0x174>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	613b      	str	r3, [r7, #16]
 80007a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60fb      	str	r3, [r7, #12]
 80007ae:	4b45      	ldr	r3, [pc, #276]	@ (80008c4 <LCD_GPIO_Init+0x174>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a44      	ldr	r2, [pc, #272]	@ (80008c4 <LCD_GPIO_Init+0x174>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b42      	ldr	r3, [pc, #264]	@ (80008c4 <LCD_GPIO_Init+0x174>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	4b3e      	ldr	r3, [pc, #248]	@ (80008c4 <LCD_GPIO_Init+0x174>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a3d      	ldr	r2, [pc, #244]	@ (80008c4 <LCD_GPIO_Init+0x174>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b3b      	ldr	r3, [pc, #236]	@ (80008c4 <LCD_GPIO_Init+0x174>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	60bb      	str	r3, [r7, #8]
 80007e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	4b37      	ldr	r3, [pc, #220]	@ (80008c4 <LCD_GPIO_Init+0x174>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	4a36      	ldr	r2, [pc, #216]	@ (80008c4 <LCD_GPIO_Init+0x174>)
 80007ec:	f043 0320 	orr.w	r3, r3, #32
 80007f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f2:	4b34      	ldr	r3, [pc, #208]	@ (80008c4 <LCD_GPIO_Init+0x174>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	f003 0320 	and.w	r3, r3, #32
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b30      	ldr	r3, [pc, #192]	@ (80008c4 <LCD_GPIO_Init+0x174>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	4a2f      	ldr	r2, [pc, #188]	@ (80008c4 <LCD_GPIO_Init+0x174>)
 8000808:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800080c:	6313      	str	r3, [r2, #48]	@ 0x30
 800080e:	4b2d      	ldr	r3, [pc, #180]	@ (80008c4 <LCD_GPIO_Init+0x174>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]
   LCD_TFT CLK   <-> PG.07
   LCD_TFT DE   <->  PF.10
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800081a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800081e:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000820:	2302      	movs	r3, #2
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000828:	2302      	movs	r3, #2
 800082a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800082c:	230e      	movs	r3, #14
 800082e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	4824      	ldr	r0, [pc, #144]	@ (80008c8 <LCD_GPIO_Init+0x178>)
 8000838:	f003 fb5e 	bl	8003ef8 <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800083c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000840:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	4820      	ldr	r0, [pc, #128]	@ (80008cc <LCD_GPIO_Init+0x17c>)
 800084a:	f003 fb55 	bl	8003ef8 <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800084e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000852:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000854:	f107 031c 	add.w	r3, r7, #28
 8000858:	4619      	mov	r1, r3
 800085a:	481d      	ldr	r0, [pc, #116]	@ (80008d0 <LCD_GPIO_Init+0x180>)
 800085c:	f003 fb4c 	bl	8003ef8 <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000860:	2348      	movs	r3, #72	@ 0x48
 8000862:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	481a      	ldr	r0, [pc, #104]	@ (80008d4 <LCD_GPIO_Init+0x184>)
 800086c:	f003 fb44 	bl	8003ef8 <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000870:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000874:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4816      	ldr	r0, [pc, #88]	@ (80008d8 <LCD_GPIO_Init+0x188>)
 800087e:	f003 fb3b 	bl	8003ef8 <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000882:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000886:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4813      	ldr	r0, [pc, #76]	@ (80008dc <LCD_GPIO_Init+0x18c>)
 8000890:	f003 fb32 	bl	8003ef8 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000894:	2303      	movs	r3, #3
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000898:	2309      	movs	r3, #9
 800089a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	480a      	ldr	r0, [pc, #40]	@ (80008cc <LCD_GPIO_Init+0x17c>)
 80008a4:	f003 fb28 	bl	8003ef8 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80008a8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4809      	ldr	r0, [pc, #36]	@ (80008dc <LCD_GPIO_Init+0x18c>)
 80008b6:	f003 fb1f 	bl	8003ef8 <HAL_GPIO_Init>
}
 80008ba:	bf00      	nop
 80008bc:	3730      	adds	r7, #48	@ 0x30
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020000 	.word	0x40020000
 80008cc:	40020400 	.word	0x40020400
 80008d0:	40020800 	.word	0x40020800
 80008d4:	40020c00 	.word	0x40020c00
 80008d8:	40021400 	.word	0x40021400
 80008dc:	40021800 	.word	0x40021800

080008e0 <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b090      	sub	sp, #64	@ 0x40
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 80008ee:	23f0      	movs	r3, #240	@ 0xf0
 80008f0:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 80008f6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80008fa:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 80008fc:	2302      	movs	r3, #2
 80008fe:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000900:	23ff      	movs	r3, #255	@ 0xff
 8000902:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000908:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800090c:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 800090e:	2305      	movs	r3, #5
 8000910:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d101      	bne.n	800091c <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000918:	4b0f      	ldr	r3, [pc, #60]	@ (8000958 <LTCD_Layer_Init+0x78>)
 800091a:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 800091c:	23f0      	movs	r3, #240	@ 0xf0
 800091e:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000920:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000924:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000938:	79fa      	ldrb	r2, [r7, #7]
 800093a:	f107 030c 	add.w	r3, r7, #12
 800093e:	4619      	mov	r1, r3
 8000940:	4806      	ldr	r0, [pc, #24]	@ (800095c <LTCD_Layer_Init+0x7c>)
 8000942:	f004 ff65 	bl	8005810 <HAL_LTDC_ConfigLayer>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 800094c:	f000 f95e 	bl	8000c0c <LCD_Error_Handler>
	}
}
 8000950:	bf00      	nop
 8000952:	3740      	adds	r7, #64	@ 0x40
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000190 	.word	0x20000190
 800095c:	200000b4 	.word	0x200000b4

08000960 <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000964:	4b2a      	ldr	r3, [pc, #168]	@ (8000a10 <LTCD__Init+0xb0>)
 8000966:	4a2b      	ldr	r2, [pc, #172]	@ (8000a14 <LTCD__Init+0xb4>)
 8000968:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 800096a:	4b29      	ldr	r3, [pc, #164]	@ (8000a10 <LTCD__Init+0xb0>)
 800096c:	2209      	movs	r2, #9
 800096e:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000970:	4b27      	ldr	r3, [pc, #156]	@ (8000a10 <LTCD__Init+0xb0>)
 8000972:	2201      	movs	r2, #1
 8000974:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000976:	4b26      	ldr	r3, [pc, #152]	@ (8000a10 <LTCD__Init+0xb0>)
 8000978:	221d      	movs	r2, #29
 800097a:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 800097c:	4b24      	ldr	r3, [pc, #144]	@ (8000a10 <LTCD__Init+0xb0>)
 800097e:	2203      	movs	r2, #3
 8000980:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000982:	4b23      	ldr	r3, [pc, #140]	@ (8000a10 <LTCD__Init+0xb0>)
 8000984:	f240 120d 	movw	r2, #269	@ 0x10d
 8000988:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 800098a:	4b21      	ldr	r3, [pc, #132]	@ (8000a10 <LTCD__Init+0xb0>)
 800098c:	f240 1243 	movw	r2, #323	@ 0x143
 8000990:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000992:	4b1f      	ldr	r3, [pc, #124]	@ (8000a10 <LTCD__Init+0xb0>)
 8000994:	f240 1217 	movw	r2, #279	@ 0x117
 8000998:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 800099a:	4b1d      	ldr	r3, [pc, #116]	@ (8000a10 <LTCD__Init+0xb0>)
 800099c:	f240 1247 	movw	r2, #327	@ 0x147
 80009a0:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 80009a2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a10 <LTCD__Init+0xb0>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 80009aa:	4b19      	ldr	r3, [pc, #100]	@ (8000a10 <LTCD__Init+0xb0>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 80009b2:	4b17      	ldr	r3, [pc, #92]	@ (8000a10 <LTCD__Init+0xb0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80009ba:	4b17      	ldr	r3, [pc, #92]	@ (8000a18 <LTCD__Init+0xb8>)
 80009bc:	2208      	movs	r2, #8
 80009be:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80009c0:	4b15      	ldr	r3, [pc, #84]	@ (8000a18 <LTCD__Init+0xb8>)
 80009c2:	22c0      	movs	r2, #192	@ 0xc0
 80009c4:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80009c6:	4b14      	ldr	r3, [pc, #80]	@ (8000a18 <LTCD__Init+0xb8>)
 80009c8:	2204      	movs	r2, #4
 80009ca:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80009cc:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <LTCD__Init+0xb8>)
 80009ce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80009d2:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80009d4:	4810      	ldr	r0, [pc, #64]	@ (8000a18 <LTCD__Init+0xb8>)
 80009d6:	f005 fd75 	bl	80064c4 <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80009da:	4b0d      	ldr	r3, [pc, #52]	@ (8000a10 <LTCD__Init+0xb0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80009e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000a10 <LTCD__Init+0xb0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80009e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <LTCD__Init+0xb0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80009ec:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <LTCD__Init+0xb0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 80009f2:	f7ff fead 	bl	8000750 <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80009f6:	4806      	ldr	r0, [pc, #24]	@ (8000a10 <LTCD__Init+0xb0>)
 80009f8:	f004 fe3a 	bl	8005670 <HAL_LTDC_Init>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000a02:	f000 f903 	bl	8000c0c <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000a06:	f001 fa7b 	bl	8001f00 <ili9341_Init>
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	200000b4 	.word	0x200000b4
 8000a14:	40016800 	.word	0x40016800
 8000a18:	2000015c 	.word	0x2000015c

08000a1c <LCD_Draw_Pixel>:
 * This is really the only function needed.
 * All drawing consists of is manipulating the array.
 * Adding input sanitation should probably be done.
 */
void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	80fb      	strh	r3, [r7, #6]
 8000a26:	460b      	mov	r3, r1
 8000a28:	80bb      	strh	r3, [r7, #4]
 8000a2a:	4613      	mov	r3, r2
 8000a2c:	807b      	strh	r3, [r7, #2]
	if (x<0||x>239||y<0||y>319) { return; }
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	2bef      	cmp	r3, #239	@ 0xef
 8000a32:	d810      	bhi.n	8000a56 <LCD_Draw_Pixel+0x3a>
 8000a34:	88bb      	ldrh	r3, [r7, #4]
 8000a36:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000a3a:	d20c      	bcs.n	8000a56 <LCD_Draw_Pixel+0x3a>
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;  //You cannot do x*y to set the pixel.
 8000a3c:	88ba      	ldrh	r2, [r7, #4]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	011b      	lsls	r3, r3, #4
 8000a42:	1a9b      	subs	r3, r3, r2
 8000a44:	011b      	lsls	r3, r3, #4
 8000a46:	461a      	mov	r2, r3
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	4905      	ldr	r1, [pc, #20]	@ (8000a64 <LCD_Draw_Pixel+0x48>)
 8000a4e:	887a      	ldrh	r2, [r7, #2]
 8000a50:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8000a54:	e000      	b.n	8000a58 <LCD_Draw_Pixel+0x3c>
	if (x<0||x>239||y<0||y>319) { return; }
 8000a56:	bf00      	nop
}
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000190 	.word	0x20000190

08000a68 <LCD_Clear>:
	  LCD_Draw_Pixel(x, i+y, color);
  }
}

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	460a      	mov	r2, r1
 8000a72:	71fb      	strb	r3, [r7, #7]
 8000a74:	4613      	mov	r3, r2
 8000a76:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8000a78:	79fb      	ldrb	r3, [r7, #7]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d10e      	bne.n	8000a9c <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000a7e:	2300      	movs	r3, #0
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	e007      	b.n	8000a94 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8000a84:	4908      	ldr	r1, [pc, #32]	@ (8000aa8 <LCD_Clear+0x40>)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	88ba      	ldrh	r2, [r7, #4]
 8000a8a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	3301      	adds	r3, #1
 8000a92:	60fb      	str	r3, [r7, #12]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8000a9a:	d3f3      	bcc.n	8000a84 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 8000a9c:	bf00      	nop
 8000a9e:	3714      	adds	r7, #20
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	20000190 	.word	0x20000190

08000aac <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	@ (8000ac8 <LCD_SetTextColor+0x1c>)
 8000ab8:	88fb      	ldrh	r3, [r7, #6]
 8000aba:	8013      	strh	r3, [r2, #0]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	20000000 	.word	0x20000000

08000acc <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 8000ad4:	4a04      	ldr	r2, [pc, #16]	@ (8000ae8 <LCD_SetFont+0x1c>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6013      	str	r3, [r2, #0]
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	2000018c 	.word	0x2000018c

08000aec <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	603a      	str	r2, [r7, #0]
 8000af6:	80fb      	strh	r3, [r7, #6]
 8000af8:	460b      	mov	r3, r1
 8000afa:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	2300      	movs	r3, #0
 8000b02:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	e04c      	b.n	8000ba4 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	e03f      	b.n	8000b90 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	005b      	lsls	r3, r3, #1
 8000b14:	683a      	ldr	r2, [r7, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	881b      	ldrh	r3, [r3, #0]
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4b27      	ldr	r3, [pc, #156]	@ (8000bbc <LCD_Draw_Char+0xd0>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	889b      	ldrh	r3, [r3, #4]
 8000b22:	4a27      	ldr	r2, [pc, #156]	@ (8000bc0 <LCD_Draw_Char+0xd4>)
 8000b24:	fba2 2303 	umull	r2, r3, r2, r3
 8000b28:	08db      	lsrs	r3, r3, #3
 8000b2a:	b29b      	uxth	r3, r3
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	2280      	movs	r2, #128	@ 0x80
 8000b30:	409a      	lsls	r2, r3
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	fa42 f303 	asr.w	r3, r2, r3
 8000b38:	400b      	ands	r3, r1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d104      	bne.n	8000b48 <LCD_Draw_Char+0x5c>
 8000b3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bbc <LCD_Draw_Char+0xd0>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	889b      	ldrh	r3, [r3, #4]
 8000b44:	2b0c      	cmp	r3, #12
 8000b46:	d920      	bls.n	8000b8a <LCD_Draw_Char+0x9e>
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	005b      	lsls	r3, r3, #1
 8000b4c:	683a      	ldr	r2, [r7, #0]
 8000b4e:	4413      	add	r3, r2
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	461a      	mov	r2, r3
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	fa42 f303 	asr.w	r3, r2, r3
 8000b5a:	f003 0301 	and.w	r3, r3, #1
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d104      	bne.n	8000b6c <LCD_Draw_Char+0x80>
 8000b62:	4b16      	ldr	r3, [pc, #88]	@ (8000bbc <LCD_Draw_Char+0xd0>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	889b      	ldrh	r3, [r3, #4]
 8000b68:	2b0c      	cmp	r3, #12
 8000b6a:	d80e      	bhi.n	8000b8a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	b29a      	uxth	r2, r3
 8000b70:	88fb      	ldrh	r3, [r7, #6]
 8000b72:	4413      	add	r3, r2
 8000b74:	b298      	uxth	r0, r3
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	88bb      	ldrh	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	b29b      	uxth	r3, r3
 8000b80:	4a10      	ldr	r2, [pc, #64]	@ (8000bc4 <LCD_Draw_Char+0xd8>)
 8000b82:	8812      	ldrh	r2, [r2, #0]
 8000b84:	4619      	mov	r1, r3
 8000b86:	f7ff ff49 	bl	8000a1c <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	4b0a      	ldr	r3, [pc, #40]	@ (8000bbc <LCD_Draw_Char+0xd0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	889b      	ldrh	r3, [r3, #4]
 8000b96:	461a      	mov	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d3b8      	bcc.n	8000b10 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4b05      	ldr	r3, [pc, #20]	@ (8000bbc <LCD_Draw_Char+0xd0>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	88db      	ldrh	r3, [r3, #6]
 8000baa:	461a      	mov	r2, r3
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d3ab      	bcc.n	8000b0a <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	bf00      	nop
 8000bb6:	3710      	adds	r7, #16
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	2000018c 	.word	0x2000018c
 8000bc0:	aaaaaaab 	.word	0xaaaaaaab
 8000bc4:	20000000 	.word	0x20000000

08000bc8 <LCD_DisplayChar>:

//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	80fb      	strh	r3, [r7, #6]
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	80bb      	strh	r3, [r7, #4]
 8000bd6:	4613      	mov	r3, r2
 8000bd8:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 8000bda:	78fb      	ldrb	r3, [r7, #3]
 8000bdc:	3b20      	subs	r3, #32
 8000bde:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8000be0:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <LCD_DisplayChar+0x40>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	78fb      	ldrb	r3, [r7, #3]
 8000be8:	4907      	ldr	r1, [pc, #28]	@ (8000c08 <LCD_DisplayChar+0x40>)
 8000bea:	6809      	ldr	r1, [r1, #0]
 8000bec:	88c9      	ldrh	r1, [r1, #6]
 8000bee:	fb01 f303 	mul.w	r3, r1, r3
 8000bf2:	005b      	lsls	r3, r3, #1
 8000bf4:	441a      	add	r2, r3
 8000bf6:	88b9      	ldrh	r1, [r7, #4]
 8000bf8:	88fb      	ldrh	r3, [r7, #6]
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f7ff ff76 	bl	8000aec <LCD_Draw_Char>
}
 8000c00:	bf00      	nop
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	2000018c 	.word	0x2000018c

08000c0c <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c10:	b672      	cpsid	i
}
 8000c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <LCD_Error_Handler+0x8>

08000c18 <InitializeLCDTouch>:
// Touch Functionality   //



void InitializeLCDTouch(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8000c1c:	f002 fb80 	bl	8003320 <STMPE811_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d001      	beq.n	8000c2a <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 8000c26:	bf00      	nop
 8000c28:	e7fd      	b.n	8000c26 <InitializeLCDTouch+0xe>
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <DetermineTouchPosition>:
{
	return STMPE811_ReadTouch(touchStruct);
}

void DetermineTouchPosition(STMPE811_TouchData * touchStruct)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
	STMPE811_DetermineTouchPosition(touchStruct);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f002 fc5c 	bl	80034f4 <STMPE811_DetermineTouchPosition>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <ReadRegisterFromTouchModule>:

uint8_t ReadRegisterFromTouchModule(uint8_t RegToRead)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
	return STMPE811_Read(RegToRead);
 8000c4e:	79fb      	ldrb	r3, [r7, #7]
 8000c50:	4618      	mov	r0, r3
 8000c52:	f002 fc2c 	bl	80034ae <STMPE811_Read>
 8000c56:	4603      	mov	r3, r0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <WriteDataToTouchModule>:

void WriteDataToTouchModule(uint8_t RegToWrite, uint8_t writeData)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	460a      	mov	r2, r1
 8000c6a:	71fb      	strb	r3, [r7, #7]
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	71bb      	strb	r3, [r7, #6]
	STMPE811_Write(RegToWrite, writeData);
 8000c70:	79ba      	ldrb	r2, [r7, #6]
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	4611      	mov	r1, r2
 8000c76:	4618      	mov	r0, r3
 8000c78:	f002 fc2a 	bl	80034d0 <STMPE811_Write>
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <START_SCREEN>:

static Object object;
static uint8_t dummyTable[ROWS][COLS];
static uint32_t randomNumber;

void START_SCREEN(void){
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
	for(int i = 0; i < ROWS; i++){
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	e016      	b.n	8000cbe <START_SCREEN+0x3a>
		for(int j = 0; j < COLS; j++) {
 8000c90:	2300      	movs	r3, #0
 8000c92:	603b      	str	r3, [r7, #0]
 8000c94:	e00d      	b.n	8000cb2 <START_SCREEN+0x2e>
			dummyTable[i][j] = 0;
 8000c96:	494f      	ldr	r1, [pc, #316]	@ (8000dd4 <START_SCREEN+0x150>)
 8000c98:	687a      	ldr	r2, [r7, #4]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	18ca      	adds	r2, r1, r3
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
		for(int j = 0; j < COLS; j++) {
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	2b09      	cmp	r3, #9
 8000cb6:	ddee      	ble.n	8000c96 <START_SCREEN+0x12>
	for(int i = 0; i < ROWS; i++){
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2b0c      	cmp	r3, #12
 8000cc2:	dde5      	ble.n	8000c90 <START_SCREEN+0xc>
		}
	}

	LCD_Clear(0,LCD_COLOR_BLUE);
 8000cc4:	211f      	movs	r1, #31
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f7ff fece 	bl	8000a68 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000ccc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000cd0:	f7ff feec 	bl	8000aac <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000cd4:	4840      	ldr	r0, [pc, #256]	@ (8000dd8 <START_SCREEN+0x154>)
 8000cd6:	f7ff fef9 	bl	8000acc <LCD_SetFont>
	// TETRIS
	LCD_DisplayChar(70,110,'T');
 8000cda:	2254      	movs	r2, #84	@ 0x54
 8000cdc:	216e      	movs	r1, #110	@ 0x6e
 8000cde:	2046      	movs	r0, #70	@ 0x46
 8000ce0:	f7ff ff72 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(90,110,'E');
 8000ce4:	2245      	movs	r2, #69	@ 0x45
 8000ce6:	216e      	movs	r1, #110	@ 0x6e
 8000ce8:	205a      	movs	r0, #90	@ 0x5a
 8000cea:	f7ff ff6d 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(110,110,'T');
 8000cee:	2254      	movs	r2, #84	@ 0x54
 8000cf0:	216e      	movs	r1, #110	@ 0x6e
 8000cf2:	206e      	movs	r0, #110	@ 0x6e
 8000cf4:	f7ff ff68 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(130,110,'R');
 8000cf8:	2252      	movs	r2, #82	@ 0x52
 8000cfa:	216e      	movs	r1, #110	@ 0x6e
 8000cfc:	2082      	movs	r0, #130	@ 0x82
 8000cfe:	f7ff ff63 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(150,110,'I');
 8000d02:	2249      	movs	r2, #73	@ 0x49
 8000d04:	216e      	movs	r1, #110	@ 0x6e
 8000d06:	2096      	movs	r0, #150	@ 0x96
 8000d08:	f7ff ff5e 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(170,110,'S');
 8000d0c:	2253      	movs	r2, #83	@ 0x53
 8000d0e:	216e      	movs	r1, #110	@ 0x6e
 8000d10:	20aa      	movs	r0, #170	@ 0xaa
 8000d12:	f7ff ff59 	bl	8000bc8 <LCD_DisplayChar>
	// PRESS
	LCD_DisplayChar(80,130,'P');
 8000d16:	2250      	movs	r2, #80	@ 0x50
 8000d18:	2182      	movs	r1, #130	@ 0x82
 8000d1a:	2050      	movs	r0, #80	@ 0x50
 8000d1c:	f7ff ff54 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(100,130,'R');
 8000d20:	2252      	movs	r2, #82	@ 0x52
 8000d22:	2182      	movs	r1, #130	@ 0x82
 8000d24:	2064      	movs	r0, #100	@ 0x64
 8000d26:	f7ff ff4f 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(120,130,'E');
 8000d2a:	2245      	movs	r2, #69	@ 0x45
 8000d2c:	2182      	movs	r1, #130	@ 0x82
 8000d2e:	2078      	movs	r0, #120	@ 0x78
 8000d30:	f7ff ff4a 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(140,130,'S');
 8000d34:	2253      	movs	r2, #83	@ 0x53
 8000d36:	2182      	movs	r1, #130	@ 0x82
 8000d38:	208c      	movs	r0, #140	@ 0x8c
 8000d3a:	f7ff ff45 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(160,130,'S');
 8000d3e:	2253      	movs	r2, #83	@ 0x53
 8000d40:	2182      	movs	r1, #130	@ 0x82
 8000d42:	20a0      	movs	r0, #160	@ 0xa0
 8000d44:	f7ff ff40 	bl	8000bc8 <LCD_DisplayChar>
	// BUTTON
	LCD_DisplayChar(70,150,'B');
 8000d48:	2242      	movs	r2, #66	@ 0x42
 8000d4a:	2196      	movs	r1, #150	@ 0x96
 8000d4c:	2046      	movs	r0, #70	@ 0x46
 8000d4e:	f7ff ff3b 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(90,150,'U');
 8000d52:	2255      	movs	r2, #85	@ 0x55
 8000d54:	2196      	movs	r1, #150	@ 0x96
 8000d56:	205a      	movs	r0, #90	@ 0x5a
 8000d58:	f7ff ff36 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(110,150,'T');
 8000d5c:	2254      	movs	r2, #84	@ 0x54
 8000d5e:	2196      	movs	r1, #150	@ 0x96
 8000d60:	206e      	movs	r0, #110	@ 0x6e
 8000d62:	f7ff ff31 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(130,150,'T');
 8000d66:	2254      	movs	r2, #84	@ 0x54
 8000d68:	2196      	movs	r1, #150	@ 0x96
 8000d6a:	2082      	movs	r0, #130	@ 0x82
 8000d6c:	f7ff ff2c 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(150,150,'O');
 8000d70:	224f      	movs	r2, #79	@ 0x4f
 8000d72:	2196      	movs	r1, #150	@ 0x96
 8000d74:	2096      	movs	r0, #150	@ 0x96
 8000d76:	f7ff ff27 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(170,150,'N');
 8000d7a:	224e      	movs	r2, #78	@ 0x4e
 8000d7c:	2196      	movs	r1, #150	@ 0x96
 8000d7e:	20aa      	movs	r0, #170	@ 0xaa
 8000d80:	f7ff ff22 	bl	8000bc8 <LCD_DisplayChar>
	// TO
	LCD_DisplayChar(110,170,'T');
 8000d84:	2254      	movs	r2, #84	@ 0x54
 8000d86:	21aa      	movs	r1, #170	@ 0xaa
 8000d88:	206e      	movs	r0, #110	@ 0x6e
 8000d8a:	f7ff ff1d 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(130,170,'O');
 8000d8e:	224f      	movs	r2, #79	@ 0x4f
 8000d90:	21aa      	movs	r1, #170	@ 0xaa
 8000d92:	2082      	movs	r0, #130	@ 0x82
 8000d94:	f7ff ff18 	bl	8000bc8 <LCD_DisplayChar>
	// START
	LCD_DisplayChar(80,190,'S');
 8000d98:	2253      	movs	r2, #83	@ 0x53
 8000d9a:	21be      	movs	r1, #190	@ 0xbe
 8000d9c:	2050      	movs	r0, #80	@ 0x50
 8000d9e:	f7ff ff13 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(100,190,'T');
 8000da2:	2254      	movs	r2, #84	@ 0x54
 8000da4:	21be      	movs	r1, #190	@ 0xbe
 8000da6:	2064      	movs	r0, #100	@ 0x64
 8000da8:	f7ff ff0e 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(120,190,'A');
 8000dac:	2241      	movs	r2, #65	@ 0x41
 8000dae:	21be      	movs	r1, #190	@ 0xbe
 8000db0:	2078      	movs	r0, #120	@ 0x78
 8000db2:	f7ff ff09 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(140,190,'R');
 8000db6:	2252      	movs	r2, #82	@ 0x52
 8000db8:	21be      	movs	r1, #190	@ 0xbe
 8000dba:	208c      	movs	r0, #140	@ 0x8c
 8000dbc:	f7ff ff04 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(160,190,'T');
 8000dc0:	2254      	movs	r2, #84	@ 0x54
 8000dc2:	21be      	movs	r1, #190	@ 0xbe
 8000dc4:	20a0      	movs	r0, #160	@ 0xa0
 8000dc6:	f7ff feff 	bl	8000bc8 <LCD_DisplayChar>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	2002599c 	.word	0x2002599c
 8000dd8:	20000004 	.word	0x20000004

08000ddc <GAME_OVER>:

void GAME_OVER(uint32_t total_time) { // code for displaying game over
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
	LCD_Clear(0,LCD_COLOR_BLUE);
 8000de4:	211f      	movs	r1, #31
 8000de6:	2000      	movs	r0, #0
 8000de8:	f7ff fe3e 	bl	8000a68 <LCD_Clear>
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8000dec:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000df0:	f7ff fe5c 	bl	8000aac <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 8000df4:	4854      	ldr	r0, [pc, #336]	@ (8000f48 <GAME_OVER+0x16c>)
 8000df6:	f7ff fe69 	bl	8000acc <LCD_SetFont>

	// GAME
	LCD_DisplayChar(90,100,'G');
 8000dfa:	2247      	movs	r2, #71	@ 0x47
 8000dfc:	2164      	movs	r1, #100	@ 0x64
 8000dfe:	205a      	movs	r0, #90	@ 0x5a
 8000e00:	f7ff fee2 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(110,100,'A');
 8000e04:	2241      	movs	r2, #65	@ 0x41
 8000e06:	2164      	movs	r1, #100	@ 0x64
 8000e08:	206e      	movs	r0, #110	@ 0x6e
 8000e0a:	f7ff fedd 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(130,100,'M');
 8000e0e:	224d      	movs	r2, #77	@ 0x4d
 8000e10:	2164      	movs	r1, #100	@ 0x64
 8000e12:	2082      	movs	r0, #130	@ 0x82
 8000e14:	f7ff fed8 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(150,100,'E');
 8000e18:	2245      	movs	r2, #69	@ 0x45
 8000e1a:	2164      	movs	r1, #100	@ 0x64
 8000e1c:	2096      	movs	r0, #150	@ 0x96
 8000e1e:	f7ff fed3 	bl	8000bc8 <LCD_DisplayChar>
	// OVER
	LCD_DisplayChar(90,130,'O');
 8000e22:	224f      	movs	r2, #79	@ 0x4f
 8000e24:	2182      	movs	r1, #130	@ 0x82
 8000e26:	205a      	movs	r0, #90	@ 0x5a
 8000e28:	f7ff fece 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(110,130,'V');
 8000e2c:	2256      	movs	r2, #86	@ 0x56
 8000e2e:	2182      	movs	r1, #130	@ 0x82
 8000e30:	206e      	movs	r0, #110	@ 0x6e
 8000e32:	f7ff fec9 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(130,130,'E');
 8000e36:	2245      	movs	r2, #69	@ 0x45
 8000e38:	2182      	movs	r1, #130	@ 0x82
 8000e3a:	2082      	movs	r0, #130	@ 0x82
 8000e3c:	f7ff fec4 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(150,130,'R');
 8000e40:	2252      	movs	r2, #82	@ 0x52
 8000e42:	2182      	movs	r1, #130	@ 0x82
 8000e44:	2096      	movs	r0, #150	@ 0x96
 8000e46:	f7ff febf 	bl	8000bc8 <LCD_DisplayChar>
	// TIME:
	LCD_DisplayChar(85,160,'T');
 8000e4a:	2254      	movs	r2, #84	@ 0x54
 8000e4c:	21a0      	movs	r1, #160	@ 0xa0
 8000e4e:	2055      	movs	r0, #85	@ 0x55
 8000e50:	f7ff feba 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(105,160,'I');
 8000e54:	2249      	movs	r2, #73	@ 0x49
 8000e56:	21a0      	movs	r1, #160	@ 0xa0
 8000e58:	2069      	movs	r0, #105	@ 0x69
 8000e5a:	f7ff feb5 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(125,160,'M');
 8000e5e:	224d      	movs	r2, #77	@ 0x4d
 8000e60:	21a0      	movs	r1, #160	@ 0xa0
 8000e62:	207d      	movs	r0, #125	@ 0x7d
 8000e64:	f7ff feb0 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(145,160,'E');
 8000e68:	2245      	movs	r2, #69	@ 0x45
 8000e6a:	21a0      	movs	r1, #160	@ 0xa0
 8000e6c:	2091      	movs	r0, #145	@ 0x91
 8000e6e:	f7ff feab 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(165,160,':');
 8000e72:	223a      	movs	r2, #58	@ 0x3a
 8000e74:	21a0      	movs	r1, #160	@ 0xa0
 8000e76:	20a5      	movs	r0, #165	@ 0xa5
 8000e78:	f7ff fea6 	bl	8000bc8 <LCD_DisplayChar>

	//Timer to keep tract
	// t_on = ARR / 16MHz
	total_time = total_time / 1599999;
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	4b33      	ldr	r3, [pc, #204]	@ (8000f4c <GAME_OVER+0x170>)
 8000e80:	fba3 1302 	umull	r1, r3, r3, r2
 8000e84:	1ad2      	subs	r2, r2, r3
 8000e86:	0852      	lsrs	r2, r2, #1
 8000e88:	4413      	add	r3, r2
 8000e8a:	0d1b      	lsrs	r3, r3, #20
 8000e8c:	607b      	str	r3, [r7, #4]
	uint32_t minutes = total_time / 60;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a2f      	ldr	r2, [pc, #188]	@ (8000f50 <GAME_OVER+0x174>)
 8000e92:	fba2 2303 	umull	r2, r3, r2, r3
 8000e96:	095b      	lsrs	r3, r3, #5
 8000e98:	617b      	str	r3, [r7, #20]
	uint32_t seconds = total_time % 60;
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f50 <GAME_OVER+0x174>)
 8000e9e:	fba3 1302 	umull	r1, r3, r3, r2
 8000ea2:	0959      	lsrs	r1, r3, #5
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	011b      	lsls	r3, r3, #4
 8000ea8:	1a5b      	subs	r3, r3, r1
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	613b      	str	r3, [r7, #16]

	char m1 = '0' + (minutes / 10);  // Tens place of minutes
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	4a28      	ldr	r2, [pc, #160]	@ (8000f54 <GAME_OVER+0x178>)
 8000eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb8:	08db      	lsrs	r3, r3, #3
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	3330      	adds	r3, #48	@ 0x30
 8000ebe:	73fb      	strb	r3, [r7, #15]
	char m2 = '0' + (minutes % 10);  // Units place of minutes
 8000ec0:	6979      	ldr	r1, [r7, #20]
 8000ec2:	4b24      	ldr	r3, [pc, #144]	@ (8000f54 <GAME_OVER+0x178>)
 8000ec4:	fba3 2301 	umull	r2, r3, r3, r1
 8000ec8:	08da      	lsrs	r2, r3, #3
 8000eca:	4613      	mov	r3, r2
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	4413      	add	r3, r2
 8000ed0:	005b      	lsls	r3, r3, #1
 8000ed2:	1aca      	subs	r2, r1, r3
 8000ed4:	b2d3      	uxtb	r3, r2
 8000ed6:	3330      	adds	r3, #48	@ 0x30
 8000ed8:	73bb      	strb	r3, [r7, #14]
	char s1 = '0' + (seconds / 10);  // Tens place of seconds
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	4a1d      	ldr	r2, [pc, #116]	@ (8000f54 <GAME_OVER+0x178>)
 8000ede:	fba2 2303 	umull	r2, r3, r2, r3
 8000ee2:	08db      	lsrs	r3, r3, #3
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	3330      	adds	r3, #48	@ 0x30
 8000ee8:	737b      	strb	r3, [r7, #13]
	char s2 = '0' + (seconds % 10);  // Units place of seconds
 8000eea:	6939      	ldr	r1, [r7, #16]
 8000eec:	4b19      	ldr	r3, [pc, #100]	@ (8000f54 <GAME_OVER+0x178>)
 8000eee:	fba3 2301 	umull	r2, r3, r3, r1
 8000ef2:	08da      	lsrs	r2, r3, #3
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	1aca      	subs	r2, r1, r3
 8000efe:	b2d3      	uxtb	r3, r2
 8000f00:	3330      	adds	r3, #48	@ 0x30
 8000f02:	733b      	strb	r3, [r7, #12]

	LCD_DisplayChar(85,190,m1);
 8000f04:	7bfb      	ldrb	r3, [r7, #15]
 8000f06:	461a      	mov	r2, r3
 8000f08:	21be      	movs	r1, #190	@ 0xbe
 8000f0a:	2055      	movs	r0, #85	@ 0x55
 8000f0c:	f7ff fe5c 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(105,190,m2);
 8000f10:	7bbb      	ldrb	r3, [r7, #14]
 8000f12:	461a      	mov	r2, r3
 8000f14:	21be      	movs	r1, #190	@ 0xbe
 8000f16:	2069      	movs	r0, #105	@ 0x69
 8000f18:	f7ff fe56 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(125,190,':');
 8000f1c:	223a      	movs	r2, #58	@ 0x3a
 8000f1e:	21be      	movs	r1, #190	@ 0xbe
 8000f20:	207d      	movs	r0, #125	@ 0x7d
 8000f22:	f7ff fe51 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(145,190,s1);
 8000f26:	7b7b      	ldrb	r3, [r7, #13]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	21be      	movs	r1, #190	@ 0xbe
 8000f2c:	2091      	movs	r0, #145	@ 0x91
 8000f2e:	f7ff fe4b 	bl	8000bc8 <LCD_DisplayChar>
	LCD_DisplayChar(165,190,s2);
 8000f32:	7b3b      	ldrb	r3, [r7, #12]
 8000f34:	461a      	mov	r2, r3
 8000f36:	21be      	movs	r1, #190	@ 0xbe
 8000f38:	20a5      	movs	r0, #165	@ 0xa5
 8000f3a:	f7ff fe45 	bl	8000bc8 <LCD_DisplayChar>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000004 	.word	0x20000004
 8000f4c:	4f8b664d 	.word	0x4f8b664d
 8000f50:	88888889 	.word	0x88888889
 8000f54:	cccccccd 	.word	0xcccccccd

08000f58 <RND_NUM>:

void RND_NUM(void) { // issue here
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
	uint32_t RND;
	RNG_HandleTypeDef hrng;
	hrng.Instance = RNG;
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f9c <RND_NUM+0x44>)
 8000f60:	607b      	str	r3, [r7, #4]
	if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	4618      	mov	r0, r3
 8000f66:	f005 fc6d 	bl	8006844 <HAL_RNG_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <RND_NUM+0x1c>
	{
		while(1);
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <RND_NUM+0x18>
	}
    if (HAL_RNG_GenerateRandomNumber(&hrng, &RND) != HAL_OK) {
 8000f74:	f107 0214 	add.w	r2, r7, #20
 8000f78:	1d3b      	adds	r3, r7, #4
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f005 fc8b 	bl	8006898 <HAL_RNG_GenerateRandomNumber>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d002      	beq.n	8000f8e <RND_NUM+0x36>
	    printf("Error Generating Random Number");
 8000f88:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <RND_NUM+0x48>)
 8000f8a:	f007 f81f 	bl	8007fcc <iprintf>
	}
	randomNumber = RND;
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	4a04      	ldr	r2, [pc, #16]	@ (8000fa4 <RND_NUM+0x4c>)
 8000f92:	6013      	str	r3, [r2, #0]
}
 8000f94:	bf00      	nop
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	50060800 	.word	0x50060800
 8000fa0:	08008da8 	.word	0x08008da8
 8000fa4:	20025a20 	.word	0x20025a20

08000fa8 <check_State>:

uint8_t check_State(void) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af00      	add	r7, sp, #0
	//CASES
	//	1. Hits bottom of screen -> Update Matrix, make new object
	//	2. Collision with a 1
	//		a. Is it at the top of the screen -> Update Matrix, end game
	//		b. Hits other block -> Update Matrix, make new object
	if((object.originbit.y == 0) || (object.suboriginbit_0.y == 0) ||
 8000fae:	4b57      	ldr	r3, [pc, #348]	@ (800110c <check_State+0x164>)
 8000fb0:	78db      	ldrb	r3, [r3, #3]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d00b      	beq.n	8000fce <check_State+0x26>
 8000fb6:	4b55      	ldr	r3, [pc, #340]	@ (800110c <check_State+0x164>)
 8000fb8:	795b      	ldrb	r3, [r3, #5]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d007      	beq.n	8000fce <check_State+0x26>
	   (object.suboriginbit_1.y == 0) || (object.suboriginbit_1.y == 0)) {
 8000fbe:	4b53      	ldr	r3, [pc, #332]	@ (800110c <check_State+0x164>)
 8000fc0:	79db      	ldrb	r3, [r3, #7]
	if((object.originbit.y == 0) || (object.suboriginbit_0.y == 0) ||
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <check_State+0x26>
	   (object.suboriginbit_1.y == 0) || (object.suboriginbit_1.y == 0)) {
 8000fc6:	4b51      	ldr	r3, [pc, #324]	@ (800110c <check_State+0x164>)
 8000fc8:	79db      	ldrb	r3, [r3, #7]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d108      	bne.n	8000fe0 <check_State+0x38>
		Matrix_update();
 8000fce:	f000 ff19 	bl	8001e04 <Matrix_update>
		object_Select();
 8000fd2:	f000 f8a5 	bl	8001120 <object_Select>
		printf("Hit bottom");
 8000fd6:	484e      	ldr	r0, [pc, #312]	@ (8001110 <check_State+0x168>)
 8000fd8:	f006 fff8 	bl	8007fcc <iprintf>
		return 0; // 0 -> Hit bottom
 8000fdc:	2300      	movs	r3, #0
 8000fde:	e091      	b.n	8001104 <check_State+0x15c>

	} else if((dummyTable[object.originbit.y - 1][object.originbit.x] == 1) ||
 8000fe0:	4b4a      	ldr	r3, [pc, #296]	@ (800110c <check_State+0x164>)
 8000fe2:	78db      	ldrb	r3, [r3, #3]
 8000fe4:	1e5a      	subs	r2, r3, #1
 8000fe6:	4b49      	ldr	r3, [pc, #292]	@ (800110c <check_State+0x164>)
 8000fe8:	789b      	ldrb	r3, [r3, #2]
 8000fea:	4618      	mov	r0, r3
 8000fec:	4949      	ldr	r1, [pc, #292]	@ (8001114 <check_State+0x16c>)
 8000fee:	4613      	mov	r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	440b      	add	r3, r1
 8000ff8:	4403      	add	r3, r0
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d02f      	beq.n	8001060 <check_State+0xb8>
			  (dummyTable[object.suboriginbit_0.y - 1][object.suboriginbit_0.x] == 1) ||
 8001000:	4b42      	ldr	r3, [pc, #264]	@ (800110c <check_State+0x164>)
 8001002:	795b      	ldrb	r3, [r3, #5]
 8001004:	1e5a      	subs	r2, r3, #1
 8001006:	4b41      	ldr	r3, [pc, #260]	@ (800110c <check_State+0x164>)
 8001008:	791b      	ldrb	r3, [r3, #4]
 800100a:	4618      	mov	r0, r3
 800100c:	4941      	ldr	r1, [pc, #260]	@ (8001114 <check_State+0x16c>)
 800100e:	4613      	mov	r3, r2
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	4413      	add	r3, r2
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	440b      	add	r3, r1
 8001018:	4403      	add	r3, r0
 800101a:	781b      	ldrb	r3, [r3, #0]
	} else if((dummyTable[object.originbit.y - 1][object.originbit.x] == 1) ||
 800101c:	2b01      	cmp	r3, #1
 800101e:	d01f      	beq.n	8001060 <check_State+0xb8>
			  (dummyTable[object.suboriginbit_1.y - 1][object.suboriginbit_1.x] == 1) ||
 8001020:	4b3a      	ldr	r3, [pc, #232]	@ (800110c <check_State+0x164>)
 8001022:	79db      	ldrb	r3, [r3, #7]
 8001024:	1e5a      	subs	r2, r3, #1
 8001026:	4b39      	ldr	r3, [pc, #228]	@ (800110c <check_State+0x164>)
 8001028:	799b      	ldrb	r3, [r3, #6]
 800102a:	4618      	mov	r0, r3
 800102c:	4939      	ldr	r1, [pc, #228]	@ (8001114 <check_State+0x16c>)
 800102e:	4613      	mov	r3, r2
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	4413      	add	r3, r2
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	440b      	add	r3, r1
 8001038:	4403      	add	r3, r0
 800103a:	781b      	ldrb	r3, [r3, #0]
			  (dummyTable[object.suboriginbit_0.y - 1][object.suboriginbit_0.x] == 1) ||
 800103c:	2b01      	cmp	r3, #1
 800103e:	d00f      	beq.n	8001060 <check_State+0xb8>
			  (dummyTable[object.suboriginbit_2.y - 1][object.suboriginbit_2.x] == 1) ){
 8001040:	4b32      	ldr	r3, [pc, #200]	@ (800110c <check_State+0x164>)
 8001042:	7a5b      	ldrb	r3, [r3, #9]
 8001044:	1e5a      	subs	r2, r3, #1
 8001046:	4b31      	ldr	r3, [pc, #196]	@ (800110c <check_State+0x164>)
 8001048:	7a1b      	ldrb	r3, [r3, #8]
 800104a:	4618      	mov	r0, r3
 800104c:	4931      	ldr	r1, [pc, #196]	@ (8001114 <check_State+0x16c>)
 800104e:	4613      	mov	r3, r2
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	4413      	add	r3, r2
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	440b      	add	r3, r1
 8001058:	4403      	add	r3, r0
 800105a:	781b      	ldrb	r3, [r3, #0]
			  (dummyTable[object.suboriginbit_1.y - 1][object.suboriginbit_1.x] == 1) ||
 800105c:	2b01      	cmp	r3, #1
 800105e:	d150      	bne.n	8001102 <check_State+0x15a>
		uint8_t rowNonZeros[ROWS] = {0};
 8001060:	2300      	movs	r3, #0
 8001062:	603b      	str	r3, [r7, #0]
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	721a      	strb	r2, [r3, #8]
		uint32_t compareRow = 0x3FF; // Mask to check the first 10 bits
 800106e:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8001072:	613b      	str	r3, [r7, #16]
		for (int i = 0; i < ROWS; i++) {
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
 8001078:	e020      	b.n	80010bc <check_State+0x114>
		    for (int j = 0; j < COLS; j++) {
 800107a:	2300      	movs	r3, #0
 800107c:	61bb      	str	r3, [r7, #24]
 800107e:	e017      	b.n	80010b0 <check_State+0x108>
		        if (dummyTable[i][j] & compareRow) {  // Check if at least one bit in dummyTable[i][j] is non-zero
 8001080:	4924      	ldr	r1, [pc, #144]	@ (8001114 <check_State+0x16c>)
 8001082:	69fa      	ldr	r2, [r7, #28]
 8001084:	4613      	mov	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	18ca      	adds	r2, r1, r3
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	4413      	add	r3, r2
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	4013      	ands	r3, r2
 800109a:	2b00      	cmp	r3, #0
 800109c:	d005      	beq.n	80010aa <check_State+0x102>
		            rowNonZeros[i] = 1;
 800109e:	463a      	mov	r2, r7
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	4413      	add	r3, r2
 80010a4:	2201      	movs	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]
		            break;  // Exit the inner loop once we've found a non-zero bit
 80010a8:	e005      	b.n	80010b6 <check_State+0x10e>
		    for (int j = 0; j < COLS; j++) {
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	3301      	adds	r3, #1
 80010ae:	61bb      	str	r3, [r7, #24]
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	2b09      	cmp	r3, #9
 80010b4:	dde4      	ble.n	8001080 <check_State+0xd8>
		for (int i = 0; i < ROWS; i++) {
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3301      	adds	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	2b0c      	cmp	r3, #12
 80010c0:	dddb      	ble.n	800107a <check_State+0xd2>
		        }
		    }
		}

		for (int i = 0; i < ROWS; i++) {
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	e011      	b.n	80010ec <check_State+0x144>
		    if (rowNonZeros[i] == 0) {
 80010c8:	463a      	mov	r2, r7
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	4413      	add	r3, r2
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d108      	bne.n	80010e6 <check_State+0x13e>
		    	Matrix_update();
 80010d4:	f000 fe96 	bl	8001e04 <Matrix_update>
		    	object_Select();
 80010d8:	f000 f822 	bl	8001120 <object_Select>
		    	printf("Collision");
 80010dc:	480e      	ldr	r0, [pc, #56]	@ (8001118 <check_State+0x170>)
 80010de:	f006 ff75 	bl	8007fcc <iprintf>
		        return 1; // 1 -> Not all rows have non-zero values
 80010e2:	2301      	movs	r3, #1
 80010e4:	e00e      	b.n	8001104 <check_State+0x15c>
		for (int i = 0; i < ROWS; i++) {
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	3301      	adds	r3, #1
 80010ea:	617b      	str	r3, [r7, #20]
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	2b0c      	cmp	r3, #12
 80010f0:	ddea      	ble.n	80010c8 <check_State+0x120>
		    }
		}
		removeSchedulerEvent(MATRIX_UPDATE_EVENT);
 80010f2:	2004      	movs	r0, #4
 80010f4:	f000 fef0 	bl	8001ed8 <removeSchedulerEvent>
		printf("Game End");
 80010f8:	4808      	ldr	r0, [pc, #32]	@ (800111c <check_State+0x174>)
 80010fa:	f006 ff67 	bl	8007fcc <iprintf>
		return 2; // 2-> Collision with Block to end game
 80010fe:	2302      	movs	r3, #2
 8001100:	e000      	b.n	8001104 <check_State+0x15c>

	} else {
		return 3; // 3-> Safe operation
 8001102:	2303      	movs	r3, #3
	}
}
 8001104:	4618      	mov	r0, r3
 8001106:	3720      	adds	r7, #32
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	20025990 	.word	0x20025990
 8001110:	08008dc8 	.word	0x08008dc8
 8001114:	2002599c 	.word	0x2002599c
 8001118:	08008dd4 	.word	0x08008dd4
 800111c:	08008de0 	.word	0x08008de0

08001120 <object_Select>:

void object_Select(void){
 8001120:	b580      	push	{r7, lr}
 8001122:	b096      	sub	sp, #88	@ 0x58
 8001124:	af00      	add	r7, sp, #0
	RND_NUM();
 8001126:	f7ff ff17 	bl	8000f58 <RND_NUM>
	randomNumber = randomNumber % 7;
 800112a:	4b48      	ldr	r3, [pc, #288]	@ (800124c <object_Select+0x12c>)
 800112c:	6819      	ldr	r1, [r3, #0]
 800112e:	4b48      	ldr	r3, [pc, #288]	@ (8001250 <object_Select+0x130>)
 8001130:	fba3 2301 	umull	r2, r3, r3, r1
 8001134:	1aca      	subs	r2, r1, r3
 8001136:	0852      	lsrs	r2, r2, #1
 8001138:	4413      	add	r3, r2
 800113a:	089a      	lsrs	r2, r3, #2
 800113c:	4613      	mov	r3, r2
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	1a9b      	subs	r3, r3, r2
 8001142:	1aca      	subs	r2, r1, r3
 8001144:	4b41      	ldr	r3, [pc, #260]	@ (800124c <object_Select+0x12c>)
 8001146:	601a      	str	r2, [r3, #0]
	switch(randomNumber) {
 8001148:	4b40      	ldr	r3, [pc, #256]	@ (800124c <object_Select+0x12c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b06      	cmp	r3, #6
 800114e:	d878      	bhi.n	8001242 <object_Select+0x122>
 8001150:	a201      	add	r2, pc, #4	@ (adr r2, 8001158 <object_Select+0x38>)
 8001152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001156:	bf00      	nop
 8001158:	08001175 	.word	0x08001175
 800115c:	08001193 	.word	0x08001193
 8001160:	080011b1 	.word	0x080011b1
 8001164:	080011cf 	.word	0x080011cf
 8001168:	080011ed 	.word	0x080011ed
 800116c:	0800120b 	.word	0x0800120b
 8001170:	08001229 	.word	0x08001229
		case(ORICKY):{
			Object Oricky = {
 8001174:	4a37      	ldr	r2, [pc, #220]	@ (8001254 <object_Select+0x134>)
 8001176:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800117a:	ca07      	ldmia	r2, {r0, r1, r2}
 800117c:	c303      	stmia	r3!, {r0, r1}
 800117e:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 },     // 1 [1] 1
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Oricky;
 8001180:	4b35      	ldr	r3, [pc, #212]	@ (8001258 <object_Select+0x138>)
 8001182:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001186:	ca07      	ldmia	r2, {r0, r1, r2}
 8001188:	c303      	stmia	r3!, {r0, r1}
 800118a:	801a      	strh	r2, [r3, #0]
		    transform_rotation();
 800118c:	f000 f91e 	bl	80013cc <transform_rotation>
			break;
 8001190:	e057      	b.n	8001242 <object_Select+0x122>
		}
		case(BRICKY):{
			Object Bricky = {
 8001192:	4a32      	ldr	r2, [pc, #200]	@ (800125c <object_Select+0x13c>)
 8001194:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001198:	ca07      	ldmia	r2, {r0, r1, r2}
 800119a:	c303      	stmia	r3!, {r0, r1}
 800119c:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 },     // 1 [1] 1
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Bricky;
 800119e:	4b2e      	ldr	r3, [pc, #184]	@ (8001258 <object_Select+0x138>)
 80011a0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80011a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80011a6:	c303      	stmia	r3!, {r0, r1}
 80011a8:	801a      	strh	r2, [r3, #0]
			transform_rotation();
 80011aa:	f000 f90f 	bl	80013cc <transform_rotation>
			break;
 80011ae:	e048      	b.n	8001242 <object_Select+0x122>
		}
		case(CLEVELAND):{
			Object Cleveland = {
 80011b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001260 <object_Select+0x140>)
 80011b2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80011b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80011b8:	c303      	stmia	r3!, {r0, r1}
 80011ba:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, 	  //    [1] 1
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Cleveland;
 80011bc:	4b26      	ldr	r3, [pc, #152]	@ (8001258 <object_Select+0x138>)
 80011be:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80011c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011c4:	c303      	stmia	r3!, {r0, r1}
 80011c6:	801a      	strh	r2, [r3, #0]
		    transform_rotation();
 80011c8:	f000 f900 	bl	80013cc <transform_rotation>
			break;
 80011cc:	e039      	b.n	8001242 <object_Select+0x122>
		}
		case(RHODE):{
			Object Rhode = {
 80011ce:	4a25      	ldr	r2, [pc, #148]	@ (8001264 <object_Select+0x144>)
 80011d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80011d6:	c303      	stmia	r3!, {r0, r1}
 80011d8:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 },     //     1 [1]
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Rhode;
 80011da:	4b1f      	ldr	r3, [pc, #124]	@ (8001258 <object_Select+0x138>)
 80011dc:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80011e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80011e2:	c303      	stmia	r3!, {r0, r1}
 80011e4:	801a      	strh	r2, [r3, #0]
			transform_rotation();
 80011e6:	f000 f8f1 	bl	80013cc <transform_rotation>
			break;
 80011ea:	e02a      	b.n	8001242 <object_Select+0x122>
		}
		case(HERO):{
			Object Hero = {
 80011ec:	4a1e      	ldr	r2, [pc, #120]	@ (8001268 <object_Select+0x148>)
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011f4:	c303      	stmia	r3!, {r0, r1}
 80011f6:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, 			 //  1 1 [1] 1
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Hero;
 80011f8:	4b17      	ldr	r3, [pc, #92]	@ (8001258 <object_Select+0x138>)
 80011fa:	f107 021c 	add.w	r2, r7, #28
 80011fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001200:	c303      	stmia	r3!, {r0, r1}
 8001202:	801a      	strh	r2, [r3, #0]
			transform_rotation();
 8001204:	f000 f8e2 	bl	80013cc <transform_rotation>
			break;
 8001208:	e01b      	b.n	8001242 <object_Select+0x122>
		}
		case(TEEWEE):{
			Object Teewee = {
 800120a:	4a18      	ldr	r2, [pc, #96]	@ (800126c <object_Select+0x14c>)
 800120c:	f107 0310 	add.w	r3, r7, #16
 8001210:	ca07      	ldmia	r2, {r0, r1, r2}
 8001212:	c303      	stmia	r3!, {r0, r1}
 8001214:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, 			 	// 1 [1] 1
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Teewee;
 8001216:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <object_Select+0x138>)
 8001218:	f107 0210 	add.w	r2, r7, #16
 800121c:	ca07      	ldmia	r2, {r0, r1, r2}
 800121e:	c303      	stmia	r3!, {r0, r1}
 8001220:	801a      	strh	r2, [r3, #0]
			transform_rotation();
 8001222:	f000 f8d3 	bl	80013cc <transform_rotation>
			break;
 8001226:	e00c      	b.n	8001242 <object_Select+0x122>
		}
		case(SMASHBOY):{
			Object Smashboy = {
 8001228:	4a11      	ldr	r2, [pc, #68]	@ (8001270 <object_Select+0x150>)
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	ca07      	ldmia	r2, {r0, r1, r2}
 800122e:	c303      	stmia	r3!, {r0, r1}
 8001230:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, 			 	//[1] 1
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Smashboy;
 8001232:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <object_Select+0x138>)
 8001234:	1d3a      	adds	r2, r7, #4
 8001236:	ca07      	ldmia	r2, {r0, r1, r2}
 8001238:	c303      	stmia	r3!, {r0, r1}
 800123a:	801a      	strh	r2, [r3, #0]
			transform_rotation();
 800123c:	f000 f8c6 	bl	80013cc <transform_rotation>
			break;
 8001240:	bf00      	nop
		}

	}

}
 8001242:	bf00      	nop
 8001244:	3758      	adds	r7, #88	@ 0x58
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20025a20 	.word	0x20025a20
 8001250:	24924925 	.word	0x24924925
 8001254:	08008dec 	.word	0x08008dec
 8001258:	20025990 	.word	0x20025990
 800125c:	08008df8 	.word	0x08008df8
 8001260:	08008e04 	.word	0x08008e04
 8001264:	08008e10 	.word	0x08008e10
 8001268:	08008e1c 	.word	0x08008e1c
 800126c:	08008e28 	.word	0x08008e28
 8001270:	08008e34 	.word	0x08008e34

08001274 <shift_Left>:


void shift_Left(void){
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
	Object temp = object;
 800127a:	4a1b      	ldr	r2, [pc, #108]	@ (80012e8 <shift_Left+0x74>)
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001280:	c303      	stmia	r3!, {r0, r1}
 8001282:	801a      	strh	r2, [r3, #0]
	Matrix_clear();
 8001284:	f000 fd76 	bl	8001d74 <Matrix_clear>
	object.originbit.x -= 1;
 8001288:	4b17      	ldr	r3, [pc, #92]	@ (80012e8 <shift_Left+0x74>)
 800128a:	789b      	ldrb	r3, [r3, #2]
 800128c:	3b01      	subs	r3, #1
 800128e:	b2da      	uxtb	r2, r3
 8001290:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <shift_Left+0x74>)
 8001292:	709a      	strb	r2, [r3, #2]
	object.suboriginbit_0.x -= 1;
 8001294:	4b14      	ldr	r3, [pc, #80]	@ (80012e8 <shift_Left+0x74>)
 8001296:	791b      	ldrb	r3, [r3, #4]
 8001298:	3b01      	subs	r3, #1
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <shift_Left+0x74>)
 800129e:	711a      	strb	r2, [r3, #4]
	object.suboriginbit_1.x -= 1;
 80012a0:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <shift_Left+0x74>)
 80012a2:	799b      	ldrb	r3, [r3, #6]
 80012a4:	3b01      	subs	r3, #1
 80012a6:	b2da      	uxtb	r2, r3
 80012a8:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <shift_Left+0x74>)
 80012aa:	719a      	strb	r2, [r3, #6]
	object.suboriginbit_2.x -= 1;
 80012ac:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <shift_Left+0x74>)
 80012ae:	7a1b      	ldrb	r3, [r3, #8]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <shift_Left+0x74>)
 80012b6:	721a      	strb	r2, [r3, #8]
	object.Rotation -= 1;
 80012b8:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <shift_Left+0x74>)
 80012ba:	785b      	ldrb	r3, [r3, #1]
 80012bc:	3b01      	subs	r3, #1
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <shift_Left+0x74>)
 80012c2:	705a      	strb	r2, [r3, #1]
	transform_rotation();
 80012c4:	f000 f882 	bl	80013cc <transform_rotation>
	if(check_State() == 1) {
 80012c8:	f7ff fe6e 	bl	8000fa8 <check_State>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d104      	bne.n	80012dc <shift_Left+0x68>
		object = temp;
 80012d2:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <shift_Left+0x74>)
 80012d4:	1d3a      	adds	r2, r7, #4
 80012d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012d8:	c303      	stmia	r3!, {r0, r1}
 80012da:	801a      	strh	r2, [r3, #0]
	}
	Matrix_update();
 80012dc:	f000 fd92 	bl	8001e04 <Matrix_update>
}
 80012e0:	bf00      	nop
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	20025990 	.word	0x20025990

080012ec <shift_Right>:
void shift_Right(void){
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
	Object temp = object;
 80012f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001360 <shift_Right+0x74>)
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012f8:	c303      	stmia	r3!, {r0, r1}
 80012fa:	801a      	strh	r2, [r3, #0]
	Matrix_clear();
 80012fc:	f000 fd3a 	bl	8001d74 <Matrix_clear>
	object.originbit.x += 1;
 8001300:	4b17      	ldr	r3, [pc, #92]	@ (8001360 <shift_Right+0x74>)
 8001302:	789b      	ldrb	r3, [r3, #2]
 8001304:	3301      	adds	r3, #1
 8001306:	b2da      	uxtb	r2, r3
 8001308:	4b15      	ldr	r3, [pc, #84]	@ (8001360 <shift_Right+0x74>)
 800130a:	709a      	strb	r2, [r3, #2]
	object.suboriginbit_0.x += 1;
 800130c:	4b14      	ldr	r3, [pc, #80]	@ (8001360 <shift_Right+0x74>)
 800130e:	791b      	ldrb	r3, [r3, #4]
 8001310:	3301      	adds	r3, #1
 8001312:	b2da      	uxtb	r2, r3
 8001314:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <shift_Right+0x74>)
 8001316:	711a      	strb	r2, [r3, #4]
	object.suboriginbit_1.x += 1;
 8001318:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <shift_Right+0x74>)
 800131a:	799b      	ldrb	r3, [r3, #6]
 800131c:	3301      	adds	r3, #1
 800131e:	b2da      	uxtb	r2, r3
 8001320:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <shift_Right+0x74>)
 8001322:	719a      	strb	r2, [r3, #6]
	object.suboriginbit_2.x += 1;
 8001324:	4b0e      	ldr	r3, [pc, #56]	@ (8001360 <shift_Right+0x74>)
 8001326:	7a1b      	ldrb	r3, [r3, #8]
 8001328:	3301      	adds	r3, #1
 800132a:	b2da      	uxtb	r2, r3
 800132c:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <shift_Right+0x74>)
 800132e:	721a      	strb	r2, [r3, #8]
	object.Rotation -= 1;
 8001330:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <shift_Right+0x74>)
 8001332:	785b      	ldrb	r3, [r3, #1]
 8001334:	3b01      	subs	r3, #1
 8001336:	b2da      	uxtb	r2, r3
 8001338:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <shift_Right+0x74>)
 800133a:	705a      	strb	r2, [r3, #1]
	transform_rotation();
 800133c:	f000 f846 	bl	80013cc <transform_rotation>

	if(check_State() == 1) {
 8001340:	f7ff fe32 	bl	8000fa8 <check_State>
 8001344:	4603      	mov	r3, r0
 8001346:	2b01      	cmp	r3, #1
 8001348:	d104      	bne.n	8001354 <shift_Right+0x68>
		object = temp;
 800134a:	4b05      	ldr	r3, [pc, #20]	@ (8001360 <shift_Right+0x74>)
 800134c:	1d3a      	adds	r2, r7, #4
 800134e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001350:	c303      	stmia	r3!, {r0, r1}
 8001352:	801a      	strh	r2, [r3, #0]
	}

	Matrix_update();
 8001354:	f000 fd56 	bl	8001e04 <Matrix_update>
}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20025990 	.word	0x20025990

08001364 <tick_Matrix>:

void tick_Matrix(void){
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
	Object temp = object;
 800136a:	4a17      	ldr	r2, [pc, #92]	@ (80013c8 <tick_Matrix+0x64>)
 800136c:	1d3b      	adds	r3, r7, #4
 800136e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001370:	c303      	stmia	r3!, {r0, r1}
 8001372:	801a      	strh	r2, [r3, #0]
	Matrix_clear();
 8001374:	f000 fcfe 	bl	8001d74 <Matrix_clear>
	object.originbit.y -= 1;
 8001378:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <tick_Matrix+0x64>)
 800137a:	78db      	ldrb	r3, [r3, #3]
 800137c:	3b01      	subs	r3, #1
 800137e:	b2da      	uxtb	r2, r3
 8001380:	4b11      	ldr	r3, [pc, #68]	@ (80013c8 <tick_Matrix+0x64>)
 8001382:	70da      	strb	r2, [r3, #3]
	object.suboriginbit_0.y -= 1;
 8001384:	4b10      	ldr	r3, [pc, #64]	@ (80013c8 <tick_Matrix+0x64>)
 8001386:	795b      	ldrb	r3, [r3, #5]
 8001388:	3b01      	subs	r3, #1
 800138a:	b2da      	uxtb	r2, r3
 800138c:	4b0e      	ldr	r3, [pc, #56]	@ (80013c8 <tick_Matrix+0x64>)
 800138e:	715a      	strb	r2, [r3, #5]
	object.suboriginbit_1.y -= 1;
 8001390:	4b0d      	ldr	r3, [pc, #52]	@ (80013c8 <tick_Matrix+0x64>)
 8001392:	79db      	ldrb	r3, [r3, #7]
 8001394:	3b01      	subs	r3, #1
 8001396:	b2da      	uxtb	r2, r3
 8001398:	4b0b      	ldr	r3, [pc, #44]	@ (80013c8 <tick_Matrix+0x64>)
 800139a:	71da      	strb	r2, [r3, #7]
	object.suboriginbit_2.y -= 1;
 800139c:	4b0a      	ldr	r3, [pc, #40]	@ (80013c8 <tick_Matrix+0x64>)
 800139e:	7a5b      	ldrb	r3, [r3, #9]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	4b08      	ldr	r3, [pc, #32]	@ (80013c8 <tick_Matrix+0x64>)
 80013a6:	725a      	strb	r2, [r3, #9]
	object.Rotation -= 1;
 80013a8:	4b07      	ldr	r3, [pc, #28]	@ (80013c8 <tick_Matrix+0x64>)
 80013aa:	785b      	ldrb	r3, [r3, #1]
 80013ac:	3b01      	subs	r3, #1
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	4b05      	ldr	r3, [pc, #20]	@ (80013c8 <tick_Matrix+0x64>)
 80013b2:	705a      	strb	r2, [r3, #1]
	transform_rotation();
 80013b4:	f000 f80a 	bl	80013cc <transform_rotation>
	check_State();
 80013b8:	f7ff fdf6 	bl	8000fa8 <check_State>
	/*
	if(check_State() == 1) {
		object = temp;
	}*/
	Matrix_update();
 80013bc:	f000 fd22 	bl	8001e04 <Matrix_update>
}
 80013c0:	bf00      	nop
 80013c2:	3710      	adds	r7, #16
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	20025990 	.word	0x20025990

080013cc <transform_rotation>:

void transform_rotation(void){
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
	//Matrix_clear();
	object.Rotation += 1;
 80013d0:	4b96      	ldr	r3, [pc, #600]	@ (800162c <transform_rotation+0x260>)
 80013d2:	785b      	ldrb	r3, [r3, #1]
 80013d4:	3301      	adds	r3, #1
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	4b94      	ldr	r3, [pc, #592]	@ (800162c <transform_rotation+0x260>)
 80013da:	705a      	strb	r2, [r3, #1]
	if((object.Rotation > 3) || (object.Rotation < 0)) {
 80013dc:	4b93      	ldr	r3, [pc, #588]	@ (800162c <transform_rotation+0x260>)
 80013de:	785b      	ldrb	r3, [r3, #1]
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d902      	bls.n	80013ea <transform_rotation+0x1e>
		object.Rotation = 0;
 80013e4:	4b91      	ldr	r3, [pc, #580]	@ (800162c <transform_rotation+0x260>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	705a      	strb	r2, [r3, #1]
	}

	switch(object.name){
 80013ea:	4b90      	ldr	r3, [pc, #576]	@ (800162c <transform_rotation+0x260>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	f200 842e 	bhi.w	8001c50 <transform_rotation+0x884>
 80013f4:	a201      	add	r2, pc, #4	@ (adr r2, 80013fc <transform_rotation+0x30>)
 80013f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fa:	bf00      	nop
 80013fc:	08001419 	.word	0x08001419
 8001400:	08001543 	.word	0x08001543
 8001404:	08001675 	.word	0x08001675
 8001408:	0800179f 	.word	0x0800179f
 800140c:	080018d1 	.word	0x080018d1
 8001410:	080019eb 	.word	0x080019eb
 8001414:	08001b0d 	.word	0x08001b0d
		case(ORICKY):
			switch(object.Rotation) {
 8001418:	4b84      	ldr	r3, [pc, #528]	@ (800162c <transform_rotation+0x260>)
 800141a:	785b      	ldrb	r3, [r3, #1]
 800141c:	2b03      	cmp	r3, #3
 800141e:	f200 840a 	bhi.w	8001c36 <transform_rotation+0x86a>
 8001422:	a201      	add	r2, pc, #4	@ (adr r2, 8001428 <transform_rotation+0x5c>)
 8001424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001428:	08001439 	.word	0x08001439
 800142c:	0800147b 	.word	0x0800147b
 8001430:	080014bd 	.word	0x080014bd
 8001434:	080014ff 	.word	0x080014ff
				case(ROTATION_0):
						//       1
						// 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;   //		 1
 8001438:	4b7c      	ldr	r3, [pc, #496]	@ (800162c <transform_rotation+0x260>)
 800143a:	789b      	ldrb	r3, [r3, #2]
 800143c:	3b01      	subs	r3, #1
 800143e:	b2da      	uxtb	r2, r3
 8001440:	4b7a      	ldr	r3, [pc, #488]	@ (800162c <transform_rotation+0x260>)
 8001442:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		// [1] 1 1
 8001444:	4b79      	ldr	r3, [pc, #484]	@ (800162c <transform_rotation+0x260>)
 8001446:	78da      	ldrb	r2, [r3, #3]
 8001448:	4b78      	ldr	r3, [pc, #480]	@ (800162c <transform_rotation+0x260>)
 800144a:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;	//        1
 800144c:	4b77      	ldr	r3, [pc, #476]	@ (800162c <transform_rotation+0x260>)
 800144e:	789b      	ldrb	r3, [r3, #2]
 8001450:	3301      	adds	r3, #1
 8001452:	b2da      	uxtb	r2, r3
 8001454:	4b75      	ldr	r3, [pc, #468]	@ (800162c <transform_rotation+0x260>)
 8001456:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		//  1  1 [1]
 8001458:	4b74      	ldr	r3, [pc, #464]	@ (800162c <transform_rotation+0x260>)
 800145a:	78da      	ldrb	r2, [r3, #3]
 800145c:	4b73      	ldr	r3, [pc, #460]	@ (800162c <transform_rotation+0x260>)
 800145e:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	// 	  [1]
 8001460:	4b72      	ldr	r3, [pc, #456]	@ (800162c <transform_rotation+0x260>)
 8001462:	789b      	ldrb	r3, [r3, #2]
 8001464:	3301      	adds	r3, #1
 8001466:	b2da      	uxtb	r2, r3
 8001468:	4b70      	ldr	r3, [pc, #448]	@ (800162c <transform_rotation+0x260>)
 800146a:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	// 1 1 1
 800146c:	4b6f      	ldr	r3, [pc, #444]	@ (800162c <transform_rotation+0x260>)
 800146e:	78db      	ldrb	r3, [r3, #3]
 8001470:	3301      	adds	r3, #1
 8001472:	b2da      	uxtb	r2, r3
 8001474:	4b6d      	ldr	r3, [pc, #436]	@ (800162c <transform_rotation+0x260>)
 8001476:	725a      	strb	r2, [r3, #9]

					break;
 8001478:	e062      	b.n	8001540 <transform_rotation+0x174>
				case(ROTATION_1):
						// 1  1
						//   [1]
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 800147a:	4b6c      	ldr	r3, [pc, #432]	@ (800162c <transform_rotation+0x260>)
 800147c:	789a      	ldrb	r2, [r3, #2]
 800147e:	4b6b      	ldr	r3, [pc, #428]	@ (800162c <transform_rotation+0x260>)
 8001480:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y - 1;
 8001482:	4b6a      	ldr	r3, [pc, #424]	@ (800162c <transform_rotation+0x260>)
 8001484:	78db      	ldrb	r3, [r3, #3]
 8001486:	3b01      	subs	r3, #1
 8001488:	b2da      	uxtb	r2, r3
 800148a:	4b68      	ldr	r3, [pc, #416]	@ (800162c <transform_rotation+0x260>)
 800148c:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 800148e:	4b67      	ldr	r3, [pc, #412]	@ (800162c <transform_rotation+0x260>)
 8001490:	789a      	ldrb	r2, [r3, #2]
 8001492:	4b66      	ldr	r3, [pc, #408]	@ (800162c <transform_rotation+0x260>)
 8001494:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;
 8001496:	4b65      	ldr	r3, [pc, #404]	@ (800162c <transform_rotation+0x260>)
 8001498:	78db      	ldrb	r3, [r3, #3]
 800149a:	3301      	adds	r3, #1
 800149c:	b2da      	uxtb	r2, r3
 800149e:	4b63      	ldr	r3, [pc, #396]	@ (800162c <transform_rotation+0x260>)
 80014a0:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 80014a2:	4b62      	ldr	r3, [pc, #392]	@ (800162c <transform_rotation+0x260>)
 80014a4:	789b      	ldrb	r3, [r3, #2]
 80014a6:	3b01      	subs	r3, #1
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	4b60      	ldr	r3, [pc, #384]	@ (800162c <transform_rotation+0x260>)
 80014ac:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1;
 80014ae:	4b5f      	ldr	r3, [pc, #380]	@ (800162c <transform_rotation+0x260>)
 80014b0:	78db      	ldrb	r3, [r3, #3]
 80014b2:	3301      	adds	r3, #1
 80014b4:	b2da      	uxtb	r2, r3
 80014b6:	4b5d      	ldr	r3, [pc, #372]	@ (800162c <transform_rotation+0x260>)
 80014b8:	725a      	strb	r2, [r3, #9]

					break;
 80014ba:	e041      	b.n	8001540 <transform_rotation+0x174>
				case(ROTATION_2):
						// 1  [1]  1
						// 1
					object.suboriginbit_0.x = object.originbit.x + 1;
 80014bc:	4b5b      	ldr	r3, [pc, #364]	@ (800162c <transform_rotation+0x260>)
 80014be:	789b      	ldrb	r3, [r3, #2]
 80014c0:	3301      	adds	r3, #1
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	4b59      	ldr	r3, [pc, #356]	@ (800162c <transform_rotation+0x260>)
 80014c6:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 80014c8:	4b58      	ldr	r3, [pc, #352]	@ (800162c <transform_rotation+0x260>)
 80014ca:	78da      	ldrb	r2, [r3, #3]
 80014cc:	4b57      	ldr	r3, [pc, #348]	@ (800162c <transform_rotation+0x260>)
 80014ce:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;
 80014d0:	4b56      	ldr	r3, [pc, #344]	@ (800162c <transform_rotation+0x260>)
 80014d2:	789b      	ldrb	r3, [r3, #2]
 80014d4:	3b01      	subs	r3, #1
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	4b54      	ldr	r3, [pc, #336]	@ (800162c <transform_rotation+0x260>)
 80014da:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 80014dc:	4b53      	ldr	r3, [pc, #332]	@ (800162c <transform_rotation+0x260>)
 80014de:	78da      	ldrb	r2, [r3, #3]
 80014e0:	4b52      	ldr	r3, [pc, #328]	@ (800162c <transform_rotation+0x260>)
 80014e2:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 80014e4:	4b51      	ldr	r3, [pc, #324]	@ (800162c <transform_rotation+0x260>)
 80014e6:	789b      	ldrb	r3, [r3, #2]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	4b4f      	ldr	r3, [pc, #316]	@ (800162c <transform_rotation+0x260>)
 80014ee:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 80014f0:	4b4e      	ldr	r3, [pc, #312]	@ (800162c <transform_rotation+0x260>)
 80014f2:	78db      	ldrb	r3, [r3, #3]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	4b4c      	ldr	r3, [pc, #304]	@ (800162c <transform_rotation+0x260>)
 80014fa:	725a      	strb	r2, [r3, #9]

					break;
 80014fc:	e020      	b.n	8001540 <transform_rotation+0x174>
				case(ROTATION_3):
						//  1
						// [1]
						//  1 1
					object.suboriginbit_0.x = object.originbit.x;
 80014fe:	4b4b      	ldr	r3, [pc, #300]	@ (800162c <transform_rotation+0x260>)
 8001500:	789a      	ldrb	r2, [r3, #2]
 8001502:	4b4a      	ldr	r3, [pc, #296]	@ (800162c <transform_rotation+0x260>)
 8001504:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 8001506:	4b49      	ldr	r3, [pc, #292]	@ (800162c <transform_rotation+0x260>)
 8001508:	78db      	ldrb	r3, [r3, #3]
 800150a:	3301      	adds	r3, #1
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4b47      	ldr	r3, [pc, #284]	@ (800162c <transform_rotation+0x260>)
 8001510:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8001512:	4b46      	ldr	r3, [pc, #280]	@ (800162c <transform_rotation+0x260>)
 8001514:	789a      	ldrb	r2, [r3, #2]
 8001516:	4b45      	ldr	r3, [pc, #276]	@ (800162c <transform_rotation+0x260>)
 8001518:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 800151a:	4b44      	ldr	r3, [pc, #272]	@ (800162c <transform_rotation+0x260>)
 800151c:	78db      	ldrb	r3, [r3, #3]
 800151e:	3b01      	subs	r3, #1
 8001520:	b2da      	uxtb	r2, r3
 8001522:	4b42      	ldr	r3, [pc, #264]	@ (800162c <transform_rotation+0x260>)
 8001524:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;
 8001526:	4b41      	ldr	r3, [pc, #260]	@ (800162c <transform_rotation+0x260>)
 8001528:	789b      	ldrb	r3, [r3, #2]
 800152a:	3301      	adds	r3, #1
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4b3f      	ldr	r3, [pc, #252]	@ (800162c <transform_rotation+0x260>)
 8001530:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8001532:	4b3e      	ldr	r3, [pc, #248]	@ (800162c <transform_rotation+0x260>)
 8001534:	78db      	ldrb	r3, [r3, #3]
 8001536:	3b01      	subs	r3, #1
 8001538:	b2da      	uxtb	r2, r3
 800153a:	4b3c      	ldr	r3, [pc, #240]	@ (800162c <transform_rotation+0x260>)
 800153c:	725a      	strb	r2, [r3, #9]

					break;
 800153e:	bf00      	nop
			}
			break;
 8001540:	e379      	b.n	8001c36 <transform_rotation+0x86a>
		case(BRICKY):
			switch(object.Rotation) {
 8001542:	4b3a      	ldr	r3, [pc, #232]	@ (800162c <transform_rotation+0x260>)
 8001544:	785b      	ldrb	r3, [r3, #1]
 8001546:	2b03      	cmp	r3, #3
 8001548:	f200 8377 	bhi.w	8001c3a <transform_rotation+0x86e>
 800154c:	a201      	add	r2, pc, #4	@ (adr r2, 8001554 <transform_rotation+0x188>)
 800154e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001552:	bf00      	nop
 8001554:	08001565 	.word	0x08001565
 8001558:	080015a7 	.word	0x080015a7
 800155c:	080015e9 	.word	0x080015e9
 8001560:	08001631 	.word	0x08001631
				case(ROTATION_0):
						// 1
						// 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;   //	1
 8001564:	4b31      	ldr	r3, [pc, #196]	@ (800162c <transform_rotation+0x260>)
 8001566:	789b      	ldrb	r3, [r3, #2]
 8001568:	3b01      	subs	r3, #1
 800156a:	b2da      	uxtb	r2, r3
 800156c:	4b2f      	ldr	r3, [pc, #188]	@ (800162c <transform_rotation+0x260>)
 800156e:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		// [1] 1 1
 8001570:	4b2e      	ldr	r3, [pc, #184]	@ (800162c <transform_rotation+0x260>)
 8001572:	78da      	ldrb	r2, [r3, #3]
 8001574:	4b2d      	ldr	r3, [pc, #180]	@ (800162c <transform_rotation+0x260>)
 8001576:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;	//  1
 8001578:	4b2c      	ldr	r3, [pc, #176]	@ (800162c <transform_rotation+0x260>)
 800157a:	789b      	ldrb	r3, [r3, #2]
 800157c:	3301      	adds	r3, #1
 800157e:	b2da      	uxtb	r2, r3
 8001580:	4b2a      	ldr	r3, [pc, #168]	@ (800162c <transform_rotation+0x260>)
 8001582:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		//  1  1 [1]
 8001584:	4b29      	ldr	r3, [pc, #164]	@ (800162c <transform_rotation+0x260>)
 8001586:	78da      	ldrb	r2, [r3, #3]
 8001588:	4b28      	ldr	r3, [pc, #160]	@ (800162c <transform_rotation+0x260>)
 800158a:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;	//[1]
 800158c:	4b27      	ldr	r3, [pc, #156]	@ (800162c <transform_rotation+0x260>)
 800158e:	789b      	ldrb	r3, [r3, #2]
 8001590:	3b01      	subs	r3, #1
 8001592:	b2da      	uxtb	r2, r3
 8001594:	4b25      	ldr	r3, [pc, #148]	@ (800162c <transform_rotation+0x260>)
 8001596:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	// 1 1 1
 8001598:	4b24      	ldr	r3, [pc, #144]	@ (800162c <transform_rotation+0x260>)
 800159a:	78db      	ldrb	r3, [r3, #3]
 800159c:	3301      	adds	r3, #1
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	4b22      	ldr	r3, [pc, #136]	@ (800162c <transform_rotation+0x260>)
 80015a2:	725a      	strb	r2, [r3, #9]

					break;
 80015a4:	e065      	b.n	8001672 <transform_rotation+0x2a6>
				case(ROTATION_1):
						// 1 1
						//[1]
						// 1
					object.suboriginbit_0.x = object.originbit.x;
 80015a6:	4b21      	ldr	r3, [pc, #132]	@ (800162c <transform_rotation+0x260>)
 80015a8:	789a      	ldrb	r2, [r3, #2]
 80015aa:	4b20      	ldr	r3, [pc, #128]	@ (800162c <transform_rotation+0x260>)
 80015ac:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 80015ae:	4b1f      	ldr	r3, [pc, #124]	@ (800162c <transform_rotation+0x260>)
 80015b0:	78db      	ldrb	r3, [r3, #3]
 80015b2:	3301      	adds	r3, #1
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4b1d      	ldr	r3, [pc, #116]	@ (800162c <transform_rotation+0x260>)
 80015b8:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;
 80015ba:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <transform_rotation+0x260>)
 80015bc:	789b      	ldrb	r3, [r3, #2]
 80015be:	3301      	adds	r3, #1
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4b1a      	ldr	r3, [pc, #104]	@ (800162c <transform_rotation+0x260>)
 80015c4:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;
 80015c6:	4b19      	ldr	r3, [pc, #100]	@ (800162c <transform_rotation+0x260>)
 80015c8:	78db      	ldrb	r3, [r3, #3]
 80015ca:	3301      	adds	r3, #1
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4b17      	ldr	r3, [pc, #92]	@ (800162c <transform_rotation+0x260>)
 80015d0:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 80015d2:	4b16      	ldr	r3, [pc, #88]	@ (800162c <transform_rotation+0x260>)
 80015d4:	789a      	ldrb	r2, [r3, #2]
 80015d6:	4b15      	ldr	r3, [pc, #84]	@ (800162c <transform_rotation+0x260>)
 80015d8:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 80015da:	4b14      	ldr	r3, [pc, #80]	@ (800162c <transform_rotation+0x260>)
 80015dc:	78db      	ldrb	r3, [r3, #3]
 80015de:	3b01      	subs	r3, #1
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4b12      	ldr	r3, [pc, #72]	@ (800162c <transform_rotation+0x260>)
 80015e4:	725a      	strb	r2, [r3, #9]

					break;
 80015e6:	e044      	b.n	8001672 <transform_rotation+0x2a6>
				case(ROTATION_2):
						// 1 [1] 1
						//       1
					object.suboriginbit_0.x = object.originbit.x + 1;
 80015e8:	4b10      	ldr	r3, [pc, #64]	@ (800162c <transform_rotation+0x260>)
 80015ea:	789b      	ldrb	r3, [r3, #2]
 80015ec:	3301      	adds	r3, #1
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	4b0e      	ldr	r3, [pc, #56]	@ (800162c <transform_rotation+0x260>)
 80015f2:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 80015f4:	4b0d      	ldr	r3, [pc, #52]	@ (800162c <transform_rotation+0x260>)
 80015f6:	78da      	ldrb	r2, [r3, #3]
 80015f8:	4b0c      	ldr	r3, [pc, #48]	@ (800162c <transform_rotation+0x260>)
 80015fa:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;
 80015fc:	4b0b      	ldr	r3, [pc, #44]	@ (800162c <transform_rotation+0x260>)
 80015fe:	789b      	ldrb	r3, [r3, #2]
 8001600:	3b01      	subs	r3, #1
 8001602:	b2da      	uxtb	r2, r3
 8001604:	4b09      	ldr	r3, [pc, #36]	@ (800162c <transform_rotation+0x260>)
 8001606:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8001608:	4b08      	ldr	r3, [pc, #32]	@ (800162c <transform_rotation+0x260>)
 800160a:	78da      	ldrb	r2, [r3, #3]
 800160c:	4b07      	ldr	r3, [pc, #28]	@ (800162c <transform_rotation+0x260>)
 800160e:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;
 8001610:	4b06      	ldr	r3, [pc, #24]	@ (800162c <transform_rotation+0x260>)
 8001612:	789b      	ldrb	r3, [r3, #2]
 8001614:	3301      	adds	r3, #1
 8001616:	b2da      	uxtb	r2, r3
 8001618:	4b04      	ldr	r3, [pc, #16]	@ (800162c <transform_rotation+0x260>)
 800161a:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 800161c:	4b03      	ldr	r3, [pc, #12]	@ (800162c <transform_rotation+0x260>)
 800161e:	78db      	ldrb	r3, [r3, #3]
 8001620:	3b01      	subs	r3, #1
 8001622:	b2da      	uxtb	r2, r3
 8001624:	4b01      	ldr	r3, [pc, #4]	@ (800162c <transform_rotation+0x260>)
 8001626:	725a      	strb	r2, [r3, #9]

					break;
 8001628:	e023      	b.n	8001672 <transform_rotation+0x2a6>
 800162a:	bf00      	nop
 800162c:	20025990 	.word	0x20025990
				case(ROTATION_3):
						//   1
						//  [1]
						// 1 1
					object.suboriginbit_0.x = object.originbit.x;
 8001630:	4b95      	ldr	r3, [pc, #596]	@ (8001888 <transform_rotation+0x4bc>)
 8001632:	789a      	ldrb	r2, [r3, #2]
 8001634:	4b94      	ldr	r3, [pc, #592]	@ (8001888 <transform_rotation+0x4bc>)
 8001636:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y - 1;
 8001638:	4b93      	ldr	r3, [pc, #588]	@ (8001888 <transform_rotation+0x4bc>)
 800163a:	78db      	ldrb	r3, [r3, #3]
 800163c:	3b01      	subs	r3, #1
 800163e:	b2da      	uxtb	r2, r3
 8001640:	4b91      	ldr	r3, [pc, #580]	@ (8001888 <transform_rotation+0x4bc>)
 8001642:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8001644:	4b90      	ldr	r3, [pc, #576]	@ (8001888 <transform_rotation+0x4bc>)
 8001646:	789a      	ldrb	r2, [r3, #2]
 8001648:	4b8f      	ldr	r3, [pc, #572]	@ (8001888 <transform_rotation+0x4bc>)
 800164a:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;
 800164c:	4b8e      	ldr	r3, [pc, #568]	@ (8001888 <transform_rotation+0x4bc>)
 800164e:	78db      	ldrb	r3, [r3, #3]
 8001650:	3301      	adds	r3, #1
 8001652:	b2da      	uxtb	r2, r3
 8001654:	4b8c      	ldr	r3, [pc, #560]	@ (8001888 <transform_rotation+0x4bc>)
 8001656:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 8001658:	4b8b      	ldr	r3, [pc, #556]	@ (8001888 <transform_rotation+0x4bc>)
 800165a:	789b      	ldrb	r3, [r3, #2]
 800165c:	3b01      	subs	r3, #1
 800165e:	b2da      	uxtb	r2, r3
 8001660:	4b89      	ldr	r3, [pc, #548]	@ (8001888 <transform_rotation+0x4bc>)
 8001662:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1;
 8001664:	4b88      	ldr	r3, [pc, #544]	@ (8001888 <transform_rotation+0x4bc>)
 8001666:	78db      	ldrb	r3, [r3, #3]
 8001668:	3301      	adds	r3, #1
 800166a:	b2da      	uxtb	r2, r3
 800166c:	4b86      	ldr	r3, [pc, #536]	@ (8001888 <transform_rotation+0x4bc>)
 800166e:	725a      	strb	r2, [r3, #9]

					break;
 8001670:	bf00      	nop
			}

			break;
 8001672:	e2e2      	b.n	8001c3a <transform_rotation+0x86e>
		case(CLEVELAND):
			switch(object.Rotation) {
 8001674:	4b84      	ldr	r3, [pc, #528]	@ (8001888 <transform_rotation+0x4bc>)
 8001676:	785b      	ldrb	r3, [r3, #1]
 8001678:	2b03      	cmp	r3, #3
 800167a:	f200 82e0 	bhi.w	8001c3e <transform_rotation+0x872>
 800167e:	a201      	add	r2, pc, #4	@ (adr r2, 8001684 <transform_rotation+0x2b8>)
 8001680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001684:	08001695 	.word	0x08001695
 8001688:	080016d7 	.word	0x080016d7
 800168c:	08001719 	.word	0x08001719
 8001690:	0800175b 	.word	0x0800175b
				case(ROTATION_0):
						// 1 1
						//  [1] 1
					object.suboriginbit_0.x = object.originbit.x;			 //	1 [1]
 8001694:	4b7c      	ldr	r3, [pc, #496]	@ (8001888 <transform_rotation+0x4bc>)
 8001696:	789a      	ldrb	r2, [r3, #2]
 8001698:	4b7b      	ldr	r3, [pc, #492]	@ (8001888 <transform_rotation+0x4bc>)
 800169a:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;		 //    1 1
 800169c:	4b7a      	ldr	r3, [pc, #488]	@ (8001888 <transform_rotation+0x4bc>)
 800169e:	78db      	ldrb	r3, [r3, #3]
 80016a0:	3301      	adds	r3, #1
 80016a2:	b2da      	uxtb	r2, r3
 80016a4:	4b78      	ldr	r3, [pc, #480]	@ (8001888 <transform_rotation+0x4bc>)
 80016a6:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;		 // [1] 1
 80016a8:	4b77      	ldr	r3, [pc, #476]	@ (8001888 <transform_rotation+0x4bc>)
 80016aa:	789b      	ldrb	r3, [r3, #2]
 80016ac:	3b01      	subs	r3, #1
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	4b75      	ldr	r3, [pc, #468]	@ (8001888 <transform_rotation+0x4bc>)
 80016b2:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;		 //     1 1
 80016b4:	4b74      	ldr	r3, [pc, #464]	@ (8001888 <transform_rotation+0x4bc>)
 80016b6:	78db      	ldrb	r3, [r3, #3]
 80016b8:	3301      	adds	r3, #1
 80016ba:	b2da      	uxtb	r2, r3
 80016bc:	4b72      	ldr	r3, [pc, #456]	@ (8001888 <transform_rotation+0x4bc>)
 80016be:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;		 //  1 1
 80016c0:	4b71      	ldr	r3, [pc, #452]	@ (8001888 <transform_rotation+0x4bc>)
 80016c2:	789b      	ldrb	r3, [r3, #2]
 80016c4:	3301      	adds	r3, #1
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	4b6f      	ldr	r3, [pc, #444]	@ (8001888 <transform_rotation+0x4bc>)
 80016ca:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y; 	     	//    1 [1]
 80016cc:	4b6e      	ldr	r3, [pc, #440]	@ (8001888 <transform_rotation+0x4bc>)
 80016ce:	78da      	ldrb	r2, [r3, #3]
 80016d0:	4b6d      	ldr	r3, [pc, #436]	@ (8001888 <transform_rotation+0x4bc>)
 80016d2:	725a      	strb	r2, [r3, #9]

					break;
 80016d4:	e062      	b.n	800179c <transform_rotation+0x3d0>
				case(ROTATION_1):
						//     1
						// [1] 1
						//  1
					object.suboriginbit_0.x = object.originbit.x+1;
 80016d6:	4b6c      	ldr	r3, [pc, #432]	@ (8001888 <transform_rotation+0x4bc>)
 80016d8:	789b      	ldrb	r3, [r3, #2]
 80016da:	3301      	adds	r3, #1
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4b6a      	ldr	r3, [pc, #424]	@ (8001888 <transform_rotation+0x4bc>)
 80016e0:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 80016e2:	4b69      	ldr	r3, [pc, #420]	@ (8001888 <transform_rotation+0x4bc>)
 80016e4:	78da      	ldrb	r2, [r3, #3]
 80016e6:	4b68      	ldr	r3, [pc, #416]	@ (8001888 <transform_rotation+0x4bc>)
 80016e8:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x+1;
 80016ea:	4b67      	ldr	r3, [pc, #412]	@ (8001888 <transform_rotation+0x4bc>)
 80016ec:	789b      	ldrb	r3, [r3, #2]
 80016ee:	3301      	adds	r3, #1
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4b65      	ldr	r3, [pc, #404]	@ (8001888 <transform_rotation+0x4bc>)
 80016f4:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y+1;
 80016f6:	4b64      	ldr	r3, [pc, #400]	@ (8001888 <transform_rotation+0x4bc>)
 80016f8:	78db      	ldrb	r3, [r3, #3]
 80016fa:	3301      	adds	r3, #1
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4b62      	ldr	r3, [pc, #392]	@ (8001888 <transform_rotation+0x4bc>)
 8001700:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8001702:	4b61      	ldr	r3, [pc, #388]	@ (8001888 <transform_rotation+0x4bc>)
 8001704:	789a      	ldrb	r2, [r3, #2]
 8001706:	4b60      	ldr	r3, [pc, #384]	@ (8001888 <transform_rotation+0x4bc>)
 8001708:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y-1;
 800170a:	4b5f      	ldr	r3, [pc, #380]	@ (8001888 <transform_rotation+0x4bc>)
 800170c:	78db      	ldrb	r3, [r3, #3]
 800170e:	3b01      	subs	r3, #1
 8001710:	b2da      	uxtb	r2, r3
 8001712:	4b5d      	ldr	r3, [pc, #372]	@ (8001888 <transform_rotation+0x4bc>)
 8001714:	725a      	strb	r2, [r3, #9]

					break;
 8001716:	e041      	b.n	800179c <transform_rotation+0x3d0>
				case(ROTATION_2):
						// 1 [1]
						//    1  1
					object.suboriginbit_0.x = object.originbit.x - 1;
 8001718:	4b5b      	ldr	r3, [pc, #364]	@ (8001888 <transform_rotation+0x4bc>)
 800171a:	789b      	ldrb	r3, [r3, #2]
 800171c:	3b01      	subs	r3, #1
 800171e:	b2da      	uxtb	r2, r3
 8001720:	4b59      	ldr	r3, [pc, #356]	@ (8001888 <transform_rotation+0x4bc>)
 8001722:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8001724:	4b58      	ldr	r3, [pc, #352]	@ (8001888 <transform_rotation+0x4bc>)
 8001726:	78da      	ldrb	r2, [r3, #3]
 8001728:	4b57      	ldr	r3, [pc, #348]	@ (8001888 <transform_rotation+0x4bc>)
 800172a:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 800172c:	4b56      	ldr	r3, [pc, #344]	@ (8001888 <transform_rotation+0x4bc>)
 800172e:	789a      	ldrb	r2, [r3, #2]
 8001730:	4b55      	ldr	r3, [pc, #340]	@ (8001888 <transform_rotation+0x4bc>)
 8001732:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8001734:	4b54      	ldr	r3, [pc, #336]	@ (8001888 <transform_rotation+0x4bc>)
 8001736:	78db      	ldrb	r3, [r3, #3]
 8001738:	3b01      	subs	r3, #1
 800173a:	b2da      	uxtb	r2, r3
 800173c:	4b52      	ldr	r3, [pc, #328]	@ (8001888 <transform_rotation+0x4bc>)
 800173e:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;
 8001740:	4b51      	ldr	r3, [pc, #324]	@ (8001888 <transform_rotation+0x4bc>)
 8001742:	789b      	ldrb	r3, [r3, #2]
 8001744:	3301      	adds	r3, #1
 8001746:	b2da      	uxtb	r2, r3
 8001748:	4b4f      	ldr	r3, [pc, #316]	@ (8001888 <transform_rotation+0x4bc>)
 800174a:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 800174c:	4b4e      	ldr	r3, [pc, #312]	@ (8001888 <transform_rotation+0x4bc>)
 800174e:	78db      	ldrb	r3, [r3, #3]
 8001750:	3b01      	subs	r3, #1
 8001752:	b2da      	uxtb	r2, r3
 8001754:	4b4c      	ldr	r3, [pc, #304]	@ (8001888 <transform_rotation+0x4bc>)
 8001756:	725a      	strb	r2, [r3, #9]

					break;
 8001758:	e020      	b.n	800179c <transform_rotation+0x3d0>
				case(ROTATION_3):
						//     1
						//  1 [1]
						//  1
					object.suboriginbit_0.x = object.originbit.x - 1;
 800175a:	4b4b      	ldr	r3, [pc, #300]	@ (8001888 <transform_rotation+0x4bc>)
 800175c:	789b      	ldrb	r3, [r3, #2]
 800175e:	3b01      	subs	r3, #1
 8001760:	b2da      	uxtb	r2, r3
 8001762:	4b49      	ldr	r3, [pc, #292]	@ (8001888 <transform_rotation+0x4bc>)
 8001764:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8001766:	4b48      	ldr	r3, [pc, #288]	@ (8001888 <transform_rotation+0x4bc>)
 8001768:	78da      	ldrb	r2, [r3, #3]
 800176a:	4b47      	ldr	r3, [pc, #284]	@ (8001888 <transform_rotation+0x4bc>)
 800176c:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;
 800176e:	4b46      	ldr	r3, [pc, #280]	@ (8001888 <transform_rotation+0x4bc>)
 8001770:	789b      	ldrb	r3, [r3, #2]
 8001772:	3b01      	subs	r3, #1
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4b44      	ldr	r3, [pc, #272]	@ (8001888 <transform_rotation+0x4bc>)
 8001778:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 800177a:	4b43      	ldr	r3, [pc, #268]	@ (8001888 <transform_rotation+0x4bc>)
 800177c:	78db      	ldrb	r3, [r3, #3]
 800177e:	3b01      	subs	r3, #1
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4b41      	ldr	r3, [pc, #260]	@ (8001888 <transform_rotation+0x4bc>)
 8001784:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8001786:	4b40      	ldr	r3, [pc, #256]	@ (8001888 <transform_rotation+0x4bc>)
 8001788:	789a      	ldrb	r2, [r3, #2]
 800178a:	4b3f      	ldr	r3, [pc, #252]	@ (8001888 <transform_rotation+0x4bc>)
 800178c:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1;
 800178e:	4b3e      	ldr	r3, [pc, #248]	@ (8001888 <transform_rotation+0x4bc>)
 8001790:	78db      	ldrb	r3, [r3, #3]
 8001792:	3301      	adds	r3, #1
 8001794:	b2da      	uxtb	r2, r3
 8001796:	4b3c      	ldr	r3, [pc, #240]	@ (8001888 <transform_rotation+0x4bc>)
 8001798:	725a      	strb	r2, [r3, #9]

					break;
 800179a:	bf00      	nop
			}
			break;
 800179c:	e24f      	b.n	8001c3e <transform_rotation+0x872>
		case(RHODE):
			switch(object.Rotation) {
 800179e:	4b3a      	ldr	r3, [pc, #232]	@ (8001888 <transform_rotation+0x4bc>)
 80017a0:	785b      	ldrb	r3, [r3, #1]
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	f200 824d 	bhi.w	8001c42 <transform_rotation+0x876>
 80017a8:	a201      	add	r2, pc, #4	@ (adr r2, 80017b0 <transform_rotation+0x3e4>)
 80017aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ae:	bf00      	nop
 80017b0:	080017c1 	.word	0x080017c1
 80017b4:	08001803 	.word	0x08001803
 80017b8:	08001845 	.word	0x08001845
 80017bc:	0800188d 	.word	0x0800188d
				case(ROTATION_0):
						//    1 1
						// 1 [1]
					object.suboriginbit_0.x = object.originbit.x;			 //	  [1] 1
 80017c0:	4b31      	ldr	r3, [pc, #196]	@ (8001888 <transform_rotation+0x4bc>)
 80017c2:	789a      	ldrb	r2, [r3, #2]
 80017c4:	4b30      	ldr	r3, [pc, #192]	@ (8001888 <transform_rotation+0x4bc>)
 80017c6:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;		 //  1 1
 80017c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001888 <transform_rotation+0x4bc>)
 80017ca:	78db      	ldrb	r3, [r3, #3]
 80017cc:	3301      	adds	r3, #1
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001888 <transform_rotation+0x4bc>)
 80017d2:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;		 //    1 [1]
 80017d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001888 <transform_rotation+0x4bc>)
 80017d6:	789b      	ldrb	r3, [r3, #2]
 80017d8:	3301      	adds	r3, #1
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001888 <transform_rotation+0x4bc>)
 80017de:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;		 //  1 1
 80017e0:	4b29      	ldr	r3, [pc, #164]	@ (8001888 <transform_rotation+0x4bc>)
 80017e2:	78db      	ldrb	r3, [r3, #3]
 80017e4:	3301      	adds	r3, #1
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	4b27      	ldr	r3, [pc, #156]	@ (8001888 <transform_rotation+0x4bc>)
 80017ea:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;		 //     1 1
 80017ec:	4b26      	ldr	r3, [pc, #152]	@ (8001888 <transform_rotation+0x4bc>)
 80017ee:	789b      	ldrb	r3, [r3, #2]
 80017f0:	3b01      	subs	r3, #1
 80017f2:	b2da      	uxtb	r2, r3
 80017f4:	4b24      	ldr	r3, [pc, #144]	@ (8001888 <transform_rotation+0x4bc>)
 80017f6:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y; 	     // [1] 1
 80017f8:	4b23      	ldr	r3, [pc, #140]	@ (8001888 <transform_rotation+0x4bc>)
 80017fa:	78da      	ldrb	r2, [r3, #3]
 80017fc:	4b22      	ldr	r3, [pc, #136]	@ (8001888 <transform_rotation+0x4bc>)
 80017fe:	725a      	strb	r2, [r3, #9]

					break;
 8001800:	e065      	b.n	80018ce <transform_rotation+0x502>
				case(ROTATION_1):
						// 1
						//[1] 1
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 8001802:	4b21      	ldr	r3, [pc, #132]	@ (8001888 <transform_rotation+0x4bc>)
 8001804:	789a      	ldrb	r2, [r3, #2]
 8001806:	4b20      	ldr	r3, [pc, #128]	@ (8001888 <transform_rotation+0x4bc>)
 8001808:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 800180a:	4b1f      	ldr	r3, [pc, #124]	@ (8001888 <transform_rotation+0x4bc>)
 800180c:	78db      	ldrb	r3, [r3, #3]
 800180e:	3301      	adds	r3, #1
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4b1d      	ldr	r3, [pc, #116]	@ (8001888 <transform_rotation+0x4bc>)
 8001814:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;
 8001816:	4b1c      	ldr	r3, [pc, #112]	@ (8001888 <transform_rotation+0x4bc>)
 8001818:	789b      	ldrb	r3, [r3, #2]
 800181a:	3301      	adds	r3, #1
 800181c:	b2da      	uxtb	r2, r3
 800181e:	4b1a      	ldr	r3, [pc, #104]	@ (8001888 <transform_rotation+0x4bc>)
 8001820:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8001822:	4b19      	ldr	r3, [pc, #100]	@ (8001888 <transform_rotation+0x4bc>)
 8001824:	78da      	ldrb	r2, [r3, #3]
 8001826:	4b18      	ldr	r3, [pc, #96]	@ (8001888 <transform_rotation+0x4bc>)
 8001828:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;
 800182a:	4b17      	ldr	r3, [pc, #92]	@ (8001888 <transform_rotation+0x4bc>)
 800182c:	789b      	ldrb	r3, [r3, #2]
 800182e:	3301      	adds	r3, #1
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <transform_rotation+0x4bc>)
 8001834:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8001836:	4b14      	ldr	r3, [pc, #80]	@ (8001888 <transform_rotation+0x4bc>)
 8001838:	78db      	ldrb	r3, [r3, #3]
 800183a:	3b01      	subs	r3, #1
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4b12      	ldr	r3, [pc, #72]	@ (8001888 <transform_rotation+0x4bc>)
 8001840:	725a      	strb	r2, [r3, #9]

					break;
 8001842:	e044      	b.n	80018ce <transform_rotation+0x502>
				case(ROTATION_2):
						//  [1] 1
						// 1 1
					object.suboriginbit_0.x = object.originbit.x + 1;
 8001844:	4b10      	ldr	r3, [pc, #64]	@ (8001888 <transform_rotation+0x4bc>)
 8001846:	789b      	ldrb	r3, [r3, #2]
 8001848:	3301      	adds	r3, #1
 800184a:	b2da      	uxtb	r2, r3
 800184c:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <transform_rotation+0x4bc>)
 800184e:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8001850:	4b0d      	ldr	r3, [pc, #52]	@ (8001888 <transform_rotation+0x4bc>)
 8001852:	78da      	ldrb	r2, [r3, #3]
 8001854:	4b0c      	ldr	r3, [pc, #48]	@ (8001888 <transform_rotation+0x4bc>)
 8001856:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8001858:	4b0b      	ldr	r3, [pc, #44]	@ (8001888 <transform_rotation+0x4bc>)
 800185a:	789a      	ldrb	r2, [r3, #2]
 800185c:	4b0a      	ldr	r3, [pc, #40]	@ (8001888 <transform_rotation+0x4bc>)
 800185e:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8001860:	4b09      	ldr	r3, [pc, #36]	@ (8001888 <transform_rotation+0x4bc>)
 8001862:	78db      	ldrb	r3, [r3, #3]
 8001864:	3b01      	subs	r3, #1
 8001866:	b2da      	uxtb	r2, r3
 8001868:	4b07      	ldr	r3, [pc, #28]	@ (8001888 <transform_rotation+0x4bc>)
 800186a:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 800186c:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <transform_rotation+0x4bc>)
 800186e:	789b      	ldrb	r3, [r3, #2]
 8001870:	3b01      	subs	r3, #1
 8001872:	b2da      	uxtb	r2, r3
 8001874:	4b04      	ldr	r3, [pc, #16]	@ (8001888 <transform_rotation+0x4bc>)
 8001876:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8001878:	4b03      	ldr	r3, [pc, #12]	@ (8001888 <transform_rotation+0x4bc>)
 800187a:	78db      	ldrb	r3, [r3, #3]
 800187c:	3b01      	subs	r3, #1
 800187e:	b2da      	uxtb	r2, r3
 8001880:	4b01      	ldr	r3, [pc, #4]	@ (8001888 <transform_rotation+0x4bc>)
 8001882:	725a      	strb	r2, [r3, #9]

					break;
 8001884:	e023      	b.n	80018ce <transform_rotation+0x502>
 8001886:	bf00      	nop
 8001888:	20025990 	.word	0x20025990
				case(ROTATION_3):
						// 1
						// 1 [1]
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 800188c:	4b8e      	ldr	r3, [pc, #568]	@ (8001ac8 <transform_rotation+0x6fc>)
 800188e:	789a      	ldrb	r2, [r3, #2]
 8001890:	4b8d      	ldr	r3, [pc, #564]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001892:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y - 1;
 8001894:	4b8c      	ldr	r3, [pc, #560]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001896:	78db      	ldrb	r3, [r3, #3]
 8001898:	3b01      	subs	r3, #1
 800189a:	b2da      	uxtb	r2, r3
 800189c:	4b8a      	ldr	r3, [pc, #552]	@ (8001ac8 <transform_rotation+0x6fc>)
 800189e:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;
 80018a0:	4b89      	ldr	r3, [pc, #548]	@ (8001ac8 <transform_rotation+0x6fc>)
 80018a2:	789b      	ldrb	r3, [r3, #2]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	b2da      	uxtb	r2, r3
 80018a8:	4b87      	ldr	r3, [pc, #540]	@ (8001ac8 <transform_rotation+0x6fc>)
 80018aa:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 80018ac:	4b86      	ldr	r3, [pc, #536]	@ (8001ac8 <transform_rotation+0x6fc>)
 80018ae:	78da      	ldrb	r2, [r3, #3]
 80018b0:	4b85      	ldr	r3, [pc, #532]	@ (8001ac8 <transform_rotation+0x6fc>)
 80018b2:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 80018b4:	4b84      	ldr	r3, [pc, #528]	@ (8001ac8 <transform_rotation+0x6fc>)
 80018b6:	789b      	ldrb	r3, [r3, #2]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b2da      	uxtb	r2, r3
 80018bc:	4b82      	ldr	r3, [pc, #520]	@ (8001ac8 <transform_rotation+0x6fc>)
 80018be:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1;
 80018c0:	4b81      	ldr	r3, [pc, #516]	@ (8001ac8 <transform_rotation+0x6fc>)
 80018c2:	78db      	ldrb	r3, [r3, #3]
 80018c4:	3301      	adds	r3, #1
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	4b7f      	ldr	r3, [pc, #508]	@ (8001ac8 <transform_rotation+0x6fc>)
 80018ca:	725a      	strb	r2, [r3, #9]

					break;
 80018cc:	bf00      	nop
			}
			break;
 80018ce:	e1b8      	b.n	8001c42 <transform_rotation+0x876>
		case(HERO):
			switch(object.Rotation) {
 80018d0:	4b7d      	ldr	r3, [pc, #500]	@ (8001ac8 <transform_rotation+0x6fc>)
 80018d2:	785b      	ldrb	r3, [r3, #1]
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	f200 81b6 	bhi.w	8001c46 <transform_rotation+0x87a>
 80018da:	a201      	add	r2, pc, #4	@ (adr r2, 80018e0 <transform_rotation+0x514>)
 80018dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018e0:	080018f1 	.word	0x080018f1
 80018e4:	0800192f 	.word	0x0800192f
 80018e8:	0800196d 	.word	0x0800196d
 80018ec:	080019ab 	.word	0x080019ab
				case(ROTATION_0):
						// 1 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;	 //
 80018f0:	4b75      	ldr	r3, [pc, #468]	@ (8001ac8 <transform_rotation+0x6fc>)
 80018f2:	789b      	ldrb	r3, [r3, #2]
 80018f4:	3b01      	subs	r3, #1
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	4b73      	ldr	r3, [pc, #460]	@ (8001ac8 <transform_rotation+0x6fc>)
 80018fa:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 // 1 [1] 1 1
 80018fc:	4b72      	ldr	r3, [pc, #456]	@ (8001ac8 <transform_rotation+0x6fc>)
 80018fe:	78da      	ldrb	r2, [r3, #3]
 8001900:	4b71      	ldr	r3, [pc, #452]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001902:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 2;	 //
 8001904:	4b70      	ldr	r3, [pc, #448]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001906:	789b      	ldrb	r3, [r3, #2]
 8001908:	3b02      	subs	r3, #2
 800190a:	b2da      	uxtb	r2, r3
 800190c:	4b6e      	ldr	r3, [pc, #440]	@ (8001ac8 <transform_rotation+0x6fc>)
 800190e:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		 // [1] 1 1 1
 8001910:	4b6d      	ldr	r3, [pc, #436]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001912:	78da      	ldrb	r2, [r3, #3]
 8001914:	4b6c      	ldr	r3, [pc, #432]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001916:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //
 8001918:	4b6b      	ldr	r3, [pc, #428]	@ (8001ac8 <transform_rotation+0x6fc>)
 800191a:	789b      	ldrb	r3, [r3, #2]
 800191c:	3301      	adds	r3, #1
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4b69      	ldr	r3, [pc, #420]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001922:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y; 	     //  1 1 1 [1]
 8001924:	4b68      	ldr	r3, [pc, #416]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001926:	78da      	ldrb	r2, [r3, #3]
 8001928:	4b67      	ldr	r3, [pc, #412]	@ (8001ac8 <transform_rotation+0x6fc>)
 800192a:	725a      	strb	r2, [r3, #9]

					break;
 800192c:	e05c      	b.n	80019e8 <transform_rotation+0x61c>
				case(ROTATION_1):
						//  1
						//  1
						// [1]
						//  1
					object.suboriginbit_0.x = object.originbit.x;
 800192e:	4b66      	ldr	r3, [pc, #408]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001930:	789a      	ldrb	r2, [r3, #2]
 8001932:	4b65      	ldr	r3, [pc, #404]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001934:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 8001936:	4b64      	ldr	r3, [pc, #400]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001938:	78db      	ldrb	r3, [r3, #3]
 800193a:	3301      	adds	r3, #1
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4b62      	ldr	r3, [pc, #392]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001940:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8001942:	4b61      	ldr	r3, [pc, #388]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001944:	789a      	ldrb	r2, [r3, #2]
 8001946:	4b60      	ldr	r3, [pc, #384]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001948:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 800194a:	4b5f      	ldr	r3, [pc, #380]	@ (8001ac8 <transform_rotation+0x6fc>)
 800194c:	78db      	ldrb	r3, [r3, #3]
 800194e:	3b01      	subs	r3, #1
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4b5d      	ldr	r3, [pc, #372]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001954:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8001956:	4b5c      	ldr	r3, [pc, #368]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001958:	789a      	ldrb	r2, [r3, #2]
 800195a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ac8 <transform_rotation+0x6fc>)
 800195c:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 2;
 800195e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001960:	78db      	ldrb	r3, [r3, #3]
 8001962:	3302      	adds	r3, #2
 8001964:	b2da      	uxtb	r2, r3
 8001966:	4b58      	ldr	r3, [pc, #352]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001968:	725a      	strb	r2, [r3, #9]

					break;
 800196a:	e03d      	b.n	80019e8 <transform_rotation+0x61c>
				case(ROTATION_2):
						// 1 [1] 1 1
					object.suboriginbit_0.x = object.originbit.x - 1;
 800196c:	4b56      	ldr	r3, [pc, #344]	@ (8001ac8 <transform_rotation+0x6fc>)
 800196e:	789b      	ldrb	r3, [r3, #2]
 8001970:	3b01      	subs	r3, #1
 8001972:	b2da      	uxtb	r2, r3
 8001974:	4b54      	ldr	r3, [pc, #336]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001976:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8001978:	4b53      	ldr	r3, [pc, #332]	@ (8001ac8 <transform_rotation+0x6fc>)
 800197a:	78da      	ldrb	r2, [r3, #3]
 800197c:	4b52      	ldr	r3, [pc, #328]	@ (8001ac8 <transform_rotation+0x6fc>)
 800197e:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;
 8001980:	4b51      	ldr	r3, [pc, #324]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001982:	789b      	ldrb	r3, [r3, #2]
 8001984:	3301      	adds	r3, #1
 8001986:	b2da      	uxtb	r2, r3
 8001988:	4b4f      	ldr	r3, [pc, #316]	@ (8001ac8 <transform_rotation+0x6fc>)
 800198a:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 800198c:	4b4e      	ldr	r3, [pc, #312]	@ (8001ac8 <transform_rotation+0x6fc>)
 800198e:	78da      	ldrb	r2, [r3, #3]
 8001990:	4b4d      	ldr	r3, [pc, #308]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001992:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 2;
 8001994:	4b4c      	ldr	r3, [pc, #304]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001996:	789b      	ldrb	r3, [r3, #2]
 8001998:	3302      	adds	r3, #2
 800199a:	b2da      	uxtb	r2, r3
 800199c:	4b4a      	ldr	r3, [pc, #296]	@ (8001ac8 <transform_rotation+0x6fc>)
 800199e:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 80019a0:	4b49      	ldr	r3, [pc, #292]	@ (8001ac8 <transform_rotation+0x6fc>)
 80019a2:	78da      	ldrb	r2, [r3, #3]
 80019a4:	4b48      	ldr	r3, [pc, #288]	@ (8001ac8 <transform_rotation+0x6fc>)
 80019a6:	725a      	strb	r2, [r3, #9]

					break;
 80019a8:	e01e      	b.n	80019e8 <transform_rotation+0x61c>
				case(ROTATION_3):
						//  1
						// [1]
						//  1
						//  1
					object.suboriginbit_0.x = object.originbit.x;
 80019aa:	4b47      	ldr	r3, [pc, #284]	@ (8001ac8 <transform_rotation+0x6fc>)
 80019ac:	789a      	ldrb	r2, [r3, #2]
 80019ae:	4b46      	ldr	r3, [pc, #280]	@ (8001ac8 <transform_rotation+0x6fc>)
 80019b0:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 80019b2:	4b45      	ldr	r3, [pc, #276]	@ (8001ac8 <transform_rotation+0x6fc>)
 80019b4:	78db      	ldrb	r3, [r3, #3]
 80019b6:	3301      	adds	r3, #1
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	4b43      	ldr	r3, [pc, #268]	@ (8001ac8 <transform_rotation+0x6fc>)
 80019bc:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 80019be:	4b42      	ldr	r3, [pc, #264]	@ (8001ac8 <transform_rotation+0x6fc>)
 80019c0:	789a      	ldrb	r2, [r3, #2]
 80019c2:	4b41      	ldr	r3, [pc, #260]	@ (8001ac8 <transform_rotation+0x6fc>)
 80019c4:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 80019c6:	4b40      	ldr	r3, [pc, #256]	@ (8001ac8 <transform_rotation+0x6fc>)
 80019c8:	78db      	ldrb	r3, [r3, #3]
 80019ca:	3b01      	subs	r3, #1
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4b3e      	ldr	r3, [pc, #248]	@ (8001ac8 <transform_rotation+0x6fc>)
 80019d0:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 80019d2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac8 <transform_rotation+0x6fc>)
 80019d4:	789a      	ldrb	r2, [r3, #2]
 80019d6:	4b3c      	ldr	r3, [pc, #240]	@ (8001ac8 <transform_rotation+0x6fc>)
 80019d8:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 2;
 80019da:	4b3b      	ldr	r3, [pc, #236]	@ (8001ac8 <transform_rotation+0x6fc>)
 80019dc:	78db      	ldrb	r3, [r3, #3]
 80019de:	3b02      	subs	r3, #2
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4b39      	ldr	r3, [pc, #228]	@ (8001ac8 <transform_rotation+0x6fc>)
 80019e4:	725a      	strb	r2, [r3, #9]

					break;
 80019e6:	bf00      	nop
			}

			break;
 80019e8:	e12d      	b.n	8001c46 <transform_rotation+0x87a>
		case(TEEWEE):
			switch(object.Rotation) {
 80019ea:	4b37      	ldr	r3, [pc, #220]	@ (8001ac8 <transform_rotation+0x6fc>)
 80019ec:	785b      	ldrb	r3, [r3, #1]
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	f200 812b 	bhi.w	8001c4a <transform_rotation+0x87e>
 80019f4:	a201      	add	r2, pc, #4	@ (adr r2, 80019fc <transform_rotation+0x630>)
 80019f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019fa:	bf00      	nop
 80019fc:	08001a0d 	.word	0x08001a0d
 8001a00:	08001a4b 	.word	0x08001a4b
 8001a04:	08001a89 	.word	0x08001a89
 8001a08:	08001acd 	.word	0x08001acd
				case(ROTATION_0):
						//    1
						// 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;	 //     1
 8001a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a0e:	789b      	ldrb	r3, [r3, #2]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	4b2c      	ldr	r3, [pc, #176]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a16:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 // [1] 1 1
 8001a18:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a1a:	78da      	ldrb	r2, [r3, #3]
 8001a1c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a1e:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;	 //	  1
 8001a20:	4b29      	ldr	r3, [pc, #164]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a22:	789b      	ldrb	r3, [r3, #2]
 8001a24:	3301      	adds	r3, #1
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	4b27      	ldr	r3, [pc, #156]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a2a:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		 // 1 1 [1]
 8001a2c:	4b26      	ldr	r3, [pc, #152]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a2e:	78da      	ldrb	r2, [r3, #3]
 8001a30:	4b25      	ldr	r3, [pc, #148]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a32:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;	     //	 [1]
 8001a34:	4b24      	ldr	r3, [pc, #144]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a36:	789a      	ldrb	r2, [r3, #2]
 8001a38:	4b23      	ldr	r3, [pc, #140]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a3a:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1 1 1
 8001a3c:	4b22      	ldr	r3, [pc, #136]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a3e:	78db      	ldrb	r3, [r3, #3]
 8001a40:	3301      	adds	r3, #1
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	4b20      	ldr	r3, [pc, #128]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a46:	725a      	strb	r2, [r3, #9]

					break;
 8001a48:	e05f      	b.n	8001b0a <transform_rotation+0x73e>
				case(ROTATION_1):
						//  1
						// [1] 1
						//  1
					object.suboriginbit_0.x = object.originbit.x + 1;
 8001a4a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a4c:	789b      	ldrb	r3, [r3, #2]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a54:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8001a56:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a58:	78da      	ldrb	r2, [r3, #3]
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a5c:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a60:	789a      	ldrb	r2, [r3, #2]
 8001a62:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a64:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;
 8001a66:	4b18      	ldr	r3, [pc, #96]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a68:	78db      	ldrb	r3, [r3, #3]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	4b16      	ldr	r3, [pc, #88]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a70:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8001a72:	4b15      	ldr	r3, [pc, #84]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a74:	789a      	ldrb	r2, [r3, #2]
 8001a76:	4b14      	ldr	r3, [pc, #80]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a78:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8001a7a:	4b13      	ldr	r3, [pc, #76]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a7c:	78db      	ldrb	r3, [r3, #3]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	b2da      	uxtb	r2, r3
 8001a82:	4b11      	ldr	r3, [pc, #68]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a84:	725a      	strb	r2, [r3, #9]

					break;
 8001a86:	e040      	b.n	8001b0a <transform_rotation+0x73e>
				case(ROTATION_2):
						// 1 [1] 1
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 8001a88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a8a:	789a      	ldrb	r2, [r3, #2]
 8001a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a8e:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y - 1;
 8001a90:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a92:	78db      	ldrb	r3, [r3, #3]
 8001a94:	3b01      	subs	r3, #1
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a9a:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001a9e:	789b      	ldrb	r3, [r3, #2]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	4b08      	ldr	r3, [pc, #32]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001aa6:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8001aa8:	4b07      	ldr	r3, [pc, #28]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001aaa:	78da      	ldrb	r2, [r3, #3]
 8001aac:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001aae:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 8001ab0:	4b05      	ldr	r3, [pc, #20]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001ab2:	789b      	ldrb	r3, [r3, #2]
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	4b03      	ldr	r3, [pc, #12]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001aba:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 8001abc:	4b02      	ldr	r3, [pc, #8]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001abe:	78da      	ldrb	r2, [r3, #3]
 8001ac0:	4b01      	ldr	r3, [pc, #4]	@ (8001ac8 <transform_rotation+0x6fc>)
 8001ac2:	725a      	strb	r2, [r3, #9]

					break;
 8001ac4:	e021      	b.n	8001b0a <transform_rotation+0x73e>
 8001ac6:	bf00      	nop
 8001ac8:	20025990 	.word	0x20025990
				case(ROTATION_3):
						//    1
						// 1 [1]
						//    1
					object.suboriginbit_0.x = object.originbit.x - 1;
 8001acc:	4b63      	ldr	r3, [pc, #396]	@ (8001c5c <transform_rotation+0x890>)
 8001ace:	789b      	ldrb	r3, [r3, #2]
 8001ad0:	3b01      	subs	r3, #1
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	4b61      	ldr	r3, [pc, #388]	@ (8001c5c <transform_rotation+0x890>)
 8001ad6:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8001ad8:	4b60      	ldr	r3, [pc, #384]	@ (8001c5c <transform_rotation+0x890>)
 8001ada:	78da      	ldrb	r2, [r3, #3]
 8001adc:	4b5f      	ldr	r3, [pc, #380]	@ (8001c5c <transform_rotation+0x890>)
 8001ade:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8001ae0:	4b5e      	ldr	r3, [pc, #376]	@ (8001c5c <transform_rotation+0x890>)
 8001ae2:	789a      	ldrb	r2, [r3, #2]
 8001ae4:	4b5d      	ldr	r3, [pc, #372]	@ (8001c5c <transform_rotation+0x890>)
 8001ae6:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;
 8001ae8:	4b5c      	ldr	r3, [pc, #368]	@ (8001c5c <transform_rotation+0x890>)
 8001aea:	78db      	ldrb	r3, [r3, #3]
 8001aec:	3301      	adds	r3, #1
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	4b5a      	ldr	r3, [pc, #360]	@ (8001c5c <transform_rotation+0x890>)
 8001af2:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8001af4:	4b59      	ldr	r3, [pc, #356]	@ (8001c5c <transform_rotation+0x890>)
 8001af6:	789a      	ldrb	r2, [r3, #2]
 8001af8:	4b58      	ldr	r3, [pc, #352]	@ (8001c5c <transform_rotation+0x890>)
 8001afa:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8001afc:	4b57      	ldr	r3, [pc, #348]	@ (8001c5c <transform_rotation+0x890>)
 8001afe:	78db      	ldrb	r3, [r3, #3]
 8001b00:	3b01      	subs	r3, #1
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	4b55      	ldr	r3, [pc, #340]	@ (8001c5c <transform_rotation+0x890>)
 8001b06:	725a      	strb	r2, [r3, #9]

					break;
 8001b08:	bf00      	nop
			}

			break;
 8001b0a:	e09e      	b.n	8001c4a <transform_rotation+0x87e>
		case(SMASHBOY):
			switch(object.Rotation) {
 8001b0c:	4b53      	ldr	r3, [pc, #332]	@ (8001c5c <transform_rotation+0x890>)
 8001b0e:	785b      	ldrb	r3, [r3, #1]
 8001b10:	2b03      	cmp	r3, #3
 8001b12:	f200 809c 	bhi.w	8001c4e <transform_rotation+0x882>
 8001b16:	a201      	add	r2, pc, #4	@ (adr r2, 8001b1c <transform_rotation+0x750>)
 8001b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b1c:	08001b2d 	.word	0x08001b2d
 8001b20:	08001b6f 	.word	0x08001b6f
 8001b24:	08001bb1 	.word	0x08001bb1
 8001b28:	08001bf3 	.word	0x08001bf3
				case(ROTATION_0):
					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 8001b2c:	4b4b      	ldr	r3, [pc, #300]	@ (8001c5c <transform_rotation+0x890>)
 8001b2e:	789b      	ldrb	r3, [r3, #2]
 8001b30:	3301      	adds	r3, #1
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	4b49      	ldr	r3, [pc, #292]	@ (8001c5c <transform_rotation+0x890>)
 8001b36:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 8001b38:	4b48      	ldr	r3, [pc, #288]	@ (8001c5c <transform_rotation+0x890>)
 8001b3a:	78da      	ldrb	r2, [r3, #3]
 8001b3c:	4b47      	ldr	r3, [pc, #284]	@ (8001c5c <transform_rotation+0x890>)
 8001b3e:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 8001b40:	4b46      	ldr	r3, [pc, #280]	@ (8001c5c <transform_rotation+0x890>)
 8001b42:	789a      	ldrb	r2, [r3, #2]
 8001b44:	4b45      	ldr	r3, [pc, #276]	@ (8001c5c <transform_rotation+0x890>)
 8001b46:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 8001b48:	4b44      	ldr	r3, [pc, #272]	@ (8001c5c <transform_rotation+0x890>)
 8001b4a:	78db      	ldrb	r3, [r3, #3]
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	4b42      	ldr	r3, [pc, #264]	@ (8001c5c <transform_rotation+0x890>)
 8001b52:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 8001b54:	4b41      	ldr	r3, [pc, #260]	@ (8001c5c <transform_rotation+0x890>)
 8001b56:	789b      	ldrb	r3, [r3, #2]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	b2da      	uxtb	r2, r3
 8001b5c:	4b3f      	ldr	r3, [pc, #252]	@ (8001c5c <transform_rotation+0x890>)
 8001b5e:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 8001b60:	4b3e      	ldr	r3, [pc, #248]	@ (8001c5c <transform_rotation+0x890>)
 8001b62:	78db      	ldrb	r3, [r3, #3]
 8001b64:	3301      	adds	r3, #1
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	4b3c      	ldr	r3, [pc, #240]	@ (8001c5c <transform_rotation+0x890>)
 8001b6a:	725a      	strb	r2, [r3, #9]

					break;
 8001b6c:	e062      	b.n	8001c34 <transform_rotation+0x868>
				case(ROTATION_1):

					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 8001b6e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c5c <transform_rotation+0x890>)
 8001b70:	789b      	ldrb	r3, [r3, #2]
 8001b72:	3301      	adds	r3, #1
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4b39      	ldr	r3, [pc, #228]	@ (8001c5c <transform_rotation+0x890>)
 8001b78:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 8001b7a:	4b38      	ldr	r3, [pc, #224]	@ (8001c5c <transform_rotation+0x890>)
 8001b7c:	78da      	ldrb	r2, [r3, #3]
 8001b7e:	4b37      	ldr	r3, [pc, #220]	@ (8001c5c <transform_rotation+0x890>)
 8001b80:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 8001b82:	4b36      	ldr	r3, [pc, #216]	@ (8001c5c <transform_rotation+0x890>)
 8001b84:	789a      	ldrb	r2, [r3, #2]
 8001b86:	4b35      	ldr	r3, [pc, #212]	@ (8001c5c <transform_rotation+0x890>)
 8001b88:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 8001b8a:	4b34      	ldr	r3, [pc, #208]	@ (8001c5c <transform_rotation+0x890>)
 8001b8c:	78db      	ldrb	r3, [r3, #3]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4b32      	ldr	r3, [pc, #200]	@ (8001c5c <transform_rotation+0x890>)
 8001b94:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 8001b96:	4b31      	ldr	r3, [pc, #196]	@ (8001c5c <transform_rotation+0x890>)
 8001b98:	789b      	ldrb	r3, [r3, #2]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c5c <transform_rotation+0x890>)
 8001ba0:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 8001ba2:	4b2e      	ldr	r3, [pc, #184]	@ (8001c5c <transform_rotation+0x890>)
 8001ba4:	78db      	ldrb	r3, [r3, #3]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	b2da      	uxtb	r2, r3
 8001baa:	4b2c      	ldr	r3, [pc, #176]	@ (8001c5c <transform_rotation+0x890>)
 8001bac:	725a      	strb	r2, [r3, #9]

					break;
 8001bae:	e041      	b.n	8001c34 <transform_rotation+0x868>
				case(ROTATION_2):
					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 8001bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c5c <transform_rotation+0x890>)
 8001bb2:	789b      	ldrb	r3, [r3, #2]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	4b28      	ldr	r3, [pc, #160]	@ (8001c5c <transform_rotation+0x890>)
 8001bba:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 8001bbc:	4b27      	ldr	r3, [pc, #156]	@ (8001c5c <transform_rotation+0x890>)
 8001bbe:	78da      	ldrb	r2, [r3, #3]
 8001bc0:	4b26      	ldr	r3, [pc, #152]	@ (8001c5c <transform_rotation+0x890>)
 8001bc2:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 8001bc4:	4b25      	ldr	r3, [pc, #148]	@ (8001c5c <transform_rotation+0x890>)
 8001bc6:	789a      	ldrb	r2, [r3, #2]
 8001bc8:	4b24      	ldr	r3, [pc, #144]	@ (8001c5c <transform_rotation+0x890>)
 8001bca:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 8001bcc:	4b23      	ldr	r3, [pc, #140]	@ (8001c5c <transform_rotation+0x890>)
 8001bce:	78db      	ldrb	r3, [r3, #3]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	b2da      	uxtb	r2, r3
 8001bd4:	4b21      	ldr	r3, [pc, #132]	@ (8001c5c <transform_rotation+0x890>)
 8001bd6:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 8001bd8:	4b20      	ldr	r3, [pc, #128]	@ (8001c5c <transform_rotation+0x890>)
 8001bda:	789b      	ldrb	r3, [r3, #2]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c5c <transform_rotation+0x890>)
 8001be2:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 8001be4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c5c <transform_rotation+0x890>)
 8001be6:	78db      	ldrb	r3, [r3, #3]
 8001be8:	3301      	adds	r3, #1
 8001bea:	b2da      	uxtb	r2, r3
 8001bec:	4b1b      	ldr	r3, [pc, #108]	@ (8001c5c <transform_rotation+0x890>)
 8001bee:	725a      	strb	r2, [r3, #9]

					break;
 8001bf0:	e020      	b.n	8001c34 <transform_rotation+0x868>
				case(ROTATION_3):

					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 8001bf2:	4b1a      	ldr	r3, [pc, #104]	@ (8001c5c <transform_rotation+0x890>)
 8001bf4:	789b      	ldrb	r3, [r3, #2]
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	4b18      	ldr	r3, [pc, #96]	@ (8001c5c <transform_rotation+0x890>)
 8001bfc:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 8001bfe:	4b17      	ldr	r3, [pc, #92]	@ (8001c5c <transform_rotation+0x890>)
 8001c00:	78da      	ldrb	r2, [r3, #3]
 8001c02:	4b16      	ldr	r3, [pc, #88]	@ (8001c5c <transform_rotation+0x890>)
 8001c04:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 8001c06:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <transform_rotation+0x890>)
 8001c08:	789a      	ldrb	r2, [r3, #2]
 8001c0a:	4b14      	ldr	r3, [pc, #80]	@ (8001c5c <transform_rotation+0x890>)
 8001c0c:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 8001c0e:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <transform_rotation+0x890>)
 8001c10:	78db      	ldrb	r3, [r3, #3]
 8001c12:	3301      	adds	r3, #1
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4b11      	ldr	r3, [pc, #68]	@ (8001c5c <transform_rotation+0x890>)
 8001c18:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 8001c1a:	4b10      	ldr	r3, [pc, #64]	@ (8001c5c <transform_rotation+0x890>)
 8001c1c:	789b      	ldrb	r3, [r3, #2]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4b0e      	ldr	r3, [pc, #56]	@ (8001c5c <transform_rotation+0x890>)
 8001c24:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 8001c26:	4b0d      	ldr	r3, [pc, #52]	@ (8001c5c <transform_rotation+0x890>)
 8001c28:	78db      	ldrb	r3, [r3, #3]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c5c <transform_rotation+0x890>)
 8001c30:	725a      	strb	r2, [r3, #9]

					break;
 8001c32:	bf00      	nop
			}
		break;
 8001c34:	e00b      	b.n	8001c4e <transform_rotation+0x882>
			break;
 8001c36:	bf00      	nop
 8001c38:	e00a      	b.n	8001c50 <transform_rotation+0x884>
			break;
 8001c3a:	bf00      	nop
 8001c3c:	e008      	b.n	8001c50 <transform_rotation+0x884>
			break;
 8001c3e:	bf00      	nop
 8001c40:	e006      	b.n	8001c50 <transform_rotation+0x884>
			break;
 8001c42:	bf00      	nop
 8001c44:	e004      	b.n	8001c50 <transform_rotation+0x884>
			break;
 8001c46:	bf00      	nop
 8001c48:	e002      	b.n	8001c50 <transform_rotation+0x884>
			break;
 8001c4a:	bf00      	nop
 8001c4c:	e000      	b.n	8001c50 <transform_rotation+0x884>
		break;
 8001c4e:	bf00      	nop
	}

}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20025990 	.word	0x20025990

08001c60 <printMatrix>:


void printMatrix(void){
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08c      	sub	sp, #48	@ 0x30
 8001c64:	af00      	add	r7, sp, #0
	// Connect to the LCD screen and update that
	//LCD_Draw_Circle_Fill(x,y,radius,color);
	for (int i = 0; i < ROWS; i++) {
 8001c66:	2300      	movs	r3, #0
 8001c68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c6a:	e078      	b.n	8001d5e <printMatrix+0xfe>
		for (int j = 0; j < COLS; j++) {
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c70:	e06f      	b.n	8001d52 <printMatrix+0xf2>
			uint8_t value = dummyTable[i][j];
 8001c72:	493f      	ldr	r1, [pc, #252]	@ (8001d70 <printMatrix+0x110>)
 8001c74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	005b      	lsls	r3, r3, #1
 8001c7e:	18ca      	adds	r2, r1, r3
 8001c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c82:	4413      	add	r3, r2
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	75fb      	strb	r3, [r7, #23]
			if(value){
 8001c88:	7dfb      	ldrb	r3, [r7, #23]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d02f      	beq.n	8001cee <printMatrix+0x8e>
				// Calculate top-left corner of the block
				int x = j * 24;//BLOCK_WIDTH;
 8001c8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	00db      	lsls	r3, r3, #3
 8001c98:	60bb      	str	r3, [r7, #8]
				int y = i * 24;//BLOCK_HEIGHT;
 8001c9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	00db      	lsls	r3, r3, #3
 8001ca4:	607b      	str	r3, [r7, #4]

				// Draw the block on the screen

				for (int row = 0; row < BLOCK_HEIGHT; row++) {
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001caa:	e01c      	b.n	8001ce6 <printMatrix+0x86>
					for (int col = 0; col < BLOCK_WIDTH; col++) {
 8001cac:	2300      	movs	r3, #0
 8001cae:	623b      	str	r3, [r7, #32]
 8001cb0:	e013      	b.n	8001cda <printMatrix+0x7a>
						LCD_Draw_Pixel(x+col,y+row,LCD_COLOR_RED);
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	4413      	add	r3, r2
 8001cbc:	b298      	uxth	r0, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f7fe fea4 	bl	8000a1c <LCD_Draw_Pixel>
					for (int col = 0; col < BLOCK_WIDTH; col++) {
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	623b      	str	r3, [r7, #32]
 8001cda:	6a3b      	ldr	r3, [r7, #32]
 8001cdc:	2b17      	cmp	r3, #23
 8001cde:	dde8      	ble.n	8001cb2 <printMatrix+0x52>
				for (int row = 0; row < BLOCK_HEIGHT; row++) {
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce8:	2b17      	cmp	r3, #23
 8001cea:	dddf      	ble.n	8001cac <printMatrix+0x4c>
 8001cec:	e02e      	b.n	8001d4c <printMatrix+0xec>
					}
				}
			} else {
				int x = j * 24;//BLOCK_WIDTH;
 8001cee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	4413      	add	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	613b      	str	r3, [r7, #16]
				int y = i * 24;//BLOCK_HEIGHT;
 8001cfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	60fb      	str	r3, [r7, #12]

				// Draw the block on the screen

				for (int row = 0; row < BLOCK_HEIGHT; row++) {
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	e01c      	b.n	8001d46 <printMatrix+0xe6>
					for (int col = 0; col < BLOCK_WIDTH; col++) {
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61bb      	str	r3, [r7, #24]
 8001d10:	e013      	b.n	8001d3a <printMatrix+0xda>
						LCD_Draw_Pixel(x+col,y+row,LCD_COLOR_WHITE);
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	b29a      	uxth	r2, r3
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	4413      	add	r3, r2
 8001d1c:	b298      	uxth	r0, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	4413      	add	r3, r2
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d2e:	4619      	mov	r1, r3
 8001d30:	f7fe fe74 	bl	8000a1c <LCD_Draw_Pixel>
					for (int col = 0; col < BLOCK_WIDTH; col++) {
 8001d34:	69bb      	ldr	r3, [r7, #24]
 8001d36:	3301      	adds	r3, #1
 8001d38:	61bb      	str	r3, [r7, #24]
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	2b17      	cmp	r3, #23
 8001d3e:	dde8      	ble.n	8001d12 <printMatrix+0xb2>
				for (int row = 0; row < BLOCK_HEIGHT; row++) {
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	3301      	adds	r3, #1
 8001d44:	61fb      	str	r3, [r7, #28]
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	2b17      	cmp	r3, #23
 8001d4a:	dddf      	ble.n	8001d0c <printMatrix+0xac>
		for (int j = 0; j < COLS; j++) {
 8001d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d4e:	3301      	adds	r3, #1
 8001d50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d54:	2b09      	cmp	r3, #9
 8001d56:	dd8c      	ble.n	8001c72 <printMatrix+0x12>
	for (int i = 0; i < ROWS; i++) {
 8001d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d60:	2b0c      	cmp	r3, #12
 8001d62:	dd83      	ble.n	8001c6c <printMatrix+0xc>
					}
				}
			}
		}
	}
}
 8001d64:	bf00      	nop
 8001d66:	bf00      	nop
 8001d68:	3730      	adds	r7, #48	@ 0x30
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	2002599c 	.word	0x2002599c

08001d74 <Matrix_clear>:


void Matrix_clear(void) {
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
	dummyTable[object.originbit.y][object.originbit.x] = 0;
 8001d78:	4b20      	ldr	r3, [pc, #128]	@ (8001dfc <Matrix_clear+0x88>)
 8001d7a:	78db      	ldrb	r3, [r3, #3]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4b1f      	ldr	r3, [pc, #124]	@ (8001dfc <Matrix_clear+0x88>)
 8001d80:	789b      	ldrb	r3, [r3, #2]
 8001d82:	4618      	mov	r0, r3
 8001d84:	4a1e      	ldr	r2, [pc, #120]	@ (8001e00 <Matrix_clear+0x8c>)
 8001d86:	460b      	mov	r3, r1
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	440b      	add	r3, r1
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	4413      	add	r3, r2
 8001d90:	4403      	add	r3, r0
 8001d92:	2200      	movs	r2, #0
 8001d94:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_0.y][object.suboriginbit_0.x] = 0;
 8001d96:	4b19      	ldr	r3, [pc, #100]	@ (8001dfc <Matrix_clear+0x88>)
 8001d98:	795b      	ldrb	r3, [r3, #5]
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4b17      	ldr	r3, [pc, #92]	@ (8001dfc <Matrix_clear+0x88>)
 8001d9e:	791b      	ldrb	r3, [r3, #4]
 8001da0:	4618      	mov	r0, r3
 8001da2:	4a17      	ldr	r2, [pc, #92]	@ (8001e00 <Matrix_clear+0x8c>)
 8001da4:	460b      	mov	r3, r1
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	4413      	add	r3, r2
 8001dae:	4403      	add	r3, r0
 8001db0:	2200      	movs	r2, #0
 8001db2:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_1.y][object.suboriginbit_1.x] = 0;
 8001db4:	4b11      	ldr	r3, [pc, #68]	@ (8001dfc <Matrix_clear+0x88>)
 8001db6:	79db      	ldrb	r3, [r3, #7]
 8001db8:	4619      	mov	r1, r3
 8001dba:	4b10      	ldr	r3, [pc, #64]	@ (8001dfc <Matrix_clear+0x88>)
 8001dbc:	799b      	ldrb	r3, [r3, #6]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	4a0f      	ldr	r2, [pc, #60]	@ (8001e00 <Matrix_clear+0x8c>)
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	4403      	add	r3, r0
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_2.y][object.suboriginbit_2.x] = 0;
 8001dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dfc <Matrix_clear+0x88>)
 8001dd4:	7a5b      	ldrb	r3, [r3, #9]
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4b08      	ldr	r3, [pc, #32]	@ (8001dfc <Matrix_clear+0x88>)
 8001dda:	7a1b      	ldrb	r3, [r3, #8]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	4a08      	ldr	r2, [pc, #32]	@ (8001e00 <Matrix_clear+0x8c>)
 8001de0:	460b      	mov	r3, r1
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	4403      	add	r3, r0
 8001dec:	2200      	movs	r2, #0
 8001dee:	701a      	strb	r2, [r3, #0]
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	20025990 	.word	0x20025990
 8001e00:	2002599c 	.word	0x2002599c

08001e04 <Matrix_update>:
void Matrix_update(void){
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
	dummyTable[object.originbit.y][object.originbit.x] = 1;
 8001e08:	4b20      	ldr	r3, [pc, #128]	@ (8001e8c <Matrix_update+0x88>)
 8001e0a:	78db      	ldrb	r3, [r3, #3]
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001e8c <Matrix_update+0x88>)
 8001e10:	789b      	ldrb	r3, [r3, #2]
 8001e12:	4618      	mov	r0, r3
 8001e14:	4a1e      	ldr	r2, [pc, #120]	@ (8001e90 <Matrix_update+0x8c>)
 8001e16:	460b      	mov	r3, r1
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	4413      	add	r3, r2
 8001e20:	4403      	add	r3, r0
 8001e22:	2201      	movs	r2, #1
 8001e24:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_0.y][object.suboriginbit_0.x] = 1;
 8001e26:	4b19      	ldr	r3, [pc, #100]	@ (8001e8c <Matrix_update+0x88>)
 8001e28:	795b      	ldrb	r3, [r3, #5]
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4b17      	ldr	r3, [pc, #92]	@ (8001e8c <Matrix_update+0x88>)
 8001e2e:	791b      	ldrb	r3, [r3, #4]
 8001e30:	4618      	mov	r0, r3
 8001e32:	4a17      	ldr	r2, [pc, #92]	@ (8001e90 <Matrix_update+0x8c>)
 8001e34:	460b      	mov	r3, r1
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4413      	add	r3, r2
 8001e3e:	4403      	add	r3, r0
 8001e40:	2201      	movs	r2, #1
 8001e42:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_1.y][object.suboriginbit_1.x] = 1;
 8001e44:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <Matrix_update+0x88>)
 8001e46:	79db      	ldrb	r3, [r3, #7]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4b10      	ldr	r3, [pc, #64]	@ (8001e8c <Matrix_update+0x88>)
 8001e4c:	799b      	ldrb	r3, [r3, #6]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	4a0f      	ldr	r2, [pc, #60]	@ (8001e90 <Matrix_update+0x8c>)
 8001e52:	460b      	mov	r3, r1
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	440b      	add	r3, r1
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	4403      	add	r3, r0
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_2.y][object.suboriginbit_2.x] = 1;
 8001e62:	4b0a      	ldr	r3, [pc, #40]	@ (8001e8c <Matrix_update+0x88>)
 8001e64:	7a5b      	ldrb	r3, [r3, #9]
 8001e66:	4619      	mov	r1, r3
 8001e68:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <Matrix_update+0x88>)
 8001e6a:	7a1b      	ldrb	r3, [r3, #8]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	4a08      	ldr	r2, [pc, #32]	@ (8001e90 <Matrix_update+0x8c>)
 8001e70:	460b      	mov	r3, r1
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	440b      	add	r3, r1
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	4413      	add	r3, r2
 8001e7a:	4403      	add	r3, r0
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	701a      	strb	r2, [r3, #0]
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20025990 	.word	0x20025990
 8001e90:	2002599c 	.word	0x2002599c

08001e94 <getScheduledEvents>:
 */
#include "Scheduler.h"

static uint32_t scheduledEvents;

uint32_t getScheduledEvents(){
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
	uint32_t returnVal = scheduledEvents;
 8001e9a:	4b05      	ldr	r3, [pc, #20]	@ (8001eb0 <getScheduledEvents+0x1c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	607b      	str	r3, [r7, #4]
	return returnVal;
 8001ea0:	687b      	ldr	r3, [r7, #4]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	20025a24 	.word	0x20025a24

08001eb4 <addScheduledEvent>:

void addScheduledEvent(uint32_t event){
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
	scheduledEvents |= (event);
 8001ebc:	4b05      	ldr	r3, [pc, #20]	@ (8001ed4 <addScheduledEvent+0x20>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	4a03      	ldr	r2, [pc, #12]	@ (8001ed4 <addScheduledEvent+0x20>)
 8001ec6:	6013      	str	r3, [r2, #0]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	20025a24 	.word	0x20025a24

08001ed8 <removeSchedulerEvent>:

void removeSchedulerEvent(uint32_t event){
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	scheduledEvents &= ~(event);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	43da      	mvns	r2, r3
 8001ee4:	4b05      	ldr	r3, [pc, #20]	@ (8001efc <removeSchedulerEvent+0x24>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	4a04      	ldr	r2, [pc, #16]	@ (8001efc <removeSchedulerEvent+0x24>)
 8001eec:	6013      	str	r3, [r2, #0]
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20025a24 	.word	0x20025a24

08001f00 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001f04:	f000 f9fe 	bl	8002304 <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001f08:	20ca      	movs	r0, #202	@ 0xca
 8001f0a:	f000 f943 	bl	8002194 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001f0e:	20c3      	movs	r0, #195	@ 0xc3
 8001f10:	f000 f94d 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001f14:	2008      	movs	r0, #8
 8001f16:	f000 f94a 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001f1a:	2050      	movs	r0, #80	@ 0x50
 8001f1c:	f000 f947 	bl	80021ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001f20:	20cf      	movs	r0, #207	@ 0xcf
 8001f22:	f000 f937 	bl	8002194 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001f26:	2000      	movs	r0, #0
 8001f28:	f000 f941 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001f2c:	20c1      	movs	r0, #193	@ 0xc1
 8001f2e:	f000 f93e 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001f32:	2030      	movs	r0, #48	@ 0x30
 8001f34:	f000 f93b 	bl	80021ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001f38:	20ed      	movs	r0, #237	@ 0xed
 8001f3a:	f000 f92b 	bl	8002194 <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001f3e:	2064      	movs	r0, #100	@ 0x64
 8001f40:	f000 f935 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001f44:	2003      	movs	r0, #3
 8001f46:	f000 f932 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001f4a:	2012      	movs	r0, #18
 8001f4c:	f000 f92f 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001f50:	2081      	movs	r0, #129	@ 0x81
 8001f52:	f000 f92c 	bl	80021ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001f56:	20e8      	movs	r0, #232	@ 0xe8
 8001f58:	f000 f91c 	bl	8002194 <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001f5c:	2085      	movs	r0, #133	@ 0x85
 8001f5e:	f000 f926 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f62:	2000      	movs	r0, #0
 8001f64:	f000 f923 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001f68:	2078      	movs	r0, #120	@ 0x78
 8001f6a:	f000 f920 	bl	80021ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001f6e:	20cb      	movs	r0, #203	@ 0xcb
 8001f70:	f000 f910 	bl	8002194 <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001f74:	2039      	movs	r0, #57	@ 0x39
 8001f76:	f000 f91a 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001f7a:	202c      	movs	r0, #44	@ 0x2c
 8001f7c:	f000 f917 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f80:	2000      	movs	r0, #0
 8001f82:	f000 f914 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001f86:	2034      	movs	r0, #52	@ 0x34
 8001f88:	f000 f911 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001f8c:	2002      	movs	r0, #2
 8001f8e:	f000 f90e 	bl	80021ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001f92:	20f7      	movs	r0, #247	@ 0xf7
 8001f94:	f000 f8fe 	bl	8002194 <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001f98:	2020      	movs	r0, #32
 8001f9a:	f000 f908 	bl	80021ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001f9e:	20ea      	movs	r0, #234	@ 0xea
 8001fa0:	f000 f8f8 	bl	8002194 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	f000 f902 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001faa:	2000      	movs	r0, #0
 8001fac:	f000 f8ff 	bl	80021ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001fb0:	20b1      	movs	r0, #177	@ 0xb1
 8001fb2:	f000 f8ef 	bl	8002194 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	f000 f8f9 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001fbc:	201b      	movs	r0, #27
 8001fbe:	f000 f8f6 	bl	80021ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001fc2:	20b6      	movs	r0, #182	@ 0xb6
 8001fc4:	f000 f8e6 	bl	8002194 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001fc8:	200a      	movs	r0, #10
 8001fca:	f000 f8f0 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001fce:	20a2      	movs	r0, #162	@ 0xa2
 8001fd0:	f000 f8ed 	bl	80021ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001fd4:	20c0      	movs	r0, #192	@ 0xc0
 8001fd6:	f000 f8dd 	bl	8002194 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001fda:	2010      	movs	r0, #16
 8001fdc:	f000 f8e7 	bl	80021ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001fe0:	20c1      	movs	r0, #193	@ 0xc1
 8001fe2:	f000 f8d7 	bl	8002194 <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001fe6:	2010      	movs	r0, #16
 8001fe8:	f000 f8e1 	bl	80021ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001fec:	20c5      	movs	r0, #197	@ 0xc5
 8001fee:	f000 f8d1 	bl	8002194 <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001ff2:	2045      	movs	r0, #69	@ 0x45
 8001ff4:	f000 f8db 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001ff8:	2015      	movs	r0, #21
 8001ffa:	f000 f8d8 	bl	80021ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001ffe:	20c7      	movs	r0, #199	@ 0xc7
 8002000:	f000 f8c8 	bl	8002194 <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8002004:	2090      	movs	r0, #144	@ 0x90
 8002006:	f000 f8d2 	bl	80021ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 800200a:	2036      	movs	r0, #54	@ 0x36
 800200c:	f000 f8c2 	bl	8002194 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8002010:	20c8      	movs	r0, #200	@ 0xc8
 8002012:	f000 f8cc 	bl	80021ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8002016:	20f2      	movs	r0, #242	@ 0xf2
 8002018:	f000 f8bc 	bl	8002194 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800201c:	2000      	movs	r0, #0
 800201e:	f000 f8c6 	bl	80021ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8002022:	20b0      	movs	r0, #176	@ 0xb0
 8002024:	f000 f8b6 	bl	8002194 <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8002028:	20c2      	movs	r0, #194	@ 0xc2
 800202a:	f000 f8c0 	bl	80021ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 800202e:	20b6      	movs	r0, #182	@ 0xb6
 8002030:	f000 f8b0 	bl	8002194 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8002034:	200a      	movs	r0, #10
 8002036:	f000 f8ba 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 800203a:	20a7      	movs	r0, #167	@ 0xa7
 800203c:	f000 f8b7 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8002040:	2027      	movs	r0, #39	@ 0x27
 8002042:	f000 f8b4 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002046:	2004      	movs	r0, #4
 8002048:	f000 f8b1 	bl	80021ae <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 800204c:	202a      	movs	r0, #42	@ 0x2a
 800204e:	f000 f8a1 	bl	8002194 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002052:	2000      	movs	r0, #0
 8002054:	f000 f8ab 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002058:	2000      	movs	r0, #0
 800205a:	f000 f8a8 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800205e:	2000      	movs	r0, #0
 8002060:	f000 f8a5 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8002064:	20ef      	movs	r0, #239	@ 0xef
 8002066:	f000 f8a2 	bl	80021ae <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 800206a:	202b      	movs	r0, #43	@ 0x2b
 800206c:	f000 f892 	bl	8002194 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002070:	2000      	movs	r0, #0
 8002072:	f000 f89c 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002076:	2000      	movs	r0, #0
 8002078:	f000 f899 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 800207c:	2001      	movs	r0, #1
 800207e:	f000 f896 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8002082:	203f      	movs	r0, #63	@ 0x3f
 8002084:	f000 f893 	bl	80021ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8002088:	20f6      	movs	r0, #246	@ 0xf6
 800208a:	f000 f883 	bl	8002194 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 800208e:	2001      	movs	r0, #1
 8002090:	f000 f88d 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002094:	2000      	movs	r0, #0
 8002096:	f000 f88a 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 800209a:	2006      	movs	r0, #6
 800209c:	f000 f887 	bl	80021ae <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 80020a0:	202c      	movs	r0, #44	@ 0x2c
 80020a2:	f000 f877 	bl	8002194 <ili9341_Write_Reg>
  LCD_Delay(200);
 80020a6:	20c8      	movs	r0, #200	@ 0xc8
 80020a8:	f000 f9e8 	bl	800247c <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 80020ac:	2026      	movs	r0, #38	@ 0x26
 80020ae:	f000 f871 	bl	8002194 <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 80020b2:	2001      	movs	r0, #1
 80020b4:	f000 f87b 	bl	80021ae <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 80020b8:	20e0      	movs	r0, #224	@ 0xe0
 80020ba:	f000 f86b 	bl	8002194 <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 80020be:	200f      	movs	r0, #15
 80020c0:	f000 f875 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 80020c4:	2029      	movs	r0, #41	@ 0x29
 80020c6:	f000 f872 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 80020ca:	2024      	movs	r0, #36	@ 0x24
 80020cc:	f000 f86f 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 80020d0:	200c      	movs	r0, #12
 80020d2:	f000 f86c 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 80020d6:	200e      	movs	r0, #14
 80020d8:	f000 f869 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80020dc:	2009      	movs	r0, #9
 80020de:	f000 f866 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 80020e2:	204e      	movs	r0, #78	@ 0x4e
 80020e4:	f000 f863 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 80020e8:	2078      	movs	r0, #120	@ 0x78
 80020ea:	f000 f860 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 80020ee:	203c      	movs	r0, #60	@ 0x3c
 80020f0:	f000 f85d 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 80020f4:	2009      	movs	r0, #9
 80020f6:	f000 f85a 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 80020fa:	2013      	movs	r0, #19
 80020fc:	f000 f857 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002100:	2005      	movs	r0, #5
 8002102:	f000 f854 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 8002106:	2017      	movs	r0, #23
 8002108:	f000 f851 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800210c:	2011      	movs	r0, #17
 800210e:	f000 f84e 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8002112:	2000      	movs	r0, #0
 8002114:	f000 f84b 	bl	80021ae <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8002118:	20e1      	movs	r0, #225	@ 0xe1
 800211a:	f000 f83b 	bl	8002194 <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 800211e:	2000      	movs	r0, #0
 8002120:	f000 f845 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 8002124:	2016      	movs	r0, #22
 8002126:	f000 f842 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 800212a:	201b      	movs	r0, #27
 800212c:	f000 f83f 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002130:	2004      	movs	r0, #4
 8002132:	f000 f83c 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8002136:	2011      	movs	r0, #17
 8002138:	f000 f839 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 800213c:	2007      	movs	r0, #7
 800213e:	f000 f836 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 8002142:	2031      	movs	r0, #49	@ 0x31
 8002144:	f000 f833 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8002148:	2033      	movs	r0, #51	@ 0x33
 800214a:	f000 f830 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 800214e:	2042      	movs	r0, #66	@ 0x42
 8002150:	f000 f82d 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002154:	2005      	movs	r0, #5
 8002156:	f000 f82a 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 800215a:	200c      	movs	r0, #12
 800215c:	f000 f827 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8002160:	200a      	movs	r0, #10
 8002162:	f000 f824 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 8002166:	2028      	movs	r0, #40	@ 0x28
 8002168:	f000 f821 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 800216c:	202f      	movs	r0, #47	@ 0x2f
 800216e:	f000 f81e 	bl	80021ae <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 8002172:	200f      	movs	r0, #15
 8002174:	f000 f81b 	bl	80021ae <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8002178:	2011      	movs	r0, #17
 800217a:	f000 f80b 	bl	8002194 <ili9341_Write_Reg>
  LCD_Delay(200);
 800217e:	20c8      	movs	r0, #200	@ 0xc8
 8002180:	f000 f97c 	bl	800247c <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 8002184:	2029      	movs	r0, #41	@ 0x29
 8002186:	f000 f805 	bl	8002194 <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 800218a:	202c      	movs	r0, #44	@ 0x2c
 800218c:	f000 f802 	bl	8002194 <ili9341_Write_Reg>
}
 8002190:	bf00      	nop
 8002192:	bd80      	pop	{r7, pc}

08002194 <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 f949 	bl	8002438 <LCD_IO_WriteReg>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	4603      	mov	r3, r0
 80021b6:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80021b8:	88fb      	ldrh	r3, [r7, #6]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f000 f91a 	bl	80023f4 <LCD_IO_WriteData>
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}

080021c8 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80021cc:	4819      	ldr	r0, [pc, #100]	@ (8002234 <SPI_Init+0x6c>)
 80021ce:	f004 fdae 	bl	8006d2e <HAL_SPI_GetState>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d12b      	bne.n	8002230 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80021d8:	4b16      	ldr	r3, [pc, #88]	@ (8002234 <SPI_Init+0x6c>)
 80021da:	4a17      	ldr	r2, [pc, #92]	@ (8002238 <SPI_Init+0x70>)
 80021dc:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80021de:	4b15      	ldr	r3, [pc, #84]	@ (8002234 <SPI_Init+0x6c>)
 80021e0:	2218      	movs	r2, #24
 80021e2:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80021e4:	4b13      	ldr	r3, [pc, #76]	@ (8002234 <SPI_Init+0x6c>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 80021ea:	4b12      	ldr	r3, [pc, #72]	@ (8002234 <SPI_Init+0x6c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 80021f0:	4b10      	ldr	r3, [pc, #64]	@ (8002234 <SPI_Init+0x6c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80021f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002234 <SPI_Init+0x6c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 80021fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002234 <SPI_Init+0x6c>)
 80021fe:	2207      	movs	r2, #7
 8002200:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8002202:	4b0c      	ldr	r3, [pc, #48]	@ (8002234 <SPI_Init+0x6c>)
 8002204:	2200      	movs	r2, #0
 8002206:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002208:	4b0a      	ldr	r3, [pc, #40]	@ (8002234 <SPI_Init+0x6c>)
 800220a:	2200      	movs	r2, #0
 800220c:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 800220e:	4b09      	ldr	r3, [pc, #36]	@ (8002234 <SPI_Init+0x6c>)
 8002210:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002214:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8002216:	4b07      	ldr	r3, [pc, #28]	@ (8002234 <SPI_Init+0x6c>)
 8002218:	2200      	movs	r2, #0
 800221a:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800221c:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <SPI_Init+0x6c>)
 800221e:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002222:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 8002224:	4803      	ldr	r0, [pc, #12]	@ (8002234 <SPI_Init+0x6c>)
 8002226:	f000 f833 	bl	8002290 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 800222a:	4802      	ldr	r0, [pc, #8]	@ (8002234 <SPI_Init+0x6c>)
 800222c:	f004 fb8a 	bl	8006944 <HAL_SPI_Init>
  }
}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20025a28 	.word	0x20025a28
 8002238:	40015000 	.word	0x40015000

0800223c <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002246:	2300      	movs	r3, #0
 8002248:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 800224a:	4b09      	ldr	r3, [pc, #36]	@ (8002270 <SPI_Write+0x34>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	1db9      	adds	r1, r7, #6
 8002250:	2201      	movs	r2, #1
 8002252:	4808      	ldr	r0, [pc, #32]	@ (8002274 <SPI_Write+0x38>)
 8002254:	f004 fc27 	bl	8006aa6 <HAL_SPI_Transmit>
 8002258:	4603      	mov	r3, r0
 800225a:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 800225c:	7bfb      	ldrb	r3, [r7, #15]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 8002262:	f000 f809 	bl	8002278 <SPI_Error>
  }
}
 8002266:	bf00      	nop
 8002268:	3710      	adds	r7, #16
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	2000000c 	.word	0x2000000c
 8002274:	20025a28 	.word	0x20025a28

08002278 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 800227c:	4803      	ldr	r0, [pc, #12]	@ (800228c <SPI_Error+0x14>)
 800227e:	f004 fbea 	bl	8006a56 <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 8002282:	f7ff ffa1 	bl	80021c8 <SPI_Init>
}
 8002286:	bf00      	nop
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20025a28 	.word	0x20025a28

08002290 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	@ 0x28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 8002298:	2300      	movs	r3, #0
 800229a:	613b      	str	r3, [r7, #16]
 800229c:	4b17      	ldr	r3, [pc, #92]	@ (80022fc <SPI_MspInit+0x6c>)
 800229e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022a0:	4a16      	ldr	r2, [pc, #88]	@ (80022fc <SPI_MspInit+0x6c>)
 80022a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022a6:	6453      	str	r3, [r2, #68]	@ 0x44
 80022a8:	4b14      	ldr	r3, [pc, #80]	@ (80022fc <SPI_MspInit+0x6c>)
 80022aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80022b4:	2300      	movs	r3, #0
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	4b10      	ldr	r3, [pc, #64]	@ (80022fc <SPI_MspInit+0x6c>)
 80022ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022bc:	4a0f      	ldr	r2, [pc, #60]	@ (80022fc <SPI_MspInit+0x6c>)
 80022be:	f043 0320 	orr.w	r3, r3, #32
 80022c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c4:	4b0d      	ldr	r3, [pc, #52]	@ (80022fc <SPI_MspInit+0x6c>)
 80022c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c8:	f003 0320 	and.w	r3, r3, #32
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80022d0:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80022d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80022da:	2302      	movs	r3, #2
 80022dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80022de:	2301      	movs	r3, #1
 80022e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80022e2:	2305      	movs	r3, #5
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80022e6:	f107 0314 	add.w	r3, r7, #20
 80022ea:	4619      	mov	r1, r3
 80022ec:	4804      	ldr	r0, [pc, #16]	@ (8002300 <SPI_MspInit+0x70>)
 80022ee:	f001 fe03 	bl	8003ef8 <HAL_GPIO_Init>
}
 80022f2:	bf00      	nop
 80022f4:	3728      	adds	r7, #40	@ 0x28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40023800 	.word	0x40023800
 8002300:	40021400 	.word	0x40021400

08002304 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b088      	sub	sp, #32
 8002308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 800230a:	4b36      	ldr	r3, [pc, #216]	@ (80023e4 <LCD_IO_Init+0xe0>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d164      	bne.n	80023dc <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8002312:	4b34      	ldr	r3, [pc, #208]	@ (80023e4 <LCD_IO_Init+0xe0>)
 8002314:	2201      	movs	r2, #1
 8002316:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002318:	2300      	movs	r3, #0
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	4b32      	ldr	r3, [pc, #200]	@ (80023e8 <LCD_IO_Init+0xe4>)
 800231e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002320:	4a31      	ldr	r2, [pc, #196]	@ (80023e8 <LCD_IO_Init+0xe4>)
 8002322:	f043 0308 	orr.w	r3, r3, #8
 8002326:	6313      	str	r3, [r2, #48]	@ 0x30
 8002328:	4b2f      	ldr	r3, [pc, #188]	@ (80023e8 <LCD_IO_Init+0xe4>)
 800232a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8002334:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002338:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800233a:	2301      	movs	r3, #1
 800233c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002342:	2302      	movs	r3, #2
 8002344:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8002346:	f107 030c 	add.w	r3, r7, #12
 800234a:	4619      	mov	r1, r3
 800234c:	4827      	ldr	r0, [pc, #156]	@ (80023ec <LCD_IO_Init+0xe8>)
 800234e:	f001 fdd3 	bl	8003ef8 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	607b      	str	r3, [r7, #4]
 8002356:	4b24      	ldr	r3, [pc, #144]	@ (80023e8 <LCD_IO_Init+0xe4>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235a:	4a23      	ldr	r2, [pc, #140]	@ (80023e8 <LCD_IO_Init+0xe4>)
 800235c:	f043 0308 	orr.w	r3, r3, #8
 8002360:	6313      	str	r3, [r2, #48]	@ 0x30
 8002362:	4b21      	ldr	r3, [pc, #132]	@ (80023e8 <LCD_IO_Init+0xe4>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	607b      	str	r3, [r7, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 800236e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002372:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002374:	2301      	movs	r3, #1
 8002376:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800237c:	2302      	movs	r3, #2
 800237e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002380:	f107 030c 	add.w	r3, r7, #12
 8002384:	4619      	mov	r1, r3
 8002386:	4819      	ldr	r0, [pc, #100]	@ (80023ec <LCD_IO_Init+0xe8>)
 8002388:	f001 fdb6 	bl	8003ef8 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 800238c:	2300      	movs	r3, #0
 800238e:	603b      	str	r3, [r7, #0]
 8002390:	4b15      	ldr	r3, [pc, #84]	@ (80023e8 <LCD_IO_Init+0xe4>)
 8002392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002394:	4a14      	ldr	r2, [pc, #80]	@ (80023e8 <LCD_IO_Init+0xe4>)
 8002396:	f043 0304 	orr.w	r3, r3, #4
 800239a:	6313      	str	r3, [r2, #48]	@ 0x30
 800239c:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <LCD_IO_Init+0xe4>)
 800239e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	603b      	str	r3, [r7, #0]
 80023a6:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80023a8:	2304      	movs	r3, #4
 80023aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80023ac:	2301      	movs	r3, #1
 80023ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80023b0:	2300      	movs	r3, #0
 80023b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80023b4:	2302      	movs	r3, #2
 80023b6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80023b8:	f107 030c 	add.w	r3, r7, #12
 80023bc:	4619      	mov	r1, r3
 80023be:	480c      	ldr	r0, [pc, #48]	@ (80023f0 <LCD_IO_Init+0xec>)
 80023c0:	f001 fd9a 	bl	8003ef8 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80023c4:	2200      	movs	r2, #0
 80023c6:	2104      	movs	r1, #4
 80023c8:	4809      	ldr	r0, [pc, #36]	@ (80023f0 <LCD_IO_Init+0xec>)
 80023ca:	f002 f865 	bl	8004498 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80023ce:	2201      	movs	r2, #1
 80023d0:	2104      	movs	r1, #4
 80023d2:	4807      	ldr	r0, [pc, #28]	@ (80023f0 <LCD_IO_Init+0xec>)
 80023d4:	f002 f860 	bl	8004498 <HAL_GPIO_WritePin>

    SPI_Init();
 80023d8:	f7ff fef6 	bl	80021c8 <SPI_Init>
  }
}
 80023dc:	bf00      	nop
 80023de:	3720      	adds	r7, #32
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	20025a80 	.word	0x20025a80
 80023e8:	40023800 	.word	0x40023800
 80023ec:	40020c00 	.word	0x40020c00
 80023f0:	40020800 	.word	0x40020800

080023f4 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 80023fe:	2201      	movs	r2, #1
 8002400:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002404:	480a      	ldr	r0, [pc, #40]	@ (8002430 <LCD_IO_WriteData+0x3c>)
 8002406:	f002 f847 	bl	8004498 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 800240a:	2200      	movs	r2, #0
 800240c:	2104      	movs	r1, #4
 800240e:	4809      	ldr	r0, [pc, #36]	@ (8002434 <LCD_IO_WriteData+0x40>)
 8002410:	f002 f842 	bl	8004498 <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 8002414:	88fb      	ldrh	r3, [r7, #6]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff ff10 	bl	800223c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800241c:	2201      	movs	r2, #1
 800241e:	2104      	movs	r1, #4
 8002420:	4804      	ldr	r0, [pc, #16]	@ (8002434 <LCD_IO_WriteData+0x40>)
 8002422:	f002 f839 	bl	8004498 <HAL_GPIO_WritePin>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40020c00 	.word	0x40020c00
 8002434:	40020800 	.word	0x40020800

08002438 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8002442:	2200      	movs	r2, #0
 8002444:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002448:	480a      	ldr	r0, [pc, #40]	@ (8002474 <LCD_IO_WriteReg+0x3c>)
 800244a:	f002 f825 	bl	8004498 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800244e:	2200      	movs	r2, #0
 8002450:	2104      	movs	r1, #4
 8002452:	4809      	ldr	r0, [pc, #36]	@ (8002478 <LCD_IO_WriteReg+0x40>)
 8002454:	f002 f820 	bl	8004498 <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	b29b      	uxth	r3, r3
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff feed 	bl	800223c <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002462:	2201      	movs	r2, #1
 8002464:	2104      	movs	r1, #4
 8002466:	4804      	ldr	r0, [pc, #16]	@ (8002478 <LCD_IO_WriteReg+0x40>)
 8002468:	f002 f816 	bl	8004498 <HAL_GPIO_WritePin>
}
 800246c:	bf00      	nop
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40020c00 	.word	0x40020c00
 8002478:	40020800 	.word	0x40020800

0800247c <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f001 fb8b 	bl	8003ba0 <HAL_Delay>
}
 800248a:	bf00      	nop
 800248c:	3708      	adds	r7, #8
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 800249a:	f005 fc57 	bl	8007d4c <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800249e:	f001 fb0d 	bl	8003abc <HAL_Init>
  //applicationInit();
  /* USER CODE END Init */

  /* Configure the system clock */
  //SystemClock_Config();
  SystemClockOverride();
 80024a2:	f000 f857 	bl	8002554 <SystemClockOverride>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_GPIO_Init();
 80024a6:	f000 fa73 	bl	8002990 <MX_GPIO_Init>
  MX_LTDC_Init();
 80024aa:	f000 f8d3 	bl	8002654 <MX_LTDC_Init>
  MX_I2C3_Init();
 80024ae:	f000 f891 	bl	80025d4 <MX_I2C3_Init>
  MX_RNG_Init();
 80024b2:	f000 f981 	bl	80027b8 <MX_RNG_Init>
  MX_TIM2_Init();
 80024b6:	f000 f9cb 	bl	8002850 <MX_TIM2_Init>
  MX_SPI5_Init();
 80024ba:	f000 f993 	bl	80027e4 <MX_SPI5_Init>
  MX_TIM5_Init();
 80024be:	f000 fa17 	bl	80028f0 <MX_TIM5_Init>

  /* USER CODE BEGIN 2 */

  applicationInit();
 80024c2:	f7fe f865 	bl	8000590 <applicationInit>
  uint32_t eventsToRun;
  START_SCREEN();
 80024c6:	f7fe fbdd 	bl	8000c84 <START_SCREEN>

  /* USER CODE END 2 */

  //uint32_t game_ender = 0;
  uint8_t BUTTON_START = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	75fb      	strb	r3, [r7, #23]
  while(!BUTTON_START) {
 80024ce:	e005      	b.n	80024dc <main+0x48>
	  BUTTON_START = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0); // read button by polling
 80024d0:	2101      	movs	r1, #1
 80024d2:	481d      	ldr	r0, [pc, #116]	@ (8002548 <main+0xb4>)
 80024d4:	f001 ffc8 	bl	8004468 <HAL_GPIO_ReadPin>
 80024d8:	4603      	mov	r3, r0
 80024da:	75fb      	strb	r3, [r7, #23]
  while(!BUTTON_START) {
 80024dc:	7dfb      	ldrb	r3, [r7, #23]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f6      	beq.n	80024d0 <main+0x3c>
  }
  start_time = __HAL_TIM_GET_COUNTER(&htim5);
 80024e2:	4b1a      	ldr	r3, [pc, #104]	@ (800254c <main+0xb8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e8:	613b      	str	r3, [r7, #16]
  LCD_Clear(0, LCD_COLOR_WHITE);
 80024ea:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80024ee:	2000      	movs	r0, #0
 80024f0:	f7fe faba 	bl	8000a68 <LCD_Clear>
  addScheduledEvent(MATRIX_UPDATE_EVENT);
 80024f4:	2004      	movs	r0, #4
 80024f6:	f7ff fcdd 	bl	8001eb4 <addScheduledEvent>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80024fa:	2006      	movs	r0, #6
 80024fc:	f001 fcad 	bl	8003e5a <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim2);
 8002500:	4813      	ldr	r0, [pc, #76]	@ (8002550 <main+0xbc>)
 8002502:	f004 fdb7 	bl	8007074 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
   {
	  eventsToRun = getScheduledEvents();
 8002506:	f7ff fcc5 	bl	8001e94 <getScheduledEvents>
 800250a:	60f8      	str	r0, [r7, #12]
	  if(eventsToRun && MATRIX_UPDATE_EVENT) {printMatrix();}
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d002      	beq.n	8002518 <main+0x84>
 8002512:	f7ff fba5 	bl	8001c60 <printMatrix>
 8002516:	e7f6      	b.n	8002506 <main+0x72>
	  else {
#if cut_Mode  == 1
	  if(check_State() == 2) {
 8002518:	f7fe fd46 	bl	8000fa8 <check_State>
 800251c:	4603      	mov	r3, r0
 800251e:	2b02      	cmp	r3, #2
 8002520:	d1f1      	bne.n	8002506 <main+0x72>
		end_time = __HAL_TIM_GET_COUNTER(&htim5);
 8002522:	4b0a      	ldr	r3, [pc, #40]	@ (800254c <main+0xb8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002528:	60bb      	str	r3, [r7, #8]
		total_time = (end_time - start_time);
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	607b      	str	r3, [r7, #4]

		HAL_TIM_Base_Stop_IT(&htim2);
 8002532:	4807      	ldr	r0, [pc, #28]	@ (8002550 <main+0xbc>)
 8002534:	f004 fe0e 	bl	8007154 <HAL_TIM_Base_Stop_IT>
		HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002538:	2006      	movs	r0, #6
 800253a:	f001 fc9c 	bl	8003e76 <HAL_NVIC_DisableIRQ>

		GAME_OVER(total_time);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7fe fc4c 	bl	8000ddc <GAME_OVER>
		while(1);
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <main+0xb0>
 8002548:	40020000 	.word	0x40020000
 800254c:	20025c30 	.word	0x20025c30
 8002550:	20025be8 	.word	0x20025be8

08002554 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b092      	sub	sp, #72	@ 0x48
 8002558:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 800255a:	2300      	movs	r3, #0
 800255c:	603b      	str	r3, [r7, #0]
 800255e:	4b1c      	ldr	r3, [pc, #112]	@ (80025d0 <SystemClockOverride+0x7c>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	4a1b      	ldr	r2, [pc, #108]	@ (80025d0 <SystemClockOverride+0x7c>)
 8002564:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002568:	6413      	str	r3, [r2, #64]	@ 0x40
 800256a:	4b19      	ldr	r3, [pc, #100]	@ (80025d0 <SystemClockOverride+0x7c>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002576:	2301      	movs	r3, #1
 8002578:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800257a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800257e:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002580:	2302      	movs	r3, #2
 8002582:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002584:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002588:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 800258a:	2308      	movs	r3, #8
 800258c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 800258e:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002592:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002594:	2302      	movs	r3, #2
 8002596:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002598:	2307      	movs	r3, #7
 800259a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800259c:	1d3b      	adds	r3, r7, #4
 800259e:	4618      	mov	r0, r3
 80025a0:	f003 fb0c 	bl	8005bbc <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80025a4:	230f      	movs	r3, #15
 80025a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025a8:	2302      	movs	r3, #2
 80025aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80025ac:	2300      	movs	r3, #0
 80025ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80025b0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80025b4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80025b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025ba:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 80025bc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80025c0:	2105      	movs	r1, #5
 80025c2:	4618      	mov	r0, r3
 80025c4:	f003 fd72 	bl	80060ac <HAL_RCC_ClockConfig>
}
 80025c8:	bf00      	nop
 80025ca:	3748      	adds	r7, #72	@ 0x48
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40023800 	.word	0x40023800

080025d4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80025d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002648 <MX_I2C3_Init+0x74>)
 80025da:	4a1c      	ldr	r2, [pc, #112]	@ (800264c <MX_I2C3_Init+0x78>)
 80025dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80025de:	4b1a      	ldr	r3, [pc, #104]	@ (8002648 <MX_I2C3_Init+0x74>)
 80025e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002650 <MX_I2C3_Init+0x7c>)
 80025e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80025e4:	4b18      	ldr	r3, [pc, #96]	@ (8002648 <MX_I2C3_Init+0x74>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80025ea:	4b17      	ldr	r3, [pc, #92]	@ (8002648 <MX_I2C3_Init+0x74>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80025f0:	4b15      	ldr	r3, [pc, #84]	@ (8002648 <MX_I2C3_Init+0x74>)
 80025f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80025f6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80025f8:	4b13      	ldr	r3, [pc, #76]	@ (8002648 <MX_I2C3_Init+0x74>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80025fe:	4b12      	ldr	r3, [pc, #72]	@ (8002648 <MX_I2C3_Init+0x74>)
 8002600:	2200      	movs	r2, #0
 8002602:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002604:	4b10      	ldr	r3, [pc, #64]	@ (8002648 <MX_I2C3_Init+0x74>)
 8002606:	2200      	movs	r2, #0
 8002608:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800260a:	4b0f      	ldr	r3, [pc, #60]	@ (8002648 <MX_I2C3_Init+0x74>)
 800260c:	2200      	movs	r2, #0
 800260e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002610:	480d      	ldr	r0, [pc, #52]	@ (8002648 <MX_I2C3_Init+0x74>)
 8002612:	f001 ff8d 	bl	8004530 <HAL_I2C_Init>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	d001      	beq.n	8002620 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800261c:	f000 fb7c 	bl	8002d18 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002620:	2100      	movs	r1, #0
 8002622:	4809      	ldr	r0, [pc, #36]	@ (8002648 <MX_I2C3_Init+0x74>)
 8002624:	f002 ffa8 	bl	8005578 <HAL_I2CEx_ConfigAnalogFilter>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800262e:	f000 fb73 	bl	8002d18 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002632:	2100      	movs	r1, #0
 8002634:	4804      	ldr	r0, [pc, #16]	@ (8002648 <MX_I2C3_Init+0x74>)
 8002636:	f002 ffdb 	bl	80055f0 <HAL_I2CEx_ConfigDigitalFilter>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8002640:	f000 fb6a 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002644:	bf00      	nop
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20025a84 	.word	0x20025a84
 800264c:	40005c00 	.word	0x40005c00
 8002650:	000186a0 	.word	0x000186a0

08002654 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b09a      	sub	sp, #104	@ 0x68
 8002658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800265a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800265e:	2234      	movs	r2, #52	@ 0x34
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f005 fd22 	bl	80080ac <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8002668:	463b      	mov	r3, r7
 800266a:	2234      	movs	r2, #52	@ 0x34
 800266c:	2100      	movs	r1, #0
 800266e:	4618      	mov	r0, r3
 8002670:	f005 fd1c 	bl	80080ac <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002674:	4b4e      	ldr	r3, [pc, #312]	@ (80027b0 <MX_LTDC_Init+0x15c>)
 8002676:	4a4f      	ldr	r2, [pc, #316]	@ (80027b4 <MX_LTDC_Init+0x160>)
 8002678:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800267a:	4b4d      	ldr	r3, [pc, #308]	@ (80027b0 <MX_LTDC_Init+0x15c>)
 800267c:	2200      	movs	r2, #0
 800267e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002680:	4b4b      	ldr	r3, [pc, #300]	@ (80027b0 <MX_LTDC_Init+0x15c>)
 8002682:	2200      	movs	r2, #0
 8002684:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002686:	4b4a      	ldr	r3, [pc, #296]	@ (80027b0 <MX_LTDC_Init+0x15c>)
 8002688:	2200      	movs	r2, #0
 800268a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800268c:	4b48      	ldr	r3, [pc, #288]	@ (80027b0 <MX_LTDC_Init+0x15c>)
 800268e:	2200      	movs	r2, #0
 8002690:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8002692:	4b47      	ldr	r3, [pc, #284]	@ (80027b0 <MX_LTDC_Init+0x15c>)
 8002694:	2207      	movs	r2, #7
 8002696:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8002698:	4b45      	ldr	r3, [pc, #276]	@ (80027b0 <MX_LTDC_Init+0x15c>)
 800269a:	2203      	movs	r2, #3
 800269c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800269e:	4b44      	ldr	r3, [pc, #272]	@ (80027b0 <MX_LTDC_Init+0x15c>)
 80026a0:	220e      	movs	r2, #14
 80026a2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80026a4:	4b42      	ldr	r3, [pc, #264]	@ (80027b0 <MX_LTDC_Init+0x15c>)
 80026a6:	2205      	movs	r2, #5
 80026a8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80026aa:	4b41      	ldr	r3, [pc, #260]	@ (80027b0 <MX_LTDC_Init+0x15c>)
 80026ac:	f240 228e 	movw	r2, #654	@ 0x28e
 80026b0:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80026b2:	4b3f      	ldr	r3, [pc, #252]	@ (80027b0 <MX_LTDC_Init+0x15c>)
 80026b4:	f240 12e5 	movw	r2, #485	@ 0x1e5
 80026b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 80026ba:	4b3d      	ldr	r3, [pc, #244]	@ (80027b0 <MX_LTDC_Init+0x15c>)
 80026bc:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80026c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 80026c2:	4b3b      	ldr	r3, [pc, #236]	@ (80027b0 <MX_LTDC_Init+0x15c>)
 80026c4:	f240 12e7 	movw	r2, #487	@ 0x1e7
 80026c8:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80026ca:	4b39      	ldr	r3, [pc, #228]	@ (80027b0 <MX_LTDC_Init+0x15c>)
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80026d2:	4b37      	ldr	r3, [pc, #220]	@ (80027b0 <MX_LTDC_Init+0x15c>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80026da:	4b35      	ldr	r3, [pc, #212]	@ (80027b0 <MX_LTDC_Init+0x15c>)
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80026e2:	4833      	ldr	r0, [pc, #204]	@ (80027b0 <MX_LTDC_Init+0x15c>)
 80026e4:	f002 ffc4 	bl	8005670 <HAL_LTDC_Init>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 80026ee:	f000 fb13 	bl	8002d18 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 80026f6:	2300      	movs	r3, #0
 80026f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 80026fa:	2300      	movs	r3, #0
 80026fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002702:	2300      	movs	r3, #0
 8002704:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800270a:	2300      	movs	r3, #0
 800270c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800270e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002712:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002714:	2305      	movs	r3, #5
 8002716:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 8002720:	2300      	movs	r3, #0
 8002722:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8002724:	2300      	movs	r3, #0
 8002726:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 800272a:	2300      	movs	r3, #0
 800272c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 8002730:	2300      	movs	r3, #0
 8002732:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002736:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800273a:	2200      	movs	r2, #0
 800273c:	4619      	mov	r1, r3
 800273e:	481c      	ldr	r0, [pc, #112]	@ (80027b0 <MX_LTDC_Init+0x15c>)
 8002740:	f003 f866 	bl	8005810 <HAL_LTDC_ConfigLayer>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 800274a:	f000 fae5 	bl	8002d18 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800274e:	2300      	movs	r3, #0
 8002750:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8002752:	2300      	movs	r3, #0
 8002754:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8002766:	2300      	movs	r3, #0
 8002768:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800276a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800276e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8002770:	2305      	movs	r3, #5
 8002772:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 800277c:	2300      	movs	r3, #0
 800277e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8002792:	463b      	mov	r3, r7
 8002794:	2201      	movs	r2, #1
 8002796:	4619      	mov	r1, r3
 8002798:	4805      	ldr	r0, [pc, #20]	@ (80027b0 <MX_LTDC_Init+0x15c>)
 800279a:	f003 f839 	bl	8005810 <HAL_LTDC_ConfigLayer>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80027a4:	f000 fab8 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80027a8:	bf00      	nop
 80027aa:	3768      	adds	r7, #104	@ 0x68
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20025ad8 	.word	0x20025ad8
 80027b4:	40016800 	.word	0x40016800

080027b8 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80027bc:	4b07      	ldr	r3, [pc, #28]	@ (80027dc <MX_RNG_Init+0x24>)
 80027be:	4a08      	ldr	r2, [pc, #32]	@ (80027e0 <MX_RNG_Init+0x28>)
 80027c0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80027c2:	4806      	ldr	r0, [pc, #24]	@ (80027dc <MX_RNG_Init+0x24>)
 80027c4:	f004 f83e 	bl	8006844 <HAL_RNG_Init>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80027ce:	f000 faa3 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */
   RND_NUM();
 80027d2:	f7fe fbc1 	bl	8000f58 <RND_NUM>

  /* USER CODE END RNG_Init 2 */

}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20025b80 	.word	0x20025b80
 80027e0:	50060800 	.word	0x50060800

080027e4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 80027e8:	4b17      	ldr	r3, [pc, #92]	@ (8002848 <MX_SPI5_Init+0x64>)
 80027ea:	4a18      	ldr	r2, [pc, #96]	@ (800284c <MX_SPI5_Init+0x68>)
 80027ec:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80027ee:	4b16      	ldr	r3, [pc, #88]	@ (8002848 <MX_SPI5_Init+0x64>)
 80027f0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80027f4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80027f6:	4b14      	ldr	r3, [pc, #80]	@ (8002848 <MX_SPI5_Init+0x64>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80027fc:	4b12      	ldr	r3, [pc, #72]	@ (8002848 <MX_SPI5_Init+0x64>)
 80027fe:	2200      	movs	r2, #0
 8002800:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002802:	4b11      	ldr	r3, [pc, #68]	@ (8002848 <MX_SPI5_Init+0x64>)
 8002804:	2200      	movs	r2, #0
 8002806:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002808:	4b0f      	ldr	r3, [pc, #60]	@ (8002848 <MX_SPI5_Init+0x64>)
 800280a:	2200      	movs	r2, #0
 800280c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800280e:	4b0e      	ldr	r3, [pc, #56]	@ (8002848 <MX_SPI5_Init+0x64>)
 8002810:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002814:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002816:	4b0c      	ldr	r3, [pc, #48]	@ (8002848 <MX_SPI5_Init+0x64>)
 8002818:	2200      	movs	r2, #0
 800281a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800281c:	4b0a      	ldr	r3, [pc, #40]	@ (8002848 <MX_SPI5_Init+0x64>)
 800281e:	2200      	movs	r2, #0
 8002820:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8002822:	4b09      	ldr	r3, [pc, #36]	@ (8002848 <MX_SPI5_Init+0x64>)
 8002824:	2200      	movs	r2, #0
 8002826:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002828:	4b07      	ldr	r3, [pc, #28]	@ (8002848 <MX_SPI5_Init+0x64>)
 800282a:	2200      	movs	r2, #0
 800282c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800282e:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <MX_SPI5_Init+0x64>)
 8002830:	220a      	movs	r2, #10
 8002832:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002834:	4804      	ldr	r0, [pc, #16]	@ (8002848 <MX_SPI5_Init+0x64>)
 8002836:	f004 f885 	bl	8006944 <HAL_SPI_Init>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8002840:	f000 fa6a 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002844:	bf00      	nop
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20025b90 	.word	0x20025b90
 800284c:	40015000 	.word	0x40015000

08002850 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002856:	f107 0308 	add.w	r3, r7, #8
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	605a      	str	r2, [r3, #4]
 8002860:	609a      	str	r2, [r3, #8]
 8002862:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002864:	463b      	mov	r3, r7
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800286c:	4b1e      	ldr	r3, [pc, #120]	@ (80028e8 <MX_TIM2_Init+0x98>)
 800286e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002872:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002874:	4b1c      	ldr	r3, [pc, #112]	@ (80028e8 <MX_TIM2_Init+0x98>)
 8002876:	2200      	movs	r2, #0
 8002878:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800287a:	4b1b      	ldr	r3, [pc, #108]	@ (80028e8 <MX_TIM2_Init+0x98>)
 800287c:	2210      	movs	r2, #16
 800287e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 15999999*3;
 8002880:	4b19      	ldr	r3, [pc, #100]	@ (80028e8 <MX_TIM2_Init+0x98>)
 8002882:	4a1a      	ldr	r2, [pc, #104]	@ (80028ec <MX_TIM2_Init+0x9c>)
 8002884:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002886:	4b18      	ldr	r3, [pc, #96]	@ (80028e8 <MX_TIM2_Init+0x98>)
 8002888:	2200      	movs	r2, #0
 800288a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800288c:	4b16      	ldr	r3, [pc, #88]	@ (80028e8 <MX_TIM2_Init+0x98>)
 800288e:	2200      	movs	r2, #0
 8002890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002892:	4815      	ldr	r0, [pc, #84]	@ (80028e8 <MX_TIM2_Init+0x98>)
 8002894:	f004 fb36 	bl	8006f04 <HAL_TIM_Base_Init>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800289e:	f000 fa3b 	bl	8002d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80028a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80028a8:	f107 0308 	add.w	r3, r7, #8
 80028ac:	4619      	mov	r1, r3
 80028ae:	480e      	ldr	r0, [pc, #56]	@ (80028e8 <MX_TIM2_Init+0x98>)
 80028b0:	f004 fd6f 	bl	8007392 <HAL_TIM_ConfigClockSource>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80028ba:	f000 fa2d 	bl	8002d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028be:	2300      	movs	r3, #0
 80028c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028c2:	2300      	movs	r3, #0
 80028c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028c6:	463b      	mov	r3, r7
 80028c8:	4619      	mov	r1, r3
 80028ca:	4807      	ldr	r0, [pc, #28]	@ (80028e8 <MX_TIM2_Init+0x98>)
 80028cc:	f004 ff96 	bl	80077fc <HAL_TIMEx_MasterConfigSynchronization>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80028d6:	f000 fa1f 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Stop_IT(&htim2);
 80028da:	4803      	ldr	r0, [pc, #12]	@ (80028e8 <MX_TIM2_Init+0x98>)
 80028dc:	f004 fc3a 	bl	8007154 <HAL_TIM_Base_Stop_IT>
      Error_Handler(); // Handle errors appropriately
  }
  */
  /* USER CODE END TIM2_Init 2 */

}
 80028e0:	bf00      	nop
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20025be8 	.word	0x20025be8
 80028ec:	02dc6bfd 	.word	0x02dc6bfd

080028f0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80028f6:	f107 0308 	add.w	r3, r7, #8
 80028fa:	2200      	movs	r2, #0
 80028fc:	601a      	str	r2, [r3, #0]
 80028fe:	605a      	str	r2, [r3, #4]
 8002900:	609a      	str	r2, [r3, #8]
 8002902:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002904:	463b      	mov	r3, r7
 8002906:	2200      	movs	r2, #0
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800290c:	4b1e      	ldr	r3, [pc, #120]	@ (8002988 <MX_TIM5_Init+0x98>)
 800290e:	4a1f      	ldr	r2, [pc, #124]	@ (800298c <MX_TIM5_Init+0x9c>)
 8002910:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8002912:	4b1d      	ldr	r3, [pc, #116]	@ (8002988 <MX_TIM5_Init+0x98>)
 8002914:	2200      	movs	r2, #0
 8002916:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002918:	4b1b      	ldr	r3, [pc, #108]	@ (8002988 <MX_TIM5_Init+0x98>)
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800291e:	4b1a      	ldr	r3, [pc, #104]	@ (8002988 <MX_TIM5_Init+0x98>)
 8002920:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002924:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002926:	4b18      	ldr	r3, [pc, #96]	@ (8002988 <MX_TIM5_Init+0x98>)
 8002928:	2200      	movs	r2, #0
 800292a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800292c:	4b16      	ldr	r3, [pc, #88]	@ (8002988 <MX_TIM5_Init+0x98>)
 800292e:	2200      	movs	r2, #0
 8002930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002932:	4815      	ldr	r0, [pc, #84]	@ (8002988 <MX_TIM5_Init+0x98>)
 8002934:	f004 fae6 	bl	8006f04 <HAL_TIM_Base_Init>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800293e:	f000 f9eb 	bl	8002d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002942:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002946:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002948:	f107 0308 	add.w	r3, r7, #8
 800294c:	4619      	mov	r1, r3
 800294e:	480e      	ldr	r0, [pc, #56]	@ (8002988 <MX_TIM5_Init+0x98>)
 8002950:	f004 fd1f 	bl	8007392 <HAL_TIM_ConfigClockSource>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800295a:	f000 f9dd 	bl	8002d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800295e:	2300      	movs	r3, #0
 8002960:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002962:	2300      	movs	r3, #0
 8002964:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002966:	463b      	mov	r3, r7
 8002968:	4619      	mov	r1, r3
 800296a:	4807      	ldr	r0, [pc, #28]	@ (8002988 <MX_TIM5_Init+0x98>)
 800296c:	f004 ff46 	bl	80077fc <HAL_TIMEx_MasterConfigSynchronization>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8002976:	f000 f9cf 	bl	8002d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */
  HAL_TIM_Base_Start(&htim5);
 800297a:	4803      	ldr	r0, [pc, #12]	@ (8002988 <MX_TIM5_Init+0x98>)
 800297c:	f004 fb12 	bl	8006fa4 <HAL_TIM_Base_Start>
  /* USER CODE END TIM5_Init 2 */

}
 8002980:	bf00      	nop
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20025c30 	.word	0x20025c30
 800298c:	40000c00 	.word	0x40000c00

08002990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08e      	sub	sp, #56	@ 0x38
 8002994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002996:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	605a      	str	r2, [r3, #4]
 80029a0:	609a      	str	r2, [r3, #8]
 80029a2:	60da      	str	r2, [r3, #12]
 80029a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029a6:	2300      	movs	r3, #0
 80029a8:	623b      	str	r3, [r7, #32]
 80029aa:	4bb3      	ldr	r3, [pc, #716]	@ (8002c78 <MX_GPIO_Init+0x2e8>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ae:	4ab2      	ldr	r2, [pc, #712]	@ (8002c78 <MX_GPIO_Init+0x2e8>)
 80029b0:	f043 0304 	orr.w	r3, r3, #4
 80029b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029b6:	4bb0      	ldr	r3, [pc, #704]	@ (8002c78 <MX_GPIO_Init+0x2e8>)
 80029b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ba:	f003 0304 	and.w	r3, r3, #4
 80029be:	623b      	str	r3, [r7, #32]
 80029c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029c2:	2300      	movs	r3, #0
 80029c4:	61fb      	str	r3, [r7, #28]
 80029c6:	4bac      	ldr	r3, [pc, #688]	@ (8002c78 <MX_GPIO_Init+0x2e8>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ca:	4aab      	ldr	r2, [pc, #684]	@ (8002c78 <MX_GPIO_Init+0x2e8>)
 80029cc:	f043 0320 	orr.w	r3, r3, #32
 80029d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029d2:	4ba9      	ldr	r3, [pc, #676]	@ (8002c78 <MX_GPIO_Init+0x2e8>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d6:	f003 0320 	and.w	r3, r3, #32
 80029da:	61fb      	str	r3, [r7, #28]
 80029dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029de:	2300      	movs	r3, #0
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	4ba5      	ldr	r3, [pc, #660]	@ (8002c78 <MX_GPIO_Init+0x2e8>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	4aa4      	ldr	r2, [pc, #656]	@ (8002c78 <MX_GPIO_Init+0x2e8>)
 80029e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ee:	4ba2      	ldr	r3, [pc, #648]	@ (8002c78 <MX_GPIO_Init+0x2e8>)
 80029f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029f6:	61bb      	str	r3, [r7, #24]
 80029f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fa:	2300      	movs	r3, #0
 80029fc:	617b      	str	r3, [r7, #20]
 80029fe:	4b9e      	ldr	r3, [pc, #632]	@ (8002c78 <MX_GPIO_Init+0x2e8>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	4a9d      	ldr	r2, [pc, #628]	@ (8002c78 <MX_GPIO_Init+0x2e8>)
 8002a04:	f043 0301 	orr.w	r3, r3, #1
 8002a08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a0a:	4b9b      	ldr	r3, [pc, #620]	@ (8002c78 <MX_GPIO_Init+0x2e8>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	617b      	str	r3, [r7, #20]
 8002a14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	613b      	str	r3, [r7, #16]
 8002a1a:	4b97      	ldr	r3, [pc, #604]	@ (8002c78 <MX_GPIO_Init+0x2e8>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1e:	4a96      	ldr	r2, [pc, #600]	@ (8002c78 <MX_GPIO_Init+0x2e8>)
 8002a20:	f043 0302 	orr.w	r3, r3, #2
 8002a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a26:	4b94      	ldr	r3, [pc, #592]	@ (8002c78 <MX_GPIO_Init+0x2e8>)
 8002a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	613b      	str	r3, [r7, #16]
 8002a30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	4b90      	ldr	r3, [pc, #576]	@ (8002c78 <MX_GPIO_Init+0x2e8>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3a:	4a8f      	ldr	r2, [pc, #572]	@ (8002c78 <MX_GPIO_Init+0x2e8>)
 8002a3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a42:	4b8d      	ldr	r3, [pc, #564]	@ (8002c78 <MX_GPIO_Init+0x2e8>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	4b89      	ldr	r3, [pc, #548]	@ (8002c78 <MX_GPIO_Init+0x2e8>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a56:	4a88      	ldr	r2, [pc, #544]	@ (8002c78 <MX_GPIO_Init+0x2e8>)
 8002a58:	f043 0310 	orr.w	r3, r3, #16
 8002a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a5e:	4b86      	ldr	r3, [pc, #536]	@ (8002c78 <MX_GPIO_Init+0x2e8>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a62:	f003 0310 	and.w	r3, r3, #16
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	607b      	str	r3, [r7, #4]
 8002a6e:	4b82      	ldr	r3, [pc, #520]	@ (8002c78 <MX_GPIO_Init+0x2e8>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a72:	4a81      	ldr	r2, [pc, #516]	@ (8002c78 <MX_GPIO_Init+0x2e8>)
 8002a74:	f043 0308 	orr.w	r3, r3, #8
 8002a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a7a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c78 <MX_GPIO_Init+0x2e8>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	607b      	str	r3, [r7, #4]
 8002a84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8002a86:	2200      	movs	r2, #0
 8002a88:	2116      	movs	r1, #22
 8002a8a:	487c      	ldr	r0, [pc, #496]	@ (8002c7c <MX_GPIO_Init+0x2ec>)
 8002a8c:	f001 fd04 	bl	8004498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8002a90:	2200      	movs	r2, #0
 8002a92:	2180      	movs	r1, #128	@ 0x80
 8002a94:	487a      	ldr	r0, [pc, #488]	@ (8002c80 <MX_GPIO_Init+0x2f0>)
 8002a96:	f001 fcff 	bl	8004498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8002aa0:	4878      	ldr	r0, [pc, #480]	@ (8002c84 <MX_GPIO_Init+0x2f4>)
 8002aa2:	f001 fcf9 	bl	8004498 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8002aac:	4876      	ldr	r0, [pc, #472]	@ (8002c88 <MX_GPIO_Init+0x2f8>)
 8002aae:	f001 fcf3 	bl	8004498 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8002ab2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8002ab6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abc:	2300      	movs	r3, #0
 8002abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ac4:	230c      	movs	r3, #12
 8002ac6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002ac8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002acc:	4619      	mov	r1, r3
 8002ace:	486f      	ldr	r0, [pc, #444]	@ (8002c8c <MX_GPIO_Init+0x2fc>)
 8002ad0:	f001 fa12 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002adc:	2300      	movs	r3, #0
 8002ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae0:	2303      	movs	r3, #3
 8002ae2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ae4:	230c      	movs	r3, #12
 8002ae6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8002ae8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002aec:	4619      	mov	r1, r3
 8002aee:	4863      	ldr	r0, [pc, #396]	@ (8002c7c <MX_GPIO_Init+0x2ec>)
 8002af0:	f001 fa02 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8002af4:	2316      	movs	r3, #22
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002af8:	2301      	movs	r3, #1
 8002afa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afc:	2300      	movs	r3, #0
 8002afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b00:	2300      	movs	r3, #0
 8002b02:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b08:	4619      	mov	r1, r3
 8002b0a:	485c      	ldr	r0, [pc, #368]	@ (8002c7c <MX_GPIO_Init+0x2ec>)
 8002b0c:	f001 f9f4 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b10:	2301      	movs	r3, #1
 8002b12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002b14:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002b18:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002b1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b22:	4619      	mov	r1, r3
 8002b24:	4856      	ldr	r0, [pc, #344]	@ (8002c80 <MX_GPIO_Init+0x2f0>)
 8002b26:	f001 f9e7 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8002b2a:	f248 0306 	movw	r3, #32774	@ 0x8006
 8002b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002b30:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002b34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b36:	2300      	movs	r3, #0
 8002b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b3e:	4619      	mov	r1, r3
 8002b40:	484f      	ldr	r0, [pc, #316]	@ (8002c80 <MX_GPIO_Init+0x2f0>)
 8002b42:	f001 f9d9 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8002b46:	2380      	movs	r3, #128	@ 0x80
 8002b48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b52:	2300      	movs	r3, #0
 8002b54:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8002b56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4848      	ldr	r0, [pc, #288]	@ (8002c80 <MX_GPIO_Init+0x2f0>)
 8002b5e:	f001 f9cb 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8002b62:	2320      	movs	r3, #32
 8002b64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002b66:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8002b70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b74:	4619      	mov	r1, r3
 8002b76:	4841      	ldr	r0, [pc, #260]	@ (8002c7c <MX_GPIO_Init+0x2ec>)
 8002b78:	f001 f9be 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002b7c:	2304      	movs	r3, #4
 8002b7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b80:	2300      	movs	r3, #0
 8002b82:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b84:	2300      	movs	r3, #0
 8002b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002b88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	4840      	ldr	r0, [pc, #256]	@ (8002c90 <MX_GPIO_Init+0x300>)
 8002b90:	f001 f9b2 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8002b94:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002b98:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9a:	2302      	movs	r3, #2
 8002b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ba6:	230c      	movs	r3, #12
 8002ba8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002baa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4835      	ldr	r0, [pc, #212]	@ (8002c88 <MX_GPIO_Init+0x2f8>)
 8002bb2:	f001 f9a1 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8002bb6:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8002bba:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002bc8:	230c      	movs	r3, #12
 8002bca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4830      	ldr	r0, [pc, #192]	@ (8002c94 <MX_GPIO_Init+0x304>)
 8002bd4:	f001 f990 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8002bd8:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8002bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bde:	2302      	movs	r3, #2
 8002be0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be2:	2300      	movs	r3, #0
 8002be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be6:	2300      	movs	r3, #0
 8002be8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8002bea:	230c      	movs	r3, #12
 8002bec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	4826      	ldr	r0, [pc, #152]	@ (8002c90 <MX_GPIO_Init+0x300>)
 8002bf6:	f001 f97f 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8002bfa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c00:	2300      	movs	r3, #0
 8002c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8002c08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4820      	ldr	r0, [pc, #128]	@ (8002c90 <MX_GPIO_Init+0x300>)
 8002c10:	f001 f972 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8002c14:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8002c18:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c22:	2303      	movs	r3, #3
 8002c24:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c26:	230c      	movs	r3, #12
 8002c28:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4814      	ldr	r0, [pc, #80]	@ (8002c84 <MX_GPIO_Init+0x2f4>)
 8002c32:	f001 f961 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8002c36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002c3a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c40:	2300      	movs	r3, #0
 8002c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8002c44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c48:	4619      	mov	r1, r3
 8002c4a:	480e      	ldr	r0, [pc, #56]	@ (8002c84 <MX_GPIO_Init+0x2f4>)
 8002c4c:	f001 f954 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8002c50:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002c54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c56:	2301      	movs	r3, #1
 8002c58:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002c62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c66:	4619      	mov	r1, r3
 8002c68:	4806      	ldr	r0, [pc, #24]	@ (8002c84 <MX_GPIO_Init+0x2f4>)
 8002c6a:	f001 f945 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002c6e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c74:	e010      	b.n	8002c98 <MX_GPIO_Init+0x308>
 8002c76:	bf00      	nop
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	40020800 	.word	0x40020800
 8002c80:	40020000 	.word	0x40020000
 8002c84:	40020c00 	.word	0x40020c00
 8002c88:	40021800 	.word	0x40021800
 8002c8c:	40021400 	.word	0x40021400
 8002c90:	40020400 	.word	0x40020400
 8002c94:	40021000 	.word	0x40021000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c98:	2302      	movs	r3, #2
 8002c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ca4:	2307      	movs	r3, #7
 8002ca6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ca8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cac:	4619      	mov	r1, r3
 8002cae:	4817      	ldr	r0, [pc, #92]	@ (8002d0c <MX_GPIO_Init+0x37c>)
 8002cb0:	f001 f922 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8002cb4:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002cc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cca:	4619      	mov	r1, r3
 8002ccc:	4810      	ldr	r0, [pc, #64]	@ (8002d10 <MX_GPIO_Init+0x380>)
 8002cce:	f001 f913 	bl	8003ef8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8002cd2:	2360      	movs	r3, #96	@ 0x60
 8002cd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ce2:	230c      	movs	r3, #12
 8002ce4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cea:	4619      	mov	r1, r3
 8002cec:	4809      	ldr	r0, [pc, #36]	@ (8002d14 <MX_GPIO_Init+0x384>)
 8002cee:	f001 f903 	bl	8003ef8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	2006      	movs	r0, #6
 8002cf8:	f001 f893 	bl	8003e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002cfc:	2006      	movs	r0, #6
 8002cfe:	f001 f8ba 	bl	8003e76 <HAL_NVIC_DisableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d02:	bf00      	nop
 8002d04:	3738      	adds	r7, #56	@ 0x38
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	40020000 	.word	0x40020000
 8002d10:	40021800 	.word	0x40021800
 8002d14:	40020400 	.word	0x40020400

08002d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002d1c:	b672      	cpsid	i
}
 8002d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d20:	bf00      	nop
 8002d22:	e7fd      	b.n	8002d20 <Error_Handler+0x8>

08002d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	607b      	str	r3, [r7, #4]
 8002d2e:	4b10      	ldr	r3, [pc, #64]	@ (8002d70 <HAL_MspInit+0x4c>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d32:	4a0f      	ldr	r2, [pc, #60]	@ (8002d70 <HAL_MspInit+0x4c>)
 8002d34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d38:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d70 <HAL_MspInit+0x4c>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d42:	607b      	str	r3, [r7, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d46:	2300      	movs	r3, #0
 8002d48:	603b      	str	r3, [r7, #0]
 8002d4a:	4b09      	ldr	r3, [pc, #36]	@ (8002d70 <HAL_MspInit+0x4c>)
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d4e:	4a08      	ldr	r2, [pc, #32]	@ (8002d70 <HAL_MspInit+0x4c>)
 8002d50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d56:	4b06      	ldr	r3, [pc, #24]	@ (8002d70 <HAL_MspInit+0x4c>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002d62:	2007      	movs	r0, #7
 8002d64:	f001 f852 	bl	8003e0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d68:	bf00      	nop
 8002d6a:	3708      	adds	r7, #8
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40023800 	.word	0x40023800

08002d74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b08a      	sub	sp, #40	@ 0x28
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d7c:	f107 0314 	add.w	r3, r7, #20
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	605a      	str	r2, [r3, #4]
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	60da      	str	r2, [r3, #12]
 8002d8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a29      	ldr	r2, [pc, #164]	@ (8002e38 <HAL_I2C_MspInit+0xc4>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d14b      	bne.n	8002e2e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d96:	2300      	movs	r3, #0
 8002d98:	613b      	str	r3, [r7, #16]
 8002d9a:	4b28      	ldr	r3, [pc, #160]	@ (8002e3c <HAL_I2C_MspInit+0xc8>)
 8002d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d9e:	4a27      	ldr	r2, [pc, #156]	@ (8002e3c <HAL_I2C_MspInit+0xc8>)
 8002da0:	f043 0304 	orr.w	r3, r3, #4
 8002da4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002da6:	4b25      	ldr	r3, [pc, #148]	@ (8002e3c <HAL_I2C_MspInit+0xc8>)
 8002da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002daa:	f003 0304 	and.w	r3, r3, #4
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db2:	2300      	movs	r3, #0
 8002db4:	60fb      	str	r3, [r7, #12]
 8002db6:	4b21      	ldr	r3, [pc, #132]	@ (8002e3c <HAL_I2C_MspInit+0xc8>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dba:	4a20      	ldr	r2, [pc, #128]	@ (8002e3c <HAL_I2C_MspInit+0xc8>)
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dc2:	4b1e      	ldr	r3, [pc, #120]	@ (8002e3c <HAL_I2C_MspInit+0xc8>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002dce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dd4:	2312      	movs	r3, #18
 8002dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002de0:	2304      	movs	r3, #4
 8002de2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002de4:	f107 0314 	add.w	r3, r7, #20
 8002de8:	4619      	mov	r1, r3
 8002dea:	4815      	ldr	r0, [pc, #84]	@ (8002e40 <HAL_I2C_MspInit+0xcc>)
 8002dec:	f001 f884 	bl	8003ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002df0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002df4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002df6:	2312      	movs	r3, #18
 8002df8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002e02:	2304      	movs	r3, #4
 8002e04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002e06:	f107 0314 	add.w	r3, r7, #20
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	480d      	ldr	r0, [pc, #52]	@ (8002e44 <HAL_I2C_MspInit+0xd0>)
 8002e0e:	f001 f873 	bl	8003ef8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002e12:	2300      	movs	r3, #0
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	4b09      	ldr	r3, [pc, #36]	@ (8002e3c <HAL_I2C_MspInit+0xc8>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1a:	4a08      	ldr	r2, [pc, #32]	@ (8002e3c <HAL_I2C_MspInit+0xc8>)
 8002e1c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e20:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e22:	4b06      	ldr	r3, [pc, #24]	@ (8002e3c <HAL_I2C_MspInit+0xc8>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e2a:	60bb      	str	r3, [r7, #8]
 8002e2c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8002e2e:	bf00      	nop
 8002e30:	3728      	adds	r7, #40	@ 0x28
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	40005c00 	.word	0x40005c00
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40020800 	.word	0x40020800
 8002e44:	40020000 	.word	0x40020000

08002e48 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b09a      	sub	sp, #104	@ 0x68
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e50:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e64:	2230      	movs	r2, #48	@ 0x30
 8002e66:	2100      	movs	r1, #0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f005 f91f 	bl	80080ac <memset>
  if(hltdc->Instance==LTDC)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a81      	ldr	r2, [pc, #516]	@ (8003078 <HAL_LTDC_MspInit+0x230>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	f040 80fa 	bne.w	800306e <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002e7a:	2308      	movs	r3, #8
 8002e7c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002e7e:	2332      	movs	r3, #50	@ 0x32
 8002e80:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002e82:	2302      	movs	r3, #2
 8002e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002e86:	2300      	movs	r3, #0
 8002e88:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f003 fb18 	bl	80064c4 <HAL_RCCEx_PeriphCLKConfig>
 8002e94:	4603      	mov	r3, r0
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d001      	beq.n	8002e9e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8002e9a:	f7ff ff3d 	bl	8002d18 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	623b      	str	r3, [r7, #32]
 8002ea2:	4b76      	ldr	r3, [pc, #472]	@ (800307c <HAL_LTDC_MspInit+0x234>)
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea6:	4a75      	ldr	r2, [pc, #468]	@ (800307c <HAL_LTDC_MspInit+0x234>)
 8002ea8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002eac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002eae:	4b73      	ldr	r3, [pc, #460]	@ (800307c <HAL_LTDC_MspInit+0x234>)
 8002eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eb2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002eb6:	623b      	str	r3, [r7, #32]
 8002eb8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
 8002ebe:	4b6f      	ldr	r3, [pc, #444]	@ (800307c <HAL_LTDC_MspInit+0x234>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	4a6e      	ldr	r2, [pc, #440]	@ (800307c <HAL_LTDC_MspInit+0x234>)
 8002ec4:	f043 0320 	orr.w	r3, r3, #32
 8002ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eca:	4b6c      	ldr	r3, [pc, #432]	@ (800307c <HAL_LTDC_MspInit+0x234>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	61fb      	str	r3, [r7, #28]
 8002ed4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61bb      	str	r3, [r7, #24]
 8002eda:	4b68      	ldr	r3, [pc, #416]	@ (800307c <HAL_LTDC_MspInit+0x234>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	4a67      	ldr	r2, [pc, #412]	@ (800307c <HAL_LTDC_MspInit+0x234>)
 8002ee0:	f043 0301 	orr.w	r3, r3, #1
 8002ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ee6:	4b65      	ldr	r3, [pc, #404]	@ (800307c <HAL_LTDC_MspInit+0x234>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	61bb      	str	r3, [r7, #24]
 8002ef0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	4b61      	ldr	r3, [pc, #388]	@ (800307c <HAL_LTDC_MspInit+0x234>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	4a60      	ldr	r2, [pc, #384]	@ (800307c <HAL_LTDC_MspInit+0x234>)
 8002efc:	f043 0302 	orr.w	r3, r3, #2
 8002f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f02:	4b5e      	ldr	r3, [pc, #376]	@ (800307c <HAL_LTDC_MspInit+0x234>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	4b5a      	ldr	r3, [pc, #360]	@ (800307c <HAL_LTDC_MspInit+0x234>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f16:	4a59      	ldr	r2, [pc, #356]	@ (800307c <HAL_LTDC_MspInit+0x234>)
 8002f18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f1e:	4b57      	ldr	r3, [pc, #348]	@ (800307c <HAL_LTDC_MspInit+0x234>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	4b53      	ldr	r3, [pc, #332]	@ (800307c <HAL_LTDC_MspInit+0x234>)
 8002f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f32:	4a52      	ldr	r2, [pc, #328]	@ (800307c <HAL_LTDC_MspInit+0x234>)
 8002f34:	f043 0304 	orr.w	r3, r3, #4
 8002f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f3a:	4b50      	ldr	r3, [pc, #320]	@ (800307c <HAL_LTDC_MspInit+0x234>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f3e:	f003 0304 	and.w	r3, r3, #4
 8002f42:	60fb      	str	r3, [r7, #12]
 8002f44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	60bb      	str	r3, [r7, #8]
 8002f4a:	4b4c      	ldr	r3, [pc, #304]	@ (800307c <HAL_LTDC_MspInit+0x234>)
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4e:	4a4b      	ldr	r2, [pc, #300]	@ (800307c <HAL_LTDC_MspInit+0x234>)
 8002f50:	f043 0308 	orr.w	r3, r3, #8
 8002f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f56:	4b49      	ldr	r3, [pc, #292]	@ (800307c <HAL_LTDC_MspInit+0x234>)
 8002f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	60bb      	str	r3, [r7, #8]
 8002f60:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002f62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f66:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f68:	2302      	movs	r3, #2
 8002f6a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f70:	2300      	movs	r3, #0
 8002f72:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f74:	230e      	movs	r3, #14
 8002f76:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002f78:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	4840      	ldr	r0, [pc, #256]	@ (8003080 <HAL_LTDC_MspInit+0x238>)
 8002f80:	f000 ffba 	bl	8003ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002f84:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002f88:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f92:	2300      	movs	r3, #0
 8002f94:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f96:	230e      	movs	r3, #14
 8002f98:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f9a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4838      	ldr	r0, [pc, #224]	@ (8003084 <HAL_LTDC_MspInit+0x23c>)
 8002fa2:	f000 ffa9 	bl	8003ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002faa:	2302      	movs	r3, #2
 8002fac:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002fb6:	2309      	movs	r3, #9
 8002fb8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4831      	ldr	r0, [pc, #196]	@ (8003088 <HAL_LTDC_MspInit+0x240>)
 8002fc2:	f000 ff99 	bl	8003ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002fc6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002fca:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fcc:	2302      	movs	r3, #2
 8002fce:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002fd8:	230e      	movs	r3, #14
 8002fda:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fdc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002fe0:	4619      	mov	r1, r3
 8002fe2:	4829      	ldr	r0, [pc, #164]	@ (8003088 <HAL_LTDC_MspInit+0x240>)
 8002fe4:	f000 ff88 	bl	8003ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002fe8:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002fec:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fee:	2302      	movs	r3, #2
 8002ff0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002ffa:	230e      	movs	r3, #14
 8002ffc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ffe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003002:	4619      	mov	r1, r3
 8003004:	4821      	ldr	r0, [pc, #132]	@ (800308c <HAL_LTDC_MspInit+0x244>)
 8003006:	f000 ff77 	bl	8003ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800300a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800300e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003010:	2302      	movs	r3, #2
 8003012:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003014:	2300      	movs	r3, #0
 8003016:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003018:	2300      	movs	r3, #0
 800301a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800301c:	230e      	movs	r3, #14
 800301e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003020:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003024:	4619      	mov	r1, r3
 8003026:	481a      	ldr	r0, [pc, #104]	@ (8003090 <HAL_LTDC_MspInit+0x248>)
 8003028:	f000 ff66 	bl	8003ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800302c:	2348      	movs	r3, #72	@ 0x48
 800302e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003030:	2302      	movs	r3, #2
 8003032:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003034:	2300      	movs	r3, #0
 8003036:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003038:	2300      	movs	r3, #0
 800303a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800303c:	230e      	movs	r3, #14
 800303e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003040:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003044:	4619      	mov	r1, r3
 8003046:	4813      	ldr	r0, [pc, #76]	@ (8003094 <HAL_LTDC_MspInit+0x24c>)
 8003048:	f000 ff56 	bl	8003ef8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800304c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003050:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003052:	2302      	movs	r3, #2
 8003054:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003056:	2300      	movs	r3, #0
 8003058:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800305a:	2300      	movs	r3, #0
 800305c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800305e:	2309      	movs	r3, #9
 8003060:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003062:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003066:	4619      	mov	r1, r3
 8003068:	4808      	ldr	r0, [pc, #32]	@ (800308c <HAL_LTDC_MspInit+0x244>)
 800306a:	f000 ff45 	bl	8003ef8 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 800306e:	bf00      	nop
 8003070:	3768      	adds	r7, #104	@ 0x68
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40016800 	.word	0x40016800
 800307c:	40023800 	.word	0x40023800
 8003080:	40021400 	.word	0x40021400
 8003084:	40020000 	.word	0x40020000
 8003088:	40020400 	.word	0x40020400
 800308c:	40021800 	.word	0x40021800
 8003090:	40020800 	.word	0x40020800
 8003094:	40020c00 	.word	0x40020c00

08003098 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a0b      	ldr	r2, [pc, #44]	@ (80030d4 <HAL_RNG_MspInit+0x3c>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d10d      	bne.n	80030c6 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	4b0a      	ldr	r3, [pc, #40]	@ (80030d8 <HAL_RNG_MspInit+0x40>)
 80030b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030b2:	4a09      	ldr	r2, [pc, #36]	@ (80030d8 <HAL_RNG_MspInit+0x40>)
 80030b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030b8:	6353      	str	r3, [r2, #52]	@ 0x34
 80030ba:	4b07      	ldr	r3, [pc, #28]	@ (80030d8 <HAL_RNG_MspInit+0x40>)
 80030bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 80030c6:	bf00      	nop
 80030c8:	3714      	adds	r7, #20
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	50060800 	.word	0x50060800
 80030d8:	40023800 	.word	0x40023800

080030dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b08a      	sub	sp, #40	@ 0x28
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e4:	f107 0314 	add.w	r3, r7, #20
 80030e8:	2200      	movs	r2, #0
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	605a      	str	r2, [r3, #4]
 80030ee:	609a      	str	r2, [r3, #8]
 80030f0:	60da      	str	r2, [r3, #12]
 80030f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a19      	ldr	r2, [pc, #100]	@ (8003160 <HAL_SPI_MspInit+0x84>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d12c      	bne.n	8003158 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80030fe:	2300      	movs	r3, #0
 8003100:	613b      	str	r3, [r7, #16]
 8003102:	4b18      	ldr	r3, [pc, #96]	@ (8003164 <HAL_SPI_MspInit+0x88>)
 8003104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003106:	4a17      	ldr	r2, [pc, #92]	@ (8003164 <HAL_SPI_MspInit+0x88>)
 8003108:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800310c:	6453      	str	r3, [r2, #68]	@ 0x44
 800310e:	4b15      	ldr	r3, [pc, #84]	@ (8003164 <HAL_SPI_MspInit+0x88>)
 8003110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003112:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003116:	613b      	str	r3, [r7, #16]
 8003118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800311a:	2300      	movs	r3, #0
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	4b11      	ldr	r3, [pc, #68]	@ (8003164 <HAL_SPI_MspInit+0x88>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	4a10      	ldr	r2, [pc, #64]	@ (8003164 <HAL_SPI_MspInit+0x88>)
 8003124:	f043 0320 	orr.w	r3, r3, #32
 8003128:	6313      	str	r3, [r2, #48]	@ 0x30
 800312a:	4b0e      	ldr	r3, [pc, #56]	@ (8003164 <HAL_SPI_MspInit+0x88>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312e:	f003 0320 	and.w	r3, r3, #32
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8003136:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800313a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800313c:	2302      	movs	r3, #2
 800313e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003140:	2300      	movs	r3, #0
 8003142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003144:	2300      	movs	r3, #0
 8003146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003148:	2305      	movs	r3, #5
 800314a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800314c:	f107 0314 	add.w	r3, r7, #20
 8003150:	4619      	mov	r1, r3
 8003152:	4805      	ldr	r0, [pc, #20]	@ (8003168 <HAL_SPI_MspInit+0x8c>)
 8003154:	f000 fed0 	bl	8003ef8 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8003158:	bf00      	nop
 800315a:	3728      	adds	r7, #40	@ 0x28
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40015000 	.word	0x40015000
 8003164:	40023800 	.word	0x40023800
 8003168:	40021400 	.word	0x40021400

0800316c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a08      	ldr	r2, [pc, #32]	@ (800319c <HAL_SPI_MspDeInit+0x30>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d10a      	bne.n	8003194 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800317e:	4b08      	ldr	r3, [pc, #32]	@ (80031a0 <HAL_SPI_MspDeInit+0x34>)
 8003180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003182:	4a07      	ldr	r2, [pc, #28]	@ (80031a0 <HAL_SPI_MspDeInit+0x34>)
 8003184:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8003188:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800318a:	f44f 7160 	mov.w	r1, #896	@ 0x380
 800318e:	4805      	ldr	r0, [pc, #20]	@ (80031a4 <HAL_SPI_MspDeInit+0x38>)
 8003190:	f001 f85e 	bl	8004250 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8003194:	bf00      	nop
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	40015000 	.word	0x40015000
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40021400 	.word	0x40021400

080031a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031b8:	d116      	bne.n	80031e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031ba:	2300      	movs	r3, #0
 80031bc:	60fb      	str	r3, [r7, #12]
 80031be:	4b16      	ldr	r3, [pc, #88]	@ (8003218 <HAL_TIM_Base_MspInit+0x70>)
 80031c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c2:	4a15      	ldr	r2, [pc, #84]	@ (8003218 <HAL_TIM_Base_MspInit+0x70>)
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80031ca:	4b13      	ldr	r3, [pc, #76]	@ (8003218 <HAL_TIM_Base_MspInit+0x70>)
 80031cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80031d6:	2200      	movs	r2, #0
 80031d8:	2100      	movs	r1, #0
 80031da:	201c      	movs	r0, #28
 80031dc:	f000 fe21 	bl	8003e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031e0:	201c      	movs	r0, #28
 80031e2:	f000 fe3a 	bl	8003e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80031e6:	e012      	b.n	800320e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a0b      	ldr	r2, [pc, #44]	@ (800321c <HAL_TIM_Base_MspInit+0x74>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d10d      	bne.n	800320e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	4b08      	ldr	r3, [pc, #32]	@ (8003218 <HAL_TIM_Base_MspInit+0x70>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fa:	4a07      	ldr	r2, [pc, #28]	@ (8003218 <HAL_TIM_Base_MspInit+0x70>)
 80031fc:	f043 0308 	orr.w	r3, r3, #8
 8003200:	6413      	str	r3, [r2, #64]	@ 0x40
 8003202:	4b05      	ldr	r3, [pc, #20]	@ (8003218 <HAL_TIM_Base_MspInit+0x70>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	68bb      	ldr	r3, [r7, #8]
}
 800320e:	bf00      	nop
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40023800 	.word	0x40023800
 800321c:	40000c00 	.word	0x40000c00

08003220 <HAL_GPIO_EXTI_Callback>:

}

/* USER CODE BEGIN 1 */
// Interrupt callback function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) {  // Button pin
 800322a:	88fb      	ldrh	r3, [r7, #6]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d105      	bne.n	800323c <HAL_GPIO_EXTI_Callback+0x1c>
    	// rotate stuff
    	Matrix_clear();
 8003230:	f7fe fda0 	bl	8001d74 <Matrix_clear>
    	transform_rotation();
 8003234:	f7fe f8ca 	bl	80013cc <transform_rotation>
    	Matrix_update();
 8003238:	f7fe fde4 	bl	8001e04 <Matrix_update>
    }
}
 800323c:	bf00      	nop
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <HAL_TIM_PeriodElapsedCallback>:

// Interrupt callback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003254:	d101      	bne.n	800325a <HAL_TIM_PeriodElapsedCallback+0x16>
    	tick_Matrix();
 8003256:	f7fe f885 	bl	8001364 <tick_Matrix>
    }
}
 800325a:	bf00      	nop
 800325c:	3708      	adds	r7, #8
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003262:	b480      	push	{r7}
 8003264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003266:	bf00      	nop
 8003268:	e7fd      	b.n	8003266 <NMI_Handler+0x4>

0800326a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800326a:	b480      	push	{r7}
 800326c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800326e:	bf00      	nop
 8003270:	e7fd      	b.n	800326e <HardFault_Handler+0x4>

08003272 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003272:	b480      	push	{r7}
 8003274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003276:	bf00      	nop
 8003278:	e7fd      	b.n	8003276 <MemManage_Handler+0x4>

0800327a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800327a:	b480      	push	{r7}
 800327c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800327e:	bf00      	nop
 8003280:	e7fd      	b.n	800327e <BusFault_Handler+0x4>

08003282 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003282:	b480      	push	{r7}
 8003284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003286:	bf00      	nop
 8003288:	e7fd      	b.n	8003286 <UsageFault_Handler+0x4>

0800328a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800328a:	b480      	push	{r7}
 800328c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800328e:	bf00      	nop
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800329c:	bf00      	nop
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032a6:	b480      	push	{r7}
 80032a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032aa:	bf00      	nop
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032b8:	f000 fc52 	bl	8003b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032bc:	bf00      	nop
 80032be:	bd80      	pop	{r7, pc}

080032c0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80032c4:	2001      	movs	r0, #1
 80032c6:	f001 f91b 	bl	8004500 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80032ca:	bf00      	nop
 80032cc:	bd80      	pop	{r7, pc}
	...

080032d0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  //Matrix_update();
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80032d4:	4802      	ldr	r0, [pc, #8]	@ (80032e0 <TIM2_IRQHandler+0x10>)
 80032d6:	f003 ff6c 	bl	80071b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	20025be8 	.word	0x20025be8

080032e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	db0b      	blt.n	800330e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	f003 021f 	and.w	r2, r3, #31
 80032fc:	4907      	ldr	r1, [pc, #28]	@ (800331c <__NVIC_EnableIRQ+0x38>)
 80032fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	2001      	movs	r0, #1
 8003306:	fa00 f202 	lsl.w	r2, r0, r2
 800330a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	e000e100 	.word	0xe000e100

08003320 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports
    I2C3_MspInit();
 8003326:	f000 f9e1 	bl	80036ec <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 800332a:	f000 f9a1 	bl	8003670 <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800332e:	2202      	movs	r2, #2
 8003330:	2103      	movs	r1, #3
 8003332:	2082      	movs	r0, #130	@ 0x82
 8003334:	f000 fa2e 	bl	8003794 <I2C3_Write>
    HAL_Delay(5);
 8003338:	2005      	movs	r0, #5
 800333a:	f000 fc31 	bl	8003ba0 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800333e:	2200      	movs	r2, #0
 8003340:	2103      	movs	r1, #3
 8003342:	2082      	movs	r0, #130	@ 0x82
 8003344:	f000 fa26 	bl	8003794 <I2C3_Write>
    HAL_Delay(2);
 8003348:	2002      	movs	r0, #2
 800334a:	f000 fc29 	bl	8003ba0 <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 800334e:	1cba      	adds	r2, r7, #2
 8003350:	2302      	movs	r3, #2
 8003352:	2100      	movs	r1, #0
 8003354:	2082      	movs	r0, #130	@ 0x82
 8003356:	f000 fa6d 	bl	8003834 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 800335a:	887b      	ldrh	r3, [r7, #2]
 800335c:	021b      	lsls	r3, r3, #8
 800335e:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8003360:	887b      	ldrh	r3, [r7, #2]
 8003362:	0a1b      	lsrs	r3, r3, #8
 8003364:	b29a      	uxth	r2, r3
 8003366:	88fb      	ldrh	r3, [r7, #6]
 8003368:	4313      	orrs	r3, r2
 800336a:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 800336c:	88fb      	ldrh	r3, [r7, #6]
 800336e:	f640 0211 	movw	r2, #2065	@ 0x811
 8003372:	4293      	cmp	r3, r2
 8003374:	d001      	beq.n	800337a <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8003376:	2303      	movs	r3, #3
 8003378:	e095      	b.n	80034a6 <STMPE811_Init+0x186>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800337a:	2202      	movs	r2, #2
 800337c:	2103      	movs	r1, #3
 800337e:	2082      	movs	r0, #130	@ 0x82
 8003380:	f000 fa08 	bl	8003794 <I2C3_Write>
    HAL_Delay(5);
 8003384:	2005      	movs	r0, #5
 8003386:	f000 fc0b 	bl	8003ba0 <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 800338a:	2200      	movs	r2, #0
 800338c:	2103      	movs	r1, #3
 800338e:	2082      	movs	r0, #130	@ 0x82
 8003390:	f000 fa00 	bl	8003794 <I2C3_Write>
    HAL_Delay(2);
 8003394:	2002      	movs	r0, #2
 8003396:	f000 fc03 	bl	8003ba0 <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 800339a:	2004      	movs	r0, #4
 800339c:	f000 f887 	bl	80034ae <STMPE811_Read>
 80033a0:	4603      	mov	r3, r0
 80033a2:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 80033a4:	797b      	ldrb	r3, [r7, #5]
 80033a6:	f023 0301 	bic.w	r3, r3, #1
 80033aa:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80033ac:	797b      	ldrb	r3, [r7, #5]
 80033ae:	461a      	mov	r2, r3
 80033b0:	2104      	movs	r1, #4
 80033b2:	2082      	movs	r0, #130	@ 0x82
 80033b4:	f000 f9ee 	bl	8003794 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80033b8:	2004      	movs	r0, #4
 80033ba:	f000 f878 	bl	80034ae <STMPE811_Read>
 80033be:	4603      	mov	r3, r0
 80033c0:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 80033c2:	797b      	ldrb	r3, [r7, #5]
 80033c4:	f023 0302 	bic.w	r3, r3, #2
 80033c8:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80033ca:	797b      	ldrb	r3, [r7, #5]
 80033cc:	461a      	mov	r2, r3
 80033ce:	2104      	movs	r1, #4
 80033d0:	2082      	movs	r0, #130	@ 0x82
 80033d2:	f000 f9df 	bl	8003794 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80033d6:	2249      	movs	r2, #73	@ 0x49
 80033d8:	2120      	movs	r1, #32
 80033da:	2082      	movs	r0, #130	@ 0x82
 80033dc:	f000 f9da 	bl	8003794 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 80033e0:	2002      	movs	r0, #2
 80033e2:	f000 fbdd 	bl	8003ba0 <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 80033e6:	2201      	movs	r2, #1
 80033e8:	2121      	movs	r1, #33	@ 0x21
 80033ea:	2082      	movs	r0, #130	@ 0x82
 80033ec:	f000 f9d2 	bl	8003794 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 80033f0:	2017      	movs	r0, #23
 80033f2:	f000 f85c 	bl	80034ae <STMPE811_Read>
 80033f6:	4603      	mov	r3, r0
 80033f8:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 80033fa:	797b      	ldrb	r3, [r7, #5]
 80033fc:	f043 031e 	orr.w	r3, r3, #30
 8003400:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8003402:	797b      	ldrb	r3, [r7, #5]
 8003404:	461a      	mov	r2, r3
 8003406:	2117      	movs	r1, #23
 8003408:	2082      	movs	r0, #130	@ 0x82
 800340a:	f000 f9c3 	bl	8003794 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 800340e:	229a      	movs	r2, #154	@ 0x9a
 8003410:	2141      	movs	r1, #65	@ 0x41
 8003412:	2082      	movs	r0, #130	@ 0x82
 8003414:	f000 f9be 	bl	8003794 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8003418:	2201      	movs	r2, #1
 800341a:	214a      	movs	r1, #74	@ 0x4a
 800341c:	2082      	movs	r0, #130	@ 0x82
 800341e:	f000 f9b9 	bl	8003794 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8003422:	2201      	movs	r2, #1
 8003424:	214b      	movs	r1, #75	@ 0x4b
 8003426:	2082      	movs	r0, #130	@ 0x82
 8003428:	f000 f9b4 	bl	8003794 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 800342c:	2200      	movs	r2, #0
 800342e:	214b      	movs	r1, #75	@ 0x4b
 8003430:	2082      	movs	r0, #130	@ 0x82
 8003432:	f000 f9af 	bl	8003794 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8003436:	2201      	movs	r2, #1
 8003438:	2156      	movs	r1, #86	@ 0x56
 800343a:	2082      	movs	r0, #130	@ 0x82
 800343c:	f000 f9aa 	bl	8003794 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8003440:	2201      	movs	r2, #1
 8003442:	2158      	movs	r1, #88	@ 0x58
 8003444:	2082      	movs	r0, #130	@ 0x82
 8003446:	f000 f9a5 	bl	8003794 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 800344a:	2203      	movs	r2, #3
 800344c:	2140      	movs	r1, #64	@ 0x40
 800344e:	2082      	movs	r0, #130	@ 0x82
 8003450:	f000 f9a0 	bl	8003794 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8003454:	22ff      	movs	r2, #255	@ 0xff
 8003456:	210b      	movs	r1, #11
 8003458:	2082      	movs	r0, #130	@ 0x82
 800345a:	f000 f99b 	bl	8003794 <I2C3_Write>

    /* Enable global interrupts */

    enableInterruptSupportForTouch();
 800345e:	f000 f8c1 	bl	80035e4 <enableInterruptSupportForTouch>

    mode = STMPE811_Read(STMPE811_INT_CTRL);
 8003462:	2009      	movs	r0, #9
 8003464:	f000 f823 	bl	80034ae <STMPE811_Read>
 8003468:	4603      	mov	r3, r0
 800346a:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 800346c:	797b      	ldrb	r3, [r7, #5]
 800346e:	f043 0301 	orr.w	r3, r3, #1
 8003472:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_CTRL, mode);
 8003474:	797b      	ldrb	r3, [r7, #5]
 8003476:	461a      	mov	r2, r3
 8003478:	2109      	movs	r1, #9
 800347a:	2082      	movs	r0, #130	@ 0x82
 800347c:	f000 f98a 	bl	8003794 <I2C3_Write>

    /* Enable touch interrupt */
    mode = STMPE811_Read(STMPE811_INT_EN);
 8003480:	200a      	movs	r0, #10
 8003482:	f000 f814 	bl	80034ae <STMPE811_Read>
 8003486:	4603      	mov	r3, r0
 8003488:	717b      	strb	r3, [r7, #5]
    mode |= 0x01;
 800348a:	797b      	ldrb	r3, [r7, #5]
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
 8003492:	797b      	ldrb	r3, [r7, #5]
 8003494:	461a      	mov	r2, r3
 8003496:	210a      	movs	r1, #10
 8003498:	2082      	movs	r0, #130	@ 0x82
 800349a:	f000 f97b 	bl	8003794 <I2C3_Write>

    /* Wait for 2 ms delay */
    HAL_Delay(200);
 800349e:	20c8      	movs	r0, #200	@ 0xc8
 80034a0:	f000 fb7e 	bl	8003ba0 <HAL_Delay>

    return STMPE811_State_Ok;
 80034a4:	2302      	movs	r3, #2

}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b084      	sub	sp, #16
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	4603      	mov	r3, r0
 80034b6:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 80034b8:	f107 020f 	add.w	r2, r7, #15
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	4619      	mov	r1, r3
 80034c0:	2082      	movs	r0, #130	@ 0x82
 80034c2:	f000 f991 	bl	80037e8 <I2C3_Read>

    return readData;
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	3710      	adds	r7, #16
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <STMPE811_Write>:

void STMPE811_Write(uint8_t reg, uint8_t dataToWrite)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b082      	sub	sp, #8
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	460a      	mov	r2, r1
 80034da:	71fb      	strb	r3, [r7, #7]
 80034dc:	4613      	mov	r3, r2
 80034de:	71bb      	strb	r3, [r7, #6]
    I2C3_Write(STMPE811_ADDRESS, reg, dataToWrite);
 80034e0:	79ba      	ldrb	r2, [r7, #6]
 80034e2:	79fb      	ldrb	r3, [r7, #7]
 80034e4:	4619      	mov	r1, r3
 80034e6:	2082      	movs	r0, #130	@ 0x82
 80034e8:	f000 f954 	bl	8003794 <I2C3_Write>
}
 80034ec:	bf00      	nop
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <STMPE811_DetermineTouchPosition>:

    return STMPE811_State_Released;
}

void STMPE811_DetermineTouchPosition(STMPE811_TouchData * data)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
    //Pressed
    if (data->orientation == STMPE811_Orientation_Portrait_1) {
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	799b      	ldrb	r3, [r3, #6]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d117      	bne.n	8003534 <STMPE811_DetermineTouchPosition+0x40>
        data->x = 239 - TM_STMPE811_ReadX(data->x);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f000 f9b5 	bl	8003878 <TM_STMPE811_ReadX>
 800350e:	4603      	mov	r3, r0
 8003510:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8003514:	b29a      	uxth	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	801a      	strh	r2, [r3, #0]
        data->y = 319 - TM_STMPE811_ReadY(data->y);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	885b      	ldrh	r3, [r3, #2]
 800351e:	4618      	mov	r0, r3
 8003520:	f000 fa08 	bl	8003934 <TM_STMPE811_ReadY>
 8003524:	4603      	mov	r3, r0
 8003526:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800352a:	3301      	adds	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	805a      	strh	r2, [r3, #2]
 8003532:	e048      	b.n	80035c6 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Portrait_2) {
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	799b      	ldrb	r3, [r3, #6]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d112      	bne.n	8003562 <STMPE811_DetermineTouchPosition+0x6e>
        data->x = TM_STMPE811_ReadX(data->x);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	4618      	mov	r0, r3
 8003542:	f000 f999 	bl	8003878 <TM_STMPE811_ReadX>
 8003546:	4603      	mov	r3, r0
 8003548:	461a      	mov	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	801a      	strh	r2, [r3, #0]
        data->y = TM_STMPE811_ReadY(data->y);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	885b      	ldrh	r3, [r3, #2]
 8003552:	4618      	mov	r0, r3
 8003554:	f000 f9ee 	bl	8003934 <TM_STMPE811_ReadY>
 8003558:	4603      	mov	r3, r0
 800355a:	461a      	mov	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	805a      	strh	r2, [r3, #2]
 8003560:	e031      	b.n	80035c6 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_1) {
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	799b      	ldrb	r3, [r3, #6]
 8003566:	2b02      	cmp	r3, #2
 8003568:	d115      	bne.n	8003596 <STMPE811_DetermineTouchPosition+0xa2>
        data->y = TM_STMPE811_ReadX(data->y);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	885b      	ldrh	r3, [r3, #2]
 800356e:	4618      	mov	r0, r3
 8003570:	f000 f982 	bl	8003878 <TM_STMPE811_ReadX>
 8003574:	4603      	mov	r3, r0
 8003576:	461a      	mov	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	805a      	strh	r2, [r3, #2]
        data->x = 319 - TM_STMPE811_ReadY(data->x);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f000 f9d7 	bl	8003934 <TM_STMPE811_ReadY>
 8003586:	4603      	mov	r3, r0
 8003588:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 800358c:	3301      	adds	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	801a      	strh	r2, [r3, #0]
 8003594:	e017      	b.n	80035c6 <STMPE811_DetermineTouchPosition+0xd2>
    } else if (data->orientation == STMPE811_Orientation_Landscape_2) {
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	799b      	ldrb	r3, [r3, #6]
 800359a:	2b03      	cmp	r3, #3
 800359c:	d113      	bne.n	80035c6 <STMPE811_DetermineTouchPosition+0xd2>
        data->y = 239 - TM_STMPE811_ReadX(data->x);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	881b      	ldrh	r3, [r3, #0]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 f968 	bl	8003878 <TM_STMPE811_ReadX>
 80035a8:	4603      	mov	r3, r0
 80035aa:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	805a      	strh	r2, [r3, #2]
        data->x = TM_STMPE811_ReadY(data->x);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	881b      	ldrh	r3, [r3, #0]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 f9bb 	bl	8003934 <TM_STMPE811_ReadY>
 80035be:	4603      	mov	r3, r0
 80035c0:	461a      	mov	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 80035c6:	2201      	movs	r2, #1
 80035c8:	214b      	movs	r1, #75	@ 0x4b
 80035ca:	2082      	movs	r0, #130	@ 0x82
 80035cc:	f000 f8e2 	bl	8003794 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 80035d0:	2200      	movs	r2, #0
 80035d2:	214b      	movs	r1, #75	@ 0x4b
 80035d4:	2082      	movs	r0, #130	@ 0x82
 80035d6:	f000 f8dd 	bl	8003794 <I2C3_Write>
}
 80035da:	bf00      	nop
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <enableInterruptSupportForTouch>:
    return true;
}


void enableInterruptSupportForTouch(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
    // Initialze the GPIO and enable the interrupt
    // Interrupt is on interrupt Line PA15
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ea:	2300      	movs	r3, #0
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	4b14      	ldr	r3, [pc, #80]	@ (8003640 <enableInterruptSupportForTouch+0x5c>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f2:	4a13      	ldr	r2, [pc, #76]	@ (8003640 <enableInterruptSupportForTouch+0x5c>)
 80035f4:	f043 0301 	orr.w	r3, r3, #1
 80035f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035fa:	4b11      	ldr	r3, [pc, #68]	@ (8003640 <enableInterruptSupportForTouch+0x5c>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	683b      	ldr	r3, [r7, #0]

    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003606:	1d3b      	adds	r3, r7, #4
 8003608:	2200      	movs	r2, #0
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	60da      	str	r2, [r3, #12]
 8003612:	611a      	str	r2, [r3, #16]

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003614:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003618:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800361a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800361e:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003620:	2300      	movs	r3, #0
 8003622:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003624:	2302      	movs	r3, #2
 8003626:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003628:	1d3b      	adds	r3, r7, #4
 800362a:	4619      	mov	r1, r3
 800362c:	4805      	ldr	r0, [pc, #20]	@ (8003644 <enableInterruptSupportForTouch+0x60>)
 800362e:	f000 fc63 	bl	8003ef8 <HAL_GPIO_Init>

    NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003632:	2028      	movs	r0, #40	@ 0x28
 8003634:	f7ff fe56 	bl	80032e4 <__NVIC_EnableIRQ>

}
 8003638:	bf00      	nop
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40023800 	.word	0x40023800
 8003644:	40020000 	.word	0x40020000

08003648 <verifyHAL_I2C_IS_OKAY>:


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 800364c:	4b06      	ldr	r3, [pc, #24]	@ (8003668 <verifyHAL_I2C_IS_OKAY+0x20>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d006      	beq.n	8003662 <verifyHAL_I2C_IS_OKAY+0x1a>
    {
    	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14); // Error with I2C
 8003654:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003658:	4804      	ldr	r0, [pc, #16]	@ (800366c <verifyHAL_I2C_IS_OKAY+0x24>)
 800365a:	f000 ff36 	bl	80044ca <HAL_GPIO_TogglePin>
        while(1);
 800365e:	bf00      	nop
 8003660:	e7fd      	b.n	800365e <verifyHAL_I2C_IS_OKAY+0x16>
    }
}
 8003662:	bf00      	nop
 8003664:	bd80      	pop	{r7, pc}
 8003666:	bf00      	nop
 8003668:	20025ccc 	.word	0x20025ccc
 800366c:	40021800 	.word	0x40021800

08003670 <I2C3_Init>:

static void I2C3_Init()
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8003676:	2300      	movs	r3, #0
 8003678:	603b      	str	r3, [r7, #0]
 800367a:	4b18      	ldr	r3, [pc, #96]	@ (80036dc <I2C3_Init+0x6c>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	4a17      	ldr	r2, [pc, #92]	@ (80036dc <I2C3_Init+0x6c>)
 8003680:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003684:	6413      	str	r3, [r2, #64]	@ 0x40
 8003686:	4b15      	ldr	r3, [pc, #84]	@ (80036dc <I2C3_Init+0x6c>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800368e:	603b      	str	r3, [r7, #0]
 8003690:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8003692:	4b13      	ldr	r3, [pc, #76]	@ (80036e0 <I2C3_Init+0x70>)
 8003694:	4a13      	ldr	r2, [pc, #76]	@ (80036e4 <I2C3_Init+0x74>)
 8003696:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8003698:	4b11      	ldr	r3, [pc, #68]	@ (80036e0 <I2C3_Init+0x70>)
 800369a:	4a13      	ldr	r2, [pc, #76]	@ (80036e8 <I2C3_Init+0x78>)
 800369c:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800369e:	4b10      	ldr	r3, [pc, #64]	@ (80036e0 <I2C3_Init+0x70>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 80036a4:	4b0e      	ldr	r3, [pc, #56]	@ (80036e0 <I2C3_Init+0x70>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036aa:	4b0d      	ldr	r3, [pc, #52]	@ (80036e0 <I2C3_Init+0x70>)
 80036ac:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80036b0:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 80036b2:	4b0b      	ldr	r3, [pc, #44]	@ (80036e0 <I2C3_Init+0x70>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036b8:	4b09      	ldr	r3, [pc, #36]	@ (80036e0 <I2C3_Init+0x70>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode?

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 80036be:	4808      	ldr	r0, [pc, #32]	@ (80036e0 <I2C3_Init+0x70>)
 80036c0:	f000 ff36 	bl	8004530 <HAL_I2C_Init>
 80036c4:	4603      	mov	r3, r0
 80036c6:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 80036c8:	79fb      	ldrb	r3, [r7, #7]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 80036ce:	bf00      	nop
 80036d0:	e7fd      	b.n	80036ce <I2C3_Init+0x5e>
    }
    return;
 80036d2:	bf00      	nop
}
 80036d4:	3708      	adds	r7, #8
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40023800 	.word	0x40023800
 80036e0:	20025c78 	.word	0x20025c78
 80036e4:	40005c00 	.word	0x40005c00
 80036e8:	000186a0 	.word	0x000186a0

080036ec <I2C3_MspInit>:

// GPIO Initializations
static void I2C3_MspInit(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b088      	sub	sp, #32
 80036f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036f2:	f107 030c 	add.w	r3, r7, #12
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
 80036fa:	605a      	str	r2, [r3, #4]
 80036fc:	609a      	str	r2, [r3, #8]
 80036fe:	60da      	str	r2, [r3, #12]
 8003700:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003702:	2300      	movs	r3, #0
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	4b20      	ldr	r3, [pc, #128]	@ (8003788 <I2C3_MspInit+0x9c>)
 8003708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370a:	4a1f      	ldr	r2, [pc, #124]	@ (8003788 <I2C3_MspInit+0x9c>)
 800370c:	f043 0304 	orr.w	r3, r3, #4
 8003710:	6313      	str	r3, [r2, #48]	@ 0x30
 8003712:	4b1d      	ldr	r3, [pc, #116]	@ (8003788 <I2C3_MspInit+0x9c>)
 8003714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	60bb      	str	r3, [r7, #8]
 800371c:	68bb      	ldr	r3, [r7, #8]

    // GPIOA
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800371e:	2300      	movs	r3, #0
 8003720:	607b      	str	r3, [r7, #4]
 8003722:	4b19      	ldr	r3, [pc, #100]	@ (8003788 <I2C3_MspInit+0x9c>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003726:	4a18      	ldr	r2, [pc, #96]	@ (8003788 <I2C3_MspInit+0x9c>)
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	6313      	str	r3, [r2, #48]	@ 0x30
 800372e:	4b16      	ldr	r3, [pc, #88]	@ (8003788 <I2C3_MspInit+0x9c>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	607b      	str	r3, [r7, #4]
 8003738:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800373a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800373e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003740:	2312      	movs	r3, #18
 8003742:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003744:	2300      	movs	r3, #0
 8003746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003748:	2300      	movs	r3, #0
 800374a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800374c:	2304      	movs	r3, #4
 800374e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8003750:	f107 030c 	add.w	r3, r7, #12
 8003754:	4619      	mov	r1, r3
 8003756:	480d      	ldr	r0, [pc, #52]	@ (800378c <I2C3_MspInit+0xa0>)
 8003758:	f000 fbce 	bl	8003ef8 <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 800375c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003760:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003762:	2312      	movs	r3, #18
 8003764:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376a:	2300      	movs	r3, #0
 800376c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800376e:	2304      	movs	r3, #4
 8003770:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8003772:	f107 030c 	add.w	r3, r7, #12
 8003776:	4619      	mov	r1, r3
 8003778:	4805      	ldr	r0, [pc, #20]	@ (8003790 <I2C3_MspInit+0xa4>)
 800377a:	f000 fbbd 	bl	8003ef8 <HAL_GPIO_Init>

}
 800377e:	bf00      	nop
 8003780:	3720      	adds	r7, #32
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40023800 	.word	0x40023800
 800378c:	40020800 	.word	0x40020800
 8003790:	40020000 	.word	0x40020000

08003794 <I2C3_Write>:

// This function should only be used for single BYTE transfers
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b088      	sub	sp, #32
 8003798:	af04      	add	r7, sp, #16
 800379a:	4603      	mov	r3, r0
 800379c:	80fb      	strh	r3, [r7, #6]
 800379e:	460b      	mov	r3, r1
 80037a0:	717b      	strb	r3, [r7, #5]
 80037a2:	4613      	mov	r3, r2
 80037a4:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 80037a6:	793b      	ldrb	r3, [r7, #4]
 80037a8:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call?
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80037aa:	797b      	ldrb	r3, [r7, #5]
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	88f9      	ldrh	r1, [r7, #6]
 80037b0:	4b0a      	ldr	r3, [pc, #40]	@ (80037dc <I2C3_Write+0x48>)
 80037b2:	9302      	str	r3, [sp, #8]
 80037b4:	2301      	movs	r3, #1
 80037b6:	9301      	str	r3, [sp, #4]
 80037b8:	f107 030f 	add.w	r3, r7, #15
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	2301      	movs	r3, #1
 80037c0:	4807      	ldr	r0, [pc, #28]	@ (80037e0 <I2C3_Write+0x4c>)
 80037c2:	f000 fff9 	bl	80047b8 <HAL_I2C_Mem_Write>
 80037c6:	4603      	mov	r3, r0
 80037c8:	461a      	mov	r2, r3
 80037ca:	4b06      	ldr	r3, [pc, #24]	@ (80037e4 <I2C3_Write+0x50>)
 80037cc:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 80037ce:	f7ff ff3b 	bl	8003648 <verifyHAL_I2C_IS_OKAY>
}
 80037d2:	bf00      	nop
 80037d4:	3710      	adds	r7, #16
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	0003d090 	.word	0x0003d090
 80037e0:	20025c78 	.word	0x20025c78
 80037e4:	20025ccc 	.word	0x20025ccc

080037e8 <I2C3_Read>:

// This function should only be used for single BYTE transfers
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af04      	add	r7, sp, #16
 80037ee:	4603      	mov	r3, r0
 80037f0:	603a      	str	r2, [r7, #0]
 80037f2:	71fb      	strb	r3, [r7, #7]
 80037f4:	460b      	mov	r3, r1
 80037f6:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	b299      	uxth	r1, r3
 80037fc:	79bb      	ldrb	r3, [r7, #6]
 80037fe:	b29a      	uxth	r2, r3
 8003800:	4b09      	ldr	r3, [pc, #36]	@ (8003828 <I2C3_Read+0x40>)
 8003802:	9302      	str	r3, [sp, #8]
 8003804:	2301      	movs	r3, #1
 8003806:	9301      	str	r3, [sp, #4]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	2301      	movs	r3, #1
 800380e:	4807      	ldr	r0, [pc, #28]	@ (800382c <I2C3_Read+0x44>)
 8003810:	f001 f8cc 	bl	80049ac <HAL_I2C_Mem_Read>
 8003814:	4603      	mov	r3, r0
 8003816:	461a      	mov	r2, r3
 8003818:	4b05      	ldr	r3, [pc, #20]	@ (8003830 <I2C3_Read+0x48>)
 800381a:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 800381c:	f7ff ff14 	bl	8003648 <verifyHAL_I2C_IS_OKAY>
}
 8003820:	bf00      	nop
 8003822:	3708      	adds	r7, #8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	0003d090 	.word	0x0003d090
 800382c:	20025c78 	.word	0x20025c78
 8003830:	20025ccc 	.word	0x20025ccc

08003834 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af04      	add	r7, sp, #16
 800383a:	603a      	str	r2, [r7, #0]
 800383c:	461a      	mov	r2, r3
 800383e:	4603      	mov	r3, r0
 8003840:	71fb      	strb	r3, [r7, #7]
 8003842:	460b      	mov	r3, r1
 8003844:	71bb      	strb	r3, [r7, #6]
 8003846:	4613      	mov	r3, r2
 8003848:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	b299      	uxth	r1, r3
 800384e:	79bb      	ldrb	r3, [r7, #6]
 8003850:	b29a      	uxth	r2, r3
 8003852:	4b07      	ldr	r3, [pc, #28]	@ (8003870 <I2C3_MulitByteRead+0x3c>)
 8003854:	9302      	str	r3, [sp, #8]
 8003856:	88bb      	ldrh	r3, [r7, #4]
 8003858:	9301      	str	r3, [sp, #4]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	2301      	movs	r3, #1
 8003860:	4804      	ldr	r0, [pc, #16]	@ (8003874 <I2C3_MulitByteRead+0x40>)
 8003862:	f001 f8a3 	bl	80049ac <HAL_I2C_Mem_Read>
}
 8003866:	bf00      	nop
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	0003d090 	.word	0x0003d090
 8003874:	20025c78 	.word	0x20025c78

08003878 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8003882:	204d      	movs	r0, #77	@ 0x4d
 8003884:	f7ff fe13 	bl	80034ae <STMPE811_Read>
 8003888:	4603      	mov	r3, r0
 800388a:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 800388c:	204e      	movs	r0, #78	@ 0x4e
 800388e:	f7ff fe0e 	bl	80034ae <STMPE811_Read>
 8003892:	4603      	mov	r3, r0
 8003894:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003896:	7a7b      	ldrb	r3, [r7, #9]
 8003898:	021b      	lsls	r3, r3, #8
 800389a:	b21a      	sxth	r2, r3
 800389c:	7a3b      	ldrb	r3, [r7, #8]
 800389e:	b21b      	sxth	r3, r3
 80038a0:	4313      	orrs	r3, r2
 80038a2:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 80038a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038a8:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80038ac:	4293      	cmp	r3, r2
 80038ae:	dc06      	bgt.n	80038be <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 80038b0:	89fb      	ldrh	r3, [r7, #14]
 80038b2:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 80038b6:	330c      	adds	r3, #12
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	81fb      	strh	r3, [r7, #14]
 80038bc:	e005      	b.n	80038ca <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 80038be:	89fb      	ldrh	r3, [r7, #14]
 80038c0:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 80038c4:	3308      	adds	r3, #8
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 80038ca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038ce:	4a18      	ldr	r2, [pc, #96]	@ (8003930 <TM_STMPE811_ReadX+0xb8>)
 80038d0:	fb82 1203 	smull	r1, r2, r2, r3
 80038d4:	441a      	add	r2, r3
 80038d6:	10d2      	asrs	r2, r2, #3
 80038d8:	17db      	asrs	r3, r3, #31
 80038da:	1ad3      	subs	r3, r2, r3
 80038dc:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 80038de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038e2:	2bef      	cmp	r3, #239	@ 0xef
 80038e4:	dd02      	ble.n	80038ec <TM_STMPE811_ReadX+0x74>
        val = 239;
 80038e6:	23ef      	movs	r3, #239	@ 0xef
 80038e8:	81fb      	strh	r3, [r7, #14]
 80038ea:	e005      	b.n	80038f8 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 80038ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	da01      	bge.n	80038f8 <TM_STMPE811_ReadX+0x80>
        val = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 80038f8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80038fc:	88fb      	ldrh	r3, [r7, #6]
 80038fe:	429a      	cmp	r2, r3
 8003900:	dd05      	ble.n	800390e <TM_STMPE811_ReadX+0x96>
 8003902:	89fa      	ldrh	r2, [r7, #14]
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	b29b      	uxth	r3, r3
 800390a:	b21b      	sxth	r3, r3
 800390c:	e004      	b.n	8003918 <TM_STMPE811_ReadX+0xa0>
 800390e:	89fb      	ldrh	r3, [r7, #14]
 8003910:	88fa      	ldrh	r2, [r7, #6]
 8003912:	1ad3      	subs	r3, r2, r3
 8003914:	b29b      	uxth	r3, r3
 8003916:	b21b      	sxth	r3, r3
 8003918:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 800391a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800391e:	2b04      	cmp	r3, #4
 8003920:	dd01      	ble.n	8003926 <TM_STMPE811_ReadX+0xae>
        return val;
 8003922:	89fb      	ldrh	r3, [r7, #14]
 8003924:	e000      	b.n	8003928 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8003926:	88fb      	ldrh	r3, [r7, #6]
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	88888889 	.word	0x88888889

08003934 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 800393e:	204f      	movs	r0, #79	@ 0x4f
 8003940:	f7ff fdb5 	bl	80034ae <STMPE811_Read>
 8003944:	4603      	mov	r3, r0
 8003946:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8003948:	2050      	movs	r0, #80	@ 0x50
 800394a:	f7ff fdb0 	bl	80034ae <STMPE811_Read>
 800394e:	4603      	mov	r3, r0
 8003950:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8003952:	7a7b      	ldrb	r3, [r7, #9]
 8003954:	021b      	lsls	r3, r3, #8
 8003956:	b21a      	sxth	r2, r3
 8003958:	7a3b      	ldrb	r3, [r7, #8]
 800395a:	b21b      	sxth	r3, r3
 800395c:	4313      	orrs	r3, r2
 800395e:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8003960:	89fb      	ldrh	r3, [r7, #14]
 8003962:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003966:	b29b      	uxth	r3, r3
 8003968:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 800396a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800396e:	4a19      	ldr	r2, [pc, #100]	@ (80039d4 <TM_STMPE811_ReadY+0xa0>)
 8003970:	fb82 1203 	smull	r1, r2, r2, r3
 8003974:	1052      	asrs	r2, r2, #1
 8003976:	17db      	asrs	r3, r3, #31
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 800397c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003980:	2b00      	cmp	r3, #0
 8003982:	dc02      	bgt.n	800398a <TM_STMPE811_ReadY+0x56>
        val = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	81fb      	strh	r3, [r7, #14]
 8003988:	e007      	b.n	800399a <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 800398a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800398e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003992:	db02      	blt.n	800399a <TM_STMPE811_ReadY+0x66>
        val = 319;
 8003994:	f240 133f 	movw	r3, #319	@ 0x13f
 8003998:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 800399a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800399e:	88fb      	ldrh	r3, [r7, #6]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	dd05      	ble.n	80039b0 <TM_STMPE811_ReadY+0x7c>
 80039a4:	89fa      	ldrh	r2, [r7, #14]
 80039a6:	88fb      	ldrh	r3, [r7, #6]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	b21b      	sxth	r3, r3
 80039ae:	e004      	b.n	80039ba <TM_STMPE811_ReadY+0x86>
 80039b0:	89fb      	ldrh	r3, [r7, #14]
 80039b2:	88fa      	ldrh	r2, [r7, #6]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	b21b      	sxth	r3, r3
 80039ba:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 80039bc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	dd01      	ble.n	80039c8 <TM_STMPE811_ReadY+0x94>
        return val;
 80039c4:	89fb      	ldrh	r3, [r7, #14]
 80039c6:	e000      	b.n	80039ca <TM_STMPE811_ReadY+0x96>
    }
    return y;
 80039c8:	88fb      	ldrh	r3, [r7, #6]
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	2e8ba2e9 	.word	0x2e8ba2e9

080039d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b086      	sub	sp, #24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039e0:	4a14      	ldr	r2, [pc, #80]	@ (8003a34 <_sbrk+0x5c>)
 80039e2:	4b15      	ldr	r3, [pc, #84]	@ (8003a38 <_sbrk+0x60>)
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80039ec:	4b13      	ldr	r3, [pc, #76]	@ (8003a3c <_sbrk+0x64>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d102      	bne.n	80039fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80039f4:	4b11      	ldr	r3, [pc, #68]	@ (8003a3c <_sbrk+0x64>)
 80039f6:	4a12      	ldr	r2, [pc, #72]	@ (8003a40 <_sbrk+0x68>)
 80039f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039fa:	4b10      	ldr	r3, [pc, #64]	@ (8003a3c <_sbrk+0x64>)
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4413      	add	r3, r2
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d207      	bcs.n	8003a18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a08:	f004 fb58 	bl	80080bc <__errno>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	220c      	movs	r2, #12
 8003a10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a16:	e009      	b.n	8003a2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a18:	4b08      	ldr	r3, [pc, #32]	@ (8003a3c <_sbrk+0x64>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a1e:	4b07      	ldr	r3, [pc, #28]	@ (8003a3c <_sbrk+0x64>)
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4413      	add	r3, r2
 8003a26:	4a05      	ldr	r2, [pc, #20]	@ (8003a3c <_sbrk+0x64>)
 8003a28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3718      	adds	r7, #24
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	20030000 	.word	0x20030000
 8003a38:	00000400 	.word	0x00000400
 8003a3c:	20025cd0 	.word	0x20025cd0
 8003a40:	20025ed0 	.word	0x20025ed0

08003a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a48:	4b06      	ldr	r3, [pc, #24]	@ (8003a64 <SystemInit+0x20>)
 8003a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a4e:	4a05      	ldr	r2, [pc, #20]	@ (8003a64 <SystemInit+0x20>)
 8003a50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a58:	bf00      	nop
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	e000ed00 	.word	0xe000ed00

08003a68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003a68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003aa0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a6c:	f7ff ffea 	bl	8003a44 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a70:	480c      	ldr	r0, [pc, #48]	@ (8003aa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003a72:	490d      	ldr	r1, [pc, #52]	@ (8003aa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003a74:	4a0d      	ldr	r2, [pc, #52]	@ (8003aac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a78:	e002      	b.n	8003a80 <LoopCopyDataInit>

08003a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a7e:	3304      	adds	r3, #4

08003a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a84:	d3f9      	bcc.n	8003a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a86:	4a0a      	ldr	r2, [pc, #40]	@ (8003ab0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003a88:	4c0a      	ldr	r4, [pc, #40]	@ (8003ab4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a8c:	e001      	b.n	8003a92 <LoopFillZerobss>

08003a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a90:	3204      	adds	r2, #4

08003a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a94:	d3fb      	bcc.n	8003a8e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003a96:	f004 fb17 	bl	80080c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a9a:	f7fe fcfb 	bl	8002494 <main>
  bx  lr    
 8003a9e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003aa0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8003aa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003aa8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8003aac:	0800a088 	.word	0x0800a088
  ldr r2, =_sbss
 8003ab0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8003ab4:	20025ed0 	.word	0x20025ed0

08003ab8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ab8:	e7fe      	b.n	8003ab8 <ADC_IRQHandler>
	...

08003abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8003afc <HAL_Init+0x40>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a0d      	ldr	r2, [pc, #52]	@ (8003afc <HAL_Init+0x40>)
 8003ac6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003aca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003acc:	4b0b      	ldr	r3, [pc, #44]	@ (8003afc <HAL_Init+0x40>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8003afc <HAL_Init+0x40>)
 8003ad2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ad6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ad8:	4b08      	ldr	r3, [pc, #32]	@ (8003afc <HAL_Init+0x40>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a07      	ldr	r2, [pc, #28]	@ (8003afc <HAL_Init+0x40>)
 8003ade:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ae2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ae4:	2003      	movs	r0, #3
 8003ae6:	f000 f991 	bl	8003e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aea:	2000      	movs	r0, #0
 8003aec:	f000 f808 	bl	8003b00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003af0:	f7ff f918 	bl	8002d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40023c00 	.word	0x40023c00

08003b00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b08:	4b12      	ldr	r3, [pc, #72]	@ (8003b54 <HAL_InitTick+0x54>)
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	4b12      	ldr	r3, [pc, #72]	@ (8003b58 <HAL_InitTick+0x58>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	4619      	mov	r1, r3
 8003b12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 f9b7 	bl	8003e92 <HAL_SYSTICK_Config>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e00e      	b.n	8003b4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2b0f      	cmp	r3, #15
 8003b32:	d80a      	bhi.n	8003b4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b34:	2200      	movs	r2, #0
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b3c:	f000 f971 	bl	8003e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b40:	4a06      	ldr	r2, [pc, #24]	@ (8003b5c <HAL_InitTick+0x5c>)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	e000      	b.n	8003b4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	20000010 	.word	0x20000010
 8003b58:	20000018 	.word	0x20000018
 8003b5c:	20000014 	.word	0x20000014

08003b60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b64:	4b06      	ldr	r3, [pc, #24]	@ (8003b80 <HAL_IncTick+0x20>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4b06      	ldr	r3, [pc, #24]	@ (8003b84 <HAL_IncTick+0x24>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4413      	add	r3, r2
 8003b70:	4a04      	ldr	r2, [pc, #16]	@ (8003b84 <HAL_IncTick+0x24>)
 8003b72:	6013      	str	r3, [r2, #0]
}
 8003b74:	bf00      	nop
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	20000018 	.word	0x20000018
 8003b84:	20025cd4 	.word	0x20025cd4

08003b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b8c:	4b03      	ldr	r3, [pc, #12]	@ (8003b9c <HAL_GetTick+0x14>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	20025cd4 	.word	0x20025cd4

08003ba0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ba8:	f7ff ffee 	bl	8003b88 <HAL_GetTick>
 8003bac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bb8:	d005      	beq.n	8003bc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bba:	4b0a      	ldr	r3, [pc, #40]	@ (8003be4 <HAL_Delay+0x44>)
 8003bbc:	781b      	ldrb	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003bc6:	bf00      	nop
 8003bc8:	f7ff ffde 	bl	8003b88 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d8f7      	bhi.n	8003bc8 <HAL_Delay+0x28>
  {
  }
}
 8003bd8:	bf00      	nop
 8003bda:	bf00      	nop
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20000018 	.word	0x20000018

08003be8 <__NVIC_SetPriorityGrouping>:
{
 8003be8:	b480      	push	{r7}
 8003bea:	b085      	sub	sp, #20
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8003c2c <__NVIC_SetPriorityGrouping+0x44>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003c04:	4013      	ands	r3, r2
 8003c06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003c10:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003c14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003c1a:	4a04      	ldr	r2, [pc, #16]	@ (8003c2c <__NVIC_SetPriorityGrouping+0x44>)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	60d3      	str	r3, [r2, #12]
}
 8003c20:	bf00      	nop
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr
 8003c2c:	e000ed00 	.word	0xe000ed00

08003c30 <__NVIC_GetPriorityGrouping>:
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c34:	4b04      	ldr	r3, [pc, #16]	@ (8003c48 <__NVIC_GetPriorityGrouping+0x18>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	0a1b      	lsrs	r3, r3, #8
 8003c3a:	f003 0307 	and.w	r3, r3, #7
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	e000ed00 	.word	0xe000ed00

08003c4c <__NVIC_EnableIRQ>:
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	4603      	mov	r3, r0
 8003c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	db0b      	blt.n	8003c76 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	f003 021f 	and.w	r2, r3, #31
 8003c64:	4907      	ldr	r1, [pc, #28]	@ (8003c84 <__NVIC_EnableIRQ+0x38>)
 8003c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	e000e100 	.word	0xe000e100

08003c88 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	4603      	mov	r3, r0
 8003c90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	db12      	blt.n	8003cc0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c9a:	79fb      	ldrb	r3, [r7, #7]
 8003c9c:	f003 021f 	and.w	r2, r3, #31
 8003ca0:	490a      	ldr	r1, [pc, #40]	@ (8003ccc <__NVIC_DisableIRQ+0x44>)
 8003ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ca6:	095b      	lsrs	r3, r3, #5
 8003ca8:	2001      	movs	r0, #1
 8003caa:	fa00 f202 	lsl.w	r2, r0, r2
 8003cae:	3320      	adds	r3, #32
 8003cb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003cb4:	f3bf 8f4f 	dsb	sy
}
 8003cb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003cba:	f3bf 8f6f 	isb	sy
}
 8003cbe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	e000e100 	.word	0xe000e100

08003cd0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	db0c      	blt.n	8003cfc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ce2:	79fb      	ldrb	r3, [r7, #7]
 8003ce4:	f003 021f 	and.w	r2, r3, #31
 8003ce8:	4907      	ldr	r1, [pc, #28]	@ (8003d08 <__NVIC_ClearPendingIRQ+0x38>)
 8003cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	2001      	movs	r0, #1
 8003cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8003cf6:	3360      	adds	r3, #96	@ 0x60
 8003cf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	e000e100 	.word	0xe000e100

08003d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4603      	mov	r3, r0
 8003d14:	6039      	str	r1, [r7, #0]
 8003d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	db0a      	blt.n	8003d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	b2da      	uxtb	r2, r3
 8003d24:	490c      	ldr	r1, [pc, #48]	@ (8003d58 <__NVIC_SetPriority+0x4c>)
 8003d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2a:	0112      	lsls	r2, r2, #4
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	440b      	add	r3, r1
 8003d30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d34:	e00a      	b.n	8003d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	4908      	ldr	r1, [pc, #32]	@ (8003d5c <__NVIC_SetPriority+0x50>)
 8003d3c:	79fb      	ldrb	r3, [r7, #7]
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	3b04      	subs	r3, #4
 8003d44:	0112      	lsls	r2, r2, #4
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	440b      	add	r3, r1
 8003d4a:	761a      	strb	r2, [r3, #24]
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	e000e100 	.word	0xe000e100
 8003d5c:	e000ed00 	.word	0xe000ed00

08003d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b089      	sub	sp, #36	@ 0x24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	60b9      	str	r1, [r7, #8]
 8003d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	f1c3 0307 	rsb	r3, r3, #7
 8003d7a:	2b04      	cmp	r3, #4
 8003d7c:	bf28      	it	cs
 8003d7e:	2304      	movcs	r3, #4
 8003d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	3304      	adds	r3, #4
 8003d86:	2b06      	cmp	r3, #6
 8003d88:	d902      	bls.n	8003d90 <NVIC_EncodePriority+0x30>
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	3b03      	subs	r3, #3
 8003d8e:	e000      	b.n	8003d92 <NVIC_EncodePriority+0x32>
 8003d90:	2300      	movs	r3, #0
 8003d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	43da      	mvns	r2, r3
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	401a      	ands	r2, r3
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003da8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	fa01 f303 	lsl.w	r3, r1, r3
 8003db2:	43d9      	mvns	r1, r3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db8:	4313      	orrs	r3, r2
         );
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3724      	adds	r7, #36	@ 0x24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
	...

08003dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dd8:	d301      	bcc.n	8003dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e00f      	b.n	8003dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003dde:	4a0a      	ldr	r2, [pc, #40]	@ (8003e08 <SysTick_Config+0x40>)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3b01      	subs	r3, #1
 8003de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003de6:	210f      	movs	r1, #15
 8003de8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003dec:	f7ff ff8e 	bl	8003d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003df0:	4b05      	ldr	r3, [pc, #20]	@ (8003e08 <SysTick_Config+0x40>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003df6:	4b04      	ldr	r3, [pc, #16]	@ (8003e08 <SysTick_Config+0x40>)
 8003df8:	2207      	movs	r2, #7
 8003dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	e000e010 	.word	0xe000e010

08003e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b082      	sub	sp, #8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7ff fee7 	bl	8003be8 <__NVIC_SetPriorityGrouping>
}
 8003e1a:	bf00      	nop
 8003e1c:	3708      	adds	r7, #8
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b086      	sub	sp, #24
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	4603      	mov	r3, r0
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	607a      	str	r2, [r7, #4]
 8003e2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e34:	f7ff fefc 	bl	8003c30 <__NVIC_GetPriorityGrouping>
 8003e38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	68b9      	ldr	r1, [r7, #8]
 8003e3e:	6978      	ldr	r0, [r7, #20]
 8003e40:	f7ff ff8e 	bl	8003d60 <NVIC_EncodePriority>
 8003e44:	4602      	mov	r2, r0
 8003e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e4a:	4611      	mov	r1, r2
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7ff ff5d 	bl	8003d0c <__NVIC_SetPriority>
}
 8003e52:	bf00      	nop
 8003e54:	3718      	adds	r7, #24
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}

08003e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b082      	sub	sp, #8
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	4603      	mov	r3, r0
 8003e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff feef 	bl	8003c4c <__NVIC_EnableIRQ>
}
 8003e6e:	bf00      	nop
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b082      	sub	sp, #8
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff feff 	bl	8003c88 <__NVIC_DisableIRQ>
}
 8003e8a:	bf00      	nop
 8003e8c:	3708      	adds	r7, #8
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	b082      	sub	sp, #8
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff ff94 	bl	8003dc8 <SysTick_Config>
 8003ea0:	4603      	mov	r3, r0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b082      	sub	sp, #8
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f7ff ff09 	bl	8003cd0 <__NVIC_ClearPendingIRQ>
}
 8003ebe:	bf00      	nop
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <HAL_EXTI_ClearPending>:
  *           @arg @ref EXTI_TRIGGER_RISING_FALLING
  *         This parameter is kept for compatibility with other series.
  * @retval None.
  */
void HAL_EXTI_ClearPending(EXTI_HandleTypeDef *hexti, uint32_t Edge)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f003 031f 	and.w	r3, r3, #31
 8003eda:	2201      	movs	r2, #1
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	60fb      	str	r3, [r7, #12]

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8003ee2:	4a04      	ldr	r2, [pc, #16]	@ (8003ef4 <HAL_EXTI_ClearPending+0x2c>)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6153      	str	r3, [r2, #20]
}
 8003ee8:	bf00      	nop
 8003eea:	3714      	adds	r7, #20
 8003eec:	46bd      	mov	sp, r7
 8003eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef2:	4770      	bx	lr
 8003ef4:	40013c00 	.word	0x40013c00

08003ef8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b089      	sub	sp, #36	@ 0x24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61fb      	str	r3, [r7, #28]
 8003f12:	e177      	b.n	8004204 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f14:	2201      	movs	r2, #1
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4013      	ands	r3, r2
 8003f26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	f040 8166 	bne.w	80041fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f003 0303 	and.w	r3, r3, #3
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d005      	beq.n	8003f4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d130      	bne.n	8003fac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	2203      	movs	r2, #3
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	43db      	mvns	r3, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4013      	ands	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68da      	ldr	r2, [r3, #12]
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f80:	2201      	movs	r2, #1
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	69ba      	ldr	r2, [r7, #24]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	091b      	lsrs	r3, r3, #4
 8003f96:	f003 0201 	and.w	r2, r3, #1
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f003 0303 	and.w	r3, r3, #3
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d017      	beq.n	8003fe8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	2203      	movs	r2, #3
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	43db      	mvns	r3, r3
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	4013      	ands	r3, r2
 8003fce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	005b      	lsls	r3, r3, #1
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f003 0303 	and.w	r3, r3, #3
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d123      	bne.n	800403c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	08da      	lsrs	r2, r3, #3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3208      	adds	r2, #8
 8003ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004000:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	f003 0307 	and.w	r3, r3, #7
 8004008:	009b      	lsls	r3, r3, #2
 800400a:	220f      	movs	r2, #15
 800400c:	fa02 f303 	lsl.w	r3, r2, r3
 8004010:	43db      	mvns	r3, r3
 8004012:	69ba      	ldr	r2, [r7, #24]
 8004014:	4013      	ands	r3, r2
 8004016:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	691a      	ldr	r2, [r3, #16]
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	f003 0307 	and.w	r3, r3, #7
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	fa02 f303 	lsl.w	r3, r2, r3
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	4313      	orrs	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	08da      	lsrs	r2, r3, #3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	3208      	adds	r2, #8
 8004036:	69b9      	ldr	r1, [r7, #24]
 8004038:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	005b      	lsls	r3, r3, #1
 8004046:	2203      	movs	r2, #3
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	43db      	mvns	r3, r3
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4013      	ands	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f003 0203 	and.w	r2, r3, #3
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	005b      	lsls	r3, r3, #1
 8004060:	fa02 f303 	lsl.w	r3, r2, r3
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	4313      	orrs	r3, r2
 8004068:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 80c0 	beq.w	80041fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800407e:	2300      	movs	r3, #0
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	4b66      	ldr	r3, [pc, #408]	@ (800421c <HAL_GPIO_Init+0x324>)
 8004084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004086:	4a65      	ldr	r2, [pc, #404]	@ (800421c <HAL_GPIO_Init+0x324>)
 8004088:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800408c:	6453      	str	r3, [r2, #68]	@ 0x44
 800408e:	4b63      	ldr	r3, [pc, #396]	@ (800421c <HAL_GPIO_Init+0x324>)
 8004090:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004092:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004096:	60fb      	str	r3, [r7, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800409a:	4a61      	ldr	r2, [pc, #388]	@ (8004220 <HAL_GPIO_Init+0x328>)
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	089b      	lsrs	r3, r3, #2
 80040a0:	3302      	adds	r3, #2
 80040a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	f003 0303 	and.w	r3, r3, #3
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	220f      	movs	r2, #15
 80040b2:	fa02 f303 	lsl.w	r3, r2, r3
 80040b6:	43db      	mvns	r3, r3
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4013      	ands	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a58      	ldr	r2, [pc, #352]	@ (8004224 <HAL_GPIO_Init+0x32c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d037      	beq.n	8004136 <HAL_GPIO_Init+0x23e>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a57      	ldr	r2, [pc, #348]	@ (8004228 <HAL_GPIO_Init+0x330>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d031      	beq.n	8004132 <HAL_GPIO_Init+0x23a>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a56      	ldr	r2, [pc, #344]	@ (800422c <HAL_GPIO_Init+0x334>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d02b      	beq.n	800412e <HAL_GPIO_Init+0x236>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a55      	ldr	r2, [pc, #340]	@ (8004230 <HAL_GPIO_Init+0x338>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d025      	beq.n	800412a <HAL_GPIO_Init+0x232>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a54      	ldr	r2, [pc, #336]	@ (8004234 <HAL_GPIO_Init+0x33c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d01f      	beq.n	8004126 <HAL_GPIO_Init+0x22e>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a53      	ldr	r2, [pc, #332]	@ (8004238 <HAL_GPIO_Init+0x340>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d019      	beq.n	8004122 <HAL_GPIO_Init+0x22a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a52      	ldr	r2, [pc, #328]	@ (800423c <HAL_GPIO_Init+0x344>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d013      	beq.n	800411e <HAL_GPIO_Init+0x226>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a51      	ldr	r2, [pc, #324]	@ (8004240 <HAL_GPIO_Init+0x348>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00d      	beq.n	800411a <HAL_GPIO_Init+0x222>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a50      	ldr	r2, [pc, #320]	@ (8004244 <HAL_GPIO_Init+0x34c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d007      	beq.n	8004116 <HAL_GPIO_Init+0x21e>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a4f      	ldr	r2, [pc, #316]	@ (8004248 <HAL_GPIO_Init+0x350>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d101      	bne.n	8004112 <HAL_GPIO_Init+0x21a>
 800410e:	2309      	movs	r3, #9
 8004110:	e012      	b.n	8004138 <HAL_GPIO_Init+0x240>
 8004112:	230a      	movs	r3, #10
 8004114:	e010      	b.n	8004138 <HAL_GPIO_Init+0x240>
 8004116:	2308      	movs	r3, #8
 8004118:	e00e      	b.n	8004138 <HAL_GPIO_Init+0x240>
 800411a:	2307      	movs	r3, #7
 800411c:	e00c      	b.n	8004138 <HAL_GPIO_Init+0x240>
 800411e:	2306      	movs	r3, #6
 8004120:	e00a      	b.n	8004138 <HAL_GPIO_Init+0x240>
 8004122:	2305      	movs	r3, #5
 8004124:	e008      	b.n	8004138 <HAL_GPIO_Init+0x240>
 8004126:	2304      	movs	r3, #4
 8004128:	e006      	b.n	8004138 <HAL_GPIO_Init+0x240>
 800412a:	2303      	movs	r3, #3
 800412c:	e004      	b.n	8004138 <HAL_GPIO_Init+0x240>
 800412e:	2302      	movs	r3, #2
 8004130:	e002      	b.n	8004138 <HAL_GPIO_Init+0x240>
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <HAL_GPIO_Init+0x240>
 8004136:	2300      	movs	r3, #0
 8004138:	69fa      	ldr	r2, [r7, #28]
 800413a:	f002 0203 	and.w	r2, r2, #3
 800413e:	0092      	lsls	r2, r2, #2
 8004140:	4093      	lsls	r3, r2
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	4313      	orrs	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004148:	4935      	ldr	r1, [pc, #212]	@ (8004220 <HAL_GPIO_Init+0x328>)
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	089b      	lsrs	r3, r3, #2
 800414e:	3302      	adds	r3, #2
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004156:	4b3d      	ldr	r3, [pc, #244]	@ (800424c <HAL_GPIO_Init+0x354>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	43db      	mvns	r3, r3
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4013      	ands	r3, r2
 8004164:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800417a:	4a34      	ldr	r2, [pc, #208]	@ (800424c <HAL_GPIO_Init+0x354>)
 800417c:	69bb      	ldr	r3, [r7, #24]
 800417e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004180:	4b32      	ldr	r3, [pc, #200]	@ (800424c <HAL_GPIO_Init+0x354>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	43db      	mvns	r3, r3
 800418a:	69ba      	ldr	r2, [r7, #24]
 800418c:	4013      	ands	r3, r2
 800418e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041a4:	4a29      	ldr	r2, [pc, #164]	@ (800424c <HAL_GPIO_Init+0x354>)
 80041a6:	69bb      	ldr	r3, [r7, #24]
 80041a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041aa:	4b28      	ldr	r3, [pc, #160]	@ (800424c <HAL_GPIO_Init+0x354>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	43db      	mvns	r3, r3
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	4013      	ands	r3, r2
 80041b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041ce:	4a1f      	ldr	r2, [pc, #124]	@ (800424c <HAL_GPIO_Init+0x354>)
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041d4:	4b1d      	ldr	r3, [pc, #116]	@ (800424c <HAL_GPIO_Init+0x354>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	43db      	mvns	r3, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4013      	ands	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041f8:	4a14      	ldr	r2, [pc, #80]	@ (800424c <HAL_GPIO_Init+0x354>)
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	3301      	adds	r3, #1
 8004202:	61fb      	str	r3, [r7, #28]
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	2b0f      	cmp	r3, #15
 8004208:	f67f ae84 	bls.w	8003f14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800420c:	bf00      	nop
 800420e:	bf00      	nop
 8004210:	3724      	adds	r7, #36	@ 0x24
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40023800 	.word	0x40023800
 8004220:	40013800 	.word	0x40013800
 8004224:	40020000 	.word	0x40020000
 8004228:	40020400 	.word	0x40020400
 800422c:	40020800 	.word	0x40020800
 8004230:	40020c00 	.word	0x40020c00
 8004234:	40021000 	.word	0x40021000
 8004238:	40021400 	.word	0x40021400
 800423c:	40021800 	.word	0x40021800
 8004240:	40021c00 	.word	0x40021c00
 8004244:	40022000 	.word	0x40022000
 8004248:	40022400 	.word	0x40022400
 800424c:	40013c00 	.word	0x40013c00

08004250 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800425a:	2300      	movs	r3, #0
 800425c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004262:	2300      	movs	r3, #0
 8004264:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004266:	2300      	movs	r3, #0
 8004268:	617b      	str	r3, [r7, #20]
 800426a:	e0d9      	b.n	8004420 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800426c:	2201      	movs	r2, #1
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	fa02 f303 	lsl.w	r3, r2, r3
 8004274:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	4013      	ands	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	429a      	cmp	r2, r3
 8004284:	f040 80c9 	bne.w	800441a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004288:	4a6b      	ldr	r2, [pc, #428]	@ (8004438 <HAL_GPIO_DeInit+0x1e8>)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	089b      	lsrs	r3, r3, #2
 800428e:	3302      	adds	r3, #2
 8004290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004294:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	220f      	movs	r2, #15
 80042a0:	fa02 f303 	lsl.w	r3, r2, r3
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	4013      	ands	r3, r2
 80042a8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4a63      	ldr	r2, [pc, #396]	@ (800443c <HAL_GPIO_DeInit+0x1ec>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d037      	beq.n	8004322 <HAL_GPIO_DeInit+0xd2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a62      	ldr	r2, [pc, #392]	@ (8004440 <HAL_GPIO_DeInit+0x1f0>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d031      	beq.n	800431e <HAL_GPIO_DeInit+0xce>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a61      	ldr	r2, [pc, #388]	@ (8004444 <HAL_GPIO_DeInit+0x1f4>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d02b      	beq.n	800431a <HAL_GPIO_DeInit+0xca>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a60      	ldr	r2, [pc, #384]	@ (8004448 <HAL_GPIO_DeInit+0x1f8>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d025      	beq.n	8004316 <HAL_GPIO_DeInit+0xc6>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a5f      	ldr	r2, [pc, #380]	@ (800444c <HAL_GPIO_DeInit+0x1fc>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d01f      	beq.n	8004312 <HAL_GPIO_DeInit+0xc2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a5e      	ldr	r2, [pc, #376]	@ (8004450 <HAL_GPIO_DeInit+0x200>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d019      	beq.n	800430e <HAL_GPIO_DeInit+0xbe>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a5d      	ldr	r2, [pc, #372]	@ (8004454 <HAL_GPIO_DeInit+0x204>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d013      	beq.n	800430a <HAL_GPIO_DeInit+0xba>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a5c      	ldr	r2, [pc, #368]	@ (8004458 <HAL_GPIO_DeInit+0x208>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00d      	beq.n	8004306 <HAL_GPIO_DeInit+0xb6>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a5b      	ldr	r2, [pc, #364]	@ (800445c <HAL_GPIO_DeInit+0x20c>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d007      	beq.n	8004302 <HAL_GPIO_DeInit+0xb2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a5a      	ldr	r2, [pc, #360]	@ (8004460 <HAL_GPIO_DeInit+0x210>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d101      	bne.n	80042fe <HAL_GPIO_DeInit+0xae>
 80042fa:	2309      	movs	r3, #9
 80042fc:	e012      	b.n	8004324 <HAL_GPIO_DeInit+0xd4>
 80042fe:	230a      	movs	r3, #10
 8004300:	e010      	b.n	8004324 <HAL_GPIO_DeInit+0xd4>
 8004302:	2308      	movs	r3, #8
 8004304:	e00e      	b.n	8004324 <HAL_GPIO_DeInit+0xd4>
 8004306:	2307      	movs	r3, #7
 8004308:	e00c      	b.n	8004324 <HAL_GPIO_DeInit+0xd4>
 800430a:	2306      	movs	r3, #6
 800430c:	e00a      	b.n	8004324 <HAL_GPIO_DeInit+0xd4>
 800430e:	2305      	movs	r3, #5
 8004310:	e008      	b.n	8004324 <HAL_GPIO_DeInit+0xd4>
 8004312:	2304      	movs	r3, #4
 8004314:	e006      	b.n	8004324 <HAL_GPIO_DeInit+0xd4>
 8004316:	2303      	movs	r3, #3
 8004318:	e004      	b.n	8004324 <HAL_GPIO_DeInit+0xd4>
 800431a:	2302      	movs	r3, #2
 800431c:	e002      	b.n	8004324 <HAL_GPIO_DeInit+0xd4>
 800431e:	2301      	movs	r3, #1
 8004320:	e000      	b.n	8004324 <HAL_GPIO_DeInit+0xd4>
 8004322:	2300      	movs	r3, #0
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	f002 0203 	and.w	r2, r2, #3
 800432a:	0092      	lsls	r2, r2, #2
 800432c:	4093      	lsls	r3, r2
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	429a      	cmp	r2, r3
 8004332:	d132      	bne.n	800439a <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004334:	4b4b      	ldr	r3, [pc, #300]	@ (8004464 <HAL_GPIO_DeInit+0x214>)
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	43db      	mvns	r3, r3
 800433c:	4949      	ldr	r1, [pc, #292]	@ (8004464 <HAL_GPIO_DeInit+0x214>)
 800433e:	4013      	ands	r3, r2
 8004340:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004342:	4b48      	ldr	r3, [pc, #288]	@ (8004464 <HAL_GPIO_DeInit+0x214>)
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	43db      	mvns	r3, r3
 800434a:	4946      	ldr	r1, [pc, #280]	@ (8004464 <HAL_GPIO_DeInit+0x214>)
 800434c:	4013      	ands	r3, r2
 800434e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004350:	4b44      	ldr	r3, [pc, #272]	@ (8004464 <HAL_GPIO_DeInit+0x214>)
 8004352:	68da      	ldr	r2, [r3, #12]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	43db      	mvns	r3, r3
 8004358:	4942      	ldr	r1, [pc, #264]	@ (8004464 <HAL_GPIO_DeInit+0x214>)
 800435a:	4013      	ands	r3, r2
 800435c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800435e:	4b41      	ldr	r3, [pc, #260]	@ (8004464 <HAL_GPIO_DeInit+0x214>)
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	43db      	mvns	r3, r3
 8004366:	493f      	ldr	r1, [pc, #252]	@ (8004464 <HAL_GPIO_DeInit+0x214>)
 8004368:	4013      	ands	r3, r2
 800436a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	f003 0303 	and.w	r3, r3, #3
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	220f      	movs	r2, #15
 8004376:	fa02 f303 	lsl.w	r3, r2, r3
 800437a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800437c:	4a2e      	ldr	r2, [pc, #184]	@ (8004438 <HAL_GPIO_DeInit+0x1e8>)
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	089b      	lsrs	r3, r3, #2
 8004382:	3302      	adds	r3, #2
 8004384:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	43da      	mvns	r2, r3
 800438c:	482a      	ldr	r0, [pc, #168]	@ (8004438 <HAL_GPIO_DeInit+0x1e8>)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	089b      	lsrs	r3, r3, #2
 8004392:	400a      	ands	r2, r1
 8004394:	3302      	adds	r3, #2
 8004396:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	2103      	movs	r1, #3
 80043a4:	fa01 f303 	lsl.w	r3, r1, r3
 80043a8:	43db      	mvns	r3, r3
 80043aa:	401a      	ands	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	08da      	lsrs	r2, r3, #3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3208      	adds	r2, #8
 80043b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	220f      	movs	r2, #15
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	43db      	mvns	r3, r3
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	08d2      	lsrs	r2, r2, #3
 80043d0:	4019      	ands	r1, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3208      	adds	r2, #8
 80043d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	005b      	lsls	r3, r3, #1
 80043e2:	2103      	movs	r1, #3
 80043e4:	fa01 f303 	lsl.w	r3, r1, r3
 80043e8:	43db      	mvns	r3, r3
 80043ea:	401a      	ands	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685a      	ldr	r2, [r3, #4]
 80043f4:	2101      	movs	r1, #1
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	fa01 f303 	lsl.w	r3, r1, r3
 80043fc:	43db      	mvns	r3, r3
 80043fe:	401a      	ands	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689a      	ldr	r2, [r3, #8]
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	2103      	movs	r1, #3
 800440e:	fa01 f303 	lsl.w	r3, r1, r3
 8004412:	43db      	mvns	r3, r3
 8004414:	401a      	ands	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	3301      	adds	r3, #1
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	2b0f      	cmp	r3, #15
 8004424:	f67f af22 	bls.w	800426c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8004428:	bf00      	nop
 800442a:	bf00      	nop
 800442c:	371c      	adds	r7, #28
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40013800 	.word	0x40013800
 800443c:	40020000 	.word	0x40020000
 8004440:	40020400 	.word	0x40020400
 8004444:	40020800 	.word	0x40020800
 8004448:	40020c00 	.word	0x40020c00
 800444c:	40021000 	.word	0x40021000
 8004450:	40021400 	.word	0x40021400
 8004454:	40021800 	.word	0x40021800
 8004458:	40021c00 	.word	0x40021c00
 800445c:	40022000 	.word	0x40022000
 8004460:	40022400 	.word	0x40022400
 8004464:	40013c00 	.word	0x40013c00

08004468 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	460b      	mov	r3, r1
 8004472:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	887b      	ldrh	r3, [r7, #2]
 800447a:	4013      	ands	r3, r2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004480:	2301      	movs	r3, #1
 8004482:	73fb      	strb	r3, [r7, #15]
 8004484:	e001      	b.n	800448a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004486:	2300      	movs	r3, #0
 8004488:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800448a:	7bfb      	ldrb	r3, [r7, #15]
}
 800448c:	4618      	mov	r0, r3
 800448e:	3714      	adds	r7, #20
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	460b      	mov	r3, r1
 80044a2:	807b      	strh	r3, [r7, #2]
 80044a4:	4613      	mov	r3, r2
 80044a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044a8:	787b      	ldrb	r3, [r7, #1]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044ae:	887a      	ldrh	r2, [r7, #2]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044b4:	e003      	b.n	80044be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044b6:	887b      	ldrh	r3, [r7, #2]
 80044b8:	041a      	lsls	r2, r3, #16
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	619a      	str	r2, [r3, #24]
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b085      	sub	sp, #20
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	460b      	mov	r3, r1
 80044d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80044dc:	887a      	ldrh	r2, [r7, #2]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4013      	ands	r3, r2
 80044e2:	041a      	lsls	r2, r3, #16
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	43d9      	mvns	r1, r3
 80044e8:	887b      	ldrh	r3, [r7, #2]
 80044ea:	400b      	ands	r3, r1
 80044ec:	431a      	orrs	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	619a      	str	r2, [r3, #24]
}
 80044f2:	bf00      	nop
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr
	...

08004500 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	4603      	mov	r3, r0
 8004508:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800450a:	4b08      	ldr	r3, [pc, #32]	@ (800452c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800450c:	695a      	ldr	r2, [r3, #20]
 800450e:	88fb      	ldrh	r3, [r7, #6]
 8004510:	4013      	ands	r3, r2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d006      	beq.n	8004524 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004516:	4a05      	ldr	r2, [pc, #20]	@ (800452c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004518:	88fb      	ldrh	r3, [r7, #6]
 800451a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800451c:	88fb      	ldrh	r3, [r7, #6]
 800451e:	4618      	mov	r0, r3
 8004520:	f7fe fe7e 	bl	8003220 <HAL_GPIO_EXTI_Callback>
  }
}
 8004524:	bf00      	nop
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	40013c00 	.word	0x40013c00

08004530 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e12b      	b.n	800479a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fe fc0c 	bl	8002d74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2224      	movs	r2, #36	@ 0x24
 8004560:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0201 	bic.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004582:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004592:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004594:	f001 ff82 	bl	800649c <HAL_RCC_GetPCLK1Freq>
 8004598:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	4a81      	ldr	r2, [pc, #516]	@ (80047a4 <HAL_I2C_Init+0x274>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d807      	bhi.n	80045b4 <HAL_I2C_Init+0x84>
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	4a80      	ldr	r2, [pc, #512]	@ (80047a8 <HAL_I2C_Init+0x278>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	bf94      	ite	ls
 80045ac:	2301      	movls	r3, #1
 80045ae:	2300      	movhi	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	e006      	b.n	80045c2 <HAL_I2C_Init+0x92>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4a7d      	ldr	r2, [pc, #500]	@ (80047ac <HAL_I2C_Init+0x27c>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	bf94      	ite	ls
 80045bc:	2301      	movls	r3, #1
 80045be:	2300      	movhi	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e0e7      	b.n	800479a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	4a78      	ldr	r2, [pc, #480]	@ (80047b0 <HAL_I2C_Init+0x280>)
 80045ce:	fba2 2303 	umull	r2, r3, r2, r3
 80045d2:	0c9b      	lsrs	r3, r3, #18
 80045d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	4a6a      	ldr	r2, [pc, #424]	@ (80047a4 <HAL_I2C_Init+0x274>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d802      	bhi.n	8004604 <HAL_I2C_Init+0xd4>
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	3301      	adds	r3, #1
 8004602:	e009      	b.n	8004618 <HAL_I2C_Init+0xe8>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800460a:	fb02 f303 	mul.w	r3, r2, r3
 800460e:	4a69      	ldr	r2, [pc, #420]	@ (80047b4 <HAL_I2C_Init+0x284>)
 8004610:	fba2 2303 	umull	r2, r3, r2, r3
 8004614:	099b      	lsrs	r3, r3, #6
 8004616:	3301      	adds	r3, #1
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6812      	ldr	r2, [r2, #0]
 800461c:	430b      	orrs	r3, r1
 800461e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	69db      	ldr	r3, [r3, #28]
 8004626:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800462a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	495c      	ldr	r1, [pc, #368]	@ (80047a4 <HAL_I2C_Init+0x274>)
 8004634:	428b      	cmp	r3, r1
 8004636:	d819      	bhi.n	800466c <HAL_I2C_Init+0x13c>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	1e59      	subs	r1, r3, #1
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	fbb1 f3f3 	udiv	r3, r1, r3
 8004646:	1c59      	adds	r1, r3, #1
 8004648:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800464c:	400b      	ands	r3, r1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <HAL_I2C_Init+0x138>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	1e59      	subs	r1, r3, #1
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	005b      	lsls	r3, r3, #1
 800465c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004660:	3301      	adds	r3, #1
 8004662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004666:	e051      	b.n	800470c <HAL_I2C_Init+0x1dc>
 8004668:	2304      	movs	r3, #4
 800466a:	e04f      	b.n	800470c <HAL_I2C_Init+0x1dc>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d111      	bne.n	8004698 <HAL_I2C_Init+0x168>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	1e58      	subs	r0, r3, #1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6859      	ldr	r1, [r3, #4]
 800467c:	460b      	mov	r3, r1
 800467e:	005b      	lsls	r3, r3, #1
 8004680:	440b      	add	r3, r1
 8004682:	fbb0 f3f3 	udiv	r3, r0, r3
 8004686:	3301      	adds	r3, #1
 8004688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800468c:	2b00      	cmp	r3, #0
 800468e:	bf0c      	ite	eq
 8004690:	2301      	moveq	r3, #1
 8004692:	2300      	movne	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	e012      	b.n	80046be <HAL_I2C_Init+0x18e>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	1e58      	subs	r0, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6859      	ldr	r1, [r3, #4]
 80046a0:	460b      	mov	r3, r1
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	0099      	lsls	r1, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ae:	3301      	adds	r3, #1
 80046b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	bf0c      	ite	eq
 80046b8:	2301      	moveq	r3, #1
 80046ba:	2300      	movne	r3, #0
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <HAL_I2C_Init+0x196>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e022      	b.n	800470c <HAL_I2C_Init+0x1dc>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10e      	bne.n	80046ec <HAL_I2C_Init+0x1bc>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	1e58      	subs	r0, r3, #1
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6859      	ldr	r1, [r3, #4]
 80046d6:	460b      	mov	r3, r1
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	440b      	add	r3, r1
 80046dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80046e0:	3301      	adds	r3, #1
 80046e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046ea:	e00f      	b.n	800470c <HAL_I2C_Init+0x1dc>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	1e58      	subs	r0, r3, #1
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6859      	ldr	r1, [r3, #4]
 80046f4:	460b      	mov	r3, r1
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	0099      	lsls	r1, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004702:	3301      	adds	r3, #1
 8004704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004708:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	6809      	ldr	r1, [r1, #0]
 8004710:	4313      	orrs	r3, r2
 8004712:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	69da      	ldr	r2, [r3, #28]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	430a      	orrs	r2, r1
 800472e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800473a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	6911      	ldr	r1, [r2, #16]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	68d2      	ldr	r2, [r2, #12]
 8004746:	4311      	orrs	r1, r2
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6812      	ldr	r2, [r2, #0]
 800474c:	430b      	orrs	r3, r1
 800474e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695a      	ldr	r2, [r3, #20]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	430a      	orrs	r2, r1
 800476a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0201 	orr.w	r2, r2, #1
 800477a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2220      	movs	r2, #32
 8004786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	000186a0 	.word	0x000186a0
 80047a8:	001e847f 	.word	0x001e847f
 80047ac:	003d08ff 	.word	0x003d08ff
 80047b0:	431bde83 	.word	0x431bde83
 80047b4:	10624dd3 	.word	0x10624dd3

080047b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b088      	sub	sp, #32
 80047bc:	af02      	add	r7, sp, #8
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	4608      	mov	r0, r1
 80047c2:	4611      	mov	r1, r2
 80047c4:	461a      	mov	r2, r3
 80047c6:	4603      	mov	r3, r0
 80047c8:	817b      	strh	r3, [r7, #10]
 80047ca:	460b      	mov	r3, r1
 80047cc:	813b      	strh	r3, [r7, #8]
 80047ce:	4613      	mov	r3, r2
 80047d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047d2:	f7ff f9d9 	bl	8003b88 <HAL_GetTick>
 80047d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b20      	cmp	r3, #32
 80047e2:	f040 80d9 	bne.w	8004998 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	9300      	str	r3, [sp, #0]
 80047ea:	2319      	movs	r3, #25
 80047ec:	2201      	movs	r2, #1
 80047ee:	496d      	ldr	r1, [pc, #436]	@ (80049a4 <HAL_I2C_Mem_Write+0x1ec>)
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f000 fc8b 	bl	800510c <I2C_WaitOnFlagUntilTimeout>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80047fc:	2302      	movs	r3, #2
 80047fe:	e0cc      	b.n	800499a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004806:	2b01      	cmp	r3, #1
 8004808:	d101      	bne.n	800480e <HAL_I2C_Mem_Write+0x56>
 800480a:	2302      	movs	r3, #2
 800480c:	e0c5      	b.n	800499a <HAL_I2C_Mem_Write+0x1e2>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b01      	cmp	r3, #1
 8004822:	d007      	beq.n	8004834 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f042 0201 	orr.w	r2, r2, #1
 8004832:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004842:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2221      	movs	r2, #33	@ 0x21
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2240      	movs	r2, #64	@ 0x40
 8004850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2200      	movs	r2, #0
 8004858:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a3a      	ldr	r2, [r7, #32]
 800485e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004864:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	4a4d      	ldr	r2, [pc, #308]	@ (80049a8 <HAL_I2C_Mem_Write+0x1f0>)
 8004874:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004876:	88f8      	ldrh	r0, [r7, #6]
 8004878:	893a      	ldrh	r2, [r7, #8]
 800487a:	8979      	ldrh	r1, [r7, #10]
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	9301      	str	r3, [sp, #4]
 8004880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	4603      	mov	r3, r0
 8004886:	68f8      	ldr	r0, [r7, #12]
 8004888:	f000 fac2 	bl	8004e10 <I2C_RequestMemoryWrite>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d052      	beq.n	8004938 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e081      	b.n	800499a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800489a:	68f8      	ldr	r0, [r7, #12]
 800489c:	f000 fd50 	bl	8005340 <I2C_WaitOnTXEFlagUntilTimeout>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00d      	beq.n	80048c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d107      	bne.n	80048be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e06b      	b.n	800499a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c6:	781a      	ldrb	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d2:	1c5a      	adds	r2, r3, #1
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	3b01      	subs	r3, #1
 80048ec:	b29a      	uxth	r2, r3
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	d11b      	bne.n	8004938 <HAL_I2C_Mem_Write+0x180>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004904:	2b00      	cmp	r3, #0
 8004906:	d017      	beq.n	8004938 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800490c:	781a      	ldrb	r2, [r3, #0]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800492e:	b29b      	uxth	r3, r3
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800493c:	2b00      	cmp	r3, #0
 800493e:	d1aa      	bne.n	8004896 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 fd43 	bl	80053d0 <I2C_WaitOnBTFFlagUntilTimeout>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00d      	beq.n	800496c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004954:	2b04      	cmp	r3, #4
 8004956:	d107      	bne.n	8004968 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004966:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e016      	b.n	800499a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800497a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004994:	2300      	movs	r3, #0
 8004996:	e000      	b.n	800499a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004998:	2302      	movs	r3, #2
  }
}
 800499a:	4618      	mov	r0, r3
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	00100002 	.word	0x00100002
 80049a8:	ffff0000 	.word	0xffff0000

080049ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b08c      	sub	sp, #48	@ 0x30
 80049b0:	af02      	add	r7, sp, #8
 80049b2:	60f8      	str	r0, [r7, #12]
 80049b4:	4608      	mov	r0, r1
 80049b6:	4611      	mov	r1, r2
 80049b8:	461a      	mov	r2, r3
 80049ba:	4603      	mov	r3, r0
 80049bc:	817b      	strh	r3, [r7, #10]
 80049be:	460b      	mov	r3, r1
 80049c0:	813b      	strh	r3, [r7, #8]
 80049c2:	4613      	mov	r3, r2
 80049c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80049c6:	f7ff f8df 	bl	8003b88 <HAL_GetTick>
 80049ca:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b20      	cmp	r3, #32
 80049d6:	f040 8214 	bne.w	8004e02 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80049da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	2319      	movs	r3, #25
 80049e0:	2201      	movs	r2, #1
 80049e2:	497b      	ldr	r1, [pc, #492]	@ (8004bd0 <HAL_I2C_Mem_Read+0x224>)
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 fb91 	bl	800510c <I2C_WaitOnFlagUntilTimeout>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d001      	beq.n	80049f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80049f0:	2302      	movs	r3, #2
 80049f2:	e207      	b.n	8004e04 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d101      	bne.n	8004a02 <HAL_I2C_Mem_Read+0x56>
 80049fe:	2302      	movs	r3, #2
 8004a00:	e200      	b.n	8004e04 <HAL_I2C_Mem_Read+0x458>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d007      	beq.n	8004a28 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0201 	orr.w	r2, r2, #1
 8004a26:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a36:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2222      	movs	r2, #34	@ 0x22
 8004a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2240      	movs	r2, #64	@ 0x40
 8004a44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a52:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004a58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4a5b      	ldr	r2, [pc, #364]	@ (8004bd4 <HAL_I2C_Mem_Read+0x228>)
 8004a68:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a6a:	88f8      	ldrh	r0, [r7, #6]
 8004a6c:	893a      	ldrh	r2, [r7, #8]
 8004a6e:	8979      	ldrh	r1, [r7, #10]
 8004a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a72:	9301      	str	r3, [sp, #4]
 8004a74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a76:	9300      	str	r3, [sp, #0]
 8004a78:	4603      	mov	r3, r0
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 fa5e 	bl	8004f3c <I2C_RequestMemoryRead>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e1bc      	b.n	8004e04 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d113      	bne.n	8004aba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a92:	2300      	movs	r3, #0
 8004a94:	623b      	str	r3, [r7, #32]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	623b      	str	r3, [r7, #32]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	623b      	str	r3, [r7, #32]
 8004aa6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	e190      	b.n	8004ddc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d11b      	bne.n	8004afa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ad0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61fb      	str	r3, [r7, #28]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	61fb      	str	r3, [r7, #28]
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	699b      	ldr	r3, [r3, #24]
 8004ae4:	61fb      	str	r3, [r7, #28]
 8004ae6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	e170      	b.n	8004ddc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d11b      	bne.n	8004b3a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b22:	2300      	movs	r3, #0
 8004b24:	61bb      	str	r3, [r7, #24]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	61bb      	str	r3, [r7, #24]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	e150      	b.n	8004ddc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	617b      	str	r3, [r7, #20]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	617b      	str	r3, [r7, #20]
 8004b4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004b50:	e144      	b.n	8004ddc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	f200 80f1 	bhi.w	8004d3e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d123      	bne.n	8004bac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b66:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f000 fc79 	bl	8005460 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e145      	b.n	8004e04 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	691a      	ldr	r2, [r3, #16]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b82:	b2d2      	uxtb	r2, r2
 8004b84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8a:	1c5a      	adds	r2, r3, #1
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b94:	3b01      	subs	r3, #1
 8004b96:	b29a      	uxth	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	3b01      	subs	r3, #1
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004baa:	e117      	b.n	8004ddc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d14e      	bne.n	8004c52 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb6:	9300      	str	r3, [sp, #0]
 8004bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bba:	2200      	movs	r2, #0
 8004bbc:	4906      	ldr	r1, [pc, #24]	@ (8004bd8 <HAL_I2C_Mem_Read+0x22c>)
 8004bbe:	68f8      	ldr	r0, [r7, #12]
 8004bc0:	f000 faa4 	bl	800510c <I2C_WaitOnFlagUntilTimeout>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d008      	beq.n	8004bdc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e11a      	b.n	8004e04 <HAL_I2C_Mem_Read+0x458>
 8004bce:	bf00      	nop
 8004bd0:	00100002 	.word	0x00100002
 8004bd4:	ffff0000 	.word	0xffff0000
 8004bd8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	691a      	ldr	r2, [r3, #16]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfe:	1c5a      	adds	r2, r3, #1
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b29a      	uxth	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	691a      	ldr	r2, [r3, #16]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c28:	b2d2      	uxtb	r2, r2
 8004c2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c30:	1c5a      	adds	r2, r3, #1
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	b29a      	uxth	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	3b01      	subs	r3, #1
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004c50:	e0c4      	b.n	8004ddc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c54:	9300      	str	r3, [sp, #0]
 8004c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c58:	2200      	movs	r2, #0
 8004c5a:	496c      	ldr	r1, [pc, #432]	@ (8004e0c <HAL_I2C_Mem_Read+0x460>)
 8004c5c:	68f8      	ldr	r0, [r7, #12]
 8004c5e:	f000 fa55 	bl	800510c <I2C_WaitOnFlagUntilTimeout>
 8004c62:	4603      	mov	r3, r0
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d001      	beq.n	8004c6c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e0cb      	b.n	8004e04 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	691a      	ldr	r2, [r3, #16]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8e:	1c5a      	adds	r2, r3, #1
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	b29a      	uxth	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	4955      	ldr	r1, [pc, #340]	@ (8004e0c <HAL_I2C_Mem_Read+0x460>)
 8004cb8:	68f8      	ldr	r0, [r7, #12]
 8004cba:	f000 fa27 	bl	800510c <I2C_WaitOnFlagUntilTimeout>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d001      	beq.n	8004cc8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e09d      	b.n	8004e04 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	691a      	ldr	r2, [r3, #16]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce2:	b2d2      	uxtb	r2, r2
 8004ce4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cea:	1c5a      	adds	r2, r3, #1
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	b29a      	uxth	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	3b01      	subs	r3, #1
 8004d04:	b29a      	uxth	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	691a      	ldr	r2, [r3, #16]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d14:	b2d2      	uxtb	r2, r2
 8004d16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1c:	1c5a      	adds	r2, r3, #1
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d26:	3b01      	subs	r3, #1
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004d3c:	e04e      	b.n	8004ddc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d40:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 fb8c 	bl	8005460 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e058      	b.n	8004e04 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5c:	b2d2      	uxtb	r2, r2
 8004d5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	b29a      	uxth	r2, r3
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	f003 0304 	and.w	r3, r3, #4
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d124      	bne.n	8004ddc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d96:	2b03      	cmp	r3, #3
 8004d98:	d107      	bne.n	8004daa <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004da8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	691a      	ldr	r2, [r3, #16]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db4:	b2d2      	uxtb	r2, r2
 8004db6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f47f aeb6 	bne.w	8004b52 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e000      	b.n	8004e04 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004e02:	2302      	movs	r3, #2
  }
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3728      	adds	r7, #40	@ 0x28
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	00010004 	.word	0x00010004

08004e10 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b088      	sub	sp, #32
 8004e14:	af02      	add	r7, sp, #8
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	4608      	mov	r0, r1
 8004e1a:	4611      	mov	r1, r2
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	4603      	mov	r3, r0
 8004e20:	817b      	strh	r3, [r7, #10]
 8004e22:	460b      	mov	r3, r1
 8004e24:	813b      	strh	r3, [r7, #8]
 8004e26:	4613      	mov	r3, r2
 8004e28:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	681a      	ldr	r2, [r3, #0]
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3c:	9300      	str	r3, [sp, #0]
 8004e3e:	6a3b      	ldr	r3, [r7, #32]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e46:	68f8      	ldr	r0, [r7, #12]
 8004e48:	f000 f960 	bl	800510c <I2C_WaitOnFlagUntilTimeout>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00d      	beq.n	8004e6e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e60:	d103      	bne.n	8004e6a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e68:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e05f      	b.n	8004f2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e6e:	897b      	ldrh	r3, [r7, #10]
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	461a      	mov	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e80:	6a3a      	ldr	r2, [r7, #32]
 8004e82:	492d      	ldr	r1, [pc, #180]	@ (8004f38 <I2C_RequestMemoryWrite+0x128>)
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 f9bb 	bl	8005200 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e04c      	b.n	8004f2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e94:	2300      	movs	r3, #0
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eac:	6a39      	ldr	r1, [r7, #32]
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 fa46 	bl	8005340 <I2C_WaitOnTXEFlagUntilTimeout>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00d      	beq.n	8004ed6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d107      	bne.n	8004ed2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ed0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e02b      	b.n	8004f2e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ed6:	88fb      	ldrh	r3, [r7, #6]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d105      	bne.n	8004ee8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004edc:	893b      	ldrh	r3, [r7, #8]
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	611a      	str	r2, [r3, #16]
 8004ee6:	e021      	b.n	8004f2c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ee8:	893b      	ldrh	r3, [r7, #8]
 8004eea:	0a1b      	lsrs	r3, r3, #8
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ef8:	6a39      	ldr	r1, [r7, #32]
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 fa20 	bl	8005340 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00d      	beq.n	8004f22 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d107      	bne.n	8004f1e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e005      	b.n	8004f2e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f22:	893b      	ldrh	r3, [r7, #8]
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	00010002 	.word	0x00010002

08004f3c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b088      	sub	sp, #32
 8004f40:	af02      	add	r7, sp, #8
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	4608      	mov	r0, r1
 8004f46:	4611      	mov	r1, r2
 8004f48:	461a      	mov	r2, r3
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	817b      	strh	r3, [r7, #10]
 8004f4e:	460b      	mov	r3, r1
 8004f50:	813b      	strh	r3, [r7, #8]
 8004f52:	4613      	mov	r3, r2
 8004f54:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004f64:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004f74:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f78:	9300      	str	r3, [sp, #0]
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004f82:	68f8      	ldr	r0, [r7, #12]
 8004f84:	f000 f8c2 	bl	800510c <I2C_WaitOnFlagUntilTimeout>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00d      	beq.n	8004faa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f9c:	d103      	bne.n	8004fa6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004fa4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e0aa      	b.n	8005100 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004faa:	897b      	ldrh	r3, [r7, #10]
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	461a      	mov	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004fb8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fbc:	6a3a      	ldr	r2, [r7, #32]
 8004fbe:	4952      	ldr	r1, [pc, #328]	@ (8005108 <I2C_RequestMemoryRead+0x1cc>)
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f000 f91d 	bl	8005200 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e097      	b.n	8005100 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	699b      	ldr	r3, [r3, #24]
 8004fe2:	617b      	str	r3, [r7, #20]
 8004fe4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fe6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fe8:	6a39      	ldr	r1, [r7, #32]
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 f9a8 	bl	8005340 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00d      	beq.n	8005012 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	d107      	bne.n	800500e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800500c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e076      	b.n	8005100 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005012:	88fb      	ldrh	r3, [r7, #6]
 8005014:	2b01      	cmp	r3, #1
 8005016:	d105      	bne.n	8005024 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005018:	893b      	ldrh	r3, [r7, #8]
 800501a:	b2da      	uxtb	r2, r3
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	611a      	str	r2, [r3, #16]
 8005022:	e021      	b.n	8005068 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005024:	893b      	ldrh	r3, [r7, #8]
 8005026:	0a1b      	lsrs	r3, r3, #8
 8005028:	b29b      	uxth	r3, r3
 800502a:	b2da      	uxtb	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005032:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005034:	6a39      	ldr	r1, [r7, #32]
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 f982 	bl	8005340 <I2C_WaitOnTXEFlagUntilTimeout>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00d      	beq.n	800505e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005046:	2b04      	cmp	r3, #4
 8005048:	d107      	bne.n	800505a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005058:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e050      	b.n	8005100 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800505e:	893b      	ldrh	r3, [r7, #8]
 8005060:	b2da      	uxtb	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800506a:	6a39      	ldr	r1, [r7, #32]
 800506c:	68f8      	ldr	r0, [r7, #12]
 800506e:	f000 f967 	bl	8005340 <I2C_WaitOnTXEFlagUntilTimeout>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00d      	beq.n	8005094 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800507c:	2b04      	cmp	r3, #4
 800507e:	d107      	bne.n	8005090 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800508e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e035      	b.n	8005100 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80050a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a6:	9300      	str	r3, [sp, #0]
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	2200      	movs	r2, #0
 80050ac:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 f82b 	bl	800510c <I2C_WaitOnFlagUntilTimeout>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d00d      	beq.n	80050d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050ca:	d103      	bne.n	80050d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80050d2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e013      	b.n	8005100 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80050d8:	897b      	ldrh	r3, [r7, #10]
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	f043 0301 	orr.w	r3, r3, #1
 80050e0:	b2da      	uxtb	r2, r3
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	6a3a      	ldr	r2, [r7, #32]
 80050ec:	4906      	ldr	r1, [pc, #24]	@ (8005108 <I2C_RequestMemoryRead+0x1cc>)
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 f886 	bl	8005200 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	00010002 	.word	0x00010002

0800510c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	603b      	str	r3, [r7, #0]
 8005118:	4613      	mov	r3, r2
 800511a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800511c:	e048      	b.n	80051b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005124:	d044      	beq.n	80051b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005126:	f7fe fd2f 	bl	8003b88 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	683a      	ldr	r2, [r7, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d302      	bcc.n	800513c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d139      	bne.n	80051b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	0c1b      	lsrs	r3, r3, #16
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b01      	cmp	r3, #1
 8005144:	d10d      	bne.n	8005162 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	695b      	ldr	r3, [r3, #20]
 800514c:	43da      	mvns	r2, r3
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	4013      	ands	r3, r2
 8005152:	b29b      	uxth	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	bf0c      	ite	eq
 8005158:	2301      	moveq	r3, #1
 800515a:	2300      	movne	r3, #0
 800515c:	b2db      	uxtb	r3, r3
 800515e:	461a      	mov	r2, r3
 8005160:	e00c      	b.n	800517c <I2C_WaitOnFlagUntilTimeout+0x70>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	43da      	mvns	r2, r3
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	4013      	ands	r3, r2
 800516e:	b29b      	uxth	r3, r3
 8005170:	2b00      	cmp	r3, #0
 8005172:	bf0c      	ite	eq
 8005174:	2301      	moveq	r3, #1
 8005176:	2300      	movne	r3, #0
 8005178:	b2db      	uxtb	r3, r3
 800517a:	461a      	mov	r2, r3
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	429a      	cmp	r2, r3
 8005180:	d116      	bne.n	80051b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2220      	movs	r2, #32
 800518c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2200      	movs	r2, #0
 8005194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519c:	f043 0220 	orr.w	r2, r3, #32
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e023      	b.n	80051f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	0c1b      	lsrs	r3, r3, #16
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d10d      	bne.n	80051d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	43da      	mvns	r2, r3
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	4013      	ands	r3, r2
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	bf0c      	ite	eq
 80051cc:	2301      	moveq	r3, #1
 80051ce:	2300      	movne	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	461a      	mov	r2, r3
 80051d4:	e00c      	b.n	80051f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	699b      	ldr	r3, [r3, #24]
 80051dc:	43da      	mvns	r2, r3
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	4013      	ands	r3, r2
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	bf0c      	ite	eq
 80051e8:	2301      	moveq	r3, #1
 80051ea:	2300      	movne	r3, #0
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	461a      	mov	r2, r3
 80051f0:	79fb      	ldrb	r3, [r7, #7]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d093      	beq.n	800511e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3710      	adds	r7, #16
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}

08005200 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
 800520c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800520e:	e071      	b.n	80052f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800521a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800521e:	d123      	bne.n	8005268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800522e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005238:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2220      	movs	r2, #32
 8005244:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005254:	f043 0204 	orr.w	r2, r3, #4
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e067      	b.n	8005338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800526e:	d041      	beq.n	80052f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005270:	f7fe fc8a 	bl	8003b88 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	429a      	cmp	r2, r3
 800527e:	d302      	bcc.n	8005286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d136      	bne.n	80052f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	0c1b      	lsrs	r3, r3, #16
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b01      	cmp	r3, #1
 800528e:	d10c      	bne.n	80052aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	43da      	mvns	r2, r3
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	4013      	ands	r3, r2
 800529c:	b29b      	uxth	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	bf14      	ite	ne
 80052a2:	2301      	movne	r3, #1
 80052a4:	2300      	moveq	r3, #0
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	e00b      	b.n	80052c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	43da      	mvns	r2, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	4013      	ands	r3, r2
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	bf14      	ite	ne
 80052bc:	2301      	movne	r3, #1
 80052be:	2300      	moveq	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d016      	beq.n	80052f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e0:	f043 0220 	orr.w	r2, r3, #32
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e021      	b.n	8005338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	0c1b      	lsrs	r3, r3, #16
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d10c      	bne.n	8005318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	43da      	mvns	r2, r3
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	4013      	ands	r3, r2
 800530a:	b29b      	uxth	r3, r3
 800530c:	2b00      	cmp	r3, #0
 800530e:	bf14      	ite	ne
 8005310:	2301      	movne	r3, #1
 8005312:	2300      	moveq	r3, #0
 8005314:	b2db      	uxtb	r3, r3
 8005316:	e00b      	b.n	8005330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	43da      	mvns	r2, r3
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4013      	ands	r3, r2
 8005324:	b29b      	uxth	r3, r3
 8005326:	2b00      	cmp	r3, #0
 8005328:	bf14      	ite	ne
 800532a:	2301      	movne	r3, #1
 800532c:	2300      	moveq	r3, #0
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	f47f af6d 	bne.w	8005210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3710      	adds	r7, #16
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800534c:	e034      	b.n	80053b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800534e:	68f8      	ldr	r0, [r7, #12]
 8005350:	f000 f8e3 	bl	800551a <I2C_IsAcknowledgeFailed>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e034      	b.n	80053c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005364:	d028      	beq.n	80053b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005366:	f7fe fc0f 	bl	8003b88 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	429a      	cmp	r2, r3
 8005374:	d302      	bcc.n	800537c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d11d      	bne.n	80053b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005386:	2b80      	cmp	r3, #128	@ 0x80
 8005388:	d016      	beq.n	80053b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2220      	movs	r2, #32
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053a4:	f043 0220 	orr.w	r2, r3, #32
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e007      	b.n	80053c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053c2:	2b80      	cmp	r3, #128	@ 0x80
 80053c4:	d1c3      	bne.n	800534e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80053dc:	e034      	b.n	8005448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	f000 f89b 	bl	800551a <I2C_IsAcknowledgeFailed>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e034      	b.n	8005458 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80053f4:	d028      	beq.n	8005448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f6:	f7fe fbc7 	bl	8003b88 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	68ba      	ldr	r2, [r7, #8]
 8005402:	429a      	cmp	r2, r3
 8005404:	d302      	bcc.n	800540c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d11d      	bne.n	8005448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	695b      	ldr	r3, [r3, #20]
 8005412:	f003 0304 	and.w	r3, r3, #4
 8005416:	2b04      	cmp	r3, #4
 8005418:	d016      	beq.n	8005448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2200      	movs	r2, #0
 800541e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2220      	movs	r2, #32
 8005424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005434:	f043 0220 	orr.w	r2, r3, #32
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e007      	b.n	8005458 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	f003 0304 	and.w	r3, r3, #4
 8005452:	2b04      	cmp	r3, #4
 8005454:	d1c3      	bne.n	80053de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3710      	adds	r7, #16
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af00      	add	r7, sp, #0
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800546c:	e049      	b.n	8005502 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	f003 0310 	and.w	r3, r3, #16
 8005478:	2b10      	cmp	r3, #16
 800547a:	d119      	bne.n	80054b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f06f 0210 	mvn.w	r2, #16
 8005484:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2200      	movs	r2, #0
 800548a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2220      	movs	r2, #32
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e030      	b.n	8005512 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054b0:	f7fe fb6a 	bl	8003b88 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d302      	bcc.n	80054c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d11d      	bne.n	8005502 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d0:	2b40      	cmp	r3, #64	@ 0x40
 80054d2:	d016      	beq.n	8005502 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2220      	movs	r2, #32
 80054de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ee:	f043 0220 	orr.w	r2, r3, #32
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e007      	b.n	8005512 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	695b      	ldr	r3, [r3, #20]
 8005508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800550c:	2b40      	cmp	r3, #64	@ 0x40
 800550e:	d1ae      	bne.n	800546e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800552c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005530:	d11b      	bne.n	800556a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800553a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2220      	movs	r2, #32
 8005546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005556:	f043 0204 	orr.w	r2, r3, #4
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e000      	b.n	800556c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b20      	cmp	r3, #32
 800558c:	d129      	bne.n	80055e2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2224      	movs	r2, #36	@ 0x24
 8005592:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0201 	bic.w	r2, r2, #1
 80055a4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 0210 	bic.w	r2, r2, #16
 80055b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f042 0201 	orr.w	r2, r2, #1
 80055d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2220      	movs	r2, #32
 80055da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	e000      	b.n	80055e4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80055e2:	2302      	movs	r3, #2
  }
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	370c      	adds	r7, #12
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr

080055f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80055fa:	2300      	movs	r3, #0
 80055fc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b20      	cmp	r3, #32
 8005608:	d12a      	bne.n	8005660 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2224      	movs	r2, #36	@ 0x24
 800560e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f022 0201 	bic.w	r2, r2, #1
 8005620:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005628:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800562a:	89fb      	ldrh	r3, [r7, #14]
 800562c:	f023 030f 	bic.w	r3, r3, #15
 8005630:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	b29a      	uxth	r2, r3
 8005636:	89fb      	ldrh	r3, [r7, #14]
 8005638:	4313      	orrs	r3, r2
 800563a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	89fa      	ldrh	r2, [r7, #14]
 8005642:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f042 0201 	orr.w	r2, r2, #1
 8005652:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2220      	movs	r2, #32
 8005658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800565c:	2300      	movs	r3, #0
 800565e:	e000      	b.n	8005662 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005660:	2302      	movs	r3, #2
  }
}
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
	...

08005670 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e0bf      	b.n	8005802 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d106      	bne.n	800569c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7fd fbd6 	bl	8002e48 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699a      	ldr	r2, [r3, #24]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80056b2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	6999      	ldr	r1, [r3, #24]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80056c8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	430a      	orrs	r2, r1
 80056d6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6899      	ldr	r1, [r3, #8]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	4b4a      	ldr	r3, [pc, #296]	@ (800580c <HAL_LTDC_Init+0x19c>)
 80056e4:	400b      	ands	r3, r1
 80056e6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	041b      	lsls	r3, r3, #16
 80056ee:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6899      	ldr	r1, [r3, #8]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	699a      	ldr	r2, [r3, #24]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	431a      	orrs	r2, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	430a      	orrs	r2, r1
 8005704:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68d9      	ldr	r1, [r3, #12]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	4b3e      	ldr	r3, [pc, #248]	@ (800580c <HAL_LTDC_Init+0x19c>)
 8005712:	400b      	ands	r3, r1
 8005714:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	69db      	ldr	r3, [r3, #28]
 800571a:	041b      	lsls	r3, r3, #16
 800571c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68d9      	ldr	r1, [r3, #12]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a1a      	ldr	r2, [r3, #32]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	431a      	orrs	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	430a      	orrs	r2, r1
 8005732:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	6919      	ldr	r1, [r3, #16]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	4b33      	ldr	r3, [pc, #204]	@ (800580c <HAL_LTDC_Init+0x19c>)
 8005740:	400b      	ands	r3, r1
 8005742:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005748:	041b      	lsls	r3, r3, #16
 800574a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	6919      	ldr	r1, [r3, #16]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	431a      	orrs	r2, r3
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	430a      	orrs	r2, r1
 8005760:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6959      	ldr	r1, [r3, #20]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	4b27      	ldr	r3, [pc, #156]	@ (800580c <HAL_LTDC_Init+0x19c>)
 800576e:	400b      	ands	r3, r1
 8005770:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005776:	041b      	lsls	r3, r3, #16
 8005778:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	6959      	ldr	r1, [r3, #20]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	431a      	orrs	r2, r3
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005796:	021b      	lsls	r3, r3, #8
 8005798:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80057a0:	041b      	lsls	r3, r3, #16
 80057a2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80057b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4313      	orrs	r3, r2
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	430a      	orrs	r2, r1
 80057ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f042 0206 	orr.w	r2, r2, #6
 80057de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f042 0201 	orr.w	r2, r2, #1
 80057ee:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	f000f800 	.word	0xf000f800

08005810 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005810:	b5b0      	push	{r4, r5, r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8005822:	2b01      	cmp	r3, #1
 8005824:	d101      	bne.n	800582a <HAL_LTDC_ConfigLayer+0x1a>
 8005826:	2302      	movs	r3, #2
 8005828:	e02c      	b.n	8005884 <HAL_LTDC_ConfigLayer+0x74>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2201      	movs	r2, #1
 800582e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2202      	movs	r2, #2
 8005836:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2134      	movs	r1, #52	@ 0x34
 8005840:	fb01 f303 	mul.w	r3, r1, r3
 8005844:	4413      	add	r3, r2
 8005846:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	4614      	mov	r4, r2
 800584e:	461d      	mov	r5, r3
 8005850:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005852:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005854:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005856:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005858:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800585a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800585c:	682b      	ldr	r3, [r5, #0]
 800585e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	68b9      	ldr	r1, [r7, #8]
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f000 f811 	bl	800588c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	2201      	movs	r2, #1
 8005870:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2201      	movs	r2, #1
 8005876:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	3710      	adds	r7, #16
 8005888:	46bd      	mov	sp, r7
 800588a:	bdb0      	pop	{r4, r5, r7, pc}

0800588c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800588c:	b480      	push	{r7}
 800588e:	b089      	sub	sp, #36	@ 0x24
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	0c1b      	lsrs	r3, r3, #16
 80058a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058a8:	4413      	add	r3, r2
 80058aa:	041b      	lsls	r3, r3, #16
 80058ac:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	461a      	mov	r2, r3
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	01db      	lsls	r3, r3, #7
 80058b8:	4413      	add	r3, r2
 80058ba:	3384      	adds	r3, #132	@ 0x84
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	6812      	ldr	r2, [r2, #0]
 80058c2:	4611      	mov	r1, r2
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	01d2      	lsls	r2, r2, #7
 80058c8:	440a      	add	r2, r1
 80058ca:	3284      	adds	r2, #132	@ 0x84
 80058cc:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80058d0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	0c1b      	lsrs	r3, r3, #16
 80058de:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80058e2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80058e4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4619      	mov	r1, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	01db      	lsls	r3, r3, #7
 80058f0:	440b      	add	r3, r1
 80058f2:	3384      	adds	r3, #132	@ 0x84
 80058f4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80058fa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	68da      	ldr	r2, [r3, #12]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68db      	ldr	r3, [r3, #12]
 8005906:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800590a:	4413      	add	r3, r2
 800590c:	041b      	lsls	r3, r3, #16
 800590e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	461a      	mov	r2, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	01db      	lsls	r3, r3, #7
 800591a:	4413      	add	r3, r2
 800591c:	3384      	adds	r3, #132	@ 0x84
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	6812      	ldr	r2, [r2, #0]
 8005924:	4611      	mov	r1, r2
 8005926:	687a      	ldr	r2, [r7, #4]
 8005928:	01d2      	lsls	r2, r2, #7
 800592a:	440a      	add	r2, r1
 800592c:	3284      	adds	r2, #132	@ 0x84
 800592e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8005932:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005942:	4413      	add	r3, r2
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4619      	mov	r1, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	01db      	lsls	r3, r3, #7
 8005950:	440b      	add	r3, r1
 8005952:	3384      	adds	r3, #132	@ 0x84
 8005954:	4619      	mov	r1, r3
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	4313      	orrs	r3, r2
 800595a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	461a      	mov	r2, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	01db      	lsls	r3, r3, #7
 8005966:	4413      	add	r3, r2
 8005968:	3384      	adds	r3, #132	@ 0x84
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	6812      	ldr	r2, [r2, #0]
 8005970:	4611      	mov	r1, r2
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	01d2      	lsls	r2, r2, #7
 8005976:	440a      	add	r2, r1
 8005978:	3284      	adds	r2, #132	@ 0x84
 800597a:	f023 0307 	bic.w	r3, r3, #7
 800597e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	461a      	mov	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	01db      	lsls	r3, r3, #7
 800598a:	4413      	add	r3, r2
 800598c:	3384      	adds	r3, #132	@ 0x84
 800598e:	461a      	mov	r2, r3
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800599c:	021b      	lsls	r3, r3, #8
 800599e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80059a6:	041b      	lsls	r3, r3, #16
 80059a8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	061b      	lsls	r3, r3, #24
 80059b0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	461a      	mov	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	01db      	lsls	r3, r3, #7
 80059bc:	4413      	add	r3, r2
 80059be:	3384      	adds	r3, #132	@ 0x84
 80059c0:	699b      	ldr	r3, [r3, #24]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	461a      	mov	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	01db      	lsls	r3, r3, #7
 80059cc:	4413      	add	r3, r2
 80059ce:	3384      	adds	r3, #132	@ 0x84
 80059d0:	461a      	mov	r2, r3
 80059d2:	2300      	movs	r3, #0
 80059d4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80059dc:	461a      	mov	r2, r3
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	431a      	orrs	r2, r3
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	431a      	orrs	r2, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4619      	mov	r1, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	01db      	lsls	r3, r3, #7
 80059f0:	440b      	add	r3, r1
 80059f2:	3384      	adds	r3, #132	@ 0x84
 80059f4:	4619      	mov	r1, r3
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	461a      	mov	r2, r3
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	01db      	lsls	r3, r3, #7
 8005a06:	4413      	add	r3, r2
 8005a08:	3384      	adds	r3, #132	@ 0x84
 8005a0a:	695b      	ldr	r3, [r3, #20]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	6812      	ldr	r2, [r2, #0]
 8005a10:	4611      	mov	r1, r2
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	01d2      	lsls	r2, r2, #7
 8005a16:	440a      	add	r2, r1
 8005a18:	3284      	adds	r2, #132	@ 0x84
 8005a1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005a1e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	461a      	mov	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	01db      	lsls	r3, r3, #7
 8005a2a:	4413      	add	r3, r2
 8005a2c:	3384      	adds	r3, #132	@ 0x84
 8005a2e:	461a      	mov	r2, r3
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	01db      	lsls	r3, r3, #7
 8005a40:	4413      	add	r3, r2
 8005a42:	3384      	adds	r3, #132	@ 0x84
 8005a44:	69db      	ldr	r3, [r3, #28]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	6812      	ldr	r2, [r2, #0]
 8005a4a:	4611      	mov	r1, r2
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	01d2      	lsls	r2, r2, #7
 8005a50:	440a      	add	r2, r1
 8005a52:	3284      	adds	r2, #132	@ 0x84
 8005a54:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8005a58:	f023 0307 	bic.w	r3, r3, #7
 8005a5c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	69da      	ldr	r2, [r3, #28]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	68f9      	ldr	r1, [r7, #12]
 8005a68:	6809      	ldr	r1, [r1, #0]
 8005a6a:	4608      	mov	r0, r1
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	01c9      	lsls	r1, r1, #7
 8005a70:	4401      	add	r1, r0
 8005a72:	3184      	adds	r1, #132	@ 0x84
 8005a74:	4313      	orrs	r3, r2
 8005a76:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	01db      	lsls	r3, r3, #7
 8005a82:	4413      	add	r3, r2
 8005a84:	3384      	adds	r3, #132	@ 0x84
 8005a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	01db      	lsls	r3, r3, #7
 8005a92:	4413      	add	r3, r2
 8005a94:	3384      	adds	r3, #132	@ 0x84
 8005a96:	461a      	mov	r2, r3
 8005a98:	2300      	movs	r3, #0
 8005a9a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	01db      	lsls	r3, r3, #7
 8005aa6:	4413      	add	r3, r2
 8005aa8:	3384      	adds	r3, #132	@ 0x84
 8005aaa:	461a      	mov	r2, r3
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab0:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d102      	bne.n	8005ac0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005aba:	2304      	movs	r3, #4
 8005abc:	61fb      	str	r3, [r7, #28]
 8005abe:	e01b      	b.n	8005af8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d102      	bne.n	8005ace <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	61fb      	str	r3, [r7, #28]
 8005acc:	e014      	b.n	8005af8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d00b      	beq.n	8005aee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d007      	beq.n	8005aee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d003      	beq.n	8005aee <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005aea:	2b07      	cmp	r3, #7
 8005aec:	d102      	bne.n	8005af4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005aee:	2302      	movs	r3, #2
 8005af0:	61fb      	str	r3, [r7, #28]
 8005af2:	e001      	b.n	8005af8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005af4:	2301      	movs	r3, #1
 8005af6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	461a      	mov	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	01db      	lsls	r3, r3, #7
 8005b02:	4413      	add	r3, r2
 8005b04:	3384      	adds	r3, #132	@ 0x84
 8005b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	6812      	ldr	r2, [r2, #0]
 8005b0c:	4611      	mov	r1, r2
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	01d2      	lsls	r2, r2, #7
 8005b12:	440a      	add	r2, r1
 8005b14:	3284      	adds	r2, #132	@ 0x84
 8005b16:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8005b1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b20:	69fa      	ldr	r2, [r7, #28]
 8005b22:	fb02 f303 	mul.w	r3, r2, r3
 8005b26:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	6859      	ldr	r1, [r3, #4]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	1acb      	subs	r3, r1, r3
 8005b32:	69f9      	ldr	r1, [r7, #28]
 8005b34:	fb01 f303 	mul.w	r3, r1, r3
 8005b38:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005b3a:	68f9      	ldr	r1, [r7, #12]
 8005b3c:	6809      	ldr	r1, [r1, #0]
 8005b3e:	4608      	mov	r0, r1
 8005b40:	6879      	ldr	r1, [r7, #4]
 8005b42:	01c9      	lsls	r1, r1, #7
 8005b44:	4401      	add	r1, r0
 8005b46:	3184      	adds	r1, #132	@ 0x84
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	461a      	mov	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	01db      	lsls	r3, r3, #7
 8005b56:	4413      	add	r3, r2
 8005b58:	3384      	adds	r3, #132	@ 0x84
 8005b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	6812      	ldr	r2, [r2, #0]
 8005b60:	4611      	mov	r1, r2
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	01d2      	lsls	r2, r2, #7
 8005b66:	440a      	add	r2, r1
 8005b68:	3284      	adds	r2, #132	@ 0x84
 8005b6a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005b6e:	f023 0307 	bic.w	r3, r3, #7
 8005b72:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	01db      	lsls	r3, r3, #7
 8005b7e:	4413      	add	r3, r2
 8005b80:	3384      	adds	r3, #132	@ 0x84
 8005b82:	461a      	mov	r2, r3
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b88:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	01db      	lsls	r3, r3, #7
 8005b94:	4413      	add	r3, r2
 8005b96:	3384      	adds	r3, #132	@ 0x84
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	6812      	ldr	r2, [r2, #0]
 8005b9e:	4611      	mov	r1, r2
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	01d2      	lsls	r2, r2, #7
 8005ba4:	440a      	add	r2, r1
 8005ba6:	3284      	adds	r2, #132	@ 0x84
 8005ba8:	f043 0301 	orr.w	r3, r3, #1
 8005bac:	6013      	str	r3, [r2, #0]
}
 8005bae:	bf00      	nop
 8005bb0:	3724      	adds	r7, #36	@ 0x24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr
	...

08005bbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e267      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0301 	and.w	r3, r3, #1
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d075      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005bda:	4b88      	ldr	r3, [pc, #544]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f003 030c 	and.w	r3, r3, #12
 8005be2:	2b04      	cmp	r3, #4
 8005be4:	d00c      	beq.n	8005c00 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005be6:	4b85      	ldr	r3, [pc, #532]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005bee:	2b08      	cmp	r3, #8
 8005bf0:	d112      	bne.n	8005c18 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005bf2:	4b82      	ldr	r3, [pc, #520]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005bfe:	d10b      	bne.n	8005c18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c00:	4b7e      	ldr	r3, [pc, #504]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d05b      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x108>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d157      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e242      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c20:	d106      	bne.n	8005c30 <HAL_RCC_OscConfig+0x74>
 8005c22:	4b76      	ldr	r3, [pc, #472]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a75      	ldr	r2, [pc, #468]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005c28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	e01d      	b.n	8005c6c <HAL_RCC_OscConfig+0xb0>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c38:	d10c      	bne.n	8005c54 <HAL_RCC_OscConfig+0x98>
 8005c3a:	4b70      	ldr	r3, [pc, #448]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a6f      	ldr	r2, [pc, #444]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005c40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c44:	6013      	str	r3, [r2, #0]
 8005c46:	4b6d      	ldr	r3, [pc, #436]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a6c      	ldr	r2, [pc, #432]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005c4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c50:	6013      	str	r3, [r2, #0]
 8005c52:	e00b      	b.n	8005c6c <HAL_RCC_OscConfig+0xb0>
 8005c54:	4b69      	ldr	r3, [pc, #420]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a68      	ldr	r2, [pc, #416]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005c5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c5e:	6013      	str	r3, [r2, #0]
 8005c60:	4b66      	ldr	r3, [pc, #408]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4a65      	ldr	r2, [pc, #404]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005c66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d013      	beq.n	8005c9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c74:	f7fd ff88 	bl	8003b88 <HAL_GetTick>
 8005c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c7a:	e008      	b.n	8005c8e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c7c:	f7fd ff84 	bl	8003b88 <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b64      	cmp	r3, #100	@ 0x64
 8005c88:	d901      	bls.n	8005c8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e207      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c8e:	4b5b      	ldr	r3, [pc, #364]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d0f0      	beq.n	8005c7c <HAL_RCC_OscConfig+0xc0>
 8005c9a:	e014      	b.n	8005cc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c9c:	f7fd ff74 	bl	8003b88 <HAL_GetTick>
 8005ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ca2:	e008      	b.n	8005cb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ca4:	f7fd ff70 	bl	8003b88 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	2b64      	cmp	r3, #100	@ 0x64
 8005cb0:	d901      	bls.n	8005cb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e1f3      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005cb6:	4b51      	ldr	r3, [pc, #324]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1f0      	bne.n	8005ca4 <HAL_RCC_OscConfig+0xe8>
 8005cc2:	e000      	b.n	8005cc6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f003 0302 	and.w	r3, r3, #2
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d063      	beq.n	8005d9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005cd2:	4b4a      	ldr	r3, [pc, #296]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	f003 030c 	and.w	r3, r3, #12
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d00b      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cde:	4b47      	ldr	r3, [pc, #284]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005ce6:	2b08      	cmp	r3, #8
 8005ce8:	d11c      	bne.n	8005d24 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005cea:	4b44      	ldr	r3, [pc, #272]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d116      	bne.n	8005d24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cf6:	4b41      	ldr	r3, [pc, #260]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f003 0302 	and.w	r3, r3, #2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d005      	beq.n	8005d0e <HAL_RCC_OscConfig+0x152>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d001      	beq.n	8005d0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e1c7      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d0e:	4b3b      	ldr	r3, [pc, #236]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	00db      	lsls	r3, r3, #3
 8005d1c:	4937      	ldr	r1, [pc, #220]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d22:	e03a      	b.n	8005d9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d020      	beq.n	8005d6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d2c:	4b34      	ldr	r3, [pc, #208]	@ (8005e00 <HAL_RCC_OscConfig+0x244>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d32:	f7fd ff29 	bl	8003b88 <HAL_GetTick>
 8005d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d38:	e008      	b.n	8005d4c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d3a:	f7fd ff25 	bl	8003b88 <HAL_GetTick>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	2b02      	cmp	r3, #2
 8005d46:	d901      	bls.n	8005d4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e1a8      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d4c:	4b2b      	ldr	r3, [pc, #172]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d0f0      	beq.n	8005d3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d58:	4b28      	ldr	r3, [pc, #160]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	00db      	lsls	r3, r3, #3
 8005d66:	4925      	ldr	r1, [pc, #148]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	600b      	str	r3, [r1, #0]
 8005d6c:	e015      	b.n	8005d9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d6e:	4b24      	ldr	r3, [pc, #144]	@ (8005e00 <HAL_RCC_OscConfig+0x244>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d74:	f7fd ff08 	bl	8003b88 <HAL_GetTick>
 8005d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d7a:	e008      	b.n	8005d8e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d7c:	f7fd ff04 	bl	8003b88 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e187      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d8e:	4b1b      	ldr	r3, [pc, #108]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1f0      	bne.n	8005d7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0308 	and.w	r3, r3, #8
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d036      	beq.n	8005e14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d016      	beq.n	8005ddc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dae:	4b15      	ldr	r3, [pc, #84]	@ (8005e04 <HAL_RCC_OscConfig+0x248>)
 8005db0:	2201      	movs	r2, #1
 8005db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005db4:	f7fd fee8 	bl	8003b88 <HAL_GetTick>
 8005db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dba:	e008      	b.n	8005dce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dbc:	f7fd fee4 	bl	8003b88 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d901      	bls.n	8005dce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e167      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005dce:	4b0b      	ldr	r3, [pc, #44]	@ (8005dfc <HAL_RCC_OscConfig+0x240>)
 8005dd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d0f0      	beq.n	8005dbc <HAL_RCC_OscConfig+0x200>
 8005dda:	e01b      	b.n	8005e14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ddc:	4b09      	ldr	r3, [pc, #36]	@ (8005e04 <HAL_RCC_OscConfig+0x248>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005de2:	f7fd fed1 	bl	8003b88 <HAL_GetTick>
 8005de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005de8:	e00e      	b.n	8005e08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dea:	f7fd fecd 	bl	8003b88 <HAL_GetTick>
 8005dee:	4602      	mov	r2, r0
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d907      	bls.n	8005e08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e150      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
 8005dfc:	40023800 	.word	0x40023800
 8005e00:	42470000 	.word	0x42470000
 8005e04:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e08:	4b88      	ldr	r3, [pc, #544]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005e0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1ea      	bne.n	8005dea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f003 0304 	and.w	r3, r3, #4
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	f000 8097 	beq.w	8005f50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e22:	2300      	movs	r3, #0
 8005e24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e26:	4b81      	ldr	r3, [pc, #516]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10f      	bne.n	8005e52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e32:	2300      	movs	r3, #0
 8005e34:	60bb      	str	r3, [r7, #8]
 8005e36:	4b7d      	ldr	r3, [pc, #500]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e3a:	4a7c      	ldr	r2, [pc, #496]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e40:	6413      	str	r3, [r2, #64]	@ 0x40
 8005e42:	4b7a      	ldr	r3, [pc, #488]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005e4a:	60bb      	str	r3, [r7, #8]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e52:	4b77      	ldr	r3, [pc, #476]	@ (8006030 <HAL_RCC_OscConfig+0x474>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d118      	bne.n	8005e90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005e5e:	4b74      	ldr	r3, [pc, #464]	@ (8006030 <HAL_RCC_OscConfig+0x474>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a73      	ldr	r2, [pc, #460]	@ (8006030 <HAL_RCC_OscConfig+0x474>)
 8005e64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e6a:	f7fd fe8d 	bl	8003b88 <HAL_GetTick>
 8005e6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e70:	e008      	b.n	8005e84 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e72:	f7fd fe89 	bl	8003b88 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d901      	bls.n	8005e84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e10c      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e84:	4b6a      	ldr	r3, [pc, #424]	@ (8006030 <HAL_RCC_OscConfig+0x474>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d0f0      	beq.n	8005e72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d106      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x2ea>
 8005e98:	4b64      	ldr	r3, [pc, #400]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005e9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e9c:	4a63      	ldr	r2, [pc, #396]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005e9e:	f043 0301 	orr.w	r3, r3, #1
 8005ea2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ea4:	e01c      	b.n	8005ee0 <HAL_RCC_OscConfig+0x324>
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	2b05      	cmp	r3, #5
 8005eac:	d10c      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x30c>
 8005eae:	4b5f      	ldr	r3, [pc, #380]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005eb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eb2:	4a5e      	ldr	r2, [pc, #376]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005eb4:	f043 0304 	orr.w	r3, r3, #4
 8005eb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005eba:	4b5c      	ldr	r3, [pc, #368]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ebe:	4a5b      	ldr	r2, [pc, #364]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005ec0:	f043 0301 	orr.w	r3, r3, #1
 8005ec4:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ec6:	e00b      	b.n	8005ee0 <HAL_RCC_OscConfig+0x324>
 8005ec8:	4b58      	ldr	r3, [pc, #352]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ecc:	4a57      	ldr	r2, [pc, #348]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005ece:	f023 0301 	bic.w	r3, r3, #1
 8005ed2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ed4:	4b55      	ldr	r3, [pc, #340]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ed8:	4a54      	ldr	r2, [pc, #336]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005eda:	f023 0304 	bic.w	r3, r3, #4
 8005ede:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d015      	beq.n	8005f14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee8:	f7fd fe4e 	bl	8003b88 <HAL_GetTick>
 8005eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eee:	e00a      	b.n	8005f06 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ef0:	f7fd fe4a 	bl	8003b88 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d901      	bls.n	8005f06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	e0cb      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f06:	4b49      	ldr	r3, [pc, #292]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005f08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f0a:	f003 0302 	and.w	r3, r3, #2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d0ee      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x334>
 8005f12:	e014      	b.n	8005f3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f14:	f7fd fe38 	bl	8003b88 <HAL_GetTick>
 8005f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f1a:	e00a      	b.n	8005f32 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f1c:	f7fd fe34 	bl	8003b88 <HAL_GetTick>
 8005f20:	4602      	mov	r2, r0
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	1ad3      	subs	r3, r2, r3
 8005f26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d901      	bls.n	8005f32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	e0b5      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f32:	4b3e      	ldr	r3, [pc, #248]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005f34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1ee      	bne.n	8005f1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f3e:	7dfb      	ldrb	r3, [r7, #23]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d105      	bne.n	8005f50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f44:	4b39      	ldr	r3, [pc, #228]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f48:	4a38      	ldr	r2, [pc, #224]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005f4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005f4e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 80a1 	beq.w	800609c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005f5a:	4b34      	ldr	r3, [pc, #208]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	f003 030c 	and.w	r3, r3, #12
 8005f62:	2b08      	cmp	r3, #8
 8005f64:	d05c      	beq.n	8006020 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	2b02      	cmp	r3, #2
 8005f6c:	d141      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f6e:	4b31      	ldr	r3, [pc, #196]	@ (8006034 <HAL_RCC_OscConfig+0x478>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f74:	f7fd fe08 	bl	8003b88 <HAL_GetTick>
 8005f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f7a:	e008      	b.n	8005f8e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f7c:	f7fd fe04 	bl	8003b88 <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d901      	bls.n	8005f8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e087      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f8e:	4b27      	ldr	r3, [pc, #156]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1f0      	bne.n	8005f7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	69da      	ldr	r2, [r3, #28]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa8:	019b      	lsls	r3, r3, #6
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb0:	085b      	lsrs	r3, r3, #1
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	041b      	lsls	r3, r3, #16
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fbc:	061b      	lsls	r3, r3, #24
 8005fbe:	491b      	ldr	r1, [pc, #108]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8006034 <HAL_RCC_OscConfig+0x478>)
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fca:	f7fd fddd 	bl	8003b88 <HAL_GetTick>
 8005fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fd0:	e008      	b.n	8005fe4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fd2:	f7fd fdd9 	bl	8003b88 <HAL_GetTick>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	1ad3      	subs	r3, r2, r3
 8005fdc:	2b02      	cmp	r3, #2
 8005fde:	d901      	bls.n	8005fe4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e05c      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fe4:	4b11      	ldr	r3, [pc, #68]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d0f0      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x416>
 8005ff0:	e054      	b.n	800609c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ff2:	4b10      	ldr	r3, [pc, #64]	@ (8006034 <HAL_RCC_OscConfig+0x478>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ff8:	f7fd fdc6 	bl	8003b88 <HAL_GetTick>
 8005ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ffe:	e008      	b.n	8006012 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006000:	f7fd fdc2 	bl	8003b88 <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b02      	cmp	r3, #2
 800600c:	d901      	bls.n	8006012 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800600e:	2303      	movs	r3, #3
 8006010:	e045      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006012:	4b06      	ldr	r3, [pc, #24]	@ (800602c <HAL_RCC_OscConfig+0x470>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1f0      	bne.n	8006000 <HAL_RCC_OscConfig+0x444>
 800601e:	e03d      	b.n	800609c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d107      	bne.n	8006038 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	e038      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
 800602c:	40023800 	.word	0x40023800
 8006030:	40007000 	.word	0x40007000
 8006034:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006038:	4b1b      	ldr	r3, [pc, #108]	@ (80060a8 <HAL_RCC_OscConfig+0x4ec>)
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	699b      	ldr	r3, [r3, #24]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d028      	beq.n	8006098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006050:	429a      	cmp	r2, r3
 8006052:	d121      	bne.n	8006098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800605e:	429a      	cmp	r2, r3
 8006060:	d11a      	bne.n	8006098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006068:	4013      	ands	r3, r2
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800606e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006070:	4293      	cmp	r3, r2
 8006072:	d111      	bne.n	8006098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607e:	085b      	lsrs	r3, r3, #1
 8006080:	3b01      	subs	r3, #1
 8006082:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006084:	429a      	cmp	r2, r3
 8006086:	d107      	bne.n	8006098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006092:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006094:	429a      	cmp	r2, r3
 8006096:	d001      	beq.n	800609c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006098:	2301      	movs	r3, #1
 800609a:	e000      	b.n	800609e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3718      	adds	r7, #24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	40023800 	.word	0x40023800

080060ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d101      	bne.n	80060c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	e0cc      	b.n	800625a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80060c0:	4b68      	ldr	r3, [pc, #416]	@ (8006264 <HAL_RCC_ClockConfig+0x1b8>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 030f 	and.w	r3, r3, #15
 80060c8:	683a      	ldr	r2, [r7, #0]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d90c      	bls.n	80060e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80060ce:	4b65      	ldr	r3, [pc, #404]	@ (8006264 <HAL_RCC_ClockConfig+0x1b8>)
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	b2d2      	uxtb	r2, r2
 80060d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80060d6:	4b63      	ldr	r3, [pc, #396]	@ (8006264 <HAL_RCC_ClockConfig+0x1b8>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 030f 	and.w	r3, r3, #15
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d001      	beq.n	80060e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	e0b8      	b.n	800625a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d020      	beq.n	8006136 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 0304 	and.w	r3, r3, #4
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d005      	beq.n	800610c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006100:	4b59      	ldr	r3, [pc, #356]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	4a58      	ldr	r2, [pc, #352]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 8006106:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800610a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 0308 	and.w	r3, r3, #8
 8006114:	2b00      	cmp	r3, #0
 8006116:	d005      	beq.n	8006124 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006118:	4b53      	ldr	r3, [pc, #332]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	4a52      	ldr	r2, [pc, #328]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800611e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006122:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006124:	4b50      	ldr	r3, [pc, #320]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	494d      	ldr	r1, [pc, #308]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 8006132:	4313      	orrs	r3, r2
 8006134:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d044      	beq.n	80061cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d107      	bne.n	800615a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800614a:	4b47      	ldr	r3, [pc, #284]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006152:	2b00      	cmp	r3, #0
 8006154:	d119      	bne.n	800618a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e07f      	b.n	800625a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	2b02      	cmp	r3, #2
 8006160:	d003      	beq.n	800616a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006166:	2b03      	cmp	r3, #3
 8006168:	d107      	bne.n	800617a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800616a:	4b3f      	ldr	r3, [pc, #252]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006172:	2b00      	cmp	r3, #0
 8006174:	d109      	bne.n	800618a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e06f      	b.n	800625a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800617a:	4b3b      	ldr	r3, [pc, #236]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d101      	bne.n	800618a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e067      	b.n	800625a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800618a:	4b37      	ldr	r3, [pc, #220]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f023 0203 	bic.w	r2, r3, #3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	4934      	ldr	r1, [pc, #208]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 8006198:	4313      	orrs	r3, r2
 800619a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800619c:	f7fd fcf4 	bl	8003b88 <HAL_GetTick>
 80061a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061a2:	e00a      	b.n	80061ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061a4:	f7fd fcf0 	bl	8003b88 <HAL_GetTick>
 80061a8:	4602      	mov	r2, r0
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e04f      	b.n	800625a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061ba:	4b2b      	ldr	r3, [pc, #172]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f003 020c 	and.w	r2, r3, #12
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d1eb      	bne.n	80061a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061cc:	4b25      	ldr	r3, [pc, #148]	@ (8006264 <HAL_RCC_ClockConfig+0x1b8>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 030f 	and.w	r3, r3, #15
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d20c      	bcs.n	80061f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061da:	4b22      	ldr	r3, [pc, #136]	@ (8006264 <HAL_RCC_ClockConfig+0x1b8>)
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	b2d2      	uxtb	r2, r2
 80061e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061e2:	4b20      	ldr	r3, [pc, #128]	@ (8006264 <HAL_RCC_ClockConfig+0x1b8>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f003 030f 	and.w	r3, r3, #15
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d001      	beq.n	80061f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e032      	b.n	800625a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 0304 	and.w	r3, r3, #4
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d008      	beq.n	8006212 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006200:	4b19      	ldr	r3, [pc, #100]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	4916      	ldr	r1, [pc, #88]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800620e:	4313      	orrs	r3, r2
 8006210:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0308 	and.w	r3, r3, #8
 800621a:	2b00      	cmp	r3, #0
 800621c:	d009      	beq.n	8006232 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800621e:	4b12      	ldr	r3, [pc, #72]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	00db      	lsls	r3, r3, #3
 800622c:	490e      	ldr	r1, [pc, #56]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800622e:	4313      	orrs	r3, r2
 8006230:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006232:	f000 f821 	bl	8006278 <HAL_RCC_GetSysClockFreq>
 8006236:	4602      	mov	r2, r0
 8006238:	4b0b      	ldr	r3, [pc, #44]	@ (8006268 <HAL_RCC_ClockConfig+0x1bc>)
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	091b      	lsrs	r3, r3, #4
 800623e:	f003 030f 	and.w	r3, r3, #15
 8006242:	490a      	ldr	r1, [pc, #40]	@ (800626c <HAL_RCC_ClockConfig+0x1c0>)
 8006244:	5ccb      	ldrb	r3, [r1, r3]
 8006246:	fa22 f303 	lsr.w	r3, r2, r3
 800624a:	4a09      	ldr	r2, [pc, #36]	@ (8006270 <HAL_RCC_ClockConfig+0x1c4>)
 800624c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800624e:	4b09      	ldr	r3, [pc, #36]	@ (8006274 <HAL_RCC_ClockConfig+0x1c8>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4618      	mov	r0, r3
 8006254:	f7fd fc54 	bl	8003b00 <HAL_InitTick>

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	40023c00 	.word	0x40023c00
 8006268:	40023800 	.word	0x40023800
 800626c:	0800a010 	.word	0x0800a010
 8006270:	20000010 	.word	0x20000010
 8006274:	20000014 	.word	0x20000014

08006278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800627c:	b094      	sub	sp, #80	@ 0x50
 800627e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006280:	2300      	movs	r3, #0
 8006282:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006284:	2300      	movs	r3, #0
 8006286:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006288:	2300      	movs	r3, #0
 800628a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006290:	4b79      	ldr	r3, [pc, #484]	@ (8006478 <HAL_RCC_GetSysClockFreq+0x200>)
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f003 030c 	and.w	r3, r3, #12
 8006298:	2b08      	cmp	r3, #8
 800629a:	d00d      	beq.n	80062b8 <HAL_RCC_GetSysClockFreq+0x40>
 800629c:	2b08      	cmp	r3, #8
 800629e:	f200 80e1 	bhi.w	8006464 <HAL_RCC_GetSysClockFreq+0x1ec>
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d002      	beq.n	80062ac <HAL_RCC_GetSysClockFreq+0x34>
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	d003      	beq.n	80062b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80062aa:	e0db      	b.n	8006464 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062ac:	4b73      	ldr	r3, [pc, #460]	@ (800647c <HAL_RCC_GetSysClockFreq+0x204>)
 80062ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062b0:	e0db      	b.n	800646a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062b2:	4b73      	ldr	r3, [pc, #460]	@ (8006480 <HAL_RCC_GetSysClockFreq+0x208>)
 80062b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062b6:	e0d8      	b.n	800646a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062b8:	4b6f      	ldr	r3, [pc, #444]	@ (8006478 <HAL_RCC_GetSysClockFreq+0x200>)
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80062c2:	4b6d      	ldr	r3, [pc, #436]	@ (8006478 <HAL_RCC_GetSysClockFreq+0x200>)
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d063      	beq.n	8006396 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062ce:	4b6a      	ldr	r3, [pc, #424]	@ (8006478 <HAL_RCC_GetSysClockFreq+0x200>)
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	099b      	lsrs	r3, r3, #6
 80062d4:	2200      	movs	r2, #0
 80062d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80062da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80062e2:	2300      	movs	r3, #0
 80062e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80062e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80062ea:	4622      	mov	r2, r4
 80062ec:	462b      	mov	r3, r5
 80062ee:	f04f 0000 	mov.w	r0, #0
 80062f2:	f04f 0100 	mov.w	r1, #0
 80062f6:	0159      	lsls	r1, r3, #5
 80062f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062fc:	0150      	lsls	r0, r2, #5
 80062fe:	4602      	mov	r2, r0
 8006300:	460b      	mov	r3, r1
 8006302:	4621      	mov	r1, r4
 8006304:	1a51      	subs	r1, r2, r1
 8006306:	6139      	str	r1, [r7, #16]
 8006308:	4629      	mov	r1, r5
 800630a:	eb63 0301 	sbc.w	r3, r3, r1
 800630e:	617b      	str	r3, [r7, #20]
 8006310:	f04f 0200 	mov.w	r2, #0
 8006314:	f04f 0300 	mov.w	r3, #0
 8006318:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800631c:	4659      	mov	r1, fp
 800631e:	018b      	lsls	r3, r1, #6
 8006320:	4651      	mov	r1, sl
 8006322:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006326:	4651      	mov	r1, sl
 8006328:	018a      	lsls	r2, r1, #6
 800632a:	4651      	mov	r1, sl
 800632c:	ebb2 0801 	subs.w	r8, r2, r1
 8006330:	4659      	mov	r1, fp
 8006332:	eb63 0901 	sbc.w	r9, r3, r1
 8006336:	f04f 0200 	mov.w	r2, #0
 800633a:	f04f 0300 	mov.w	r3, #0
 800633e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006342:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006346:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800634a:	4690      	mov	r8, r2
 800634c:	4699      	mov	r9, r3
 800634e:	4623      	mov	r3, r4
 8006350:	eb18 0303 	adds.w	r3, r8, r3
 8006354:	60bb      	str	r3, [r7, #8]
 8006356:	462b      	mov	r3, r5
 8006358:	eb49 0303 	adc.w	r3, r9, r3
 800635c:	60fb      	str	r3, [r7, #12]
 800635e:	f04f 0200 	mov.w	r2, #0
 8006362:	f04f 0300 	mov.w	r3, #0
 8006366:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800636a:	4629      	mov	r1, r5
 800636c:	024b      	lsls	r3, r1, #9
 800636e:	4621      	mov	r1, r4
 8006370:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006374:	4621      	mov	r1, r4
 8006376:	024a      	lsls	r2, r1, #9
 8006378:	4610      	mov	r0, r2
 800637a:	4619      	mov	r1, r3
 800637c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800637e:	2200      	movs	r2, #0
 8006380:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006382:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006384:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006388:	f7f9 ff8a 	bl	80002a0 <__aeabi_uldivmod>
 800638c:	4602      	mov	r2, r0
 800638e:	460b      	mov	r3, r1
 8006390:	4613      	mov	r3, r2
 8006392:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006394:	e058      	b.n	8006448 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006396:	4b38      	ldr	r3, [pc, #224]	@ (8006478 <HAL_RCC_GetSysClockFreq+0x200>)
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	099b      	lsrs	r3, r3, #6
 800639c:	2200      	movs	r2, #0
 800639e:	4618      	mov	r0, r3
 80063a0:	4611      	mov	r1, r2
 80063a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80063a6:	623b      	str	r3, [r7, #32]
 80063a8:	2300      	movs	r3, #0
 80063aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80063ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80063b0:	4642      	mov	r2, r8
 80063b2:	464b      	mov	r3, r9
 80063b4:	f04f 0000 	mov.w	r0, #0
 80063b8:	f04f 0100 	mov.w	r1, #0
 80063bc:	0159      	lsls	r1, r3, #5
 80063be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063c2:	0150      	lsls	r0, r2, #5
 80063c4:	4602      	mov	r2, r0
 80063c6:	460b      	mov	r3, r1
 80063c8:	4641      	mov	r1, r8
 80063ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80063ce:	4649      	mov	r1, r9
 80063d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80063d4:	f04f 0200 	mov.w	r2, #0
 80063d8:	f04f 0300 	mov.w	r3, #0
 80063dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80063e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80063e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80063e8:	ebb2 040a 	subs.w	r4, r2, sl
 80063ec:	eb63 050b 	sbc.w	r5, r3, fp
 80063f0:	f04f 0200 	mov.w	r2, #0
 80063f4:	f04f 0300 	mov.w	r3, #0
 80063f8:	00eb      	lsls	r3, r5, #3
 80063fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063fe:	00e2      	lsls	r2, r4, #3
 8006400:	4614      	mov	r4, r2
 8006402:	461d      	mov	r5, r3
 8006404:	4643      	mov	r3, r8
 8006406:	18e3      	adds	r3, r4, r3
 8006408:	603b      	str	r3, [r7, #0]
 800640a:	464b      	mov	r3, r9
 800640c:	eb45 0303 	adc.w	r3, r5, r3
 8006410:	607b      	str	r3, [r7, #4]
 8006412:	f04f 0200 	mov.w	r2, #0
 8006416:	f04f 0300 	mov.w	r3, #0
 800641a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800641e:	4629      	mov	r1, r5
 8006420:	028b      	lsls	r3, r1, #10
 8006422:	4621      	mov	r1, r4
 8006424:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006428:	4621      	mov	r1, r4
 800642a:	028a      	lsls	r2, r1, #10
 800642c:	4610      	mov	r0, r2
 800642e:	4619      	mov	r1, r3
 8006430:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006432:	2200      	movs	r2, #0
 8006434:	61bb      	str	r3, [r7, #24]
 8006436:	61fa      	str	r2, [r7, #28]
 8006438:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800643c:	f7f9 ff30 	bl	80002a0 <__aeabi_uldivmod>
 8006440:	4602      	mov	r2, r0
 8006442:	460b      	mov	r3, r1
 8006444:	4613      	mov	r3, r2
 8006446:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006448:	4b0b      	ldr	r3, [pc, #44]	@ (8006478 <HAL_RCC_GetSysClockFreq+0x200>)
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	0c1b      	lsrs	r3, r3, #16
 800644e:	f003 0303 	and.w	r3, r3, #3
 8006452:	3301      	adds	r3, #1
 8006454:	005b      	lsls	r3, r3, #1
 8006456:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006458:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800645a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800645c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006460:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006462:	e002      	b.n	800646a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006464:	4b05      	ldr	r3, [pc, #20]	@ (800647c <HAL_RCC_GetSysClockFreq+0x204>)
 8006466:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006468:	bf00      	nop
    }
  }
  return sysclockfreq;
 800646a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800646c:	4618      	mov	r0, r3
 800646e:	3750      	adds	r7, #80	@ 0x50
 8006470:	46bd      	mov	sp, r7
 8006472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006476:	bf00      	nop
 8006478:	40023800 	.word	0x40023800
 800647c:	00f42400 	.word	0x00f42400
 8006480:	007a1200 	.word	0x007a1200

08006484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006484:	b480      	push	{r7}
 8006486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006488:	4b03      	ldr	r3, [pc, #12]	@ (8006498 <HAL_RCC_GetHCLKFreq+0x14>)
 800648a:	681b      	ldr	r3, [r3, #0]
}
 800648c:	4618      	mov	r0, r3
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	20000010 	.word	0x20000010

0800649c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80064a0:	f7ff fff0 	bl	8006484 <HAL_RCC_GetHCLKFreq>
 80064a4:	4602      	mov	r2, r0
 80064a6:	4b05      	ldr	r3, [pc, #20]	@ (80064bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	0a9b      	lsrs	r3, r3, #10
 80064ac:	f003 0307 	and.w	r3, r3, #7
 80064b0:	4903      	ldr	r1, [pc, #12]	@ (80064c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064b2:	5ccb      	ldrb	r3, [r1, r3]
 80064b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	bd80      	pop	{r7, pc}
 80064bc:	40023800 	.word	0x40023800
 80064c0:	0800a020 	.word	0x0800a020

080064c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80064d0:	2300      	movs	r3, #0
 80064d2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0301 	and.w	r3, r3, #1
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10b      	bne.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d105      	bne.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d075      	beq.n	80065e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80064f8:	4b91      	ldr	r3, [pc, #580]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80064fa:	2200      	movs	r2, #0
 80064fc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80064fe:	f7fd fb43 	bl	8003b88 <HAL_GetTick>
 8006502:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006504:	e008      	b.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006506:	f7fd fb3f 	bl	8003b88 <HAL_GetTick>
 800650a:	4602      	mov	r2, r0
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	2b02      	cmp	r3, #2
 8006512:	d901      	bls.n	8006518 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e189      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006518:	4b8a      	ldr	r3, [pc, #552]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1f0      	bne.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0301 	and.w	r3, r3, #1
 800652c:	2b00      	cmp	r3, #0
 800652e:	d009      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	019a      	lsls	r2, r3, #6
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	071b      	lsls	r3, r3, #28
 800653c:	4981      	ldr	r1, [pc, #516]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800653e:	4313      	orrs	r3, r2
 8006540:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d01f      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006550:	4b7c      	ldr	r3, [pc, #496]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006552:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006556:	0f1b      	lsrs	r3, r3, #28
 8006558:	f003 0307 	and.w	r3, r3, #7
 800655c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	019a      	lsls	r2, r3, #6
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	061b      	lsls	r3, r3, #24
 800656a:	431a      	orrs	r2, r3
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	071b      	lsls	r3, r3, #28
 8006570:	4974      	ldr	r1, [pc, #464]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006572:	4313      	orrs	r3, r2
 8006574:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006578:	4b72      	ldr	r3, [pc, #456]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800657a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800657e:	f023 021f 	bic.w	r2, r3, #31
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	3b01      	subs	r3, #1
 8006588:	496e      	ldr	r1, [pc, #440]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800658a:	4313      	orrs	r3, r2
 800658c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00d      	beq.n	80065b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	019a      	lsls	r2, r3, #6
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	061b      	lsls	r3, r3, #24
 80065a8:	431a      	orrs	r2, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	071b      	lsls	r3, r3, #28
 80065b0:	4964      	ldr	r1, [pc, #400]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065b2:	4313      	orrs	r3, r2
 80065b4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80065b8:	4b61      	ldr	r3, [pc, #388]	@ (8006740 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80065ba:	2201      	movs	r2, #1
 80065bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065be:	f7fd fae3 	bl	8003b88 <HAL_GetTick>
 80065c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065c4:	e008      	b.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80065c6:	f7fd fadf 	bl	8003b88 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d901      	bls.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e129      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80065d8:	4b5a      	ldr	r3, [pc, #360]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d0f0      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0304 	and.w	r3, r3, #4
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d105      	bne.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d079      	beq.n	80066f0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80065fc:	4b52      	ldr	r3, [pc, #328]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80065fe:	2200      	movs	r2, #0
 8006600:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006602:	f7fd fac1 	bl	8003b88 <HAL_GetTick>
 8006606:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006608:	e008      	b.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800660a:	f7fd fabd 	bl	8003b88 <HAL_GetTick>
 800660e:	4602      	mov	r2, r0
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	2b02      	cmp	r3, #2
 8006616:	d901      	bls.n	800661c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e107      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800661c:	4b49      	ldr	r3, [pc, #292]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006624:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006628:	d0ef      	beq.n	800660a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0304 	and.w	r3, r3, #4
 8006632:	2b00      	cmp	r3, #0
 8006634:	d020      	beq.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006636:	4b43      	ldr	r3, [pc, #268]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800663c:	0f1b      	lsrs	r3, r3, #28
 800663e:	f003 0307 	and.w	r3, r3, #7
 8006642:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	019a      	lsls	r2, r3, #6
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	695b      	ldr	r3, [r3, #20]
 800664e:	061b      	lsls	r3, r3, #24
 8006650:	431a      	orrs	r2, r3
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	071b      	lsls	r3, r3, #28
 8006656:	493b      	ldr	r1, [pc, #236]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006658:	4313      	orrs	r3, r2
 800665a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800665e:	4b39      	ldr	r3, [pc, #228]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006660:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006664:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a1b      	ldr	r3, [r3, #32]
 800666c:	3b01      	subs	r3, #1
 800666e:	021b      	lsls	r3, r3, #8
 8006670:	4934      	ldr	r1, [pc, #208]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006672:	4313      	orrs	r3, r2
 8006674:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f003 0308 	and.w	r3, r3, #8
 8006680:	2b00      	cmp	r3, #0
 8006682:	d01e      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006684:	4b2f      	ldr	r3, [pc, #188]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800668a:	0e1b      	lsrs	r3, r3, #24
 800668c:	f003 030f 	and.w	r3, r3, #15
 8006690:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	019a      	lsls	r2, r3, #6
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	061b      	lsls	r3, r3, #24
 800669c:	431a      	orrs	r2, r3
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	071b      	lsls	r3, r3, #28
 80066a4:	4927      	ldr	r1, [pc, #156]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80066ac:	4b25      	ldr	r3, [pc, #148]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066b2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ba:	4922      	ldr	r1, [pc, #136]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80066c2:	4b21      	ldr	r3, [pc, #132]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80066c4:	2201      	movs	r2, #1
 80066c6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80066c8:	f7fd fa5e 	bl	8003b88 <HAL_GetTick>
 80066cc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80066ce:	e008      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80066d0:	f7fd fa5a 	bl	8003b88 <HAL_GetTick>
 80066d4:	4602      	mov	r2, r0
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d901      	bls.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80066de:	2303      	movs	r3, #3
 80066e0:	e0a4      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80066e2:	4b18      	ldr	r3, [pc, #96]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066ee:	d1ef      	bne.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 0320 	and.w	r3, r3, #32
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 808b 	beq.w	8006814 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80066fe:	2300      	movs	r3, #0
 8006700:	60fb      	str	r3, [r7, #12]
 8006702:	4b10      	ldr	r3, [pc, #64]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006706:	4a0f      	ldr	r2, [pc, #60]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006708:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800670c:	6413      	str	r3, [r2, #64]	@ 0x40
 800670e:	4b0d      	ldr	r3, [pc, #52]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006712:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800671a:	4b0c      	ldr	r3, [pc, #48]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a0b      	ldr	r2, [pc, #44]	@ (800674c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006720:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006724:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006726:	f7fd fa2f 	bl	8003b88 <HAL_GetTick>
 800672a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800672c:	e010      	b.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800672e:	f7fd fa2b 	bl	8003b88 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	2b02      	cmp	r3, #2
 800673a:	d909      	bls.n	8006750 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e075      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006740:	42470068 	.word	0x42470068
 8006744:	40023800 	.word	0x40023800
 8006748:	42470070 	.word	0x42470070
 800674c:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006750:	4b38      	ldr	r3, [pc, #224]	@ (8006834 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006758:	2b00      	cmp	r3, #0
 800675a:	d0e8      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800675c:	4b36      	ldr	r3, [pc, #216]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800675e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006760:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006764:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d02f      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x308>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006770:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	429a      	cmp	r2, r3
 8006778:	d028      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800677a:	4b2f      	ldr	r3, [pc, #188]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800677c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800677e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006782:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006784:	4b2d      	ldr	r3, [pc, #180]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006786:	2201      	movs	r2, #1
 8006788:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800678a:	4b2c      	ldr	r3, [pc, #176]	@ (800683c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800678c:	2200      	movs	r2, #0
 800678e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006790:	4a29      	ldr	r2, [pc, #164]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006796:	4b28      	ldr	r3, [pc, #160]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006798:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d114      	bne.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80067a2:	f7fd f9f1 	bl	8003b88 <HAL_GetTick>
 80067a6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067a8:	e00a      	b.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067aa:	f7fd f9ed 	bl	8003b88 <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d901      	bls.n	80067c0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	e035      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80067c0:	4b1d      	ldr	r3, [pc, #116]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067c4:	f003 0302 	and.w	r3, r3, #2
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d0ee      	beq.n	80067aa <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80067d8:	d10d      	bne.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 80067da:	4b17      	ldr	r3, [pc, #92]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80067ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067ee:	4912      	ldr	r1, [pc, #72]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067f0:	4313      	orrs	r3, r2
 80067f2:	608b      	str	r3, [r1, #8]
 80067f4:	e005      	b.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80067f6:	4b10      	ldr	r3, [pc, #64]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	4a0f      	ldr	r2, [pc, #60]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80067fc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006800:	6093      	str	r3, [r2, #8]
 8006802:	4b0d      	ldr	r3, [pc, #52]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006804:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800680e:	490a      	ldr	r1, [pc, #40]	@ (8006838 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006810:	4313      	orrs	r3, r2
 8006812:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0310 	and.w	r3, r3, #16
 800681c:	2b00      	cmp	r3, #0
 800681e:	d004      	beq.n	800682a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8006826:	4b06      	ldr	r3, [pc, #24]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006828:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3718      	adds	r7, #24
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}
 8006834:	40007000 	.word	0x40007000
 8006838:	40023800 	.word	0x40023800
 800683c:	42470e40 	.word	0x42470e40
 8006840:	424711e0 	.word	0x424711e0

08006844 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e01c      	b.n	8006890 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	795b      	ldrb	r3, [r3, #5]
 800685a:	b2db      	uxtb	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	d105      	bne.n	800686c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7fc fc16 	bl	8003098 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2202      	movs	r2, #2
 8006870:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f042 0204 	orr.w	r2, r2, #4
 8006880:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2201      	movs	r2, #1
 8006886:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800688e:	2300      	movs	r3, #0
}
 8006890:	4618      	mov	r0, r3
 8006892:	3708      	adds	r7, #8
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	791b      	ldrb	r3, [r3, #4]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d101      	bne.n	80068b2 <HAL_RNG_GenerateRandomNumber+0x1a>
 80068ae:	2302      	movs	r3, #2
 80068b0:	e044      	b.n	800693c <HAL_RNG_GenerateRandomNumber+0xa4>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	795b      	ldrb	r3, [r3, #5]
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d133      	bne.n	800692a <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2202      	movs	r2, #2
 80068c6:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80068c8:	f7fd f95e 	bl	8003b88 <HAL_GetTick>
 80068cc:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80068ce:	e018      	b.n	8006902 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80068d0:	f7fd f95a 	bl	8003b88 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d911      	bls.n	8006902 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d00a      	beq.n	8006902 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2201      	movs	r2, #1
 80068f0:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2202      	movs	r2, #2
 80068f6:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e01c      	b.n	800693c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	2b01      	cmp	r3, #1
 800690e:	d1df      	bne.n	80068d0 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	689a      	ldr	r2, [r3, #8]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	68da      	ldr	r2, [r3, #12]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2201      	movs	r2, #1
 8006926:	715a      	strb	r2, [r3, #5]
 8006928:	e004      	b.n	8006934 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2204      	movs	r2, #4
 800692e:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006930:	2301      	movs	r3, #1
 8006932:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	711a      	strb	r2, [r3, #4]

  return status;
 800693a:	7bfb      	ldrb	r3, [r7, #15]
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b082      	sub	sp, #8
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d101      	bne.n	8006956 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e07b      	b.n	8006a4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800695a:	2b00      	cmp	r3, #0
 800695c:	d108      	bne.n	8006970 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006966:	d009      	beq.n	800697c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	61da      	str	r2, [r3, #28]
 800696e:	e005      	b.n	800697c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d106      	bne.n	800699c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7fc fba0 	bl	80030dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2202      	movs	r2, #2
 80069a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80069c4:	431a      	orrs	r2, r3
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069ce:	431a      	orrs	r2, r3
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	f003 0302 	and.w	r3, r3, #2
 80069d8:	431a      	orrs	r2, r3
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	431a      	orrs	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80069ec:	431a      	orrs	r2, r3
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80069f6:	431a      	orrs	r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6a1b      	ldr	r3, [r3, #32]
 80069fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a00:	ea42 0103 	orr.w	r1, r2, r3
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a08:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	430a      	orrs	r2, r1
 8006a12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	0c1b      	lsrs	r3, r3, #16
 8006a1a:	f003 0104 	and.w	r1, r3, #4
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a22:	f003 0210 	and.w	r2, r3, #16
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	430a      	orrs	r2, r1
 8006a2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	69da      	ldr	r2, [r3, #28]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2201      	movs	r2, #1
 8006a48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3708      	adds	r7, #8
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b082      	sub	sp, #8
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d101      	bne.n	8006a68 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e01a      	b.n	8006a9e <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a7e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7fc fb73 	bl	800316c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3708      	adds	r7, #8
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b088      	sub	sp, #32
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	60f8      	str	r0, [r7, #12]
 8006aae:	60b9      	str	r1, [r7, #8]
 8006ab0:	603b      	str	r3, [r7, #0]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ab6:	f7fd f867 	bl	8003b88 <HAL_GetTick>
 8006aba:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006abc:	88fb      	ldrh	r3, [r7, #6]
 8006abe:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d001      	beq.n	8006ad0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006acc:	2302      	movs	r3, #2
 8006ace:	e12a      	b.n	8006d26 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d002      	beq.n	8006adc <HAL_SPI_Transmit+0x36>
 8006ad6:	88fb      	ldrh	r3, [r7, #6]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d101      	bne.n	8006ae0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006adc:	2301      	movs	r3, #1
 8006ade:	e122      	b.n	8006d26 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d101      	bne.n	8006aee <HAL_SPI_Transmit+0x48>
 8006aea:	2302      	movs	r3, #2
 8006aec:	e11b      	b.n	8006d26 <HAL_SPI_Transmit+0x280>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2203      	movs	r2, #3
 8006afa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	88fa      	ldrh	r2, [r7, #6]
 8006b0e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	88fa      	ldrh	r2, [r7, #6]
 8006b14:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2200      	movs	r2, #0
 8006b32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b3c:	d10f      	bne.n	8006b5e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b68:	2b40      	cmp	r3, #64	@ 0x40
 8006b6a:	d007      	beq.n	8006b7c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006b84:	d152      	bne.n	8006c2c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d002      	beq.n	8006b94 <HAL_SPI_Transmit+0xee>
 8006b8e:	8b7b      	ldrh	r3, [r7, #26]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d145      	bne.n	8006c20 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b98:	881a      	ldrh	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba4:	1c9a      	adds	r2, r3, #2
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	3b01      	subs	r3, #1
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006bb8:	e032      	b.n	8006c20 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	f003 0302 	and.w	r3, r3, #2
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d112      	bne.n	8006bee <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bcc:	881a      	ldrh	r2, [r3, #0]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bd8:	1c9a      	adds	r2, r3, #2
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	3b01      	subs	r3, #1
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006bec:	e018      	b.n	8006c20 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bee:	f7fc ffcb 	bl	8003b88 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d803      	bhi.n	8006c06 <HAL_SPI_Transmit+0x160>
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c04:	d102      	bne.n	8006c0c <HAL_SPI_Transmit+0x166>
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d109      	bne.n	8006c20 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006c1c:	2303      	movs	r3, #3
 8006c1e:	e082      	b.n	8006d26 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c24:	b29b      	uxth	r3, r3
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d1c7      	bne.n	8006bba <HAL_SPI_Transmit+0x114>
 8006c2a:	e053      	b.n	8006cd4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d002      	beq.n	8006c3a <HAL_SPI_Transmit+0x194>
 8006c34:	8b7b      	ldrh	r3, [r7, #26]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d147      	bne.n	8006cca <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	330c      	adds	r3, #12
 8006c44:	7812      	ldrb	r2, [r2, #0]
 8006c46:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c4c:	1c5a      	adds	r2, r3, #1
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006c60:	e033      	b.n	8006cca <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f003 0302 	and.w	r3, r3, #2
 8006c6c:	2b02      	cmp	r3, #2
 8006c6e:	d113      	bne.n	8006c98 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	330c      	adds	r3, #12
 8006c7a:	7812      	ldrb	r2, [r2, #0]
 8006c7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c82:	1c5a      	adds	r2, r3, #1
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006c96:	e018      	b.n	8006cca <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c98:	f7fc ff76 	bl	8003b88 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	69fb      	ldr	r3, [r7, #28]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d803      	bhi.n	8006cb0 <HAL_SPI_Transmit+0x20a>
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006cae:	d102      	bne.n	8006cb6 <HAL_SPI_Transmit+0x210>
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d109      	bne.n	8006cca <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e02d      	b.n	8006d26 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1c6      	bne.n	8006c62 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006cd4:	69fa      	ldr	r2, [r7, #28]
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f000 f8bf 	bl	8006e5c <SPI_EndRxTxTransaction>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10a      	bne.n	8006d08 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	617b      	str	r3, [r7, #20]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	617b      	str	r3, [r7, #20]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	617b      	str	r3, [r7, #20]
 8006d06:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2200      	movs	r2, #0
 8006d14:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d001      	beq.n	8006d24 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	e000      	b.n	8006d26 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006d24:	2300      	movs	r3, #0
  }
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3720      	adds	r7, #32
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006d2e:	b480      	push	{r7}
 8006d30:	b083      	sub	sp, #12
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006d3c:	b2db      	uxtb	r3, r3
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	370c      	adds	r7, #12
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
	...

08006d4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	60f8      	str	r0, [r7, #12]
 8006d54:	60b9      	str	r1, [r7, #8]
 8006d56:	603b      	str	r3, [r7, #0]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d5c:	f7fc ff14 	bl	8003b88 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d64:	1a9b      	subs	r3, r3, r2
 8006d66:	683a      	ldr	r2, [r7, #0]
 8006d68:	4413      	add	r3, r2
 8006d6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d6c:	f7fc ff0c 	bl	8003b88 <HAL_GetTick>
 8006d70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d72:	4b39      	ldr	r3, [pc, #228]	@ (8006e58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	015b      	lsls	r3, r3, #5
 8006d78:	0d1b      	lsrs	r3, r3, #20
 8006d7a:	69fa      	ldr	r2, [r7, #28]
 8006d7c:	fb02 f303 	mul.w	r3, r2, r3
 8006d80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d82:	e054      	b.n	8006e2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d8a:	d050      	beq.n	8006e2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d8c:	f7fc fefc 	bl	8003b88 <HAL_GetTick>
 8006d90:	4602      	mov	r2, r0
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	1ad3      	subs	r3, r2, r3
 8006d96:	69fa      	ldr	r2, [r7, #28]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d902      	bls.n	8006da2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d13d      	bne.n	8006e1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	685a      	ldr	r2, [r3, #4]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006db0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006dba:	d111      	bne.n	8006de0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006dc4:	d004      	beq.n	8006dd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006dce:	d107      	bne.n	8006de0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681a      	ldr	r2, [r3, #0]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006dde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006de8:	d10f      	bne.n	8006e0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006df8:	601a      	str	r2, [r3, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006e08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e017      	b.n	8006e4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d101      	bne.n	8006e28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e24:	2300      	movs	r3, #0
 8006e26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	689a      	ldr	r2, [r3, #8]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	4013      	ands	r3, r2
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	bf0c      	ite	eq
 8006e3e:	2301      	moveq	r3, #1
 8006e40:	2300      	movne	r3, #0
 8006e42:	b2db      	uxtb	r3, r3
 8006e44:	461a      	mov	r2, r3
 8006e46:	79fb      	ldrb	r3, [r7, #7]
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d19b      	bne.n	8006d84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	3720      	adds	r7, #32
 8006e52:	46bd      	mov	sp, r7
 8006e54:	bd80      	pop	{r7, pc}
 8006e56:	bf00      	nop
 8006e58:	20000010 	.word	0x20000010

08006e5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b088      	sub	sp, #32
 8006e60:	af02      	add	r7, sp, #8
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	2102      	movs	r1, #2
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f7ff ff6a 	bl	8006d4c <SPI_WaitFlagStateUntilTimeout>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d007      	beq.n	8006e8e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e82:	f043 0220 	orr.w	r2, r3, #32
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e032      	b.n	8006ef4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8006efc <SPI_EndRxTxTransaction+0xa0>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a1b      	ldr	r2, [pc, #108]	@ (8006f00 <SPI_EndRxTxTransaction+0xa4>)
 8006e94:	fba2 2303 	umull	r2, r3, r2, r3
 8006e98:	0d5b      	lsrs	r3, r3, #21
 8006e9a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006e9e:	fb02 f303 	mul.w	r3, r2, r3
 8006ea2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006eac:	d112      	bne.n	8006ed4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	2180      	movs	r1, #128	@ 0x80
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f7ff ff47 	bl	8006d4c <SPI_WaitFlagStateUntilTimeout>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d016      	beq.n	8006ef2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ec8:	f043 0220 	orr.w	r2, r3, #32
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e00f      	b.n	8006ef4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	3b01      	subs	r3, #1
 8006ede:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006eea:	2b80      	cmp	r3, #128	@ 0x80
 8006eec:	d0f2      	beq.n	8006ed4 <SPI_EndRxTxTransaction+0x78>
 8006eee:	e000      	b.n	8006ef2 <SPI_EndRxTxTransaction+0x96>
        break;
 8006ef0:	bf00      	nop
  }

  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3718      	adds	r7, #24
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}
 8006efc:	20000010 	.word	0x20000010
 8006f00:	165e9f81 	.word	0x165e9f81

08006f04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b082      	sub	sp, #8
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e041      	b.n	8006f9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d106      	bne.n	8006f30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7fc f93c 	bl	80031a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2202      	movs	r2, #2
 8006f34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	3304      	adds	r3, #4
 8006f40:	4619      	mov	r1, r3
 8006f42:	4610      	mov	r0, r2
 8006f44:	f000 fb14 	bl	8007570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2201      	movs	r2, #1
 8006f54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3708      	adds	r7, #8
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}
	...

08006fa4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b085      	sub	sp, #20
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d001      	beq.n	8006fbc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e046      	b.n	800704a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2202      	movs	r2, #2
 8006fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a23      	ldr	r2, [pc, #140]	@ (8007058 <HAL_TIM_Base_Start+0xb4>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d022      	beq.n	8007014 <HAL_TIM_Base_Start+0x70>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fd6:	d01d      	beq.n	8007014 <HAL_TIM_Base_Start+0x70>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a1f      	ldr	r2, [pc, #124]	@ (800705c <HAL_TIM_Base_Start+0xb8>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d018      	beq.n	8007014 <HAL_TIM_Base_Start+0x70>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a1e      	ldr	r2, [pc, #120]	@ (8007060 <HAL_TIM_Base_Start+0xbc>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d013      	beq.n	8007014 <HAL_TIM_Base_Start+0x70>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a1c      	ldr	r2, [pc, #112]	@ (8007064 <HAL_TIM_Base_Start+0xc0>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d00e      	beq.n	8007014 <HAL_TIM_Base_Start+0x70>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a1b      	ldr	r2, [pc, #108]	@ (8007068 <HAL_TIM_Base_Start+0xc4>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d009      	beq.n	8007014 <HAL_TIM_Base_Start+0x70>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a19      	ldr	r2, [pc, #100]	@ (800706c <HAL_TIM_Base_Start+0xc8>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d004      	beq.n	8007014 <HAL_TIM_Base_Start+0x70>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a18      	ldr	r2, [pc, #96]	@ (8007070 <HAL_TIM_Base_Start+0xcc>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d111      	bne.n	8007038 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	f003 0307 	and.w	r3, r3, #7
 800701e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2b06      	cmp	r3, #6
 8007024:	d010      	beq.n	8007048 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f042 0201 	orr.w	r2, r2, #1
 8007034:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007036:	e007      	b.n	8007048 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0201 	orr.w	r2, r2, #1
 8007046:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	40010000 	.word	0x40010000
 800705c:	40000400 	.word	0x40000400
 8007060:	40000800 	.word	0x40000800
 8007064:	40000c00 	.word	0x40000c00
 8007068:	40010400 	.word	0x40010400
 800706c:	40014000 	.word	0x40014000
 8007070:	40001800 	.word	0x40001800

08007074 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007082:	b2db      	uxtb	r3, r3
 8007084:	2b01      	cmp	r3, #1
 8007086:	d001      	beq.n	800708c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e04e      	b.n	800712a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2202      	movs	r2, #2
 8007090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	68da      	ldr	r2, [r3, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f042 0201 	orr.w	r2, r2, #1
 80070a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a23      	ldr	r2, [pc, #140]	@ (8007138 <HAL_TIM_Base_Start_IT+0xc4>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d022      	beq.n	80070f4 <HAL_TIM_Base_Start_IT+0x80>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070b6:	d01d      	beq.n	80070f4 <HAL_TIM_Base_Start_IT+0x80>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a1f      	ldr	r2, [pc, #124]	@ (800713c <HAL_TIM_Base_Start_IT+0xc8>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d018      	beq.n	80070f4 <HAL_TIM_Base_Start_IT+0x80>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4a1e      	ldr	r2, [pc, #120]	@ (8007140 <HAL_TIM_Base_Start_IT+0xcc>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d013      	beq.n	80070f4 <HAL_TIM_Base_Start_IT+0x80>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a1c      	ldr	r2, [pc, #112]	@ (8007144 <HAL_TIM_Base_Start_IT+0xd0>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d00e      	beq.n	80070f4 <HAL_TIM_Base_Start_IT+0x80>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a1b      	ldr	r2, [pc, #108]	@ (8007148 <HAL_TIM_Base_Start_IT+0xd4>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d009      	beq.n	80070f4 <HAL_TIM_Base_Start_IT+0x80>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4a19      	ldr	r2, [pc, #100]	@ (800714c <HAL_TIM_Base_Start_IT+0xd8>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d004      	beq.n	80070f4 <HAL_TIM_Base_Start_IT+0x80>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	4a18      	ldr	r2, [pc, #96]	@ (8007150 <HAL_TIM_Base_Start_IT+0xdc>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d111      	bne.n	8007118 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f003 0307 	and.w	r3, r3, #7
 80070fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2b06      	cmp	r3, #6
 8007104:	d010      	beq.n	8007128 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f042 0201 	orr.w	r2, r2, #1
 8007114:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007116:	e007      	b.n	8007128 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f042 0201 	orr.w	r2, r2, #1
 8007126:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007128:	2300      	movs	r3, #0
}
 800712a:	4618      	mov	r0, r3
 800712c:	3714      	adds	r7, #20
 800712e:	46bd      	mov	sp, r7
 8007130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007134:	4770      	bx	lr
 8007136:	bf00      	nop
 8007138:	40010000 	.word	0x40010000
 800713c:	40000400 	.word	0x40000400
 8007140:	40000800 	.word	0x40000800
 8007144:	40000c00 	.word	0x40000c00
 8007148:	40010400 	.word	0x40010400
 800714c:	40014000 	.word	0x40014000
 8007150:	40001800 	.word	0x40001800

08007154 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	68da      	ldr	r2, [r3, #12]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f022 0201 	bic.w	r2, r2, #1
 800716a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6a1a      	ldr	r2, [r3, #32]
 8007172:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007176:	4013      	ands	r3, r2
 8007178:	2b00      	cmp	r3, #0
 800717a:	d10f      	bne.n	800719c <HAL_TIM_Base_Stop_IT+0x48>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6a1a      	ldr	r2, [r3, #32]
 8007182:	f240 4344 	movw	r3, #1092	@ 0x444
 8007186:	4013      	ands	r3, r2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d107      	bne.n	800719c <HAL_TIM_Base_Stop_IT+0x48>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f022 0201 	bic.w	r2, r2, #1
 800719a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071b2:	b580      	push	{r7, lr}
 80071b4:	b084      	sub	sp, #16
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	68db      	ldr	r3, [r3, #12]
 80071c0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	f003 0302 	and.w	r3, r3, #2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d020      	beq.n	8007216 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d01b      	beq.n	8007216 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f06f 0202 	mvn.w	r2, #2
 80071e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	f003 0303 	and.w	r3, r3, #3
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d003      	beq.n	8007204 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f999 	bl	8007534 <HAL_TIM_IC_CaptureCallback>
 8007202:	e005      	b.n	8007210 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f98b 	bl	8007520 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f99c 	bl	8007548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2200      	movs	r2, #0
 8007214:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	f003 0304 	and.w	r3, r3, #4
 800721c:	2b00      	cmp	r3, #0
 800721e:	d020      	beq.n	8007262 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f003 0304 	and.w	r3, r3, #4
 8007226:	2b00      	cmp	r3, #0
 8007228:	d01b      	beq.n	8007262 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f06f 0204 	mvn.w	r2, #4
 8007232:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2202      	movs	r2, #2
 8007238:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007244:	2b00      	cmp	r3, #0
 8007246:	d003      	beq.n	8007250 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f000 f973 	bl	8007534 <HAL_TIM_IC_CaptureCallback>
 800724e:	e005      	b.n	800725c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 f965 	bl	8007520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f976 	bl	8007548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	f003 0308 	and.w	r3, r3, #8
 8007268:	2b00      	cmp	r3, #0
 800726a:	d020      	beq.n	80072ae <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f003 0308 	and.w	r3, r3, #8
 8007272:	2b00      	cmp	r3, #0
 8007274:	d01b      	beq.n	80072ae <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f06f 0208 	mvn.w	r2, #8
 800727e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2204      	movs	r2, #4
 8007284:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	f003 0303 	and.w	r3, r3, #3
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 f94d 	bl	8007534 <HAL_TIM_IC_CaptureCallback>
 800729a:	e005      	b.n	80072a8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f93f 	bl	8007520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f950 	bl	8007548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	f003 0310 	and.w	r3, r3, #16
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d020      	beq.n	80072fa <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f003 0310 	and.w	r3, r3, #16
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d01b      	beq.n	80072fa <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f06f 0210 	mvn.w	r2, #16
 80072ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2208      	movs	r2, #8
 80072d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d003      	beq.n	80072e8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 f927 	bl	8007534 <HAL_TIM_IC_CaptureCallback>
 80072e6:	e005      	b.n	80072f4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f919 	bl	8007520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f92a 	bl	8007548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	f003 0301 	and.w	r3, r3, #1
 8007300:	2b00      	cmp	r3, #0
 8007302:	d00c      	beq.n	800731e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f003 0301 	and.w	r3, r3, #1
 800730a:	2b00      	cmp	r3, #0
 800730c:	d007      	beq.n	800731e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f06f 0201 	mvn.w	r2, #1
 8007316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7fb ff93 	bl	8003244 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00c      	beq.n	8007342 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800732e:	2b00      	cmp	r3, #0
 8007330:	d007      	beq.n	8007342 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800733a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fae3 	bl	8007908 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00c      	beq.n	8007366 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007352:	2b00      	cmp	r3, #0
 8007354:	d007      	beq.n	8007366 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800735e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f000 f8fb 	bl	800755c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	f003 0320 	and.w	r3, r3, #32
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00c      	beq.n	800738a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f003 0320 	and.w	r3, r3, #32
 8007376:	2b00      	cmp	r3, #0
 8007378:	d007      	beq.n	800738a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f06f 0220 	mvn.w	r2, #32
 8007382:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fab5 	bl	80078f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800738a:	bf00      	nop
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b084      	sub	sp, #16
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800739c:	2300      	movs	r3, #0
 800739e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d101      	bne.n	80073ae <HAL_TIM_ConfigClockSource+0x1c>
 80073aa:	2302      	movs	r3, #2
 80073ac:	e0b4      	b.n	8007518 <HAL_TIM_ConfigClockSource+0x186>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2202      	movs	r2, #2
 80073ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80073cc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80073d4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073e6:	d03e      	beq.n	8007466 <HAL_TIM_ConfigClockSource+0xd4>
 80073e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073ec:	f200 8087 	bhi.w	80074fe <HAL_TIM_ConfigClockSource+0x16c>
 80073f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073f4:	f000 8086 	beq.w	8007504 <HAL_TIM_ConfigClockSource+0x172>
 80073f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073fc:	d87f      	bhi.n	80074fe <HAL_TIM_ConfigClockSource+0x16c>
 80073fe:	2b70      	cmp	r3, #112	@ 0x70
 8007400:	d01a      	beq.n	8007438 <HAL_TIM_ConfigClockSource+0xa6>
 8007402:	2b70      	cmp	r3, #112	@ 0x70
 8007404:	d87b      	bhi.n	80074fe <HAL_TIM_ConfigClockSource+0x16c>
 8007406:	2b60      	cmp	r3, #96	@ 0x60
 8007408:	d050      	beq.n	80074ac <HAL_TIM_ConfigClockSource+0x11a>
 800740a:	2b60      	cmp	r3, #96	@ 0x60
 800740c:	d877      	bhi.n	80074fe <HAL_TIM_ConfigClockSource+0x16c>
 800740e:	2b50      	cmp	r3, #80	@ 0x50
 8007410:	d03c      	beq.n	800748c <HAL_TIM_ConfigClockSource+0xfa>
 8007412:	2b50      	cmp	r3, #80	@ 0x50
 8007414:	d873      	bhi.n	80074fe <HAL_TIM_ConfigClockSource+0x16c>
 8007416:	2b40      	cmp	r3, #64	@ 0x40
 8007418:	d058      	beq.n	80074cc <HAL_TIM_ConfigClockSource+0x13a>
 800741a:	2b40      	cmp	r3, #64	@ 0x40
 800741c:	d86f      	bhi.n	80074fe <HAL_TIM_ConfigClockSource+0x16c>
 800741e:	2b30      	cmp	r3, #48	@ 0x30
 8007420:	d064      	beq.n	80074ec <HAL_TIM_ConfigClockSource+0x15a>
 8007422:	2b30      	cmp	r3, #48	@ 0x30
 8007424:	d86b      	bhi.n	80074fe <HAL_TIM_ConfigClockSource+0x16c>
 8007426:	2b20      	cmp	r3, #32
 8007428:	d060      	beq.n	80074ec <HAL_TIM_ConfigClockSource+0x15a>
 800742a:	2b20      	cmp	r3, #32
 800742c:	d867      	bhi.n	80074fe <HAL_TIM_ConfigClockSource+0x16c>
 800742e:	2b00      	cmp	r3, #0
 8007430:	d05c      	beq.n	80074ec <HAL_TIM_ConfigClockSource+0x15a>
 8007432:	2b10      	cmp	r3, #16
 8007434:	d05a      	beq.n	80074ec <HAL_TIM_ConfigClockSource+0x15a>
 8007436:	e062      	b.n	80074fe <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007448:	f000 f9b8 	bl	80077bc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800745a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	609a      	str	r2, [r3, #8]
      break;
 8007464:	e04f      	b.n	8007506 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007476:	f000 f9a1 	bl	80077bc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	689a      	ldr	r2, [r3, #8]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007488:	609a      	str	r2, [r3, #8]
      break;
 800748a:	e03c      	b.n	8007506 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007498:	461a      	mov	r2, r3
 800749a:	f000 f915 	bl	80076c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2150      	movs	r1, #80	@ 0x50
 80074a4:	4618      	mov	r0, r3
 80074a6:	f000 f96e 	bl	8007786 <TIM_ITRx_SetConfig>
      break;
 80074aa:	e02c      	b.n	8007506 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074b8:	461a      	mov	r2, r3
 80074ba:	f000 f934 	bl	8007726 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	2160      	movs	r1, #96	@ 0x60
 80074c4:	4618      	mov	r0, r3
 80074c6:	f000 f95e 	bl	8007786 <TIM_ITRx_SetConfig>
      break;
 80074ca:	e01c      	b.n	8007506 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074d8:	461a      	mov	r2, r3
 80074da:	f000 f8f5 	bl	80076c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2140      	movs	r1, #64	@ 0x40
 80074e4:	4618      	mov	r0, r3
 80074e6:	f000 f94e 	bl	8007786 <TIM_ITRx_SetConfig>
      break;
 80074ea:	e00c      	b.n	8007506 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4619      	mov	r1, r3
 80074f6:	4610      	mov	r0, r2
 80074f8:	f000 f945 	bl	8007786 <TIM_ITRx_SetConfig>
      break;
 80074fc:	e003      	b.n	8007506 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
 8007500:	73fb      	strb	r3, [r7, #15]
      break;
 8007502:	e000      	b.n	8007506 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007504:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2200      	movs	r2, #0
 8007512:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007516:	7bfb      	ldrb	r3, [r7, #15]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800753c:	bf00      	nop
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr

08007548 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007548:	b480      	push	{r7}
 800754a:	b083      	sub	sp, #12
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800755c:	b480      	push	{r7}
 800755e:	b083      	sub	sp, #12
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007564:	bf00      	nop
 8007566:	370c      	adds	r7, #12
 8007568:	46bd      	mov	sp, r7
 800756a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756e:	4770      	bx	lr

08007570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	4a46      	ldr	r2, [pc, #280]	@ (800769c <TIM_Base_SetConfig+0x12c>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d013      	beq.n	80075b0 <TIM_Base_SetConfig+0x40>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800758e:	d00f      	beq.n	80075b0 <TIM_Base_SetConfig+0x40>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a43      	ldr	r2, [pc, #268]	@ (80076a0 <TIM_Base_SetConfig+0x130>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d00b      	beq.n	80075b0 <TIM_Base_SetConfig+0x40>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a42      	ldr	r2, [pc, #264]	@ (80076a4 <TIM_Base_SetConfig+0x134>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d007      	beq.n	80075b0 <TIM_Base_SetConfig+0x40>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a41      	ldr	r2, [pc, #260]	@ (80076a8 <TIM_Base_SetConfig+0x138>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d003      	beq.n	80075b0 <TIM_Base_SetConfig+0x40>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a40      	ldr	r2, [pc, #256]	@ (80076ac <TIM_Base_SetConfig+0x13c>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d108      	bne.n	80075c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	68fa      	ldr	r2, [r7, #12]
 80075be:	4313      	orrs	r3, r2
 80075c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	4a35      	ldr	r2, [pc, #212]	@ (800769c <TIM_Base_SetConfig+0x12c>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d02b      	beq.n	8007622 <TIM_Base_SetConfig+0xb2>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075d0:	d027      	beq.n	8007622 <TIM_Base_SetConfig+0xb2>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	4a32      	ldr	r2, [pc, #200]	@ (80076a0 <TIM_Base_SetConfig+0x130>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d023      	beq.n	8007622 <TIM_Base_SetConfig+0xb2>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4a31      	ldr	r2, [pc, #196]	@ (80076a4 <TIM_Base_SetConfig+0x134>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d01f      	beq.n	8007622 <TIM_Base_SetConfig+0xb2>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	4a30      	ldr	r2, [pc, #192]	@ (80076a8 <TIM_Base_SetConfig+0x138>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d01b      	beq.n	8007622 <TIM_Base_SetConfig+0xb2>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	4a2f      	ldr	r2, [pc, #188]	@ (80076ac <TIM_Base_SetConfig+0x13c>)
 80075ee:	4293      	cmp	r3, r2
 80075f0:	d017      	beq.n	8007622 <TIM_Base_SetConfig+0xb2>
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a2e      	ldr	r2, [pc, #184]	@ (80076b0 <TIM_Base_SetConfig+0x140>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d013      	beq.n	8007622 <TIM_Base_SetConfig+0xb2>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4a2d      	ldr	r2, [pc, #180]	@ (80076b4 <TIM_Base_SetConfig+0x144>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d00f      	beq.n	8007622 <TIM_Base_SetConfig+0xb2>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a2c      	ldr	r2, [pc, #176]	@ (80076b8 <TIM_Base_SetConfig+0x148>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d00b      	beq.n	8007622 <TIM_Base_SetConfig+0xb2>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a2b      	ldr	r2, [pc, #172]	@ (80076bc <TIM_Base_SetConfig+0x14c>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d007      	beq.n	8007622 <TIM_Base_SetConfig+0xb2>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a2a      	ldr	r2, [pc, #168]	@ (80076c0 <TIM_Base_SetConfig+0x150>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d003      	beq.n	8007622 <TIM_Base_SetConfig+0xb2>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a29      	ldr	r2, [pc, #164]	@ (80076c4 <TIM_Base_SetConfig+0x154>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d108      	bne.n	8007634 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007628:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	4313      	orrs	r3, r2
 8007632:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	4313      	orrs	r3, r2
 8007640:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	689a      	ldr	r2, [r3, #8]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a10      	ldr	r2, [pc, #64]	@ (800769c <TIM_Base_SetConfig+0x12c>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d003      	beq.n	8007668 <TIM_Base_SetConfig+0xf8>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a12      	ldr	r2, [pc, #72]	@ (80076ac <TIM_Base_SetConfig+0x13c>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d103      	bne.n	8007670 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	691a      	ldr	r2, [r3, #16]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2201      	movs	r2, #1
 8007674:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	f003 0301 	and.w	r3, r3, #1
 800767e:	2b01      	cmp	r3, #1
 8007680:	d105      	bne.n	800768e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	f023 0201 	bic.w	r2, r3, #1
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	611a      	str	r2, [r3, #16]
  }
}
 800768e:	bf00      	nop
 8007690:	3714      	adds	r7, #20
 8007692:	46bd      	mov	sp, r7
 8007694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007698:	4770      	bx	lr
 800769a:	bf00      	nop
 800769c:	40010000 	.word	0x40010000
 80076a0:	40000400 	.word	0x40000400
 80076a4:	40000800 	.word	0x40000800
 80076a8:	40000c00 	.word	0x40000c00
 80076ac:	40010400 	.word	0x40010400
 80076b0:	40014000 	.word	0x40014000
 80076b4:	40014400 	.word	0x40014400
 80076b8:	40014800 	.word	0x40014800
 80076bc:	40001800 	.word	0x40001800
 80076c0:	40001c00 	.word	0x40001c00
 80076c4:	40002000 	.word	0x40002000

080076c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b087      	sub	sp, #28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6a1b      	ldr	r3, [r3, #32]
 80076d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	f023 0201 	bic.w	r2, r3, #1
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	699b      	ldr	r3, [r3, #24]
 80076ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80076f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	011b      	lsls	r3, r3, #4
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	f023 030a 	bic.w	r3, r3, #10
 8007704:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	4313      	orrs	r3, r2
 800770c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	697a      	ldr	r2, [r7, #20]
 8007718:	621a      	str	r2, [r3, #32]
}
 800771a:	bf00      	nop
 800771c:	371c      	adds	r7, #28
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr

08007726 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007726:	b480      	push	{r7}
 8007728:	b087      	sub	sp, #28
 800772a:	af00      	add	r7, sp, #0
 800772c:	60f8      	str	r0, [r7, #12]
 800772e:	60b9      	str	r1, [r7, #8]
 8007730:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6a1b      	ldr	r3, [r3, #32]
 8007736:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6a1b      	ldr	r3, [r3, #32]
 800773c:	f023 0210 	bic.w	r2, r3, #16
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007750:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	031b      	lsls	r3, r3, #12
 8007756:	693a      	ldr	r2, [r7, #16]
 8007758:	4313      	orrs	r3, r2
 800775a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007762:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	011b      	lsls	r3, r3, #4
 8007768:	697a      	ldr	r2, [r7, #20]
 800776a:	4313      	orrs	r3, r2
 800776c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	693a      	ldr	r2, [r7, #16]
 8007772:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	697a      	ldr	r2, [r7, #20]
 8007778:	621a      	str	r2, [r3, #32]
}
 800777a:	bf00      	nop
 800777c:	371c      	adds	r7, #28
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr

08007786 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007786:	b480      	push	{r7}
 8007788:	b085      	sub	sp, #20
 800778a:	af00      	add	r7, sp, #0
 800778c:	6078      	str	r0, [r7, #4]
 800778e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800779c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	f043 0307 	orr.w	r3, r3, #7
 80077a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	609a      	str	r2, [r3, #8]
}
 80077b0:	bf00      	nop
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077bc:	b480      	push	{r7}
 80077be:	b087      	sub	sp, #28
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	607a      	str	r2, [r7, #4]
 80077c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	689b      	ldr	r3, [r3, #8]
 80077ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80077d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	021a      	lsls	r2, r3, #8
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	431a      	orrs	r2, r3
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	4313      	orrs	r3, r2
 80077e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	697a      	ldr	r2, [r7, #20]
 80077ee:	609a      	str	r2, [r3, #8]
}
 80077f0:	bf00      	nop
 80077f2:	371c      	adds	r7, #28
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
 8007804:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800780c:	2b01      	cmp	r3, #1
 800780e:	d101      	bne.n	8007814 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007810:	2302      	movs	r3, #2
 8007812:	e05a      	b.n	80078ca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2202      	movs	r2, #2
 8007820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800783a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68fa      	ldr	r2, [r7, #12]
 8007842:	4313      	orrs	r3, r2
 8007844:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a21      	ldr	r2, [pc, #132]	@ (80078d8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d022      	beq.n	800789e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007860:	d01d      	beq.n	800789e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4a1d      	ldr	r2, [pc, #116]	@ (80078dc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d018      	beq.n	800789e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	4a1b      	ldr	r2, [pc, #108]	@ (80078e0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007872:	4293      	cmp	r3, r2
 8007874:	d013      	beq.n	800789e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a1a      	ldr	r2, [pc, #104]	@ (80078e4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d00e      	beq.n	800789e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a18      	ldr	r2, [pc, #96]	@ (80078e8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d009      	beq.n	800789e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a17      	ldr	r2, [pc, #92]	@ (80078ec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d004      	beq.n	800789e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a15      	ldr	r2, [pc, #84]	@ (80078f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d10c      	bne.n	80078b8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	4313      	orrs	r3, r2
 80078ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3714      	adds	r7, #20
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	40010000 	.word	0x40010000
 80078dc:	40000400 	.word	0x40000400
 80078e0:	40000800 	.word	0x40000800
 80078e4:	40000c00 	.word	0x40000c00
 80078e8:	40010400 	.word	0x40010400
 80078ec:	40014000 	.word	0x40014000
 80078f0:	40001800 	.word	0x40001800

080078f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078fc:	bf00      	nop
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <findslot>:
 800791c:	4b0a      	ldr	r3, [pc, #40]	@ (8007948 <findslot+0x2c>)
 800791e:	b510      	push	{r4, lr}
 8007920:	4604      	mov	r4, r0
 8007922:	6818      	ldr	r0, [r3, #0]
 8007924:	b118      	cbz	r0, 800792e <findslot+0x12>
 8007926:	6a03      	ldr	r3, [r0, #32]
 8007928:	b90b      	cbnz	r3, 800792e <findslot+0x12>
 800792a:	f000 fb19 	bl	8007f60 <__sinit>
 800792e:	2c13      	cmp	r4, #19
 8007930:	d807      	bhi.n	8007942 <findslot+0x26>
 8007932:	4806      	ldr	r0, [pc, #24]	@ (800794c <findslot+0x30>)
 8007934:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8007938:	3201      	adds	r2, #1
 800793a:	d002      	beq.n	8007942 <findslot+0x26>
 800793c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8007940:	bd10      	pop	{r4, pc}
 8007942:	2000      	movs	r0, #0
 8007944:	e7fc      	b.n	8007940 <findslot+0x24>
 8007946:	bf00      	nop
 8007948:	20000030 	.word	0x20000030
 800794c:	20025ce4 	.word	0x20025ce4

08007950 <error>:
 8007950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007952:	4604      	mov	r4, r0
 8007954:	f000 fbb2 	bl	80080bc <__errno>
 8007958:	2613      	movs	r6, #19
 800795a:	4605      	mov	r5, r0
 800795c:	2700      	movs	r7, #0
 800795e:	4630      	mov	r0, r6
 8007960:	4639      	mov	r1, r7
 8007962:	beab      	bkpt	0x00ab
 8007964:	4606      	mov	r6, r0
 8007966:	602e      	str	r6, [r5, #0]
 8007968:	4620      	mov	r0, r4
 800796a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800796c <checkerror>:
 800796c:	1c43      	adds	r3, r0, #1
 800796e:	d101      	bne.n	8007974 <checkerror+0x8>
 8007970:	f7ff bfee 	b.w	8007950 <error>
 8007974:	4770      	bx	lr

08007976 <_swiread>:
 8007976:	b530      	push	{r4, r5, lr}
 8007978:	b085      	sub	sp, #20
 800797a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800797e:	9203      	str	r2, [sp, #12]
 8007980:	2406      	movs	r4, #6
 8007982:	ad01      	add	r5, sp, #4
 8007984:	4620      	mov	r0, r4
 8007986:	4629      	mov	r1, r5
 8007988:	beab      	bkpt	0x00ab
 800798a:	4604      	mov	r4, r0
 800798c:	4620      	mov	r0, r4
 800798e:	f7ff ffed 	bl	800796c <checkerror>
 8007992:	b005      	add	sp, #20
 8007994:	bd30      	pop	{r4, r5, pc}

08007996 <_read>:
 8007996:	b570      	push	{r4, r5, r6, lr}
 8007998:	460e      	mov	r6, r1
 800799a:	4614      	mov	r4, r2
 800799c:	f7ff ffbe 	bl	800791c <findslot>
 80079a0:	4605      	mov	r5, r0
 80079a2:	b930      	cbnz	r0, 80079b2 <_read+0x1c>
 80079a4:	f000 fb8a 	bl	80080bc <__errno>
 80079a8:	2309      	movs	r3, #9
 80079aa:	6003      	str	r3, [r0, #0]
 80079ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80079b0:	bd70      	pop	{r4, r5, r6, pc}
 80079b2:	6800      	ldr	r0, [r0, #0]
 80079b4:	4622      	mov	r2, r4
 80079b6:	4631      	mov	r1, r6
 80079b8:	f7ff ffdd 	bl	8007976 <_swiread>
 80079bc:	1c43      	adds	r3, r0, #1
 80079be:	d0f5      	beq.n	80079ac <_read+0x16>
 80079c0:	686b      	ldr	r3, [r5, #4]
 80079c2:	1a20      	subs	r0, r4, r0
 80079c4:	4403      	add	r3, r0
 80079c6:	606b      	str	r3, [r5, #4]
 80079c8:	e7f2      	b.n	80079b0 <_read+0x1a>

080079ca <_swilseek>:
 80079ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80079cc:	460c      	mov	r4, r1
 80079ce:	4616      	mov	r6, r2
 80079d0:	f7ff ffa4 	bl	800791c <findslot>
 80079d4:	4605      	mov	r5, r0
 80079d6:	b940      	cbnz	r0, 80079ea <_swilseek+0x20>
 80079d8:	f000 fb70 	bl	80080bc <__errno>
 80079dc:	2309      	movs	r3, #9
 80079de:	6003      	str	r3, [r0, #0]
 80079e0:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80079e4:	4620      	mov	r0, r4
 80079e6:	b003      	add	sp, #12
 80079e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80079ea:	2e02      	cmp	r6, #2
 80079ec:	d903      	bls.n	80079f6 <_swilseek+0x2c>
 80079ee:	f000 fb65 	bl	80080bc <__errno>
 80079f2:	2316      	movs	r3, #22
 80079f4:	e7f3      	b.n	80079de <_swilseek+0x14>
 80079f6:	2e01      	cmp	r6, #1
 80079f8:	d112      	bne.n	8007a20 <_swilseek+0x56>
 80079fa:	6843      	ldr	r3, [r0, #4]
 80079fc:	18e4      	adds	r4, r4, r3
 80079fe:	d4f6      	bmi.n	80079ee <_swilseek+0x24>
 8007a00:	682b      	ldr	r3, [r5, #0]
 8007a02:	260a      	movs	r6, #10
 8007a04:	e9cd 3400 	strd	r3, r4, [sp]
 8007a08:	466f      	mov	r7, sp
 8007a0a:	4630      	mov	r0, r6
 8007a0c:	4639      	mov	r1, r7
 8007a0e:	beab      	bkpt	0x00ab
 8007a10:	4606      	mov	r6, r0
 8007a12:	4630      	mov	r0, r6
 8007a14:	f7ff ffaa 	bl	800796c <checkerror>
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	dbe1      	blt.n	80079e0 <_swilseek+0x16>
 8007a1c:	606c      	str	r4, [r5, #4]
 8007a1e:	e7e1      	b.n	80079e4 <_swilseek+0x1a>
 8007a20:	2e02      	cmp	r6, #2
 8007a22:	6803      	ldr	r3, [r0, #0]
 8007a24:	d1ec      	bne.n	8007a00 <_swilseek+0x36>
 8007a26:	9300      	str	r3, [sp, #0]
 8007a28:	260c      	movs	r6, #12
 8007a2a:	466f      	mov	r7, sp
 8007a2c:	4630      	mov	r0, r6
 8007a2e:	4639      	mov	r1, r7
 8007a30:	beab      	bkpt	0x00ab
 8007a32:	4606      	mov	r6, r0
 8007a34:	4630      	mov	r0, r6
 8007a36:	f7ff ff99 	bl	800796c <checkerror>
 8007a3a:	1c43      	adds	r3, r0, #1
 8007a3c:	d0d0      	beq.n	80079e0 <_swilseek+0x16>
 8007a3e:	4404      	add	r4, r0
 8007a40:	e7de      	b.n	8007a00 <_swilseek+0x36>

08007a42 <_lseek>:
 8007a42:	f7ff bfc2 	b.w	80079ca <_swilseek>

08007a46 <_swiwrite>:
 8007a46:	b530      	push	{r4, r5, lr}
 8007a48:	b085      	sub	sp, #20
 8007a4a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8007a4e:	9203      	str	r2, [sp, #12]
 8007a50:	2405      	movs	r4, #5
 8007a52:	ad01      	add	r5, sp, #4
 8007a54:	4620      	mov	r0, r4
 8007a56:	4629      	mov	r1, r5
 8007a58:	beab      	bkpt	0x00ab
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f7ff ff85 	bl	800796c <checkerror>
 8007a62:	b005      	add	sp, #20
 8007a64:	bd30      	pop	{r4, r5, pc}

08007a66 <_write>:
 8007a66:	b570      	push	{r4, r5, r6, lr}
 8007a68:	460e      	mov	r6, r1
 8007a6a:	4615      	mov	r5, r2
 8007a6c:	f7ff ff56 	bl	800791c <findslot>
 8007a70:	4604      	mov	r4, r0
 8007a72:	b930      	cbnz	r0, 8007a82 <_write+0x1c>
 8007a74:	f000 fb22 	bl	80080bc <__errno>
 8007a78:	2309      	movs	r3, #9
 8007a7a:	6003      	str	r3, [r0, #0]
 8007a7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007a80:	bd70      	pop	{r4, r5, r6, pc}
 8007a82:	6800      	ldr	r0, [r0, #0]
 8007a84:	462a      	mov	r2, r5
 8007a86:	4631      	mov	r1, r6
 8007a88:	f7ff ffdd 	bl	8007a46 <_swiwrite>
 8007a8c:	1e03      	subs	r3, r0, #0
 8007a8e:	dbf5      	blt.n	8007a7c <_write+0x16>
 8007a90:	6862      	ldr	r2, [r4, #4]
 8007a92:	1ae8      	subs	r0, r5, r3
 8007a94:	4402      	add	r2, r0
 8007a96:	42ab      	cmp	r3, r5
 8007a98:	6062      	str	r2, [r4, #4]
 8007a9a:	d1f1      	bne.n	8007a80 <_write+0x1a>
 8007a9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	f7ff bf55 	b.w	8007950 <error>

08007aa6 <_swiclose>:
 8007aa6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007aa8:	2402      	movs	r4, #2
 8007aaa:	9001      	str	r0, [sp, #4]
 8007aac:	ad01      	add	r5, sp, #4
 8007aae:	4620      	mov	r0, r4
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	beab      	bkpt	0x00ab
 8007ab4:	4604      	mov	r4, r0
 8007ab6:	4620      	mov	r0, r4
 8007ab8:	f7ff ff58 	bl	800796c <checkerror>
 8007abc:	b003      	add	sp, #12
 8007abe:	bd30      	pop	{r4, r5, pc}

08007ac0 <_close>:
 8007ac0:	b538      	push	{r3, r4, r5, lr}
 8007ac2:	4605      	mov	r5, r0
 8007ac4:	f7ff ff2a 	bl	800791c <findslot>
 8007ac8:	4604      	mov	r4, r0
 8007aca:	b930      	cbnz	r0, 8007ada <_close+0x1a>
 8007acc:	f000 faf6 	bl	80080bc <__errno>
 8007ad0:	2309      	movs	r3, #9
 8007ad2:	6003      	str	r3, [r0, #0]
 8007ad4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ad8:	bd38      	pop	{r3, r4, r5, pc}
 8007ada:	3d01      	subs	r5, #1
 8007adc:	2d01      	cmp	r5, #1
 8007ade:	d809      	bhi.n	8007af4 <_close+0x34>
 8007ae0:	4b07      	ldr	r3, [pc, #28]	@ (8007b00 <_close+0x40>)
 8007ae2:	689a      	ldr	r2, [r3, #8]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d104      	bne.n	8007af4 <_close+0x34>
 8007aea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007aee:	6023      	str	r3, [r4, #0]
 8007af0:	2000      	movs	r0, #0
 8007af2:	e7f1      	b.n	8007ad8 <_close+0x18>
 8007af4:	6820      	ldr	r0, [r4, #0]
 8007af6:	f7ff ffd6 	bl	8007aa6 <_swiclose>
 8007afa:	2800      	cmp	r0, #0
 8007afc:	d0f5      	beq.n	8007aea <_close+0x2a>
 8007afe:	e7eb      	b.n	8007ad8 <_close+0x18>
 8007b00:	20025ce4 	.word	0x20025ce4

08007b04 <_swistat>:
 8007b04:	b570      	push	{r4, r5, r6, lr}
 8007b06:	460c      	mov	r4, r1
 8007b08:	f7ff ff08 	bl	800791c <findslot>
 8007b0c:	4605      	mov	r5, r0
 8007b0e:	b930      	cbnz	r0, 8007b1e <_swistat+0x1a>
 8007b10:	f000 fad4 	bl	80080bc <__errno>
 8007b14:	2309      	movs	r3, #9
 8007b16:	6003      	str	r3, [r0, #0]
 8007b18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b1c:	bd70      	pop	{r4, r5, r6, pc}
 8007b1e:	6863      	ldr	r3, [r4, #4]
 8007b20:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007b24:	6063      	str	r3, [r4, #4]
 8007b26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b2a:	64a3      	str	r3, [r4, #72]	@ 0x48
 8007b2c:	260c      	movs	r6, #12
 8007b2e:	4630      	mov	r0, r6
 8007b30:	4629      	mov	r1, r5
 8007b32:	beab      	bkpt	0x00ab
 8007b34:	4605      	mov	r5, r0
 8007b36:	4628      	mov	r0, r5
 8007b38:	f7ff ff18 	bl	800796c <checkerror>
 8007b3c:	1c43      	adds	r3, r0, #1
 8007b3e:	d0eb      	beq.n	8007b18 <_swistat+0x14>
 8007b40:	6120      	str	r0, [r4, #16]
 8007b42:	2000      	movs	r0, #0
 8007b44:	e7ea      	b.n	8007b1c <_swistat+0x18>

08007b46 <_fstat>:
 8007b46:	460b      	mov	r3, r1
 8007b48:	b510      	push	{r4, lr}
 8007b4a:	2100      	movs	r1, #0
 8007b4c:	4604      	mov	r4, r0
 8007b4e:	2258      	movs	r2, #88	@ 0x58
 8007b50:	4618      	mov	r0, r3
 8007b52:	f000 faab 	bl	80080ac <memset>
 8007b56:	4601      	mov	r1, r0
 8007b58:	4620      	mov	r0, r4
 8007b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b5e:	f7ff bfd1 	b.w	8007b04 <_swistat>

08007b62 <_stat>:
 8007b62:	b538      	push	{r3, r4, r5, lr}
 8007b64:	460d      	mov	r5, r1
 8007b66:	4604      	mov	r4, r0
 8007b68:	2258      	movs	r2, #88	@ 0x58
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	f000 fa9d 	bl	80080ac <memset>
 8007b72:	4620      	mov	r0, r4
 8007b74:	2100      	movs	r1, #0
 8007b76:	f000 f811 	bl	8007b9c <_swiopen>
 8007b7a:	1c43      	adds	r3, r0, #1
 8007b7c:	4604      	mov	r4, r0
 8007b7e:	d00b      	beq.n	8007b98 <_stat+0x36>
 8007b80:	686b      	ldr	r3, [r5, #4]
 8007b82:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007b86:	606b      	str	r3, [r5, #4]
 8007b88:	4629      	mov	r1, r5
 8007b8a:	f7ff ffbb 	bl	8007b04 <_swistat>
 8007b8e:	4605      	mov	r5, r0
 8007b90:	4620      	mov	r0, r4
 8007b92:	f7ff ff95 	bl	8007ac0 <_close>
 8007b96:	462c      	mov	r4, r5
 8007b98:	4620      	mov	r0, r4
 8007b9a:	bd38      	pop	{r3, r4, r5, pc}

08007b9c <_swiopen>:
 8007b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba0:	4f29      	ldr	r7, [pc, #164]	@ (8007c48 <_swiopen+0xac>)
 8007ba2:	b096      	sub	sp, #88	@ 0x58
 8007ba4:	4682      	mov	sl, r0
 8007ba6:	460e      	mov	r6, r1
 8007ba8:	2400      	movs	r4, #0
 8007baa:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8007bb4:	d00c      	beq.n	8007bd0 <_swiopen+0x34>
 8007bb6:	3401      	adds	r4, #1
 8007bb8:	2c14      	cmp	r4, #20
 8007bba:	d1f6      	bne.n	8007baa <_swiopen+0xe>
 8007bbc:	f000 fa7e 	bl	80080bc <__errno>
 8007bc0:	2318      	movs	r3, #24
 8007bc2:	6003      	str	r3, [r0, #0]
 8007bc4:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007bc8:	4620      	mov	r0, r4
 8007bca:	b016      	add	sp, #88	@ 0x58
 8007bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bd0:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8007bd4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8007bd8:	46e9      	mov	r9, sp
 8007bda:	d109      	bne.n	8007bf0 <_swiopen+0x54>
 8007bdc:	4649      	mov	r1, r9
 8007bde:	4650      	mov	r0, sl
 8007be0:	f7ff ffbf 	bl	8007b62 <_stat>
 8007be4:	3001      	adds	r0, #1
 8007be6:	d003      	beq.n	8007bf0 <_swiopen+0x54>
 8007be8:	f000 fa68 	bl	80080bc <__errno>
 8007bec:	2311      	movs	r3, #17
 8007bee:	e7e8      	b.n	8007bc2 <_swiopen+0x26>
 8007bf0:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8007bf4:	f240 6301 	movw	r3, #1537	@ 0x601
 8007bf8:	07b2      	lsls	r2, r6, #30
 8007bfa:	bf48      	it	mi
 8007bfc:	f045 0502 	orrmi.w	r5, r5, #2
 8007c00:	421e      	tst	r6, r3
 8007c02:	bf18      	it	ne
 8007c04:	f045 0504 	orrne.w	r5, r5, #4
 8007c08:	0733      	lsls	r3, r6, #28
 8007c0a:	bf48      	it	mi
 8007c0c:	f025 0504 	bicmi.w	r5, r5, #4
 8007c10:	4650      	mov	r0, sl
 8007c12:	bf48      	it	mi
 8007c14:	f045 0508 	orrmi.w	r5, r5, #8
 8007c18:	f8cd a000 	str.w	sl, [sp]
 8007c1c:	f7f8 fae8 	bl	80001f0 <strlen>
 8007c20:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8007c24:	2501      	movs	r5, #1
 8007c26:	4628      	mov	r0, r5
 8007c28:	4649      	mov	r1, r9
 8007c2a:	beab      	bkpt	0x00ab
 8007c2c:	4605      	mov	r5, r0
 8007c2e:	2d00      	cmp	r5, #0
 8007c30:	db05      	blt.n	8007c3e <_swiopen+0xa2>
 8007c32:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8007c36:	4447      	add	r7, r8
 8007c38:	2300      	movs	r3, #0
 8007c3a:	607b      	str	r3, [r7, #4]
 8007c3c:	e7c4      	b.n	8007bc8 <_swiopen+0x2c>
 8007c3e:	4628      	mov	r0, r5
 8007c40:	f7ff fe86 	bl	8007950 <error>
 8007c44:	4604      	mov	r4, r0
 8007c46:	e7bf      	b.n	8007bc8 <_swiopen+0x2c>
 8007c48:	20025ce4 	.word	0x20025ce4

08007c4c <_get_semihosting_exts>:
 8007c4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007c50:	4606      	mov	r6, r0
 8007c52:	460f      	mov	r7, r1
 8007c54:	4829      	ldr	r0, [pc, #164]	@ (8007cfc <_get_semihosting_exts+0xb0>)
 8007c56:	2100      	movs	r1, #0
 8007c58:	4615      	mov	r5, r2
 8007c5a:	f7ff ff9f 	bl	8007b9c <_swiopen>
 8007c5e:	462a      	mov	r2, r5
 8007c60:	4604      	mov	r4, r0
 8007c62:	2100      	movs	r1, #0
 8007c64:	4630      	mov	r0, r6
 8007c66:	f000 fa21 	bl	80080ac <memset>
 8007c6a:	1c63      	adds	r3, r4, #1
 8007c6c:	d014      	beq.n	8007c98 <_get_semihosting_exts+0x4c>
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f7ff fe54 	bl	800791c <findslot>
 8007c74:	f04f 080c 	mov.w	r8, #12
 8007c78:	4681      	mov	r9, r0
 8007c7a:	4640      	mov	r0, r8
 8007c7c:	4649      	mov	r1, r9
 8007c7e:	beab      	bkpt	0x00ab
 8007c80:	4680      	mov	r8, r0
 8007c82:	4640      	mov	r0, r8
 8007c84:	f7ff fe72 	bl	800796c <checkerror>
 8007c88:	2803      	cmp	r0, #3
 8007c8a:	dd02      	ble.n	8007c92 <_get_semihosting_exts+0x46>
 8007c8c:	1ec3      	subs	r3, r0, #3
 8007c8e:	42ab      	cmp	r3, r5
 8007c90:	dc07      	bgt.n	8007ca2 <_get_semihosting_exts+0x56>
 8007c92:	4620      	mov	r0, r4
 8007c94:	f7ff ff14 	bl	8007ac0 <_close>
 8007c98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007c9c:	b003      	add	sp, #12
 8007c9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ca2:	2204      	movs	r2, #4
 8007ca4:	eb0d 0102 	add.w	r1, sp, r2
 8007ca8:	4620      	mov	r0, r4
 8007caa:	f7ff fe74 	bl	8007996 <_read>
 8007cae:	2803      	cmp	r0, #3
 8007cb0:	ddef      	ble.n	8007c92 <_get_semihosting_exts+0x46>
 8007cb2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007cb6:	2b53      	cmp	r3, #83	@ 0x53
 8007cb8:	d1eb      	bne.n	8007c92 <_get_semihosting_exts+0x46>
 8007cba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007cbe:	2b48      	cmp	r3, #72	@ 0x48
 8007cc0:	d1e7      	bne.n	8007c92 <_get_semihosting_exts+0x46>
 8007cc2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007cc6:	2b46      	cmp	r3, #70	@ 0x46
 8007cc8:	d1e3      	bne.n	8007c92 <_get_semihosting_exts+0x46>
 8007cca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007cce:	2b42      	cmp	r3, #66	@ 0x42
 8007cd0:	d1df      	bne.n	8007c92 <_get_semihosting_exts+0x46>
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	4639      	mov	r1, r7
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	f7ff fe77 	bl	80079ca <_swilseek>
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	dbd8      	blt.n	8007c92 <_get_semihosting_exts+0x46>
 8007ce0:	462a      	mov	r2, r5
 8007ce2:	4631      	mov	r1, r6
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	f7ff fe56 	bl	8007996 <_read>
 8007cea:	4605      	mov	r5, r0
 8007cec:	4620      	mov	r0, r4
 8007cee:	f7ff fee7 	bl	8007ac0 <_close>
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	f7ff fe3a 	bl	800796c <checkerror>
 8007cf8:	e7d0      	b.n	8007c9c <_get_semihosting_exts+0x50>
 8007cfa:	bf00      	nop
 8007cfc:	0800a028 	.word	0x0800a028

08007d00 <initialise_semihosting_exts>:
 8007d00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d02:	4d0a      	ldr	r5, [pc, #40]	@ (8007d2c <initialise_semihosting_exts+0x2c>)
 8007d04:	4c0a      	ldr	r4, [pc, #40]	@ (8007d30 <initialise_semihosting_exts+0x30>)
 8007d06:	2100      	movs	r1, #0
 8007d08:	2201      	movs	r2, #1
 8007d0a:	a801      	add	r0, sp, #4
 8007d0c:	6029      	str	r1, [r5, #0]
 8007d0e:	6022      	str	r2, [r4, #0]
 8007d10:	f7ff ff9c 	bl	8007c4c <_get_semihosting_exts>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	dd07      	ble.n	8007d28 <initialise_semihosting_exts+0x28>
 8007d18:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007d1c:	f003 0201 	and.w	r2, r3, #1
 8007d20:	f003 0302 	and.w	r3, r3, #2
 8007d24:	602a      	str	r2, [r5, #0]
 8007d26:	6023      	str	r3, [r4, #0]
 8007d28:	b003      	add	sp, #12
 8007d2a:	bd30      	pop	{r4, r5, pc}
 8007d2c:	20000020 	.word	0x20000020
 8007d30:	2000001c 	.word	0x2000001c

08007d34 <_has_ext_stdout_stderr>:
 8007d34:	b510      	push	{r4, lr}
 8007d36:	4c04      	ldr	r4, [pc, #16]	@ (8007d48 <_has_ext_stdout_stderr+0x14>)
 8007d38:	6823      	ldr	r3, [r4, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	da01      	bge.n	8007d42 <_has_ext_stdout_stderr+0xe>
 8007d3e:	f7ff ffdf 	bl	8007d00 <initialise_semihosting_exts>
 8007d42:	6820      	ldr	r0, [r4, #0]
 8007d44:	bd10      	pop	{r4, pc}
 8007d46:	bf00      	nop
 8007d48:	2000001c 	.word	0x2000001c

08007d4c <initialise_monitor_handles>:
 8007d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d50:	b085      	sub	sp, #20
 8007d52:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8007e04 <initialise_monitor_handles+0xb8>
 8007d56:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	2400      	movs	r4, #0
 8007d5e:	9303      	str	r3, [sp, #12]
 8007d60:	af01      	add	r7, sp, #4
 8007d62:	9402      	str	r4, [sp, #8]
 8007d64:	2501      	movs	r5, #1
 8007d66:	4628      	mov	r0, r5
 8007d68:	4639      	mov	r1, r7
 8007d6a:	beab      	bkpt	0x00ab
 8007d6c:	4605      	mov	r5, r0
 8007d6e:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8007e08 <initialise_monitor_handles+0xbc>
 8007d72:	4623      	mov	r3, r4
 8007d74:	4c20      	ldr	r4, [pc, #128]	@ (8007df8 <initialise_monitor_handles+0xac>)
 8007d76:	f8c8 5000 	str.w	r5, [r8]
 8007d7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d7e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8007d82:	3301      	adds	r3, #1
 8007d84:	2b14      	cmp	r3, #20
 8007d86:	d1fa      	bne.n	8007d7e <initialise_monitor_handles+0x32>
 8007d88:	f7ff ffd4 	bl	8007d34 <_has_ext_stdout_stderr>
 8007d8c:	4d1b      	ldr	r5, [pc, #108]	@ (8007dfc <initialise_monitor_handles+0xb0>)
 8007d8e:	b1d0      	cbz	r0, 8007dc6 <initialise_monitor_handles+0x7a>
 8007d90:	f04f 0a03 	mov.w	sl, #3
 8007d94:	2304      	movs	r3, #4
 8007d96:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d9a:	2601      	movs	r6, #1
 8007d9c:	f8cd a00c 	str.w	sl, [sp, #12]
 8007da0:	9302      	str	r3, [sp, #8]
 8007da2:	4630      	mov	r0, r6
 8007da4:	4639      	mov	r1, r7
 8007da6:	beab      	bkpt	0x00ab
 8007da8:	4683      	mov	fp, r0
 8007daa:	4b15      	ldr	r3, [pc, #84]	@ (8007e00 <initialise_monitor_handles+0xb4>)
 8007dac:	f8cd 9004 	str.w	r9, [sp, #4]
 8007db0:	f8c3 b000 	str.w	fp, [r3]
 8007db4:	2308      	movs	r3, #8
 8007db6:	f8cd a00c 	str.w	sl, [sp, #12]
 8007dba:	9302      	str	r3, [sp, #8]
 8007dbc:	4630      	mov	r0, r6
 8007dbe:	4639      	mov	r1, r7
 8007dc0:	beab      	bkpt	0x00ab
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	602e      	str	r6, [r5, #0]
 8007dc6:	682b      	ldr	r3, [r5, #0]
 8007dc8:	3301      	adds	r3, #1
 8007dca:	bf02      	ittt	eq
 8007dcc:	4b0c      	ldreq	r3, [pc, #48]	@ (8007e00 <initialise_monitor_handles+0xb4>)
 8007dce:	681b      	ldreq	r3, [r3, #0]
 8007dd0:	602b      	streq	r3, [r5, #0]
 8007dd2:	2600      	movs	r6, #0
 8007dd4:	f8d8 3000 	ldr.w	r3, [r8]
 8007dd8:	6023      	str	r3, [r4, #0]
 8007dda:	6066      	str	r6, [r4, #4]
 8007ddc:	f7ff ffaa 	bl	8007d34 <_has_ext_stdout_stderr>
 8007de0:	b130      	cbz	r0, 8007df0 <initialise_monitor_handles+0xa4>
 8007de2:	4b07      	ldr	r3, [pc, #28]	@ (8007e00 <initialise_monitor_handles+0xb4>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8007dea:	682b      	ldr	r3, [r5, #0]
 8007dec:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8007df0:	b005      	add	sp, #20
 8007df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df6:	bf00      	nop
 8007df8:	20025ce4 	.word	0x20025ce4
 8007dfc:	20025cd8 	.word	0x20025cd8
 8007e00:	20025cdc 	.word	0x20025cdc
 8007e04:	0800a03e 	.word	0x0800a03e
 8007e08:	20025ce0 	.word	0x20025ce0

08007e0c <_isatty>:
 8007e0c:	b570      	push	{r4, r5, r6, lr}
 8007e0e:	f7ff fd85 	bl	800791c <findslot>
 8007e12:	2409      	movs	r4, #9
 8007e14:	4605      	mov	r5, r0
 8007e16:	b920      	cbnz	r0, 8007e22 <_isatty+0x16>
 8007e18:	f000 f950 	bl	80080bc <__errno>
 8007e1c:	6004      	str	r4, [r0, #0]
 8007e1e:	2000      	movs	r0, #0
 8007e20:	bd70      	pop	{r4, r5, r6, pc}
 8007e22:	4620      	mov	r0, r4
 8007e24:	4629      	mov	r1, r5
 8007e26:	beab      	bkpt	0x00ab
 8007e28:	4604      	mov	r4, r0
 8007e2a:	2c01      	cmp	r4, #1
 8007e2c:	4620      	mov	r0, r4
 8007e2e:	d0f7      	beq.n	8007e20 <_isatty+0x14>
 8007e30:	f000 f944 	bl	80080bc <__errno>
 8007e34:	2513      	movs	r5, #19
 8007e36:	4604      	mov	r4, r0
 8007e38:	2600      	movs	r6, #0
 8007e3a:	4628      	mov	r0, r5
 8007e3c:	4631      	mov	r1, r6
 8007e3e:	beab      	bkpt	0x00ab
 8007e40:	4605      	mov	r5, r0
 8007e42:	6025      	str	r5, [r4, #0]
 8007e44:	e7eb      	b.n	8007e1e <_isatty+0x12>
	...

08007e48 <std>:
 8007e48:	2300      	movs	r3, #0
 8007e4a:	b510      	push	{r4, lr}
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	e9c0 3300 	strd	r3, r3, [r0]
 8007e52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e56:	6083      	str	r3, [r0, #8]
 8007e58:	8181      	strh	r1, [r0, #12]
 8007e5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007e5c:	81c2      	strh	r2, [r0, #14]
 8007e5e:	6183      	str	r3, [r0, #24]
 8007e60:	4619      	mov	r1, r3
 8007e62:	2208      	movs	r2, #8
 8007e64:	305c      	adds	r0, #92	@ 0x5c
 8007e66:	f000 f921 	bl	80080ac <memset>
 8007e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ea0 <std+0x58>)
 8007e6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ea4 <std+0x5c>)
 8007e70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007e72:	4b0d      	ldr	r3, [pc, #52]	@ (8007ea8 <std+0x60>)
 8007e74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007e76:	4b0d      	ldr	r3, [pc, #52]	@ (8007eac <std+0x64>)
 8007e78:	6323      	str	r3, [r4, #48]	@ 0x30
 8007e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007eb0 <std+0x68>)
 8007e7c:	6224      	str	r4, [r4, #32]
 8007e7e:	429c      	cmp	r4, r3
 8007e80:	d006      	beq.n	8007e90 <std+0x48>
 8007e82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007e86:	4294      	cmp	r4, r2
 8007e88:	d002      	beq.n	8007e90 <std+0x48>
 8007e8a:	33d0      	adds	r3, #208	@ 0xd0
 8007e8c:	429c      	cmp	r4, r3
 8007e8e:	d105      	bne.n	8007e9c <std+0x54>
 8007e90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e98:	f000 b93a 	b.w	8008110 <__retarget_lock_init_recursive>
 8007e9c:	bd10      	pop	{r4, pc}
 8007e9e:	bf00      	nop
 8007ea0:	08008969 	.word	0x08008969
 8007ea4:	0800898b 	.word	0x0800898b
 8007ea8:	080089c3 	.word	0x080089c3
 8007eac:	080089e7 	.word	0x080089e7
 8007eb0:	20025d84 	.word	0x20025d84

08007eb4 <stdio_exit_handler>:
 8007eb4:	4a02      	ldr	r2, [pc, #8]	@ (8007ec0 <stdio_exit_handler+0xc>)
 8007eb6:	4903      	ldr	r1, [pc, #12]	@ (8007ec4 <stdio_exit_handler+0x10>)
 8007eb8:	4803      	ldr	r0, [pc, #12]	@ (8007ec8 <stdio_exit_handler+0x14>)
 8007eba:	f000 b869 	b.w	8007f90 <_fwalk_sglue>
 8007ebe:	bf00      	nop
 8007ec0:	20000024 	.word	0x20000024
 8007ec4:	08008901 	.word	0x08008901
 8007ec8:	20000034 	.word	0x20000034

08007ecc <cleanup_stdio>:
 8007ecc:	6841      	ldr	r1, [r0, #4]
 8007ece:	4b0c      	ldr	r3, [pc, #48]	@ (8007f00 <cleanup_stdio+0x34>)
 8007ed0:	4299      	cmp	r1, r3
 8007ed2:	b510      	push	{r4, lr}
 8007ed4:	4604      	mov	r4, r0
 8007ed6:	d001      	beq.n	8007edc <cleanup_stdio+0x10>
 8007ed8:	f000 fd12 	bl	8008900 <_fflush_r>
 8007edc:	68a1      	ldr	r1, [r4, #8]
 8007ede:	4b09      	ldr	r3, [pc, #36]	@ (8007f04 <cleanup_stdio+0x38>)
 8007ee0:	4299      	cmp	r1, r3
 8007ee2:	d002      	beq.n	8007eea <cleanup_stdio+0x1e>
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f000 fd0b 	bl	8008900 <_fflush_r>
 8007eea:	68e1      	ldr	r1, [r4, #12]
 8007eec:	4b06      	ldr	r3, [pc, #24]	@ (8007f08 <cleanup_stdio+0x3c>)
 8007eee:	4299      	cmp	r1, r3
 8007ef0:	d004      	beq.n	8007efc <cleanup_stdio+0x30>
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ef8:	f000 bd02 	b.w	8008900 <_fflush_r>
 8007efc:	bd10      	pop	{r4, pc}
 8007efe:	bf00      	nop
 8007f00:	20025d84 	.word	0x20025d84
 8007f04:	20025dec 	.word	0x20025dec
 8007f08:	20025e54 	.word	0x20025e54

08007f0c <global_stdio_init.part.0>:
 8007f0c:	b510      	push	{r4, lr}
 8007f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8007f3c <global_stdio_init.part.0+0x30>)
 8007f10:	4c0b      	ldr	r4, [pc, #44]	@ (8007f40 <global_stdio_init.part.0+0x34>)
 8007f12:	4a0c      	ldr	r2, [pc, #48]	@ (8007f44 <global_stdio_init.part.0+0x38>)
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	4620      	mov	r0, r4
 8007f18:	2200      	movs	r2, #0
 8007f1a:	2104      	movs	r1, #4
 8007f1c:	f7ff ff94 	bl	8007e48 <std>
 8007f20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007f24:	2201      	movs	r2, #1
 8007f26:	2109      	movs	r1, #9
 8007f28:	f7ff ff8e 	bl	8007e48 <std>
 8007f2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007f30:	2202      	movs	r2, #2
 8007f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f36:	2112      	movs	r1, #18
 8007f38:	f7ff bf86 	b.w	8007e48 <std>
 8007f3c:	20025ebc 	.word	0x20025ebc
 8007f40:	20025d84 	.word	0x20025d84
 8007f44:	08007eb5 	.word	0x08007eb5

08007f48 <__sfp_lock_acquire>:
 8007f48:	4801      	ldr	r0, [pc, #4]	@ (8007f50 <__sfp_lock_acquire+0x8>)
 8007f4a:	f000 b8e2 	b.w	8008112 <__retarget_lock_acquire_recursive>
 8007f4e:	bf00      	nop
 8007f50:	20025ec1 	.word	0x20025ec1

08007f54 <__sfp_lock_release>:
 8007f54:	4801      	ldr	r0, [pc, #4]	@ (8007f5c <__sfp_lock_release+0x8>)
 8007f56:	f000 b8dd 	b.w	8008114 <__retarget_lock_release_recursive>
 8007f5a:	bf00      	nop
 8007f5c:	20025ec1 	.word	0x20025ec1

08007f60 <__sinit>:
 8007f60:	b510      	push	{r4, lr}
 8007f62:	4604      	mov	r4, r0
 8007f64:	f7ff fff0 	bl	8007f48 <__sfp_lock_acquire>
 8007f68:	6a23      	ldr	r3, [r4, #32]
 8007f6a:	b11b      	cbz	r3, 8007f74 <__sinit+0x14>
 8007f6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f70:	f7ff bff0 	b.w	8007f54 <__sfp_lock_release>
 8007f74:	4b04      	ldr	r3, [pc, #16]	@ (8007f88 <__sinit+0x28>)
 8007f76:	6223      	str	r3, [r4, #32]
 8007f78:	4b04      	ldr	r3, [pc, #16]	@ (8007f8c <__sinit+0x2c>)
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d1f5      	bne.n	8007f6c <__sinit+0xc>
 8007f80:	f7ff ffc4 	bl	8007f0c <global_stdio_init.part.0>
 8007f84:	e7f2      	b.n	8007f6c <__sinit+0xc>
 8007f86:	bf00      	nop
 8007f88:	08007ecd 	.word	0x08007ecd
 8007f8c:	20025ebc 	.word	0x20025ebc

08007f90 <_fwalk_sglue>:
 8007f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f94:	4607      	mov	r7, r0
 8007f96:	4688      	mov	r8, r1
 8007f98:	4614      	mov	r4, r2
 8007f9a:	2600      	movs	r6, #0
 8007f9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007fa0:	f1b9 0901 	subs.w	r9, r9, #1
 8007fa4:	d505      	bpl.n	8007fb2 <_fwalk_sglue+0x22>
 8007fa6:	6824      	ldr	r4, [r4, #0]
 8007fa8:	2c00      	cmp	r4, #0
 8007faa:	d1f7      	bne.n	8007f9c <_fwalk_sglue+0xc>
 8007fac:	4630      	mov	r0, r6
 8007fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fb2:	89ab      	ldrh	r3, [r5, #12]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d907      	bls.n	8007fc8 <_fwalk_sglue+0x38>
 8007fb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	d003      	beq.n	8007fc8 <_fwalk_sglue+0x38>
 8007fc0:	4629      	mov	r1, r5
 8007fc2:	4638      	mov	r0, r7
 8007fc4:	47c0      	blx	r8
 8007fc6:	4306      	orrs	r6, r0
 8007fc8:	3568      	adds	r5, #104	@ 0x68
 8007fca:	e7e9      	b.n	8007fa0 <_fwalk_sglue+0x10>

08007fcc <iprintf>:
 8007fcc:	b40f      	push	{r0, r1, r2, r3}
 8007fce:	b507      	push	{r0, r1, r2, lr}
 8007fd0:	4906      	ldr	r1, [pc, #24]	@ (8007fec <iprintf+0x20>)
 8007fd2:	ab04      	add	r3, sp, #16
 8007fd4:	6808      	ldr	r0, [r1, #0]
 8007fd6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fda:	6881      	ldr	r1, [r0, #8]
 8007fdc:	9301      	str	r3, [sp, #4]
 8007fde:	f000 f8c3 	bl	8008168 <_vfiprintf_r>
 8007fe2:	b003      	add	sp, #12
 8007fe4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fe8:	b004      	add	sp, #16
 8007fea:	4770      	bx	lr
 8007fec:	20000030 	.word	0x20000030

08007ff0 <_puts_r>:
 8007ff0:	6a03      	ldr	r3, [r0, #32]
 8007ff2:	b570      	push	{r4, r5, r6, lr}
 8007ff4:	6884      	ldr	r4, [r0, #8]
 8007ff6:	4605      	mov	r5, r0
 8007ff8:	460e      	mov	r6, r1
 8007ffa:	b90b      	cbnz	r3, 8008000 <_puts_r+0x10>
 8007ffc:	f7ff ffb0 	bl	8007f60 <__sinit>
 8008000:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008002:	07db      	lsls	r3, r3, #31
 8008004:	d405      	bmi.n	8008012 <_puts_r+0x22>
 8008006:	89a3      	ldrh	r3, [r4, #12]
 8008008:	0598      	lsls	r0, r3, #22
 800800a:	d402      	bmi.n	8008012 <_puts_r+0x22>
 800800c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800800e:	f000 f880 	bl	8008112 <__retarget_lock_acquire_recursive>
 8008012:	89a3      	ldrh	r3, [r4, #12]
 8008014:	0719      	lsls	r1, r3, #28
 8008016:	d502      	bpl.n	800801e <_puts_r+0x2e>
 8008018:	6923      	ldr	r3, [r4, #16]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d135      	bne.n	800808a <_puts_r+0x9a>
 800801e:	4621      	mov	r1, r4
 8008020:	4628      	mov	r0, r5
 8008022:	f000 fd23 	bl	8008a6c <__swsetup_r>
 8008026:	b380      	cbz	r0, 800808a <_puts_r+0x9a>
 8008028:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800802c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800802e:	07da      	lsls	r2, r3, #31
 8008030:	d405      	bmi.n	800803e <_puts_r+0x4e>
 8008032:	89a3      	ldrh	r3, [r4, #12]
 8008034:	059b      	lsls	r3, r3, #22
 8008036:	d402      	bmi.n	800803e <_puts_r+0x4e>
 8008038:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800803a:	f000 f86b 	bl	8008114 <__retarget_lock_release_recursive>
 800803e:	4628      	mov	r0, r5
 8008040:	bd70      	pop	{r4, r5, r6, pc}
 8008042:	2b00      	cmp	r3, #0
 8008044:	da04      	bge.n	8008050 <_puts_r+0x60>
 8008046:	69a2      	ldr	r2, [r4, #24]
 8008048:	429a      	cmp	r2, r3
 800804a:	dc17      	bgt.n	800807c <_puts_r+0x8c>
 800804c:	290a      	cmp	r1, #10
 800804e:	d015      	beq.n	800807c <_puts_r+0x8c>
 8008050:	6823      	ldr	r3, [r4, #0]
 8008052:	1c5a      	adds	r2, r3, #1
 8008054:	6022      	str	r2, [r4, #0]
 8008056:	7019      	strb	r1, [r3, #0]
 8008058:	68a3      	ldr	r3, [r4, #8]
 800805a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800805e:	3b01      	subs	r3, #1
 8008060:	60a3      	str	r3, [r4, #8]
 8008062:	2900      	cmp	r1, #0
 8008064:	d1ed      	bne.n	8008042 <_puts_r+0x52>
 8008066:	2b00      	cmp	r3, #0
 8008068:	da11      	bge.n	800808e <_puts_r+0x9e>
 800806a:	4622      	mov	r2, r4
 800806c:	210a      	movs	r1, #10
 800806e:	4628      	mov	r0, r5
 8008070:	f000 fcbd 	bl	80089ee <__swbuf_r>
 8008074:	3001      	adds	r0, #1
 8008076:	d0d7      	beq.n	8008028 <_puts_r+0x38>
 8008078:	250a      	movs	r5, #10
 800807a:	e7d7      	b.n	800802c <_puts_r+0x3c>
 800807c:	4622      	mov	r2, r4
 800807e:	4628      	mov	r0, r5
 8008080:	f000 fcb5 	bl	80089ee <__swbuf_r>
 8008084:	3001      	adds	r0, #1
 8008086:	d1e7      	bne.n	8008058 <_puts_r+0x68>
 8008088:	e7ce      	b.n	8008028 <_puts_r+0x38>
 800808a:	3e01      	subs	r6, #1
 800808c:	e7e4      	b.n	8008058 <_puts_r+0x68>
 800808e:	6823      	ldr	r3, [r4, #0]
 8008090:	1c5a      	adds	r2, r3, #1
 8008092:	6022      	str	r2, [r4, #0]
 8008094:	220a      	movs	r2, #10
 8008096:	701a      	strb	r2, [r3, #0]
 8008098:	e7ee      	b.n	8008078 <_puts_r+0x88>
	...

0800809c <puts>:
 800809c:	4b02      	ldr	r3, [pc, #8]	@ (80080a8 <puts+0xc>)
 800809e:	4601      	mov	r1, r0
 80080a0:	6818      	ldr	r0, [r3, #0]
 80080a2:	f7ff bfa5 	b.w	8007ff0 <_puts_r>
 80080a6:	bf00      	nop
 80080a8:	20000030 	.word	0x20000030

080080ac <memset>:
 80080ac:	4402      	add	r2, r0
 80080ae:	4603      	mov	r3, r0
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d100      	bne.n	80080b6 <memset+0xa>
 80080b4:	4770      	bx	lr
 80080b6:	f803 1b01 	strb.w	r1, [r3], #1
 80080ba:	e7f9      	b.n	80080b0 <memset+0x4>

080080bc <__errno>:
 80080bc:	4b01      	ldr	r3, [pc, #4]	@ (80080c4 <__errno+0x8>)
 80080be:	6818      	ldr	r0, [r3, #0]
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	20000030 	.word	0x20000030

080080c8 <__libc_init_array>:
 80080c8:	b570      	push	{r4, r5, r6, lr}
 80080ca:	4d0d      	ldr	r5, [pc, #52]	@ (8008100 <__libc_init_array+0x38>)
 80080cc:	4c0d      	ldr	r4, [pc, #52]	@ (8008104 <__libc_init_array+0x3c>)
 80080ce:	1b64      	subs	r4, r4, r5
 80080d0:	10a4      	asrs	r4, r4, #2
 80080d2:	2600      	movs	r6, #0
 80080d4:	42a6      	cmp	r6, r4
 80080d6:	d109      	bne.n	80080ec <__libc_init_array+0x24>
 80080d8:	4d0b      	ldr	r5, [pc, #44]	@ (8008108 <__libc_init_array+0x40>)
 80080da:	4c0c      	ldr	r4, [pc, #48]	@ (800810c <__libc_init_array+0x44>)
 80080dc:	f000 fe40 	bl	8008d60 <_init>
 80080e0:	1b64      	subs	r4, r4, r5
 80080e2:	10a4      	asrs	r4, r4, #2
 80080e4:	2600      	movs	r6, #0
 80080e6:	42a6      	cmp	r6, r4
 80080e8:	d105      	bne.n	80080f6 <__libc_init_array+0x2e>
 80080ea:	bd70      	pop	{r4, r5, r6, pc}
 80080ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80080f0:	4798      	blx	r3
 80080f2:	3601      	adds	r6, #1
 80080f4:	e7ee      	b.n	80080d4 <__libc_init_array+0xc>
 80080f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80080fa:	4798      	blx	r3
 80080fc:	3601      	adds	r6, #1
 80080fe:	e7f2      	b.n	80080e6 <__libc_init_array+0x1e>
 8008100:	0800a080 	.word	0x0800a080
 8008104:	0800a080 	.word	0x0800a080
 8008108:	0800a080 	.word	0x0800a080
 800810c:	0800a084 	.word	0x0800a084

08008110 <__retarget_lock_init_recursive>:
 8008110:	4770      	bx	lr

08008112 <__retarget_lock_acquire_recursive>:
 8008112:	4770      	bx	lr

08008114 <__retarget_lock_release_recursive>:
 8008114:	4770      	bx	lr

08008116 <__sfputc_r>:
 8008116:	6893      	ldr	r3, [r2, #8]
 8008118:	3b01      	subs	r3, #1
 800811a:	2b00      	cmp	r3, #0
 800811c:	b410      	push	{r4}
 800811e:	6093      	str	r3, [r2, #8]
 8008120:	da08      	bge.n	8008134 <__sfputc_r+0x1e>
 8008122:	6994      	ldr	r4, [r2, #24]
 8008124:	42a3      	cmp	r3, r4
 8008126:	db01      	blt.n	800812c <__sfputc_r+0x16>
 8008128:	290a      	cmp	r1, #10
 800812a:	d103      	bne.n	8008134 <__sfputc_r+0x1e>
 800812c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008130:	f000 bc5d 	b.w	80089ee <__swbuf_r>
 8008134:	6813      	ldr	r3, [r2, #0]
 8008136:	1c58      	adds	r0, r3, #1
 8008138:	6010      	str	r0, [r2, #0]
 800813a:	7019      	strb	r1, [r3, #0]
 800813c:	4608      	mov	r0, r1
 800813e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008142:	4770      	bx	lr

08008144 <__sfputs_r>:
 8008144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008146:	4606      	mov	r6, r0
 8008148:	460f      	mov	r7, r1
 800814a:	4614      	mov	r4, r2
 800814c:	18d5      	adds	r5, r2, r3
 800814e:	42ac      	cmp	r4, r5
 8008150:	d101      	bne.n	8008156 <__sfputs_r+0x12>
 8008152:	2000      	movs	r0, #0
 8008154:	e007      	b.n	8008166 <__sfputs_r+0x22>
 8008156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800815a:	463a      	mov	r2, r7
 800815c:	4630      	mov	r0, r6
 800815e:	f7ff ffda 	bl	8008116 <__sfputc_r>
 8008162:	1c43      	adds	r3, r0, #1
 8008164:	d1f3      	bne.n	800814e <__sfputs_r+0xa>
 8008166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008168 <_vfiprintf_r>:
 8008168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816c:	460d      	mov	r5, r1
 800816e:	b09d      	sub	sp, #116	@ 0x74
 8008170:	4614      	mov	r4, r2
 8008172:	4698      	mov	r8, r3
 8008174:	4606      	mov	r6, r0
 8008176:	b118      	cbz	r0, 8008180 <_vfiprintf_r+0x18>
 8008178:	6a03      	ldr	r3, [r0, #32]
 800817a:	b90b      	cbnz	r3, 8008180 <_vfiprintf_r+0x18>
 800817c:	f7ff fef0 	bl	8007f60 <__sinit>
 8008180:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008182:	07d9      	lsls	r1, r3, #31
 8008184:	d405      	bmi.n	8008192 <_vfiprintf_r+0x2a>
 8008186:	89ab      	ldrh	r3, [r5, #12]
 8008188:	059a      	lsls	r2, r3, #22
 800818a:	d402      	bmi.n	8008192 <_vfiprintf_r+0x2a>
 800818c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800818e:	f7ff ffc0 	bl	8008112 <__retarget_lock_acquire_recursive>
 8008192:	89ab      	ldrh	r3, [r5, #12]
 8008194:	071b      	lsls	r3, r3, #28
 8008196:	d501      	bpl.n	800819c <_vfiprintf_r+0x34>
 8008198:	692b      	ldr	r3, [r5, #16]
 800819a:	b99b      	cbnz	r3, 80081c4 <_vfiprintf_r+0x5c>
 800819c:	4629      	mov	r1, r5
 800819e:	4630      	mov	r0, r6
 80081a0:	f000 fc64 	bl	8008a6c <__swsetup_r>
 80081a4:	b170      	cbz	r0, 80081c4 <_vfiprintf_r+0x5c>
 80081a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081a8:	07dc      	lsls	r4, r3, #31
 80081aa:	d504      	bpl.n	80081b6 <_vfiprintf_r+0x4e>
 80081ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081b0:	b01d      	add	sp, #116	@ 0x74
 80081b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b6:	89ab      	ldrh	r3, [r5, #12]
 80081b8:	0598      	lsls	r0, r3, #22
 80081ba:	d4f7      	bmi.n	80081ac <_vfiprintf_r+0x44>
 80081bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081be:	f7ff ffa9 	bl	8008114 <__retarget_lock_release_recursive>
 80081c2:	e7f3      	b.n	80081ac <_vfiprintf_r+0x44>
 80081c4:	2300      	movs	r3, #0
 80081c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80081c8:	2320      	movs	r3, #32
 80081ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80081d2:	2330      	movs	r3, #48	@ 0x30
 80081d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008384 <_vfiprintf_r+0x21c>
 80081d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081dc:	f04f 0901 	mov.w	r9, #1
 80081e0:	4623      	mov	r3, r4
 80081e2:	469a      	mov	sl, r3
 80081e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081e8:	b10a      	cbz	r2, 80081ee <_vfiprintf_r+0x86>
 80081ea:	2a25      	cmp	r2, #37	@ 0x25
 80081ec:	d1f9      	bne.n	80081e2 <_vfiprintf_r+0x7a>
 80081ee:	ebba 0b04 	subs.w	fp, sl, r4
 80081f2:	d00b      	beq.n	800820c <_vfiprintf_r+0xa4>
 80081f4:	465b      	mov	r3, fp
 80081f6:	4622      	mov	r2, r4
 80081f8:	4629      	mov	r1, r5
 80081fa:	4630      	mov	r0, r6
 80081fc:	f7ff ffa2 	bl	8008144 <__sfputs_r>
 8008200:	3001      	adds	r0, #1
 8008202:	f000 80a7 	beq.w	8008354 <_vfiprintf_r+0x1ec>
 8008206:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008208:	445a      	add	r2, fp
 800820a:	9209      	str	r2, [sp, #36]	@ 0x24
 800820c:	f89a 3000 	ldrb.w	r3, [sl]
 8008210:	2b00      	cmp	r3, #0
 8008212:	f000 809f 	beq.w	8008354 <_vfiprintf_r+0x1ec>
 8008216:	2300      	movs	r3, #0
 8008218:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800821c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008220:	f10a 0a01 	add.w	sl, sl, #1
 8008224:	9304      	str	r3, [sp, #16]
 8008226:	9307      	str	r3, [sp, #28]
 8008228:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800822c:	931a      	str	r3, [sp, #104]	@ 0x68
 800822e:	4654      	mov	r4, sl
 8008230:	2205      	movs	r2, #5
 8008232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008236:	4853      	ldr	r0, [pc, #332]	@ (8008384 <_vfiprintf_r+0x21c>)
 8008238:	f7f7 ffe2 	bl	8000200 <memchr>
 800823c:	9a04      	ldr	r2, [sp, #16]
 800823e:	b9d8      	cbnz	r0, 8008278 <_vfiprintf_r+0x110>
 8008240:	06d1      	lsls	r1, r2, #27
 8008242:	bf44      	itt	mi
 8008244:	2320      	movmi	r3, #32
 8008246:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800824a:	0713      	lsls	r3, r2, #28
 800824c:	bf44      	itt	mi
 800824e:	232b      	movmi	r3, #43	@ 0x2b
 8008250:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008254:	f89a 3000 	ldrb.w	r3, [sl]
 8008258:	2b2a      	cmp	r3, #42	@ 0x2a
 800825a:	d015      	beq.n	8008288 <_vfiprintf_r+0x120>
 800825c:	9a07      	ldr	r2, [sp, #28]
 800825e:	4654      	mov	r4, sl
 8008260:	2000      	movs	r0, #0
 8008262:	f04f 0c0a 	mov.w	ip, #10
 8008266:	4621      	mov	r1, r4
 8008268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800826c:	3b30      	subs	r3, #48	@ 0x30
 800826e:	2b09      	cmp	r3, #9
 8008270:	d94b      	bls.n	800830a <_vfiprintf_r+0x1a2>
 8008272:	b1b0      	cbz	r0, 80082a2 <_vfiprintf_r+0x13a>
 8008274:	9207      	str	r2, [sp, #28]
 8008276:	e014      	b.n	80082a2 <_vfiprintf_r+0x13a>
 8008278:	eba0 0308 	sub.w	r3, r0, r8
 800827c:	fa09 f303 	lsl.w	r3, r9, r3
 8008280:	4313      	orrs	r3, r2
 8008282:	9304      	str	r3, [sp, #16]
 8008284:	46a2      	mov	sl, r4
 8008286:	e7d2      	b.n	800822e <_vfiprintf_r+0xc6>
 8008288:	9b03      	ldr	r3, [sp, #12]
 800828a:	1d19      	adds	r1, r3, #4
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	9103      	str	r1, [sp, #12]
 8008290:	2b00      	cmp	r3, #0
 8008292:	bfbb      	ittet	lt
 8008294:	425b      	neglt	r3, r3
 8008296:	f042 0202 	orrlt.w	r2, r2, #2
 800829a:	9307      	strge	r3, [sp, #28]
 800829c:	9307      	strlt	r3, [sp, #28]
 800829e:	bfb8      	it	lt
 80082a0:	9204      	strlt	r2, [sp, #16]
 80082a2:	7823      	ldrb	r3, [r4, #0]
 80082a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80082a6:	d10a      	bne.n	80082be <_vfiprintf_r+0x156>
 80082a8:	7863      	ldrb	r3, [r4, #1]
 80082aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80082ac:	d132      	bne.n	8008314 <_vfiprintf_r+0x1ac>
 80082ae:	9b03      	ldr	r3, [sp, #12]
 80082b0:	1d1a      	adds	r2, r3, #4
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	9203      	str	r2, [sp, #12]
 80082b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082ba:	3402      	adds	r4, #2
 80082bc:	9305      	str	r3, [sp, #20]
 80082be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008394 <_vfiprintf_r+0x22c>
 80082c2:	7821      	ldrb	r1, [r4, #0]
 80082c4:	2203      	movs	r2, #3
 80082c6:	4650      	mov	r0, sl
 80082c8:	f7f7 ff9a 	bl	8000200 <memchr>
 80082cc:	b138      	cbz	r0, 80082de <_vfiprintf_r+0x176>
 80082ce:	9b04      	ldr	r3, [sp, #16]
 80082d0:	eba0 000a 	sub.w	r0, r0, sl
 80082d4:	2240      	movs	r2, #64	@ 0x40
 80082d6:	4082      	lsls	r2, r0
 80082d8:	4313      	orrs	r3, r2
 80082da:	3401      	adds	r4, #1
 80082dc:	9304      	str	r3, [sp, #16]
 80082de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082e2:	4829      	ldr	r0, [pc, #164]	@ (8008388 <_vfiprintf_r+0x220>)
 80082e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082e8:	2206      	movs	r2, #6
 80082ea:	f7f7 ff89 	bl	8000200 <memchr>
 80082ee:	2800      	cmp	r0, #0
 80082f0:	d03f      	beq.n	8008372 <_vfiprintf_r+0x20a>
 80082f2:	4b26      	ldr	r3, [pc, #152]	@ (800838c <_vfiprintf_r+0x224>)
 80082f4:	bb1b      	cbnz	r3, 800833e <_vfiprintf_r+0x1d6>
 80082f6:	9b03      	ldr	r3, [sp, #12]
 80082f8:	3307      	adds	r3, #7
 80082fa:	f023 0307 	bic.w	r3, r3, #7
 80082fe:	3308      	adds	r3, #8
 8008300:	9303      	str	r3, [sp, #12]
 8008302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008304:	443b      	add	r3, r7
 8008306:	9309      	str	r3, [sp, #36]	@ 0x24
 8008308:	e76a      	b.n	80081e0 <_vfiprintf_r+0x78>
 800830a:	fb0c 3202 	mla	r2, ip, r2, r3
 800830e:	460c      	mov	r4, r1
 8008310:	2001      	movs	r0, #1
 8008312:	e7a8      	b.n	8008266 <_vfiprintf_r+0xfe>
 8008314:	2300      	movs	r3, #0
 8008316:	3401      	adds	r4, #1
 8008318:	9305      	str	r3, [sp, #20]
 800831a:	4619      	mov	r1, r3
 800831c:	f04f 0c0a 	mov.w	ip, #10
 8008320:	4620      	mov	r0, r4
 8008322:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008326:	3a30      	subs	r2, #48	@ 0x30
 8008328:	2a09      	cmp	r2, #9
 800832a:	d903      	bls.n	8008334 <_vfiprintf_r+0x1cc>
 800832c:	2b00      	cmp	r3, #0
 800832e:	d0c6      	beq.n	80082be <_vfiprintf_r+0x156>
 8008330:	9105      	str	r1, [sp, #20]
 8008332:	e7c4      	b.n	80082be <_vfiprintf_r+0x156>
 8008334:	fb0c 2101 	mla	r1, ip, r1, r2
 8008338:	4604      	mov	r4, r0
 800833a:	2301      	movs	r3, #1
 800833c:	e7f0      	b.n	8008320 <_vfiprintf_r+0x1b8>
 800833e:	ab03      	add	r3, sp, #12
 8008340:	9300      	str	r3, [sp, #0]
 8008342:	462a      	mov	r2, r5
 8008344:	4b12      	ldr	r3, [pc, #72]	@ (8008390 <_vfiprintf_r+0x228>)
 8008346:	a904      	add	r1, sp, #16
 8008348:	4630      	mov	r0, r6
 800834a:	f3af 8000 	nop.w
 800834e:	4607      	mov	r7, r0
 8008350:	1c78      	adds	r0, r7, #1
 8008352:	d1d6      	bne.n	8008302 <_vfiprintf_r+0x19a>
 8008354:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008356:	07d9      	lsls	r1, r3, #31
 8008358:	d405      	bmi.n	8008366 <_vfiprintf_r+0x1fe>
 800835a:	89ab      	ldrh	r3, [r5, #12]
 800835c:	059a      	lsls	r2, r3, #22
 800835e:	d402      	bmi.n	8008366 <_vfiprintf_r+0x1fe>
 8008360:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008362:	f7ff fed7 	bl	8008114 <__retarget_lock_release_recursive>
 8008366:	89ab      	ldrh	r3, [r5, #12]
 8008368:	065b      	lsls	r3, r3, #25
 800836a:	f53f af1f 	bmi.w	80081ac <_vfiprintf_r+0x44>
 800836e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008370:	e71e      	b.n	80081b0 <_vfiprintf_r+0x48>
 8008372:	ab03      	add	r3, sp, #12
 8008374:	9300      	str	r3, [sp, #0]
 8008376:	462a      	mov	r2, r5
 8008378:	4b05      	ldr	r3, [pc, #20]	@ (8008390 <_vfiprintf_r+0x228>)
 800837a:	a904      	add	r1, sp, #16
 800837c:	4630      	mov	r0, r6
 800837e:	f000 f91b 	bl	80085b8 <_printf_i>
 8008382:	e7e4      	b.n	800834e <_vfiprintf_r+0x1e6>
 8008384:	0800a042 	.word	0x0800a042
 8008388:	0800a04c 	.word	0x0800a04c
 800838c:	00000000 	.word	0x00000000
 8008390:	08008145 	.word	0x08008145
 8008394:	0800a048 	.word	0x0800a048

08008398 <sbrk_aligned>:
 8008398:	b570      	push	{r4, r5, r6, lr}
 800839a:	4e0f      	ldr	r6, [pc, #60]	@ (80083d8 <sbrk_aligned+0x40>)
 800839c:	460c      	mov	r4, r1
 800839e:	6831      	ldr	r1, [r6, #0]
 80083a0:	4605      	mov	r5, r0
 80083a2:	b911      	cbnz	r1, 80083aa <sbrk_aligned+0x12>
 80083a4:	f000 fc70 	bl	8008c88 <_sbrk_r>
 80083a8:	6030      	str	r0, [r6, #0]
 80083aa:	4621      	mov	r1, r4
 80083ac:	4628      	mov	r0, r5
 80083ae:	f000 fc6b 	bl	8008c88 <_sbrk_r>
 80083b2:	1c43      	adds	r3, r0, #1
 80083b4:	d103      	bne.n	80083be <sbrk_aligned+0x26>
 80083b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80083ba:	4620      	mov	r0, r4
 80083bc:	bd70      	pop	{r4, r5, r6, pc}
 80083be:	1cc4      	adds	r4, r0, #3
 80083c0:	f024 0403 	bic.w	r4, r4, #3
 80083c4:	42a0      	cmp	r0, r4
 80083c6:	d0f8      	beq.n	80083ba <sbrk_aligned+0x22>
 80083c8:	1a21      	subs	r1, r4, r0
 80083ca:	4628      	mov	r0, r5
 80083cc:	f000 fc5c 	bl	8008c88 <_sbrk_r>
 80083d0:	3001      	adds	r0, #1
 80083d2:	d1f2      	bne.n	80083ba <sbrk_aligned+0x22>
 80083d4:	e7ef      	b.n	80083b6 <sbrk_aligned+0x1e>
 80083d6:	bf00      	nop
 80083d8:	20025ec4 	.word	0x20025ec4

080083dc <_malloc_r>:
 80083dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083e0:	1ccd      	adds	r5, r1, #3
 80083e2:	f025 0503 	bic.w	r5, r5, #3
 80083e6:	3508      	adds	r5, #8
 80083e8:	2d0c      	cmp	r5, #12
 80083ea:	bf38      	it	cc
 80083ec:	250c      	movcc	r5, #12
 80083ee:	2d00      	cmp	r5, #0
 80083f0:	4606      	mov	r6, r0
 80083f2:	db01      	blt.n	80083f8 <_malloc_r+0x1c>
 80083f4:	42a9      	cmp	r1, r5
 80083f6:	d904      	bls.n	8008402 <_malloc_r+0x26>
 80083f8:	230c      	movs	r3, #12
 80083fa:	6033      	str	r3, [r6, #0]
 80083fc:	2000      	movs	r0, #0
 80083fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008402:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084d8 <_malloc_r+0xfc>
 8008406:	f000 faa3 	bl	8008950 <__malloc_lock>
 800840a:	f8d8 3000 	ldr.w	r3, [r8]
 800840e:	461c      	mov	r4, r3
 8008410:	bb44      	cbnz	r4, 8008464 <_malloc_r+0x88>
 8008412:	4629      	mov	r1, r5
 8008414:	4630      	mov	r0, r6
 8008416:	f7ff ffbf 	bl	8008398 <sbrk_aligned>
 800841a:	1c43      	adds	r3, r0, #1
 800841c:	4604      	mov	r4, r0
 800841e:	d158      	bne.n	80084d2 <_malloc_r+0xf6>
 8008420:	f8d8 4000 	ldr.w	r4, [r8]
 8008424:	4627      	mov	r7, r4
 8008426:	2f00      	cmp	r7, #0
 8008428:	d143      	bne.n	80084b2 <_malloc_r+0xd6>
 800842a:	2c00      	cmp	r4, #0
 800842c:	d04b      	beq.n	80084c6 <_malloc_r+0xea>
 800842e:	6823      	ldr	r3, [r4, #0]
 8008430:	4639      	mov	r1, r7
 8008432:	4630      	mov	r0, r6
 8008434:	eb04 0903 	add.w	r9, r4, r3
 8008438:	f000 fc26 	bl	8008c88 <_sbrk_r>
 800843c:	4581      	cmp	r9, r0
 800843e:	d142      	bne.n	80084c6 <_malloc_r+0xea>
 8008440:	6821      	ldr	r1, [r4, #0]
 8008442:	1a6d      	subs	r5, r5, r1
 8008444:	4629      	mov	r1, r5
 8008446:	4630      	mov	r0, r6
 8008448:	f7ff ffa6 	bl	8008398 <sbrk_aligned>
 800844c:	3001      	adds	r0, #1
 800844e:	d03a      	beq.n	80084c6 <_malloc_r+0xea>
 8008450:	6823      	ldr	r3, [r4, #0]
 8008452:	442b      	add	r3, r5
 8008454:	6023      	str	r3, [r4, #0]
 8008456:	f8d8 3000 	ldr.w	r3, [r8]
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	bb62      	cbnz	r2, 80084b8 <_malloc_r+0xdc>
 800845e:	f8c8 7000 	str.w	r7, [r8]
 8008462:	e00f      	b.n	8008484 <_malloc_r+0xa8>
 8008464:	6822      	ldr	r2, [r4, #0]
 8008466:	1b52      	subs	r2, r2, r5
 8008468:	d420      	bmi.n	80084ac <_malloc_r+0xd0>
 800846a:	2a0b      	cmp	r2, #11
 800846c:	d917      	bls.n	800849e <_malloc_r+0xc2>
 800846e:	1961      	adds	r1, r4, r5
 8008470:	42a3      	cmp	r3, r4
 8008472:	6025      	str	r5, [r4, #0]
 8008474:	bf18      	it	ne
 8008476:	6059      	strne	r1, [r3, #4]
 8008478:	6863      	ldr	r3, [r4, #4]
 800847a:	bf08      	it	eq
 800847c:	f8c8 1000 	streq.w	r1, [r8]
 8008480:	5162      	str	r2, [r4, r5]
 8008482:	604b      	str	r3, [r1, #4]
 8008484:	4630      	mov	r0, r6
 8008486:	f000 fa69 	bl	800895c <__malloc_unlock>
 800848a:	f104 000b 	add.w	r0, r4, #11
 800848e:	1d23      	adds	r3, r4, #4
 8008490:	f020 0007 	bic.w	r0, r0, #7
 8008494:	1ac2      	subs	r2, r0, r3
 8008496:	bf1c      	itt	ne
 8008498:	1a1b      	subne	r3, r3, r0
 800849a:	50a3      	strne	r3, [r4, r2]
 800849c:	e7af      	b.n	80083fe <_malloc_r+0x22>
 800849e:	6862      	ldr	r2, [r4, #4]
 80084a0:	42a3      	cmp	r3, r4
 80084a2:	bf0c      	ite	eq
 80084a4:	f8c8 2000 	streq.w	r2, [r8]
 80084a8:	605a      	strne	r2, [r3, #4]
 80084aa:	e7eb      	b.n	8008484 <_malloc_r+0xa8>
 80084ac:	4623      	mov	r3, r4
 80084ae:	6864      	ldr	r4, [r4, #4]
 80084b0:	e7ae      	b.n	8008410 <_malloc_r+0x34>
 80084b2:	463c      	mov	r4, r7
 80084b4:	687f      	ldr	r7, [r7, #4]
 80084b6:	e7b6      	b.n	8008426 <_malloc_r+0x4a>
 80084b8:	461a      	mov	r2, r3
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	42a3      	cmp	r3, r4
 80084be:	d1fb      	bne.n	80084b8 <_malloc_r+0xdc>
 80084c0:	2300      	movs	r3, #0
 80084c2:	6053      	str	r3, [r2, #4]
 80084c4:	e7de      	b.n	8008484 <_malloc_r+0xa8>
 80084c6:	230c      	movs	r3, #12
 80084c8:	6033      	str	r3, [r6, #0]
 80084ca:	4630      	mov	r0, r6
 80084cc:	f000 fa46 	bl	800895c <__malloc_unlock>
 80084d0:	e794      	b.n	80083fc <_malloc_r+0x20>
 80084d2:	6005      	str	r5, [r0, #0]
 80084d4:	e7d6      	b.n	8008484 <_malloc_r+0xa8>
 80084d6:	bf00      	nop
 80084d8:	20025ec8 	.word	0x20025ec8

080084dc <_printf_common>:
 80084dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084e0:	4616      	mov	r6, r2
 80084e2:	4698      	mov	r8, r3
 80084e4:	688a      	ldr	r2, [r1, #8]
 80084e6:	690b      	ldr	r3, [r1, #16]
 80084e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084ec:	4293      	cmp	r3, r2
 80084ee:	bfb8      	it	lt
 80084f0:	4613      	movlt	r3, r2
 80084f2:	6033      	str	r3, [r6, #0]
 80084f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80084f8:	4607      	mov	r7, r0
 80084fa:	460c      	mov	r4, r1
 80084fc:	b10a      	cbz	r2, 8008502 <_printf_common+0x26>
 80084fe:	3301      	adds	r3, #1
 8008500:	6033      	str	r3, [r6, #0]
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	0699      	lsls	r1, r3, #26
 8008506:	bf42      	ittt	mi
 8008508:	6833      	ldrmi	r3, [r6, #0]
 800850a:	3302      	addmi	r3, #2
 800850c:	6033      	strmi	r3, [r6, #0]
 800850e:	6825      	ldr	r5, [r4, #0]
 8008510:	f015 0506 	ands.w	r5, r5, #6
 8008514:	d106      	bne.n	8008524 <_printf_common+0x48>
 8008516:	f104 0a19 	add.w	sl, r4, #25
 800851a:	68e3      	ldr	r3, [r4, #12]
 800851c:	6832      	ldr	r2, [r6, #0]
 800851e:	1a9b      	subs	r3, r3, r2
 8008520:	42ab      	cmp	r3, r5
 8008522:	dc26      	bgt.n	8008572 <_printf_common+0x96>
 8008524:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008528:	6822      	ldr	r2, [r4, #0]
 800852a:	3b00      	subs	r3, #0
 800852c:	bf18      	it	ne
 800852e:	2301      	movne	r3, #1
 8008530:	0692      	lsls	r2, r2, #26
 8008532:	d42b      	bmi.n	800858c <_printf_common+0xb0>
 8008534:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008538:	4641      	mov	r1, r8
 800853a:	4638      	mov	r0, r7
 800853c:	47c8      	blx	r9
 800853e:	3001      	adds	r0, #1
 8008540:	d01e      	beq.n	8008580 <_printf_common+0xa4>
 8008542:	6823      	ldr	r3, [r4, #0]
 8008544:	6922      	ldr	r2, [r4, #16]
 8008546:	f003 0306 	and.w	r3, r3, #6
 800854a:	2b04      	cmp	r3, #4
 800854c:	bf02      	ittt	eq
 800854e:	68e5      	ldreq	r5, [r4, #12]
 8008550:	6833      	ldreq	r3, [r6, #0]
 8008552:	1aed      	subeq	r5, r5, r3
 8008554:	68a3      	ldr	r3, [r4, #8]
 8008556:	bf0c      	ite	eq
 8008558:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800855c:	2500      	movne	r5, #0
 800855e:	4293      	cmp	r3, r2
 8008560:	bfc4      	itt	gt
 8008562:	1a9b      	subgt	r3, r3, r2
 8008564:	18ed      	addgt	r5, r5, r3
 8008566:	2600      	movs	r6, #0
 8008568:	341a      	adds	r4, #26
 800856a:	42b5      	cmp	r5, r6
 800856c:	d11a      	bne.n	80085a4 <_printf_common+0xc8>
 800856e:	2000      	movs	r0, #0
 8008570:	e008      	b.n	8008584 <_printf_common+0xa8>
 8008572:	2301      	movs	r3, #1
 8008574:	4652      	mov	r2, sl
 8008576:	4641      	mov	r1, r8
 8008578:	4638      	mov	r0, r7
 800857a:	47c8      	blx	r9
 800857c:	3001      	adds	r0, #1
 800857e:	d103      	bne.n	8008588 <_printf_common+0xac>
 8008580:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008588:	3501      	adds	r5, #1
 800858a:	e7c6      	b.n	800851a <_printf_common+0x3e>
 800858c:	18e1      	adds	r1, r4, r3
 800858e:	1c5a      	adds	r2, r3, #1
 8008590:	2030      	movs	r0, #48	@ 0x30
 8008592:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008596:	4422      	add	r2, r4
 8008598:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800859c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80085a0:	3302      	adds	r3, #2
 80085a2:	e7c7      	b.n	8008534 <_printf_common+0x58>
 80085a4:	2301      	movs	r3, #1
 80085a6:	4622      	mov	r2, r4
 80085a8:	4641      	mov	r1, r8
 80085aa:	4638      	mov	r0, r7
 80085ac:	47c8      	blx	r9
 80085ae:	3001      	adds	r0, #1
 80085b0:	d0e6      	beq.n	8008580 <_printf_common+0xa4>
 80085b2:	3601      	adds	r6, #1
 80085b4:	e7d9      	b.n	800856a <_printf_common+0x8e>
	...

080085b8 <_printf_i>:
 80085b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085bc:	7e0f      	ldrb	r7, [r1, #24]
 80085be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80085c0:	2f78      	cmp	r7, #120	@ 0x78
 80085c2:	4691      	mov	r9, r2
 80085c4:	4680      	mov	r8, r0
 80085c6:	460c      	mov	r4, r1
 80085c8:	469a      	mov	sl, r3
 80085ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80085ce:	d807      	bhi.n	80085e0 <_printf_i+0x28>
 80085d0:	2f62      	cmp	r7, #98	@ 0x62
 80085d2:	d80a      	bhi.n	80085ea <_printf_i+0x32>
 80085d4:	2f00      	cmp	r7, #0
 80085d6:	f000 80d2 	beq.w	800877e <_printf_i+0x1c6>
 80085da:	2f58      	cmp	r7, #88	@ 0x58
 80085dc:	f000 80b9 	beq.w	8008752 <_printf_i+0x19a>
 80085e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80085e8:	e03a      	b.n	8008660 <_printf_i+0xa8>
 80085ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80085ee:	2b15      	cmp	r3, #21
 80085f0:	d8f6      	bhi.n	80085e0 <_printf_i+0x28>
 80085f2:	a101      	add	r1, pc, #4	@ (adr r1, 80085f8 <_printf_i+0x40>)
 80085f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085f8:	08008651 	.word	0x08008651
 80085fc:	08008665 	.word	0x08008665
 8008600:	080085e1 	.word	0x080085e1
 8008604:	080085e1 	.word	0x080085e1
 8008608:	080085e1 	.word	0x080085e1
 800860c:	080085e1 	.word	0x080085e1
 8008610:	08008665 	.word	0x08008665
 8008614:	080085e1 	.word	0x080085e1
 8008618:	080085e1 	.word	0x080085e1
 800861c:	080085e1 	.word	0x080085e1
 8008620:	080085e1 	.word	0x080085e1
 8008624:	08008765 	.word	0x08008765
 8008628:	0800868f 	.word	0x0800868f
 800862c:	0800871f 	.word	0x0800871f
 8008630:	080085e1 	.word	0x080085e1
 8008634:	080085e1 	.word	0x080085e1
 8008638:	08008787 	.word	0x08008787
 800863c:	080085e1 	.word	0x080085e1
 8008640:	0800868f 	.word	0x0800868f
 8008644:	080085e1 	.word	0x080085e1
 8008648:	080085e1 	.word	0x080085e1
 800864c:	08008727 	.word	0x08008727
 8008650:	6833      	ldr	r3, [r6, #0]
 8008652:	1d1a      	adds	r2, r3, #4
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	6032      	str	r2, [r6, #0]
 8008658:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800865c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008660:	2301      	movs	r3, #1
 8008662:	e09d      	b.n	80087a0 <_printf_i+0x1e8>
 8008664:	6833      	ldr	r3, [r6, #0]
 8008666:	6820      	ldr	r0, [r4, #0]
 8008668:	1d19      	adds	r1, r3, #4
 800866a:	6031      	str	r1, [r6, #0]
 800866c:	0606      	lsls	r6, r0, #24
 800866e:	d501      	bpl.n	8008674 <_printf_i+0xbc>
 8008670:	681d      	ldr	r5, [r3, #0]
 8008672:	e003      	b.n	800867c <_printf_i+0xc4>
 8008674:	0645      	lsls	r5, r0, #25
 8008676:	d5fb      	bpl.n	8008670 <_printf_i+0xb8>
 8008678:	f9b3 5000 	ldrsh.w	r5, [r3]
 800867c:	2d00      	cmp	r5, #0
 800867e:	da03      	bge.n	8008688 <_printf_i+0xd0>
 8008680:	232d      	movs	r3, #45	@ 0x2d
 8008682:	426d      	negs	r5, r5
 8008684:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008688:	4859      	ldr	r0, [pc, #356]	@ (80087f0 <_printf_i+0x238>)
 800868a:	230a      	movs	r3, #10
 800868c:	e011      	b.n	80086b2 <_printf_i+0xfa>
 800868e:	6821      	ldr	r1, [r4, #0]
 8008690:	6833      	ldr	r3, [r6, #0]
 8008692:	0608      	lsls	r0, r1, #24
 8008694:	f853 5b04 	ldr.w	r5, [r3], #4
 8008698:	d402      	bmi.n	80086a0 <_printf_i+0xe8>
 800869a:	0649      	lsls	r1, r1, #25
 800869c:	bf48      	it	mi
 800869e:	b2ad      	uxthmi	r5, r5
 80086a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80086a2:	4853      	ldr	r0, [pc, #332]	@ (80087f0 <_printf_i+0x238>)
 80086a4:	6033      	str	r3, [r6, #0]
 80086a6:	bf14      	ite	ne
 80086a8:	230a      	movne	r3, #10
 80086aa:	2308      	moveq	r3, #8
 80086ac:	2100      	movs	r1, #0
 80086ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80086b2:	6866      	ldr	r6, [r4, #4]
 80086b4:	60a6      	str	r6, [r4, #8]
 80086b6:	2e00      	cmp	r6, #0
 80086b8:	bfa2      	ittt	ge
 80086ba:	6821      	ldrge	r1, [r4, #0]
 80086bc:	f021 0104 	bicge.w	r1, r1, #4
 80086c0:	6021      	strge	r1, [r4, #0]
 80086c2:	b90d      	cbnz	r5, 80086c8 <_printf_i+0x110>
 80086c4:	2e00      	cmp	r6, #0
 80086c6:	d04b      	beq.n	8008760 <_printf_i+0x1a8>
 80086c8:	4616      	mov	r6, r2
 80086ca:	fbb5 f1f3 	udiv	r1, r5, r3
 80086ce:	fb03 5711 	mls	r7, r3, r1, r5
 80086d2:	5dc7      	ldrb	r7, [r0, r7]
 80086d4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086d8:	462f      	mov	r7, r5
 80086da:	42bb      	cmp	r3, r7
 80086dc:	460d      	mov	r5, r1
 80086de:	d9f4      	bls.n	80086ca <_printf_i+0x112>
 80086e0:	2b08      	cmp	r3, #8
 80086e2:	d10b      	bne.n	80086fc <_printf_i+0x144>
 80086e4:	6823      	ldr	r3, [r4, #0]
 80086e6:	07df      	lsls	r7, r3, #31
 80086e8:	d508      	bpl.n	80086fc <_printf_i+0x144>
 80086ea:	6923      	ldr	r3, [r4, #16]
 80086ec:	6861      	ldr	r1, [r4, #4]
 80086ee:	4299      	cmp	r1, r3
 80086f0:	bfde      	ittt	le
 80086f2:	2330      	movle	r3, #48	@ 0x30
 80086f4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086f8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80086fc:	1b92      	subs	r2, r2, r6
 80086fe:	6122      	str	r2, [r4, #16]
 8008700:	f8cd a000 	str.w	sl, [sp]
 8008704:	464b      	mov	r3, r9
 8008706:	aa03      	add	r2, sp, #12
 8008708:	4621      	mov	r1, r4
 800870a:	4640      	mov	r0, r8
 800870c:	f7ff fee6 	bl	80084dc <_printf_common>
 8008710:	3001      	adds	r0, #1
 8008712:	d14a      	bne.n	80087aa <_printf_i+0x1f2>
 8008714:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008718:	b004      	add	sp, #16
 800871a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800871e:	6823      	ldr	r3, [r4, #0]
 8008720:	f043 0320 	orr.w	r3, r3, #32
 8008724:	6023      	str	r3, [r4, #0]
 8008726:	4833      	ldr	r0, [pc, #204]	@ (80087f4 <_printf_i+0x23c>)
 8008728:	2778      	movs	r7, #120	@ 0x78
 800872a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800872e:	6823      	ldr	r3, [r4, #0]
 8008730:	6831      	ldr	r1, [r6, #0]
 8008732:	061f      	lsls	r7, r3, #24
 8008734:	f851 5b04 	ldr.w	r5, [r1], #4
 8008738:	d402      	bmi.n	8008740 <_printf_i+0x188>
 800873a:	065f      	lsls	r7, r3, #25
 800873c:	bf48      	it	mi
 800873e:	b2ad      	uxthmi	r5, r5
 8008740:	6031      	str	r1, [r6, #0]
 8008742:	07d9      	lsls	r1, r3, #31
 8008744:	bf44      	itt	mi
 8008746:	f043 0320 	orrmi.w	r3, r3, #32
 800874a:	6023      	strmi	r3, [r4, #0]
 800874c:	b11d      	cbz	r5, 8008756 <_printf_i+0x19e>
 800874e:	2310      	movs	r3, #16
 8008750:	e7ac      	b.n	80086ac <_printf_i+0xf4>
 8008752:	4827      	ldr	r0, [pc, #156]	@ (80087f0 <_printf_i+0x238>)
 8008754:	e7e9      	b.n	800872a <_printf_i+0x172>
 8008756:	6823      	ldr	r3, [r4, #0]
 8008758:	f023 0320 	bic.w	r3, r3, #32
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	e7f6      	b.n	800874e <_printf_i+0x196>
 8008760:	4616      	mov	r6, r2
 8008762:	e7bd      	b.n	80086e0 <_printf_i+0x128>
 8008764:	6833      	ldr	r3, [r6, #0]
 8008766:	6825      	ldr	r5, [r4, #0]
 8008768:	6961      	ldr	r1, [r4, #20]
 800876a:	1d18      	adds	r0, r3, #4
 800876c:	6030      	str	r0, [r6, #0]
 800876e:	062e      	lsls	r6, r5, #24
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	d501      	bpl.n	8008778 <_printf_i+0x1c0>
 8008774:	6019      	str	r1, [r3, #0]
 8008776:	e002      	b.n	800877e <_printf_i+0x1c6>
 8008778:	0668      	lsls	r0, r5, #25
 800877a:	d5fb      	bpl.n	8008774 <_printf_i+0x1bc>
 800877c:	8019      	strh	r1, [r3, #0]
 800877e:	2300      	movs	r3, #0
 8008780:	6123      	str	r3, [r4, #16]
 8008782:	4616      	mov	r6, r2
 8008784:	e7bc      	b.n	8008700 <_printf_i+0x148>
 8008786:	6833      	ldr	r3, [r6, #0]
 8008788:	1d1a      	adds	r2, r3, #4
 800878a:	6032      	str	r2, [r6, #0]
 800878c:	681e      	ldr	r6, [r3, #0]
 800878e:	6862      	ldr	r2, [r4, #4]
 8008790:	2100      	movs	r1, #0
 8008792:	4630      	mov	r0, r6
 8008794:	f7f7 fd34 	bl	8000200 <memchr>
 8008798:	b108      	cbz	r0, 800879e <_printf_i+0x1e6>
 800879a:	1b80      	subs	r0, r0, r6
 800879c:	6060      	str	r0, [r4, #4]
 800879e:	6863      	ldr	r3, [r4, #4]
 80087a0:	6123      	str	r3, [r4, #16]
 80087a2:	2300      	movs	r3, #0
 80087a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087a8:	e7aa      	b.n	8008700 <_printf_i+0x148>
 80087aa:	6923      	ldr	r3, [r4, #16]
 80087ac:	4632      	mov	r2, r6
 80087ae:	4649      	mov	r1, r9
 80087b0:	4640      	mov	r0, r8
 80087b2:	47d0      	blx	sl
 80087b4:	3001      	adds	r0, #1
 80087b6:	d0ad      	beq.n	8008714 <_printf_i+0x15c>
 80087b8:	6823      	ldr	r3, [r4, #0]
 80087ba:	079b      	lsls	r3, r3, #30
 80087bc:	d413      	bmi.n	80087e6 <_printf_i+0x22e>
 80087be:	68e0      	ldr	r0, [r4, #12]
 80087c0:	9b03      	ldr	r3, [sp, #12]
 80087c2:	4298      	cmp	r0, r3
 80087c4:	bfb8      	it	lt
 80087c6:	4618      	movlt	r0, r3
 80087c8:	e7a6      	b.n	8008718 <_printf_i+0x160>
 80087ca:	2301      	movs	r3, #1
 80087cc:	4632      	mov	r2, r6
 80087ce:	4649      	mov	r1, r9
 80087d0:	4640      	mov	r0, r8
 80087d2:	47d0      	blx	sl
 80087d4:	3001      	adds	r0, #1
 80087d6:	d09d      	beq.n	8008714 <_printf_i+0x15c>
 80087d8:	3501      	adds	r5, #1
 80087da:	68e3      	ldr	r3, [r4, #12]
 80087dc:	9903      	ldr	r1, [sp, #12]
 80087de:	1a5b      	subs	r3, r3, r1
 80087e0:	42ab      	cmp	r3, r5
 80087e2:	dcf2      	bgt.n	80087ca <_printf_i+0x212>
 80087e4:	e7eb      	b.n	80087be <_printf_i+0x206>
 80087e6:	2500      	movs	r5, #0
 80087e8:	f104 0619 	add.w	r6, r4, #25
 80087ec:	e7f5      	b.n	80087da <_printf_i+0x222>
 80087ee:	bf00      	nop
 80087f0:	0800a053 	.word	0x0800a053
 80087f4:	0800a064 	.word	0x0800a064

080087f8 <__sflush_r>:
 80087f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008800:	0716      	lsls	r6, r2, #28
 8008802:	4605      	mov	r5, r0
 8008804:	460c      	mov	r4, r1
 8008806:	d454      	bmi.n	80088b2 <__sflush_r+0xba>
 8008808:	684b      	ldr	r3, [r1, #4]
 800880a:	2b00      	cmp	r3, #0
 800880c:	dc02      	bgt.n	8008814 <__sflush_r+0x1c>
 800880e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008810:	2b00      	cmp	r3, #0
 8008812:	dd48      	ble.n	80088a6 <__sflush_r+0xae>
 8008814:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008816:	2e00      	cmp	r6, #0
 8008818:	d045      	beq.n	80088a6 <__sflush_r+0xae>
 800881a:	2300      	movs	r3, #0
 800881c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008820:	682f      	ldr	r7, [r5, #0]
 8008822:	6a21      	ldr	r1, [r4, #32]
 8008824:	602b      	str	r3, [r5, #0]
 8008826:	d030      	beq.n	800888a <__sflush_r+0x92>
 8008828:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800882a:	89a3      	ldrh	r3, [r4, #12]
 800882c:	0759      	lsls	r1, r3, #29
 800882e:	d505      	bpl.n	800883c <__sflush_r+0x44>
 8008830:	6863      	ldr	r3, [r4, #4]
 8008832:	1ad2      	subs	r2, r2, r3
 8008834:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008836:	b10b      	cbz	r3, 800883c <__sflush_r+0x44>
 8008838:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800883a:	1ad2      	subs	r2, r2, r3
 800883c:	2300      	movs	r3, #0
 800883e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008840:	6a21      	ldr	r1, [r4, #32]
 8008842:	4628      	mov	r0, r5
 8008844:	47b0      	blx	r6
 8008846:	1c43      	adds	r3, r0, #1
 8008848:	89a3      	ldrh	r3, [r4, #12]
 800884a:	d106      	bne.n	800885a <__sflush_r+0x62>
 800884c:	6829      	ldr	r1, [r5, #0]
 800884e:	291d      	cmp	r1, #29
 8008850:	d82b      	bhi.n	80088aa <__sflush_r+0xb2>
 8008852:	4a2a      	ldr	r2, [pc, #168]	@ (80088fc <__sflush_r+0x104>)
 8008854:	410a      	asrs	r2, r1
 8008856:	07d6      	lsls	r6, r2, #31
 8008858:	d427      	bmi.n	80088aa <__sflush_r+0xb2>
 800885a:	2200      	movs	r2, #0
 800885c:	6062      	str	r2, [r4, #4]
 800885e:	04d9      	lsls	r1, r3, #19
 8008860:	6922      	ldr	r2, [r4, #16]
 8008862:	6022      	str	r2, [r4, #0]
 8008864:	d504      	bpl.n	8008870 <__sflush_r+0x78>
 8008866:	1c42      	adds	r2, r0, #1
 8008868:	d101      	bne.n	800886e <__sflush_r+0x76>
 800886a:	682b      	ldr	r3, [r5, #0]
 800886c:	b903      	cbnz	r3, 8008870 <__sflush_r+0x78>
 800886e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008870:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008872:	602f      	str	r7, [r5, #0]
 8008874:	b1b9      	cbz	r1, 80088a6 <__sflush_r+0xae>
 8008876:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800887a:	4299      	cmp	r1, r3
 800887c:	d002      	beq.n	8008884 <__sflush_r+0x8c>
 800887e:	4628      	mov	r0, r5
 8008880:	f000 fa24 	bl	8008ccc <_free_r>
 8008884:	2300      	movs	r3, #0
 8008886:	6363      	str	r3, [r4, #52]	@ 0x34
 8008888:	e00d      	b.n	80088a6 <__sflush_r+0xae>
 800888a:	2301      	movs	r3, #1
 800888c:	4628      	mov	r0, r5
 800888e:	47b0      	blx	r6
 8008890:	4602      	mov	r2, r0
 8008892:	1c50      	adds	r0, r2, #1
 8008894:	d1c9      	bne.n	800882a <__sflush_r+0x32>
 8008896:	682b      	ldr	r3, [r5, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d0c6      	beq.n	800882a <__sflush_r+0x32>
 800889c:	2b1d      	cmp	r3, #29
 800889e:	d001      	beq.n	80088a4 <__sflush_r+0xac>
 80088a0:	2b16      	cmp	r3, #22
 80088a2:	d11e      	bne.n	80088e2 <__sflush_r+0xea>
 80088a4:	602f      	str	r7, [r5, #0]
 80088a6:	2000      	movs	r0, #0
 80088a8:	e022      	b.n	80088f0 <__sflush_r+0xf8>
 80088aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088ae:	b21b      	sxth	r3, r3
 80088b0:	e01b      	b.n	80088ea <__sflush_r+0xf2>
 80088b2:	690f      	ldr	r7, [r1, #16]
 80088b4:	2f00      	cmp	r7, #0
 80088b6:	d0f6      	beq.n	80088a6 <__sflush_r+0xae>
 80088b8:	0793      	lsls	r3, r2, #30
 80088ba:	680e      	ldr	r6, [r1, #0]
 80088bc:	bf08      	it	eq
 80088be:	694b      	ldreq	r3, [r1, #20]
 80088c0:	600f      	str	r7, [r1, #0]
 80088c2:	bf18      	it	ne
 80088c4:	2300      	movne	r3, #0
 80088c6:	eba6 0807 	sub.w	r8, r6, r7
 80088ca:	608b      	str	r3, [r1, #8]
 80088cc:	f1b8 0f00 	cmp.w	r8, #0
 80088d0:	dde9      	ble.n	80088a6 <__sflush_r+0xae>
 80088d2:	6a21      	ldr	r1, [r4, #32]
 80088d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80088d6:	4643      	mov	r3, r8
 80088d8:	463a      	mov	r2, r7
 80088da:	4628      	mov	r0, r5
 80088dc:	47b0      	blx	r6
 80088de:	2800      	cmp	r0, #0
 80088e0:	dc08      	bgt.n	80088f4 <__sflush_r+0xfc>
 80088e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088ea:	81a3      	strh	r3, [r4, #12]
 80088ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088f4:	4407      	add	r7, r0
 80088f6:	eba8 0800 	sub.w	r8, r8, r0
 80088fa:	e7e7      	b.n	80088cc <__sflush_r+0xd4>
 80088fc:	dfbffffe 	.word	0xdfbffffe

08008900 <_fflush_r>:
 8008900:	b538      	push	{r3, r4, r5, lr}
 8008902:	690b      	ldr	r3, [r1, #16]
 8008904:	4605      	mov	r5, r0
 8008906:	460c      	mov	r4, r1
 8008908:	b913      	cbnz	r3, 8008910 <_fflush_r+0x10>
 800890a:	2500      	movs	r5, #0
 800890c:	4628      	mov	r0, r5
 800890e:	bd38      	pop	{r3, r4, r5, pc}
 8008910:	b118      	cbz	r0, 800891a <_fflush_r+0x1a>
 8008912:	6a03      	ldr	r3, [r0, #32]
 8008914:	b90b      	cbnz	r3, 800891a <_fflush_r+0x1a>
 8008916:	f7ff fb23 	bl	8007f60 <__sinit>
 800891a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d0f3      	beq.n	800890a <_fflush_r+0xa>
 8008922:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008924:	07d0      	lsls	r0, r2, #31
 8008926:	d404      	bmi.n	8008932 <_fflush_r+0x32>
 8008928:	0599      	lsls	r1, r3, #22
 800892a:	d402      	bmi.n	8008932 <_fflush_r+0x32>
 800892c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800892e:	f7ff fbf0 	bl	8008112 <__retarget_lock_acquire_recursive>
 8008932:	4628      	mov	r0, r5
 8008934:	4621      	mov	r1, r4
 8008936:	f7ff ff5f 	bl	80087f8 <__sflush_r>
 800893a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800893c:	07da      	lsls	r2, r3, #31
 800893e:	4605      	mov	r5, r0
 8008940:	d4e4      	bmi.n	800890c <_fflush_r+0xc>
 8008942:	89a3      	ldrh	r3, [r4, #12]
 8008944:	059b      	lsls	r3, r3, #22
 8008946:	d4e1      	bmi.n	800890c <_fflush_r+0xc>
 8008948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800894a:	f7ff fbe3 	bl	8008114 <__retarget_lock_release_recursive>
 800894e:	e7dd      	b.n	800890c <_fflush_r+0xc>

08008950 <__malloc_lock>:
 8008950:	4801      	ldr	r0, [pc, #4]	@ (8008958 <__malloc_lock+0x8>)
 8008952:	f7ff bbde 	b.w	8008112 <__retarget_lock_acquire_recursive>
 8008956:	bf00      	nop
 8008958:	20025ec0 	.word	0x20025ec0

0800895c <__malloc_unlock>:
 800895c:	4801      	ldr	r0, [pc, #4]	@ (8008964 <__malloc_unlock+0x8>)
 800895e:	f7ff bbd9 	b.w	8008114 <__retarget_lock_release_recursive>
 8008962:	bf00      	nop
 8008964:	20025ec0 	.word	0x20025ec0

08008968 <__sread>:
 8008968:	b510      	push	{r4, lr}
 800896a:	460c      	mov	r4, r1
 800896c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008970:	f000 f978 	bl	8008c64 <_read_r>
 8008974:	2800      	cmp	r0, #0
 8008976:	bfab      	itete	ge
 8008978:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800897a:	89a3      	ldrhlt	r3, [r4, #12]
 800897c:	181b      	addge	r3, r3, r0
 800897e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008982:	bfac      	ite	ge
 8008984:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008986:	81a3      	strhlt	r3, [r4, #12]
 8008988:	bd10      	pop	{r4, pc}

0800898a <__swrite>:
 800898a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800898e:	461f      	mov	r7, r3
 8008990:	898b      	ldrh	r3, [r1, #12]
 8008992:	05db      	lsls	r3, r3, #23
 8008994:	4605      	mov	r5, r0
 8008996:	460c      	mov	r4, r1
 8008998:	4616      	mov	r6, r2
 800899a:	d505      	bpl.n	80089a8 <__swrite+0x1e>
 800899c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089a0:	2302      	movs	r3, #2
 80089a2:	2200      	movs	r2, #0
 80089a4:	f000 f94c 	bl	8008c40 <_lseek_r>
 80089a8:	89a3      	ldrh	r3, [r4, #12]
 80089aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80089b2:	81a3      	strh	r3, [r4, #12]
 80089b4:	4632      	mov	r2, r6
 80089b6:	463b      	mov	r3, r7
 80089b8:	4628      	mov	r0, r5
 80089ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089be:	f000 b973 	b.w	8008ca8 <_write_r>

080089c2 <__sseek>:
 80089c2:	b510      	push	{r4, lr}
 80089c4:	460c      	mov	r4, r1
 80089c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ca:	f000 f939 	bl	8008c40 <_lseek_r>
 80089ce:	1c43      	adds	r3, r0, #1
 80089d0:	89a3      	ldrh	r3, [r4, #12]
 80089d2:	bf15      	itete	ne
 80089d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80089d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80089da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80089de:	81a3      	strheq	r3, [r4, #12]
 80089e0:	bf18      	it	ne
 80089e2:	81a3      	strhne	r3, [r4, #12]
 80089e4:	bd10      	pop	{r4, pc}

080089e6 <__sclose>:
 80089e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ea:	f000 b8f7 	b.w	8008bdc <_close_r>

080089ee <__swbuf_r>:
 80089ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f0:	460e      	mov	r6, r1
 80089f2:	4614      	mov	r4, r2
 80089f4:	4605      	mov	r5, r0
 80089f6:	b118      	cbz	r0, 8008a00 <__swbuf_r+0x12>
 80089f8:	6a03      	ldr	r3, [r0, #32]
 80089fa:	b90b      	cbnz	r3, 8008a00 <__swbuf_r+0x12>
 80089fc:	f7ff fab0 	bl	8007f60 <__sinit>
 8008a00:	69a3      	ldr	r3, [r4, #24]
 8008a02:	60a3      	str	r3, [r4, #8]
 8008a04:	89a3      	ldrh	r3, [r4, #12]
 8008a06:	071a      	lsls	r2, r3, #28
 8008a08:	d501      	bpl.n	8008a0e <__swbuf_r+0x20>
 8008a0a:	6923      	ldr	r3, [r4, #16]
 8008a0c:	b943      	cbnz	r3, 8008a20 <__swbuf_r+0x32>
 8008a0e:	4621      	mov	r1, r4
 8008a10:	4628      	mov	r0, r5
 8008a12:	f000 f82b 	bl	8008a6c <__swsetup_r>
 8008a16:	b118      	cbz	r0, 8008a20 <__swbuf_r+0x32>
 8008a18:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008a1c:	4638      	mov	r0, r7
 8008a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a20:	6823      	ldr	r3, [r4, #0]
 8008a22:	6922      	ldr	r2, [r4, #16]
 8008a24:	1a98      	subs	r0, r3, r2
 8008a26:	6963      	ldr	r3, [r4, #20]
 8008a28:	b2f6      	uxtb	r6, r6
 8008a2a:	4283      	cmp	r3, r0
 8008a2c:	4637      	mov	r7, r6
 8008a2e:	dc05      	bgt.n	8008a3c <__swbuf_r+0x4e>
 8008a30:	4621      	mov	r1, r4
 8008a32:	4628      	mov	r0, r5
 8008a34:	f7ff ff64 	bl	8008900 <_fflush_r>
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	d1ed      	bne.n	8008a18 <__swbuf_r+0x2a>
 8008a3c:	68a3      	ldr	r3, [r4, #8]
 8008a3e:	3b01      	subs	r3, #1
 8008a40:	60a3      	str	r3, [r4, #8]
 8008a42:	6823      	ldr	r3, [r4, #0]
 8008a44:	1c5a      	adds	r2, r3, #1
 8008a46:	6022      	str	r2, [r4, #0]
 8008a48:	701e      	strb	r6, [r3, #0]
 8008a4a:	6962      	ldr	r2, [r4, #20]
 8008a4c:	1c43      	adds	r3, r0, #1
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d004      	beq.n	8008a5c <__swbuf_r+0x6e>
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	07db      	lsls	r3, r3, #31
 8008a56:	d5e1      	bpl.n	8008a1c <__swbuf_r+0x2e>
 8008a58:	2e0a      	cmp	r6, #10
 8008a5a:	d1df      	bne.n	8008a1c <__swbuf_r+0x2e>
 8008a5c:	4621      	mov	r1, r4
 8008a5e:	4628      	mov	r0, r5
 8008a60:	f7ff ff4e 	bl	8008900 <_fflush_r>
 8008a64:	2800      	cmp	r0, #0
 8008a66:	d0d9      	beq.n	8008a1c <__swbuf_r+0x2e>
 8008a68:	e7d6      	b.n	8008a18 <__swbuf_r+0x2a>
	...

08008a6c <__swsetup_r>:
 8008a6c:	b538      	push	{r3, r4, r5, lr}
 8008a6e:	4b29      	ldr	r3, [pc, #164]	@ (8008b14 <__swsetup_r+0xa8>)
 8008a70:	4605      	mov	r5, r0
 8008a72:	6818      	ldr	r0, [r3, #0]
 8008a74:	460c      	mov	r4, r1
 8008a76:	b118      	cbz	r0, 8008a80 <__swsetup_r+0x14>
 8008a78:	6a03      	ldr	r3, [r0, #32]
 8008a7a:	b90b      	cbnz	r3, 8008a80 <__swsetup_r+0x14>
 8008a7c:	f7ff fa70 	bl	8007f60 <__sinit>
 8008a80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a84:	0719      	lsls	r1, r3, #28
 8008a86:	d422      	bmi.n	8008ace <__swsetup_r+0x62>
 8008a88:	06da      	lsls	r2, r3, #27
 8008a8a:	d407      	bmi.n	8008a9c <__swsetup_r+0x30>
 8008a8c:	2209      	movs	r2, #9
 8008a8e:	602a      	str	r2, [r5, #0]
 8008a90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a94:	81a3      	strh	r3, [r4, #12]
 8008a96:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a9a:	e033      	b.n	8008b04 <__swsetup_r+0x98>
 8008a9c:	0758      	lsls	r0, r3, #29
 8008a9e:	d512      	bpl.n	8008ac6 <__swsetup_r+0x5a>
 8008aa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008aa2:	b141      	cbz	r1, 8008ab6 <__swsetup_r+0x4a>
 8008aa4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008aa8:	4299      	cmp	r1, r3
 8008aaa:	d002      	beq.n	8008ab2 <__swsetup_r+0x46>
 8008aac:	4628      	mov	r0, r5
 8008aae:	f000 f90d 	bl	8008ccc <_free_r>
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ab6:	89a3      	ldrh	r3, [r4, #12]
 8008ab8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008abc:	81a3      	strh	r3, [r4, #12]
 8008abe:	2300      	movs	r3, #0
 8008ac0:	6063      	str	r3, [r4, #4]
 8008ac2:	6923      	ldr	r3, [r4, #16]
 8008ac4:	6023      	str	r3, [r4, #0]
 8008ac6:	89a3      	ldrh	r3, [r4, #12]
 8008ac8:	f043 0308 	orr.w	r3, r3, #8
 8008acc:	81a3      	strh	r3, [r4, #12]
 8008ace:	6923      	ldr	r3, [r4, #16]
 8008ad0:	b94b      	cbnz	r3, 8008ae6 <__swsetup_r+0x7a>
 8008ad2:	89a3      	ldrh	r3, [r4, #12]
 8008ad4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008ad8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008adc:	d003      	beq.n	8008ae6 <__swsetup_r+0x7a>
 8008ade:	4621      	mov	r1, r4
 8008ae0:	4628      	mov	r0, r5
 8008ae2:	f000 f83f 	bl	8008b64 <__smakebuf_r>
 8008ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008aea:	f013 0201 	ands.w	r2, r3, #1
 8008aee:	d00a      	beq.n	8008b06 <__swsetup_r+0x9a>
 8008af0:	2200      	movs	r2, #0
 8008af2:	60a2      	str	r2, [r4, #8]
 8008af4:	6962      	ldr	r2, [r4, #20]
 8008af6:	4252      	negs	r2, r2
 8008af8:	61a2      	str	r2, [r4, #24]
 8008afa:	6922      	ldr	r2, [r4, #16]
 8008afc:	b942      	cbnz	r2, 8008b10 <__swsetup_r+0xa4>
 8008afe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008b02:	d1c5      	bne.n	8008a90 <__swsetup_r+0x24>
 8008b04:	bd38      	pop	{r3, r4, r5, pc}
 8008b06:	0799      	lsls	r1, r3, #30
 8008b08:	bf58      	it	pl
 8008b0a:	6962      	ldrpl	r2, [r4, #20]
 8008b0c:	60a2      	str	r2, [r4, #8]
 8008b0e:	e7f4      	b.n	8008afa <__swsetup_r+0x8e>
 8008b10:	2000      	movs	r0, #0
 8008b12:	e7f7      	b.n	8008b04 <__swsetup_r+0x98>
 8008b14:	20000030 	.word	0x20000030

08008b18 <__swhatbuf_r>:
 8008b18:	b570      	push	{r4, r5, r6, lr}
 8008b1a:	460c      	mov	r4, r1
 8008b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b20:	2900      	cmp	r1, #0
 8008b22:	b096      	sub	sp, #88	@ 0x58
 8008b24:	4615      	mov	r5, r2
 8008b26:	461e      	mov	r6, r3
 8008b28:	da0d      	bge.n	8008b46 <__swhatbuf_r+0x2e>
 8008b2a:	89a3      	ldrh	r3, [r4, #12]
 8008b2c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008b30:	f04f 0100 	mov.w	r1, #0
 8008b34:	bf14      	ite	ne
 8008b36:	2340      	movne	r3, #64	@ 0x40
 8008b38:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008b3c:	2000      	movs	r0, #0
 8008b3e:	6031      	str	r1, [r6, #0]
 8008b40:	602b      	str	r3, [r5, #0]
 8008b42:	b016      	add	sp, #88	@ 0x58
 8008b44:	bd70      	pop	{r4, r5, r6, pc}
 8008b46:	466a      	mov	r2, sp
 8008b48:	f000 f858 	bl	8008bfc <_fstat_r>
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	dbec      	blt.n	8008b2a <__swhatbuf_r+0x12>
 8008b50:	9901      	ldr	r1, [sp, #4]
 8008b52:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008b56:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008b5a:	4259      	negs	r1, r3
 8008b5c:	4159      	adcs	r1, r3
 8008b5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008b62:	e7eb      	b.n	8008b3c <__swhatbuf_r+0x24>

08008b64 <__smakebuf_r>:
 8008b64:	898b      	ldrh	r3, [r1, #12]
 8008b66:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b68:	079d      	lsls	r5, r3, #30
 8008b6a:	4606      	mov	r6, r0
 8008b6c:	460c      	mov	r4, r1
 8008b6e:	d507      	bpl.n	8008b80 <__smakebuf_r+0x1c>
 8008b70:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008b74:	6023      	str	r3, [r4, #0]
 8008b76:	6123      	str	r3, [r4, #16]
 8008b78:	2301      	movs	r3, #1
 8008b7a:	6163      	str	r3, [r4, #20]
 8008b7c:	b003      	add	sp, #12
 8008b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b80:	ab01      	add	r3, sp, #4
 8008b82:	466a      	mov	r2, sp
 8008b84:	f7ff ffc8 	bl	8008b18 <__swhatbuf_r>
 8008b88:	9f00      	ldr	r7, [sp, #0]
 8008b8a:	4605      	mov	r5, r0
 8008b8c:	4639      	mov	r1, r7
 8008b8e:	4630      	mov	r0, r6
 8008b90:	f7ff fc24 	bl	80083dc <_malloc_r>
 8008b94:	b948      	cbnz	r0, 8008baa <__smakebuf_r+0x46>
 8008b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b9a:	059a      	lsls	r2, r3, #22
 8008b9c:	d4ee      	bmi.n	8008b7c <__smakebuf_r+0x18>
 8008b9e:	f023 0303 	bic.w	r3, r3, #3
 8008ba2:	f043 0302 	orr.w	r3, r3, #2
 8008ba6:	81a3      	strh	r3, [r4, #12]
 8008ba8:	e7e2      	b.n	8008b70 <__smakebuf_r+0xc>
 8008baa:	89a3      	ldrh	r3, [r4, #12]
 8008bac:	6020      	str	r0, [r4, #0]
 8008bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008bb2:	81a3      	strh	r3, [r4, #12]
 8008bb4:	9b01      	ldr	r3, [sp, #4]
 8008bb6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008bba:	b15b      	cbz	r3, 8008bd4 <__smakebuf_r+0x70>
 8008bbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	f000 f82d 	bl	8008c20 <_isatty_r>
 8008bc6:	b128      	cbz	r0, 8008bd4 <__smakebuf_r+0x70>
 8008bc8:	89a3      	ldrh	r3, [r4, #12]
 8008bca:	f023 0303 	bic.w	r3, r3, #3
 8008bce:	f043 0301 	orr.w	r3, r3, #1
 8008bd2:	81a3      	strh	r3, [r4, #12]
 8008bd4:	89a3      	ldrh	r3, [r4, #12]
 8008bd6:	431d      	orrs	r5, r3
 8008bd8:	81a5      	strh	r5, [r4, #12]
 8008bda:	e7cf      	b.n	8008b7c <__smakebuf_r+0x18>

08008bdc <_close_r>:
 8008bdc:	b538      	push	{r3, r4, r5, lr}
 8008bde:	4d06      	ldr	r5, [pc, #24]	@ (8008bf8 <_close_r+0x1c>)
 8008be0:	2300      	movs	r3, #0
 8008be2:	4604      	mov	r4, r0
 8008be4:	4608      	mov	r0, r1
 8008be6:	602b      	str	r3, [r5, #0]
 8008be8:	f7fe ff6a 	bl	8007ac0 <_close>
 8008bec:	1c43      	adds	r3, r0, #1
 8008bee:	d102      	bne.n	8008bf6 <_close_r+0x1a>
 8008bf0:	682b      	ldr	r3, [r5, #0]
 8008bf2:	b103      	cbz	r3, 8008bf6 <_close_r+0x1a>
 8008bf4:	6023      	str	r3, [r4, #0]
 8008bf6:	bd38      	pop	{r3, r4, r5, pc}
 8008bf8:	20025ecc 	.word	0x20025ecc

08008bfc <_fstat_r>:
 8008bfc:	b538      	push	{r3, r4, r5, lr}
 8008bfe:	4d07      	ldr	r5, [pc, #28]	@ (8008c1c <_fstat_r+0x20>)
 8008c00:	2300      	movs	r3, #0
 8008c02:	4604      	mov	r4, r0
 8008c04:	4608      	mov	r0, r1
 8008c06:	4611      	mov	r1, r2
 8008c08:	602b      	str	r3, [r5, #0]
 8008c0a:	f7fe ff9c 	bl	8007b46 <_fstat>
 8008c0e:	1c43      	adds	r3, r0, #1
 8008c10:	d102      	bne.n	8008c18 <_fstat_r+0x1c>
 8008c12:	682b      	ldr	r3, [r5, #0]
 8008c14:	b103      	cbz	r3, 8008c18 <_fstat_r+0x1c>
 8008c16:	6023      	str	r3, [r4, #0]
 8008c18:	bd38      	pop	{r3, r4, r5, pc}
 8008c1a:	bf00      	nop
 8008c1c:	20025ecc 	.word	0x20025ecc

08008c20 <_isatty_r>:
 8008c20:	b538      	push	{r3, r4, r5, lr}
 8008c22:	4d06      	ldr	r5, [pc, #24]	@ (8008c3c <_isatty_r+0x1c>)
 8008c24:	2300      	movs	r3, #0
 8008c26:	4604      	mov	r4, r0
 8008c28:	4608      	mov	r0, r1
 8008c2a:	602b      	str	r3, [r5, #0]
 8008c2c:	f7ff f8ee 	bl	8007e0c <_isatty>
 8008c30:	1c43      	adds	r3, r0, #1
 8008c32:	d102      	bne.n	8008c3a <_isatty_r+0x1a>
 8008c34:	682b      	ldr	r3, [r5, #0]
 8008c36:	b103      	cbz	r3, 8008c3a <_isatty_r+0x1a>
 8008c38:	6023      	str	r3, [r4, #0]
 8008c3a:	bd38      	pop	{r3, r4, r5, pc}
 8008c3c:	20025ecc 	.word	0x20025ecc

08008c40 <_lseek_r>:
 8008c40:	b538      	push	{r3, r4, r5, lr}
 8008c42:	4d07      	ldr	r5, [pc, #28]	@ (8008c60 <_lseek_r+0x20>)
 8008c44:	4604      	mov	r4, r0
 8008c46:	4608      	mov	r0, r1
 8008c48:	4611      	mov	r1, r2
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	602a      	str	r2, [r5, #0]
 8008c4e:	461a      	mov	r2, r3
 8008c50:	f7fe fef7 	bl	8007a42 <_lseek>
 8008c54:	1c43      	adds	r3, r0, #1
 8008c56:	d102      	bne.n	8008c5e <_lseek_r+0x1e>
 8008c58:	682b      	ldr	r3, [r5, #0]
 8008c5a:	b103      	cbz	r3, 8008c5e <_lseek_r+0x1e>
 8008c5c:	6023      	str	r3, [r4, #0]
 8008c5e:	bd38      	pop	{r3, r4, r5, pc}
 8008c60:	20025ecc 	.word	0x20025ecc

08008c64 <_read_r>:
 8008c64:	b538      	push	{r3, r4, r5, lr}
 8008c66:	4d07      	ldr	r5, [pc, #28]	@ (8008c84 <_read_r+0x20>)
 8008c68:	4604      	mov	r4, r0
 8008c6a:	4608      	mov	r0, r1
 8008c6c:	4611      	mov	r1, r2
 8008c6e:	2200      	movs	r2, #0
 8008c70:	602a      	str	r2, [r5, #0]
 8008c72:	461a      	mov	r2, r3
 8008c74:	f7fe fe8f 	bl	8007996 <_read>
 8008c78:	1c43      	adds	r3, r0, #1
 8008c7a:	d102      	bne.n	8008c82 <_read_r+0x1e>
 8008c7c:	682b      	ldr	r3, [r5, #0]
 8008c7e:	b103      	cbz	r3, 8008c82 <_read_r+0x1e>
 8008c80:	6023      	str	r3, [r4, #0]
 8008c82:	bd38      	pop	{r3, r4, r5, pc}
 8008c84:	20025ecc 	.word	0x20025ecc

08008c88 <_sbrk_r>:
 8008c88:	b538      	push	{r3, r4, r5, lr}
 8008c8a:	4d06      	ldr	r5, [pc, #24]	@ (8008ca4 <_sbrk_r+0x1c>)
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	4604      	mov	r4, r0
 8008c90:	4608      	mov	r0, r1
 8008c92:	602b      	str	r3, [r5, #0]
 8008c94:	f7fa fea0 	bl	80039d8 <_sbrk>
 8008c98:	1c43      	adds	r3, r0, #1
 8008c9a:	d102      	bne.n	8008ca2 <_sbrk_r+0x1a>
 8008c9c:	682b      	ldr	r3, [r5, #0]
 8008c9e:	b103      	cbz	r3, 8008ca2 <_sbrk_r+0x1a>
 8008ca0:	6023      	str	r3, [r4, #0]
 8008ca2:	bd38      	pop	{r3, r4, r5, pc}
 8008ca4:	20025ecc 	.word	0x20025ecc

08008ca8 <_write_r>:
 8008ca8:	b538      	push	{r3, r4, r5, lr}
 8008caa:	4d07      	ldr	r5, [pc, #28]	@ (8008cc8 <_write_r+0x20>)
 8008cac:	4604      	mov	r4, r0
 8008cae:	4608      	mov	r0, r1
 8008cb0:	4611      	mov	r1, r2
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	602a      	str	r2, [r5, #0]
 8008cb6:	461a      	mov	r2, r3
 8008cb8:	f7fe fed5 	bl	8007a66 <_write>
 8008cbc:	1c43      	adds	r3, r0, #1
 8008cbe:	d102      	bne.n	8008cc6 <_write_r+0x1e>
 8008cc0:	682b      	ldr	r3, [r5, #0]
 8008cc2:	b103      	cbz	r3, 8008cc6 <_write_r+0x1e>
 8008cc4:	6023      	str	r3, [r4, #0]
 8008cc6:	bd38      	pop	{r3, r4, r5, pc}
 8008cc8:	20025ecc 	.word	0x20025ecc

08008ccc <_free_r>:
 8008ccc:	b538      	push	{r3, r4, r5, lr}
 8008cce:	4605      	mov	r5, r0
 8008cd0:	2900      	cmp	r1, #0
 8008cd2:	d041      	beq.n	8008d58 <_free_r+0x8c>
 8008cd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008cd8:	1f0c      	subs	r4, r1, #4
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	bfb8      	it	lt
 8008cde:	18e4      	addlt	r4, r4, r3
 8008ce0:	f7ff fe36 	bl	8008950 <__malloc_lock>
 8008ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8008d5c <_free_r+0x90>)
 8008ce6:	6813      	ldr	r3, [r2, #0]
 8008ce8:	b933      	cbnz	r3, 8008cf8 <_free_r+0x2c>
 8008cea:	6063      	str	r3, [r4, #4]
 8008cec:	6014      	str	r4, [r2, #0]
 8008cee:	4628      	mov	r0, r5
 8008cf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cf4:	f7ff be32 	b.w	800895c <__malloc_unlock>
 8008cf8:	42a3      	cmp	r3, r4
 8008cfa:	d908      	bls.n	8008d0e <_free_r+0x42>
 8008cfc:	6820      	ldr	r0, [r4, #0]
 8008cfe:	1821      	adds	r1, r4, r0
 8008d00:	428b      	cmp	r3, r1
 8008d02:	bf01      	itttt	eq
 8008d04:	6819      	ldreq	r1, [r3, #0]
 8008d06:	685b      	ldreq	r3, [r3, #4]
 8008d08:	1809      	addeq	r1, r1, r0
 8008d0a:	6021      	streq	r1, [r4, #0]
 8008d0c:	e7ed      	b.n	8008cea <_free_r+0x1e>
 8008d0e:	461a      	mov	r2, r3
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	b10b      	cbz	r3, 8008d18 <_free_r+0x4c>
 8008d14:	42a3      	cmp	r3, r4
 8008d16:	d9fa      	bls.n	8008d0e <_free_r+0x42>
 8008d18:	6811      	ldr	r1, [r2, #0]
 8008d1a:	1850      	adds	r0, r2, r1
 8008d1c:	42a0      	cmp	r0, r4
 8008d1e:	d10b      	bne.n	8008d38 <_free_r+0x6c>
 8008d20:	6820      	ldr	r0, [r4, #0]
 8008d22:	4401      	add	r1, r0
 8008d24:	1850      	adds	r0, r2, r1
 8008d26:	4283      	cmp	r3, r0
 8008d28:	6011      	str	r1, [r2, #0]
 8008d2a:	d1e0      	bne.n	8008cee <_free_r+0x22>
 8008d2c:	6818      	ldr	r0, [r3, #0]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	6053      	str	r3, [r2, #4]
 8008d32:	4408      	add	r0, r1
 8008d34:	6010      	str	r0, [r2, #0]
 8008d36:	e7da      	b.n	8008cee <_free_r+0x22>
 8008d38:	d902      	bls.n	8008d40 <_free_r+0x74>
 8008d3a:	230c      	movs	r3, #12
 8008d3c:	602b      	str	r3, [r5, #0]
 8008d3e:	e7d6      	b.n	8008cee <_free_r+0x22>
 8008d40:	6820      	ldr	r0, [r4, #0]
 8008d42:	1821      	adds	r1, r4, r0
 8008d44:	428b      	cmp	r3, r1
 8008d46:	bf04      	itt	eq
 8008d48:	6819      	ldreq	r1, [r3, #0]
 8008d4a:	685b      	ldreq	r3, [r3, #4]
 8008d4c:	6063      	str	r3, [r4, #4]
 8008d4e:	bf04      	itt	eq
 8008d50:	1809      	addeq	r1, r1, r0
 8008d52:	6021      	streq	r1, [r4, #0]
 8008d54:	6054      	str	r4, [r2, #4]
 8008d56:	e7ca      	b.n	8008cee <_free_r+0x22>
 8008d58:	bd38      	pop	{r3, r4, r5, pc}
 8008d5a:	bf00      	nop
 8008d5c:	20025ec8 	.word	0x20025ec8

08008d60 <_init>:
 8008d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d62:	bf00      	nop
 8008d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d66:	bc08      	pop	{r3}
 8008d68:	469e      	mov	lr, r3
 8008d6a:	4770      	bx	lr

08008d6c <_fini>:
 8008d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6e:	bf00      	nop
 8008d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d72:	bc08      	pop	{r3}
 8008d74:	469e      	mov	lr, r3
 8008d76:	4770      	bx	lr
