
JAllenLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a6c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08005c1c  08005c1c  00006c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d14  08005d14  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005d14  08005d14  00006d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d1c  08005d1c  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d1c  08005d1c  00006d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d20  08005d20  00006d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005d24  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007070  2**0
                  CONTENTS
 10 .bss          00000450  20000070  20000070  00007070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004c0  200004c0  00007070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000112e8  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000281f  00000000  00000000  00018388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  0001aba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000db0  00000000  00000000  0001bd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000259b0  00000000  00000000  0001caf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001649d  00000000  00000000  000424a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df9a0  00000000  00000000  0005893d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001382dd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055fc  00000000  00000000  00138320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0013d91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005c04 	.word	0x08005c04

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005c04 	.word	0x08005c04

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <applicationInit>:
 */
#include "ApplicationCode.h"
#include "InterruptControl.h"
#include "Matrixdef.h"

void applicationInit(){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	//applicationInterruptInit();
	object_Select();
 8000594:	f000 f8b6 	bl	8000704 <object_Select>
	addScheduledEvent(MATRIX_UPDATE_EVENT);
 8000598:	2004      	movs	r0, #4
 800059a:	f000 febd 	bl	8001318 <addScheduledEvent>
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
	...

080005a4 <RND_NUM>:
 */
#include "Matrixdef.h"

#define MATRIX_LCD 0

void RND_NUM(void) { // issue here
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
	uint32_t RND;
	RNG_HandleTypeDef hrng;
	hrng.Instance = RNG;
 80005aa:	4b15      	ldr	r3, [pc, #84]	@ (8000600 <RND_NUM+0x5c>)
 80005ac:	607b      	str	r3, [r7, #4]

	if (HAL_RNG_Init(&hrng) != HAL_OK)
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	4618      	mov	r0, r3
 80005b2:	f003 fbbb 	bl	8003d2c <HAL_RNG_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <RND_NUM+0x1c>
	{
		while(1);
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <RND_NUM+0x18>
	}
	  /* USER CODE BEGIN RNG_Init 2 */
    if (HAL_RNG_GenerateRandomNumber(&hrng, &RND) != HAL_OK) {
 80005c0:	f107 0214 	add.w	r2, r7, #20
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	4611      	mov	r1, r2
 80005c8:	4618      	mov	r0, r3
 80005ca:	f003 fbd9 	bl	8003d80 <HAL_RNG_GenerateRandomNumber>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <RND_NUM+0x34>
    	// Handle the error (e.g., infinite loop or error logging)
	    while (1);
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <RND_NUM+0x30>
	}
	   RND = RND % 7;  // Constrain the result to 0-6
 80005d8:	6979      	ldr	r1, [r7, #20]
 80005da:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <RND_NUM+0x60>)
 80005dc:	fba3 2301 	umull	r2, r3, r3, r1
 80005e0:	1aca      	subs	r2, r1, r3
 80005e2:	0852      	lsrs	r2, r2, #1
 80005e4:	4413      	add	r3, r2
 80005e6:	089a      	lsrs	r2, r3, #2
 80005e8:	4613      	mov	r3, r2
 80005ea:	00db      	lsls	r3, r3, #3
 80005ec:	1a9b      	subs	r3, r3, r2
 80005ee:	1aca      	subs	r2, r1, r3
 80005f0:	617a      	str	r2, [r7, #20]
	   randomNumber = RND;
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	4a04      	ldr	r2, [pc, #16]	@ (8000608 <RND_NUM+0x64>)
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	bf00      	nop
 80005fa:	3718      	adds	r7, #24
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	50060800 	.word	0x50060800
 8000604:	24924925 	.word	0x24924925
 8000608:	2000011c 	.word	0x2000011c

0800060c <check_State>:

uint8_t check_State(void) {
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	if(     (object.originbit.x <= 0) || (object.originbit.x >= 9) ||
 8000610:	4b3a      	ldr	r3, [pc, #232]	@ (80006fc <check_State+0xf0>)
 8000612:	789b      	ldrb	r3, [r3, #2]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d01b      	beq.n	8000650 <check_State+0x44>
 8000618:	4b38      	ldr	r3, [pc, #224]	@ (80006fc <check_State+0xf0>)
 800061a:	789b      	ldrb	r3, [r3, #2]
 800061c:	2b08      	cmp	r3, #8
 800061e:	d817      	bhi.n	8000650 <check_State+0x44>
	   (object.suboriginbit_0.x <= 0) || (object.suboriginbit_0.x >= 9) ||
 8000620:	4b36      	ldr	r3, [pc, #216]	@ (80006fc <check_State+0xf0>)
 8000622:	791b      	ldrb	r3, [r3, #4]
	if(     (object.originbit.x <= 0) || (object.originbit.x >= 9) ||
 8000624:	2b00      	cmp	r3, #0
 8000626:	d013      	beq.n	8000650 <check_State+0x44>
	   (object.suboriginbit_0.x <= 0) || (object.suboriginbit_0.x >= 9) ||
 8000628:	4b34      	ldr	r3, [pc, #208]	@ (80006fc <check_State+0xf0>)
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	2b08      	cmp	r3, #8
 800062e:	d80f      	bhi.n	8000650 <check_State+0x44>
	   (object.suboriginbit_1.x <= 0) || (object.suboriginbit_1.x >= 9) ||
 8000630:	4b32      	ldr	r3, [pc, #200]	@ (80006fc <check_State+0xf0>)
 8000632:	799b      	ldrb	r3, [r3, #6]
	   (object.suboriginbit_0.x <= 0) || (object.suboriginbit_0.x >= 9) ||
 8000634:	2b00      	cmp	r3, #0
 8000636:	d00b      	beq.n	8000650 <check_State+0x44>
	   (object.suboriginbit_1.x <= 0) || (object.suboriginbit_1.x >= 9) ||
 8000638:	4b30      	ldr	r3, [pc, #192]	@ (80006fc <check_State+0xf0>)
 800063a:	799b      	ldrb	r3, [r3, #6]
 800063c:	2b08      	cmp	r3, #8
 800063e:	d807      	bhi.n	8000650 <check_State+0x44>
	   (object.suboriginbit_2.x <= 0) || (object.suboriginbit_2.x >= 9) )
 8000640:	4b2e      	ldr	r3, [pc, #184]	@ (80006fc <check_State+0xf0>)
 8000642:	7a1b      	ldrb	r3, [r3, #8]
	   (object.suboriginbit_1.x <= 0) || (object.suboriginbit_1.x >= 9) ||
 8000644:	2b00      	cmp	r3, #0
 8000646:	d003      	beq.n	8000650 <check_State+0x44>
	   (object.suboriginbit_2.x <= 0) || (object.suboriginbit_2.x >= 9) )
 8000648:	4b2c      	ldr	r3, [pc, #176]	@ (80006fc <check_State+0xf0>)
 800064a:	7a1b      	ldrb	r3, [r3, #8]
 800064c:	2b08      	cmp	r3, #8
 800064e:	d901      	bls.n	8000654 <check_State+0x48>
	{
		return 0; // This means object has gone outside of the bounds
 8000650:	2300      	movs	r3, #0
 8000652:	e050      	b.n	80006f6 <check_State+0xea>
	} else if( (object.originbit.y <= 0)      || (object.suboriginbit_0.y <= 0) ||
 8000654:	4b29      	ldr	r3, [pc, #164]	@ (80006fc <check_State+0xf0>)
 8000656:	78db      	ldrb	r3, [r3, #3]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d00b      	beq.n	8000674 <check_State+0x68>
 800065c:	4b27      	ldr	r3, [pc, #156]	@ (80006fc <check_State+0xf0>)
 800065e:	795b      	ldrb	r3, [r3, #5]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d007      	beq.n	8000674 <check_State+0x68>
			   (object.suboriginbit_1.y <= 0) || (object.suboriginbit_2.y <= 0) )
 8000664:	4b25      	ldr	r3, [pc, #148]	@ (80006fc <check_State+0xf0>)
 8000666:	79db      	ldrb	r3, [r3, #7]
	} else if( (object.originbit.y <= 0)      || (object.suboriginbit_0.y <= 0) ||
 8000668:	2b00      	cmp	r3, #0
 800066a:	d003      	beq.n	8000674 <check_State+0x68>
			   (object.suboriginbit_1.y <= 0) || (object.suboriginbit_2.y <= 0) )
 800066c:	4b23      	ldr	r3, [pc, #140]	@ (80006fc <check_State+0xf0>)
 800066e:	7a5b      	ldrb	r3, [r3, #9]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d13f      	bne.n	80006f4 <check_State+0xe8>
	{
		// initiate the ending protocal
		// Place the object in the matrix, generate new object
		dummyTable[object.originbit.x][object.originbit.y] = 1;
 8000674:	4b21      	ldr	r3, [pc, #132]	@ (80006fc <check_State+0xf0>)
 8000676:	789b      	ldrb	r3, [r3, #2]
 8000678:	4619      	mov	r1, r3
 800067a:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <check_State+0xf0>)
 800067c:	78db      	ldrb	r3, [r3, #3]
 800067e:	4618      	mov	r0, r3
 8000680:	4a1f      	ldr	r2, [pc, #124]	@ (8000700 <check_State+0xf4>)
 8000682:	460b      	mov	r3, r1
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	440b      	add	r3, r1
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	4413      	add	r3, r2
 800068c:	4403      	add	r3, r0
 800068e:	2201      	movs	r2, #1
 8000690:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_0.x][object.suboriginbit_0.y] = 1;
 8000692:	4b1a      	ldr	r3, [pc, #104]	@ (80006fc <check_State+0xf0>)
 8000694:	791b      	ldrb	r3, [r3, #4]
 8000696:	4619      	mov	r1, r3
 8000698:	4b18      	ldr	r3, [pc, #96]	@ (80006fc <check_State+0xf0>)
 800069a:	795b      	ldrb	r3, [r3, #5]
 800069c:	4618      	mov	r0, r3
 800069e:	4a18      	ldr	r2, [pc, #96]	@ (8000700 <check_State+0xf4>)
 80006a0:	460b      	mov	r3, r1
 80006a2:	009b      	lsls	r3, r3, #2
 80006a4:	440b      	add	r3, r1
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	4413      	add	r3, r2
 80006aa:	4403      	add	r3, r0
 80006ac:	2201      	movs	r2, #1
 80006ae:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_1.x][object.suboriginbit_1.y] = 1;
 80006b0:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <check_State+0xf0>)
 80006b2:	799b      	ldrb	r3, [r3, #6]
 80006b4:	4619      	mov	r1, r3
 80006b6:	4b11      	ldr	r3, [pc, #68]	@ (80006fc <check_State+0xf0>)
 80006b8:	79db      	ldrb	r3, [r3, #7]
 80006ba:	4618      	mov	r0, r3
 80006bc:	4a10      	ldr	r2, [pc, #64]	@ (8000700 <check_State+0xf4>)
 80006be:	460b      	mov	r3, r1
 80006c0:	009b      	lsls	r3, r3, #2
 80006c2:	440b      	add	r3, r1
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	4413      	add	r3, r2
 80006c8:	4403      	add	r3, r0
 80006ca:	2201      	movs	r2, #1
 80006cc:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_2.x][object.suboriginbit_2.y] = 1;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	@ (80006fc <check_State+0xf0>)
 80006d0:	7a1b      	ldrb	r3, [r3, #8]
 80006d2:	4619      	mov	r1, r3
 80006d4:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <check_State+0xf0>)
 80006d6:	7a5b      	ldrb	r3, [r3, #9]
 80006d8:	4618      	mov	r0, r3
 80006da:	4a09      	ldr	r2, [pc, #36]	@ (8000700 <check_State+0xf4>)
 80006dc:	460b      	mov	r3, r1
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	440b      	add	r3, r1
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	4413      	add	r3, r2
 80006e6:	4403      	add	r3, r0
 80006e8:	2201      	movs	r2, #1
 80006ea:	701a      	strb	r2, [r3, #0]
		object_Select();
 80006ec:	f000 f80a 	bl	8000704 <object_Select>
		return 1; // This means object has hit the button
 80006f0:	2301      	movs	r3, #1
 80006f2:	e000      	b.n	80006f6 <check_State+0xea>
	} else {
		return 2; // In case we want to see nothing can be done
 80006f4:	2302      	movs	r3, #2
	}
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	2000008c 	.word	0x2000008c
 8000700:	20000098 	.word	0x20000098

08000704 <object_Select>:

void object_Select(void){
 8000704:	b580      	push	{r7, lr}
 8000706:	b096      	sub	sp, #88	@ 0x58
 8000708:	af00      	add	r7, sp, #0

	RND_NUM();
 800070a:	f7ff ff4b 	bl	80005a4 <RND_NUM>
	Matrix_clear();
 800070e:	f000 fd63 	bl	80011d8 <Matrix_clear>
	switch(randomNumber) {
 8000712:	4b41      	ldr	r3, [pc, #260]	@ (8000818 <object_Select+0x114>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	2b06      	cmp	r3, #6
 8000718:	d877      	bhi.n	800080a <object_Select+0x106>
 800071a:	a201      	add	r2, pc, #4	@ (adr r2, 8000720 <object_Select+0x1c>)
 800071c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000720:	0800073d 	.word	0x0800073d
 8000724:	0800075b 	.word	0x0800075b
 8000728:	08000779 	.word	0x08000779
 800072c:	08000797 	.word	0x08000797
 8000730:	080007b5 	.word	0x080007b5
 8000734:	080007d3 	.word	0x080007d3
 8000738:	080007f1 	.word	0x080007f1
		case(ORICKY):
			Object Oricky = {
 800073c:	4a37      	ldr	r2, [pc, #220]	@ (800081c <object_Select+0x118>)
 800073e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000742:	ca07      	ldmia	r2, {r0, r1, r2}
 8000744:	c303      	stmia	r3!, {r0, r1}
 8000746:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 },     // 1 [1] 1
				.suboriginbit_0 = {0, 0}, 
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Oricky;
 8000748:	4b35      	ldr	r3, [pc, #212]	@ (8000820 <object_Select+0x11c>)
 800074a:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800074e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000750:	c303      	stmia	r3!, {r0, r1}
 8000752:	801a      	strh	r2, [r3, #0]
		    transform_rotation();
 8000754:	f000 f872 	bl	800083c <transform_rotation>
			break;
 8000758:	e057      	b.n	800080a <object_Select+0x106>

		case(BRICKY):
			Object Bricky = {
 800075a:	4a32      	ldr	r2, [pc, #200]	@ (8000824 <object_Select+0x120>)
 800075c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000760:	ca07      	ldmia	r2, {r0, r1, r2}
 8000762:	c303      	stmia	r3!, {r0, r1}
 8000764:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 },     // 1 [1] 1
				.suboriginbit_0 = {0, 0}, 
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Bricky;
 8000766:	4b2e      	ldr	r3, [pc, #184]	@ (8000820 <object_Select+0x11c>)
 8000768:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800076c:	ca07      	ldmia	r2, {r0, r1, r2}
 800076e:	c303      	stmia	r3!, {r0, r1}
 8000770:	801a      	strh	r2, [r3, #0]
			transform_rotation();
 8000772:	f000 f863 	bl	800083c <transform_rotation>
			break;
 8000776:	e048      	b.n	800080a <object_Select+0x106>

		case(CLEVELAND):
			Object Cleveland = {
 8000778:	4a2b      	ldr	r2, [pc, #172]	@ (8000828 <object_Select+0x124>)
 800077a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800077e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000780:	c303      	stmia	r3!, {r0, r1}
 8000782:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, 	  //    [1] 1
				.suboriginbit_0 = {0, 0},  
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Cleveland;
 8000784:	4b26      	ldr	r3, [pc, #152]	@ (8000820 <object_Select+0x11c>)
 8000786:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800078a:	ca07      	ldmia	r2, {r0, r1, r2}
 800078c:	c303      	stmia	r3!, {r0, r1}
 800078e:	801a      	strh	r2, [r3, #0]
		    transform_rotation();
 8000790:	f000 f854 	bl	800083c <transform_rotation>
			break;
 8000794:	e039      	b.n	800080a <object_Select+0x106>

		case(RHODE):
			Object Rhode = {
 8000796:	4a25      	ldr	r2, [pc, #148]	@ (800082c <object_Select+0x128>)
 8000798:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800079c:	ca07      	ldmia	r2, {r0, r1, r2}
 800079e:	c303      	stmia	r3!, {r0, r1}
 80007a0:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 },     //     1 [1]
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Rhode;
 80007a2:	4b1f      	ldr	r3, [pc, #124]	@ (8000820 <object_Select+0x11c>)
 80007a4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80007a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80007aa:	c303      	stmia	r3!, {r0, r1}
 80007ac:	801a      	strh	r2, [r3, #0]
			transform_rotation();
 80007ae:	f000 f845 	bl	800083c <transform_rotation>
			break;
 80007b2:	e02a      	b.n	800080a <object_Select+0x106>

		case(HERO):
			Object Hero = {
 80007b4:	4a1e      	ldr	r2, [pc, #120]	@ (8000830 <object_Select+0x12c>)
 80007b6:	f107 031c 	add.w	r3, r7, #28
 80007ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80007bc:	c303      	stmia	r3!, {r0, r1}
 80007be:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, 			 //  1 1 [1] 1
				.suboriginbit_0 = {0, 0}, 
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Hero;
 80007c0:	4b17      	ldr	r3, [pc, #92]	@ (8000820 <object_Select+0x11c>)
 80007c2:	f107 021c 	add.w	r2, r7, #28
 80007c6:	ca07      	ldmia	r2, {r0, r1, r2}
 80007c8:	c303      	stmia	r3!, {r0, r1}
 80007ca:	801a      	strh	r2, [r3, #0]
			transform_rotation();
 80007cc:	f000 f836 	bl	800083c <transform_rotation>
			break;
 80007d0:	e01b      	b.n	800080a <object_Select+0x106>

		case(TEEWEE):
			Object Teewee = {
 80007d2:	4a18      	ldr	r2, [pc, #96]	@ (8000834 <object_Select+0x130>)
 80007d4:	f107 0310 	add.w	r3, r7, #16
 80007d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80007da:	c303      	stmia	r3!, {r0, r1}
 80007dc:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, 			 	// 1 [1] 1
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Teewee;
 80007de:	4b10      	ldr	r3, [pc, #64]	@ (8000820 <object_Select+0x11c>)
 80007e0:	f107 0210 	add.w	r2, r7, #16
 80007e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80007e6:	c303      	stmia	r3!, {r0, r1}
 80007e8:	801a      	strh	r2, [r3, #0]
			transform_rotation();
 80007ea:	f000 f827 	bl	800083c <transform_rotation>
			break;
 80007ee:	e00c      	b.n	800080a <object_Select+0x106>

		case(SMASHBOY):
			Object Smashboy = {
 80007f0:	4a11      	ldr	r2, [pc, #68]	@ (8000838 <object_Select+0x134>)
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80007f6:	c303      	stmia	r3!, {r0, r1}
 80007f8:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, 			 	//[1] 1
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Smashboy;
 80007fa:	4b09      	ldr	r3, [pc, #36]	@ (8000820 <object_Select+0x11c>)
 80007fc:	1d3a      	adds	r2, r7, #4
 80007fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000800:	c303      	stmia	r3!, {r0, r1}
 8000802:	801a      	strh	r2, [r3, #0]
			transform_rotation();
 8000804:	f000 f81a 	bl	800083c <transform_rotation>
			break;
 8000808:	bf00      	nop

	}
	Matrix_update();
 800080a:	f000 fd2d 	bl	8001268 <Matrix_update>
}
 800080e:	bf00      	nop
 8000810:	3758      	adds	r7, #88	@ 0x58
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	2000011c 	.word	0x2000011c
 800081c:	08005c1c 	.word	0x08005c1c
 8000820:	2000008c 	.word	0x2000008c
 8000824:	08005c28 	.word	0x08005c28
 8000828:	08005c34 	.word	0x08005c34
 800082c:	08005c40 	.word	0x08005c40
 8000830:	08005c4c 	.word	0x08005c4c
 8000834:	08005c58 	.word	0x08005c58
 8000838:	08005c64 	.word	0x08005c64

0800083c <transform_rotation>:
	if(check_State()) {
		object = temp;
	}
}

void transform_rotation(){
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
	Matrix_clear();
 8000842:	f000 fcc9 	bl	80011d8 <Matrix_clear>
	Object temp = object;
 8000846:	4a91      	ldr	r2, [pc, #580]	@ (8000a8c <transform_rotation+0x250>)
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	ca07      	ldmia	r2, {r0, r1, r2}
 800084c:	c303      	stmia	r3!, {r0, r1}
 800084e:	801a      	strh	r2, [r3, #0]
	object.Rotation += 1;
 8000850:	4b8e      	ldr	r3, [pc, #568]	@ (8000a8c <transform_rotation+0x250>)
 8000852:	785b      	ldrb	r3, [r3, #1]
 8000854:	3301      	adds	r3, #1
 8000856:	b2da      	uxtb	r2, r3
 8000858:	4b8c      	ldr	r3, [pc, #560]	@ (8000a8c <transform_rotation+0x250>)
 800085a:	705a      	strb	r2, [r3, #1]
	if((object.Rotation > 3) || (object.Rotation < 0)) {
 800085c:	4b8b      	ldr	r3, [pc, #556]	@ (8000a8c <transform_rotation+0x250>)
 800085e:	785b      	ldrb	r3, [r3, #1]
 8000860:	2b03      	cmp	r3, #3
 8000862:	d902      	bls.n	800086a <transform_rotation+0x2e>
		object.Rotation = 0;
 8000864:	4b89      	ldr	r3, [pc, #548]	@ (8000a8c <transform_rotation+0x250>)
 8000866:	2200      	movs	r2, #0
 8000868:	705a      	strb	r2, [r3, #1]
	}

	switch(object.name){
 800086a:	4b88      	ldr	r3, [pc, #544]	@ (8000a8c <transform_rotation+0x250>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b06      	cmp	r3, #6
 8000870:	f200 8416 	bhi.w	80010a0 <transform_rotation+0x864>
 8000874:	a201      	add	r2, pc, #4	@ (adr r2, 800087c <transform_rotation+0x40>)
 8000876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800087a:	bf00      	nop
 800087c:	08000899 	.word	0x08000899
 8000880:	080009c3 	.word	0x080009c3
 8000884:	08000ac5 	.word	0x08000ac5
 8000888:	08000bef 	.word	0x08000bef
 800088c:	08000d21 	.word	0x08000d21
 8000890:	08000e3b 	.word	0x08000e3b
 8000894:	08000f5d 	.word	0x08000f5d
		case(ORICKY):
			switch(object.Rotation) {
 8000898:	4b7c      	ldr	r3, [pc, #496]	@ (8000a8c <transform_rotation+0x250>)
 800089a:	785b      	ldrb	r3, [r3, #1]
 800089c:	2b03      	cmp	r3, #3
 800089e:	f200 83f2 	bhi.w	8001086 <transform_rotation+0x84a>
 80008a2:	a201      	add	r2, pc, #4	@ (adr r2, 80008a8 <transform_rotation+0x6c>)
 80008a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a8:	080008b9 	.word	0x080008b9
 80008ac:	080008fb 	.word	0x080008fb
 80008b0:	0800093d 	.word	0x0800093d
 80008b4:	0800097f 	.word	0x0800097f
				case(ROTATION_0):
						//       1
						// 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;   //		 1
 80008b8:	4b74      	ldr	r3, [pc, #464]	@ (8000a8c <transform_rotation+0x250>)
 80008ba:	789b      	ldrb	r3, [r3, #2]
 80008bc:	3b01      	subs	r3, #1
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4b72      	ldr	r3, [pc, #456]	@ (8000a8c <transform_rotation+0x250>)
 80008c2:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		// [1] 1 1
 80008c4:	4b71      	ldr	r3, [pc, #452]	@ (8000a8c <transform_rotation+0x250>)
 80008c6:	78da      	ldrb	r2, [r3, #3]
 80008c8:	4b70      	ldr	r3, [pc, #448]	@ (8000a8c <transform_rotation+0x250>)
 80008ca:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;	//        1
 80008cc:	4b6f      	ldr	r3, [pc, #444]	@ (8000a8c <transform_rotation+0x250>)
 80008ce:	789b      	ldrb	r3, [r3, #2]
 80008d0:	3301      	adds	r3, #1
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	4b6d      	ldr	r3, [pc, #436]	@ (8000a8c <transform_rotation+0x250>)
 80008d6:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		//  1  1 [1]
 80008d8:	4b6c      	ldr	r3, [pc, #432]	@ (8000a8c <transform_rotation+0x250>)
 80008da:	78da      	ldrb	r2, [r3, #3]
 80008dc:	4b6b      	ldr	r3, [pc, #428]	@ (8000a8c <transform_rotation+0x250>)
 80008de:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	// 	  [1]
 80008e0:	4b6a      	ldr	r3, [pc, #424]	@ (8000a8c <transform_rotation+0x250>)
 80008e2:	789b      	ldrb	r3, [r3, #2]
 80008e4:	3301      	adds	r3, #1
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	4b68      	ldr	r3, [pc, #416]	@ (8000a8c <transform_rotation+0x250>)
 80008ea:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	// 1 1 1
 80008ec:	4b67      	ldr	r3, [pc, #412]	@ (8000a8c <transform_rotation+0x250>)
 80008ee:	78db      	ldrb	r3, [r3, #3]
 80008f0:	3301      	adds	r3, #1
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b65      	ldr	r3, [pc, #404]	@ (8000a8c <transform_rotation+0x250>)
 80008f6:	725a      	strb	r2, [r3, #9]

					break;
 80008f8:	e062      	b.n	80009c0 <transform_rotation+0x184>
				case(ROTATION_1):
						// 1  1
						//   [1]
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 80008fa:	4b64      	ldr	r3, [pc, #400]	@ (8000a8c <transform_rotation+0x250>)
 80008fc:	789a      	ldrb	r2, [r3, #2]
 80008fe:	4b63      	ldr	r3, [pc, #396]	@ (8000a8c <transform_rotation+0x250>)
 8000900:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y - 1;
 8000902:	4b62      	ldr	r3, [pc, #392]	@ (8000a8c <transform_rotation+0x250>)
 8000904:	78db      	ldrb	r3, [r3, #3]
 8000906:	3b01      	subs	r3, #1
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b60      	ldr	r3, [pc, #384]	@ (8000a8c <transform_rotation+0x250>)
 800090c:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 800090e:	4b5f      	ldr	r3, [pc, #380]	@ (8000a8c <transform_rotation+0x250>)
 8000910:	789a      	ldrb	r2, [r3, #2]
 8000912:	4b5e      	ldr	r3, [pc, #376]	@ (8000a8c <transform_rotation+0x250>)
 8000914:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;
 8000916:	4b5d      	ldr	r3, [pc, #372]	@ (8000a8c <transform_rotation+0x250>)
 8000918:	78db      	ldrb	r3, [r3, #3]
 800091a:	3301      	adds	r3, #1
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4b5b      	ldr	r3, [pc, #364]	@ (8000a8c <transform_rotation+0x250>)
 8000920:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 8000922:	4b5a      	ldr	r3, [pc, #360]	@ (8000a8c <transform_rotation+0x250>)
 8000924:	789b      	ldrb	r3, [r3, #2]
 8000926:	3b01      	subs	r3, #1
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4b58      	ldr	r3, [pc, #352]	@ (8000a8c <transform_rotation+0x250>)
 800092c:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1;
 800092e:	4b57      	ldr	r3, [pc, #348]	@ (8000a8c <transform_rotation+0x250>)
 8000930:	78db      	ldrb	r3, [r3, #3]
 8000932:	3301      	adds	r3, #1
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4b55      	ldr	r3, [pc, #340]	@ (8000a8c <transform_rotation+0x250>)
 8000938:	725a      	strb	r2, [r3, #9]

					break;
 800093a:	e041      	b.n	80009c0 <transform_rotation+0x184>
				case(ROTATION_2):
						// 1  [1]  1
						// 1
					object.suboriginbit_0.x = object.originbit.x + 1;
 800093c:	4b53      	ldr	r3, [pc, #332]	@ (8000a8c <transform_rotation+0x250>)
 800093e:	789b      	ldrb	r3, [r3, #2]
 8000940:	3301      	adds	r3, #1
 8000942:	b2da      	uxtb	r2, r3
 8000944:	4b51      	ldr	r3, [pc, #324]	@ (8000a8c <transform_rotation+0x250>)
 8000946:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000948:	4b50      	ldr	r3, [pc, #320]	@ (8000a8c <transform_rotation+0x250>)
 800094a:	78da      	ldrb	r2, [r3, #3]
 800094c:	4b4f      	ldr	r3, [pc, #316]	@ (8000a8c <transform_rotation+0x250>)
 800094e:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;
 8000950:	4b4e      	ldr	r3, [pc, #312]	@ (8000a8c <transform_rotation+0x250>)
 8000952:	789b      	ldrb	r3, [r3, #2]
 8000954:	3b01      	subs	r3, #1
 8000956:	b2da      	uxtb	r2, r3
 8000958:	4b4c      	ldr	r3, [pc, #304]	@ (8000a8c <transform_rotation+0x250>)
 800095a:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 800095c:	4b4b      	ldr	r3, [pc, #300]	@ (8000a8c <transform_rotation+0x250>)
 800095e:	78da      	ldrb	r2, [r3, #3]
 8000960:	4b4a      	ldr	r3, [pc, #296]	@ (8000a8c <transform_rotation+0x250>)
 8000962:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 8000964:	4b49      	ldr	r3, [pc, #292]	@ (8000a8c <transform_rotation+0x250>)
 8000966:	789b      	ldrb	r3, [r3, #2]
 8000968:	3b01      	subs	r3, #1
 800096a:	b2da      	uxtb	r2, r3
 800096c:	4b47      	ldr	r3, [pc, #284]	@ (8000a8c <transform_rotation+0x250>)
 800096e:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8000970:	4b46      	ldr	r3, [pc, #280]	@ (8000a8c <transform_rotation+0x250>)
 8000972:	78db      	ldrb	r3, [r3, #3]
 8000974:	3b01      	subs	r3, #1
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b44      	ldr	r3, [pc, #272]	@ (8000a8c <transform_rotation+0x250>)
 800097a:	725a      	strb	r2, [r3, #9]

					break;
 800097c:	e020      	b.n	80009c0 <transform_rotation+0x184>
				case(ROTATION_3):
						//  1
						// [1]
						//  1 1
					object.suboriginbit_0.x = object.originbit.x;
 800097e:	4b43      	ldr	r3, [pc, #268]	@ (8000a8c <transform_rotation+0x250>)
 8000980:	789a      	ldrb	r2, [r3, #2]
 8000982:	4b42      	ldr	r3, [pc, #264]	@ (8000a8c <transform_rotation+0x250>)
 8000984:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 8000986:	4b41      	ldr	r3, [pc, #260]	@ (8000a8c <transform_rotation+0x250>)
 8000988:	78db      	ldrb	r3, [r3, #3]
 800098a:	3301      	adds	r3, #1
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4b3f      	ldr	r3, [pc, #252]	@ (8000a8c <transform_rotation+0x250>)
 8000990:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000992:	4b3e      	ldr	r3, [pc, #248]	@ (8000a8c <transform_rotation+0x250>)
 8000994:	789a      	ldrb	r2, [r3, #2]
 8000996:	4b3d      	ldr	r3, [pc, #244]	@ (8000a8c <transform_rotation+0x250>)
 8000998:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 800099a:	4b3c      	ldr	r3, [pc, #240]	@ (8000a8c <transform_rotation+0x250>)
 800099c:	78db      	ldrb	r3, [r3, #3]
 800099e:	3b01      	subs	r3, #1
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4b3a      	ldr	r3, [pc, #232]	@ (8000a8c <transform_rotation+0x250>)
 80009a4:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;
 80009a6:	4b39      	ldr	r3, [pc, #228]	@ (8000a8c <transform_rotation+0x250>)
 80009a8:	789b      	ldrb	r3, [r3, #2]
 80009aa:	3301      	adds	r3, #1
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b37      	ldr	r3, [pc, #220]	@ (8000a8c <transform_rotation+0x250>)
 80009b0:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 80009b2:	4b36      	ldr	r3, [pc, #216]	@ (8000a8c <transform_rotation+0x250>)
 80009b4:	78db      	ldrb	r3, [r3, #3]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4b34      	ldr	r3, [pc, #208]	@ (8000a8c <transform_rotation+0x250>)
 80009bc:	725a      	strb	r2, [r3, #9]

					break;
 80009be:	bf00      	nop
			}
			break;
 80009c0:	e361      	b.n	8001086 <transform_rotation+0x84a>
		case(BRICKY):
			switch(object.Rotation) {
 80009c2:	4b32      	ldr	r3, [pc, #200]	@ (8000a8c <transform_rotation+0x250>)
 80009c4:	785b      	ldrb	r3, [r3, #1]
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	f200 835f 	bhi.w	800108a <transform_rotation+0x84e>
 80009cc:	a201      	add	r2, pc, #4	@ (adr r2, 80009d4 <transform_rotation+0x198>)
 80009ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d2:	bf00      	nop
 80009d4:	080009e5 	.word	0x080009e5
 80009d8:	08000a27 	.word	0x08000a27
 80009dc:	08000a59 	.word	0x08000a59
 80009e0:	08000a91 	.word	0x08000a91
				case(ROTATION_0):
						// 1
						// 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;   //	1
 80009e4:	4b29      	ldr	r3, [pc, #164]	@ (8000a8c <transform_rotation+0x250>)
 80009e6:	789b      	ldrb	r3, [r3, #2]
 80009e8:	3b01      	subs	r3, #1
 80009ea:	b2da      	uxtb	r2, r3
 80009ec:	4b27      	ldr	r3, [pc, #156]	@ (8000a8c <transform_rotation+0x250>)
 80009ee:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		// [1] 1 1
 80009f0:	4b26      	ldr	r3, [pc, #152]	@ (8000a8c <transform_rotation+0x250>)
 80009f2:	78da      	ldrb	r2, [r3, #3]
 80009f4:	4b25      	ldr	r3, [pc, #148]	@ (8000a8c <transform_rotation+0x250>)
 80009f6:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;	//  1
 80009f8:	4b24      	ldr	r3, [pc, #144]	@ (8000a8c <transform_rotation+0x250>)
 80009fa:	789b      	ldrb	r3, [r3, #2]
 80009fc:	3301      	adds	r3, #1
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	4b22      	ldr	r3, [pc, #136]	@ (8000a8c <transform_rotation+0x250>)
 8000a02:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		//  1  1 [1]
 8000a04:	4b21      	ldr	r3, [pc, #132]	@ (8000a8c <transform_rotation+0x250>)
 8000a06:	78da      	ldrb	r2, [r3, #3]
 8000a08:	4b20      	ldr	r3, [pc, #128]	@ (8000a8c <transform_rotation+0x250>)
 8000a0a:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;	//[1]
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a8c <transform_rotation+0x250>)
 8000a0e:	789b      	ldrb	r3, [r3, #2]
 8000a10:	3b01      	subs	r3, #1
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	4b1d      	ldr	r3, [pc, #116]	@ (8000a8c <transform_rotation+0x250>)
 8000a16:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	// 1 1 1
 8000a18:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <transform_rotation+0x250>)
 8000a1a:	78db      	ldrb	r3, [r3, #3]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <transform_rotation+0x250>)
 8000a22:	725a      	strb	r2, [r3, #9]

					break;
 8000a24:	e04d      	b.n	8000ac2 <transform_rotation+0x286>
				case(ROTATION_1):
						// 1 1
						//[1]
						// 1
					object.suboriginbit_0.x = object.originbit.x;
 8000a26:	4b19      	ldr	r3, [pc, #100]	@ (8000a8c <transform_rotation+0x250>)
 8000a28:	789a      	ldrb	r2, [r3, #2]
 8000a2a:	4b18      	ldr	r3, [pc, #96]	@ (8000a8c <transform_rotation+0x250>)
 8000a2c:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000a2e:	4b17      	ldr	r3, [pc, #92]	@ (8000a8c <transform_rotation+0x250>)
 8000a30:	78da      	ldrb	r2, [r3, #3]
 8000a32:	4b16      	ldr	r3, [pc, #88]	@ (8000a8c <transform_rotation+0x250>)
 8000a34:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000a36:	4b15      	ldr	r3, [pc, #84]	@ (8000a8c <transform_rotation+0x250>)
 8000a38:	789a      	ldrb	r2, [r3, #2]
 8000a3a:	4b14      	ldr	r3, [pc, #80]	@ (8000a8c <transform_rotation+0x250>)
 8000a3c:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000a3e:	4b13      	ldr	r3, [pc, #76]	@ (8000a8c <transform_rotation+0x250>)
 8000a40:	78da      	ldrb	r2, [r3, #3]
 8000a42:	4b12      	ldr	r3, [pc, #72]	@ (8000a8c <transform_rotation+0x250>)
 8000a44:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000a46:	4b11      	ldr	r3, [pc, #68]	@ (8000a8c <transform_rotation+0x250>)
 8000a48:	789a      	ldrb	r2, [r3, #2]
 8000a4a:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <transform_rotation+0x250>)
 8000a4c:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 8000a4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a8c <transform_rotation+0x250>)
 8000a50:	78da      	ldrb	r2, [r3, #3]
 8000a52:	4b0e      	ldr	r3, [pc, #56]	@ (8000a8c <transform_rotation+0x250>)
 8000a54:	725a      	strb	r2, [r3, #9]

					break;
 8000a56:	e034      	b.n	8000ac2 <transform_rotation+0x286>
				case(ROTATION_2):
						// 1 [1] 1
						//       1
					object.suboriginbit_0.x = object.originbit.x;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	@ (8000a8c <transform_rotation+0x250>)
 8000a5a:	789a      	ldrb	r2, [r3, #2]
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a8c <transform_rotation+0x250>)
 8000a5e:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000a60:	4b0a      	ldr	r3, [pc, #40]	@ (8000a8c <transform_rotation+0x250>)
 8000a62:	78da      	ldrb	r2, [r3, #3]
 8000a64:	4b09      	ldr	r3, [pc, #36]	@ (8000a8c <transform_rotation+0x250>)
 8000a66:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000a68:	4b08      	ldr	r3, [pc, #32]	@ (8000a8c <transform_rotation+0x250>)
 8000a6a:	789a      	ldrb	r2, [r3, #2]
 8000a6c:	4b07      	ldr	r3, [pc, #28]	@ (8000a8c <transform_rotation+0x250>)
 8000a6e:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000a70:	4b06      	ldr	r3, [pc, #24]	@ (8000a8c <transform_rotation+0x250>)
 8000a72:	78da      	ldrb	r2, [r3, #3]
 8000a74:	4b05      	ldr	r3, [pc, #20]	@ (8000a8c <transform_rotation+0x250>)
 8000a76:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000a78:	4b04      	ldr	r3, [pc, #16]	@ (8000a8c <transform_rotation+0x250>)
 8000a7a:	789a      	ldrb	r2, [r3, #2]
 8000a7c:	4b03      	ldr	r3, [pc, #12]	@ (8000a8c <transform_rotation+0x250>)
 8000a7e:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 8000a80:	4b02      	ldr	r3, [pc, #8]	@ (8000a8c <transform_rotation+0x250>)
 8000a82:	78da      	ldrb	r2, [r3, #3]
 8000a84:	4b01      	ldr	r3, [pc, #4]	@ (8000a8c <transform_rotation+0x250>)
 8000a86:	725a      	strb	r2, [r3, #9]

					break;
 8000a88:	e01b      	b.n	8000ac2 <transform_rotation+0x286>
 8000a8a:	bf00      	nop
 8000a8c:	2000008c 	.word	0x2000008c
				case(ROTATION_3):
						//   1
						//  [1]
						// 1 1
					object.suboriginbit_0.x = object.originbit.x;
 8000a90:	4b91      	ldr	r3, [pc, #580]	@ (8000cd8 <transform_rotation+0x49c>)
 8000a92:	789a      	ldrb	r2, [r3, #2]
 8000a94:	4b90      	ldr	r3, [pc, #576]	@ (8000cd8 <transform_rotation+0x49c>)
 8000a96:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000a98:	4b8f      	ldr	r3, [pc, #572]	@ (8000cd8 <transform_rotation+0x49c>)
 8000a9a:	78da      	ldrb	r2, [r3, #3]
 8000a9c:	4b8e      	ldr	r3, [pc, #568]	@ (8000cd8 <transform_rotation+0x49c>)
 8000a9e:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000aa0:	4b8d      	ldr	r3, [pc, #564]	@ (8000cd8 <transform_rotation+0x49c>)
 8000aa2:	789a      	ldrb	r2, [r3, #2]
 8000aa4:	4b8c      	ldr	r3, [pc, #560]	@ (8000cd8 <transform_rotation+0x49c>)
 8000aa6:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000aa8:	4b8b      	ldr	r3, [pc, #556]	@ (8000cd8 <transform_rotation+0x49c>)
 8000aaa:	78da      	ldrb	r2, [r3, #3]
 8000aac:	4b8a      	ldr	r3, [pc, #552]	@ (8000cd8 <transform_rotation+0x49c>)
 8000aae:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000ab0:	4b89      	ldr	r3, [pc, #548]	@ (8000cd8 <transform_rotation+0x49c>)
 8000ab2:	789a      	ldrb	r2, [r3, #2]
 8000ab4:	4b88      	ldr	r3, [pc, #544]	@ (8000cd8 <transform_rotation+0x49c>)
 8000ab6:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 8000ab8:	4b87      	ldr	r3, [pc, #540]	@ (8000cd8 <transform_rotation+0x49c>)
 8000aba:	78da      	ldrb	r2, [r3, #3]
 8000abc:	4b86      	ldr	r3, [pc, #536]	@ (8000cd8 <transform_rotation+0x49c>)
 8000abe:	725a      	strb	r2, [r3, #9]

					break;
 8000ac0:	bf00      	nop
			}

			break;
 8000ac2:	e2e2      	b.n	800108a <transform_rotation+0x84e>
		case(CLEVELAND):
			switch(object.Rotation) {
 8000ac4:	4b84      	ldr	r3, [pc, #528]	@ (8000cd8 <transform_rotation+0x49c>)
 8000ac6:	785b      	ldrb	r3, [r3, #1]
 8000ac8:	2b03      	cmp	r3, #3
 8000aca:	f200 82e0 	bhi.w	800108e <transform_rotation+0x852>
 8000ace:	a201      	add	r2, pc, #4	@ (adr r2, 8000ad4 <transform_rotation+0x298>)
 8000ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad4:	08000ae5 	.word	0x08000ae5
 8000ad8:	08000b27 	.word	0x08000b27
 8000adc:	08000b69 	.word	0x08000b69
 8000ae0:	08000bab 	.word	0x08000bab
				case(ROTATION_0):
						// 1 1
						//  [1] 1
					object.suboriginbit_0.x = object.originbit.x;			 //	1 [1]
 8000ae4:	4b7c      	ldr	r3, [pc, #496]	@ (8000cd8 <transform_rotation+0x49c>)
 8000ae6:	789a      	ldrb	r2, [r3, #2]
 8000ae8:	4b7b      	ldr	r3, [pc, #492]	@ (8000cd8 <transform_rotation+0x49c>)
 8000aea:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;		 //    1 1
 8000aec:	4b7a      	ldr	r3, [pc, #488]	@ (8000cd8 <transform_rotation+0x49c>)
 8000aee:	78db      	ldrb	r3, [r3, #3]
 8000af0:	3301      	adds	r3, #1
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	4b78      	ldr	r3, [pc, #480]	@ (8000cd8 <transform_rotation+0x49c>)
 8000af6:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;		 // [1] 1
 8000af8:	4b77      	ldr	r3, [pc, #476]	@ (8000cd8 <transform_rotation+0x49c>)
 8000afa:	789b      	ldrb	r3, [r3, #2]
 8000afc:	3b01      	subs	r3, #1
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	4b75      	ldr	r3, [pc, #468]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b02:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;		 //     1 1
 8000b04:	4b74      	ldr	r3, [pc, #464]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b06:	78db      	ldrb	r3, [r3, #3]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	b2da      	uxtb	r2, r3
 8000b0c:	4b72      	ldr	r3, [pc, #456]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b0e:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;		 //  1 1
 8000b10:	4b71      	ldr	r3, [pc, #452]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b12:	789b      	ldrb	r3, [r3, #2]
 8000b14:	3301      	adds	r3, #1
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	4b6f      	ldr	r3, [pc, #444]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b1a:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y; 	     	//    1 [1]
 8000b1c:	4b6e      	ldr	r3, [pc, #440]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b1e:	78da      	ldrb	r2, [r3, #3]
 8000b20:	4b6d      	ldr	r3, [pc, #436]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b22:	725a      	strb	r2, [r3, #9]

					break;
 8000b24:	e062      	b.n	8000bec <transform_rotation+0x3b0>
				case(ROTATION_1):
						//     1
						// [1] 1
						//  1
					object.suboriginbit_0.x = object.originbit.x+1;
 8000b26:	4b6c      	ldr	r3, [pc, #432]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b28:	789b      	ldrb	r3, [r3, #2]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4b6a      	ldr	r3, [pc, #424]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b30:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000b32:	4b69      	ldr	r3, [pc, #420]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b34:	78da      	ldrb	r2, [r3, #3]
 8000b36:	4b68      	ldr	r3, [pc, #416]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b38:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x+1;
 8000b3a:	4b67      	ldr	r3, [pc, #412]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b3c:	789b      	ldrb	r3, [r3, #2]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4b65      	ldr	r3, [pc, #404]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b44:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y+1;
 8000b46:	4b64      	ldr	r3, [pc, #400]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b48:	78db      	ldrb	r3, [r3, #3]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4b62      	ldr	r3, [pc, #392]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b50:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000b52:	4b61      	ldr	r3, [pc, #388]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b54:	789a      	ldrb	r2, [r3, #2]
 8000b56:	4b60      	ldr	r3, [pc, #384]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b58:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y-1;
 8000b5a:	4b5f      	ldr	r3, [pc, #380]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b5c:	78db      	ldrb	r3, [r3, #3]
 8000b5e:	3b01      	subs	r3, #1
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4b5d      	ldr	r3, [pc, #372]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b64:	725a      	strb	r2, [r3, #9]

					break;
 8000b66:	e041      	b.n	8000bec <transform_rotation+0x3b0>
				case(ROTATION_2):
						// 1 [1]
						//    1  1
					object.suboriginbit_0.x = object.originbit.x - 1;
 8000b68:	4b5b      	ldr	r3, [pc, #364]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b6a:	789b      	ldrb	r3, [r3, #2]
 8000b6c:	3b01      	subs	r3, #1
 8000b6e:	b2da      	uxtb	r2, r3
 8000b70:	4b59      	ldr	r3, [pc, #356]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b72:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000b74:	4b58      	ldr	r3, [pc, #352]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b76:	78da      	ldrb	r2, [r3, #3]
 8000b78:	4b57      	ldr	r3, [pc, #348]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b7a:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000b7c:	4b56      	ldr	r3, [pc, #344]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b7e:	789a      	ldrb	r2, [r3, #2]
 8000b80:	4b55      	ldr	r3, [pc, #340]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b82:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8000b84:	4b54      	ldr	r3, [pc, #336]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b86:	78db      	ldrb	r3, [r3, #3]
 8000b88:	3b01      	subs	r3, #1
 8000b8a:	b2da      	uxtb	r2, r3
 8000b8c:	4b52      	ldr	r3, [pc, #328]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b8e:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;
 8000b90:	4b51      	ldr	r3, [pc, #324]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b92:	789b      	ldrb	r3, [r3, #2]
 8000b94:	3301      	adds	r3, #1
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	4b4f      	ldr	r3, [pc, #316]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b9a:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8000b9c:	4b4e      	ldr	r3, [pc, #312]	@ (8000cd8 <transform_rotation+0x49c>)
 8000b9e:	78db      	ldrb	r3, [r3, #3]
 8000ba0:	3b01      	subs	r3, #1
 8000ba2:	b2da      	uxtb	r2, r3
 8000ba4:	4b4c      	ldr	r3, [pc, #304]	@ (8000cd8 <transform_rotation+0x49c>)
 8000ba6:	725a      	strb	r2, [r3, #9]

					break;
 8000ba8:	e020      	b.n	8000bec <transform_rotation+0x3b0>
				case(ROTATION_3):
						//     1
						//  1 [1]
						//  1
					object.suboriginbit_0.x = object.originbit.x - 1;
 8000baa:	4b4b      	ldr	r3, [pc, #300]	@ (8000cd8 <transform_rotation+0x49c>)
 8000bac:	789b      	ldrb	r3, [r3, #2]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4b49      	ldr	r3, [pc, #292]	@ (8000cd8 <transform_rotation+0x49c>)
 8000bb4:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000bb6:	4b48      	ldr	r3, [pc, #288]	@ (8000cd8 <transform_rotation+0x49c>)
 8000bb8:	78da      	ldrb	r2, [r3, #3]
 8000bba:	4b47      	ldr	r3, [pc, #284]	@ (8000cd8 <transform_rotation+0x49c>)
 8000bbc:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;
 8000bbe:	4b46      	ldr	r3, [pc, #280]	@ (8000cd8 <transform_rotation+0x49c>)
 8000bc0:	789b      	ldrb	r3, [r3, #2]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4b44      	ldr	r3, [pc, #272]	@ (8000cd8 <transform_rotation+0x49c>)
 8000bc8:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8000bca:	4b43      	ldr	r3, [pc, #268]	@ (8000cd8 <transform_rotation+0x49c>)
 8000bcc:	78db      	ldrb	r3, [r3, #3]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4b41      	ldr	r3, [pc, #260]	@ (8000cd8 <transform_rotation+0x49c>)
 8000bd4:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000bd6:	4b40      	ldr	r3, [pc, #256]	@ (8000cd8 <transform_rotation+0x49c>)
 8000bd8:	789a      	ldrb	r2, [r3, #2]
 8000bda:	4b3f      	ldr	r3, [pc, #252]	@ (8000cd8 <transform_rotation+0x49c>)
 8000bdc:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1;
 8000bde:	4b3e      	ldr	r3, [pc, #248]	@ (8000cd8 <transform_rotation+0x49c>)
 8000be0:	78db      	ldrb	r3, [r3, #3]
 8000be2:	3301      	adds	r3, #1
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	4b3c      	ldr	r3, [pc, #240]	@ (8000cd8 <transform_rotation+0x49c>)
 8000be8:	725a      	strb	r2, [r3, #9]

					break;
 8000bea:	bf00      	nop
			}
			break;
 8000bec:	e24f      	b.n	800108e <transform_rotation+0x852>
		case(RHODE):
			switch(object.Rotation) {
 8000bee:	4b3a      	ldr	r3, [pc, #232]	@ (8000cd8 <transform_rotation+0x49c>)
 8000bf0:	785b      	ldrb	r3, [r3, #1]
 8000bf2:	2b03      	cmp	r3, #3
 8000bf4:	f200 824d 	bhi.w	8001092 <transform_rotation+0x856>
 8000bf8:	a201      	add	r2, pc, #4	@ (adr r2, 8000c00 <transform_rotation+0x3c4>)
 8000bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bfe:	bf00      	nop
 8000c00:	08000c11 	.word	0x08000c11
 8000c04:	08000c53 	.word	0x08000c53
 8000c08:	08000c95 	.word	0x08000c95
 8000c0c:	08000cdd 	.word	0x08000cdd
				case(ROTATION_0):
						//    1 1
						// 1 [1]
					object.suboriginbit_0.x = object.originbit.x;			 //	  [1] 1
 8000c10:	4b31      	ldr	r3, [pc, #196]	@ (8000cd8 <transform_rotation+0x49c>)
 8000c12:	789a      	ldrb	r2, [r3, #2]
 8000c14:	4b30      	ldr	r3, [pc, #192]	@ (8000cd8 <transform_rotation+0x49c>)
 8000c16:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;		 //  1 1
 8000c18:	4b2f      	ldr	r3, [pc, #188]	@ (8000cd8 <transform_rotation+0x49c>)
 8000c1a:	78db      	ldrb	r3, [r3, #3]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd8 <transform_rotation+0x49c>)
 8000c22:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;		 //    1 [1]
 8000c24:	4b2c      	ldr	r3, [pc, #176]	@ (8000cd8 <transform_rotation+0x49c>)
 8000c26:	789b      	ldrb	r3, [r3, #2]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000cd8 <transform_rotation+0x49c>)
 8000c2e:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;		 //  1 1
 8000c30:	4b29      	ldr	r3, [pc, #164]	@ (8000cd8 <transform_rotation+0x49c>)
 8000c32:	78db      	ldrb	r3, [r3, #3]
 8000c34:	3301      	adds	r3, #1
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	4b27      	ldr	r3, [pc, #156]	@ (8000cd8 <transform_rotation+0x49c>)
 8000c3a:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;		 //     1 1
 8000c3c:	4b26      	ldr	r3, [pc, #152]	@ (8000cd8 <transform_rotation+0x49c>)
 8000c3e:	789b      	ldrb	r3, [r3, #2]
 8000c40:	3b01      	subs	r3, #1
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b24      	ldr	r3, [pc, #144]	@ (8000cd8 <transform_rotation+0x49c>)
 8000c46:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y; 	     // [1] 1
 8000c48:	4b23      	ldr	r3, [pc, #140]	@ (8000cd8 <transform_rotation+0x49c>)
 8000c4a:	78da      	ldrb	r2, [r3, #3]
 8000c4c:	4b22      	ldr	r3, [pc, #136]	@ (8000cd8 <transform_rotation+0x49c>)
 8000c4e:	725a      	strb	r2, [r3, #9]

					break;
 8000c50:	e065      	b.n	8000d1e <transform_rotation+0x4e2>
				case(ROTATION_1):
						// 1
						//[1] 1
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 8000c52:	4b21      	ldr	r3, [pc, #132]	@ (8000cd8 <transform_rotation+0x49c>)
 8000c54:	789a      	ldrb	r2, [r3, #2]
 8000c56:	4b20      	ldr	r3, [pc, #128]	@ (8000cd8 <transform_rotation+0x49c>)
 8000c58:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 8000c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd8 <transform_rotation+0x49c>)
 8000c5c:	78db      	ldrb	r3, [r3, #3]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd8 <transform_rotation+0x49c>)
 8000c64:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;
 8000c66:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd8 <transform_rotation+0x49c>)
 8000c68:	789b      	ldrb	r3, [r3, #2]
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	b2da      	uxtb	r2, r3
 8000c6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cd8 <transform_rotation+0x49c>)
 8000c70:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000c72:	4b19      	ldr	r3, [pc, #100]	@ (8000cd8 <transform_rotation+0x49c>)
 8000c74:	78da      	ldrb	r2, [r3, #3]
 8000c76:	4b18      	ldr	r3, [pc, #96]	@ (8000cd8 <transform_rotation+0x49c>)
 8000c78:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;
 8000c7a:	4b17      	ldr	r3, [pc, #92]	@ (8000cd8 <transform_rotation+0x49c>)
 8000c7c:	789b      	ldrb	r3, [r3, #2]
 8000c7e:	3301      	adds	r3, #1
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b15      	ldr	r3, [pc, #84]	@ (8000cd8 <transform_rotation+0x49c>)
 8000c84:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8000c86:	4b14      	ldr	r3, [pc, #80]	@ (8000cd8 <transform_rotation+0x49c>)
 8000c88:	78db      	ldrb	r3, [r3, #3]
 8000c8a:	3b01      	subs	r3, #1
 8000c8c:	b2da      	uxtb	r2, r3
 8000c8e:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <transform_rotation+0x49c>)
 8000c90:	725a      	strb	r2, [r3, #9]

					break;
 8000c92:	e044      	b.n	8000d1e <transform_rotation+0x4e2>
				case(ROTATION_2):
						//  [1] 1
						// 1 1
					object.suboriginbit_0.x = object.originbit.x + 1;
 8000c94:	4b10      	ldr	r3, [pc, #64]	@ (8000cd8 <transform_rotation+0x49c>)
 8000c96:	789b      	ldrb	r3, [r3, #2]
 8000c98:	3301      	adds	r3, #1
 8000c9a:	b2da      	uxtb	r2, r3
 8000c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd8 <transform_rotation+0x49c>)
 8000c9e:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd8 <transform_rotation+0x49c>)
 8000ca2:	78da      	ldrb	r2, [r3, #3]
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd8 <transform_rotation+0x49c>)
 8000ca6:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd8 <transform_rotation+0x49c>)
 8000caa:	789a      	ldrb	r2, [r3, #2]
 8000cac:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <transform_rotation+0x49c>)
 8000cae:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	@ (8000cd8 <transform_rotation+0x49c>)
 8000cb2:	78db      	ldrb	r3, [r3, #3]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	4b07      	ldr	r3, [pc, #28]	@ (8000cd8 <transform_rotation+0x49c>)
 8000cba:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <transform_rotation+0x49c>)
 8000cbe:	789b      	ldrb	r3, [r3, #2]
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	4b04      	ldr	r3, [pc, #16]	@ (8000cd8 <transform_rotation+0x49c>)
 8000cc6:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8000cc8:	4b03      	ldr	r3, [pc, #12]	@ (8000cd8 <transform_rotation+0x49c>)
 8000cca:	78db      	ldrb	r3, [r3, #3]
 8000ccc:	3b01      	subs	r3, #1
 8000cce:	b2da      	uxtb	r2, r3
 8000cd0:	4b01      	ldr	r3, [pc, #4]	@ (8000cd8 <transform_rotation+0x49c>)
 8000cd2:	725a      	strb	r2, [r3, #9]

					break;
 8000cd4:	e023      	b.n	8000d1e <transform_rotation+0x4e2>
 8000cd6:	bf00      	nop
 8000cd8:	2000008c 	.word	0x2000008c
				case(ROTATION_3):
						// 1
						// 1 [1]
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 8000cdc:	4b8e      	ldr	r3, [pc, #568]	@ (8000f18 <transform_rotation+0x6dc>)
 8000cde:	789a      	ldrb	r2, [r3, #2]
 8000ce0:	4b8d      	ldr	r3, [pc, #564]	@ (8000f18 <transform_rotation+0x6dc>)
 8000ce2:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y - 1;
 8000ce4:	4b8c      	ldr	r3, [pc, #560]	@ (8000f18 <transform_rotation+0x6dc>)
 8000ce6:	78db      	ldrb	r3, [r3, #3]
 8000ce8:	3b01      	subs	r3, #1
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	4b8a      	ldr	r3, [pc, #552]	@ (8000f18 <transform_rotation+0x6dc>)
 8000cee:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;
 8000cf0:	4b89      	ldr	r3, [pc, #548]	@ (8000f18 <transform_rotation+0x6dc>)
 8000cf2:	789b      	ldrb	r3, [r3, #2]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	4b87      	ldr	r3, [pc, #540]	@ (8000f18 <transform_rotation+0x6dc>)
 8000cfa:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000cfc:	4b86      	ldr	r3, [pc, #536]	@ (8000f18 <transform_rotation+0x6dc>)
 8000cfe:	78da      	ldrb	r2, [r3, #3]
 8000d00:	4b85      	ldr	r3, [pc, #532]	@ (8000f18 <transform_rotation+0x6dc>)
 8000d02:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 8000d04:	4b84      	ldr	r3, [pc, #528]	@ (8000f18 <transform_rotation+0x6dc>)
 8000d06:	789b      	ldrb	r3, [r3, #2]
 8000d08:	3b01      	subs	r3, #1
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	4b82      	ldr	r3, [pc, #520]	@ (8000f18 <transform_rotation+0x6dc>)
 8000d0e:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1;
 8000d10:	4b81      	ldr	r3, [pc, #516]	@ (8000f18 <transform_rotation+0x6dc>)
 8000d12:	78db      	ldrb	r3, [r3, #3]
 8000d14:	3301      	adds	r3, #1
 8000d16:	b2da      	uxtb	r2, r3
 8000d18:	4b7f      	ldr	r3, [pc, #508]	@ (8000f18 <transform_rotation+0x6dc>)
 8000d1a:	725a      	strb	r2, [r3, #9]

					break;
 8000d1c:	bf00      	nop
			}
			break;
 8000d1e:	e1b8      	b.n	8001092 <transform_rotation+0x856>
		case(HERO):
			switch(object.Rotation) {
 8000d20:	4b7d      	ldr	r3, [pc, #500]	@ (8000f18 <transform_rotation+0x6dc>)
 8000d22:	785b      	ldrb	r3, [r3, #1]
 8000d24:	2b03      	cmp	r3, #3
 8000d26:	f200 81b6 	bhi.w	8001096 <transform_rotation+0x85a>
 8000d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8000d30 <transform_rotation+0x4f4>)
 8000d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d30:	08000d41 	.word	0x08000d41
 8000d34:	08000d7f 	.word	0x08000d7f
 8000d38:	08000dbd 	.word	0x08000dbd
 8000d3c:	08000dfb 	.word	0x08000dfb
				case(ROTATION_0):
						// 1 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;	 //
 8000d40:	4b75      	ldr	r3, [pc, #468]	@ (8000f18 <transform_rotation+0x6dc>)
 8000d42:	789b      	ldrb	r3, [r3, #2]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	4b73      	ldr	r3, [pc, #460]	@ (8000f18 <transform_rotation+0x6dc>)
 8000d4a:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 // 1 [1] 1 1
 8000d4c:	4b72      	ldr	r3, [pc, #456]	@ (8000f18 <transform_rotation+0x6dc>)
 8000d4e:	78da      	ldrb	r2, [r3, #3]
 8000d50:	4b71      	ldr	r3, [pc, #452]	@ (8000f18 <transform_rotation+0x6dc>)
 8000d52:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 2;	 //
 8000d54:	4b70      	ldr	r3, [pc, #448]	@ (8000f18 <transform_rotation+0x6dc>)
 8000d56:	789b      	ldrb	r3, [r3, #2]
 8000d58:	3b02      	subs	r3, #2
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b6e      	ldr	r3, [pc, #440]	@ (8000f18 <transform_rotation+0x6dc>)
 8000d5e:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		 // [1] 1 1 1
 8000d60:	4b6d      	ldr	r3, [pc, #436]	@ (8000f18 <transform_rotation+0x6dc>)
 8000d62:	78da      	ldrb	r2, [r3, #3]
 8000d64:	4b6c      	ldr	r3, [pc, #432]	@ (8000f18 <transform_rotation+0x6dc>)
 8000d66:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //
 8000d68:	4b6b      	ldr	r3, [pc, #428]	@ (8000f18 <transform_rotation+0x6dc>)
 8000d6a:	789b      	ldrb	r3, [r3, #2]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	4b69      	ldr	r3, [pc, #420]	@ (8000f18 <transform_rotation+0x6dc>)
 8000d72:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y; 	     //  1 1 1 [1]
 8000d74:	4b68      	ldr	r3, [pc, #416]	@ (8000f18 <transform_rotation+0x6dc>)
 8000d76:	78da      	ldrb	r2, [r3, #3]
 8000d78:	4b67      	ldr	r3, [pc, #412]	@ (8000f18 <transform_rotation+0x6dc>)
 8000d7a:	725a      	strb	r2, [r3, #9]

					break;
 8000d7c:	e05c      	b.n	8000e38 <transform_rotation+0x5fc>
				case(ROTATION_1):
						//  1
						//  1
						// [1]
						//  1
					object.suboriginbit_0.x = object.originbit.x;
 8000d7e:	4b66      	ldr	r3, [pc, #408]	@ (8000f18 <transform_rotation+0x6dc>)
 8000d80:	789a      	ldrb	r2, [r3, #2]
 8000d82:	4b65      	ldr	r3, [pc, #404]	@ (8000f18 <transform_rotation+0x6dc>)
 8000d84:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 8000d86:	4b64      	ldr	r3, [pc, #400]	@ (8000f18 <transform_rotation+0x6dc>)
 8000d88:	78db      	ldrb	r3, [r3, #3]
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	b2da      	uxtb	r2, r3
 8000d8e:	4b62      	ldr	r3, [pc, #392]	@ (8000f18 <transform_rotation+0x6dc>)
 8000d90:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000d92:	4b61      	ldr	r3, [pc, #388]	@ (8000f18 <transform_rotation+0x6dc>)
 8000d94:	789a      	ldrb	r2, [r3, #2]
 8000d96:	4b60      	ldr	r3, [pc, #384]	@ (8000f18 <transform_rotation+0x6dc>)
 8000d98:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8000d9a:	4b5f      	ldr	r3, [pc, #380]	@ (8000f18 <transform_rotation+0x6dc>)
 8000d9c:	78db      	ldrb	r3, [r3, #3]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4b5d      	ldr	r3, [pc, #372]	@ (8000f18 <transform_rotation+0x6dc>)
 8000da4:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000da6:	4b5c      	ldr	r3, [pc, #368]	@ (8000f18 <transform_rotation+0x6dc>)
 8000da8:	789a      	ldrb	r2, [r3, #2]
 8000daa:	4b5b      	ldr	r3, [pc, #364]	@ (8000f18 <transform_rotation+0x6dc>)
 8000dac:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 2;
 8000dae:	4b5a      	ldr	r3, [pc, #360]	@ (8000f18 <transform_rotation+0x6dc>)
 8000db0:	78db      	ldrb	r3, [r3, #3]
 8000db2:	3302      	adds	r3, #2
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4b58      	ldr	r3, [pc, #352]	@ (8000f18 <transform_rotation+0x6dc>)
 8000db8:	725a      	strb	r2, [r3, #9]

					break;
 8000dba:	e03d      	b.n	8000e38 <transform_rotation+0x5fc>
				case(ROTATION_2):
						// 1 [1] 1 1
					object.suboriginbit_0.x = object.originbit.x - 1;
 8000dbc:	4b56      	ldr	r3, [pc, #344]	@ (8000f18 <transform_rotation+0x6dc>)
 8000dbe:	789b      	ldrb	r3, [r3, #2]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	4b54      	ldr	r3, [pc, #336]	@ (8000f18 <transform_rotation+0x6dc>)
 8000dc6:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000dc8:	4b53      	ldr	r3, [pc, #332]	@ (8000f18 <transform_rotation+0x6dc>)
 8000dca:	78da      	ldrb	r2, [r3, #3]
 8000dcc:	4b52      	ldr	r3, [pc, #328]	@ (8000f18 <transform_rotation+0x6dc>)
 8000dce:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;
 8000dd0:	4b51      	ldr	r3, [pc, #324]	@ (8000f18 <transform_rotation+0x6dc>)
 8000dd2:	789b      	ldrb	r3, [r3, #2]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	4b4f      	ldr	r3, [pc, #316]	@ (8000f18 <transform_rotation+0x6dc>)
 8000dda:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000ddc:	4b4e      	ldr	r3, [pc, #312]	@ (8000f18 <transform_rotation+0x6dc>)
 8000dde:	78da      	ldrb	r2, [r3, #3]
 8000de0:	4b4d      	ldr	r3, [pc, #308]	@ (8000f18 <transform_rotation+0x6dc>)
 8000de2:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 2;
 8000de4:	4b4c      	ldr	r3, [pc, #304]	@ (8000f18 <transform_rotation+0x6dc>)
 8000de6:	789b      	ldrb	r3, [r3, #2]
 8000de8:	3302      	adds	r3, #2
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	4b4a      	ldr	r3, [pc, #296]	@ (8000f18 <transform_rotation+0x6dc>)
 8000dee:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 8000df0:	4b49      	ldr	r3, [pc, #292]	@ (8000f18 <transform_rotation+0x6dc>)
 8000df2:	78da      	ldrb	r2, [r3, #3]
 8000df4:	4b48      	ldr	r3, [pc, #288]	@ (8000f18 <transform_rotation+0x6dc>)
 8000df6:	725a      	strb	r2, [r3, #9]

					break;
 8000df8:	e01e      	b.n	8000e38 <transform_rotation+0x5fc>
				case(ROTATION_3):
						//  1
						// [1]
						//  1
						//  1
					object.suboriginbit_0.x = object.originbit.x;
 8000dfa:	4b47      	ldr	r3, [pc, #284]	@ (8000f18 <transform_rotation+0x6dc>)
 8000dfc:	789a      	ldrb	r2, [r3, #2]
 8000dfe:	4b46      	ldr	r3, [pc, #280]	@ (8000f18 <transform_rotation+0x6dc>)
 8000e00:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 8000e02:	4b45      	ldr	r3, [pc, #276]	@ (8000f18 <transform_rotation+0x6dc>)
 8000e04:	78db      	ldrb	r3, [r3, #3]
 8000e06:	3301      	adds	r3, #1
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4b43      	ldr	r3, [pc, #268]	@ (8000f18 <transform_rotation+0x6dc>)
 8000e0c:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000e0e:	4b42      	ldr	r3, [pc, #264]	@ (8000f18 <transform_rotation+0x6dc>)
 8000e10:	789a      	ldrb	r2, [r3, #2]
 8000e12:	4b41      	ldr	r3, [pc, #260]	@ (8000f18 <transform_rotation+0x6dc>)
 8000e14:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8000e16:	4b40      	ldr	r3, [pc, #256]	@ (8000f18 <transform_rotation+0x6dc>)
 8000e18:	78db      	ldrb	r3, [r3, #3]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	b2da      	uxtb	r2, r3
 8000e1e:	4b3e      	ldr	r3, [pc, #248]	@ (8000f18 <transform_rotation+0x6dc>)
 8000e20:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000e22:	4b3d      	ldr	r3, [pc, #244]	@ (8000f18 <transform_rotation+0x6dc>)
 8000e24:	789a      	ldrb	r2, [r3, #2]
 8000e26:	4b3c      	ldr	r3, [pc, #240]	@ (8000f18 <transform_rotation+0x6dc>)
 8000e28:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 2;
 8000e2a:	4b3b      	ldr	r3, [pc, #236]	@ (8000f18 <transform_rotation+0x6dc>)
 8000e2c:	78db      	ldrb	r3, [r3, #3]
 8000e2e:	3b02      	subs	r3, #2
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4b39      	ldr	r3, [pc, #228]	@ (8000f18 <transform_rotation+0x6dc>)
 8000e34:	725a      	strb	r2, [r3, #9]

					break;
 8000e36:	bf00      	nop
			}

			break;
 8000e38:	e12d      	b.n	8001096 <transform_rotation+0x85a>
		case(TEEWEE):
			switch(object.Rotation) {
 8000e3a:	4b37      	ldr	r3, [pc, #220]	@ (8000f18 <transform_rotation+0x6dc>)
 8000e3c:	785b      	ldrb	r3, [r3, #1]
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	f200 812b 	bhi.w	800109a <transform_rotation+0x85e>
 8000e44:	a201      	add	r2, pc, #4	@ (adr r2, 8000e4c <transform_rotation+0x610>)
 8000e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4a:	bf00      	nop
 8000e4c:	08000e5d 	.word	0x08000e5d
 8000e50:	08000e9b 	.word	0x08000e9b
 8000e54:	08000ed9 	.word	0x08000ed9
 8000e58:	08000f1d 	.word	0x08000f1d
				case(ROTATION_0):
						//    1
						// 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;	 //     1
 8000e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8000f18 <transform_rotation+0x6dc>)
 8000e5e:	789b      	ldrb	r3, [r3, #2]
 8000e60:	3b01      	subs	r3, #1
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	4b2c      	ldr	r3, [pc, #176]	@ (8000f18 <transform_rotation+0x6dc>)
 8000e66:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 // [1] 1 1
 8000e68:	4b2b      	ldr	r3, [pc, #172]	@ (8000f18 <transform_rotation+0x6dc>)
 8000e6a:	78da      	ldrb	r2, [r3, #3]
 8000e6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000f18 <transform_rotation+0x6dc>)
 8000e6e:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;	 //	  1
 8000e70:	4b29      	ldr	r3, [pc, #164]	@ (8000f18 <transform_rotation+0x6dc>)
 8000e72:	789b      	ldrb	r3, [r3, #2]
 8000e74:	3301      	adds	r3, #1
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	4b27      	ldr	r3, [pc, #156]	@ (8000f18 <transform_rotation+0x6dc>)
 8000e7a:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		 // 1 1 [1]
 8000e7c:	4b26      	ldr	r3, [pc, #152]	@ (8000f18 <transform_rotation+0x6dc>)
 8000e7e:	78da      	ldrb	r2, [r3, #3]
 8000e80:	4b25      	ldr	r3, [pc, #148]	@ (8000f18 <transform_rotation+0x6dc>)
 8000e82:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;	     //	 [1]
 8000e84:	4b24      	ldr	r3, [pc, #144]	@ (8000f18 <transform_rotation+0x6dc>)
 8000e86:	789a      	ldrb	r2, [r3, #2]
 8000e88:	4b23      	ldr	r3, [pc, #140]	@ (8000f18 <transform_rotation+0x6dc>)
 8000e8a:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1 1 1
 8000e8c:	4b22      	ldr	r3, [pc, #136]	@ (8000f18 <transform_rotation+0x6dc>)
 8000e8e:	78db      	ldrb	r3, [r3, #3]
 8000e90:	3301      	adds	r3, #1
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	4b20      	ldr	r3, [pc, #128]	@ (8000f18 <transform_rotation+0x6dc>)
 8000e96:	725a      	strb	r2, [r3, #9]

					break;
 8000e98:	e05f      	b.n	8000f5a <transform_rotation+0x71e>
				case(ROTATION_1):
						//  1
						// [1] 1
						//  1
					object.suboriginbit_0.x = object.originbit.x + 1;
 8000e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000f18 <transform_rotation+0x6dc>)
 8000e9c:	789b      	ldrb	r3, [r3, #2]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f18 <transform_rotation+0x6dc>)
 8000ea4:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f18 <transform_rotation+0x6dc>)
 8000ea8:	78da      	ldrb	r2, [r3, #3]
 8000eaa:	4b1b      	ldr	r3, [pc, #108]	@ (8000f18 <transform_rotation+0x6dc>)
 8000eac:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000eae:	4b1a      	ldr	r3, [pc, #104]	@ (8000f18 <transform_rotation+0x6dc>)
 8000eb0:	789a      	ldrb	r2, [r3, #2]
 8000eb2:	4b19      	ldr	r3, [pc, #100]	@ (8000f18 <transform_rotation+0x6dc>)
 8000eb4:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;
 8000eb6:	4b18      	ldr	r3, [pc, #96]	@ (8000f18 <transform_rotation+0x6dc>)
 8000eb8:	78db      	ldrb	r3, [r3, #3]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4b16      	ldr	r3, [pc, #88]	@ (8000f18 <transform_rotation+0x6dc>)
 8000ec0:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000ec2:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <transform_rotation+0x6dc>)
 8000ec4:	789a      	ldrb	r2, [r3, #2]
 8000ec6:	4b14      	ldr	r3, [pc, #80]	@ (8000f18 <transform_rotation+0x6dc>)
 8000ec8:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8000eca:	4b13      	ldr	r3, [pc, #76]	@ (8000f18 <transform_rotation+0x6dc>)
 8000ecc:	78db      	ldrb	r3, [r3, #3]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4b11      	ldr	r3, [pc, #68]	@ (8000f18 <transform_rotation+0x6dc>)
 8000ed4:	725a      	strb	r2, [r3, #9]

					break;
 8000ed6:	e040      	b.n	8000f5a <transform_rotation+0x71e>
				case(ROTATION_2):
						// 1 [1] 1
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f18 <transform_rotation+0x6dc>)
 8000eda:	789a      	ldrb	r2, [r3, #2]
 8000edc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f18 <transform_rotation+0x6dc>)
 8000ede:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y - 1;
 8000ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8000f18 <transform_rotation+0x6dc>)
 8000ee2:	78db      	ldrb	r3, [r3, #3]
 8000ee4:	3b01      	subs	r3, #1
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8000f18 <transform_rotation+0x6dc>)
 8000eea:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;
 8000eec:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <transform_rotation+0x6dc>)
 8000eee:	789b      	ldrb	r3, [r3, #2]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <transform_rotation+0x6dc>)
 8000ef6:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000ef8:	4b07      	ldr	r3, [pc, #28]	@ (8000f18 <transform_rotation+0x6dc>)
 8000efa:	78da      	ldrb	r2, [r3, #3]
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <transform_rotation+0x6dc>)
 8000efe:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 8000f00:	4b05      	ldr	r3, [pc, #20]	@ (8000f18 <transform_rotation+0x6dc>)
 8000f02:	789b      	ldrb	r3, [r3, #2]
 8000f04:	3b01      	subs	r3, #1
 8000f06:	b2da      	uxtb	r2, r3
 8000f08:	4b03      	ldr	r3, [pc, #12]	@ (8000f18 <transform_rotation+0x6dc>)
 8000f0a:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 8000f0c:	4b02      	ldr	r3, [pc, #8]	@ (8000f18 <transform_rotation+0x6dc>)
 8000f0e:	78da      	ldrb	r2, [r3, #3]
 8000f10:	4b01      	ldr	r3, [pc, #4]	@ (8000f18 <transform_rotation+0x6dc>)
 8000f12:	725a      	strb	r2, [r3, #9]

					break;
 8000f14:	e021      	b.n	8000f5a <transform_rotation+0x71e>
 8000f16:	bf00      	nop
 8000f18:	2000008c 	.word	0x2000008c
				case(ROTATION_3):
						//    1
						// 1 [1]
						//    1
					object.suboriginbit_0.x = object.originbit.x - 1;
 8000f1c:	4b68      	ldr	r3, [pc, #416]	@ (80010c0 <transform_rotation+0x884>)
 8000f1e:	789b      	ldrb	r3, [r3, #2]
 8000f20:	3b01      	subs	r3, #1
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	4b66      	ldr	r3, [pc, #408]	@ (80010c0 <transform_rotation+0x884>)
 8000f26:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000f28:	4b65      	ldr	r3, [pc, #404]	@ (80010c0 <transform_rotation+0x884>)
 8000f2a:	78da      	ldrb	r2, [r3, #3]
 8000f2c:	4b64      	ldr	r3, [pc, #400]	@ (80010c0 <transform_rotation+0x884>)
 8000f2e:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000f30:	4b63      	ldr	r3, [pc, #396]	@ (80010c0 <transform_rotation+0x884>)
 8000f32:	789a      	ldrb	r2, [r3, #2]
 8000f34:	4b62      	ldr	r3, [pc, #392]	@ (80010c0 <transform_rotation+0x884>)
 8000f36:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;
 8000f38:	4b61      	ldr	r3, [pc, #388]	@ (80010c0 <transform_rotation+0x884>)
 8000f3a:	78db      	ldrb	r3, [r3, #3]
 8000f3c:	3301      	adds	r3, #1
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	4b5f      	ldr	r3, [pc, #380]	@ (80010c0 <transform_rotation+0x884>)
 8000f42:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000f44:	4b5e      	ldr	r3, [pc, #376]	@ (80010c0 <transform_rotation+0x884>)
 8000f46:	789a      	ldrb	r2, [r3, #2]
 8000f48:	4b5d      	ldr	r3, [pc, #372]	@ (80010c0 <transform_rotation+0x884>)
 8000f4a:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8000f4c:	4b5c      	ldr	r3, [pc, #368]	@ (80010c0 <transform_rotation+0x884>)
 8000f4e:	78db      	ldrb	r3, [r3, #3]
 8000f50:	3b01      	subs	r3, #1
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b5a      	ldr	r3, [pc, #360]	@ (80010c0 <transform_rotation+0x884>)
 8000f56:	725a      	strb	r2, [r3, #9]

					break;
 8000f58:	bf00      	nop
			}

			break;
 8000f5a:	e09e      	b.n	800109a <transform_rotation+0x85e>
		case(SMASHBOY):
			switch(object.Rotation) {
 8000f5c:	4b58      	ldr	r3, [pc, #352]	@ (80010c0 <transform_rotation+0x884>)
 8000f5e:	785b      	ldrb	r3, [r3, #1]
 8000f60:	2b03      	cmp	r3, #3
 8000f62:	f200 809c 	bhi.w	800109e <transform_rotation+0x862>
 8000f66:	a201      	add	r2, pc, #4	@ (adr r2, 8000f6c <transform_rotation+0x730>)
 8000f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f6c:	08000f7d 	.word	0x08000f7d
 8000f70:	08000fbf 	.word	0x08000fbf
 8000f74:	08001001 	.word	0x08001001
 8000f78:	08001043 	.word	0x08001043
				case(ROTATION_0):
					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 8000f7c:	4b50      	ldr	r3, [pc, #320]	@ (80010c0 <transform_rotation+0x884>)
 8000f7e:	789b      	ldrb	r3, [r3, #2]
 8000f80:	3301      	adds	r3, #1
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	4b4e      	ldr	r3, [pc, #312]	@ (80010c0 <transform_rotation+0x884>)
 8000f86:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 8000f88:	4b4d      	ldr	r3, [pc, #308]	@ (80010c0 <transform_rotation+0x884>)
 8000f8a:	78da      	ldrb	r2, [r3, #3]
 8000f8c:	4b4c      	ldr	r3, [pc, #304]	@ (80010c0 <transform_rotation+0x884>)
 8000f8e:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 8000f90:	4b4b      	ldr	r3, [pc, #300]	@ (80010c0 <transform_rotation+0x884>)
 8000f92:	789a      	ldrb	r2, [r3, #2]
 8000f94:	4b4a      	ldr	r3, [pc, #296]	@ (80010c0 <transform_rotation+0x884>)
 8000f96:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 8000f98:	4b49      	ldr	r3, [pc, #292]	@ (80010c0 <transform_rotation+0x884>)
 8000f9a:	78db      	ldrb	r3, [r3, #3]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	4b47      	ldr	r3, [pc, #284]	@ (80010c0 <transform_rotation+0x884>)
 8000fa2:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 8000fa4:	4b46      	ldr	r3, [pc, #280]	@ (80010c0 <transform_rotation+0x884>)
 8000fa6:	789b      	ldrb	r3, [r3, #2]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	4b44      	ldr	r3, [pc, #272]	@ (80010c0 <transform_rotation+0x884>)
 8000fae:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 8000fb0:	4b43      	ldr	r3, [pc, #268]	@ (80010c0 <transform_rotation+0x884>)
 8000fb2:	78db      	ldrb	r3, [r3, #3]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	4b41      	ldr	r3, [pc, #260]	@ (80010c0 <transform_rotation+0x884>)
 8000fba:	725a      	strb	r2, [r3, #9]

					break;
 8000fbc:	e062      	b.n	8001084 <transform_rotation+0x848>
				case(ROTATION_1):

					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 8000fbe:	4b40      	ldr	r3, [pc, #256]	@ (80010c0 <transform_rotation+0x884>)
 8000fc0:	789b      	ldrb	r3, [r3, #2]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4b3e      	ldr	r3, [pc, #248]	@ (80010c0 <transform_rotation+0x884>)
 8000fc8:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 8000fca:	4b3d      	ldr	r3, [pc, #244]	@ (80010c0 <transform_rotation+0x884>)
 8000fcc:	78da      	ldrb	r2, [r3, #3]
 8000fce:	4b3c      	ldr	r3, [pc, #240]	@ (80010c0 <transform_rotation+0x884>)
 8000fd0:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 8000fd2:	4b3b      	ldr	r3, [pc, #236]	@ (80010c0 <transform_rotation+0x884>)
 8000fd4:	789a      	ldrb	r2, [r3, #2]
 8000fd6:	4b3a      	ldr	r3, [pc, #232]	@ (80010c0 <transform_rotation+0x884>)
 8000fd8:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 8000fda:	4b39      	ldr	r3, [pc, #228]	@ (80010c0 <transform_rotation+0x884>)
 8000fdc:	78db      	ldrb	r3, [r3, #3]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4b37      	ldr	r3, [pc, #220]	@ (80010c0 <transform_rotation+0x884>)
 8000fe4:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 8000fe6:	4b36      	ldr	r3, [pc, #216]	@ (80010c0 <transform_rotation+0x884>)
 8000fe8:	789b      	ldrb	r3, [r3, #2]
 8000fea:	3301      	adds	r3, #1
 8000fec:	b2da      	uxtb	r2, r3
 8000fee:	4b34      	ldr	r3, [pc, #208]	@ (80010c0 <transform_rotation+0x884>)
 8000ff0:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 8000ff2:	4b33      	ldr	r3, [pc, #204]	@ (80010c0 <transform_rotation+0x884>)
 8000ff4:	78db      	ldrb	r3, [r3, #3]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	4b31      	ldr	r3, [pc, #196]	@ (80010c0 <transform_rotation+0x884>)
 8000ffc:	725a      	strb	r2, [r3, #9]

					break;
 8000ffe:	e041      	b.n	8001084 <transform_rotation+0x848>
				case(ROTATION_2):
					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 8001000:	4b2f      	ldr	r3, [pc, #188]	@ (80010c0 <transform_rotation+0x884>)
 8001002:	789b      	ldrb	r3, [r3, #2]
 8001004:	3301      	adds	r3, #1
 8001006:	b2da      	uxtb	r2, r3
 8001008:	4b2d      	ldr	r3, [pc, #180]	@ (80010c0 <transform_rotation+0x884>)
 800100a:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 800100c:	4b2c      	ldr	r3, [pc, #176]	@ (80010c0 <transform_rotation+0x884>)
 800100e:	78da      	ldrb	r2, [r3, #3]
 8001010:	4b2b      	ldr	r3, [pc, #172]	@ (80010c0 <transform_rotation+0x884>)
 8001012:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 8001014:	4b2a      	ldr	r3, [pc, #168]	@ (80010c0 <transform_rotation+0x884>)
 8001016:	789a      	ldrb	r2, [r3, #2]
 8001018:	4b29      	ldr	r3, [pc, #164]	@ (80010c0 <transform_rotation+0x884>)
 800101a:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 800101c:	4b28      	ldr	r3, [pc, #160]	@ (80010c0 <transform_rotation+0x884>)
 800101e:	78db      	ldrb	r3, [r3, #3]
 8001020:	3301      	adds	r3, #1
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b26      	ldr	r3, [pc, #152]	@ (80010c0 <transform_rotation+0x884>)
 8001026:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 8001028:	4b25      	ldr	r3, [pc, #148]	@ (80010c0 <transform_rotation+0x884>)
 800102a:	789b      	ldrb	r3, [r3, #2]
 800102c:	3301      	adds	r3, #1
 800102e:	b2da      	uxtb	r2, r3
 8001030:	4b23      	ldr	r3, [pc, #140]	@ (80010c0 <transform_rotation+0x884>)
 8001032:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 8001034:	4b22      	ldr	r3, [pc, #136]	@ (80010c0 <transform_rotation+0x884>)
 8001036:	78db      	ldrb	r3, [r3, #3]
 8001038:	3301      	adds	r3, #1
 800103a:	b2da      	uxtb	r2, r3
 800103c:	4b20      	ldr	r3, [pc, #128]	@ (80010c0 <transform_rotation+0x884>)
 800103e:	725a      	strb	r2, [r3, #9]

					break;
 8001040:	e020      	b.n	8001084 <transform_rotation+0x848>
				case(ROTATION_3):

					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 8001042:	4b1f      	ldr	r3, [pc, #124]	@ (80010c0 <transform_rotation+0x884>)
 8001044:	789b      	ldrb	r3, [r3, #2]
 8001046:	3301      	adds	r3, #1
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4b1d      	ldr	r3, [pc, #116]	@ (80010c0 <transform_rotation+0x884>)
 800104c:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 800104e:	4b1c      	ldr	r3, [pc, #112]	@ (80010c0 <transform_rotation+0x884>)
 8001050:	78da      	ldrb	r2, [r3, #3]
 8001052:	4b1b      	ldr	r3, [pc, #108]	@ (80010c0 <transform_rotation+0x884>)
 8001054:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 8001056:	4b1a      	ldr	r3, [pc, #104]	@ (80010c0 <transform_rotation+0x884>)
 8001058:	789a      	ldrb	r2, [r3, #2]
 800105a:	4b19      	ldr	r3, [pc, #100]	@ (80010c0 <transform_rotation+0x884>)
 800105c:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 800105e:	4b18      	ldr	r3, [pc, #96]	@ (80010c0 <transform_rotation+0x884>)
 8001060:	78db      	ldrb	r3, [r3, #3]
 8001062:	3301      	adds	r3, #1
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <transform_rotation+0x884>)
 8001068:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 800106a:	4b15      	ldr	r3, [pc, #84]	@ (80010c0 <transform_rotation+0x884>)
 800106c:	789b      	ldrb	r3, [r3, #2]
 800106e:	3301      	adds	r3, #1
 8001070:	b2da      	uxtb	r2, r3
 8001072:	4b13      	ldr	r3, [pc, #76]	@ (80010c0 <transform_rotation+0x884>)
 8001074:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 8001076:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <transform_rotation+0x884>)
 8001078:	78db      	ldrb	r3, [r3, #3]
 800107a:	3301      	adds	r3, #1
 800107c:	b2da      	uxtb	r2, r3
 800107e:	4b10      	ldr	r3, [pc, #64]	@ (80010c0 <transform_rotation+0x884>)
 8001080:	725a      	strb	r2, [r3, #9]

					break;
 8001082:	bf00      	nop
			}
		break;
 8001084:	e00b      	b.n	800109e <transform_rotation+0x862>
			break;
 8001086:	bf00      	nop
 8001088:	e00a      	b.n	80010a0 <transform_rotation+0x864>
			break;
 800108a:	bf00      	nop
 800108c:	e008      	b.n	80010a0 <transform_rotation+0x864>
			break;
 800108e:	bf00      	nop
 8001090:	e006      	b.n	80010a0 <transform_rotation+0x864>
			break;
 8001092:	bf00      	nop
 8001094:	e004      	b.n	80010a0 <transform_rotation+0x864>
			break;
 8001096:	bf00      	nop
 8001098:	e002      	b.n	80010a0 <transform_rotation+0x864>
			break;
 800109a:	bf00      	nop
 800109c:	e000      	b.n	80010a0 <transform_rotation+0x864>
		break;
 800109e:	bf00      	nop
	}

	if (check_State() == 0) {
 80010a0:	f7ff fab4 	bl	800060c <check_State>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d104      	bne.n	80010b4 <transform_rotation+0x878>
		object = temp;
 80010aa:	4b05      	ldr	r3, [pc, #20]	@ (80010c0 <transform_rotation+0x884>)
 80010ac:	1d3a      	adds	r2, r7, #4
 80010ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b0:	c303      	stmia	r3!, {r0, r1}
 80010b2:	801a      	strh	r2, [r3, #0]
	}
	Matrix_update();
 80010b4:	f000 f8d8 	bl	8001268 <Matrix_update>

}
 80010b8:	bf00      	nop
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	2000008c 	.word	0x2000008c

080010c4 <tick_Matrix>:

void tick_Matrix(void){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	 // erase the previous state
	Matrix_clear();
 80010c8:	f000 f886 	bl	80011d8 <Matrix_clear>
	// create the new object location
	object.originbit.y -= 1;
 80010cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001104 <tick_Matrix+0x40>)
 80010ce:	78db      	ldrb	r3, [r3, #3]
 80010d0:	3b01      	subs	r3, #1
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001104 <tick_Matrix+0x40>)
 80010d6:	70da      	strb	r2, [r3, #3]
	object.suboriginbit_0.y -= 1;
 80010d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <tick_Matrix+0x40>)
 80010da:	795b      	ldrb	r3, [r3, #5]
 80010dc:	3b01      	subs	r3, #1
 80010de:	b2da      	uxtb	r2, r3
 80010e0:	4b08      	ldr	r3, [pc, #32]	@ (8001104 <tick_Matrix+0x40>)
 80010e2:	715a      	strb	r2, [r3, #5]
	object.suboriginbit_1.y -= 1;
 80010e4:	4b07      	ldr	r3, [pc, #28]	@ (8001104 <tick_Matrix+0x40>)
 80010e6:	79db      	ldrb	r3, [r3, #7]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b05      	ldr	r3, [pc, #20]	@ (8001104 <tick_Matrix+0x40>)
 80010ee:	71da      	strb	r2, [r3, #7]
	object.suboriginbit_2.y -= 1;
 80010f0:	4b04      	ldr	r3, [pc, #16]	@ (8001104 <tick_Matrix+0x40>)
 80010f2:	7a5b      	ldrb	r3, [r3, #9]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	b2da      	uxtb	r2, r3
 80010f8:	4b02      	ldr	r3, [pc, #8]	@ (8001104 <tick_Matrix+0x40>)
 80010fa:	725a      	strb	r2, [r3, #9]
	// draw the new state
	Matrix_update();
 80010fc:	f000 f8b4 	bl	8001268 <Matrix_update>
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	2000008c 	.word	0x2000008c

08001108 <printMatrix>:
void printMatrix(void){
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
#if MATRIX_LCD == 1
	// Connect to the LCD screen and update that

#elif MATRIX_LCD == 0
	printf("Matrix Representation:\n");
 800110e:	482a      	ldr	r0, [pc, #168]	@ (80011b8 <printMatrix+0xb0>)
 8001110:	f003 fee2 	bl	8004ed8 <puts>

	for (int i = ROWS; i > -1; i--) {
 8001114:	230c      	movs	r3, #12
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	e020      	b.n	800115c <printMatrix+0x54>
		printf("%3d|", i);
 800111a:	68f9      	ldr	r1, [r7, #12]
 800111c:	4827      	ldr	r0, [pc, #156]	@ (80011bc <printMatrix+0xb4>)
 800111e:	f003 fe6b 	bl	8004df8 <iprintf>
		for (int j = 0; j < COLS; j++) {
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	e010      	b.n	800114a <printMatrix+0x42>
			printf("%5d", dummyTable[i][j]);
 8001128:	4925      	ldr	r1, [pc, #148]	@ (80011c0 <printMatrix+0xb8>)
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	4613      	mov	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	18ca      	adds	r2, r1, r3
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	4413      	add	r3, r2
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	4619      	mov	r1, r3
 800113e:	4821      	ldr	r0, [pc, #132]	@ (80011c4 <printMatrix+0xbc>)
 8001140:	f003 fe5a 	bl	8004df8 <iprintf>
		for (int j = 0; j < COLS; j++) {
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	3301      	adds	r3, #1
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	2b08      	cmp	r3, #8
 800114e:	ddeb      	ble.n	8001128 <printMatrix+0x20>
		}
		printf("\n");
 8001150:	200a      	movs	r0, #10
 8001152:	f003 fe63 	bl	8004e1c <putchar>
	for (int i = ROWS; i > -1; i--) {
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	3b01      	subs	r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	2b00      	cmp	r3, #0
 8001160:	dadb      	bge.n	800111a <printMatrix+0x12>
	}

	printf("   +");
 8001162:	4819      	ldr	r0, [pc, #100]	@ (80011c8 <printMatrix+0xc0>)
 8001164:	f003 fe48 	bl	8004df8 <iprintf>
	for (int j = 0; j < COLS; j++) {
 8001168:	2300      	movs	r3, #0
 800116a:	607b      	str	r3, [r7, #4]
 800116c:	e005      	b.n	800117a <printMatrix+0x72>
		printf("-----");
 800116e:	4817      	ldr	r0, [pc, #92]	@ (80011cc <printMatrix+0xc4>)
 8001170:	f003 fe42 	bl	8004df8 <iprintf>
	for (int j = 0; j < COLS; j++) {
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3301      	adds	r3, #1
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2b08      	cmp	r3, #8
 800117e:	ddf6      	ble.n	800116e <printMatrix+0x66>
	}
	printf("\n");
 8001180:	200a      	movs	r0, #10
 8001182:	f003 fe4b 	bl	8004e1c <putchar>

	printf("%5s", " ");
 8001186:	4912      	ldr	r1, [pc, #72]	@ (80011d0 <printMatrix+0xc8>)
 8001188:	4812      	ldr	r0, [pc, #72]	@ (80011d4 <printMatrix+0xcc>)
 800118a:	f003 fe35 	bl	8004df8 <iprintf>
	for (int i = 0; i < COLS; i++) {
 800118e:	2300      	movs	r3, #0
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	e006      	b.n	80011a2 <printMatrix+0x9a>
		printf("%5d", i);
 8001194:	6839      	ldr	r1, [r7, #0]
 8001196:	480b      	ldr	r0, [pc, #44]	@ (80011c4 <printMatrix+0xbc>)
 8001198:	f003 fe2e 	bl	8004df8 <iprintf>
	for (int i = 0; i < COLS; i++) {
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	3301      	adds	r3, #1
 80011a0:	603b      	str	r3, [r7, #0]
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	ddf5      	ble.n	8001194 <printMatrix+0x8c>
	}
	printf("\n");
 80011a8:	200a      	movs	r0, #10
 80011aa:	f003 fe37 	bl	8004e1c <putchar>

#endif
}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	08005c70 	.word	0x08005c70
 80011bc:	08005c88 	.word	0x08005c88
 80011c0:	20000098 	.word	0x20000098
 80011c4:	08005c90 	.word	0x08005c90
 80011c8:	08005c94 	.word	0x08005c94
 80011cc:	08005c9c 	.word	0x08005c9c
 80011d0:	08005ca4 	.word	0x08005ca4
 80011d4:	08005ca8 	.word	0x08005ca8

080011d8 <Matrix_clear>:

void Matrix_clear(void) {
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
	dummyTable[object.originbit.y][object.originbit.x] = 0;
 80011dc:	4b20      	ldr	r3, [pc, #128]	@ (8001260 <Matrix_clear+0x88>)
 80011de:	78db      	ldrb	r3, [r3, #3]
 80011e0:	4619      	mov	r1, r3
 80011e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <Matrix_clear+0x88>)
 80011e4:	789b      	ldrb	r3, [r3, #2]
 80011e6:	4618      	mov	r0, r3
 80011e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001264 <Matrix_clear+0x8c>)
 80011ea:	460b      	mov	r3, r1
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	440b      	add	r3, r1
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	4413      	add	r3, r2
 80011f4:	4403      	add	r3, r0
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_0.y][object.suboriginbit_0.x] = 0;
 80011fa:	4b19      	ldr	r3, [pc, #100]	@ (8001260 <Matrix_clear+0x88>)
 80011fc:	795b      	ldrb	r3, [r3, #5]
 80011fe:	4619      	mov	r1, r3
 8001200:	4b17      	ldr	r3, [pc, #92]	@ (8001260 <Matrix_clear+0x88>)
 8001202:	791b      	ldrb	r3, [r3, #4]
 8001204:	4618      	mov	r0, r3
 8001206:	4a17      	ldr	r2, [pc, #92]	@ (8001264 <Matrix_clear+0x8c>)
 8001208:	460b      	mov	r3, r1
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	440b      	add	r3, r1
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	4413      	add	r3, r2
 8001212:	4403      	add	r3, r0
 8001214:	2200      	movs	r2, #0
 8001216:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_1.y][object.suboriginbit_1.x] = 0;
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <Matrix_clear+0x88>)
 800121a:	79db      	ldrb	r3, [r3, #7]
 800121c:	4619      	mov	r1, r3
 800121e:	4b10      	ldr	r3, [pc, #64]	@ (8001260 <Matrix_clear+0x88>)
 8001220:	799b      	ldrb	r3, [r3, #6]
 8001222:	4618      	mov	r0, r3
 8001224:	4a0f      	ldr	r2, [pc, #60]	@ (8001264 <Matrix_clear+0x8c>)
 8001226:	460b      	mov	r3, r1
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	005b      	lsls	r3, r3, #1
 800122e:	4413      	add	r3, r2
 8001230:	4403      	add	r3, r0
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_2.y][object.suboriginbit_2.x] = 0;
 8001236:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <Matrix_clear+0x88>)
 8001238:	7a5b      	ldrb	r3, [r3, #9]
 800123a:	4619      	mov	r1, r3
 800123c:	4b08      	ldr	r3, [pc, #32]	@ (8001260 <Matrix_clear+0x88>)
 800123e:	7a1b      	ldrb	r3, [r3, #8]
 8001240:	4618      	mov	r0, r3
 8001242:	4a08      	ldr	r2, [pc, #32]	@ (8001264 <Matrix_clear+0x8c>)
 8001244:	460b      	mov	r3, r1
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	440b      	add	r3, r1
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4413      	add	r3, r2
 800124e:	4403      	add	r3, r0
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	2000008c 	.word	0x2000008c
 8001264:	20000098 	.word	0x20000098

08001268 <Matrix_update>:
void Matrix_update(void){
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
	dummyTable[object.originbit.y][object.originbit.x] = 1;
 800126c:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <Matrix_update+0x88>)
 800126e:	78db      	ldrb	r3, [r3, #3]
 8001270:	4619      	mov	r1, r3
 8001272:	4b1f      	ldr	r3, [pc, #124]	@ (80012f0 <Matrix_update+0x88>)
 8001274:	789b      	ldrb	r3, [r3, #2]
 8001276:	4618      	mov	r0, r3
 8001278:	4a1e      	ldr	r2, [pc, #120]	@ (80012f4 <Matrix_update+0x8c>)
 800127a:	460b      	mov	r3, r1
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	440b      	add	r3, r1
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	4413      	add	r3, r2
 8001284:	4403      	add	r3, r0
 8001286:	2201      	movs	r2, #1
 8001288:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_0.y][object.suboriginbit_0.x] = 1;
 800128a:	4b19      	ldr	r3, [pc, #100]	@ (80012f0 <Matrix_update+0x88>)
 800128c:	795b      	ldrb	r3, [r3, #5]
 800128e:	4619      	mov	r1, r3
 8001290:	4b17      	ldr	r3, [pc, #92]	@ (80012f0 <Matrix_update+0x88>)
 8001292:	791b      	ldrb	r3, [r3, #4]
 8001294:	4618      	mov	r0, r3
 8001296:	4a17      	ldr	r2, [pc, #92]	@ (80012f4 <Matrix_update+0x8c>)
 8001298:	460b      	mov	r3, r1
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	4403      	add	r3, r0
 80012a4:	2201      	movs	r2, #1
 80012a6:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_1.y][object.suboriginbit_1.x] = 1;
 80012a8:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <Matrix_update+0x88>)
 80012aa:	79db      	ldrb	r3, [r3, #7]
 80012ac:	4619      	mov	r1, r3
 80012ae:	4b10      	ldr	r3, [pc, #64]	@ (80012f0 <Matrix_update+0x88>)
 80012b0:	799b      	ldrb	r3, [r3, #6]
 80012b2:	4618      	mov	r0, r3
 80012b4:	4a0f      	ldr	r2, [pc, #60]	@ (80012f4 <Matrix_update+0x8c>)
 80012b6:	460b      	mov	r3, r1
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	440b      	add	r3, r1
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	4403      	add	r3, r0
 80012c2:	2201      	movs	r2, #1
 80012c4:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_2.y][object.suboriginbit_2.x] = 1;
 80012c6:	4b0a      	ldr	r3, [pc, #40]	@ (80012f0 <Matrix_update+0x88>)
 80012c8:	7a5b      	ldrb	r3, [r3, #9]
 80012ca:	4619      	mov	r1, r3
 80012cc:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <Matrix_update+0x88>)
 80012ce:	7a1b      	ldrb	r3, [r3, #8]
 80012d0:	4618      	mov	r0, r3
 80012d2:	4a08      	ldr	r2, [pc, #32]	@ (80012f4 <Matrix_update+0x8c>)
 80012d4:	460b      	mov	r3, r1
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	4413      	add	r3, r2
 80012de:	4403      	add	r3, r0
 80012e0:	2201      	movs	r2, #1
 80012e2:	701a      	strb	r2, [r3, #0]
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	2000008c 	.word	0x2000008c
 80012f4:	20000098 	.word	0x20000098

080012f8 <getScheduledEvents>:
 */
#include "Scheduler.h"

static uint32_t scheduledEvents;

uint32_t getScheduledEvents(){
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
	uint32_t returnVal = scheduledEvents;
 80012fe:	4b05      	ldr	r3, [pc, #20]	@ (8001314 <getScheduledEvents+0x1c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	607b      	str	r3, [r7, #4]
	return returnVal;
 8001304:	687b      	ldr	r3, [r7, #4]
}
 8001306:	4618      	mov	r0, r3
 8001308:	370c      	adds	r7, #12
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	20000120 	.word	0x20000120

08001318 <addScheduledEvent>:

void addScheduledEvent(uint32_t event){
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	scheduledEvents |= (event);
 8001320:	4b05      	ldr	r3, [pc, #20]	@ (8001338 <addScheduledEvent+0x20>)
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4313      	orrs	r3, r2
 8001328:	4a03      	ldr	r2, [pc, #12]	@ (8001338 <addScheduledEvent+0x20>)
 800132a:	6013      	str	r3, [r2, #0]
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	20000120 	.word	0x20000120

0800133c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 8001342:	f003 fc19 	bl	8004b78 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001346:	f000 fee5 	bl	8002114 <HAL_Init>
  /* USER CODE BEGIN Init */
  //applicationInit();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800134a:	f000 f817 	bl	800137c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800134e:	f000 f9fd 	bl	800174c <MX_GPIO_Init>
  MX_LTDC_Init();
 8001352:	f000 f8bf 	bl	80014d4 <MX_LTDC_Init>
  MX_I2C3_Init();
 8001356:	f000 f87d 	bl	8001454 <MX_I2C3_Init>
  MX_RNG_Init();
 800135a:	f000 f96d 	bl	8001638 <MX_RNG_Init>
  MX_TIM2_Init();
 800135e:	f000 f9a7 	bl	80016b0 <MX_TIM2_Init>
  MX_SPI5_Init();
 8001362:	f000 f96f 	bl	8001644 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  applicationInit();
 8001366:	f7ff f913 	bl	8000590 <applicationInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 eventsToRun = getScheduledEvents();
 800136a:	f7ff ffc5 	bl	80012f8 <getScheduledEvents>
 800136e:	6078      	str	r0, [r7, #4]
	 if(eventsToRun && MATRIX_UPDATE_EVENT) {printMatrix();}
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f9      	beq.n	800136a <main+0x2e>
 8001376:	f7ff fec7 	bl	8001108 <printMatrix>
	 eventsToRun = getScheduledEvents();
 800137a:	e7f6      	b.n	800136a <main+0x2e>

0800137c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b094      	sub	sp, #80	@ 0x50
 8001380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001382:	f107 0320 	add.w	r3, r7, #32
 8001386:	2230      	movs	r2, #48	@ 0x30
 8001388:	2100      	movs	r1, #0
 800138a:	4618      	mov	r0, r3
 800138c:	f003 fdac 	bl	8004ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001390:	f107 030c 	add.w	r3, r7, #12
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	4b29      	ldr	r3, [pc, #164]	@ (800144c <SystemClock_Config+0xd0>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a8:	4a28      	ldr	r2, [pc, #160]	@ (800144c <SystemClock_Config+0xd0>)
 80013aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80013b0:	4b26      	ldr	r3, [pc, #152]	@ (800144c <SystemClock_Config+0xd0>)
 80013b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	4b23      	ldr	r3, [pc, #140]	@ (8001450 <SystemClock_Config+0xd4>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80013c8:	4a21      	ldr	r2, [pc, #132]	@ (8001450 <SystemClock_Config+0xd4>)
 80013ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001450 <SystemClock_Config+0xd4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013d8:	607b      	str	r3, [r7, #4]
 80013da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013dc:	2302      	movs	r3, #2
 80013de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013e0:	2301      	movs	r3, #1
 80013e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013e4:	2310      	movs	r3, #16
 80013e6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e8:	2302      	movs	r3, #2
 80013ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013ec:	2300      	movs	r3, #0
 80013ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013f0:	2308      	movs	r3, #8
 80013f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80013f4:	2332      	movs	r3, #50	@ 0x32
 80013f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013f8:	2304      	movs	r3, #4
 80013fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013fc:	2307      	movs	r3, #7
 80013fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001400:	f107 0320 	add.w	r3, r7, #32
 8001404:	4618      	mov	r0, r3
 8001406:	f001 fe4d 	bl	80030a4 <HAL_RCC_OscConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001410:	f000 fb60 	bl	8001ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001414:	230f      	movs	r3, #15
 8001416:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001418:	2302      	movs	r3, #2
 800141a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001420:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001424:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001426:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800142a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f002 f8ae 	bl	8003594 <HAL_RCC_ClockConfig>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800143e:	f000 fb49 	bl	8001ad4 <Error_Handler>
  }
}
 8001442:	bf00      	nop
 8001444:	3750      	adds	r7, #80	@ 0x50
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800
 8001450:	40007000 	.word	0x40007000

08001454 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001458:	4b1b      	ldr	r3, [pc, #108]	@ (80014c8 <MX_I2C3_Init+0x74>)
 800145a:	4a1c      	ldr	r2, [pc, #112]	@ (80014cc <MX_I2C3_Init+0x78>)
 800145c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800145e:	4b1a      	ldr	r3, [pc, #104]	@ (80014c8 <MX_I2C3_Init+0x74>)
 8001460:	4a1b      	ldr	r2, [pc, #108]	@ (80014d0 <MX_I2C3_Init+0x7c>)
 8001462:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001464:	4b18      	ldr	r3, [pc, #96]	@ (80014c8 <MX_I2C3_Init+0x74>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800146a:	4b17      	ldr	r3, [pc, #92]	@ (80014c8 <MX_I2C3_Init+0x74>)
 800146c:	2200      	movs	r2, #0
 800146e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001470:	4b15      	ldr	r3, [pc, #84]	@ (80014c8 <MX_I2C3_Init+0x74>)
 8001472:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001476:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001478:	4b13      	ldr	r3, [pc, #76]	@ (80014c8 <MX_I2C3_Init+0x74>)
 800147a:	2200      	movs	r2, #0
 800147c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800147e:	4b12      	ldr	r3, [pc, #72]	@ (80014c8 <MX_I2C3_Init+0x74>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001484:	4b10      	ldr	r3, [pc, #64]	@ (80014c8 <MX_I2C3_Init+0x74>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800148a:	4b0f      	ldr	r3, [pc, #60]	@ (80014c8 <MX_I2C3_Init+0x74>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001490:	480d      	ldr	r0, [pc, #52]	@ (80014c8 <MX_I2C3_Init+0x74>)
 8001492:	f001 f9a1 	bl	80027d8 <HAL_I2C_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800149c:	f000 fb1a 	bl	8001ad4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014a0:	2100      	movs	r1, #0
 80014a2:	4809      	ldr	r0, [pc, #36]	@ (80014c8 <MX_I2C3_Init+0x74>)
 80014a4:	f001 fadc 	bl	8002a60 <HAL_I2CEx_ConfigAnalogFilter>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80014ae:	f000 fb11 	bl	8001ad4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80014b2:	2100      	movs	r1, #0
 80014b4:	4804      	ldr	r0, [pc, #16]	@ (80014c8 <MX_I2C3_Init+0x74>)
 80014b6:	f001 fb0f 	bl	8002ad8 <HAL_I2CEx_ConfigDigitalFilter>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80014c0:	f000 fb08 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000124 	.word	0x20000124
 80014cc:	40005c00 	.word	0x40005c00
 80014d0:	000186a0 	.word	0x000186a0

080014d4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b09a      	sub	sp, #104	@ 0x68
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80014da:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014de:	2234      	movs	r2, #52	@ 0x34
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f003 fd00 	bl	8004ee8 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80014e8:	463b      	mov	r3, r7
 80014ea:	2234      	movs	r2, #52	@ 0x34
 80014ec:	2100      	movs	r1, #0
 80014ee:	4618      	mov	r0, r3
 80014f0:	f003 fcfa 	bl	8004ee8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80014f4:	4b4e      	ldr	r3, [pc, #312]	@ (8001630 <MX_LTDC_Init+0x15c>)
 80014f6:	4a4f      	ldr	r2, [pc, #316]	@ (8001634 <MX_LTDC_Init+0x160>)
 80014f8:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80014fa:	4b4d      	ldr	r3, [pc, #308]	@ (8001630 <MX_LTDC_Init+0x15c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001500:	4b4b      	ldr	r3, [pc, #300]	@ (8001630 <MX_LTDC_Init+0x15c>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001506:	4b4a      	ldr	r3, [pc, #296]	@ (8001630 <MX_LTDC_Init+0x15c>)
 8001508:	2200      	movs	r2, #0
 800150a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800150c:	4b48      	ldr	r3, [pc, #288]	@ (8001630 <MX_LTDC_Init+0x15c>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001512:	4b47      	ldr	r3, [pc, #284]	@ (8001630 <MX_LTDC_Init+0x15c>)
 8001514:	2207      	movs	r2, #7
 8001516:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8001518:	4b45      	ldr	r3, [pc, #276]	@ (8001630 <MX_LTDC_Init+0x15c>)
 800151a:	2203      	movs	r2, #3
 800151c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 800151e:	4b44      	ldr	r3, [pc, #272]	@ (8001630 <MX_LTDC_Init+0x15c>)
 8001520:	220e      	movs	r2, #14
 8001522:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001524:	4b42      	ldr	r3, [pc, #264]	@ (8001630 <MX_LTDC_Init+0x15c>)
 8001526:	2205      	movs	r2, #5
 8001528:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800152a:	4b41      	ldr	r3, [pc, #260]	@ (8001630 <MX_LTDC_Init+0x15c>)
 800152c:	f240 228e 	movw	r2, #654	@ 0x28e
 8001530:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001532:	4b3f      	ldr	r3, [pc, #252]	@ (8001630 <MX_LTDC_Init+0x15c>)
 8001534:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001538:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 800153a:	4b3d      	ldr	r3, [pc, #244]	@ (8001630 <MX_LTDC_Init+0x15c>)
 800153c:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001540:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001542:	4b3b      	ldr	r3, [pc, #236]	@ (8001630 <MX_LTDC_Init+0x15c>)
 8001544:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001548:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800154a:	4b39      	ldr	r3, [pc, #228]	@ (8001630 <MX_LTDC_Init+0x15c>)
 800154c:	2200      	movs	r2, #0
 800154e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001552:	4b37      	ldr	r3, [pc, #220]	@ (8001630 <MX_LTDC_Init+0x15c>)
 8001554:	2200      	movs	r2, #0
 8001556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800155a:	4b35      	ldr	r3, [pc, #212]	@ (8001630 <MX_LTDC_Init+0x15c>)
 800155c:	2200      	movs	r2, #0
 800155e:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001562:	4833      	ldr	r0, [pc, #204]	@ (8001630 <MX_LTDC_Init+0x15c>)
 8001564:	f001 faf8 	bl	8002b58 <HAL_LTDC_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800156e:	f000 fab1 	bl	8001ad4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 800157a:	2300      	movs	r3, #0
 800157c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001582:	2300      	movs	r3, #0
 8001584:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001586:	2300      	movs	r3, #0
 8001588:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800158a:	2300      	movs	r3, #0
 800158c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800158e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001592:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001594:	2305      	movs	r3, #5
 8001596:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80015b6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80015ba:	2200      	movs	r2, #0
 80015bc:	4619      	mov	r1, r3
 80015be:	481c      	ldr	r0, [pc, #112]	@ (8001630 <MX_LTDC_Init+0x15c>)
 80015c0:	f001 fb9a 	bl	8002cf8 <HAL_LTDC_ConfigLayer>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80015ca:	f000 fa83 	bl	8001ad4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80015ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ee:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80015f0:	2305      	movs	r3, #5
 80015f2:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 800160c:	2300      	movs	r3, #0
 800160e:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001612:	463b      	mov	r3, r7
 8001614:	2201      	movs	r2, #1
 8001616:	4619      	mov	r1, r3
 8001618:	4805      	ldr	r0, [pc, #20]	@ (8001630 <MX_LTDC_Init+0x15c>)
 800161a:	f001 fb6d 	bl	8002cf8 <HAL_LTDC_ConfigLayer>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001624:	f000 fa56 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001628:	bf00      	nop
 800162a:	3768      	adds	r7, #104	@ 0x68
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20000178 	.word	0x20000178
 8001634:	40016800 	.word	0x40016800

08001638 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */

  /* USER CODE BEGIN RNG_Init 2 */
   RND_NUM();
 800163c:	f7fe ffb2 	bl	80005a4 <RND_NUM>

  /* USER CODE END RNG_Init 2 */

}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}

08001644 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001648:	4b17      	ldr	r3, [pc, #92]	@ (80016a8 <MX_SPI5_Init+0x64>)
 800164a:	4a18      	ldr	r2, [pc, #96]	@ (80016ac <MX_SPI5_Init+0x68>)
 800164c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800164e:	4b16      	ldr	r3, [pc, #88]	@ (80016a8 <MX_SPI5_Init+0x64>)
 8001650:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001654:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001656:	4b14      	ldr	r3, [pc, #80]	@ (80016a8 <MX_SPI5_Init+0x64>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800165c:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <MX_SPI5_Init+0x64>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001662:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <MX_SPI5_Init+0x64>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001668:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <MX_SPI5_Init+0x64>)
 800166a:	2200      	movs	r2, #0
 800166c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800166e:	4b0e      	ldr	r3, [pc, #56]	@ (80016a8 <MX_SPI5_Init+0x64>)
 8001670:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001674:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001676:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <MX_SPI5_Init+0x64>)
 8001678:	2200      	movs	r2, #0
 800167a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800167c:	4b0a      	ldr	r3, [pc, #40]	@ (80016a8 <MX_SPI5_Init+0x64>)
 800167e:	2200      	movs	r2, #0
 8001680:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001682:	4b09      	ldr	r3, [pc, #36]	@ (80016a8 <MX_SPI5_Init+0x64>)
 8001684:	2200      	movs	r2, #0
 8001686:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001688:	4b07      	ldr	r3, [pc, #28]	@ (80016a8 <MX_SPI5_Init+0x64>)
 800168a:	2200      	movs	r2, #0
 800168c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800168e:	4b06      	ldr	r3, [pc, #24]	@ (80016a8 <MX_SPI5_Init+0x64>)
 8001690:	220a      	movs	r2, #10
 8001692:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001694:	4804      	ldr	r0, [pc, #16]	@ (80016a8 <MX_SPI5_Init+0x64>)
 8001696:	f002 fbc9 	bl	8003e2c <HAL_SPI_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80016a0:	f000 fa18 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80016a4:	bf00      	nop
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000220 	.word	0x20000220
 80016ac:	40015000 	.word	0x40015000

080016b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b6:	f107 0308 	add.w	r3, r7, #8
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	605a      	str	r2, [r3, #4]
 80016c0:	609a      	str	r2, [r3, #8]
 80016c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c4:	463b      	mov	r3, r7
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016cc:	4b1d      	ldr	r3, [pc, #116]	@ (8001744 <MX_TIM2_Init+0x94>)
 80016ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80016d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001744 <MX_TIM2_Init+0x94>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80016da:	4b1a      	ldr	r3, [pc, #104]	@ (8001744 <MX_TIM2_Init+0x94>)
 80016dc:	2210      	movs	r2, #16
 80016de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 15999999;
 80016e0:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <MX_TIM2_Init+0x94>)
 80016e2:	4a19      	ldr	r2, [pc, #100]	@ (8001748 <MX_TIM2_Init+0x98>)
 80016e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e6:	4b17      	ldr	r3, [pc, #92]	@ (8001744 <MX_TIM2_Init+0x94>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ec:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <MX_TIM2_Init+0x94>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016f2:	4814      	ldr	r0, [pc, #80]	@ (8001744 <MX_TIM2_Init+0x94>)
 80016f4:	f002 fc23 	bl	8003f3e <HAL_TIM_Base_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80016fe:	f000 f9e9 	bl	8001ad4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001702:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001706:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001708:	f107 0308 	add.w	r3, r7, #8
 800170c:	4619      	mov	r1, r3
 800170e:	480d      	ldr	r0, [pc, #52]	@ (8001744 <MX_TIM2_Init+0x94>)
 8001710:	f002 fd54 	bl	80041bc <HAL_TIM_ConfigClockSource>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800171a:	f000 f9db 	bl	8001ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800171e:	2300      	movs	r3, #0
 8001720:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001726:	463b      	mov	r3, r7
 8001728:	4619      	mov	r1, r3
 800172a:	4806      	ldr	r0, [pc, #24]	@ (8001744 <MX_TIM2_Init+0x94>)
 800172c:	f002 ff7c 	bl	8004628 <HAL_TIMEx_MasterConfigSynchronization>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001736:	f000 f9cd 	bl	8001ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000278 	.word	0x20000278
 8001748:	00f423ff 	.word	0x00f423ff

0800174c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08e      	sub	sp, #56	@ 0x38
 8001750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001752:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
 8001760:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	623b      	str	r3, [r7, #32]
 8001766:	4bb3      	ldr	r3, [pc, #716]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	4ab2      	ldr	r2, [pc, #712]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	6313      	str	r3, [r2, #48]	@ 0x30
 8001772:	4bb0      	ldr	r3, [pc, #704]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	623b      	str	r3, [r7, #32]
 800177c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
 8001782:	4bac      	ldr	r3, [pc, #688]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001786:	4aab      	ldr	r2, [pc, #684]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 8001788:	f043 0320 	orr.w	r3, r3, #32
 800178c:	6313      	str	r3, [r2, #48]	@ 0x30
 800178e:	4ba9      	ldr	r3, [pc, #676]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	f003 0320 	and.w	r3, r3, #32
 8001796:	61fb      	str	r3, [r7, #28]
 8001798:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
 800179e:	4ba5      	ldr	r3, [pc, #660]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	4aa4      	ldr	r2, [pc, #656]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 80017a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017aa:	4ba2      	ldr	r3, [pc, #648]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017b2:	61bb      	str	r3, [r7, #24]
 80017b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	617b      	str	r3, [r7, #20]
 80017ba:	4b9e      	ldr	r3, [pc, #632]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	4a9d      	ldr	r2, [pc, #628]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c6:	4b9b      	ldr	r3, [pc, #620]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	613b      	str	r3, [r7, #16]
 80017d6:	4b97      	ldr	r3, [pc, #604]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	4a96      	ldr	r2, [pc, #600]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 80017dc:	f043 0302 	orr.w	r3, r3, #2
 80017e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e2:	4b94      	ldr	r3, [pc, #592]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	4b90      	ldr	r3, [pc, #576]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	4a8f      	ldr	r2, [pc, #572]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 80017f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fe:	4b8d      	ldr	r3, [pc, #564]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	4b89      	ldr	r3, [pc, #548]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	4a88      	ldr	r2, [pc, #544]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 8001814:	f043 0310 	orr.w	r3, r3, #16
 8001818:	6313      	str	r3, [r2, #48]	@ 0x30
 800181a:	4b86      	ldr	r3, [pc, #536]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	f003 0310 	and.w	r3, r3, #16
 8001822:	60bb      	str	r3, [r7, #8]
 8001824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	4b82      	ldr	r3, [pc, #520]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a81      	ldr	r2, [pc, #516]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 8001830:	f043 0308 	orr.w	r3, r3, #8
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b7f      	ldr	r3, [pc, #508]	@ (8001a34 <MX_GPIO_Init+0x2e8>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	607b      	str	r3, [r7, #4]
 8001840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001842:	2200      	movs	r2, #0
 8001844:	2116      	movs	r1, #22
 8001846:	487c      	ldr	r0, [pc, #496]	@ (8001a38 <MX_GPIO_Init+0x2ec>)
 8001848:	f000 ff94 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800184c:	2200      	movs	r2, #0
 800184e:	2180      	movs	r1, #128	@ 0x80
 8001850:	487a      	ldr	r0, [pc, #488]	@ (8001a3c <MX_GPIO_Init+0x2f0>)
 8001852:	f000 ff8f 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001856:	2200      	movs	r2, #0
 8001858:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800185c:	4878      	ldr	r0, [pc, #480]	@ (8001a40 <MX_GPIO_Init+0x2f4>)
 800185e:	f000 ff89 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001862:	2200      	movs	r2, #0
 8001864:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001868:	4876      	ldr	r0, [pc, #472]	@ (8001a44 <MX_GPIO_Init+0x2f8>)
 800186a:	f000 ff83 	bl	8002774 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800186e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800187c:	2303      	movs	r3, #3
 800187e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001880:	230c      	movs	r3, #12
 8001882:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001884:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001888:	4619      	mov	r1, r3
 800188a:	486f      	ldr	r0, [pc, #444]	@ (8001a48 <MX_GPIO_Init+0x2fc>)
 800188c:	f000 fdc6 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001890:	2301      	movs	r3, #1
 8001892:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189c:	2303      	movs	r3, #3
 800189e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018a0:	230c      	movs	r3, #12
 80018a2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018a8:	4619      	mov	r1, r3
 80018aa:	4863      	ldr	r0, [pc, #396]	@ (8001a38 <MX_GPIO_Init+0x2ec>)
 80018ac:	f000 fdb6 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80018b0:	2316      	movs	r3, #22
 80018b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b4:	2301      	movs	r3, #1
 80018b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018c4:	4619      	mov	r1, r3
 80018c6:	485c      	ldr	r0, [pc, #368]	@ (8001a38 <MX_GPIO_Init+0x2ec>)
 80018c8:	f000 fda8 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018cc:	2301      	movs	r3, #1
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018d0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018de:	4619      	mov	r1, r3
 80018e0:	4856      	ldr	r0, [pc, #344]	@ (8001a3c <MX_GPIO_Init+0x2f0>)
 80018e2:	f000 fd9b 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80018e6:	f248 0306 	movw	r3, #32774	@ 0x8006
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018ec:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80018f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018fa:	4619      	mov	r1, r3
 80018fc:	484f      	ldr	r0, [pc, #316]	@ (8001a3c <MX_GPIO_Init+0x2f0>)
 80018fe:	f000 fd8d 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001902:	2380      	movs	r3, #128	@ 0x80
 8001904:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001906:	2301      	movs	r3, #1
 8001908:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001912:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001916:	4619      	mov	r1, r3
 8001918:	4848      	ldr	r0, [pc, #288]	@ (8001a3c <MX_GPIO_Init+0x2f0>)
 800191a:	f000 fd7f 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 800191e:	2320      	movs	r3, #32
 8001920:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001922:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001926:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 800192c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001930:	4619      	mov	r1, r3
 8001932:	4841      	ldr	r0, [pc, #260]	@ (8001a38 <MX_GPIO_Init+0x2ec>)
 8001934:	f000 fd72 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001938:	2304      	movs	r3, #4
 800193a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800193c:	2300      	movs	r3, #0
 800193e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001940:	2300      	movs	r3, #0
 8001942:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001944:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001948:	4619      	mov	r1, r3
 800194a:	4840      	ldr	r0, [pc, #256]	@ (8001a4c <MX_GPIO_Init+0x300>)
 800194c:	f000 fd66 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001950:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001954:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195e:	2303      	movs	r3, #3
 8001960:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001962:	230c      	movs	r3, #12
 8001964:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001966:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800196a:	4619      	mov	r1, r3
 800196c:	4835      	ldr	r0, [pc, #212]	@ (8001a44 <MX_GPIO_Init+0x2f8>)
 800196e:	f000 fd55 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001972:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001976:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001984:	230c      	movs	r3, #12
 8001986:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001988:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800198c:	4619      	mov	r1, r3
 800198e:	4830      	ldr	r0, [pc, #192]	@ (8001a50 <MX_GPIO_Init+0x304>)
 8001990:	f000 fd44 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001994:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001998:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80019a6:	230c      	movs	r3, #12
 80019a8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ae:	4619      	mov	r1, r3
 80019b0:	4826      	ldr	r0, [pc, #152]	@ (8001a4c <MX_GPIO_Init+0x300>)
 80019b2:	f000 fd33 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80019b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019bc:	2300      	movs	r3, #0
 80019be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80019c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019c8:	4619      	mov	r1, r3
 80019ca:	4820      	ldr	r0, [pc, #128]	@ (8001a4c <MX_GPIO_Init+0x300>)
 80019cc:	f000 fd26 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80019d0:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80019d4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019de:	2303      	movs	r3, #3
 80019e0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019e2:	230c      	movs	r3, #12
 80019e4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ea:	4619      	mov	r1, r3
 80019ec:	4814      	ldr	r0, [pc, #80]	@ (8001a40 <MX_GPIO_Init+0x2f4>)
 80019ee:	f000 fd15 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80019f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001a00:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a04:	4619      	mov	r1, r3
 8001a06:	480e      	ldr	r0, [pc, #56]	@ (8001a40 <MX_GPIO_Init+0x2f4>)
 8001a08:	f000 fd08 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001a0c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a12:	2301      	movs	r3, #1
 8001a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a22:	4619      	mov	r1, r3
 8001a24:	4806      	ldr	r0, [pc, #24]	@ (8001a40 <MX_GPIO_Init+0x2f4>)
 8001a26:	f000 fcf9 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001a2a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a30:	e010      	b.n	8001a54 <MX_GPIO_Init+0x308>
 8001a32:	bf00      	nop
 8001a34:	40023800 	.word	0x40023800
 8001a38:	40020800 	.word	0x40020800
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	40020c00 	.word	0x40020c00
 8001a44:	40021800 	.word	0x40021800
 8001a48:	40021400 	.word	0x40021400
 8001a4c:	40020400 	.word	0x40020400
 8001a50:	40021000 	.word	0x40021000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a60:	2307      	movs	r3, #7
 8001a62:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4817      	ldr	r0, [pc, #92]	@ (8001ac8 <MX_GPIO_Init+0x37c>)
 8001a6c:	f000 fcd6 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001a70:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a76:	2301      	movs	r3, #1
 8001a78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a86:	4619      	mov	r1, r3
 8001a88:	4810      	ldr	r0, [pc, #64]	@ (8001acc <MX_GPIO_Init+0x380>)
 8001a8a:	f000 fcc7 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001a8e:	2360      	movs	r3, #96	@ 0x60
 8001a90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a9e:	230c      	movs	r3, #12
 8001aa0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4809      	ldr	r0, [pc, #36]	@ (8001ad0 <MX_GPIO_Init+0x384>)
 8001aaa:	f000 fcb7 	bl	800241c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	2006      	movs	r0, #6
 8001ab4:	f000 fc7b 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001ab8:	2006      	movs	r0, #6
 8001aba:	f000 fc94 	bl	80023e6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001abe:	bf00      	nop
 8001ac0:	3738      	adds	r7, #56	@ 0x38
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40020000 	.word	0x40020000
 8001acc:	40021800 	.word	0x40021800
 8001ad0:	40020400 	.word	0x40020400

08001ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ad8:	b672      	cpsid	i
}
 8001ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001adc:	bf00      	nop
 8001ade:	e7fd      	b.n	8001adc <Error_Handler+0x8>

08001ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	607b      	str	r3, [r7, #4]
 8001aea:	4b10      	ldr	r3, [pc, #64]	@ (8001b2c <HAL_MspInit+0x4c>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	4a0f      	ldr	r2, [pc, #60]	@ (8001b2c <HAL_MspInit+0x4c>)
 8001af0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001af6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b2c <HAL_MspInit+0x4c>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	603b      	str	r3, [r7, #0]
 8001b06:	4b09      	ldr	r3, [pc, #36]	@ (8001b2c <HAL_MspInit+0x4c>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b0a:	4a08      	ldr	r2, [pc, #32]	@ (8001b2c <HAL_MspInit+0x4c>)
 8001b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b10:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b12:	4b06      	ldr	r3, [pc, #24]	@ (8001b2c <HAL_MspInit+0x4c>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b1a:	603b      	str	r3, [r7, #0]
 8001b1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b1e:	2007      	movs	r0, #7
 8001b20:	f000 fc3a 	bl	8002398 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40023800 	.word	0x40023800

08001b30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	@ 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a29      	ldr	r2, [pc, #164]	@ (8001bf4 <HAL_I2C_MspInit+0xc4>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d14b      	bne.n	8001bea <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	4b28      	ldr	r3, [pc, #160]	@ (8001bf8 <HAL_I2C_MspInit+0xc8>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	4a27      	ldr	r2, [pc, #156]	@ (8001bf8 <HAL_I2C_MspInit+0xc8>)
 8001b5c:	f043 0304 	orr.w	r3, r3, #4
 8001b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b62:	4b25      	ldr	r3, [pc, #148]	@ (8001bf8 <HAL_I2C_MspInit+0xc8>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b66:	f003 0304 	and.w	r3, r3, #4
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b21      	ldr	r3, [pc, #132]	@ (8001bf8 <HAL_I2C_MspInit+0xc8>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	4a20      	ldr	r2, [pc, #128]	@ (8001bf8 <HAL_I2C_MspInit+0xc8>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b7e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf8 <HAL_I2C_MspInit+0xc8>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001b8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b90:	2312      	movs	r3, #18
 8001b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b9c:	2304      	movs	r3, #4
 8001b9e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001ba0:	f107 0314 	add.w	r3, r7, #20
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4815      	ldr	r0, [pc, #84]	@ (8001bfc <HAL_I2C_MspInit+0xcc>)
 8001ba8:	f000 fc38 	bl	800241c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001bac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bb2:	2312      	movs	r3, #18
 8001bb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001bbe:	2304      	movs	r3, #4
 8001bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	480d      	ldr	r0, [pc, #52]	@ (8001c00 <HAL_I2C_MspInit+0xd0>)
 8001bca:	f000 fc27 	bl	800241c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	4b09      	ldr	r3, [pc, #36]	@ (8001bf8 <HAL_I2C_MspInit+0xc8>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd6:	4a08      	ldr	r2, [pc, #32]	@ (8001bf8 <HAL_I2C_MspInit+0xc8>)
 8001bd8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001bdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bde:	4b06      	ldr	r3, [pc, #24]	@ (8001bf8 <HAL_I2C_MspInit+0xc8>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001bea:	bf00      	nop
 8001bec:	3728      	adds	r7, #40	@ 0x28
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40005c00 	.word	0x40005c00
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	40020800 	.word	0x40020800
 8001c00:	40020000 	.word	0x40020000

08001c04 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b09a      	sub	sp, #104	@ 0x68
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	609a      	str	r2, [r3, #8]
 8001c18:	60da      	str	r2, [r3, #12]
 8001c1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c20:	2230      	movs	r2, #48	@ 0x30
 8001c22:	2100      	movs	r1, #0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f003 f95f 	bl	8004ee8 <memset>
  if(hltdc->Instance==LTDC)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a81      	ldr	r2, [pc, #516]	@ (8001e34 <HAL_LTDC_MspInit+0x230>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	f040 80fa 	bne.w	8001e2a <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001c36:	2308      	movs	r3, #8
 8001c38:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001c3a:	2332      	movs	r3, #50	@ 0x32
 8001c3c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001c42:	2300      	movs	r3, #0
 8001c44:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f001 feae 	bl	80039ac <HAL_RCCEx_PeriphCLKConfig>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001c56:	f7ff ff3d 	bl	8001ad4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
 8001c5e:	4b76      	ldr	r3, [pc, #472]	@ (8001e38 <HAL_LTDC_MspInit+0x234>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c62:	4a75      	ldr	r2, [pc, #468]	@ (8001e38 <HAL_LTDC_MspInit+0x234>)
 8001c64:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c6a:	4b73      	ldr	r3, [pc, #460]	@ (8001e38 <HAL_LTDC_MspInit+0x234>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c72:	623b      	str	r3, [r7, #32]
 8001c74:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	61fb      	str	r3, [r7, #28]
 8001c7a:	4b6f      	ldr	r3, [pc, #444]	@ (8001e38 <HAL_LTDC_MspInit+0x234>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	4a6e      	ldr	r2, [pc, #440]	@ (8001e38 <HAL_LTDC_MspInit+0x234>)
 8001c80:	f043 0320 	orr.w	r3, r3, #32
 8001c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c86:	4b6c      	ldr	r3, [pc, #432]	@ (8001e38 <HAL_LTDC_MspInit+0x234>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	f003 0320 	and.w	r3, r3, #32
 8001c8e:	61fb      	str	r3, [r7, #28]
 8001c90:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	61bb      	str	r3, [r7, #24]
 8001c96:	4b68      	ldr	r3, [pc, #416]	@ (8001e38 <HAL_LTDC_MspInit+0x234>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	4a67      	ldr	r2, [pc, #412]	@ (8001e38 <HAL_LTDC_MspInit+0x234>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca2:	4b65      	ldr	r3, [pc, #404]	@ (8001e38 <HAL_LTDC_MspInit+0x234>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	61bb      	str	r3, [r7, #24]
 8001cac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	4b61      	ldr	r3, [pc, #388]	@ (8001e38 <HAL_LTDC_MspInit+0x234>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	4a60      	ldr	r2, [pc, #384]	@ (8001e38 <HAL_LTDC_MspInit+0x234>)
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cbe:	4b5e      	ldr	r3, [pc, #376]	@ (8001e38 <HAL_LTDC_MspInit+0x234>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	4b5a      	ldr	r3, [pc, #360]	@ (8001e38 <HAL_LTDC_MspInit+0x234>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd2:	4a59      	ldr	r2, [pc, #356]	@ (8001e38 <HAL_LTDC_MspInit+0x234>)
 8001cd4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cda:	4b57      	ldr	r3, [pc, #348]	@ (8001e38 <HAL_LTDC_MspInit+0x234>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b53      	ldr	r3, [pc, #332]	@ (8001e38 <HAL_LTDC_MspInit+0x234>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cee:	4a52      	ldr	r2, [pc, #328]	@ (8001e38 <HAL_LTDC_MspInit+0x234>)
 8001cf0:	f043 0304 	orr.w	r3, r3, #4
 8001cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf6:	4b50      	ldr	r3, [pc, #320]	@ (8001e38 <HAL_LTDC_MspInit+0x234>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	4b4c      	ldr	r3, [pc, #304]	@ (8001e38 <HAL_LTDC_MspInit+0x234>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	4a4b      	ldr	r2, [pc, #300]	@ (8001e38 <HAL_LTDC_MspInit+0x234>)
 8001d0c:	f043 0308 	orr.w	r3, r3, #8
 8001d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d12:	4b49      	ldr	r3, [pc, #292]	@ (8001e38 <HAL_LTDC_MspInit+0x234>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001d1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d22:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	2302      	movs	r3, #2
 8001d26:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d30:	230e      	movs	r3, #14
 8001d32:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001d34:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4840      	ldr	r0, [pc, #256]	@ (8001e3c <HAL_LTDC_MspInit+0x238>)
 8001d3c:	f000 fb6e 	bl	800241c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001d40:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001d44:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d46:	2302      	movs	r3, #2
 8001d48:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d52:	230e      	movs	r3, #14
 8001d54:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d56:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4838      	ldr	r0, [pc, #224]	@ (8001e40 <HAL_LTDC_MspInit+0x23c>)
 8001d5e:	f000 fb5d 	bl	800241c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001d62:	2303      	movs	r3, #3
 8001d64:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d66:	2302      	movs	r3, #2
 8001d68:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001d72:	2309      	movs	r3, #9
 8001d74:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d76:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	4831      	ldr	r0, [pc, #196]	@ (8001e44 <HAL_LTDC_MspInit+0x240>)
 8001d7e:	f000 fb4d 	bl	800241c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001d82:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001d86:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001d94:	230e      	movs	r3, #14
 8001d96:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d98:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4829      	ldr	r0, [pc, #164]	@ (8001e44 <HAL_LTDC_MspInit+0x240>)
 8001da0:	f000 fb3c 	bl	800241c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001da4:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001da8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db2:	2300      	movs	r3, #0
 8001db4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001db6:	230e      	movs	r3, #14
 8001db8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dba:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4821      	ldr	r0, [pc, #132]	@ (8001e48 <HAL_LTDC_MspInit+0x244>)
 8001dc2:	f000 fb2b 	bl	800241c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001dc6:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001dca:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001dd8:	230e      	movs	r3, #14
 8001dda:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ddc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001de0:	4619      	mov	r1, r3
 8001de2:	481a      	ldr	r0, [pc, #104]	@ (8001e4c <HAL_LTDC_MspInit+0x248>)
 8001de4:	f000 fb1a 	bl	800241c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001de8:	2348      	movs	r3, #72	@ 0x48
 8001dea:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2300      	movs	r3, #0
 8001df6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001df8:	230e      	movs	r3, #14
 8001dfa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dfc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e00:	4619      	mov	r1, r3
 8001e02:	4813      	ldr	r0, [pc, #76]	@ (8001e50 <HAL_LTDC_MspInit+0x24c>)
 8001e04:	f000 fb0a 	bl	800241c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001e08:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e0c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e16:	2300      	movs	r3, #0
 8001e18:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001e1a:	2309      	movs	r3, #9
 8001e1c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e1e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e22:	4619      	mov	r1, r3
 8001e24:	4808      	ldr	r0, [pc, #32]	@ (8001e48 <HAL_LTDC_MspInit+0x244>)
 8001e26:	f000 faf9 	bl	800241c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001e2a:	bf00      	nop
 8001e2c:	3768      	adds	r7, #104	@ 0x68
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40016800 	.word	0x40016800
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40021400 	.word	0x40021400
 8001e40:	40020000 	.word	0x40020000
 8001e44:	40020400 	.word	0x40020400
 8001e48:	40021800 	.word	0x40021800
 8001e4c:	40020800 	.word	0x40020800
 8001e50:	40020c00 	.word	0x40020c00

08001e54 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0b      	ldr	r2, [pc, #44]	@ (8001e90 <HAL_RNG_MspInit+0x3c>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d10d      	bne.n	8001e82 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e94 <HAL_RNG_MspInit+0x40>)
 8001e6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e6e:	4a09      	ldr	r2, [pc, #36]	@ (8001e94 <HAL_RNG_MspInit+0x40>)
 8001e70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e74:	6353      	str	r3, [r2, #52]	@ 0x34
 8001e76:	4b07      	ldr	r3, [pc, #28]	@ (8001e94 <HAL_RNG_MspInit+0x40>)
 8001e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001e82:	bf00      	nop
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	50060800 	.word	0x50060800
 8001e94:	40023800 	.word	0x40023800

08001e98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08a      	sub	sp, #40	@ 0x28
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a19      	ldr	r2, [pc, #100]	@ (8001f1c <HAL_SPI_MspInit+0x84>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d12c      	bne.n	8001f14 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	4b18      	ldr	r3, [pc, #96]	@ (8001f20 <HAL_SPI_MspInit+0x88>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec2:	4a17      	ldr	r2, [pc, #92]	@ (8001f20 <HAL_SPI_MspInit+0x88>)
 8001ec4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001ec8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eca:	4b15      	ldr	r3, [pc, #84]	@ (8001f20 <HAL_SPI_MspInit+0x88>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ece:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	4b11      	ldr	r3, [pc, #68]	@ (8001f20 <HAL_SPI_MspInit+0x88>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	4a10      	ldr	r2, [pc, #64]	@ (8001f20 <HAL_SPI_MspInit+0x88>)
 8001ee0:	f043 0320 	orr.w	r3, r3, #32
 8001ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8001f20 <HAL_SPI_MspInit+0x88>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001ef2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001f04:	2305      	movs	r3, #5
 8001f06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f08:	f107 0314 	add.w	r3, r7, #20
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4805      	ldr	r0, [pc, #20]	@ (8001f24 <HAL_SPI_MspInit+0x8c>)
 8001f10:	f000 fa84 	bl	800241c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001f14:	bf00      	nop
 8001f16:	3728      	adds	r7, #40	@ 0x28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	40015000 	.word	0x40015000
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40021400 	.word	0x40021400

08001f28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b084      	sub	sp, #16
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f38:	d115      	bne.n	8001f66 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	60fb      	str	r3, [r7, #12]
 8001f3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f70 <HAL_TIM_Base_MspInit+0x48>)
 8001f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f42:	4a0b      	ldr	r2, [pc, #44]	@ (8001f70 <HAL_TIM_Base_MspInit+0x48>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f4a:	4b09      	ldr	r3, [pc, #36]	@ (8001f70 <HAL_TIM_Base_MspInit+0x48>)
 8001f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2100      	movs	r1, #0
 8001f5a:	201c      	movs	r0, #28
 8001f5c:	f000 fa27 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f60:	201c      	movs	r0, #28
 8001f62:	f000 fa40 	bl	80023e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40023800 	.word	0x40023800

08001f74 <HAL_GPIO_EXTI_Callback>:

}

/* USER CODE BEGIN 1 */
// Interrupt callback function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) {  // Button pin
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d101      	bne.n	8001f88 <HAL_GPIO_EXTI_Callback+0x14>
    	// rotate stuff
    	transform_rotation();
 8001f84:	f7fe fc5a 	bl	800083c <transform_rotation>
    }
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_TIM_PeriodElapsedCallback>:

// Interrupt callback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fa0:	d101      	bne.n	8001fa6 <HAL_TIM_PeriodElapsedCallback+0x16>
    	tick_Matrix();
 8001fa2:	f7ff f88f 	bl	80010c4 <tick_Matrix>
    }
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fae:	b480      	push	{r7}
 8001fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fb2:	bf00      	nop
 8001fb4:	e7fd      	b.n	8001fb2 <NMI_Handler+0x4>

08001fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fba:	bf00      	nop
 8001fbc:	e7fd      	b.n	8001fba <HardFault_Handler+0x4>

08001fbe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc2:	bf00      	nop
 8001fc4:	e7fd      	b.n	8001fc2 <MemManage_Handler+0x4>

08001fc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fca:	bf00      	nop
 8001fcc:	e7fd      	b.n	8001fca <BusFault_Handler+0x4>

08001fce <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd2:	bf00      	nop
 8001fd4:	e7fd      	b.n	8001fd2 <UsageFault_Handler+0x4>

08001fd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002004:	f000 f8d8 	bl	80021b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002008:	bf00      	nop
 800200a:	bd80      	pop	{r7, pc}

0800200c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002010:	2001      	movs	r0, #1
 8002012:	f000 fbc9 	bl	80027a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002020:	4802      	ldr	r0, [pc, #8]	@ (800202c <TIM2_IRQHandler+0x10>)
 8002022:	f001 ffdb 	bl	8003fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000278 	.word	0x20000278

08002030 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b086      	sub	sp, #24
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002038:	4a14      	ldr	r2, [pc, #80]	@ (800208c <_sbrk+0x5c>)
 800203a:	4b15      	ldr	r3, [pc, #84]	@ (8002090 <_sbrk+0x60>)
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002044:	4b13      	ldr	r3, [pc, #76]	@ (8002094 <_sbrk+0x64>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d102      	bne.n	8002052 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800204c:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <_sbrk+0x64>)
 800204e:	4a12      	ldr	r2, [pc, #72]	@ (8002098 <_sbrk+0x68>)
 8002050:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002052:	4b10      	ldr	r3, [pc, #64]	@ (8002094 <_sbrk+0x64>)
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4413      	add	r3, r2
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	429a      	cmp	r2, r3
 800205e:	d207      	bcs.n	8002070 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002060:	f002 ff4a 	bl	8004ef8 <__errno>
 8002064:	4603      	mov	r3, r0
 8002066:	220c      	movs	r2, #12
 8002068:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800206a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800206e:	e009      	b.n	8002084 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002070:	4b08      	ldr	r3, [pc, #32]	@ (8002094 <_sbrk+0x64>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002076:	4b07      	ldr	r3, [pc, #28]	@ (8002094 <_sbrk+0x64>)
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4413      	add	r3, r2
 800207e:	4a05      	ldr	r2, [pc, #20]	@ (8002094 <_sbrk+0x64>)
 8002080:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002082:	68fb      	ldr	r3, [r7, #12]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	20030000 	.word	0x20030000
 8002090:	00000400 	.word	0x00000400
 8002094:	200002c0 	.word	0x200002c0
 8002098:	200004c0 	.word	0x200004c0

0800209c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020a0:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <SystemInit+0x20>)
 80020a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a6:	4a05      	ldr	r2, [pc, #20]	@ (80020bc <SystemInit+0x20>)
 80020a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80020c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020c4:	f7ff ffea 	bl	800209c <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020c8:	480c      	ldr	r0, [pc, #48]	@ (80020fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020ca:	490d      	ldr	r1, [pc, #52]	@ (8002100 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002104 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d0:	e002      	b.n	80020d8 <LoopCopyDataInit>

080020d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020d6:	3304      	adds	r3, #4

080020d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020dc:	d3f9      	bcc.n	80020d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020de:	4a0a      	ldr	r2, [pc, #40]	@ (8002108 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020e0:	4c0a      	ldr	r4, [pc, #40]	@ (800210c <LoopFillZerobss+0x22>)
  movs r3, #0
 80020e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e4:	e001      	b.n	80020ea <LoopFillZerobss>

080020e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e8:	3204      	adds	r2, #4

080020ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020ec:	d3fb      	bcc.n	80020e6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80020ee:	f002 ff09 	bl	8004f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020f2:	f7ff f923 	bl	800133c <main>
  bx  lr    
 80020f6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80020f8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80020fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002100:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002104:	08005d24 	.word	0x08005d24
  ldr r2, =_sbss
 8002108:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800210c:	200004c0 	.word	0x200004c0

08002110 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002110:	e7fe      	b.n	8002110 <ADC_IRQHandler>
	...

08002114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002118:	4b0e      	ldr	r3, [pc, #56]	@ (8002154 <HAL_Init+0x40>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0d      	ldr	r2, [pc, #52]	@ (8002154 <HAL_Init+0x40>)
 800211e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002122:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002124:	4b0b      	ldr	r3, [pc, #44]	@ (8002154 <HAL_Init+0x40>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0a      	ldr	r2, [pc, #40]	@ (8002154 <HAL_Init+0x40>)
 800212a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800212e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002130:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <HAL_Init+0x40>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a07      	ldr	r2, [pc, #28]	@ (8002154 <HAL_Init+0x40>)
 8002136:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800213a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800213c:	2003      	movs	r0, #3
 800213e:	f000 f92b 	bl	8002398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002142:	2000      	movs	r0, #0
 8002144:	f000 f808 	bl	8002158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002148:	f7ff fcca 	bl	8001ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40023c00 	.word	0x40023c00

08002158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002160:	4b12      	ldr	r3, [pc, #72]	@ (80021ac <HAL_InitTick+0x54>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b12      	ldr	r3, [pc, #72]	@ (80021b0 <HAL_InitTick+0x58>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	4619      	mov	r1, r3
 800216a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800216e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002172:	fbb2 f3f3 	udiv	r3, r2, r3
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f943 	bl	8002402 <HAL_SYSTICK_Config>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e00e      	b.n	80021a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b0f      	cmp	r3, #15
 800218a:	d80a      	bhi.n	80021a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800218c:	2200      	movs	r2, #0
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002194:	f000 f90b 	bl	80023ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002198:	4a06      	ldr	r2, [pc, #24]	@ (80021b4 <HAL_InitTick+0x5c>)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
 80021a0:	e000      	b.n	80021a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000000 	.word	0x20000000
 80021b0:	20000008 	.word	0x20000008
 80021b4:	20000004 	.word	0x20000004

080021b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021bc:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <HAL_IncTick+0x20>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <HAL_IncTick+0x24>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4413      	add	r3, r2
 80021c8:	4a04      	ldr	r2, [pc, #16]	@ (80021dc <HAL_IncTick+0x24>)
 80021ca:	6013      	str	r3, [r2, #0]
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	20000008 	.word	0x20000008
 80021dc:	200002c4 	.word	0x200002c4

080021e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return uwTick;
 80021e4:	4b03      	ldr	r3, [pc, #12]	@ (80021f4 <HAL_GetTick+0x14>)
 80021e6:	681b      	ldr	r3, [r3, #0]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	200002c4 	.word	0x200002c4

080021f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002208:	4b0c      	ldr	r3, [pc, #48]	@ (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002214:	4013      	ands	r3, r2
 8002216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002220:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002224:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222a:	4a04      	ldr	r2, [pc, #16]	@ (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	60d3      	str	r3, [r2, #12]
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002244:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <__NVIC_GetPriorityGrouping+0x18>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	0a1b      	lsrs	r3, r3, #8
 800224a:	f003 0307 	and.w	r3, r3, #7
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	2b00      	cmp	r3, #0
 800226c:	db0b      	blt.n	8002286 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	f003 021f 	and.w	r2, r3, #31
 8002274:	4907      	ldr	r1, [pc, #28]	@ (8002294 <__NVIC_EnableIRQ+0x38>)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	2001      	movs	r0, #1
 800227e:	fa00 f202 	lsl.w	r2, r0, r2
 8002282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000e100 	.word	0xe000e100

08002298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	6039      	str	r1, [r7, #0]
 80022a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	db0a      	blt.n	80022c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	490c      	ldr	r1, [pc, #48]	@ (80022e4 <__NVIC_SetPriority+0x4c>)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	0112      	lsls	r2, r2, #4
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	440b      	add	r3, r1
 80022bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c0:	e00a      	b.n	80022d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4908      	ldr	r1, [pc, #32]	@ (80022e8 <__NVIC_SetPriority+0x50>)
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	3b04      	subs	r3, #4
 80022d0:	0112      	lsls	r2, r2, #4
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	440b      	add	r3, r1
 80022d6:	761a      	strb	r2, [r3, #24]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000e100 	.word	0xe000e100
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	@ 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f1c3 0307 	rsb	r3, r3, #7
 8002306:	2b04      	cmp	r3, #4
 8002308:	bf28      	it	cs
 800230a:	2304      	movcs	r3, #4
 800230c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3304      	adds	r3, #4
 8002312:	2b06      	cmp	r3, #6
 8002314:	d902      	bls.n	800231c <NVIC_EncodePriority+0x30>
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3b03      	subs	r3, #3
 800231a:	e000      	b.n	800231e <NVIC_EncodePriority+0x32>
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43da      	mvns	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	401a      	ands	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002334:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	43d9      	mvns	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	4313      	orrs	r3, r2
         );
}
 8002346:	4618      	mov	r0, r3
 8002348:	3724      	adds	r7, #36	@ 0x24
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002364:	d301      	bcc.n	800236a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002366:	2301      	movs	r3, #1
 8002368:	e00f      	b.n	800238a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236a:	4a0a      	ldr	r2, [pc, #40]	@ (8002394 <SysTick_Config+0x40>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002372:	210f      	movs	r1, #15
 8002374:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002378:	f7ff ff8e 	bl	8002298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800237c:	4b05      	ldr	r3, [pc, #20]	@ (8002394 <SysTick_Config+0x40>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002382:	4b04      	ldr	r3, [pc, #16]	@ (8002394 <SysTick_Config+0x40>)
 8002384:	2207      	movs	r2, #7
 8002386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	e000e010 	.word	0xe000e010

08002398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ff29 	bl	80021f8 <__NVIC_SetPriorityGrouping>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c0:	f7ff ff3e 	bl	8002240 <__NVIC_GetPriorityGrouping>
 80023c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	6978      	ldr	r0, [r7, #20]
 80023cc:	f7ff ff8e 	bl	80022ec <NVIC_EncodePriority>
 80023d0:	4602      	mov	r2, r0
 80023d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff5d 	bl	8002298 <__NVIC_SetPriority>
}
 80023de:	bf00      	nop
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff31 	bl	800225c <__NVIC_EnableIRQ>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ffa2 	bl	8002354 <SysTick_Config>
 8002410:	4603      	mov	r3, r0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	@ 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	e177      	b.n	8002728 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002438:	2201      	movs	r2, #1
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	f040 8166 	bne.w	8002722 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b01      	cmp	r3, #1
 8002460:	d005      	beq.n	800246e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800246a:	2b02      	cmp	r3, #2
 800246c:	d130      	bne.n	80024d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2203      	movs	r2, #3
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a4:	2201      	movs	r2, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 0201 	and.w	r2, r3, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d017      	beq.n	800250c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	2203      	movs	r2, #3
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d123      	bne.n	8002560 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	08da      	lsrs	r2, r3, #3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3208      	adds	r2, #8
 8002520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	220f      	movs	r2, #15
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	08da      	lsrs	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3208      	adds	r2, #8
 800255a:	69b9      	ldr	r1, [r7, #24]
 800255c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	2203      	movs	r2, #3
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0203 	and.w	r2, r3, #3
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80c0 	beq.w	8002722 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b66      	ldr	r3, [pc, #408]	@ (8002740 <HAL_GPIO_Init+0x324>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	4a65      	ldr	r2, [pc, #404]	@ (8002740 <HAL_GPIO_Init+0x324>)
 80025ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025b2:	4b63      	ldr	r3, [pc, #396]	@ (8002740 <HAL_GPIO_Init+0x324>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025be:	4a61      	ldr	r2, [pc, #388]	@ (8002744 <HAL_GPIO_Init+0x328>)
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	3302      	adds	r3, #2
 80025c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	220f      	movs	r2, #15
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a58      	ldr	r2, [pc, #352]	@ (8002748 <HAL_GPIO_Init+0x32c>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d037      	beq.n	800265a <HAL_GPIO_Init+0x23e>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a57      	ldr	r2, [pc, #348]	@ (800274c <HAL_GPIO_Init+0x330>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d031      	beq.n	8002656 <HAL_GPIO_Init+0x23a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a56      	ldr	r2, [pc, #344]	@ (8002750 <HAL_GPIO_Init+0x334>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d02b      	beq.n	8002652 <HAL_GPIO_Init+0x236>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a55      	ldr	r2, [pc, #340]	@ (8002754 <HAL_GPIO_Init+0x338>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d025      	beq.n	800264e <HAL_GPIO_Init+0x232>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a54      	ldr	r2, [pc, #336]	@ (8002758 <HAL_GPIO_Init+0x33c>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d01f      	beq.n	800264a <HAL_GPIO_Init+0x22e>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a53      	ldr	r2, [pc, #332]	@ (800275c <HAL_GPIO_Init+0x340>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d019      	beq.n	8002646 <HAL_GPIO_Init+0x22a>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a52      	ldr	r2, [pc, #328]	@ (8002760 <HAL_GPIO_Init+0x344>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d013      	beq.n	8002642 <HAL_GPIO_Init+0x226>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a51      	ldr	r2, [pc, #324]	@ (8002764 <HAL_GPIO_Init+0x348>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d00d      	beq.n	800263e <HAL_GPIO_Init+0x222>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a50      	ldr	r2, [pc, #320]	@ (8002768 <HAL_GPIO_Init+0x34c>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d007      	beq.n	800263a <HAL_GPIO_Init+0x21e>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4f      	ldr	r2, [pc, #316]	@ (800276c <HAL_GPIO_Init+0x350>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d101      	bne.n	8002636 <HAL_GPIO_Init+0x21a>
 8002632:	2309      	movs	r3, #9
 8002634:	e012      	b.n	800265c <HAL_GPIO_Init+0x240>
 8002636:	230a      	movs	r3, #10
 8002638:	e010      	b.n	800265c <HAL_GPIO_Init+0x240>
 800263a:	2308      	movs	r3, #8
 800263c:	e00e      	b.n	800265c <HAL_GPIO_Init+0x240>
 800263e:	2307      	movs	r3, #7
 8002640:	e00c      	b.n	800265c <HAL_GPIO_Init+0x240>
 8002642:	2306      	movs	r3, #6
 8002644:	e00a      	b.n	800265c <HAL_GPIO_Init+0x240>
 8002646:	2305      	movs	r3, #5
 8002648:	e008      	b.n	800265c <HAL_GPIO_Init+0x240>
 800264a:	2304      	movs	r3, #4
 800264c:	e006      	b.n	800265c <HAL_GPIO_Init+0x240>
 800264e:	2303      	movs	r3, #3
 8002650:	e004      	b.n	800265c <HAL_GPIO_Init+0x240>
 8002652:	2302      	movs	r3, #2
 8002654:	e002      	b.n	800265c <HAL_GPIO_Init+0x240>
 8002656:	2301      	movs	r3, #1
 8002658:	e000      	b.n	800265c <HAL_GPIO_Init+0x240>
 800265a:	2300      	movs	r3, #0
 800265c:	69fa      	ldr	r2, [r7, #28]
 800265e:	f002 0203 	and.w	r2, r2, #3
 8002662:	0092      	lsls	r2, r2, #2
 8002664:	4093      	lsls	r3, r2
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800266c:	4935      	ldr	r1, [pc, #212]	@ (8002744 <HAL_GPIO_Init+0x328>)
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	089b      	lsrs	r3, r3, #2
 8002672:	3302      	adds	r3, #2
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800267a:	4b3d      	ldr	r3, [pc, #244]	@ (8002770 <HAL_GPIO_Init+0x354>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800269e:	4a34      	ldr	r2, [pc, #208]	@ (8002770 <HAL_GPIO_Init+0x354>)
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026a4:	4b32      	ldr	r3, [pc, #200]	@ (8002770 <HAL_GPIO_Init+0x354>)
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	69ba      	ldr	r2, [r7, #24]
 80026b0:	4013      	ands	r3, r2
 80026b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d003      	beq.n	80026c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026c8:	4a29      	ldr	r2, [pc, #164]	@ (8002770 <HAL_GPIO_Init+0x354>)
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026ce:	4b28      	ldr	r3, [pc, #160]	@ (8002770 <HAL_GPIO_Init+0x354>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026f2:	4a1f      	ldr	r2, [pc, #124]	@ (8002770 <HAL_GPIO_Init+0x354>)
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026f8:	4b1d      	ldr	r3, [pc, #116]	@ (8002770 <HAL_GPIO_Init+0x354>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	43db      	mvns	r3, r3
 8002702:	69ba      	ldr	r2, [r7, #24]
 8002704:	4013      	ands	r3, r2
 8002706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d003      	beq.n	800271c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4313      	orrs	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800271c:	4a14      	ldr	r2, [pc, #80]	@ (8002770 <HAL_GPIO_Init+0x354>)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	3301      	adds	r3, #1
 8002726:	61fb      	str	r3, [r7, #28]
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	2b0f      	cmp	r3, #15
 800272c:	f67f ae84 	bls.w	8002438 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002730:	bf00      	nop
 8002732:	bf00      	nop
 8002734:	3724      	adds	r7, #36	@ 0x24
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40023800 	.word	0x40023800
 8002744:	40013800 	.word	0x40013800
 8002748:	40020000 	.word	0x40020000
 800274c:	40020400 	.word	0x40020400
 8002750:	40020800 	.word	0x40020800
 8002754:	40020c00 	.word	0x40020c00
 8002758:	40021000 	.word	0x40021000
 800275c:	40021400 	.word	0x40021400
 8002760:	40021800 	.word	0x40021800
 8002764:	40021c00 	.word	0x40021c00
 8002768:	40022000 	.word	0x40022000
 800276c:	40022400 	.word	0x40022400
 8002770:	40013c00 	.word	0x40013c00

08002774 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	807b      	strh	r3, [r7, #2]
 8002780:	4613      	mov	r3, r2
 8002782:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002784:	787b      	ldrb	r3, [r7, #1]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d003      	beq.n	8002792 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800278a:	887a      	ldrh	r2, [r7, #2]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002790:	e003      	b.n	800279a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002792:	887b      	ldrh	r3, [r7, #2]
 8002794:	041a      	lsls	r2, r3, #16
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	619a      	str	r2, [r3, #24]
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
	...

080027a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027b2:	4b08      	ldr	r3, [pc, #32]	@ (80027d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027b4:	695a      	ldr	r2, [r3, #20]
 80027b6:	88fb      	ldrh	r3, [r7, #6]
 80027b8:	4013      	ands	r3, r2
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d006      	beq.n	80027cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027be:	4a05      	ldr	r2, [pc, #20]	@ (80027d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027c0:	88fb      	ldrh	r3, [r7, #6]
 80027c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80027c4:	88fb      	ldrh	r3, [r7, #6]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff fbd4 	bl	8001f74 <HAL_GPIO_EXTI_Callback>
  }
}
 80027cc:	bf00      	nop
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40013c00 	.word	0x40013c00

080027d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b084      	sub	sp, #16
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e12b      	b.n	8002a42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d106      	bne.n	8002804 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff f996 	bl	8001b30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2224      	movs	r2, #36	@ 0x24
 8002808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0201 	bic.w	r2, r2, #1
 800281a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800282a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800283a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800283c:	f001 f8a2 	bl	8003984 <HAL_RCC_GetPCLK1Freq>
 8002840:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	4a81      	ldr	r2, [pc, #516]	@ (8002a4c <HAL_I2C_Init+0x274>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d807      	bhi.n	800285c <HAL_I2C_Init+0x84>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	4a80      	ldr	r2, [pc, #512]	@ (8002a50 <HAL_I2C_Init+0x278>)
 8002850:	4293      	cmp	r3, r2
 8002852:	bf94      	ite	ls
 8002854:	2301      	movls	r3, #1
 8002856:	2300      	movhi	r3, #0
 8002858:	b2db      	uxtb	r3, r3
 800285a:	e006      	b.n	800286a <HAL_I2C_Init+0x92>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4a7d      	ldr	r2, [pc, #500]	@ (8002a54 <HAL_I2C_Init+0x27c>)
 8002860:	4293      	cmp	r3, r2
 8002862:	bf94      	ite	ls
 8002864:	2301      	movls	r3, #1
 8002866:	2300      	movhi	r3, #0
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e0e7      	b.n	8002a42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4a78      	ldr	r2, [pc, #480]	@ (8002a58 <HAL_I2C_Init+0x280>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	0c9b      	lsrs	r3, r3, #18
 800287c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68ba      	ldr	r2, [r7, #8]
 800288e:	430a      	orrs	r2, r1
 8002890:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	4a6a      	ldr	r2, [pc, #424]	@ (8002a4c <HAL_I2C_Init+0x274>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d802      	bhi.n	80028ac <HAL_I2C_Init+0xd4>
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	3301      	adds	r3, #1
 80028aa:	e009      	b.n	80028c0 <HAL_I2C_Init+0xe8>
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028b2:	fb02 f303 	mul.w	r3, r2, r3
 80028b6:	4a69      	ldr	r2, [pc, #420]	@ (8002a5c <HAL_I2C_Init+0x284>)
 80028b8:	fba2 2303 	umull	r2, r3, r2, r3
 80028bc:	099b      	lsrs	r3, r3, #6
 80028be:	3301      	adds	r3, #1
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	430b      	orrs	r3, r1
 80028c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80028d2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	495c      	ldr	r1, [pc, #368]	@ (8002a4c <HAL_I2C_Init+0x274>)
 80028dc:	428b      	cmp	r3, r1
 80028de:	d819      	bhi.n	8002914 <HAL_I2C_Init+0x13c>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	1e59      	subs	r1, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80028ee:	1c59      	adds	r1, r3, #1
 80028f0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80028f4:	400b      	ands	r3, r1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <HAL_I2C_Init+0x138>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	1e59      	subs	r1, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	005b      	lsls	r3, r3, #1
 8002904:	fbb1 f3f3 	udiv	r3, r1, r3
 8002908:	3301      	adds	r3, #1
 800290a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800290e:	e051      	b.n	80029b4 <HAL_I2C_Init+0x1dc>
 8002910:	2304      	movs	r3, #4
 8002912:	e04f      	b.n	80029b4 <HAL_I2C_Init+0x1dc>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d111      	bne.n	8002940 <HAL_I2C_Init+0x168>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	1e58      	subs	r0, r3, #1
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6859      	ldr	r1, [r3, #4]
 8002924:	460b      	mov	r3, r1
 8002926:	005b      	lsls	r3, r3, #1
 8002928:	440b      	add	r3, r1
 800292a:	fbb0 f3f3 	udiv	r3, r0, r3
 800292e:	3301      	adds	r3, #1
 8002930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf0c      	ite	eq
 8002938:	2301      	moveq	r3, #1
 800293a:	2300      	movne	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	e012      	b.n	8002966 <HAL_I2C_Init+0x18e>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	1e58      	subs	r0, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6859      	ldr	r1, [r3, #4]
 8002948:	460b      	mov	r3, r1
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	0099      	lsls	r1, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	fbb0 f3f3 	udiv	r3, r0, r3
 8002956:	3301      	adds	r3, #1
 8002958:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800295c:	2b00      	cmp	r3, #0
 800295e:	bf0c      	ite	eq
 8002960:	2301      	moveq	r3, #1
 8002962:	2300      	movne	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_I2C_Init+0x196>
 800296a:	2301      	movs	r3, #1
 800296c:	e022      	b.n	80029b4 <HAL_I2C_Init+0x1dc>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10e      	bne.n	8002994 <HAL_I2C_Init+0x1bc>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	1e58      	subs	r0, r3, #1
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6859      	ldr	r1, [r3, #4]
 800297e:	460b      	mov	r3, r1
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	440b      	add	r3, r1
 8002984:	fbb0 f3f3 	udiv	r3, r0, r3
 8002988:	3301      	adds	r3, #1
 800298a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800298e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002992:	e00f      	b.n	80029b4 <HAL_I2C_Init+0x1dc>
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1e58      	subs	r0, r3, #1
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6859      	ldr	r1, [r3, #4]
 800299c:	460b      	mov	r3, r1
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	440b      	add	r3, r1
 80029a2:	0099      	lsls	r1, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80029aa:	3301      	adds	r3, #1
 80029ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	6809      	ldr	r1, [r1, #0]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69da      	ldr	r2, [r3, #28]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	431a      	orrs	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80029e2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6911      	ldr	r1, [r2, #16]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68d2      	ldr	r2, [r2, #12]
 80029ee:	4311      	orrs	r1, r2
 80029f0:	687a      	ldr	r2, [r7, #4]
 80029f2:	6812      	ldr	r2, [r2, #0]
 80029f4:	430b      	orrs	r3, r1
 80029f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	695a      	ldr	r2, [r3, #20]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	000186a0 	.word	0x000186a0
 8002a50:	001e847f 	.word	0x001e847f
 8002a54:	003d08ff 	.word	0x003d08ff
 8002a58:	431bde83 	.word	0x431bde83
 8002a5c:	10624dd3 	.word	0x10624dd3

08002a60 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b20      	cmp	r3, #32
 8002a74:	d129      	bne.n	8002aca <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2224      	movs	r2, #36	@ 0x24
 8002a7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0201 	bic.w	r2, r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0210 	bic.w	r2, r2, #16
 8002a9c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	683a      	ldr	r2, [r7, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 0201 	orr.w	r2, r2, #1
 8002abc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	e000      	b.n	8002acc <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002aca:	2302      	movs	r3, #2
  }
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b20      	cmp	r3, #32
 8002af0:	d12a      	bne.n	8002b48 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2224      	movs	r2, #36	@ 0x24
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0201 	bic.w	r2, r2, #1
 8002b08:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b10:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002b12:	89fb      	ldrh	r3, [r7, #14]
 8002b14:	f023 030f 	bic.w	r3, r3, #15
 8002b18:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	89fb      	ldrh	r3, [r7, #14]
 8002b20:	4313      	orrs	r3, r2
 8002b22:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	89fa      	ldrh	r2, [r7, #14]
 8002b2a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2220      	movs	r2, #32
 8002b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	e000      	b.n	8002b4a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002b48:	2302      	movs	r3, #2
  }
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e0bf      	b.n	8002cea <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d106      	bne.n	8002b84 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff f840 	bl	8001c04 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2202      	movs	r2, #2
 8002b88:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699a      	ldr	r2, [r3, #24]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002b9a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	6999      	ldr	r1, [r3, #24]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002bb0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6899      	ldr	r1, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	4b4a      	ldr	r3, [pc, #296]	@ (8002cf4 <HAL_LTDC_Init+0x19c>)
 8002bcc:	400b      	ands	r3, r1
 8002bce:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	041b      	lsls	r3, r3, #16
 8002bd6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6899      	ldr	r1, [r3, #8]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699a      	ldr	r2, [r3, #24]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	431a      	orrs	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	68d9      	ldr	r1, [r3, #12]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	4b3e      	ldr	r3, [pc, #248]	@ (8002cf4 <HAL_LTDC_Init+0x19c>)
 8002bfa:	400b      	ands	r3, r1
 8002bfc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69db      	ldr	r3, [r3, #28]
 8002c02:	041b      	lsls	r3, r3, #16
 8002c04:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68d9      	ldr	r1, [r3, #12]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a1a      	ldr	r2, [r3, #32]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6919      	ldr	r1, [r3, #16]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	4b33      	ldr	r3, [pc, #204]	@ (8002cf4 <HAL_LTDC_Init+0x19c>)
 8002c28:	400b      	ands	r3, r1
 8002c2a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c30:	041b      	lsls	r3, r3, #16
 8002c32:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6919      	ldr	r1, [r3, #16]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	6959      	ldr	r1, [r3, #20]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	4b27      	ldr	r3, [pc, #156]	@ (8002cf4 <HAL_LTDC_Init+0x19c>)
 8002c56:	400b      	ands	r3, r1
 8002c58:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5e:	041b      	lsls	r3, r3, #16
 8002c60:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6959      	ldr	r1, [r3, #20]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c7e:	021b      	lsls	r3, r3, #8
 8002c80:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002c88:	041b      	lsls	r3, r3, #16
 8002c8a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002c9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0206 	orr.w	r2, r2, #6
 8002cc6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	699a      	ldr	r2, [r3, #24]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	f000f800 	.word	0xf000f800

08002cf8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002cf8:	b5b0      	push	{r4, r5, r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_LTDC_ConfigLayer+0x1a>
 8002d0e:	2302      	movs	r3, #2
 8002d10:	e02c      	b.n	8002d6c <HAL_LTDC_ConfigLayer+0x74>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2134      	movs	r1, #52	@ 0x34
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	4614      	mov	r4, r2
 8002d36:	461d      	mov	r5, r3
 8002d38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d44:	682b      	ldr	r3, [r5, #0]
 8002d46:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	68b9      	ldr	r1, [r7, #8]
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 f811 	bl	8002d74 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2201      	movs	r2, #1
 8002d58:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	3710      	adds	r7, #16
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bdb0      	pop	{r4, r5, r7, pc}

08002d74 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b089      	sub	sp, #36	@ 0x24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	60f8      	str	r0, [r7, #12]
 8002d7c:	60b9      	str	r1, [r7, #8]
 8002d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	685a      	ldr	r2, [r3, #4]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	0c1b      	lsrs	r3, r3, #16
 8002d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d90:	4413      	add	r3, r2
 8002d92:	041b      	lsls	r3, r3, #16
 8002d94:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	01db      	lsls	r3, r3, #7
 8002da0:	4413      	add	r3, r2
 8002da2:	3384      	adds	r3, #132	@ 0x84
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	6812      	ldr	r2, [r2, #0]
 8002daa:	4611      	mov	r1, r2
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	01d2      	lsls	r2, r2, #7
 8002db0:	440a      	add	r2, r1
 8002db2:	3284      	adds	r2, #132	@ 0x84
 8002db4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002db8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	0c1b      	lsrs	r3, r3, #16
 8002dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002dca:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002dcc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	01db      	lsls	r3, r3, #7
 8002dd8:	440b      	add	r3, r1
 8002dda:	3384      	adds	r3, #132	@ 0x84
 8002ddc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002de2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002df2:	4413      	add	r3, r2
 8002df4:	041b      	lsls	r3, r3, #16
 8002df6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	01db      	lsls	r3, r3, #7
 8002e02:	4413      	add	r3, r2
 8002e04:	3384      	adds	r3, #132	@ 0x84
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	6812      	ldr	r2, [r2, #0]
 8002e0c:	4611      	mov	r1, r2
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	01d2      	lsls	r2, r2, #7
 8002e12:	440a      	add	r2, r1
 8002e14:	3284      	adds	r2, #132	@ 0x84
 8002e16:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002e1a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e2a:	4413      	add	r3, r2
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4619      	mov	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	01db      	lsls	r3, r3, #7
 8002e38:	440b      	add	r3, r1
 8002e3a:	3384      	adds	r3, #132	@ 0x84
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	01db      	lsls	r3, r3, #7
 8002e4e:	4413      	add	r3, r2
 8002e50:	3384      	adds	r3, #132	@ 0x84
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	6812      	ldr	r2, [r2, #0]
 8002e58:	4611      	mov	r1, r2
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	01d2      	lsls	r2, r2, #7
 8002e5e:	440a      	add	r2, r1
 8002e60:	3284      	adds	r2, #132	@ 0x84
 8002e62:	f023 0307 	bic.w	r3, r3, #7
 8002e66:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	01db      	lsls	r3, r3, #7
 8002e72:	4413      	add	r3, r2
 8002e74:	3384      	adds	r3, #132	@ 0x84
 8002e76:	461a      	mov	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002e84:	021b      	lsls	r3, r3, #8
 8002e86:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002e8e:	041b      	lsls	r3, r3, #16
 8002e90:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	061b      	lsls	r3, r3, #24
 8002e98:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	01db      	lsls	r3, r3, #7
 8002ea4:	4413      	add	r3, r2
 8002ea6:	3384      	adds	r3, #132	@ 0x84
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	01db      	lsls	r3, r3, #7
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3384      	adds	r3, #132	@ 0x84
 8002eb8:	461a      	mov	r2, r3
 8002eba:	2300      	movs	r3, #0
 8002ebc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	01db      	lsls	r3, r3, #7
 8002ed8:	440b      	add	r3, r1
 8002eda:	3384      	adds	r3, #132	@ 0x84
 8002edc:	4619      	mov	r1, r3
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	01db      	lsls	r3, r3, #7
 8002eee:	4413      	add	r3, r2
 8002ef0:	3384      	adds	r3, #132	@ 0x84
 8002ef2:	695b      	ldr	r3, [r3, #20]
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	4611      	mov	r1, r2
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	01d2      	lsls	r2, r2, #7
 8002efe:	440a      	add	r2, r1
 8002f00:	3284      	adds	r2, #132	@ 0x84
 8002f02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f06:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	01db      	lsls	r3, r3, #7
 8002f12:	4413      	add	r3, r2
 8002f14:	3384      	adds	r3, #132	@ 0x84
 8002f16:	461a      	mov	r2, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	461a      	mov	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	01db      	lsls	r3, r3, #7
 8002f28:	4413      	add	r3, r2
 8002f2a:	3384      	adds	r3, #132	@ 0x84
 8002f2c:	69db      	ldr	r3, [r3, #28]
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	6812      	ldr	r2, [r2, #0]
 8002f32:	4611      	mov	r1, r2
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	01d2      	lsls	r2, r2, #7
 8002f38:	440a      	add	r2, r1
 8002f3a:	3284      	adds	r2, #132	@ 0x84
 8002f3c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002f40:	f023 0307 	bic.w	r3, r3, #7
 8002f44:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	69da      	ldr	r2, [r3, #28]
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	68f9      	ldr	r1, [r7, #12]
 8002f50:	6809      	ldr	r1, [r1, #0]
 8002f52:	4608      	mov	r0, r1
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	01c9      	lsls	r1, r1, #7
 8002f58:	4401      	add	r1, r0
 8002f5a:	3184      	adds	r1, #132	@ 0x84
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	461a      	mov	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	01db      	lsls	r3, r3, #7
 8002f6a:	4413      	add	r3, r2
 8002f6c:	3384      	adds	r3, #132	@ 0x84
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	461a      	mov	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	01db      	lsls	r3, r3, #7
 8002f7a:	4413      	add	r3, r2
 8002f7c:	3384      	adds	r3, #132	@ 0x84
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2300      	movs	r3, #0
 8002f82:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	01db      	lsls	r3, r3, #7
 8002f8e:	4413      	add	r3, r2
 8002f90:	3384      	adds	r3, #132	@ 0x84
 8002f92:	461a      	mov	r2, r3
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f98:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d102      	bne.n	8002fa8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8002fa2:	2304      	movs	r3, #4
 8002fa4:	61fb      	str	r3, [r7, #28]
 8002fa6:	e01b      	b.n	8002fe0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d102      	bne.n	8002fb6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	61fb      	str	r3, [r7, #28]
 8002fb4:	e014      	b.n	8002fe0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d00b      	beq.n	8002fd6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d007      	beq.n	8002fd6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d003      	beq.n	8002fd6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8002fd2:	2b07      	cmp	r3, #7
 8002fd4:	d102      	bne.n	8002fdc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	61fb      	str	r3, [r7, #28]
 8002fda:	e001      	b.n	8002fe0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	01db      	lsls	r3, r3, #7
 8002fea:	4413      	add	r3, r2
 8002fec:	3384      	adds	r3, #132	@ 0x84
 8002fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	6812      	ldr	r2, [r2, #0]
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	01d2      	lsls	r2, r2, #7
 8002ffa:	440a      	add	r2, r1
 8002ffc:	3284      	adds	r2, #132	@ 0x84
 8002ffe:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8003002:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003008:	69fa      	ldr	r2, [r7, #28]
 800300a:	fb02 f303 	mul.w	r3, r2, r3
 800300e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	6859      	ldr	r1, [r3, #4]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	1acb      	subs	r3, r1, r3
 800301a:	69f9      	ldr	r1, [r7, #28]
 800301c:	fb01 f303 	mul.w	r3, r1, r3
 8003020:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003022:	68f9      	ldr	r1, [r7, #12]
 8003024:	6809      	ldr	r1, [r1, #0]
 8003026:	4608      	mov	r0, r1
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	01c9      	lsls	r1, r1, #7
 800302c:	4401      	add	r1, r0
 800302e:	3184      	adds	r1, #132	@ 0x84
 8003030:	4313      	orrs	r3, r2
 8003032:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	461a      	mov	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	01db      	lsls	r3, r3, #7
 800303e:	4413      	add	r3, r2
 8003040:	3384      	adds	r3, #132	@ 0x84
 8003042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	6812      	ldr	r2, [r2, #0]
 8003048:	4611      	mov	r1, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	01d2      	lsls	r2, r2, #7
 800304e:	440a      	add	r2, r1
 8003050:	3284      	adds	r2, #132	@ 0x84
 8003052:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003056:	f023 0307 	bic.w	r3, r3, #7
 800305a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	01db      	lsls	r3, r3, #7
 8003066:	4413      	add	r3, r2
 8003068:	3384      	adds	r3, #132	@ 0x84
 800306a:	461a      	mov	r2, r3
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003070:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	461a      	mov	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	01db      	lsls	r3, r3, #7
 800307c:	4413      	add	r3, r2
 800307e:	3384      	adds	r3, #132	@ 0x84
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	6812      	ldr	r2, [r2, #0]
 8003086:	4611      	mov	r1, r2
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	01d2      	lsls	r2, r2, #7
 800308c:	440a      	add	r2, r1
 800308e:	3284      	adds	r2, #132	@ 0x84
 8003090:	f043 0301 	orr.w	r3, r3, #1
 8003094:	6013      	str	r3, [r2, #0]
}
 8003096:	bf00      	nop
 8003098:	3724      	adds	r7, #36	@ 0x24
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr
	...

080030a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e267      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d075      	beq.n	80031ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030c2:	4b88      	ldr	r3, [pc, #544]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	2b04      	cmp	r3, #4
 80030cc:	d00c      	beq.n	80030e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030ce:	4b85      	ldr	r3, [pc, #532]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d112      	bne.n	8003100 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030da:	4b82      	ldr	r3, [pc, #520]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030e6:	d10b      	bne.n	8003100 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e8:	4b7e      	ldr	r3, [pc, #504]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d05b      	beq.n	80031ac <HAL_RCC_OscConfig+0x108>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d157      	bne.n	80031ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e242      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003108:	d106      	bne.n	8003118 <HAL_RCC_OscConfig+0x74>
 800310a:	4b76      	ldr	r3, [pc, #472]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a75      	ldr	r2, [pc, #468]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	e01d      	b.n	8003154 <HAL_RCC_OscConfig+0xb0>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003120:	d10c      	bne.n	800313c <HAL_RCC_OscConfig+0x98>
 8003122:	4b70      	ldr	r3, [pc, #448]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a6f      	ldr	r2, [pc, #444]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003128:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800312c:	6013      	str	r3, [r2, #0]
 800312e:	4b6d      	ldr	r3, [pc, #436]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a6c      	ldr	r2, [pc, #432]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	e00b      	b.n	8003154 <HAL_RCC_OscConfig+0xb0>
 800313c:	4b69      	ldr	r3, [pc, #420]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a68      	ldr	r2, [pc, #416]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003146:	6013      	str	r3, [r2, #0]
 8003148:	4b66      	ldr	r3, [pc, #408]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a65      	ldr	r2, [pc, #404]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 800314e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d013      	beq.n	8003184 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7ff f840 	bl	80021e0 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003162:	e008      	b.n	8003176 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003164:	f7ff f83c 	bl	80021e0 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	2b64      	cmp	r3, #100	@ 0x64
 8003170:	d901      	bls.n	8003176 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003172:	2303      	movs	r3, #3
 8003174:	e207      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	4b5b      	ldr	r3, [pc, #364]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f0      	beq.n	8003164 <HAL_RCC_OscConfig+0xc0>
 8003182:	e014      	b.n	80031ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7ff f82c 	bl	80021e0 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800318c:	f7ff f828 	bl	80021e0 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b64      	cmp	r3, #100	@ 0x64
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e1f3      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800319e:	4b51      	ldr	r3, [pc, #324]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0xe8>
 80031aa:	e000      	b.n	80031ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0302 	and.w	r3, r3, #2
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d063      	beq.n	8003282 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031ba:	4b4a      	ldr	r3, [pc, #296]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 030c 	and.w	r3, r3, #12
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00b      	beq.n	80031de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031c6:	4b47      	ldr	r3, [pc, #284]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031ce:	2b08      	cmp	r3, #8
 80031d0:	d11c      	bne.n	800320c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031d2:	4b44      	ldr	r3, [pc, #272]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d116      	bne.n	800320c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031de:	4b41      	ldr	r3, [pc, #260]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d005      	beq.n	80031f6 <HAL_RCC_OscConfig+0x152>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d001      	beq.n	80031f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e1c7      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f6:	4b3b      	ldr	r3, [pc, #236]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	4937      	ldr	r1, [pc, #220]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003206:	4313      	orrs	r3, r2
 8003208:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800320a:	e03a      	b.n	8003282 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d020      	beq.n	8003256 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003214:	4b34      	ldr	r3, [pc, #208]	@ (80032e8 <HAL_RCC_OscConfig+0x244>)
 8003216:	2201      	movs	r2, #1
 8003218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321a:	f7fe ffe1 	bl	80021e0 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003222:	f7fe ffdd 	bl	80021e0 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e1a8      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003234:	4b2b      	ldr	r3, [pc, #172]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003240:	4b28      	ldr	r3, [pc, #160]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4925      	ldr	r1, [pc, #148]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003250:	4313      	orrs	r3, r2
 8003252:	600b      	str	r3, [r1, #0]
 8003254:	e015      	b.n	8003282 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003256:	4b24      	ldr	r3, [pc, #144]	@ (80032e8 <HAL_RCC_OscConfig+0x244>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800325c:	f7fe ffc0 	bl	80021e0 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003264:	f7fe ffbc 	bl	80021e0 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e187      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003276:	4b1b      	ldr	r3, [pc, #108]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 0302 	and.w	r3, r3, #2
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d036      	beq.n	80032fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d016      	beq.n	80032c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003296:	4b15      	ldr	r3, [pc, #84]	@ (80032ec <HAL_RCC_OscConfig+0x248>)
 8003298:	2201      	movs	r2, #1
 800329a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800329c:	f7fe ffa0 	bl	80021e0 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032a4:	f7fe ff9c 	bl	80021e0 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e167      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032b6:	4b0b      	ldr	r3, [pc, #44]	@ (80032e4 <HAL_RCC_OscConfig+0x240>)
 80032b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d0f0      	beq.n	80032a4 <HAL_RCC_OscConfig+0x200>
 80032c2:	e01b      	b.n	80032fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032c4:	4b09      	ldr	r3, [pc, #36]	@ (80032ec <HAL_RCC_OscConfig+0x248>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ca:	f7fe ff89 	bl	80021e0 <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032d0:	e00e      	b.n	80032f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032d2:	f7fe ff85 	bl	80021e0 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d907      	bls.n	80032f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e150      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
 80032e4:	40023800 	.word	0x40023800
 80032e8:	42470000 	.word	0x42470000
 80032ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032f0:	4b88      	ldr	r3, [pc, #544]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 80032f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032f4:	f003 0302 	and.w	r3, r3, #2
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d1ea      	bne.n	80032d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0304 	and.w	r3, r3, #4
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 8097 	beq.w	8003438 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800330a:	2300      	movs	r3, #0
 800330c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800330e:	4b81      	ldr	r3, [pc, #516]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10f      	bne.n	800333a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	60bb      	str	r3, [r7, #8]
 800331e:	4b7d      	ldr	r3, [pc, #500]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 8003320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003322:	4a7c      	ldr	r2, [pc, #496]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 8003324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003328:	6413      	str	r3, [r2, #64]	@ 0x40
 800332a:	4b7a      	ldr	r3, [pc, #488]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003332:	60bb      	str	r3, [r7, #8]
 8003334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003336:	2301      	movs	r3, #1
 8003338:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800333a:	4b77      	ldr	r3, [pc, #476]	@ (8003518 <HAL_RCC_OscConfig+0x474>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003342:	2b00      	cmp	r3, #0
 8003344:	d118      	bne.n	8003378 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003346:	4b74      	ldr	r3, [pc, #464]	@ (8003518 <HAL_RCC_OscConfig+0x474>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a73      	ldr	r2, [pc, #460]	@ (8003518 <HAL_RCC_OscConfig+0x474>)
 800334c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003352:	f7fe ff45 	bl	80021e0 <HAL_GetTick>
 8003356:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003358:	e008      	b.n	800336c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800335a:	f7fe ff41 	bl	80021e0 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d901      	bls.n	800336c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e10c      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336c:	4b6a      	ldr	r3, [pc, #424]	@ (8003518 <HAL_RCC_OscConfig+0x474>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d0f0      	beq.n	800335a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x2ea>
 8003380:	4b64      	ldr	r3, [pc, #400]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 8003382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003384:	4a63      	ldr	r2, [pc, #396]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 8003386:	f043 0301 	orr.w	r3, r3, #1
 800338a:	6713      	str	r3, [r2, #112]	@ 0x70
 800338c:	e01c      	b.n	80033c8 <HAL_RCC_OscConfig+0x324>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2b05      	cmp	r3, #5
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x30c>
 8003396:	4b5f      	ldr	r3, [pc, #380]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 8003398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800339a:	4a5e      	ldr	r2, [pc, #376]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 800339c:	f043 0304 	orr.w	r3, r3, #4
 80033a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80033a2:	4b5c      	ldr	r3, [pc, #368]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033a6:	4a5b      	ldr	r2, [pc, #364]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ae:	e00b      	b.n	80033c8 <HAL_RCC_OscConfig+0x324>
 80033b0:	4b58      	ldr	r3, [pc, #352]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 80033b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b4:	4a57      	ldr	r2, [pc, #348]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 80033b6:	f023 0301 	bic.w	r3, r3, #1
 80033ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80033bc:	4b55      	ldr	r3, [pc, #340]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c0:	4a54      	ldr	r2, [pc, #336]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 80033c2:	f023 0304 	bic.w	r3, r3, #4
 80033c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d015      	beq.n	80033fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d0:	f7fe ff06 	bl	80021e0 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d6:	e00a      	b.n	80033ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033d8:	f7fe ff02 	bl	80021e0 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e0cb      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ee:	4b49      	ldr	r3, [pc, #292]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 80033f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d0ee      	beq.n	80033d8 <HAL_RCC_OscConfig+0x334>
 80033fa:	e014      	b.n	8003426 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fc:	f7fe fef0 	bl	80021e0 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003402:	e00a      	b.n	800341a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003404:	f7fe feec 	bl	80021e0 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e0b5      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800341a:	4b3e      	ldr	r3, [pc, #248]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 800341c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d1ee      	bne.n	8003404 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003426:	7dfb      	ldrb	r3, [r7, #23]
 8003428:	2b01      	cmp	r3, #1
 800342a:	d105      	bne.n	8003438 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800342c:	4b39      	ldr	r3, [pc, #228]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 800342e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003430:	4a38      	ldr	r2, [pc, #224]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 8003432:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003436:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 80a1 	beq.w	8003584 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003442:	4b34      	ldr	r3, [pc, #208]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	f003 030c 	and.w	r3, r3, #12
 800344a:	2b08      	cmp	r3, #8
 800344c:	d05c      	beq.n	8003508 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d141      	bne.n	80034da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003456:	4b31      	ldr	r3, [pc, #196]	@ (800351c <HAL_RCC_OscConfig+0x478>)
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345c:	f7fe fec0 	bl	80021e0 <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003464:	f7fe febc 	bl	80021e0 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e087      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003476:	4b27      	ldr	r3, [pc, #156]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d1f0      	bne.n	8003464 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69da      	ldr	r2, [r3, #28]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	431a      	orrs	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003490:	019b      	lsls	r3, r3, #6
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003498:	085b      	lsrs	r3, r3, #1
 800349a:	3b01      	subs	r3, #1
 800349c:	041b      	lsls	r3, r3, #16
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a4:	061b      	lsls	r3, r3, #24
 80034a6:	491b      	ldr	r1, [pc, #108]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034ac:	4b1b      	ldr	r3, [pc, #108]	@ (800351c <HAL_RCC_OscConfig+0x478>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b2:	f7fe fe95 	bl	80021e0 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ba:	f7fe fe91 	bl	80021e0 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e05c      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034cc:	4b11      	ldr	r3, [pc, #68]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x416>
 80034d8:	e054      	b.n	8003584 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034da:	4b10      	ldr	r3, [pc, #64]	@ (800351c <HAL_RCC_OscConfig+0x478>)
 80034dc:	2200      	movs	r2, #0
 80034de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7fe fe7e 	bl	80021e0 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034e8:	f7fe fe7a 	bl	80021e0 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b02      	cmp	r3, #2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e045      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fa:	4b06      	ldr	r3, [pc, #24]	@ (8003514 <HAL_RCC_OscConfig+0x470>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0x444>
 8003506:	e03d      	b.n	8003584 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d107      	bne.n	8003520 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e038      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
 8003514:	40023800 	.word	0x40023800
 8003518:	40007000 	.word	0x40007000
 800351c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003520:	4b1b      	ldr	r3, [pc, #108]	@ (8003590 <HAL_RCC_OscConfig+0x4ec>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d028      	beq.n	8003580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003538:	429a      	cmp	r2, r3
 800353a:	d121      	bne.n	8003580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003546:	429a      	cmp	r2, r3
 8003548:	d11a      	bne.n	8003580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003550:	4013      	ands	r3, r2
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003556:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003558:	4293      	cmp	r3, r2
 800355a:	d111      	bne.n	8003580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003566:	085b      	lsrs	r3, r3, #1
 8003568:	3b01      	subs	r3, #1
 800356a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d107      	bne.n	8003580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800357c:	429a      	cmp	r2, r3
 800357e:	d001      	beq.n	8003584 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	40023800 	.word	0x40023800

08003594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0cc      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035a8:	4b68      	ldr	r3, [pc, #416]	@ (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 030f 	and.w	r3, r3, #15
 80035b0:	683a      	ldr	r2, [r7, #0]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d90c      	bls.n	80035d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b6:	4b65      	ldr	r3, [pc, #404]	@ (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	b2d2      	uxtb	r2, r2
 80035bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035be:	4b63      	ldr	r3, [pc, #396]	@ (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d001      	beq.n	80035d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e0b8      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d020      	beq.n	800361e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d005      	beq.n	80035f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035e8:	4b59      	ldr	r3, [pc, #356]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	4a58      	ldr	r2, [pc, #352]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80035ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80035f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0308 	and.w	r3, r3, #8
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003600:	4b53      	ldr	r3, [pc, #332]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	4a52      	ldr	r2, [pc, #328]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800360a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800360c:	4b50      	ldr	r3, [pc, #320]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	494d      	ldr	r1, [pc, #308]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	4313      	orrs	r3, r2
 800361c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d044      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d107      	bne.n	8003642 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003632:	4b47      	ldr	r3, [pc, #284]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d119      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e07f      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2b02      	cmp	r3, #2
 8003648:	d003      	beq.n	8003652 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800364e:	2b03      	cmp	r3, #3
 8003650:	d107      	bne.n	8003662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003652:	4b3f      	ldr	r3, [pc, #252]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d109      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e06f      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003662:	4b3b      	ldr	r3, [pc, #236]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e067      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003672:	4b37      	ldr	r3, [pc, #220]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	f023 0203 	bic.w	r2, r3, #3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	4934      	ldr	r1, [pc, #208]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003680:	4313      	orrs	r3, r2
 8003682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003684:	f7fe fdac 	bl	80021e0 <HAL_GetTick>
 8003688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800368a:	e00a      	b.n	80036a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800368c:	f7fe fda8 	bl	80021e0 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800369a:	4293      	cmp	r3, r2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e04f      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036a2:	4b2b      	ldr	r3, [pc, #172]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 020c 	and.w	r2, r3, #12
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d1eb      	bne.n	800368c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036b4:	4b25      	ldr	r3, [pc, #148]	@ (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 030f 	and.w	r3, r3, #15
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d20c      	bcs.n	80036dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c2:	4b22      	ldr	r3, [pc, #136]	@ (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ca:	4b20      	ldr	r3, [pc, #128]	@ (800374c <HAL_RCC_ClockConfig+0x1b8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d001      	beq.n	80036dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e032      	b.n	8003742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d008      	beq.n	80036fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036e8:	4b19      	ldr	r3, [pc, #100]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	4916      	ldr	r1, [pc, #88]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	4313      	orrs	r3, r2
 80036f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b00      	cmp	r3, #0
 8003704:	d009      	beq.n	800371a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003706:	4b12      	ldr	r3, [pc, #72]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	691b      	ldr	r3, [r3, #16]
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	490e      	ldr	r1, [pc, #56]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	4313      	orrs	r3, r2
 8003718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800371a:	f000 f821 	bl	8003760 <HAL_RCC_GetSysClockFreq>
 800371e:	4602      	mov	r2, r0
 8003720:	4b0b      	ldr	r3, [pc, #44]	@ (8003750 <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	091b      	lsrs	r3, r3, #4
 8003726:	f003 030f 	and.w	r3, r3, #15
 800372a:	490a      	ldr	r1, [pc, #40]	@ (8003754 <HAL_RCC_ClockConfig+0x1c0>)
 800372c:	5ccb      	ldrb	r3, [r1, r3]
 800372e:	fa22 f303 	lsr.w	r3, r2, r3
 8003732:	4a09      	ldr	r2, [pc, #36]	@ (8003758 <HAL_RCC_ClockConfig+0x1c4>)
 8003734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003736:	4b09      	ldr	r3, [pc, #36]	@ (800375c <HAL_RCC_ClockConfig+0x1c8>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f7fe fd0c 	bl	8002158 <HAL_InitTick>

  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	40023c00 	.word	0x40023c00
 8003750:	40023800 	.word	0x40023800
 8003754:	08005cac 	.word	0x08005cac
 8003758:	20000000 	.word	0x20000000
 800375c:	20000004 	.word	0x20000004

08003760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003764:	b094      	sub	sp, #80	@ 0x50
 8003766:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003768:	2300      	movs	r3, #0
 800376a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800376c:	2300      	movs	r3, #0
 800376e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003770:	2300      	movs	r3, #0
 8003772:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003778:	4b79      	ldr	r3, [pc, #484]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x200>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f003 030c 	and.w	r3, r3, #12
 8003780:	2b08      	cmp	r3, #8
 8003782:	d00d      	beq.n	80037a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003784:	2b08      	cmp	r3, #8
 8003786:	f200 80e1 	bhi.w	800394c <HAL_RCC_GetSysClockFreq+0x1ec>
 800378a:	2b00      	cmp	r3, #0
 800378c:	d002      	beq.n	8003794 <HAL_RCC_GetSysClockFreq+0x34>
 800378e:	2b04      	cmp	r3, #4
 8003790:	d003      	beq.n	800379a <HAL_RCC_GetSysClockFreq+0x3a>
 8003792:	e0db      	b.n	800394c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003794:	4b73      	ldr	r3, [pc, #460]	@ (8003964 <HAL_RCC_GetSysClockFreq+0x204>)
 8003796:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003798:	e0db      	b.n	8003952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800379a:	4b73      	ldr	r3, [pc, #460]	@ (8003968 <HAL_RCC_GetSysClockFreq+0x208>)
 800379c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800379e:	e0d8      	b.n	8003952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x200>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x200>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d063      	beq.n	800387e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x200>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	099b      	lsrs	r3, r3, #6
 80037bc:	2200      	movs	r2, #0
 80037be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80037c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80037ca:	2300      	movs	r3, #0
 80037cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80037ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80037d2:	4622      	mov	r2, r4
 80037d4:	462b      	mov	r3, r5
 80037d6:	f04f 0000 	mov.w	r0, #0
 80037da:	f04f 0100 	mov.w	r1, #0
 80037de:	0159      	lsls	r1, r3, #5
 80037e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037e4:	0150      	lsls	r0, r2, #5
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4621      	mov	r1, r4
 80037ec:	1a51      	subs	r1, r2, r1
 80037ee:	6139      	str	r1, [r7, #16]
 80037f0:	4629      	mov	r1, r5
 80037f2:	eb63 0301 	sbc.w	r3, r3, r1
 80037f6:	617b      	str	r3, [r7, #20]
 80037f8:	f04f 0200 	mov.w	r2, #0
 80037fc:	f04f 0300 	mov.w	r3, #0
 8003800:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003804:	4659      	mov	r1, fp
 8003806:	018b      	lsls	r3, r1, #6
 8003808:	4651      	mov	r1, sl
 800380a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800380e:	4651      	mov	r1, sl
 8003810:	018a      	lsls	r2, r1, #6
 8003812:	4651      	mov	r1, sl
 8003814:	ebb2 0801 	subs.w	r8, r2, r1
 8003818:	4659      	mov	r1, fp
 800381a:	eb63 0901 	sbc.w	r9, r3, r1
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	f04f 0300 	mov.w	r3, #0
 8003826:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800382a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800382e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003832:	4690      	mov	r8, r2
 8003834:	4699      	mov	r9, r3
 8003836:	4623      	mov	r3, r4
 8003838:	eb18 0303 	adds.w	r3, r8, r3
 800383c:	60bb      	str	r3, [r7, #8]
 800383e:	462b      	mov	r3, r5
 8003840:	eb49 0303 	adc.w	r3, r9, r3
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	f04f 0300 	mov.w	r3, #0
 800384e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003852:	4629      	mov	r1, r5
 8003854:	024b      	lsls	r3, r1, #9
 8003856:	4621      	mov	r1, r4
 8003858:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800385c:	4621      	mov	r1, r4
 800385e:	024a      	lsls	r2, r1, #9
 8003860:	4610      	mov	r0, r2
 8003862:	4619      	mov	r1, r3
 8003864:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003866:	2200      	movs	r2, #0
 8003868:	62bb      	str	r3, [r7, #40]	@ 0x28
 800386a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800386c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003870:	f7fc fd16 	bl	80002a0 <__aeabi_uldivmod>
 8003874:	4602      	mov	r2, r0
 8003876:	460b      	mov	r3, r1
 8003878:	4613      	mov	r3, r2
 800387a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800387c:	e058      	b.n	8003930 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800387e:	4b38      	ldr	r3, [pc, #224]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x200>)
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	099b      	lsrs	r3, r3, #6
 8003884:	2200      	movs	r2, #0
 8003886:	4618      	mov	r0, r3
 8003888:	4611      	mov	r1, r2
 800388a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800388e:	623b      	str	r3, [r7, #32]
 8003890:	2300      	movs	r3, #0
 8003892:	627b      	str	r3, [r7, #36]	@ 0x24
 8003894:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003898:	4642      	mov	r2, r8
 800389a:	464b      	mov	r3, r9
 800389c:	f04f 0000 	mov.w	r0, #0
 80038a0:	f04f 0100 	mov.w	r1, #0
 80038a4:	0159      	lsls	r1, r3, #5
 80038a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038aa:	0150      	lsls	r0, r2, #5
 80038ac:	4602      	mov	r2, r0
 80038ae:	460b      	mov	r3, r1
 80038b0:	4641      	mov	r1, r8
 80038b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80038b6:	4649      	mov	r1, r9
 80038b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80038bc:	f04f 0200 	mov.w	r2, #0
 80038c0:	f04f 0300 	mov.w	r3, #0
 80038c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80038c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80038cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80038d0:	ebb2 040a 	subs.w	r4, r2, sl
 80038d4:	eb63 050b 	sbc.w	r5, r3, fp
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	00eb      	lsls	r3, r5, #3
 80038e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038e6:	00e2      	lsls	r2, r4, #3
 80038e8:	4614      	mov	r4, r2
 80038ea:	461d      	mov	r5, r3
 80038ec:	4643      	mov	r3, r8
 80038ee:	18e3      	adds	r3, r4, r3
 80038f0:	603b      	str	r3, [r7, #0]
 80038f2:	464b      	mov	r3, r9
 80038f4:	eb45 0303 	adc.w	r3, r5, r3
 80038f8:	607b      	str	r3, [r7, #4]
 80038fa:	f04f 0200 	mov.w	r2, #0
 80038fe:	f04f 0300 	mov.w	r3, #0
 8003902:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003906:	4629      	mov	r1, r5
 8003908:	028b      	lsls	r3, r1, #10
 800390a:	4621      	mov	r1, r4
 800390c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003910:	4621      	mov	r1, r4
 8003912:	028a      	lsls	r2, r1, #10
 8003914:	4610      	mov	r0, r2
 8003916:	4619      	mov	r1, r3
 8003918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800391a:	2200      	movs	r2, #0
 800391c:	61bb      	str	r3, [r7, #24]
 800391e:	61fa      	str	r2, [r7, #28]
 8003920:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003924:	f7fc fcbc 	bl	80002a0 <__aeabi_uldivmod>
 8003928:	4602      	mov	r2, r0
 800392a:	460b      	mov	r3, r1
 800392c:	4613      	mov	r3, r2
 800392e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003930:	4b0b      	ldr	r3, [pc, #44]	@ (8003960 <HAL_RCC_GetSysClockFreq+0x200>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	0c1b      	lsrs	r3, r3, #16
 8003936:	f003 0303 	and.w	r3, r3, #3
 800393a:	3301      	adds	r3, #1
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003940:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003942:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003944:	fbb2 f3f3 	udiv	r3, r2, r3
 8003948:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800394a:	e002      	b.n	8003952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800394c:	4b05      	ldr	r3, [pc, #20]	@ (8003964 <HAL_RCC_GetSysClockFreq+0x204>)
 800394e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003954:	4618      	mov	r0, r3
 8003956:	3750      	adds	r7, #80	@ 0x50
 8003958:	46bd      	mov	sp, r7
 800395a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800395e:	bf00      	nop
 8003960:	40023800 	.word	0x40023800
 8003964:	00f42400 	.word	0x00f42400
 8003968:	007a1200 	.word	0x007a1200

0800396c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003970:	4b03      	ldr	r3, [pc, #12]	@ (8003980 <HAL_RCC_GetHCLKFreq+0x14>)
 8003972:	681b      	ldr	r3, [r3, #0]
}
 8003974:	4618      	mov	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	20000000 	.word	0x20000000

08003984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003988:	f7ff fff0 	bl	800396c <HAL_RCC_GetHCLKFreq>
 800398c:	4602      	mov	r2, r0
 800398e:	4b05      	ldr	r3, [pc, #20]	@ (80039a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	0a9b      	lsrs	r3, r3, #10
 8003994:	f003 0307 	and.w	r3, r3, #7
 8003998:	4903      	ldr	r1, [pc, #12]	@ (80039a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800399a:	5ccb      	ldrb	r3, [r1, r3]
 800399c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	40023800 	.word	0x40023800
 80039a8:	08005cbc 	.word	0x08005cbc

080039ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b086      	sub	sp, #24
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10b      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d105      	bne.n	80039e0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d075      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039e0:	4b91      	ldr	r3, [pc, #580]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039e6:	f7fe fbfb 	bl	80021e0 <HAL_GetTick>
 80039ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039ec:	e008      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039ee:	f7fe fbf7 	bl	80021e0 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e189      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a00:	4b8a      	ldr	r3, [pc, #552]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1f0      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d009      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	019a      	lsls	r2, r3, #6
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	071b      	lsls	r3, r3, #28
 8003a24:	4981      	ldr	r1, [pc, #516]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d01f      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a38:	4b7c      	ldr	r3, [pc, #496]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a3e:	0f1b      	lsrs	r3, r3, #28
 8003a40:	f003 0307 	and.w	r3, r3, #7
 8003a44:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	019a      	lsls	r2, r3, #6
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	061b      	lsls	r3, r3, #24
 8003a52:	431a      	orrs	r2, r3
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	071b      	lsls	r3, r3, #28
 8003a58:	4974      	ldr	r1, [pc, #464]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a60:	4b72      	ldr	r3, [pc, #456]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003a66:	f023 021f 	bic.w	r2, r3, #31
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69db      	ldr	r3, [r3, #28]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	496e      	ldr	r1, [pc, #440]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00d      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	019a      	lsls	r2, r3, #6
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	061b      	lsls	r3, r3, #24
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	071b      	lsls	r3, r3, #28
 8003a98:	4964      	ldr	r1, [pc, #400]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003aa0:	4b61      	ldr	r3, [pc, #388]	@ (8003c28 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003aa6:	f7fe fb9b 	bl	80021e0 <HAL_GetTick>
 8003aaa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003aac:	e008      	b.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003aae:	f7fe fb97 	bl	80021e0 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e129      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ac0:	4b5a      	ldr	r3, [pc, #360]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0f0      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d105      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d079      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003ae4:	4b52      	ldr	r3, [pc, #328]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003aea:	f7fe fb79 	bl	80021e0 <HAL_GetTick>
 8003aee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003af0:	e008      	b.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003af2:	f7fe fb75 	bl	80021e0 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e107      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b04:	4b49      	ldr	r3, [pc, #292]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b10:	d0ef      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d020      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b1e:	4b43      	ldr	r3, [pc, #268]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b24:	0f1b      	lsrs	r3, r3, #28
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	019a      	lsls	r2, r3, #6
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	061b      	lsls	r3, r3, #24
 8003b38:	431a      	orrs	r2, r3
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	071b      	lsls	r3, r3, #28
 8003b3e:	493b      	ldr	r1, [pc, #236]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b46:	4b39      	ldr	r3, [pc, #228]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b4c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	3b01      	subs	r3, #1
 8003b56:	021b      	lsls	r3, r3, #8
 8003b58:	4934      	ldr	r1, [pc, #208]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d01e      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b6c:	4b2f      	ldr	r3, [pc, #188]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b72:	0e1b      	lsrs	r3, r3, #24
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	019a      	lsls	r2, r3, #6
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	061b      	lsls	r3, r3, #24
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	071b      	lsls	r3, r3, #28
 8003b8c:	4927      	ldr	r1, [pc, #156]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003b94:	4b25      	ldr	r3, [pc, #148]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b9a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ba2:	4922      	ldr	r1, [pc, #136]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003baa:	4b21      	ldr	r3, [pc, #132]	@ (8003c30 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bb0:	f7fe fb16 	bl	80021e0 <HAL_GetTick>
 8003bb4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bb8:	f7fe fb12 	bl	80021e0 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e0a4      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bca:	4b18      	ldr	r3, [pc, #96]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003bd2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bd6:	d1ef      	bne.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0320 	and.w	r3, r3, #32
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	f000 808b 	beq.w	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003be6:	2300      	movs	r3, #0
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	4b10      	ldr	r3, [pc, #64]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bee:	4a0f      	ldr	r2, [pc, #60]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8003c2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c02:	4b0c      	ldr	r3, [pc, #48]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a0b      	ldr	r2, [pc, #44]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c0e:	f7fe fae7 	bl	80021e0 <HAL_GetTick>
 8003c12:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003c14:	e010      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c16:	f7fe fae3 	bl	80021e0 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d909      	bls.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e075      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003c28:	42470068 	.word	0x42470068
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	42470070 	.word	0x42470070
 8003c34:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003c38:	4b38      	ldr	r3, [pc, #224]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0e8      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c44:	4b36      	ldr	r3, [pc, #216]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c4c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d02f      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d028      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c62:	4b2f      	ldr	r3, [pc, #188]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c6a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c6c:	4b2d      	ldr	r3, [pc, #180]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003c6e:	2201      	movs	r2, #1
 8003c70:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c72:	4b2c      	ldr	r3, [pc, #176]	@ (8003d24 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c78:	4a29      	ldr	r2, [pc, #164]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c7e:	4b28      	ldr	r3, [pc, #160]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d114      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c8a:	f7fe faa9 	bl	80021e0 <HAL_GetTick>
 8003c8e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c90:	e00a      	b.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c92:	f7fe faa5 	bl	80021e0 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e035      	b.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca8:	4b1d      	ldr	r3, [pc, #116]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cac:	f003 0302 	and.w	r3, r3, #2
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0ee      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cc0:	d10d      	bne.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003cc2:	4b17      	ldr	r3, [pc, #92]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cce:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003cd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cd6:	4912      	ldr	r1, [pc, #72]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	608b      	str	r3, [r1, #8]
 8003cdc:	e005      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003cde:	4b10      	ldr	r3, [pc, #64]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	4a0f      	ldr	r2, [pc, #60]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ce4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003ce8:	6093      	str	r3, [r2, #8]
 8003cea:	4b0d      	ldr	r3, [pc, #52]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003cec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf6:	490a      	ldr	r1, [pc, #40]	@ (8003d20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0310 	and.w	r3, r3, #16
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d004      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8003d0e:	4b06      	ldr	r3, [pc, #24]	@ (8003d28 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003d10:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3718      	adds	r7, #24
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	40007000 	.word	0x40007000
 8003d20:	40023800 	.word	0x40023800
 8003d24:	42470e40 	.word	0x42470e40
 8003d28:	424711e0 	.word	0x424711e0

08003d2c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e01c      	b.n	8003d78 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	795b      	ldrb	r3, [r3, #5]
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d105      	bne.n	8003d54 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fe f880 	bl	8001e54 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f042 0204 	orr.w	r2, r2, #4
 8003d68:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	791b      	ldrb	r3, [r3, #4]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d101      	bne.n	8003d9a <HAL_RNG_GenerateRandomNumber+0x1a>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e044      	b.n	8003e24 <HAL_RNG_GenerateRandomNumber+0xa4>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	795b      	ldrb	r3, [r3, #5]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d133      	bne.n	8003e12 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2202      	movs	r2, #2
 8003dae:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003db0:	f7fe fa16 	bl	80021e0 <HAL_GetTick>
 8003db4:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003db6:	e018      	b.n	8003dea <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003db8:	f7fe fa12 	bl	80021e0 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d911      	bls.n	8003dea <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d00a      	beq.n	8003dea <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2202      	movs	r2, #2
 8003dde:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e01c      	b.n	8003e24 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d1df      	bne.n	8003db8 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	715a      	strb	r2, [r3, #5]
 8003e10:	e004      	b.n	8003e1c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2204      	movs	r2, #4
 8003e16:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	711a      	strb	r2, [r3, #4]

  return status;
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e07b      	b.n	8003f36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d108      	bne.n	8003e58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e4e:	d009      	beq.n	8003e64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	61da      	str	r2, [r3, #28]
 8003e56:	e005      	b.n	8003e64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d106      	bne.n	8003e84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7fe f80a 	bl	8001e98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003eac:	431a      	orrs	r2, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	431a      	orrs	r2, r3
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ed4:	431a      	orrs	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ee8:	ea42 0103 	orr.w	r1, r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ef0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	0c1b      	lsrs	r3, r3, #16
 8003f02:	f003 0104 	and.w	r1, r3, #4
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0a:	f003 0210 	and.w	r2, r3, #16
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	69da      	ldr	r2, [r3, #28]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b082      	sub	sp, #8
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d101      	bne.n	8003f50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e041      	b.n	8003fd4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d106      	bne.n	8003f6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7fd ffdf 	bl	8001f28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2202      	movs	r2, #2
 8003f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	4610      	mov	r0, r2
 8003f7e:	f000 fa0d 	bl	800439c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2201      	movs	r2, #1
 8003f96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d020      	beq.n	8004040 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d01b      	beq.n	8004040 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f06f 0202 	mvn.w	r2, #2
 8004010:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f999 	bl	800435e <HAL_TIM_IC_CaptureCallback>
 800402c:	e005      	b.n	800403a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f98b 	bl	800434a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 f99c 	bl	8004372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	d020      	beq.n	800408c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b00      	cmp	r3, #0
 8004052:	d01b      	beq.n	800408c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f06f 0204 	mvn.w	r2, #4
 800405c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2202      	movs	r2, #2
 8004062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800406e:	2b00      	cmp	r3, #0
 8004070:	d003      	beq.n	800407a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f973 	bl	800435e <HAL_TIM_IC_CaptureCallback>
 8004078:	e005      	b.n	8004086 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f965 	bl	800434a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 f976 	bl	8004372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f003 0308 	and.w	r3, r3, #8
 8004092:	2b00      	cmp	r3, #0
 8004094:	d020      	beq.n	80040d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f003 0308 	and.w	r3, r3, #8
 800409c:	2b00      	cmp	r3, #0
 800409e:	d01b      	beq.n	80040d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f06f 0208 	mvn.w	r2, #8
 80040a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2204      	movs	r2, #4
 80040ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f003 0303 	and.w	r3, r3, #3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f94d 	bl	800435e <HAL_TIM_IC_CaptureCallback>
 80040c4:	e005      	b.n	80040d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 f93f 	bl	800434a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f950 	bl	8004372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f003 0310 	and.w	r3, r3, #16
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d020      	beq.n	8004124 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d01b      	beq.n	8004124 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f06f 0210 	mvn.w	r2, #16
 80040f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2208      	movs	r2, #8
 80040fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 f927 	bl	800435e <HAL_TIM_IC_CaptureCallback>
 8004110:	e005      	b.n	800411e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f919 	bl	800434a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f000 f92a 	bl	8004372 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2200      	movs	r2, #0
 8004122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00c      	beq.n	8004148 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f003 0301 	and.w	r3, r3, #1
 8004134:	2b00      	cmp	r3, #0
 8004136:	d007      	beq.n	8004148 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f06f 0201 	mvn.w	r2, #1
 8004140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f7fd ff24 	bl	8001f90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00c      	beq.n	800416c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004158:	2b00      	cmp	r3, #0
 800415a:	d007      	beq.n	800416c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fae4 	bl	8004734 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004172:	2b00      	cmp	r3, #0
 8004174:	d00c      	beq.n	8004190 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800417c:	2b00      	cmp	r3, #0
 800417e:	d007      	beq.n	8004190 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f8fb 	bl	8004386 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00c      	beq.n	80041b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f003 0320 	and.w	r3, r3, #32
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d007      	beq.n	80041b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f06f 0220 	mvn.w	r2, #32
 80041ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 fab6 	bl	8004720 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041b4:	bf00      	nop
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041c6:	2300      	movs	r3, #0
 80041c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_TIM_ConfigClockSource+0x1c>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e0b4      	b.n	8004342 <HAL_TIM_ConfigClockSource+0x186>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80041f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004210:	d03e      	beq.n	8004290 <HAL_TIM_ConfigClockSource+0xd4>
 8004212:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004216:	f200 8087 	bhi.w	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 800421a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800421e:	f000 8086 	beq.w	800432e <HAL_TIM_ConfigClockSource+0x172>
 8004222:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004226:	d87f      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004228:	2b70      	cmp	r3, #112	@ 0x70
 800422a:	d01a      	beq.n	8004262 <HAL_TIM_ConfigClockSource+0xa6>
 800422c:	2b70      	cmp	r3, #112	@ 0x70
 800422e:	d87b      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004230:	2b60      	cmp	r3, #96	@ 0x60
 8004232:	d050      	beq.n	80042d6 <HAL_TIM_ConfigClockSource+0x11a>
 8004234:	2b60      	cmp	r3, #96	@ 0x60
 8004236:	d877      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004238:	2b50      	cmp	r3, #80	@ 0x50
 800423a:	d03c      	beq.n	80042b6 <HAL_TIM_ConfigClockSource+0xfa>
 800423c:	2b50      	cmp	r3, #80	@ 0x50
 800423e:	d873      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004240:	2b40      	cmp	r3, #64	@ 0x40
 8004242:	d058      	beq.n	80042f6 <HAL_TIM_ConfigClockSource+0x13a>
 8004244:	2b40      	cmp	r3, #64	@ 0x40
 8004246:	d86f      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004248:	2b30      	cmp	r3, #48	@ 0x30
 800424a:	d064      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x15a>
 800424c:	2b30      	cmp	r3, #48	@ 0x30
 800424e:	d86b      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004250:	2b20      	cmp	r3, #32
 8004252:	d060      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x15a>
 8004254:	2b20      	cmp	r3, #32
 8004256:	d867      	bhi.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
 8004258:	2b00      	cmp	r3, #0
 800425a:	d05c      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x15a>
 800425c:	2b10      	cmp	r3, #16
 800425e:	d05a      	beq.n	8004316 <HAL_TIM_ConfigClockSource+0x15a>
 8004260:	e062      	b.n	8004328 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004272:	f000 f9b9 	bl	80045e8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004284:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	609a      	str	r2, [r3, #8]
      break;
 800428e:	e04f      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042a0:	f000 f9a2 	bl	80045e8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689a      	ldr	r2, [r3, #8]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042b2:	609a      	str	r2, [r3, #8]
      break;
 80042b4:	e03c      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c2:	461a      	mov	r2, r3
 80042c4:	f000 f916 	bl	80044f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2150      	movs	r1, #80	@ 0x50
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 f96f 	bl	80045b2 <TIM_ITRx_SetConfig>
      break;
 80042d4:	e02c      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042e2:	461a      	mov	r2, r3
 80042e4:	f000 f935 	bl	8004552 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2160      	movs	r1, #96	@ 0x60
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 f95f 	bl	80045b2 <TIM_ITRx_SetConfig>
      break;
 80042f4:	e01c      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004302:	461a      	mov	r2, r3
 8004304:	f000 f8f6 	bl	80044f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	2140      	movs	r1, #64	@ 0x40
 800430e:	4618      	mov	r0, r3
 8004310:	f000 f94f 	bl	80045b2 <TIM_ITRx_SetConfig>
      break;
 8004314:	e00c      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4619      	mov	r1, r3
 8004320:	4610      	mov	r0, r2
 8004322:	f000 f946 	bl	80045b2 <TIM_ITRx_SetConfig>
      break;
 8004326:	e003      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	73fb      	strb	r3, [r7, #15]
      break;
 800432c:	e000      	b.n	8004330 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800432e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004340:	7bfb      	ldrb	r3, [r7, #15]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004352:	bf00      	nop
 8004354:	370c      	adds	r7, #12
 8004356:	46bd      	mov	sp, r7
 8004358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435c:	4770      	bx	lr

0800435e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800435e:	b480      	push	{r7}
 8004360:	b083      	sub	sp, #12
 8004362:	af00      	add	r7, sp, #0
 8004364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004366:	bf00      	nop
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800437a:	bf00      	nop
 800437c:	370c      	adds	r7, #12
 800437e:	46bd      	mov	sp, r7
 8004380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004384:	4770      	bx	lr

08004386 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
	...

0800439c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a46      	ldr	r2, [pc, #280]	@ (80044c8 <TIM_Base_SetConfig+0x12c>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d013      	beq.n	80043dc <TIM_Base_SetConfig+0x40>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ba:	d00f      	beq.n	80043dc <TIM_Base_SetConfig+0x40>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	4a43      	ldr	r2, [pc, #268]	@ (80044cc <TIM_Base_SetConfig+0x130>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d00b      	beq.n	80043dc <TIM_Base_SetConfig+0x40>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	4a42      	ldr	r2, [pc, #264]	@ (80044d0 <TIM_Base_SetConfig+0x134>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d007      	beq.n	80043dc <TIM_Base_SetConfig+0x40>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	4a41      	ldr	r2, [pc, #260]	@ (80044d4 <TIM_Base_SetConfig+0x138>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d003      	beq.n	80043dc <TIM_Base_SetConfig+0x40>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a40      	ldr	r2, [pc, #256]	@ (80044d8 <TIM_Base_SetConfig+0x13c>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d108      	bne.n	80043ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a35      	ldr	r2, [pc, #212]	@ (80044c8 <TIM_Base_SetConfig+0x12c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d02b      	beq.n	800444e <TIM_Base_SetConfig+0xb2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043fc:	d027      	beq.n	800444e <TIM_Base_SetConfig+0xb2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a32      	ldr	r2, [pc, #200]	@ (80044cc <TIM_Base_SetConfig+0x130>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d023      	beq.n	800444e <TIM_Base_SetConfig+0xb2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a31      	ldr	r2, [pc, #196]	@ (80044d0 <TIM_Base_SetConfig+0x134>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d01f      	beq.n	800444e <TIM_Base_SetConfig+0xb2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a30      	ldr	r2, [pc, #192]	@ (80044d4 <TIM_Base_SetConfig+0x138>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d01b      	beq.n	800444e <TIM_Base_SetConfig+0xb2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a2f      	ldr	r2, [pc, #188]	@ (80044d8 <TIM_Base_SetConfig+0x13c>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d017      	beq.n	800444e <TIM_Base_SetConfig+0xb2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a2e      	ldr	r2, [pc, #184]	@ (80044dc <TIM_Base_SetConfig+0x140>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d013      	beq.n	800444e <TIM_Base_SetConfig+0xb2>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a2d      	ldr	r2, [pc, #180]	@ (80044e0 <TIM_Base_SetConfig+0x144>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d00f      	beq.n	800444e <TIM_Base_SetConfig+0xb2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a2c      	ldr	r2, [pc, #176]	@ (80044e4 <TIM_Base_SetConfig+0x148>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d00b      	beq.n	800444e <TIM_Base_SetConfig+0xb2>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a2b      	ldr	r2, [pc, #172]	@ (80044e8 <TIM_Base_SetConfig+0x14c>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d007      	beq.n	800444e <TIM_Base_SetConfig+0xb2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a2a      	ldr	r2, [pc, #168]	@ (80044ec <TIM_Base_SetConfig+0x150>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d003      	beq.n	800444e <TIM_Base_SetConfig+0xb2>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a29      	ldr	r2, [pc, #164]	@ (80044f0 <TIM_Base_SetConfig+0x154>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d108      	bne.n	8004460 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4313      	orrs	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	4313      	orrs	r3, r2
 800446c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	4a10      	ldr	r2, [pc, #64]	@ (80044c8 <TIM_Base_SetConfig+0x12c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d003      	beq.n	8004494 <TIM_Base_SetConfig+0xf8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	4a12      	ldr	r2, [pc, #72]	@ (80044d8 <TIM_Base_SetConfig+0x13c>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d103      	bne.n	800449c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d105      	bne.n	80044ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f023 0201 	bic.w	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	611a      	str	r2, [r3, #16]
  }
}
 80044ba:	bf00      	nop
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40010000 	.word	0x40010000
 80044cc:	40000400 	.word	0x40000400
 80044d0:	40000800 	.word	0x40000800
 80044d4:	40000c00 	.word	0x40000c00
 80044d8:	40010400 	.word	0x40010400
 80044dc:	40014000 	.word	0x40014000
 80044e0:	40014400 	.word	0x40014400
 80044e4:	40014800 	.word	0x40014800
 80044e8:	40001800 	.word	0x40001800
 80044ec:	40001c00 	.word	0x40001c00
 80044f0:	40002000 	.word	0x40002000

080044f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	f023 0201 	bic.w	r2, r3, #1
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	699b      	ldr	r3, [r3, #24]
 8004516:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800451e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	4313      	orrs	r3, r2
 8004528:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	f023 030a 	bic.w	r3, r3, #10
 8004530:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004532:	697a      	ldr	r2, [r7, #20]
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	4313      	orrs	r3, r2
 8004538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	621a      	str	r2, [r3, #32]
}
 8004546:	bf00      	nop
 8004548:	371c      	adds	r7, #28
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr

08004552 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004552:	b480      	push	{r7}
 8004554:	b087      	sub	sp, #28
 8004556:	af00      	add	r7, sp, #0
 8004558:	60f8      	str	r0, [r7, #12]
 800455a:	60b9      	str	r1, [r7, #8]
 800455c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	f023 0210 	bic.w	r2, r3, #16
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800457c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	031b      	lsls	r3, r3, #12
 8004582:	693a      	ldr	r2, [r7, #16]
 8004584:	4313      	orrs	r3, r2
 8004586:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800458e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	621a      	str	r2, [r3, #32]
}
 80045a6:	bf00      	nop
 80045a8:	371c      	adds	r7, #28
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045b2:	b480      	push	{r7}
 80045b4:	b085      	sub	sp, #20
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
 80045ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f043 0307 	orr.w	r3, r3, #7
 80045d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68fa      	ldr	r2, [r7, #12]
 80045da:	609a      	str	r2, [r3, #8]
}
 80045dc:	bf00      	nop
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004602:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	021a      	lsls	r2, r3, #8
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	431a      	orrs	r2, r3
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	4313      	orrs	r3, r2
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	4313      	orrs	r3, r2
 8004614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	609a      	str	r2, [r3, #8]
}
 800461c:	bf00      	nop
 800461e:	371c      	adds	r7, #28
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr

08004628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004638:	2b01      	cmp	r3, #1
 800463a:	d101      	bne.n	8004640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800463c:	2302      	movs	r3, #2
 800463e:	e05a      	b.n	80046f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004666:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	4313      	orrs	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a21      	ldr	r2, [pc, #132]	@ (8004704 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d022      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800468c:	d01d      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a1d      	ldr	r2, [pc, #116]	@ (8004708 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d018      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a1b      	ldr	r2, [pc, #108]	@ (800470c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d013      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004710 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00e      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a18      	ldr	r2, [pc, #96]	@ (8004714 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d009      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a17      	ldr	r2, [pc, #92]	@ (8004718 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d004      	beq.n	80046ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a15      	ldr	r2, [pc, #84]	@ (800471c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d10c      	bne.n	80046e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80046d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	68ba      	ldr	r2, [r7, #8]
 80046d8:	4313      	orrs	r3, r2
 80046da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	40010000 	.word	0x40010000
 8004708:	40000400 	.word	0x40000400
 800470c:	40000800 	.word	0x40000800
 8004710:	40000c00 	.word	0x40000c00
 8004714:	40010400 	.word	0x40010400
 8004718:	40014000 	.word	0x40014000
 800471c:	40001800 	.word	0x40001800

08004720 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <findslot>:
 8004748:	4b0a      	ldr	r3, [pc, #40]	@ (8004774 <findslot+0x2c>)
 800474a:	b510      	push	{r4, lr}
 800474c:	4604      	mov	r4, r0
 800474e:	6818      	ldr	r0, [r3, #0]
 8004750:	b118      	cbz	r0, 800475a <findslot+0x12>
 8004752:	6a03      	ldr	r3, [r0, #32]
 8004754:	b90b      	cbnz	r3, 800475a <findslot+0x12>
 8004756:	f000 fb19 	bl	8004d8c <__sinit>
 800475a:	2c13      	cmp	r4, #19
 800475c:	d807      	bhi.n	800476e <findslot+0x26>
 800475e:	4806      	ldr	r0, [pc, #24]	@ (8004778 <findslot+0x30>)
 8004760:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8004764:	3201      	adds	r2, #1
 8004766:	d002      	beq.n	800476e <findslot+0x26>
 8004768:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800476c:	bd10      	pop	{r4, pc}
 800476e:	2000      	movs	r0, #0
 8004770:	e7fc      	b.n	800476c <findslot+0x24>
 8004772:	bf00      	nop
 8004774:	20000020 	.word	0x20000020
 8004778:	200002d4 	.word	0x200002d4

0800477c <error>:
 800477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477e:	4604      	mov	r4, r0
 8004780:	f000 fbba 	bl	8004ef8 <__errno>
 8004784:	2613      	movs	r6, #19
 8004786:	4605      	mov	r5, r0
 8004788:	2700      	movs	r7, #0
 800478a:	4630      	mov	r0, r6
 800478c:	4639      	mov	r1, r7
 800478e:	beab      	bkpt	0x00ab
 8004790:	4606      	mov	r6, r0
 8004792:	602e      	str	r6, [r5, #0]
 8004794:	4620      	mov	r0, r4
 8004796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004798 <checkerror>:
 8004798:	1c43      	adds	r3, r0, #1
 800479a:	d101      	bne.n	80047a0 <checkerror+0x8>
 800479c:	f7ff bfee 	b.w	800477c <error>
 80047a0:	4770      	bx	lr

080047a2 <_swiread>:
 80047a2:	b530      	push	{r4, r5, lr}
 80047a4:	b085      	sub	sp, #20
 80047a6:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80047aa:	9203      	str	r2, [sp, #12]
 80047ac:	2406      	movs	r4, #6
 80047ae:	ad01      	add	r5, sp, #4
 80047b0:	4620      	mov	r0, r4
 80047b2:	4629      	mov	r1, r5
 80047b4:	beab      	bkpt	0x00ab
 80047b6:	4604      	mov	r4, r0
 80047b8:	4620      	mov	r0, r4
 80047ba:	f7ff ffed 	bl	8004798 <checkerror>
 80047be:	b005      	add	sp, #20
 80047c0:	bd30      	pop	{r4, r5, pc}

080047c2 <_read>:
 80047c2:	b570      	push	{r4, r5, r6, lr}
 80047c4:	460e      	mov	r6, r1
 80047c6:	4614      	mov	r4, r2
 80047c8:	f7ff ffbe 	bl	8004748 <findslot>
 80047cc:	4605      	mov	r5, r0
 80047ce:	b930      	cbnz	r0, 80047de <_read+0x1c>
 80047d0:	f000 fb92 	bl	8004ef8 <__errno>
 80047d4:	2309      	movs	r3, #9
 80047d6:	6003      	str	r3, [r0, #0]
 80047d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80047dc:	bd70      	pop	{r4, r5, r6, pc}
 80047de:	6800      	ldr	r0, [r0, #0]
 80047e0:	4622      	mov	r2, r4
 80047e2:	4631      	mov	r1, r6
 80047e4:	f7ff ffdd 	bl	80047a2 <_swiread>
 80047e8:	1c43      	adds	r3, r0, #1
 80047ea:	d0f5      	beq.n	80047d8 <_read+0x16>
 80047ec:	686b      	ldr	r3, [r5, #4]
 80047ee:	1a20      	subs	r0, r4, r0
 80047f0:	4403      	add	r3, r0
 80047f2:	606b      	str	r3, [r5, #4]
 80047f4:	e7f2      	b.n	80047dc <_read+0x1a>

080047f6 <_swilseek>:
 80047f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047f8:	460c      	mov	r4, r1
 80047fa:	4616      	mov	r6, r2
 80047fc:	f7ff ffa4 	bl	8004748 <findslot>
 8004800:	4605      	mov	r5, r0
 8004802:	b940      	cbnz	r0, 8004816 <_swilseek+0x20>
 8004804:	f000 fb78 	bl	8004ef8 <__errno>
 8004808:	2309      	movs	r3, #9
 800480a:	6003      	str	r3, [r0, #0]
 800480c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004810:	4620      	mov	r0, r4
 8004812:	b003      	add	sp, #12
 8004814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004816:	2e02      	cmp	r6, #2
 8004818:	d903      	bls.n	8004822 <_swilseek+0x2c>
 800481a:	f000 fb6d 	bl	8004ef8 <__errno>
 800481e:	2316      	movs	r3, #22
 8004820:	e7f3      	b.n	800480a <_swilseek+0x14>
 8004822:	2e01      	cmp	r6, #1
 8004824:	d112      	bne.n	800484c <_swilseek+0x56>
 8004826:	6843      	ldr	r3, [r0, #4]
 8004828:	18e4      	adds	r4, r4, r3
 800482a:	d4f6      	bmi.n	800481a <_swilseek+0x24>
 800482c:	682b      	ldr	r3, [r5, #0]
 800482e:	260a      	movs	r6, #10
 8004830:	e9cd 3400 	strd	r3, r4, [sp]
 8004834:	466f      	mov	r7, sp
 8004836:	4630      	mov	r0, r6
 8004838:	4639      	mov	r1, r7
 800483a:	beab      	bkpt	0x00ab
 800483c:	4606      	mov	r6, r0
 800483e:	4630      	mov	r0, r6
 8004840:	f7ff ffaa 	bl	8004798 <checkerror>
 8004844:	2800      	cmp	r0, #0
 8004846:	dbe1      	blt.n	800480c <_swilseek+0x16>
 8004848:	606c      	str	r4, [r5, #4]
 800484a:	e7e1      	b.n	8004810 <_swilseek+0x1a>
 800484c:	2e02      	cmp	r6, #2
 800484e:	6803      	ldr	r3, [r0, #0]
 8004850:	d1ec      	bne.n	800482c <_swilseek+0x36>
 8004852:	9300      	str	r3, [sp, #0]
 8004854:	260c      	movs	r6, #12
 8004856:	466f      	mov	r7, sp
 8004858:	4630      	mov	r0, r6
 800485a:	4639      	mov	r1, r7
 800485c:	beab      	bkpt	0x00ab
 800485e:	4606      	mov	r6, r0
 8004860:	4630      	mov	r0, r6
 8004862:	f7ff ff99 	bl	8004798 <checkerror>
 8004866:	1c43      	adds	r3, r0, #1
 8004868:	d0d0      	beq.n	800480c <_swilseek+0x16>
 800486a:	4404      	add	r4, r0
 800486c:	e7de      	b.n	800482c <_swilseek+0x36>

0800486e <_lseek>:
 800486e:	f7ff bfc2 	b.w	80047f6 <_swilseek>

08004872 <_swiwrite>:
 8004872:	b530      	push	{r4, r5, lr}
 8004874:	b085      	sub	sp, #20
 8004876:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800487a:	9203      	str	r2, [sp, #12]
 800487c:	2405      	movs	r4, #5
 800487e:	ad01      	add	r5, sp, #4
 8004880:	4620      	mov	r0, r4
 8004882:	4629      	mov	r1, r5
 8004884:	beab      	bkpt	0x00ab
 8004886:	4604      	mov	r4, r0
 8004888:	4620      	mov	r0, r4
 800488a:	f7ff ff85 	bl	8004798 <checkerror>
 800488e:	b005      	add	sp, #20
 8004890:	bd30      	pop	{r4, r5, pc}

08004892 <_write>:
 8004892:	b570      	push	{r4, r5, r6, lr}
 8004894:	460e      	mov	r6, r1
 8004896:	4615      	mov	r5, r2
 8004898:	f7ff ff56 	bl	8004748 <findslot>
 800489c:	4604      	mov	r4, r0
 800489e:	b930      	cbnz	r0, 80048ae <_write+0x1c>
 80048a0:	f000 fb2a 	bl	8004ef8 <__errno>
 80048a4:	2309      	movs	r3, #9
 80048a6:	6003      	str	r3, [r0, #0]
 80048a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048ac:	bd70      	pop	{r4, r5, r6, pc}
 80048ae:	6800      	ldr	r0, [r0, #0]
 80048b0:	462a      	mov	r2, r5
 80048b2:	4631      	mov	r1, r6
 80048b4:	f7ff ffdd 	bl	8004872 <_swiwrite>
 80048b8:	1e03      	subs	r3, r0, #0
 80048ba:	dbf5      	blt.n	80048a8 <_write+0x16>
 80048bc:	6862      	ldr	r2, [r4, #4]
 80048be:	1ae8      	subs	r0, r5, r3
 80048c0:	4402      	add	r2, r0
 80048c2:	42ab      	cmp	r3, r5
 80048c4:	6062      	str	r2, [r4, #4]
 80048c6:	d1f1      	bne.n	80048ac <_write+0x1a>
 80048c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80048cc:	2000      	movs	r0, #0
 80048ce:	f7ff bf55 	b.w	800477c <error>

080048d2 <_swiclose>:
 80048d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048d4:	2402      	movs	r4, #2
 80048d6:	9001      	str	r0, [sp, #4]
 80048d8:	ad01      	add	r5, sp, #4
 80048da:	4620      	mov	r0, r4
 80048dc:	4629      	mov	r1, r5
 80048de:	beab      	bkpt	0x00ab
 80048e0:	4604      	mov	r4, r0
 80048e2:	4620      	mov	r0, r4
 80048e4:	f7ff ff58 	bl	8004798 <checkerror>
 80048e8:	b003      	add	sp, #12
 80048ea:	bd30      	pop	{r4, r5, pc}

080048ec <_close>:
 80048ec:	b538      	push	{r3, r4, r5, lr}
 80048ee:	4605      	mov	r5, r0
 80048f0:	f7ff ff2a 	bl	8004748 <findslot>
 80048f4:	4604      	mov	r4, r0
 80048f6:	b930      	cbnz	r0, 8004906 <_close+0x1a>
 80048f8:	f000 fafe 	bl	8004ef8 <__errno>
 80048fc:	2309      	movs	r3, #9
 80048fe:	6003      	str	r3, [r0, #0]
 8004900:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004904:	bd38      	pop	{r3, r4, r5, pc}
 8004906:	3d01      	subs	r5, #1
 8004908:	2d01      	cmp	r5, #1
 800490a:	d809      	bhi.n	8004920 <_close+0x34>
 800490c:	4b07      	ldr	r3, [pc, #28]	@ (800492c <_close+0x40>)
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	429a      	cmp	r2, r3
 8004914:	d104      	bne.n	8004920 <_close+0x34>
 8004916:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800491a:	6023      	str	r3, [r4, #0]
 800491c:	2000      	movs	r0, #0
 800491e:	e7f1      	b.n	8004904 <_close+0x18>
 8004920:	6820      	ldr	r0, [r4, #0]
 8004922:	f7ff ffd6 	bl	80048d2 <_swiclose>
 8004926:	2800      	cmp	r0, #0
 8004928:	d0f5      	beq.n	8004916 <_close+0x2a>
 800492a:	e7eb      	b.n	8004904 <_close+0x18>
 800492c:	200002d4 	.word	0x200002d4

08004930 <_swistat>:
 8004930:	b570      	push	{r4, r5, r6, lr}
 8004932:	460c      	mov	r4, r1
 8004934:	f7ff ff08 	bl	8004748 <findslot>
 8004938:	4605      	mov	r5, r0
 800493a:	b930      	cbnz	r0, 800494a <_swistat+0x1a>
 800493c:	f000 fadc 	bl	8004ef8 <__errno>
 8004940:	2309      	movs	r3, #9
 8004942:	6003      	str	r3, [r0, #0]
 8004944:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004948:	bd70      	pop	{r4, r5, r6, pc}
 800494a:	6863      	ldr	r3, [r4, #4]
 800494c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004950:	6063      	str	r3, [r4, #4]
 8004952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004956:	64a3      	str	r3, [r4, #72]	@ 0x48
 8004958:	260c      	movs	r6, #12
 800495a:	4630      	mov	r0, r6
 800495c:	4629      	mov	r1, r5
 800495e:	beab      	bkpt	0x00ab
 8004960:	4605      	mov	r5, r0
 8004962:	4628      	mov	r0, r5
 8004964:	f7ff ff18 	bl	8004798 <checkerror>
 8004968:	1c43      	adds	r3, r0, #1
 800496a:	d0eb      	beq.n	8004944 <_swistat+0x14>
 800496c:	6120      	str	r0, [r4, #16]
 800496e:	2000      	movs	r0, #0
 8004970:	e7ea      	b.n	8004948 <_swistat+0x18>

08004972 <_fstat>:
 8004972:	460b      	mov	r3, r1
 8004974:	b510      	push	{r4, lr}
 8004976:	2100      	movs	r1, #0
 8004978:	4604      	mov	r4, r0
 800497a:	2258      	movs	r2, #88	@ 0x58
 800497c:	4618      	mov	r0, r3
 800497e:	f000 fab3 	bl	8004ee8 <memset>
 8004982:	4601      	mov	r1, r0
 8004984:	4620      	mov	r0, r4
 8004986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800498a:	f7ff bfd1 	b.w	8004930 <_swistat>

0800498e <_stat>:
 800498e:	b538      	push	{r3, r4, r5, lr}
 8004990:	460d      	mov	r5, r1
 8004992:	4604      	mov	r4, r0
 8004994:	2258      	movs	r2, #88	@ 0x58
 8004996:	2100      	movs	r1, #0
 8004998:	4628      	mov	r0, r5
 800499a:	f000 faa5 	bl	8004ee8 <memset>
 800499e:	4620      	mov	r0, r4
 80049a0:	2100      	movs	r1, #0
 80049a2:	f000 f811 	bl	80049c8 <_swiopen>
 80049a6:	1c43      	adds	r3, r0, #1
 80049a8:	4604      	mov	r4, r0
 80049aa:	d00b      	beq.n	80049c4 <_stat+0x36>
 80049ac:	686b      	ldr	r3, [r5, #4]
 80049ae:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80049b2:	606b      	str	r3, [r5, #4]
 80049b4:	4629      	mov	r1, r5
 80049b6:	f7ff ffbb 	bl	8004930 <_swistat>
 80049ba:	4605      	mov	r5, r0
 80049bc:	4620      	mov	r0, r4
 80049be:	f7ff ff95 	bl	80048ec <_close>
 80049c2:	462c      	mov	r4, r5
 80049c4:	4620      	mov	r0, r4
 80049c6:	bd38      	pop	{r3, r4, r5, pc}

080049c8 <_swiopen>:
 80049c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049cc:	4f29      	ldr	r7, [pc, #164]	@ (8004a74 <_swiopen+0xac>)
 80049ce:	b096      	sub	sp, #88	@ 0x58
 80049d0:	4682      	mov	sl, r0
 80049d2:	460e      	mov	r6, r1
 80049d4:	2400      	movs	r4, #0
 80049d6:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 80049da:	3301      	adds	r3, #1
 80049dc:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80049e0:	d00c      	beq.n	80049fc <_swiopen+0x34>
 80049e2:	3401      	adds	r4, #1
 80049e4:	2c14      	cmp	r4, #20
 80049e6:	d1f6      	bne.n	80049d6 <_swiopen+0xe>
 80049e8:	f000 fa86 	bl	8004ef8 <__errno>
 80049ec:	2318      	movs	r3, #24
 80049ee:	6003      	str	r3, [r0, #0]
 80049f0:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80049f4:	4620      	mov	r0, r4
 80049f6:	b016      	add	sp, #88	@ 0x58
 80049f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049fc:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8004a00:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004a04:	46e9      	mov	r9, sp
 8004a06:	d109      	bne.n	8004a1c <_swiopen+0x54>
 8004a08:	4649      	mov	r1, r9
 8004a0a:	4650      	mov	r0, sl
 8004a0c:	f7ff ffbf 	bl	800498e <_stat>
 8004a10:	3001      	adds	r0, #1
 8004a12:	d003      	beq.n	8004a1c <_swiopen+0x54>
 8004a14:	f000 fa70 	bl	8004ef8 <__errno>
 8004a18:	2311      	movs	r3, #17
 8004a1a:	e7e8      	b.n	80049ee <_swiopen+0x26>
 8004a1c:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8004a20:	f240 6301 	movw	r3, #1537	@ 0x601
 8004a24:	07b2      	lsls	r2, r6, #30
 8004a26:	bf48      	it	mi
 8004a28:	f045 0502 	orrmi.w	r5, r5, #2
 8004a2c:	421e      	tst	r6, r3
 8004a2e:	bf18      	it	ne
 8004a30:	f045 0504 	orrne.w	r5, r5, #4
 8004a34:	0733      	lsls	r3, r6, #28
 8004a36:	bf48      	it	mi
 8004a38:	f025 0504 	bicmi.w	r5, r5, #4
 8004a3c:	4650      	mov	r0, sl
 8004a3e:	bf48      	it	mi
 8004a40:	f045 0508 	orrmi.w	r5, r5, #8
 8004a44:	f8cd a000 	str.w	sl, [sp]
 8004a48:	f7fb fbd2 	bl	80001f0 <strlen>
 8004a4c:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8004a50:	2501      	movs	r5, #1
 8004a52:	4628      	mov	r0, r5
 8004a54:	4649      	mov	r1, r9
 8004a56:	beab      	bkpt	0x00ab
 8004a58:	4605      	mov	r5, r0
 8004a5a:	2d00      	cmp	r5, #0
 8004a5c:	db05      	blt.n	8004a6a <_swiopen+0xa2>
 8004a5e:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8004a62:	4447      	add	r7, r8
 8004a64:	2300      	movs	r3, #0
 8004a66:	607b      	str	r3, [r7, #4]
 8004a68:	e7c4      	b.n	80049f4 <_swiopen+0x2c>
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	f7ff fe86 	bl	800477c <error>
 8004a70:	4604      	mov	r4, r0
 8004a72:	e7bf      	b.n	80049f4 <_swiopen+0x2c>
 8004a74:	200002d4 	.word	0x200002d4

08004a78 <_get_semihosting_exts>:
 8004a78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004a7c:	4606      	mov	r6, r0
 8004a7e:	460f      	mov	r7, r1
 8004a80:	4829      	ldr	r0, [pc, #164]	@ (8004b28 <_get_semihosting_exts+0xb0>)
 8004a82:	2100      	movs	r1, #0
 8004a84:	4615      	mov	r5, r2
 8004a86:	f7ff ff9f 	bl	80049c8 <_swiopen>
 8004a8a:	462a      	mov	r2, r5
 8004a8c:	4604      	mov	r4, r0
 8004a8e:	2100      	movs	r1, #0
 8004a90:	4630      	mov	r0, r6
 8004a92:	f000 fa29 	bl	8004ee8 <memset>
 8004a96:	1c63      	adds	r3, r4, #1
 8004a98:	d014      	beq.n	8004ac4 <_get_semihosting_exts+0x4c>
 8004a9a:	4620      	mov	r0, r4
 8004a9c:	f7ff fe54 	bl	8004748 <findslot>
 8004aa0:	f04f 080c 	mov.w	r8, #12
 8004aa4:	4681      	mov	r9, r0
 8004aa6:	4640      	mov	r0, r8
 8004aa8:	4649      	mov	r1, r9
 8004aaa:	beab      	bkpt	0x00ab
 8004aac:	4680      	mov	r8, r0
 8004aae:	4640      	mov	r0, r8
 8004ab0:	f7ff fe72 	bl	8004798 <checkerror>
 8004ab4:	2803      	cmp	r0, #3
 8004ab6:	dd02      	ble.n	8004abe <_get_semihosting_exts+0x46>
 8004ab8:	1ec3      	subs	r3, r0, #3
 8004aba:	42ab      	cmp	r3, r5
 8004abc:	dc07      	bgt.n	8004ace <_get_semihosting_exts+0x56>
 8004abe:	4620      	mov	r0, r4
 8004ac0:	f7ff ff14 	bl	80048ec <_close>
 8004ac4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ac8:	b003      	add	sp, #12
 8004aca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ace:	2204      	movs	r2, #4
 8004ad0:	eb0d 0102 	add.w	r1, sp, r2
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	f7ff fe74 	bl	80047c2 <_read>
 8004ada:	2803      	cmp	r0, #3
 8004adc:	ddef      	ble.n	8004abe <_get_semihosting_exts+0x46>
 8004ade:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004ae2:	2b53      	cmp	r3, #83	@ 0x53
 8004ae4:	d1eb      	bne.n	8004abe <_get_semihosting_exts+0x46>
 8004ae6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004aea:	2b48      	cmp	r3, #72	@ 0x48
 8004aec:	d1e7      	bne.n	8004abe <_get_semihosting_exts+0x46>
 8004aee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004af2:	2b46      	cmp	r3, #70	@ 0x46
 8004af4:	d1e3      	bne.n	8004abe <_get_semihosting_exts+0x46>
 8004af6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004afa:	2b42      	cmp	r3, #66	@ 0x42
 8004afc:	d1df      	bne.n	8004abe <_get_semihosting_exts+0x46>
 8004afe:	2201      	movs	r2, #1
 8004b00:	4639      	mov	r1, r7
 8004b02:	4620      	mov	r0, r4
 8004b04:	f7ff fe77 	bl	80047f6 <_swilseek>
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	dbd8      	blt.n	8004abe <_get_semihosting_exts+0x46>
 8004b0c:	462a      	mov	r2, r5
 8004b0e:	4631      	mov	r1, r6
 8004b10:	4620      	mov	r0, r4
 8004b12:	f7ff fe56 	bl	80047c2 <_read>
 8004b16:	4605      	mov	r5, r0
 8004b18:	4620      	mov	r0, r4
 8004b1a:	f7ff fee7 	bl	80048ec <_close>
 8004b1e:	4628      	mov	r0, r5
 8004b20:	f7ff fe3a 	bl	8004798 <checkerror>
 8004b24:	e7d0      	b.n	8004ac8 <_get_semihosting_exts+0x50>
 8004b26:	bf00      	nop
 8004b28:	08005cc4 	.word	0x08005cc4

08004b2c <initialise_semihosting_exts>:
 8004b2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b2e:	4d0a      	ldr	r5, [pc, #40]	@ (8004b58 <initialise_semihosting_exts+0x2c>)
 8004b30:	4c0a      	ldr	r4, [pc, #40]	@ (8004b5c <initialise_semihosting_exts+0x30>)
 8004b32:	2100      	movs	r1, #0
 8004b34:	2201      	movs	r2, #1
 8004b36:	a801      	add	r0, sp, #4
 8004b38:	6029      	str	r1, [r5, #0]
 8004b3a:	6022      	str	r2, [r4, #0]
 8004b3c:	f7ff ff9c 	bl	8004a78 <_get_semihosting_exts>
 8004b40:	2800      	cmp	r0, #0
 8004b42:	dd07      	ble.n	8004b54 <initialise_semihosting_exts+0x28>
 8004b44:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004b48:	f003 0201 	and.w	r2, r3, #1
 8004b4c:	f003 0302 	and.w	r3, r3, #2
 8004b50:	602a      	str	r2, [r5, #0]
 8004b52:	6023      	str	r3, [r4, #0]
 8004b54:	b003      	add	sp, #12
 8004b56:	bd30      	pop	{r4, r5, pc}
 8004b58:	20000010 	.word	0x20000010
 8004b5c:	2000000c 	.word	0x2000000c

08004b60 <_has_ext_stdout_stderr>:
 8004b60:	b510      	push	{r4, lr}
 8004b62:	4c04      	ldr	r4, [pc, #16]	@ (8004b74 <_has_ext_stdout_stderr+0x14>)
 8004b64:	6823      	ldr	r3, [r4, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	da01      	bge.n	8004b6e <_has_ext_stdout_stderr+0xe>
 8004b6a:	f7ff ffdf 	bl	8004b2c <initialise_semihosting_exts>
 8004b6e:	6820      	ldr	r0, [r4, #0]
 8004b70:	bd10      	pop	{r4, pc}
 8004b72:	bf00      	nop
 8004b74:	2000000c 	.word	0x2000000c

08004b78 <initialise_monitor_handles>:
 8004b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b7c:	b085      	sub	sp, #20
 8004b7e:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8004c30 <initialise_monitor_handles+0xb8>
 8004b82:	f8cd 9004 	str.w	r9, [sp, #4]
 8004b86:	2303      	movs	r3, #3
 8004b88:	2400      	movs	r4, #0
 8004b8a:	9303      	str	r3, [sp, #12]
 8004b8c:	af01      	add	r7, sp, #4
 8004b8e:	9402      	str	r4, [sp, #8]
 8004b90:	2501      	movs	r5, #1
 8004b92:	4628      	mov	r0, r5
 8004b94:	4639      	mov	r1, r7
 8004b96:	beab      	bkpt	0x00ab
 8004b98:	4605      	mov	r5, r0
 8004b9a:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8004c34 <initialise_monitor_handles+0xbc>
 8004b9e:	4623      	mov	r3, r4
 8004ba0:	4c20      	ldr	r4, [pc, #128]	@ (8004c24 <initialise_monitor_handles+0xac>)
 8004ba2:	f8c8 5000 	str.w	r5, [r8]
 8004ba6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004baa:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	2b14      	cmp	r3, #20
 8004bb2:	d1fa      	bne.n	8004baa <initialise_monitor_handles+0x32>
 8004bb4:	f7ff ffd4 	bl	8004b60 <_has_ext_stdout_stderr>
 8004bb8:	4d1b      	ldr	r5, [pc, #108]	@ (8004c28 <initialise_monitor_handles+0xb0>)
 8004bba:	b1d0      	cbz	r0, 8004bf2 <initialise_monitor_handles+0x7a>
 8004bbc:	f04f 0a03 	mov.w	sl, #3
 8004bc0:	2304      	movs	r3, #4
 8004bc2:	f8cd 9004 	str.w	r9, [sp, #4]
 8004bc6:	2601      	movs	r6, #1
 8004bc8:	f8cd a00c 	str.w	sl, [sp, #12]
 8004bcc:	9302      	str	r3, [sp, #8]
 8004bce:	4630      	mov	r0, r6
 8004bd0:	4639      	mov	r1, r7
 8004bd2:	beab      	bkpt	0x00ab
 8004bd4:	4683      	mov	fp, r0
 8004bd6:	4b15      	ldr	r3, [pc, #84]	@ (8004c2c <initialise_monitor_handles+0xb4>)
 8004bd8:	f8cd 9004 	str.w	r9, [sp, #4]
 8004bdc:	f8c3 b000 	str.w	fp, [r3]
 8004be0:	2308      	movs	r3, #8
 8004be2:	f8cd a00c 	str.w	sl, [sp, #12]
 8004be6:	9302      	str	r3, [sp, #8]
 8004be8:	4630      	mov	r0, r6
 8004bea:	4639      	mov	r1, r7
 8004bec:	beab      	bkpt	0x00ab
 8004bee:	4606      	mov	r6, r0
 8004bf0:	602e      	str	r6, [r5, #0]
 8004bf2:	682b      	ldr	r3, [r5, #0]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	bf02      	ittt	eq
 8004bf8:	4b0c      	ldreq	r3, [pc, #48]	@ (8004c2c <initialise_monitor_handles+0xb4>)
 8004bfa:	681b      	ldreq	r3, [r3, #0]
 8004bfc:	602b      	streq	r3, [r5, #0]
 8004bfe:	2600      	movs	r6, #0
 8004c00:	f8d8 3000 	ldr.w	r3, [r8]
 8004c04:	6023      	str	r3, [r4, #0]
 8004c06:	6066      	str	r6, [r4, #4]
 8004c08:	f7ff ffaa 	bl	8004b60 <_has_ext_stdout_stderr>
 8004c0c:	b130      	cbz	r0, 8004c1c <initialise_monitor_handles+0xa4>
 8004c0e:	4b07      	ldr	r3, [pc, #28]	@ (8004c2c <initialise_monitor_handles+0xb4>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8004c16:	682b      	ldr	r3, [r5, #0]
 8004c18:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8004c1c:	b005      	add	sp, #20
 8004c1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c22:	bf00      	nop
 8004c24:	200002d4 	.word	0x200002d4
 8004c28:	200002c8 	.word	0x200002c8
 8004c2c:	200002cc 	.word	0x200002cc
 8004c30:	08005cda 	.word	0x08005cda
 8004c34:	200002d0 	.word	0x200002d0

08004c38 <_isatty>:
 8004c38:	b570      	push	{r4, r5, r6, lr}
 8004c3a:	f7ff fd85 	bl	8004748 <findslot>
 8004c3e:	2409      	movs	r4, #9
 8004c40:	4605      	mov	r5, r0
 8004c42:	b920      	cbnz	r0, 8004c4e <_isatty+0x16>
 8004c44:	f000 f958 	bl	8004ef8 <__errno>
 8004c48:	6004      	str	r4, [r0, #0]
 8004c4a:	2000      	movs	r0, #0
 8004c4c:	bd70      	pop	{r4, r5, r6, pc}
 8004c4e:	4620      	mov	r0, r4
 8004c50:	4629      	mov	r1, r5
 8004c52:	beab      	bkpt	0x00ab
 8004c54:	4604      	mov	r4, r0
 8004c56:	2c01      	cmp	r4, #1
 8004c58:	4620      	mov	r0, r4
 8004c5a:	d0f7      	beq.n	8004c4c <_isatty+0x14>
 8004c5c:	f000 f94c 	bl	8004ef8 <__errno>
 8004c60:	2513      	movs	r5, #19
 8004c62:	4604      	mov	r4, r0
 8004c64:	2600      	movs	r6, #0
 8004c66:	4628      	mov	r0, r5
 8004c68:	4631      	mov	r1, r6
 8004c6a:	beab      	bkpt	0x00ab
 8004c6c:	4605      	mov	r5, r0
 8004c6e:	6025      	str	r5, [r4, #0]
 8004c70:	e7eb      	b.n	8004c4a <_isatty+0x12>
	...

08004c74 <std>:
 8004c74:	2300      	movs	r3, #0
 8004c76:	b510      	push	{r4, lr}
 8004c78:	4604      	mov	r4, r0
 8004c7a:	e9c0 3300 	strd	r3, r3, [r0]
 8004c7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c82:	6083      	str	r3, [r0, #8]
 8004c84:	8181      	strh	r1, [r0, #12]
 8004c86:	6643      	str	r3, [r0, #100]	@ 0x64
 8004c88:	81c2      	strh	r2, [r0, #14]
 8004c8a:	6183      	str	r3, [r0, #24]
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	2208      	movs	r2, #8
 8004c90:	305c      	adds	r0, #92	@ 0x5c
 8004c92:	f000 f929 	bl	8004ee8 <memset>
 8004c96:	4b0d      	ldr	r3, [pc, #52]	@ (8004ccc <std+0x58>)
 8004c98:	6263      	str	r3, [r4, #36]	@ 0x24
 8004c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004cd0 <std+0x5c>)
 8004c9c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8004cd4 <std+0x60>)
 8004ca0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004ca2:	4b0d      	ldr	r3, [pc, #52]	@ (8004cd8 <std+0x64>)
 8004ca4:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8004cdc <std+0x68>)
 8004ca8:	6224      	str	r4, [r4, #32]
 8004caa:	429c      	cmp	r4, r3
 8004cac:	d006      	beq.n	8004cbc <std+0x48>
 8004cae:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004cb2:	4294      	cmp	r4, r2
 8004cb4:	d002      	beq.n	8004cbc <std+0x48>
 8004cb6:	33d0      	adds	r3, #208	@ 0xd0
 8004cb8:	429c      	cmp	r4, r3
 8004cba:	d105      	bne.n	8004cc8 <std+0x54>
 8004cbc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cc4:	f000 b942 	b.w	8004f4c <__retarget_lock_init_recursive>
 8004cc8:	bd10      	pop	{r4, pc}
 8004cca:	bf00      	nop
 8004ccc:	080057a5 	.word	0x080057a5
 8004cd0:	080057c7 	.word	0x080057c7
 8004cd4:	080057ff 	.word	0x080057ff
 8004cd8:	08005823 	.word	0x08005823
 8004cdc:	20000374 	.word	0x20000374

08004ce0 <stdio_exit_handler>:
 8004ce0:	4a02      	ldr	r2, [pc, #8]	@ (8004cec <stdio_exit_handler+0xc>)
 8004ce2:	4903      	ldr	r1, [pc, #12]	@ (8004cf0 <stdio_exit_handler+0x10>)
 8004ce4:	4803      	ldr	r0, [pc, #12]	@ (8004cf4 <stdio_exit_handler+0x14>)
 8004ce6:	f000 b869 	b.w	8004dbc <_fwalk_sglue>
 8004cea:	bf00      	nop
 8004cec:	20000014 	.word	0x20000014
 8004cf0:	0800573d 	.word	0x0800573d
 8004cf4:	20000024 	.word	0x20000024

08004cf8 <cleanup_stdio>:
 8004cf8:	6841      	ldr	r1, [r0, #4]
 8004cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8004d2c <cleanup_stdio+0x34>)
 8004cfc:	4299      	cmp	r1, r3
 8004cfe:	b510      	push	{r4, lr}
 8004d00:	4604      	mov	r4, r0
 8004d02:	d001      	beq.n	8004d08 <cleanup_stdio+0x10>
 8004d04:	f000 fd1a 	bl	800573c <_fflush_r>
 8004d08:	68a1      	ldr	r1, [r4, #8]
 8004d0a:	4b09      	ldr	r3, [pc, #36]	@ (8004d30 <cleanup_stdio+0x38>)
 8004d0c:	4299      	cmp	r1, r3
 8004d0e:	d002      	beq.n	8004d16 <cleanup_stdio+0x1e>
 8004d10:	4620      	mov	r0, r4
 8004d12:	f000 fd13 	bl	800573c <_fflush_r>
 8004d16:	68e1      	ldr	r1, [r4, #12]
 8004d18:	4b06      	ldr	r3, [pc, #24]	@ (8004d34 <cleanup_stdio+0x3c>)
 8004d1a:	4299      	cmp	r1, r3
 8004d1c:	d004      	beq.n	8004d28 <cleanup_stdio+0x30>
 8004d1e:	4620      	mov	r0, r4
 8004d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d24:	f000 bd0a 	b.w	800573c <_fflush_r>
 8004d28:	bd10      	pop	{r4, pc}
 8004d2a:	bf00      	nop
 8004d2c:	20000374 	.word	0x20000374
 8004d30:	200003dc 	.word	0x200003dc
 8004d34:	20000444 	.word	0x20000444

08004d38 <global_stdio_init.part.0>:
 8004d38:	b510      	push	{r4, lr}
 8004d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d68 <global_stdio_init.part.0+0x30>)
 8004d3c:	4c0b      	ldr	r4, [pc, #44]	@ (8004d6c <global_stdio_init.part.0+0x34>)
 8004d3e:	4a0c      	ldr	r2, [pc, #48]	@ (8004d70 <global_stdio_init.part.0+0x38>)
 8004d40:	601a      	str	r2, [r3, #0]
 8004d42:	4620      	mov	r0, r4
 8004d44:	2200      	movs	r2, #0
 8004d46:	2104      	movs	r1, #4
 8004d48:	f7ff ff94 	bl	8004c74 <std>
 8004d4c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004d50:	2201      	movs	r2, #1
 8004d52:	2109      	movs	r1, #9
 8004d54:	f7ff ff8e 	bl	8004c74 <std>
 8004d58:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004d5c:	2202      	movs	r2, #2
 8004d5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d62:	2112      	movs	r1, #18
 8004d64:	f7ff bf86 	b.w	8004c74 <std>
 8004d68:	200004ac 	.word	0x200004ac
 8004d6c:	20000374 	.word	0x20000374
 8004d70:	08004ce1 	.word	0x08004ce1

08004d74 <__sfp_lock_acquire>:
 8004d74:	4801      	ldr	r0, [pc, #4]	@ (8004d7c <__sfp_lock_acquire+0x8>)
 8004d76:	f000 b8ea 	b.w	8004f4e <__retarget_lock_acquire_recursive>
 8004d7a:	bf00      	nop
 8004d7c:	200004b1 	.word	0x200004b1

08004d80 <__sfp_lock_release>:
 8004d80:	4801      	ldr	r0, [pc, #4]	@ (8004d88 <__sfp_lock_release+0x8>)
 8004d82:	f000 b8e5 	b.w	8004f50 <__retarget_lock_release_recursive>
 8004d86:	bf00      	nop
 8004d88:	200004b1 	.word	0x200004b1

08004d8c <__sinit>:
 8004d8c:	b510      	push	{r4, lr}
 8004d8e:	4604      	mov	r4, r0
 8004d90:	f7ff fff0 	bl	8004d74 <__sfp_lock_acquire>
 8004d94:	6a23      	ldr	r3, [r4, #32]
 8004d96:	b11b      	cbz	r3, 8004da0 <__sinit+0x14>
 8004d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d9c:	f7ff bff0 	b.w	8004d80 <__sfp_lock_release>
 8004da0:	4b04      	ldr	r3, [pc, #16]	@ (8004db4 <__sinit+0x28>)
 8004da2:	6223      	str	r3, [r4, #32]
 8004da4:	4b04      	ldr	r3, [pc, #16]	@ (8004db8 <__sinit+0x2c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1f5      	bne.n	8004d98 <__sinit+0xc>
 8004dac:	f7ff ffc4 	bl	8004d38 <global_stdio_init.part.0>
 8004db0:	e7f2      	b.n	8004d98 <__sinit+0xc>
 8004db2:	bf00      	nop
 8004db4:	08004cf9 	.word	0x08004cf9
 8004db8:	200004ac 	.word	0x200004ac

08004dbc <_fwalk_sglue>:
 8004dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dc0:	4607      	mov	r7, r0
 8004dc2:	4688      	mov	r8, r1
 8004dc4:	4614      	mov	r4, r2
 8004dc6:	2600      	movs	r6, #0
 8004dc8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004dcc:	f1b9 0901 	subs.w	r9, r9, #1
 8004dd0:	d505      	bpl.n	8004dde <_fwalk_sglue+0x22>
 8004dd2:	6824      	ldr	r4, [r4, #0]
 8004dd4:	2c00      	cmp	r4, #0
 8004dd6:	d1f7      	bne.n	8004dc8 <_fwalk_sglue+0xc>
 8004dd8:	4630      	mov	r0, r6
 8004dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dde:	89ab      	ldrh	r3, [r5, #12]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d907      	bls.n	8004df4 <_fwalk_sglue+0x38>
 8004de4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004de8:	3301      	adds	r3, #1
 8004dea:	d003      	beq.n	8004df4 <_fwalk_sglue+0x38>
 8004dec:	4629      	mov	r1, r5
 8004dee:	4638      	mov	r0, r7
 8004df0:	47c0      	blx	r8
 8004df2:	4306      	orrs	r6, r0
 8004df4:	3568      	adds	r5, #104	@ 0x68
 8004df6:	e7e9      	b.n	8004dcc <_fwalk_sglue+0x10>

08004df8 <iprintf>:
 8004df8:	b40f      	push	{r0, r1, r2, r3}
 8004dfa:	b507      	push	{r0, r1, r2, lr}
 8004dfc:	4906      	ldr	r1, [pc, #24]	@ (8004e18 <iprintf+0x20>)
 8004dfe:	ab04      	add	r3, sp, #16
 8004e00:	6808      	ldr	r0, [r1, #0]
 8004e02:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e06:	6881      	ldr	r1, [r0, #8]
 8004e08:	9301      	str	r3, [sp, #4]
 8004e0a:	f000 f8cb 	bl	8004fa4 <_vfiprintf_r>
 8004e0e:	b003      	add	sp, #12
 8004e10:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e14:	b004      	add	sp, #16
 8004e16:	4770      	bx	lr
 8004e18:	20000020 	.word	0x20000020

08004e1c <putchar>:
 8004e1c:	4b02      	ldr	r3, [pc, #8]	@ (8004e28 <putchar+0xc>)
 8004e1e:	4601      	mov	r1, r0
 8004e20:	6818      	ldr	r0, [r3, #0]
 8004e22:	6882      	ldr	r2, [r0, #8]
 8004e24:	f000 bdf8 	b.w	8005a18 <_putc_r>
 8004e28:	20000020 	.word	0x20000020

08004e2c <_puts_r>:
 8004e2c:	6a03      	ldr	r3, [r0, #32]
 8004e2e:	b570      	push	{r4, r5, r6, lr}
 8004e30:	6884      	ldr	r4, [r0, #8]
 8004e32:	4605      	mov	r5, r0
 8004e34:	460e      	mov	r6, r1
 8004e36:	b90b      	cbnz	r3, 8004e3c <_puts_r+0x10>
 8004e38:	f7ff ffa8 	bl	8004d8c <__sinit>
 8004e3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e3e:	07db      	lsls	r3, r3, #31
 8004e40:	d405      	bmi.n	8004e4e <_puts_r+0x22>
 8004e42:	89a3      	ldrh	r3, [r4, #12]
 8004e44:	0598      	lsls	r0, r3, #22
 8004e46:	d402      	bmi.n	8004e4e <_puts_r+0x22>
 8004e48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e4a:	f000 f880 	bl	8004f4e <__retarget_lock_acquire_recursive>
 8004e4e:	89a3      	ldrh	r3, [r4, #12]
 8004e50:	0719      	lsls	r1, r3, #28
 8004e52:	d502      	bpl.n	8004e5a <_puts_r+0x2e>
 8004e54:	6923      	ldr	r3, [r4, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d135      	bne.n	8004ec6 <_puts_r+0x9a>
 8004e5a:	4621      	mov	r1, r4
 8004e5c:	4628      	mov	r0, r5
 8004e5e:	f000 fd23 	bl	80058a8 <__swsetup_r>
 8004e62:	b380      	cbz	r0, 8004ec6 <_puts_r+0x9a>
 8004e64:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004e68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e6a:	07da      	lsls	r2, r3, #31
 8004e6c:	d405      	bmi.n	8004e7a <_puts_r+0x4e>
 8004e6e:	89a3      	ldrh	r3, [r4, #12]
 8004e70:	059b      	lsls	r3, r3, #22
 8004e72:	d402      	bmi.n	8004e7a <_puts_r+0x4e>
 8004e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e76:	f000 f86b 	bl	8004f50 <__retarget_lock_release_recursive>
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	bd70      	pop	{r4, r5, r6, pc}
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	da04      	bge.n	8004e8c <_puts_r+0x60>
 8004e82:	69a2      	ldr	r2, [r4, #24]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	dc17      	bgt.n	8004eb8 <_puts_r+0x8c>
 8004e88:	290a      	cmp	r1, #10
 8004e8a:	d015      	beq.n	8004eb8 <_puts_r+0x8c>
 8004e8c:	6823      	ldr	r3, [r4, #0]
 8004e8e:	1c5a      	adds	r2, r3, #1
 8004e90:	6022      	str	r2, [r4, #0]
 8004e92:	7019      	strb	r1, [r3, #0]
 8004e94:	68a3      	ldr	r3, [r4, #8]
 8004e96:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	60a3      	str	r3, [r4, #8]
 8004e9e:	2900      	cmp	r1, #0
 8004ea0:	d1ed      	bne.n	8004e7e <_puts_r+0x52>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	da11      	bge.n	8004eca <_puts_r+0x9e>
 8004ea6:	4622      	mov	r2, r4
 8004ea8:	210a      	movs	r1, #10
 8004eaa:	4628      	mov	r0, r5
 8004eac:	f000 fcbd 	bl	800582a <__swbuf_r>
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	d0d7      	beq.n	8004e64 <_puts_r+0x38>
 8004eb4:	250a      	movs	r5, #10
 8004eb6:	e7d7      	b.n	8004e68 <_puts_r+0x3c>
 8004eb8:	4622      	mov	r2, r4
 8004eba:	4628      	mov	r0, r5
 8004ebc:	f000 fcb5 	bl	800582a <__swbuf_r>
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	d1e7      	bne.n	8004e94 <_puts_r+0x68>
 8004ec4:	e7ce      	b.n	8004e64 <_puts_r+0x38>
 8004ec6:	3e01      	subs	r6, #1
 8004ec8:	e7e4      	b.n	8004e94 <_puts_r+0x68>
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	6022      	str	r2, [r4, #0]
 8004ed0:	220a      	movs	r2, #10
 8004ed2:	701a      	strb	r2, [r3, #0]
 8004ed4:	e7ee      	b.n	8004eb4 <_puts_r+0x88>
	...

08004ed8 <puts>:
 8004ed8:	4b02      	ldr	r3, [pc, #8]	@ (8004ee4 <puts+0xc>)
 8004eda:	4601      	mov	r1, r0
 8004edc:	6818      	ldr	r0, [r3, #0]
 8004ede:	f7ff bfa5 	b.w	8004e2c <_puts_r>
 8004ee2:	bf00      	nop
 8004ee4:	20000020 	.word	0x20000020

08004ee8 <memset>:
 8004ee8:	4402      	add	r2, r0
 8004eea:	4603      	mov	r3, r0
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d100      	bne.n	8004ef2 <memset+0xa>
 8004ef0:	4770      	bx	lr
 8004ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ef6:	e7f9      	b.n	8004eec <memset+0x4>

08004ef8 <__errno>:
 8004ef8:	4b01      	ldr	r3, [pc, #4]	@ (8004f00 <__errno+0x8>)
 8004efa:	6818      	ldr	r0, [r3, #0]
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	20000020 	.word	0x20000020

08004f04 <__libc_init_array>:
 8004f04:	b570      	push	{r4, r5, r6, lr}
 8004f06:	4d0d      	ldr	r5, [pc, #52]	@ (8004f3c <__libc_init_array+0x38>)
 8004f08:	4c0d      	ldr	r4, [pc, #52]	@ (8004f40 <__libc_init_array+0x3c>)
 8004f0a:	1b64      	subs	r4, r4, r5
 8004f0c:	10a4      	asrs	r4, r4, #2
 8004f0e:	2600      	movs	r6, #0
 8004f10:	42a6      	cmp	r6, r4
 8004f12:	d109      	bne.n	8004f28 <__libc_init_array+0x24>
 8004f14:	4d0b      	ldr	r5, [pc, #44]	@ (8004f44 <__libc_init_array+0x40>)
 8004f16:	4c0c      	ldr	r4, [pc, #48]	@ (8004f48 <__libc_init_array+0x44>)
 8004f18:	f000 fe74 	bl	8005c04 <_init>
 8004f1c:	1b64      	subs	r4, r4, r5
 8004f1e:	10a4      	asrs	r4, r4, #2
 8004f20:	2600      	movs	r6, #0
 8004f22:	42a6      	cmp	r6, r4
 8004f24:	d105      	bne.n	8004f32 <__libc_init_array+0x2e>
 8004f26:	bd70      	pop	{r4, r5, r6, pc}
 8004f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f2c:	4798      	blx	r3
 8004f2e:	3601      	adds	r6, #1
 8004f30:	e7ee      	b.n	8004f10 <__libc_init_array+0xc>
 8004f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f36:	4798      	blx	r3
 8004f38:	3601      	adds	r6, #1
 8004f3a:	e7f2      	b.n	8004f22 <__libc_init_array+0x1e>
 8004f3c:	08005d1c 	.word	0x08005d1c
 8004f40:	08005d1c 	.word	0x08005d1c
 8004f44:	08005d1c 	.word	0x08005d1c
 8004f48:	08005d20 	.word	0x08005d20

08004f4c <__retarget_lock_init_recursive>:
 8004f4c:	4770      	bx	lr

08004f4e <__retarget_lock_acquire_recursive>:
 8004f4e:	4770      	bx	lr

08004f50 <__retarget_lock_release_recursive>:
 8004f50:	4770      	bx	lr

08004f52 <__sfputc_r>:
 8004f52:	6893      	ldr	r3, [r2, #8]
 8004f54:	3b01      	subs	r3, #1
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	b410      	push	{r4}
 8004f5a:	6093      	str	r3, [r2, #8]
 8004f5c:	da08      	bge.n	8004f70 <__sfputc_r+0x1e>
 8004f5e:	6994      	ldr	r4, [r2, #24]
 8004f60:	42a3      	cmp	r3, r4
 8004f62:	db01      	blt.n	8004f68 <__sfputc_r+0x16>
 8004f64:	290a      	cmp	r1, #10
 8004f66:	d103      	bne.n	8004f70 <__sfputc_r+0x1e>
 8004f68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f6c:	f000 bc5d 	b.w	800582a <__swbuf_r>
 8004f70:	6813      	ldr	r3, [r2, #0]
 8004f72:	1c58      	adds	r0, r3, #1
 8004f74:	6010      	str	r0, [r2, #0]
 8004f76:	7019      	strb	r1, [r3, #0]
 8004f78:	4608      	mov	r0, r1
 8004f7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <__sfputs_r>:
 8004f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f82:	4606      	mov	r6, r0
 8004f84:	460f      	mov	r7, r1
 8004f86:	4614      	mov	r4, r2
 8004f88:	18d5      	adds	r5, r2, r3
 8004f8a:	42ac      	cmp	r4, r5
 8004f8c:	d101      	bne.n	8004f92 <__sfputs_r+0x12>
 8004f8e:	2000      	movs	r0, #0
 8004f90:	e007      	b.n	8004fa2 <__sfputs_r+0x22>
 8004f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f96:	463a      	mov	r2, r7
 8004f98:	4630      	mov	r0, r6
 8004f9a:	f7ff ffda 	bl	8004f52 <__sfputc_r>
 8004f9e:	1c43      	adds	r3, r0, #1
 8004fa0:	d1f3      	bne.n	8004f8a <__sfputs_r+0xa>
 8004fa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004fa4 <_vfiprintf_r>:
 8004fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa8:	460d      	mov	r5, r1
 8004faa:	b09d      	sub	sp, #116	@ 0x74
 8004fac:	4614      	mov	r4, r2
 8004fae:	4698      	mov	r8, r3
 8004fb0:	4606      	mov	r6, r0
 8004fb2:	b118      	cbz	r0, 8004fbc <_vfiprintf_r+0x18>
 8004fb4:	6a03      	ldr	r3, [r0, #32]
 8004fb6:	b90b      	cbnz	r3, 8004fbc <_vfiprintf_r+0x18>
 8004fb8:	f7ff fee8 	bl	8004d8c <__sinit>
 8004fbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fbe:	07d9      	lsls	r1, r3, #31
 8004fc0:	d405      	bmi.n	8004fce <_vfiprintf_r+0x2a>
 8004fc2:	89ab      	ldrh	r3, [r5, #12]
 8004fc4:	059a      	lsls	r2, r3, #22
 8004fc6:	d402      	bmi.n	8004fce <_vfiprintf_r+0x2a>
 8004fc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004fca:	f7ff ffc0 	bl	8004f4e <__retarget_lock_acquire_recursive>
 8004fce:	89ab      	ldrh	r3, [r5, #12]
 8004fd0:	071b      	lsls	r3, r3, #28
 8004fd2:	d501      	bpl.n	8004fd8 <_vfiprintf_r+0x34>
 8004fd4:	692b      	ldr	r3, [r5, #16]
 8004fd6:	b99b      	cbnz	r3, 8005000 <_vfiprintf_r+0x5c>
 8004fd8:	4629      	mov	r1, r5
 8004fda:	4630      	mov	r0, r6
 8004fdc:	f000 fc64 	bl	80058a8 <__swsetup_r>
 8004fe0:	b170      	cbz	r0, 8005000 <_vfiprintf_r+0x5c>
 8004fe2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fe4:	07dc      	lsls	r4, r3, #31
 8004fe6:	d504      	bpl.n	8004ff2 <_vfiprintf_r+0x4e>
 8004fe8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004fec:	b01d      	add	sp, #116	@ 0x74
 8004fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff2:	89ab      	ldrh	r3, [r5, #12]
 8004ff4:	0598      	lsls	r0, r3, #22
 8004ff6:	d4f7      	bmi.n	8004fe8 <_vfiprintf_r+0x44>
 8004ff8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ffa:	f7ff ffa9 	bl	8004f50 <__retarget_lock_release_recursive>
 8004ffe:	e7f3      	b.n	8004fe8 <_vfiprintf_r+0x44>
 8005000:	2300      	movs	r3, #0
 8005002:	9309      	str	r3, [sp, #36]	@ 0x24
 8005004:	2320      	movs	r3, #32
 8005006:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800500a:	f8cd 800c 	str.w	r8, [sp, #12]
 800500e:	2330      	movs	r3, #48	@ 0x30
 8005010:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80051c0 <_vfiprintf_r+0x21c>
 8005014:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005018:	f04f 0901 	mov.w	r9, #1
 800501c:	4623      	mov	r3, r4
 800501e:	469a      	mov	sl, r3
 8005020:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005024:	b10a      	cbz	r2, 800502a <_vfiprintf_r+0x86>
 8005026:	2a25      	cmp	r2, #37	@ 0x25
 8005028:	d1f9      	bne.n	800501e <_vfiprintf_r+0x7a>
 800502a:	ebba 0b04 	subs.w	fp, sl, r4
 800502e:	d00b      	beq.n	8005048 <_vfiprintf_r+0xa4>
 8005030:	465b      	mov	r3, fp
 8005032:	4622      	mov	r2, r4
 8005034:	4629      	mov	r1, r5
 8005036:	4630      	mov	r0, r6
 8005038:	f7ff ffa2 	bl	8004f80 <__sfputs_r>
 800503c:	3001      	adds	r0, #1
 800503e:	f000 80a7 	beq.w	8005190 <_vfiprintf_r+0x1ec>
 8005042:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005044:	445a      	add	r2, fp
 8005046:	9209      	str	r2, [sp, #36]	@ 0x24
 8005048:	f89a 3000 	ldrb.w	r3, [sl]
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 809f 	beq.w	8005190 <_vfiprintf_r+0x1ec>
 8005052:	2300      	movs	r3, #0
 8005054:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005058:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800505c:	f10a 0a01 	add.w	sl, sl, #1
 8005060:	9304      	str	r3, [sp, #16]
 8005062:	9307      	str	r3, [sp, #28]
 8005064:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005068:	931a      	str	r3, [sp, #104]	@ 0x68
 800506a:	4654      	mov	r4, sl
 800506c:	2205      	movs	r2, #5
 800506e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005072:	4853      	ldr	r0, [pc, #332]	@ (80051c0 <_vfiprintf_r+0x21c>)
 8005074:	f7fb f8c4 	bl	8000200 <memchr>
 8005078:	9a04      	ldr	r2, [sp, #16]
 800507a:	b9d8      	cbnz	r0, 80050b4 <_vfiprintf_r+0x110>
 800507c:	06d1      	lsls	r1, r2, #27
 800507e:	bf44      	itt	mi
 8005080:	2320      	movmi	r3, #32
 8005082:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005086:	0713      	lsls	r3, r2, #28
 8005088:	bf44      	itt	mi
 800508a:	232b      	movmi	r3, #43	@ 0x2b
 800508c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005090:	f89a 3000 	ldrb.w	r3, [sl]
 8005094:	2b2a      	cmp	r3, #42	@ 0x2a
 8005096:	d015      	beq.n	80050c4 <_vfiprintf_r+0x120>
 8005098:	9a07      	ldr	r2, [sp, #28]
 800509a:	4654      	mov	r4, sl
 800509c:	2000      	movs	r0, #0
 800509e:	f04f 0c0a 	mov.w	ip, #10
 80050a2:	4621      	mov	r1, r4
 80050a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050a8:	3b30      	subs	r3, #48	@ 0x30
 80050aa:	2b09      	cmp	r3, #9
 80050ac:	d94b      	bls.n	8005146 <_vfiprintf_r+0x1a2>
 80050ae:	b1b0      	cbz	r0, 80050de <_vfiprintf_r+0x13a>
 80050b0:	9207      	str	r2, [sp, #28]
 80050b2:	e014      	b.n	80050de <_vfiprintf_r+0x13a>
 80050b4:	eba0 0308 	sub.w	r3, r0, r8
 80050b8:	fa09 f303 	lsl.w	r3, r9, r3
 80050bc:	4313      	orrs	r3, r2
 80050be:	9304      	str	r3, [sp, #16]
 80050c0:	46a2      	mov	sl, r4
 80050c2:	e7d2      	b.n	800506a <_vfiprintf_r+0xc6>
 80050c4:	9b03      	ldr	r3, [sp, #12]
 80050c6:	1d19      	adds	r1, r3, #4
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	9103      	str	r1, [sp, #12]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	bfbb      	ittet	lt
 80050d0:	425b      	neglt	r3, r3
 80050d2:	f042 0202 	orrlt.w	r2, r2, #2
 80050d6:	9307      	strge	r3, [sp, #28]
 80050d8:	9307      	strlt	r3, [sp, #28]
 80050da:	bfb8      	it	lt
 80050dc:	9204      	strlt	r2, [sp, #16]
 80050de:	7823      	ldrb	r3, [r4, #0]
 80050e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80050e2:	d10a      	bne.n	80050fa <_vfiprintf_r+0x156>
 80050e4:	7863      	ldrb	r3, [r4, #1]
 80050e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80050e8:	d132      	bne.n	8005150 <_vfiprintf_r+0x1ac>
 80050ea:	9b03      	ldr	r3, [sp, #12]
 80050ec:	1d1a      	adds	r2, r3, #4
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	9203      	str	r2, [sp, #12]
 80050f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80050f6:	3402      	adds	r4, #2
 80050f8:	9305      	str	r3, [sp, #20]
 80050fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80051d0 <_vfiprintf_r+0x22c>
 80050fe:	7821      	ldrb	r1, [r4, #0]
 8005100:	2203      	movs	r2, #3
 8005102:	4650      	mov	r0, sl
 8005104:	f7fb f87c 	bl	8000200 <memchr>
 8005108:	b138      	cbz	r0, 800511a <_vfiprintf_r+0x176>
 800510a:	9b04      	ldr	r3, [sp, #16]
 800510c:	eba0 000a 	sub.w	r0, r0, sl
 8005110:	2240      	movs	r2, #64	@ 0x40
 8005112:	4082      	lsls	r2, r0
 8005114:	4313      	orrs	r3, r2
 8005116:	3401      	adds	r4, #1
 8005118:	9304      	str	r3, [sp, #16]
 800511a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800511e:	4829      	ldr	r0, [pc, #164]	@ (80051c4 <_vfiprintf_r+0x220>)
 8005120:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005124:	2206      	movs	r2, #6
 8005126:	f7fb f86b 	bl	8000200 <memchr>
 800512a:	2800      	cmp	r0, #0
 800512c:	d03f      	beq.n	80051ae <_vfiprintf_r+0x20a>
 800512e:	4b26      	ldr	r3, [pc, #152]	@ (80051c8 <_vfiprintf_r+0x224>)
 8005130:	bb1b      	cbnz	r3, 800517a <_vfiprintf_r+0x1d6>
 8005132:	9b03      	ldr	r3, [sp, #12]
 8005134:	3307      	adds	r3, #7
 8005136:	f023 0307 	bic.w	r3, r3, #7
 800513a:	3308      	adds	r3, #8
 800513c:	9303      	str	r3, [sp, #12]
 800513e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005140:	443b      	add	r3, r7
 8005142:	9309      	str	r3, [sp, #36]	@ 0x24
 8005144:	e76a      	b.n	800501c <_vfiprintf_r+0x78>
 8005146:	fb0c 3202 	mla	r2, ip, r2, r3
 800514a:	460c      	mov	r4, r1
 800514c:	2001      	movs	r0, #1
 800514e:	e7a8      	b.n	80050a2 <_vfiprintf_r+0xfe>
 8005150:	2300      	movs	r3, #0
 8005152:	3401      	adds	r4, #1
 8005154:	9305      	str	r3, [sp, #20]
 8005156:	4619      	mov	r1, r3
 8005158:	f04f 0c0a 	mov.w	ip, #10
 800515c:	4620      	mov	r0, r4
 800515e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005162:	3a30      	subs	r2, #48	@ 0x30
 8005164:	2a09      	cmp	r2, #9
 8005166:	d903      	bls.n	8005170 <_vfiprintf_r+0x1cc>
 8005168:	2b00      	cmp	r3, #0
 800516a:	d0c6      	beq.n	80050fa <_vfiprintf_r+0x156>
 800516c:	9105      	str	r1, [sp, #20]
 800516e:	e7c4      	b.n	80050fa <_vfiprintf_r+0x156>
 8005170:	fb0c 2101 	mla	r1, ip, r1, r2
 8005174:	4604      	mov	r4, r0
 8005176:	2301      	movs	r3, #1
 8005178:	e7f0      	b.n	800515c <_vfiprintf_r+0x1b8>
 800517a:	ab03      	add	r3, sp, #12
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	462a      	mov	r2, r5
 8005180:	4b12      	ldr	r3, [pc, #72]	@ (80051cc <_vfiprintf_r+0x228>)
 8005182:	a904      	add	r1, sp, #16
 8005184:	4630      	mov	r0, r6
 8005186:	f3af 8000 	nop.w
 800518a:	4607      	mov	r7, r0
 800518c:	1c78      	adds	r0, r7, #1
 800518e:	d1d6      	bne.n	800513e <_vfiprintf_r+0x19a>
 8005190:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005192:	07d9      	lsls	r1, r3, #31
 8005194:	d405      	bmi.n	80051a2 <_vfiprintf_r+0x1fe>
 8005196:	89ab      	ldrh	r3, [r5, #12]
 8005198:	059a      	lsls	r2, r3, #22
 800519a:	d402      	bmi.n	80051a2 <_vfiprintf_r+0x1fe>
 800519c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800519e:	f7ff fed7 	bl	8004f50 <__retarget_lock_release_recursive>
 80051a2:	89ab      	ldrh	r3, [r5, #12]
 80051a4:	065b      	lsls	r3, r3, #25
 80051a6:	f53f af1f 	bmi.w	8004fe8 <_vfiprintf_r+0x44>
 80051aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051ac:	e71e      	b.n	8004fec <_vfiprintf_r+0x48>
 80051ae:	ab03      	add	r3, sp, #12
 80051b0:	9300      	str	r3, [sp, #0]
 80051b2:	462a      	mov	r2, r5
 80051b4:	4b05      	ldr	r3, [pc, #20]	@ (80051cc <_vfiprintf_r+0x228>)
 80051b6:	a904      	add	r1, sp, #16
 80051b8:	4630      	mov	r0, r6
 80051ba:	f000 f91b 	bl	80053f4 <_printf_i>
 80051be:	e7e4      	b.n	800518a <_vfiprintf_r+0x1e6>
 80051c0:	08005cde 	.word	0x08005cde
 80051c4:	08005ce8 	.word	0x08005ce8
 80051c8:	00000000 	.word	0x00000000
 80051cc:	08004f81 	.word	0x08004f81
 80051d0:	08005ce4 	.word	0x08005ce4

080051d4 <sbrk_aligned>:
 80051d4:	b570      	push	{r4, r5, r6, lr}
 80051d6:	4e0f      	ldr	r6, [pc, #60]	@ (8005214 <sbrk_aligned+0x40>)
 80051d8:	460c      	mov	r4, r1
 80051da:	6831      	ldr	r1, [r6, #0]
 80051dc:	4605      	mov	r5, r0
 80051de:	b911      	cbnz	r1, 80051e6 <sbrk_aligned+0x12>
 80051e0:	f000 fca4 	bl	8005b2c <_sbrk_r>
 80051e4:	6030      	str	r0, [r6, #0]
 80051e6:	4621      	mov	r1, r4
 80051e8:	4628      	mov	r0, r5
 80051ea:	f000 fc9f 	bl	8005b2c <_sbrk_r>
 80051ee:	1c43      	adds	r3, r0, #1
 80051f0:	d103      	bne.n	80051fa <sbrk_aligned+0x26>
 80051f2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80051f6:	4620      	mov	r0, r4
 80051f8:	bd70      	pop	{r4, r5, r6, pc}
 80051fa:	1cc4      	adds	r4, r0, #3
 80051fc:	f024 0403 	bic.w	r4, r4, #3
 8005200:	42a0      	cmp	r0, r4
 8005202:	d0f8      	beq.n	80051f6 <sbrk_aligned+0x22>
 8005204:	1a21      	subs	r1, r4, r0
 8005206:	4628      	mov	r0, r5
 8005208:	f000 fc90 	bl	8005b2c <_sbrk_r>
 800520c:	3001      	adds	r0, #1
 800520e:	d1f2      	bne.n	80051f6 <sbrk_aligned+0x22>
 8005210:	e7ef      	b.n	80051f2 <sbrk_aligned+0x1e>
 8005212:	bf00      	nop
 8005214:	200004b4 	.word	0x200004b4

08005218 <_malloc_r>:
 8005218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800521c:	1ccd      	adds	r5, r1, #3
 800521e:	f025 0503 	bic.w	r5, r5, #3
 8005222:	3508      	adds	r5, #8
 8005224:	2d0c      	cmp	r5, #12
 8005226:	bf38      	it	cc
 8005228:	250c      	movcc	r5, #12
 800522a:	2d00      	cmp	r5, #0
 800522c:	4606      	mov	r6, r0
 800522e:	db01      	blt.n	8005234 <_malloc_r+0x1c>
 8005230:	42a9      	cmp	r1, r5
 8005232:	d904      	bls.n	800523e <_malloc_r+0x26>
 8005234:	230c      	movs	r3, #12
 8005236:	6033      	str	r3, [r6, #0]
 8005238:	2000      	movs	r0, #0
 800523a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800523e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005314 <_malloc_r+0xfc>
 8005242:	f000 faa3 	bl	800578c <__malloc_lock>
 8005246:	f8d8 3000 	ldr.w	r3, [r8]
 800524a:	461c      	mov	r4, r3
 800524c:	bb44      	cbnz	r4, 80052a0 <_malloc_r+0x88>
 800524e:	4629      	mov	r1, r5
 8005250:	4630      	mov	r0, r6
 8005252:	f7ff ffbf 	bl	80051d4 <sbrk_aligned>
 8005256:	1c43      	adds	r3, r0, #1
 8005258:	4604      	mov	r4, r0
 800525a:	d158      	bne.n	800530e <_malloc_r+0xf6>
 800525c:	f8d8 4000 	ldr.w	r4, [r8]
 8005260:	4627      	mov	r7, r4
 8005262:	2f00      	cmp	r7, #0
 8005264:	d143      	bne.n	80052ee <_malloc_r+0xd6>
 8005266:	2c00      	cmp	r4, #0
 8005268:	d04b      	beq.n	8005302 <_malloc_r+0xea>
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	4639      	mov	r1, r7
 800526e:	4630      	mov	r0, r6
 8005270:	eb04 0903 	add.w	r9, r4, r3
 8005274:	f000 fc5a 	bl	8005b2c <_sbrk_r>
 8005278:	4581      	cmp	r9, r0
 800527a:	d142      	bne.n	8005302 <_malloc_r+0xea>
 800527c:	6821      	ldr	r1, [r4, #0]
 800527e:	1a6d      	subs	r5, r5, r1
 8005280:	4629      	mov	r1, r5
 8005282:	4630      	mov	r0, r6
 8005284:	f7ff ffa6 	bl	80051d4 <sbrk_aligned>
 8005288:	3001      	adds	r0, #1
 800528a:	d03a      	beq.n	8005302 <_malloc_r+0xea>
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	442b      	add	r3, r5
 8005290:	6023      	str	r3, [r4, #0]
 8005292:	f8d8 3000 	ldr.w	r3, [r8]
 8005296:	685a      	ldr	r2, [r3, #4]
 8005298:	bb62      	cbnz	r2, 80052f4 <_malloc_r+0xdc>
 800529a:	f8c8 7000 	str.w	r7, [r8]
 800529e:	e00f      	b.n	80052c0 <_malloc_r+0xa8>
 80052a0:	6822      	ldr	r2, [r4, #0]
 80052a2:	1b52      	subs	r2, r2, r5
 80052a4:	d420      	bmi.n	80052e8 <_malloc_r+0xd0>
 80052a6:	2a0b      	cmp	r2, #11
 80052a8:	d917      	bls.n	80052da <_malloc_r+0xc2>
 80052aa:	1961      	adds	r1, r4, r5
 80052ac:	42a3      	cmp	r3, r4
 80052ae:	6025      	str	r5, [r4, #0]
 80052b0:	bf18      	it	ne
 80052b2:	6059      	strne	r1, [r3, #4]
 80052b4:	6863      	ldr	r3, [r4, #4]
 80052b6:	bf08      	it	eq
 80052b8:	f8c8 1000 	streq.w	r1, [r8]
 80052bc:	5162      	str	r2, [r4, r5]
 80052be:	604b      	str	r3, [r1, #4]
 80052c0:	4630      	mov	r0, r6
 80052c2:	f000 fa69 	bl	8005798 <__malloc_unlock>
 80052c6:	f104 000b 	add.w	r0, r4, #11
 80052ca:	1d23      	adds	r3, r4, #4
 80052cc:	f020 0007 	bic.w	r0, r0, #7
 80052d0:	1ac2      	subs	r2, r0, r3
 80052d2:	bf1c      	itt	ne
 80052d4:	1a1b      	subne	r3, r3, r0
 80052d6:	50a3      	strne	r3, [r4, r2]
 80052d8:	e7af      	b.n	800523a <_malloc_r+0x22>
 80052da:	6862      	ldr	r2, [r4, #4]
 80052dc:	42a3      	cmp	r3, r4
 80052de:	bf0c      	ite	eq
 80052e0:	f8c8 2000 	streq.w	r2, [r8]
 80052e4:	605a      	strne	r2, [r3, #4]
 80052e6:	e7eb      	b.n	80052c0 <_malloc_r+0xa8>
 80052e8:	4623      	mov	r3, r4
 80052ea:	6864      	ldr	r4, [r4, #4]
 80052ec:	e7ae      	b.n	800524c <_malloc_r+0x34>
 80052ee:	463c      	mov	r4, r7
 80052f0:	687f      	ldr	r7, [r7, #4]
 80052f2:	e7b6      	b.n	8005262 <_malloc_r+0x4a>
 80052f4:	461a      	mov	r2, r3
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	42a3      	cmp	r3, r4
 80052fa:	d1fb      	bne.n	80052f4 <_malloc_r+0xdc>
 80052fc:	2300      	movs	r3, #0
 80052fe:	6053      	str	r3, [r2, #4]
 8005300:	e7de      	b.n	80052c0 <_malloc_r+0xa8>
 8005302:	230c      	movs	r3, #12
 8005304:	6033      	str	r3, [r6, #0]
 8005306:	4630      	mov	r0, r6
 8005308:	f000 fa46 	bl	8005798 <__malloc_unlock>
 800530c:	e794      	b.n	8005238 <_malloc_r+0x20>
 800530e:	6005      	str	r5, [r0, #0]
 8005310:	e7d6      	b.n	80052c0 <_malloc_r+0xa8>
 8005312:	bf00      	nop
 8005314:	200004b8 	.word	0x200004b8

08005318 <_printf_common>:
 8005318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800531c:	4616      	mov	r6, r2
 800531e:	4698      	mov	r8, r3
 8005320:	688a      	ldr	r2, [r1, #8]
 8005322:	690b      	ldr	r3, [r1, #16]
 8005324:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005328:	4293      	cmp	r3, r2
 800532a:	bfb8      	it	lt
 800532c:	4613      	movlt	r3, r2
 800532e:	6033      	str	r3, [r6, #0]
 8005330:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005334:	4607      	mov	r7, r0
 8005336:	460c      	mov	r4, r1
 8005338:	b10a      	cbz	r2, 800533e <_printf_common+0x26>
 800533a:	3301      	adds	r3, #1
 800533c:	6033      	str	r3, [r6, #0]
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	0699      	lsls	r1, r3, #26
 8005342:	bf42      	ittt	mi
 8005344:	6833      	ldrmi	r3, [r6, #0]
 8005346:	3302      	addmi	r3, #2
 8005348:	6033      	strmi	r3, [r6, #0]
 800534a:	6825      	ldr	r5, [r4, #0]
 800534c:	f015 0506 	ands.w	r5, r5, #6
 8005350:	d106      	bne.n	8005360 <_printf_common+0x48>
 8005352:	f104 0a19 	add.w	sl, r4, #25
 8005356:	68e3      	ldr	r3, [r4, #12]
 8005358:	6832      	ldr	r2, [r6, #0]
 800535a:	1a9b      	subs	r3, r3, r2
 800535c:	42ab      	cmp	r3, r5
 800535e:	dc26      	bgt.n	80053ae <_printf_common+0x96>
 8005360:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005364:	6822      	ldr	r2, [r4, #0]
 8005366:	3b00      	subs	r3, #0
 8005368:	bf18      	it	ne
 800536a:	2301      	movne	r3, #1
 800536c:	0692      	lsls	r2, r2, #26
 800536e:	d42b      	bmi.n	80053c8 <_printf_common+0xb0>
 8005370:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005374:	4641      	mov	r1, r8
 8005376:	4638      	mov	r0, r7
 8005378:	47c8      	blx	r9
 800537a:	3001      	adds	r0, #1
 800537c:	d01e      	beq.n	80053bc <_printf_common+0xa4>
 800537e:	6823      	ldr	r3, [r4, #0]
 8005380:	6922      	ldr	r2, [r4, #16]
 8005382:	f003 0306 	and.w	r3, r3, #6
 8005386:	2b04      	cmp	r3, #4
 8005388:	bf02      	ittt	eq
 800538a:	68e5      	ldreq	r5, [r4, #12]
 800538c:	6833      	ldreq	r3, [r6, #0]
 800538e:	1aed      	subeq	r5, r5, r3
 8005390:	68a3      	ldr	r3, [r4, #8]
 8005392:	bf0c      	ite	eq
 8005394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005398:	2500      	movne	r5, #0
 800539a:	4293      	cmp	r3, r2
 800539c:	bfc4      	itt	gt
 800539e:	1a9b      	subgt	r3, r3, r2
 80053a0:	18ed      	addgt	r5, r5, r3
 80053a2:	2600      	movs	r6, #0
 80053a4:	341a      	adds	r4, #26
 80053a6:	42b5      	cmp	r5, r6
 80053a8:	d11a      	bne.n	80053e0 <_printf_common+0xc8>
 80053aa:	2000      	movs	r0, #0
 80053ac:	e008      	b.n	80053c0 <_printf_common+0xa8>
 80053ae:	2301      	movs	r3, #1
 80053b0:	4652      	mov	r2, sl
 80053b2:	4641      	mov	r1, r8
 80053b4:	4638      	mov	r0, r7
 80053b6:	47c8      	blx	r9
 80053b8:	3001      	adds	r0, #1
 80053ba:	d103      	bne.n	80053c4 <_printf_common+0xac>
 80053bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80053c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053c4:	3501      	adds	r5, #1
 80053c6:	e7c6      	b.n	8005356 <_printf_common+0x3e>
 80053c8:	18e1      	adds	r1, r4, r3
 80053ca:	1c5a      	adds	r2, r3, #1
 80053cc:	2030      	movs	r0, #48	@ 0x30
 80053ce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053d2:	4422      	add	r2, r4
 80053d4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053d8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053dc:	3302      	adds	r3, #2
 80053de:	e7c7      	b.n	8005370 <_printf_common+0x58>
 80053e0:	2301      	movs	r3, #1
 80053e2:	4622      	mov	r2, r4
 80053e4:	4641      	mov	r1, r8
 80053e6:	4638      	mov	r0, r7
 80053e8:	47c8      	blx	r9
 80053ea:	3001      	adds	r0, #1
 80053ec:	d0e6      	beq.n	80053bc <_printf_common+0xa4>
 80053ee:	3601      	adds	r6, #1
 80053f0:	e7d9      	b.n	80053a6 <_printf_common+0x8e>
	...

080053f4 <_printf_i>:
 80053f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053f8:	7e0f      	ldrb	r7, [r1, #24]
 80053fa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053fc:	2f78      	cmp	r7, #120	@ 0x78
 80053fe:	4691      	mov	r9, r2
 8005400:	4680      	mov	r8, r0
 8005402:	460c      	mov	r4, r1
 8005404:	469a      	mov	sl, r3
 8005406:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800540a:	d807      	bhi.n	800541c <_printf_i+0x28>
 800540c:	2f62      	cmp	r7, #98	@ 0x62
 800540e:	d80a      	bhi.n	8005426 <_printf_i+0x32>
 8005410:	2f00      	cmp	r7, #0
 8005412:	f000 80d2 	beq.w	80055ba <_printf_i+0x1c6>
 8005416:	2f58      	cmp	r7, #88	@ 0x58
 8005418:	f000 80b9 	beq.w	800558e <_printf_i+0x19a>
 800541c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005420:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005424:	e03a      	b.n	800549c <_printf_i+0xa8>
 8005426:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800542a:	2b15      	cmp	r3, #21
 800542c:	d8f6      	bhi.n	800541c <_printf_i+0x28>
 800542e:	a101      	add	r1, pc, #4	@ (adr r1, 8005434 <_printf_i+0x40>)
 8005430:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005434:	0800548d 	.word	0x0800548d
 8005438:	080054a1 	.word	0x080054a1
 800543c:	0800541d 	.word	0x0800541d
 8005440:	0800541d 	.word	0x0800541d
 8005444:	0800541d 	.word	0x0800541d
 8005448:	0800541d 	.word	0x0800541d
 800544c:	080054a1 	.word	0x080054a1
 8005450:	0800541d 	.word	0x0800541d
 8005454:	0800541d 	.word	0x0800541d
 8005458:	0800541d 	.word	0x0800541d
 800545c:	0800541d 	.word	0x0800541d
 8005460:	080055a1 	.word	0x080055a1
 8005464:	080054cb 	.word	0x080054cb
 8005468:	0800555b 	.word	0x0800555b
 800546c:	0800541d 	.word	0x0800541d
 8005470:	0800541d 	.word	0x0800541d
 8005474:	080055c3 	.word	0x080055c3
 8005478:	0800541d 	.word	0x0800541d
 800547c:	080054cb 	.word	0x080054cb
 8005480:	0800541d 	.word	0x0800541d
 8005484:	0800541d 	.word	0x0800541d
 8005488:	08005563 	.word	0x08005563
 800548c:	6833      	ldr	r3, [r6, #0]
 800548e:	1d1a      	adds	r2, r3, #4
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6032      	str	r2, [r6, #0]
 8005494:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005498:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800549c:	2301      	movs	r3, #1
 800549e:	e09d      	b.n	80055dc <_printf_i+0x1e8>
 80054a0:	6833      	ldr	r3, [r6, #0]
 80054a2:	6820      	ldr	r0, [r4, #0]
 80054a4:	1d19      	adds	r1, r3, #4
 80054a6:	6031      	str	r1, [r6, #0]
 80054a8:	0606      	lsls	r6, r0, #24
 80054aa:	d501      	bpl.n	80054b0 <_printf_i+0xbc>
 80054ac:	681d      	ldr	r5, [r3, #0]
 80054ae:	e003      	b.n	80054b8 <_printf_i+0xc4>
 80054b0:	0645      	lsls	r5, r0, #25
 80054b2:	d5fb      	bpl.n	80054ac <_printf_i+0xb8>
 80054b4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054b8:	2d00      	cmp	r5, #0
 80054ba:	da03      	bge.n	80054c4 <_printf_i+0xd0>
 80054bc:	232d      	movs	r3, #45	@ 0x2d
 80054be:	426d      	negs	r5, r5
 80054c0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054c4:	4859      	ldr	r0, [pc, #356]	@ (800562c <_printf_i+0x238>)
 80054c6:	230a      	movs	r3, #10
 80054c8:	e011      	b.n	80054ee <_printf_i+0xfa>
 80054ca:	6821      	ldr	r1, [r4, #0]
 80054cc:	6833      	ldr	r3, [r6, #0]
 80054ce:	0608      	lsls	r0, r1, #24
 80054d0:	f853 5b04 	ldr.w	r5, [r3], #4
 80054d4:	d402      	bmi.n	80054dc <_printf_i+0xe8>
 80054d6:	0649      	lsls	r1, r1, #25
 80054d8:	bf48      	it	mi
 80054da:	b2ad      	uxthmi	r5, r5
 80054dc:	2f6f      	cmp	r7, #111	@ 0x6f
 80054de:	4853      	ldr	r0, [pc, #332]	@ (800562c <_printf_i+0x238>)
 80054e0:	6033      	str	r3, [r6, #0]
 80054e2:	bf14      	ite	ne
 80054e4:	230a      	movne	r3, #10
 80054e6:	2308      	moveq	r3, #8
 80054e8:	2100      	movs	r1, #0
 80054ea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054ee:	6866      	ldr	r6, [r4, #4]
 80054f0:	60a6      	str	r6, [r4, #8]
 80054f2:	2e00      	cmp	r6, #0
 80054f4:	bfa2      	ittt	ge
 80054f6:	6821      	ldrge	r1, [r4, #0]
 80054f8:	f021 0104 	bicge.w	r1, r1, #4
 80054fc:	6021      	strge	r1, [r4, #0]
 80054fe:	b90d      	cbnz	r5, 8005504 <_printf_i+0x110>
 8005500:	2e00      	cmp	r6, #0
 8005502:	d04b      	beq.n	800559c <_printf_i+0x1a8>
 8005504:	4616      	mov	r6, r2
 8005506:	fbb5 f1f3 	udiv	r1, r5, r3
 800550a:	fb03 5711 	mls	r7, r3, r1, r5
 800550e:	5dc7      	ldrb	r7, [r0, r7]
 8005510:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005514:	462f      	mov	r7, r5
 8005516:	42bb      	cmp	r3, r7
 8005518:	460d      	mov	r5, r1
 800551a:	d9f4      	bls.n	8005506 <_printf_i+0x112>
 800551c:	2b08      	cmp	r3, #8
 800551e:	d10b      	bne.n	8005538 <_printf_i+0x144>
 8005520:	6823      	ldr	r3, [r4, #0]
 8005522:	07df      	lsls	r7, r3, #31
 8005524:	d508      	bpl.n	8005538 <_printf_i+0x144>
 8005526:	6923      	ldr	r3, [r4, #16]
 8005528:	6861      	ldr	r1, [r4, #4]
 800552a:	4299      	cmp	r1, r3
 800552c:	bfde      	ittt	le
 800552e:	2330      	movle	r3, #48	@ 0x30
 8005530:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005534:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005538:	1b92      	subs	r2, r2, r6
 800553a:	6122      	str	r2, [r4, #16]
 800553c:	f8cd a000 	str.w	sl, [sp]
 8005540:	464b      	mov	r3, r9
 8005542:	aa03      	add	r2, sp, #12
 8005544:	4621      	mov	r1, r4
 8005546:	4640      	mov	r0, r8
 8005548:	f7ff fee6 	bl	8005318 <_printf_common>
 800554c:	3001      	adds	r0, #1
 800554e:	d14a      	bne.n	80055e6 <_printf_i+0x1f2>
 8005550:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005554:	b004      	add	sp, #16
 8005556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	f043 0320 	orr.w	r3, r3, #32
 8005560:	6023      	str	r3, [r4, #0]
 8005562:	4833      	ldr	r0, [pc, #204]	@ (8005630 <_printf_i+0x23c>)
 8005564:	2778      	movs	r7, #120	@ 0x78
 8005566:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	6831      	ldr	r1, [r6, #0]
 800556e:	061f      	lsls	r7, r3, #24
 8005570:	f851 5b04 	ldr.w	r5, [r1], #4
 8005574:	d402      	bmi.n	800557c <_printf_i+0x188>
 8005576:	065f      	lsls	r7, r3, #25
 8005578:	bf48      	it	mi
 800557a:	b2ad      	uxthmi	r5, r5
 800557c:	6031      	str	r1, [r6, #0]
 800557e:	07d9      	lsls	r1, r3, #31
 8005580:	bf44      	itt	mi
 8005582:	f043 0320 	orrmi.w	r3, r3, #32
 8005586:	6023      	strmi	r3, [r4, #0]
 8005588:	b11d      	cbz	r5, 8005592 <_printf_i+0x19e>
 800558a:	2310      	movs	r3, #16
 800558c:	e7ac      	b.n	80054e8 <_printf_i+0xf4>
 800558e:	4827      	ldr	r0, [pc, #156]	@ (800562c <_printf_i+0x238>)
 8005590:	e7e9      	b.n	8005566 <_printf_i+0x172>
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	f023 0320 	bic.w	r3, r3, #32
 8005598:	6023      	str	r3, [r4, #0]
 800559a:	e7f6      	b.n	800558a <_printf_i+0x196>
 800559c:	4616      	mov	r6, r2
 800559e:	e7bd      	b.n	800551c <_printf_i+0x128>
 80055a0:	6833      	ldr	r3, [r6, #0]
 80055a2:	6825      	ldr	r5, [r4, #0]
 80055a4:	6961      	ldr	r1, [r4, #20]
 80055a6:	1d18      	adds	r0, r3, #4
 80055a8:	6030      	str	r0, [r6, #0]
 80055aa:	062e      	lsls	r6, r5, #24
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	d501      	bpl.n	80055b4 <_printf_i+0x1c0>
 80055b0:	6019      	str	r1, [r3, #0]
 80055b2:	e002      	b.n	80055ba <_printf_i+0x1c6>
 80055b4:	0668      	lsls	r0, r5, #25
 80055b6:	d5fb      	bpl.n	80055b0 <_printf_i+0x1bc>
 80055b8:	8019      	strh	r1, [r3, #0]
 80055ba:	2300      	movs	r3, #0
 80055bc:	6123      	str	r3, [r4, #16]
 80055be:	4616      	mov	r6, r2
 80055c0:	e7bc      	b.n	800553c <_printf_i+0x148>
 80055c2:	6833      	ldr	r3, [r6, #0]
 80055c4:	1d1a      	adds	r2, r3, #4
 80055c6:	6032      	str	r2, [r6, #0]
 80055c8:	681e      	ldr	r6, [r3, #0]
 80055ca:	6862      	ldr	r2, [r4, #4]
 80055cc:	2100      	movs	r1, #0
 80055ce:	4630      	mov	r0, r6
 80055d0:	f7fa fe16 	bl	8000200 <memchr>
 80055d4:	b108      	cbz	r0, 80055da <_printf_i+0x1e6>
 80055d6:	1b80      	subs	r0, r0, r6
 80055d8:	6060      	str	r0, [r4, #4]
 80055da:	6863      	ldr	r3, [r4, #4]
 80055dc:	6123      	str	r3, [r4, #16]
 80055de:	2300      	movs	r3, #0
 80055e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055e4:	e7aa      	b.n	800553c <_printf_i+0x148>
 80055e6:	6923      	ldr	r3, [r4, #16]
 80055e8:	4632      	mov	r2, r6
 80055ea:	4649      	mov	r1, r9
 80055ec:	4640      	mov	r0, r8
 80055ee:	47d0      	blx	sl
 80055f0:	3001      	adds	r0, #1
 80055f2:	d0ad      	beq.n	8005550 <_printf_i+0x15c>
 80055f4:	6823      	ldr	r3, [r4, #0]
 80055f6:	079b      	lsls	r3, r3, #30
 80055f8:	d413      	bmi.n	8005622 <_printf_i+0x22e>
 80055fa:	68e0      	ldr	r0, [r4, #12]
 80055fc:	9b03      	ldr	r3, [sp, #12]
 80055fe:	4298      	cmp	r0, r3
 8005600:	bfb8      	it	lt
 8005602:	4618      	movlt	r0, r3
 8005604:	e7a6      	b.n	8005554 <_printf_i+0x160>
 8005606:	2301      	movs	r3, #1
 8005608:	4632      	mov	r2, r6
 800560a:	4649      	mov	r1, r9
 800560c:	4640      	mov	r0, r8
 800560e:	47d0      	blx	sl
 8005610:	3001      	adds	r0, #1
 8005612:	d09d      	beq.n	8005550 <_printf_i+0x15c>
 8005614:	3501      	adds	r5, #1
 8005616:	68e3      	ldr	r3, [r4, #12]
 8005618:	9903      	ldr	r1, [sp, #12]
 800561a:	1a5b      	subs	r3, r3, r1
 800561c:	42ab      	cmp	r3, r5
 800561e:	dcf2      	bgt.n	8005606 <_printf_i+0x212>
 8005620:	e7eb      	b.n	80055fa <_printf_i+0x206>
 8005622:	2500      	movs	r5, #0
 8005624:	f104 0619 	add.w	r6, r4, #25
 8005628:	e7f5      	b.n	8005616 <_printf_i+0x222>
 800562a:	bf00      	nop
 800562c:	08005cef 	.word	0x08005cef
 8005630:	08005d00 	.word	0x08005d00

08005634 <__sflush_r>:
 8005634:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800563c:	0716      	lsls	r6, r2, #28
 800563e:	4605      	mov	r5, r0
 8005640:	460c      	mov	r4, r1
 8005642:	d454      	bmi.n	80056ee <__sflush_r+0xba>
 8005644:	684b      	ldr	r3, [r1, #4]
 8005646:	2b00      	cmp	r3, #0
 8005648:	dc02      	bgt.n	8005650 <__sflush_r+0x1c>
 800564a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800564c:	2b00      	cmp	r3, #0
 800564e:	dd48      	ble.n	80056e2 <__sflush_r+0xae>
 8005650:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005652:	2e00      	cmp	r6, #0
 8005654:	d045      	beq.n	80056e2 <__sflush_r+0xae>
 8005656:	2300      	movs	r3, #0
 8005658:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800565c:	682f      	ldr	r7, [r5, #0]
 800565e:	6a21      	ldr	r1, [r4, #32]
 8005660:	602b      	str	r3, [r5, #0]
 8005662:	d030      	beq.n	80056c6 <__sflush_r+0x92>
 8005664:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005666:	89a3      	ldrh	r3, [r4, #12]
 8005668:	0759      	lsls	r1, r3, #29
 800566a:	d505      	bpl.n	8005678 <__sflush_r+0x44>
 800566c:	6863      	ldr	r3, [r4, #4]
 800566e:	1ad2      	subs	r2, r2, r3
 8005670:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005672:	b10b      	cbz	r3, 8005678 <__sflush_r+0x44>
 8005674:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005676:	1ad2      	subs	r2, r2, r3
 8005678:	2300      	movs	r3, #0
 800567a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800567c:	6a21      	ldr	r1, [r4, #32]
 800567e:	4628      	mov	r0, r5
 8005680:	47b0      	blx	r6
 8005682:	1c43      	adds	r3, r0, #1
 8005684:	89a3      	ldrh	r3, [r4, #12]
 8005686:	d106      	bne.n	8005696 <__sflush_r+0x62>
 8005688:	6829      	ldr	r1, [r5, #0]
 800568a:	291d      	cmp	r1, #29
 800568c:	d82b      	bhi.n	80056e6 <__sflush_r+0xb2>
 800568e:	4a2a      	ldr	r2, [pc, #168]	@ (8005738 <__sflush_r+0x104>)
 8005690:	410a      	asrs	r2, r1
 8005692:	07d6      	lsls	r6, r2, #31
 8005694:	d427      	bmi.n	80056e6 <__sflush_r+0xb2>
 8005696:	2200      	movs	r2, #0
 8005698:	6062      	str	r2, [r4, #4]
 800569a:	04d9      	lsls	r1, r3, #19
 800569c:	6922      	ldr	r2, [r4, #16]
 800569e:	6022      	str	r2, [r4, #0]
 80056a0:	d504      	bpl.n	80056ac <__sflush_r+0x78>
 80056a2:	1c42      	adds	r2, r0, #1
 80056a4:	d101      	bne.n	80056aa <__sflush_r+0x76>
 80056a6:	682b      	ldr	r3, [r5, #0]
 80056a8:	b903      	cbnz	r3, 80056ac <__sflush_r+0x78>
 80056aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80056ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056ae:	602f      	str	r7, [r5, #0]
 80056b0:	b1b9      	cbz	r1, 80056e2 <__sflush_r+0xae>
 80056b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80056b6:	4299      	cmp	r1, r3
 80056b8:	d002      	beq.n	80056c0 <__sflush_r+0x8c>
 80056ba:	4628      	mov	r0, r5
 80056bc:	f000 fa58 	bl	8005b70 <_free_r>
 80056c0:	2300      	movs	r3, #0
 80056c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80056c4:	e00d      	b.n	80056e2 <__sflush_r+0xae>
 80056c6:	2301      	movs	r3, #1
 80056c8:	4628      	mov	r0, r5
 80056ca:	47b0      	blx	r6
 80056cc:	4602      	mov	r2, r0
 80056ce:	1c50      	adds	r0, r2, #1
 80056d0:	d1c9      	bne.n	8005666 <__sflush_r+0x32>
 80056d2:	682b      	ldr	r3, [r5, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d0c6      	beq.n	8005666 <__sflush_r+0x32>
 80056d8:	2b1d      	cmp	r3, #29
 80056da:	d001      	beq.n	80056e0 <__sflush_r+0xac>
 80056dc:	2b16      	cmp	r3, #22
 80056de:	d11e      	bne.n	800571e <__sflush_r+0xea>
 80056e0:	602f      	str	r7, [r5, #0]
 80056e2:	2000      	movs	r0, #0
 80056e4:	e022      	b.n	800572c <__sflush_r+0xf8>
 80056e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056ea:	b21b      	sxth	r3, r3
 80056ec:	e01b      	b.n	8005726 <__sflush_r+0xf2>
 80056ee:	690f      	ldr	r7, [r1, #16]
 80056f0:	2f00      	cmp	r7, #0
 80056f2:	d0f6      	beq.n	80056e2 <__sflush_r+0xae>
 80056f4:	0793      	lsls	r3, r2, #30
 80056f6:	680e      	ldr	r6, [r1, #0]
 80056f8:	bf08      	it	eq
 80056fa:	694b      	ldreq	r3, [r1, #20]
 80056fc:	600f      	str	r7, [r1, #0]
 80056fe:	bf18      	it	ne
 8005700:	2300      	movne	r3, #0
 8005702:	eba6 0807 	sub.w	r8, r6, r7
 8005706:	608b      	str	r3, [r1, #8]
 8005708:	f1b8 0f00 	cmp.w	r8, #0
 800570c:	dde9      	ble.n	80056e2 <__sflush_r+0xae>
 800570e:	6a21      	ldr	r1, [r4, #32]
 8005710:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005712:	4643      	mov	r3, r8
 8005714:	463a      	mov	r2, r7
 8005716:	4628      	mov	r0, r5
 8005718:	47b0      	blx	r6
 800571a:	2800      	cmp	r0, #0
 800571c:	dc08      	bgt.n	8005730 <__sflush_r+0xfc>
 800571e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005726:	81a3      	strh	r3, [r4, #12]
 8005728:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800572c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005730:	4407      	add	r7, r0
 8005732:	eba8 0800 	sub.w	r8, r8, r0
 8005736:	e7e7      	b.n	8005708 <__sflush_r+0xd4>
 8005738:	dfbffffe 	.word	0xdfbffffe

0800573c <_fflush_r>:
 800573c:	b538      	push	{r3, r4, r5, lr}
 800573e:	690b      	ldr	r3, [r1, #16]
 8005740:	4605      	mov	r5, r0
 8005742:	460c      	mov	r4, r1
 8005744:	b913      	cbnz	r3, 800574c <_fflush_r+0x10>
 8005746:	2500      	movs	r5, #0
 8005748:	4628      	mov	r0, r5
 800574a:	bd38      	pop	{r3, r4, r5, pc}
 800574c:	b118      	cbz	r0, 8005756 <_fflush_r+0x1a>
 800574e:	6a03      	ldr	r3, [r0, #32]
 8005750:	b90b      	cbnz	r3, 8005756 <_fflush_r+0x1a>
 8005752:	f7ff fb1b 	bl	8004d8c <__sinit>
 8005756:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d0f3      	beq.n	8005746 <_fflush_r+0xa>
 800575e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005760:	07d0      	lsls	r0, r2, #31
 8005762:	d404      	bmi.n	800576e <_fflush_r+0x32>
 8005764:	0599      	lsls	r1, r3, #22
 8005766:	d402      	bmi.n	800576e <_fflush_r+0x32>
 8005768:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800576a:	f7ff fbf0 	bl	8004f4e <__retarget_lock_acquire_recursive>
 800576e:	4628      	mov	r0, r5
 8005770:	4621      	mov	r1, r4
 8005772:	f7ff ff5f 	bl	8005634 <__sflush_r>
 8005776:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005778:	07da      	lsls	r2, r3, #31
 800577a:	4605      	mov	r5, r0
 800577c:	d4e4      	bmi.n	8005748 <_fflush_r+0xc>
 800577e:	89a3      	ldrh	r3, [r4, #12]
 8005780:	059b      	lsls	r3, r3, #22
 8005782:	d4e1      	bmi.n	8005748 <_fflush_r+0xc>
 8005784:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005786:	f7ff fbe3 	bl	8004f50 <__retarget_lock_release_recursive>
 800578a:	e7dd      	b.n	8005748 <_fflush_r+0xc>

0800578c <__malloc_lock>:
 800578c:	4801      	ldr	r0, [pc, #4]	@ (8005794 <__malloc_lock+0x8>)
 800578e:	f7ff bbde 	b.w	8004f4e <__retarget_lock_acquire_recursive>
 8005792:	bf00      	nop
 8005794:	200004b0 	.word	0x200004b0

08005798 <__malloc_unlock>:
 8005798:	4801      	ldr	r0, [pc, #4]	@ (80057a0 <__malloc_unlock+0x8>)
 800579a:	f7ff bbd9 	b.w	8004f50 <__retarget_lock_release_recursive>
 800579e:	bf00      	nop
 80057a0:	200004b0 	.word	0x200004b0

080057a4 <__sread>:
 80057a4:	b510      	push	{r4, lr}
 80057a6:	460c      	mov	r4, r1
 80057a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ac:	f000 f9ac 	bl	8005b08 <_read_r>
 80057b0:	2800      	cmp	r0, #0
 80057b2:	bfab      	itete	ge
 80057b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80057b6:	89a3      	ldrhlt	r3, [r4, #12]
 80057b8:	181b      	addge	r3, r3, r0
 80057ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80057be:	bfac      	ite	ge
 80057c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80057c2:	81a3      	strhlt	r3, [r4, #12]
 80057c4:	bd10      	pop	{r4, pc}

080057c6 <__swrite>:
 80057c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057ca:	461f      	mov	r7, r3
 80057cc:	898b      	ldrh	r3, [r1, #12]
 80057ce:	05db      	lsls	r3, r3, #23
 80057d0:	4605      	mov	r5, r0
 80057d2:	460c      	mov	r4, r1
 80057d4:	4616      	mov	r6, r2
 80057d6:	d505      	bpl.n	80057e4 <__swrite+0x1e>
 80057d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057dc:	2302      	movs	r3, #2
 80057de:	2200      	movs	r2, #0
 80057e0:	f000 f980 	bl	8005ae4 <_lseek_r>
 80057e4:	89a3      	ldrh	r3, [r4, #12]
 80057e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057ee:	81a3      	strh	r3, [r4, #12]
 80057f0:	4632      	mov	r2, r6
 80057f2:	463b      	mov	r3, r7
 80057f4:	4628      	mov	r0, r5
 80057f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057fa:	f000 b9a7 	b.w	8005b4c <_write_r>

080057fe <__sseek>:
 80057fe:	b510      	push	{r4, lr}
 8005800:	460c      	mov	r4, r1
 8005802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005806:	f000 f96d 	bl	8005ae4 <_lseek_r>
 800580a:	1c43      	adds	r3, r0, #1
 800580c:	89a3      	ldrh	r3, [r4, #12]
 800580e:	bf15      	itete	ne
 8005810:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005812:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005816:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800581a:	81a3      	strheq	r3, [r4, #12]
 800581c:	bf18      	it	ne
 800581e:	81a3      	strhne	r3, [r4, #12]
 8005820:	bd10      	pop	{r4, pc}

08005822 <__sclose>:
 8005822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005826:	f000 b92b 	b.w	8005a80 <_close_r>

0800582a <__swbuf_r>:
 800582a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582c:	460e      	mov	r6, r1
 800582e:	4614      	mov	r4, r2
 8005830:	4605      	mov	r5, r0
 8005832:	b118      	cbz	r0, 800583c <__swbuf_r+0x12>
 8005834:	6a03      	ldr	r3, [r0, #32]
 8005836:	b90b      	cbnz	r3, 800583c <__swbuf_r+0x12>
 8005838:	f7ff faa8 	bl	8004d8c <__sinit>
 800583c:	69a3      	ldr	r3, [r4, #24]
 800583e:	60a3      	str	r3, [r4, #8]
 8005840:	89a3      	ldrh	r3, [r4, #12]
 8005842:	071a      	lsls	r2, r3, #28
 8005844:	d501      	bpl.n	800584a <__swbuf_r+0x20>
 8005846:	6923      	ldr	r3, [r4, #16]
 8005848:	b943      	cbnz	r3, 800585c <__swbuf_r+0x32>
 800584a:	4621      	mov	r1, r4
 800584c:	4628      	mov	r0, r5
 800584e:	f000 f82b 	bl	80058a8 <__swsetup_r>
 8005852:	b118      	cbz	r0, 800585c <__swbuf_r+0x32>
 8005854:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005858:	4638      	mov	r0, r7
 800585a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800585c:	6823      	ldr	r3, [r4, #0]
 800585e:	6922      	ldr	r2, [r4, #16]
 8005860:	1a98      	subs	r0, r3, r2
 8005862:	6963      	ldr	r3, [r4, #20]
 8005864:	b2f6      	uxtb	r6, r6
 8005866:	4283      	cmp	r3, r0
 8005868:	4637      	mov	r7, r6
 800586a:	dc05      	bgt.n	8005878 <__swbuf_r+0x4e>
 800586c:	4621      	mov	r1, r4
 800586e:	4628      	mov	r0, r5
 8005870:	f7ff ff64 	bl	800573c <_fflush_r>
 8005874:	2800      	cmp	r0, #0
 8005876:	d1ed      	bne.n	8005854 <__swbuf_r+0x2a>
 8005878:	68a3      	ldr	r3, [r4, #8]
 800587a:	3b01      	subs	r3, #1
 800587c:	60a3      	str	r3, [r4, #8]
 800587e:	6823      	ldr	r3, [r4, #0]
 8005880:	1c5a      	adds	r2, r3, #1
 8005882:	6022      	str	r2, [r4, #0]
 8005884:	701e      	strb	r6, [r3, #0]
 8005886:	6962      	ldr	r2, [r4, #20]
 8005888:	1c43      	adds	r3, r0, #1
 800588a:	429a      	cmp	r2, r3
 800588c:	d004      	beq.n	8005898 <__swbuf_r+0x6e>
 800588e:	89a3      	ldrh	r3, [r4, #12]
 8005890:	07db      	lsls	r3, r3, #31
 8005892:	d5e1      	bpl.n	8005858 <__swbuf_r+0x2e>
 8005894:	2e0a      	cmp	r6, #10
 8005896:	d1df      	bne.n	8005858 <__swbuf_r+0x2e>
 8005898:	4621      	mov	r1, r4
 800589a:	4628      	mov	r0, r5
 800589c:	f7ff ff4e 	bl	800573c <_fflush_r>
 80058a0:	2800      	cmp	r0, #0
 80058a2:	d0d9      	beq.n	8005858 <__swbuf_r+0x2e>
 80058a4:	e7d6      	b.n	8005854 <__swbuf_r+0x2a>
	...

080058a8 <__swsetup_r>:
 80058a8:	b538      	push	{r3, r4, r5, lr}
 80058aa:	4b29      	ldr	r3, [pc, #164]	@ (8005950 <__swsetup_r+0xa8>)
 80058ac:	4605      	mov	r5, r0
 80058ae:	6818      	ldr	r0, [r3, #0]
 80058b0:	460c      	mov	r4, r1
 80058b2:	b118      	cbz	r0, 80058bc <__swsetup_r+0x14>
 80058b4:	6a03      	ldr	r3, [r0, #32]
 80058b6:	b90b      	cbnz	r3, 80058bc <__swsetup_r+0x14>
 80058b8:	f7ff fa68 	bl	8004d8c <__sinit>
 80058bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058c0:	0719      	lsls	r1, r3, #28
 80058c2:	d422      	bmi.n	800590a <__swsetup_r+0x62>
 80058c4:	06da      	lsls	r2, r3, #27
 80058c6:	d407      	bmi.n	80058d8 <__swsetup_r+0x30>
 80058c8:	2209      	movs	r2, #9
 80058ca:	602a      	str	r2, [r5, #0]
 80058cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058d0:	81a3      	strh	r3, [r4, #12]
 80058d2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80058d6:	e033      	b.n	8005940 <__swsetup_r+0x98>
 80058d8:	0758      	lsls	r0, r3, #29
 80058da:	d512      	bpl.n	8005902 <__swsetup_r+0x5a>
 80058dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058de:	b141      	cbz	r1, 80058f2 <__swsetup_r+0x4a>
 80058e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058e4:	4299      	cmp	r1, r3
 80058e6:	d002      	beq.n	80058ee <__swsetup_r+0x46>
 80058e8:	4628      	mov	r0, r5
 80058ea:	f000 f941 	bl	8005b70 <_free_r>
 80058ee:	2300      	movs	r3, #0
 80058f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80058f2:	89a3      	ldrh	r3, [r4, #12]
 80058f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80058f8:	81a3      	strh	r3, [r4, #12]
 80058fa:	2300      	movs	r3, #0
 80058fc:	6063      	str	r3, [r4, #4]
 80058fe:	6923      	ldr	r3, [r4, #16]
 8005900:	6023      	str	r3, [r4, #0]
 8005902:	89a3      	ldrh	r3, [r4, #12]
 8005904:	f043 0308 	orr.w	r3, r3, #8
 8005908:	81a3      	strh	r3, [r4, #12]
 800590a:	6923      	ldr	r3, [r4, #16]
 800590c:	b94b      	cbnz	r3, 8005922 <__swsetup_r+0x7a>
 800590e:	89a3      	ldrh	r3, [r4, #12]
 8005910:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005914:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005918:	d003      	beq.n	8005922 <__swsetup_r+0x7a>
 800591a:	4621      	mov	r1, r4
 800591c:	4628      	mov	r0, r5
 800591e:	f000 f83f 	bl	80059a0 <__smakebuf_r>
 8005922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005926:	f013 0201 	ands.w	r2, r3, #1
 800592a:	d00a      	beq.n	8005942 <__swsetup_r+0x9a>
 800592c:	2200      	movs	r2, #0
 800592e:	60a2      	str	r2, [r4, #8]
 8005930:	6962      	ldr	r2, [r4, #20]
 8005932:	4252      	negs	r2, r2
 8005934:	61a2      	str	r2, [r4, #24]
 8005936:	6922      	ldr	r2, [r4, #16]
 8005938:	b942      	cbnz	r2, 800594c <__swsetup_r+0xa4>
 800593a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800593e:	d1c5      	bne.n	80058cc <__swsetup_r+0x24>
 8005940:	bd38      	pop	{r3, r4, r5, pc}
 8005942:	0799      	lsls	r1, r3, #30
 8005944:	bf58      	it	pl
 8005946:	6962      	ldrpl	r2, [r4, #20]
 8005948:	60a2      	str	r2, [r4, #8]
 800594a:	e7f4      	b.n	8005936 <__swsetup_r+0x8e>
 800594c:	2000      	movs	r0, #0
 800594e:	e7f7      	b.n	8005940 <__swsetup_r+0x98>
 8005950:	20000020 	.word	0x20000020

08005954 <__swhatbuf_r>:
 8005954:	b570      	push	{r4, r5, r6, lr}
 8005956:	460c      	mov	r4, r1
 8005958:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800595c:	2900      	cmp	r1, #0
 800595e:	b096      	sub	sp, #88	@ 0x58
 8005960:	4615      	mov	r5, r2
 8005962:	461e      	mov	r6, r3
 8005964:	da0d      	bge.n	8005982 <__swhatbuf_r+0x2e>
 8005966:	89a3      	ldrh	r3, [r4, #12]
 8005968:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800596c:	f04f 0100 	mov.w	r1, #0
 8005970:	bf14      	ite	ne
 8005972:	2340      	movne	r3, #64	@ 0x40
 8005974:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005978:	2000      	movs	r0, #0
 800597a:	6031      	str	r1, [r6, #0]
 800597c:	602b      	str	r3, [r5, #0]
 800597e:	b016      	add	sp, #88	@ 0x58
 8005980:	bd70      	pop	{r4, r5, r6, pc}
 8005982:	466a      	mov	r2, sp
 8005984:	f000 f88c 	bl	8005aa0 <_fstat_r>
 8005988:	2800      	cmp	r0, #0
 800598a:	dbec      	blt.n	8005966 <__swhatbuf_r+0x12>
 800598c:	9901      	ldr	r1, [sp, #4]
 800598e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005992:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005996:	4259      	negs	r1, r3
 8005998:	4159      	adcs	r1, r3
 800599a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800599e:	e7eb      	b.n	8005978 <__swhatbuf_r+0x24>

080059a0 <__smakebuf_r>:
 80059a0:	898b      	ldrh	r3, [r1, #12]
 80059a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059a4:	079d      	lsls	r5, r3, #30
 80059a6:	4606      	mov	r6, r0
 80059a8:	460c      	mov	r4, r1
 80059aa:	d507      	bpl.n	80059bc <__smakebuf_r+0x1c>
 80059ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80059b0:	6023      	str	r3, [r4, #0]
 80059b2:	6123      	str	r3, [r4, #16]
 80059b4:	2301      	movs	r3, #1
 80059b6:	6163      	str	r3, [r4, #20]
 80059b8:	b003      	add	sp, #12
 80059ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059bc:	ab01      	add	r3, sp, #4
 80059be:	466a      	mov	r2, sp
 80059c0:	f7ff ffc8 	bl	8005954 <__swhatbuf_r>
 80059c4:	9f00      	ldr	r7, [sp, #0]
 80059c6:	4605      	mov	r5, r0
 80059c8:	4639      	mov	r1, r7
 80059ca:	4630      	mov	r0, r6
 80059cc:	f7ff fc24 	bl	8005218 <_malloc_r>
 80059d0:	b948      	cbnz	r0, 80059e6 <__smakebuf_r+0x46>
 80059d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059d6:	059a      	lsls	r2, r3, #22
 80059d8:	d4ee      	bmi.n	80059b8 <__smakebuf_r+0x18>
 80059da:	f023 0303 	bic.w	r3, r3, #3
 80059de:	f043 0302 	orr.w	r3, r3, #2
 80059e2:	81a3      	strh	r3, [r4, #12]
 80059e4:	e7e2      	b.n	80059ac <__smakebuf_r+0xc>
 80059e6:	89a3      	ldrh	r3, [r4, #12]
 80059e8:	6020      	str	r0, [r4, #0]
 80059ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059ee:	81a3      	strh	r3, [r4, #12]
 80059f0:	9b01      	ldr	r3, [sp, #4]
 80059f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80059f6:	b15b      	cbz	r3, 8005a10 <__smakebuf_r+0x70>
 80059f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059fc:	4630      	mov	r0, r6
 80059fe:	f000 f861 	bl	8005ac4 <_isatty_r>
 8005a02:	b128      	cbz	r0, 8005a10 <__smakebuf_r+0x70>
 8005a04:	89a3      	ldrh	r3, [r4, #12]
 8005a06:	f023 0303 	bic.w	r3, r3, #3
 8005a0a:	f043 0301 	orr.w	r3, r3, #1
 8005a0e:	81a3      	strh	r3, [r4, #12]
 8005a10:	89a3      	ldrh	r3, [r4, #12]
 8005a12:	431d      	orrs	r5, r3
 8005a14:	81a5      	strh	r5, [r4, #12]
 8005a16:	e7cf      	b.n	80059b8 <__smakebuf_r+0x18>

08005a18 <_putc_r>:
 8005a18:	b570      	push	{r4, r5, r6, lr}
 8005a1a:	460d      	mov	r5, r1
 8005a1c:	4614      	mov	r4, r2
 8005a1e:	4606      	mov	r6, r0
 8005a20:	b118      	cbz	r0, 8005a2a <_putc_r+0x12>
 8005a22:	6a03      	ldr	r3, [r0, #32]
 8005a24:	b90b      	cbnz	r3, 8005a2a <_putc_r+0x12>
 8005a26:	f7ff f9b1 	bl	8004d8c <__sinit>
 8005a2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a2c:	07d8      	lsls	r0, r3, #31
 8005a2e:	d405      	bmi.n	8005a3c <_putc_r+0x24>
 8005a30:	89a3      	ldrh	r3, [r4, #12]
 8005a32:	0599      	lsls	r1, r3, #22
 8005a34:	d402      	bmi.n	8005a3c <_putc_r+0x24>
 8005a36:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a38:	f7ff fa89 	bl	8004f4e <__retarget_lock_acquire_recursive>
 8005a3c:	68a3      	ldr	r3, [r4, #8]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	60a3      	str	r3, [r4, #8]
 8005a44:	da05      	bge.n	8005a52 <_putc_r+0x3a>
 8005a46:	69a2      	ldr	r2, [r4, #24]
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	db12      	blt.n	8005a72 <_putc_r+0x5a>
 8005a4c:	b2eb      	uxtb	r3, r5
 8005a4e:	2b0a      	cmp	r3, #10
 8005a50:	d00f      	beq.n	8005a72 <_putc_r+0x5a>
 8005a52:	6823      	ldr	r3, [r4, #0]
 8005a54:	1c5a      	adds	r2, r3, #1
 8005a56:	6022      	str	r2, [r4, #0]
 8005a58:	701d      	strb	r5, [r3, #0]
 8005a5a:	b2ed      	uxtb	r5, r5
 8005a5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a5e:	07da      	lsls	r2, r3, #31
 8005a60:	d405      	bmi.n	8005a6e <_putc_r+0x56>
 8005a62:	89a3      	ldrh	r3, [r4, #12]
 8005a64:	059b      	lsls	r3, r3, #22
 8005a66:	d402      	bmi.n	8005a6e <_putc_r+0x56>
 8005a68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a6a:	f7ff fa71 	bl	8004f50 <__retarget_lock_release_recursive>
 8005a6e:	4628      	mov	r0, r5
 8005a70:	bd70      	pop	{r4, r5, r6, pc}
 8005a72:	4629      	mov	r1, r5
 8005a74:	4622      	mov	r2, r4
 8005a76:	4630      	mov	r0, r6
 8005a78:	f7ff fed7 	bl	800582a <__swbuf_r>
 8005a7c:	4605      	mov	r5, r0
 8005a7e:	e7ed      	b.n	8005a5c <_putc_r+0x44>

08005a80 <_close_r>:
 8005a80:	b538      	push	{r3, r4, r5, lr}
 8005a82:	4d06      	ldr	r5, [pc, #24]	@ (8005a9c <_close_r+0x1c>)
 8005a84:	2300      	movs	r3, #0
 8005a86:	4604      	mov	r4, r0
 8005a88:	4608      	mov	r0, r1
 8005a8a:	602b      	str	r3, [r5, #0]
 8005a8c:	f7fe ff2e 	bl	80048ec <_close>
 8005a90:	1c43      	adds	r3, r0, #1
 8005a92:	d102      	bne.n	8005a9a <_close_r+0x1a>
 8005a94:	682b      	ldr	r3, [r5, #0]
 8005a96:	b103      	cbz	r3, 8005a9a <_close_r+0x1a>
 8005a98:	6023      	str	r3, [r4, #0]
 8005a9a:	bd38      	pop	{r3, r4, r5, pc}
 8005a9c:	200004bc 	.word	0x200004bc

08005aa0 <_fstat_r>:
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	4d07      	ldr	r5, [pc, #28]	@ (8005ac0 <_fstat_r+0x20>)
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	4608      	mov	r0, r1
 8005aaa:	4611      	mov	r1, r2
 8005aac:	602b      	str	r3, [r5, #0]
 8005aae:	f7fe ff60 	bl	8004972 <_fstat>
 8005ab2:	1c43      	adds	r3, r0, #1
 8005ab4:	d102      	bne.n	8005abc <_fstat_r+0x1c>
 8005ab6:	682b      	ldr	r3, [r5, #0]
 8005ab8:	b103      	cbz	r3, 8005abc <_fstat_r+0x1c>
 8005aba:	6023      	str	r3, [r4, #0]
 8005abc:	bd38      	pop	{r3, r4, r5, pc}
 8005abe:	bf00      	nop
 8005ac0:	200004bc 	.word	0x200004bc

08005ac4 <_isatty_r>:
 8005ac4:	b538      	push	{r3, r4, r5, lr}
 8005ac6:	4d06      	ldr	r5, [pc, #24]	@ (8005ae0 <_isatty_r+0x1c>)
 8005ac8:	2300      	movs	r3, #0
 8005aca:	4604      	mov	r4, r0
 8005acc:	4608      	mov	r0, r1
 8005ace:	602b      	str	r3, [r5, #0]
 8005ad0:	f7ff f8b2 	bl	8004c38 <_isatty>
 8005ad4:	1c43      	adds	r3, r0, #1
 8005ad6:	d102      	bne.n	8005ade <_isatty_r+0x1a>
 8005ad8:	682b      	ldr	r3, [r5, #0]
 8005ada:	b103      	cbz	r3, 8005ade <_isatty_r+0x1a>
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	bd38      	pop	{r3, r4, r5, pc}
 8005ae0:	200004bc 	.word	0x200004bc

08005ae4 <_lseek_r>:
 8005ae4:	b538      	push	{r3, r4, r5, lr}
 8005ae6:	4d07      	ldr	r5, [pc, #28]	@ (8005b04 <_lseek_r+0x20>)
 8005ae8:	4604      	mov	r4, r0
 8005aea:	4608      	mov	r0, r1
 8005aec:	4611      	mov	r1, r2
 8005aee:	2200      	movs	r2, #0
 8005af0:	602a      	str	r2, [r5, #0]
 8005af2:	461a      	mov	r2, r3
 8005af4:	f7fe febb 	bl	800486e <_lseek>
 8005af8:	1c43      	adds	r3, r0, #1
 8005afa:	d102      	bne.n	8005b02 <_lseek_r+0x1e>
 8005afc:	682b      	ldr	r3, [r5, #0]
 8005afe:	b103      	cbz	r3, 8005b02 <_lseek_r+0x1e>
 8005b00:	6023      	str	r3, [r4, #0]
 8005b02:	bd38      	pop	{r3, r4, r5, pc}
 8005b04:	200004bc 	.word	0x200004bc

08005b08 <_read_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	4d07      	ldr	r5, [pc, #28]	@ (8005b28 <_read_r+0x20>)
 8005b0c:	4604      	mov	r4, r0
 8005b0e:	4608      	mov	r0, r1
 8005b10:	4611      	mov	r1, r2
 8005b12:	2200      	movs	r2, #0
 8005b14:	602a      	str	r2, [r5, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	f7fe fe53 	bl	80047c2 <_read>
 8005b1c:	1c43      	adds	r3, r0, #1
 8005b1e:	d102      	bne.n	8005b26 <_read_r+0x1e>
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	b103      	cbz	r3, 8005b26 <_read_r+0x1e>
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	bd38      	pop	{r3, r4, r5, pc}
 8005b28:	200004bc 	.word	0x200004bc

08005b2c <_sbrk_r>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	4d06      	ldr	r5, [pc, #24]	@ (8005b48 <_sbrk_r+0x1c>)
 8005b30:	2300      	movs	r3, #0
 8005b32:	4604      	mov	r4, r0
 8005b34:	4608      	mov	r0, r1
 8005b36:	602b      	str	r3, [r5, #0]
 8005b38:	f7fc fa7a 	bl	8002030 <_sbrk>
 8005b3c:	1c43      	adds	r3, r0, #1
 8005b3e:	d102      	bne.n	8005b46 <_sbrk_r+0x1a>
 8005b40:	682b      	ldr	r3, [r5, #0]
 8005b42:	b103      	cbz	r3, 8005b46 <_sbrk_r+0x1a>
 8005b44:	6023      	str	r3, [r4, #0]
 8005b46:	bd38      	pop	{r3, r4, r5, pc}
 8005b48:	200004bc 	.word	0x200004bc

08005b4c <_write_r>:
 8005b4c:	b538      	push	{r3, r4, r5, lr}
 8005b4e:	4d07      	ldr	r5, [pc, #28]	@ (8005b6c <_write_r+0x20>)
 8005b50:	4604      	mov	r4, r0
 8005b52:	4608      	mov	r0, r1
 8005b54:	4611      	mov	r1, r2
 8005b56:	2200      	movs	r2, #0
 8005b58:	602a      	str	r2, [r5, #0]
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	f7fe fe99 	bl	8004892 <_write>
 8005b60:	1c43      	adds	r3, r0, #1
 8005b62:	d102      	bne.n	8005b6a <_write_r+0x1e>
 8005b64:	682b      	ldr	r3, [r5, #0]
 8005b66:	b103      	cbz	r3, 8005b6a <_write_r+0x1e>
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	bd38      	pop	{r3, r4, r5, pc}
 8005b6c:	200004bc 	.word	0x200004bc

08005b70 <_free_r>:
 8005b70:	b538      	push	{r3, r4, r5, lr}
 8005b72:	4605      	mov	r5, r0
 8005b74:	2900      	cmp	r1, #0
 8005b76:	d041      	beq.n	8005bfc <_free_r+0x8c>
 8005b78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b7c:	1f0c      	subs	r4, r1, #4
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	bfb8      	it	lt
 8005b82:	18e4      	addlt	r4, r4, r3
 8005b84:	f7ff fe02 	bl	800578c <__malloc_lock>
 8005b88:	4a1d      	ldr	r2, [pc, #116]	@ (8005c00 <_free_r+0x90>)
 8005b8a:	6813      	ldr	r3, [r2, #0]
 8005b8c:	b933      	cbnz	r3, 8005b9c <_free_r+0x2c>
 8005b8e:	6063      	str	r3, [r4, #4]
 8005b90:	6014      	str	r4, [r2, #0]
 8005b92:	4628      	mov	r0, r5
 8005b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b98:	f7ff bdfe 	b.w	8005798 <__malloc_unlock>
 8005b9c:	42a3      	cmp	r3, r4
 8005b9e:	d908      	bls.n	8005bb2 <_free_r+0x42>
 8005ba0:	6820      	ldr	r0, [r4, #0]
 8005ba2:	1821      	adds	r1, r4, r0
 8005ba4:	428b      	cmp	r3, r1
 8005ba6:	bf01      	itttt	eq
 8005ba8:	6819      	ldreq	r1, [r3, #0]
 8005baa:	685b      	ldreq	r3, [r3, #4]
 8005bac:	1809      	addeq	r1, r1, r0
 8005bae:	6021      	streq	r1, [r4, #0]
 8005bb0:	e7ed      	b.n	8005b8e <_free_r+0x1e>
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	b10b      	cbz	r3, 8005bbc <_free_r+0x4c>
 8005bb8:	42a3      	cmp	r3, r4
 8005bba:	d9fa      	bls.n	8005bb2 <_free_r+0x42>
 8005bbc:	6811      	ldr	r1, [r2, #0]
 8005bbe:	1850      	adds	r0, r2, r1
 8005bc0:	42a0      	cmp	r0, r4
 8005bc2:	d10b      	bne.n	8005bdc <_free_r+0x6c>
 8005bc4:	6820      	ldr	r0, [r4, #0]
 8005bc6:	4401      	add	r1, r0
 8005bc8:	1850      	adds	r0, r2, r1
 8005bca:	4283      	cmp	r3, r0
 8005bcc:	6011      	str	r1, [r2, #0]
 8005bce:	d1e0      	bne.n	8005b92 <_free_r+0x22>
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	6053      	str	r3, [r2, #4]
 8005bd6:	4408      	add	r0, r1
 8005bd8:	6010      	str	r0, [r2, #0]
 8005bda:	e7da      	b.n	8005b92 <_free_r+0x22>
 8005bdc:	d902      	bls.n	8005be4 <_free_r+0x74>
 8005bde:	230c      	movs	r3, #12
 8005be0:	602b      	str	r3, [r5, #0]
 8005be2:	e7d6      	b.n	8005b92 <_free_r+0x22>
 8005be4:	6820      	ldr	r0, [r4, #0]
 8005be6:	1821      	adds	r1, r4, r0
 8005be8:	428b      	cmp	r3, r1
 8005bea:	bf04      	itt	eq
 8005bec:	6819      	ldreq	r1, [r3, #0]
 8005bee:	685b      	ldreq	r3, [r3, #4]
 8005bf0:	6063      	str	r3, [r4, #4]
 8005bf2:	bf04      	itt	eq
 8005bf4:	1809      	addeq	r1, r1, r0
 8005bf6:	6021      	streq	r1, [r4, #0]
 8005bf8:	6054      	str	r4, [r2, #4]
 8005bfa:	e7ca      	b.n	8005b92 <_free_r+0x22>
 8005bfc:	bd38      	pop	{r3, r4, r5, pc}
 8005bfe:	bf00      	nop
 8005c00:	200004b8 	.word	0x200004b8

08005c04 <_init>:
 8005c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c06:	bf00      	nop
 8005c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0a:	bc08      	pop	{r3}
 8005c0c:	469e      	mov	lr, r3
 8005c0e:	4770      	bx	lr

08005c10 <_fini>:
 8005c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c12:	bf00      	nop
 8005c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c16:	bc08      	pop	{r3}
 8005c18:	469e      	mov	lr, r3
 8005c1a:	4770      	bx	lr
