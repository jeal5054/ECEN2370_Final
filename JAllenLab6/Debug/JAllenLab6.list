
JAllenLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aa8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08005c58  08005c58  00006c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d50  08005d50  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005d50  08005d50  00006d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d58  08005d58  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d58  08005d58  00006d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d5c  08005d5c  00006d5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005d60  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007070  2**0
                  CONTENTS
 10 .bss          000004e0  20000070  20000070  00007070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000550  20000550  00007070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 13 .debug_info   000112e4  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027e6  00000000  00000000  00018384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001180  00000000  00000000  0001ab70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d9d  00000000  00000000  0001bcf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000259b0  00000000  00000000  0001ca8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016459  00000000  00000000  0004243d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df989  00000000  00000000  00058896  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013821f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055a4  00000000  00000000  00138264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0013d808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005c40 	.word	0x08005c40

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005c40 	.word	0x08005c40

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <applicationInit>:
 */
#include "ApplicationCode.h"
#include "InterruptControl.h"
#include "Matrixdef.h"

void applicationInit(){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	//applicationInterruptInit();
	addScheduledEvent(MATRIX_UPDATE_EVENT);
 8000594:	2004      	movs	r0, #4
 8000596:	f000 fe3f 	bl	8001218 <addScheduledEvent>
}
 800059a:	bf00      	nop
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <RND_NUM>:
 */
#include "Matrixdef.h"

#define MATRIX_LCD 0

void RND_NUM(void) { // issue here
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b086      	sub	sp, #24
 80005a4:	af00      	add	r7, sp, #0
	uint32_t RND;
	RNG_HandleTypeDef hrng;
	hrng.Instance = RNG;
 80005a6:	4b15      	ldr	r3, [pc, #84]	@ (80005fc <RND_NUM+0x5c>)
 80005a8:	607b      	str	r3, [r7, #4]

	if (HAL_RNG_Init(&hrng) != HAL_OK)
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	4618      	mov	r0, r3
 80005ae:	f003 fbdb 	bl	8003d68 <HAL_RNG_Init>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <RND_NUM+0x1c>
	{
		while(1);
 80005b8:	bf00      	nop
 80005ba:	e7fd      	b.n	80005b8 <RND_NUM+0x18>
	}
	  /* USER CODE BEGIN RNG_Init 2 */
    if (HAL_RNG_GenerateRandomNumber(&hrng, &RND) != HAL_OK) {
 80005bc:	f107 0214 	add.w	r2, r7, #20
 80005c0:	1d3b      	adds	r3, r7, #4
 80005c2:	4611      	mov	r1, r2
 80005c4:	4618      	mov	r0, r3
 80005c6:	f003 fbf9 	bl	8003dbc <HAL_RNG_GenerateRandomNumber>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <RND_NUM+0x34>
    	// Handle the error (e.g., infinite loop or error logging)
	    while (1);
 80005d0:	bf00      	nop
 80005d2:	e7fd      	b.n	80005d0 <RND_NUM+0x30>
	}
	   RND = RND % 7;  // Constrain the result to 0-6
 80005d4:	6979      	ldr	r1, [r7, #20]
 80005d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <RND_NUM+0x60>)
 80005d8:	fba3 2301 	umull	r2, r3, r3, r1
 80005dc:	1aca      	subs	r2, r1, r3
 80005de:	0852      	lsrs	r2, r2, #1
 80005e0:	4413      	add	r3, r2
 80005e2:	089a      	lsrs	r2, r3, #2
 80005e4:	4613      	mov	r3, r2
 80005e6:	00db      	lsls	r3, r3, #3
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	1aca      	subs	r2, r1, r3
 80005ec:	617a      	str	r2, [r7, #20]
	   randomNumber = RND;
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	4a04      	ldr	r2, [pc, #16]	@ (8000604 <RND_NUM+0x64>)
 80005f2:	6013      	str	r3, [r2, #0]
}
 80005f4:	bf00      	nop
 80005f6:	3718      	adds	r7, #24
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	50060800 	.word	0x50060800
 8000600:	24924925 	.word	0x24924925
 8000604:	2000011c 	.word	0x2000011c

08000608 <check_State>:

uint8_t check_State(void) {
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	if(     (object.originbit.x <= 0) || (object.originbit.x >= 9) ||
 800060c:	4b3a      	ldr	r3, [pc, #232]	@ (80006f8 <check_State+0xf0>)
 800060e:	789b      	ldrb	r3, [r3, #2]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d01b      	beq.n	800064c <check_State+0x44>
 8000614:	4b38      	ldr	r3, [pc, #224]	@ (80006f8 <check_State+0xf0>)
 8000616:	789b      	ldrb	r3, [r3, #2]
 8000618:	2b08      	cmp	r3, #8
 800061a:	d817      	bhi.n	800064c <check_State+0x44>
	   (object.suboriginbit_0.x <= 0) || (object.suboriginbit_0.x >= 9) ||
 800061c:	4b36      	ldr	r3, [pc, #216]	@ (80006f8 <check_State+0xf0>)
 800061e:	791b      	ldrb	r3, [r3, #4]
	if(     (object.originbit.x <= 0) || (object.originbit.x >= 9) ||
 8000620:	2b00      	cmp	r3, #0
 8000622:	d013      	beq.n	800064c <check_State+0x44>
	   (object.suboriginbit_0.x <= 0) || (object.suboriginbit_0.x >= 9) ||
 8000624:	4b34      	ldr	r3, [pc, #208]	@ (80006f8 <check_State+0xf0>)
 8000626:	791b      	ldrb	r3, [r3, #4]
 8000628:	2b08      	cmp	r3, #8
 800062a:	d80f      	bhi.n	800064c <check_State+0x44>
	   (object.suboriginbit_1.x <= 0) || (object.suboriginbit_1.x >= 9) ||
 800062c:	4b32      	ldr	r3, [pc, #200]	@ (80006f8 <check_State+0xf0>)
 800062e:	799b      	ldrb	r3, [r3, #6]
	   (object.suboriginbit_0.x <= 0) || (object.suboriginbit_0.x >= 9) ||
 8000630:	2b00      	cmp	r3, #0
 8000632:	d00b      	beq.n	800064c <check_State+0x44>
	   (object.suboriginbit_1.x <= 0) || (object.suboriginbit_1.x >= 9) ||
 8000634:	4b30      	ldr	r3, [pc, #192]	@ (80006f8 <check_State+0xf0>)
 8000636:	799b      	ldrb	r3, [r3, #6]
 8000638:	2b08      	cmp	r3, #8
 800063a:	d807      	bhi.n	800064c <check_State+0x44>
	   (object.suboriginbit_2.x <= 0) || (object.suboriginbit_2.x >= 9) )
 800063c:	4b2e      	ldr	r3, [pc, #184]	@ (80006f8 <check_State+0xf0>)
 800063e:	7a1b      	ldrb	r3, [r3, #8]
	   (object.suboriginbit_1.x <= 0) || (object.suboriginbit_1.x >= 9) ||
 8000640:	2b00      	cmp	r3, #0
 8000642:	d003      	beq.n	800064c <check_State+0x44>
	   (object.suboriginbit_2.x <= 0) || (object.suboriginbit_2.x >= 9) )
 8000644:	4b2c      	ldr	r3, [pc, #176]	@ (80006f8 <check_State+0xf0>)
 8000646:	7a1b      	ldrb	r3, [r3, #8]
 8000648:	2b08      	cmp	r3, #8
 800064a:	d901      	bls.n	8000650 <check_State+0x48>
	{
		return 0; // This means object has gone outside of the bounds
 800064c:	2300      	movs	r3, #0
 800064e:	e050      	b.n	80006f2 <check_State+0xea>
	} else if( (object.originbit.y <= 0)      || (object.suboriginbit_0.y <= 0) ||
 8000650:	4b29      	ldr	r3, [pc, #164]	@ (80006f8 <check_State+0xf0>)
 8000652:	78db      	ldrb	r3, [r3, #3]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d00b      	beq.n	8000670 <check_State+0x68>
 8000658:	4b27      	ldr	r3, [pc, #156]	@ (80006f8 <check_State+0xf0>)
 800065a:	795b      	ldrb	r3, [r3, #5]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d007      	beq.n	8000670 <check_State+0x68>
			   (object.suboriginbit_1.y <= 0) || (object.suboriginbit_2.y <= 0) )
 8000660:	4b25      	ldr	r3, [pc, #148]	@ (80006f8 <check_State+0xf0>)
 8000662:	79db      	ldrb	r3, [r3, #7]
	} else if( (object.originbit.y <= 0)      || (object.suboriginbit_0.y <= 0) ||
 8000664:	2b00      	cmp	r3, #0
 8000666:	d003      	beq.n	8000670 <check_State+0x68>
			   (object.suboriginbit_1.y <= 0) || (object.suboriginbit_2.y <= 0) )
 8000668:	4b23      	ldr	r3, [pc, #140]	@ (80006f8 <check_State+0xf0>)
 800066a:	7a5b      	ldrb	r3, [r3, #9]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d13f      	bne.n	80006f0 <check_State+0xe8>
	{
		// initiate the ending protocal
		// Place the object in the matrix, generate new object
		dummyTable[object.originbit.x][object.originbit.y] = 1;
 8000670:	4b21      	ldr	r3, [pc, #132]	@ (80006f8 <check_State+0xf0>)
 8000672:	789b      	ldrb	r3, [r3, #2]
 8000674:	4619      	mov	r1, r3
 8000676:	4b20      	ldr	r3, [pc, #128]	@ (80006f8 <check_State+0xf0>)
 8000678:	78db      	ldrb	r3, [r3, #3]
 800067a:	4618      	mov	r0, r3
 800067c:	4a1f      	ldr	r2, [pc, #124]	@ (80006fc <check_State+0xf4>)
 800067e:	460b      	mov	r3, r1
 8000680:	009b      	lsls	r3, r3, #2
 8000682:	440b      	add	r3, r1
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	4413      	add	r3, r2
 8000688:	4403      	add	r3, r0
 800068a:	2201      	movs	r2, #1
 800068c:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_0.x][object.suboriginbit_0.y] = 1;
 800068e:	4b1a      	ldr	r3, [pc, #104]	@ (80006f8 <check_State+0xf0>)
 8000690:	791b      	ldrb	r3, [r3, #4]
 8000692:	4619      	mov	r1, r3
 8000694:	4b18      	ldr	r3, [pc, #96]	@ (80006f8 <check_State+0xf0>)
 8000696:	795b      	ldrb	r3, [r3, #5]
 8000698:	4618      	mov	r0, r3
 800069a:	4a18      	ldr	r2, [pc, #96]	@ (80006fc <check_State+0xf4>)
 800069c:	460b      	mov	r3, r1
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	440b      	add	r3, r1
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	4413      	add	r3, r2
 80006a6:	4403      	add	r3, r0
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_1.x][object.suboriginbit_1.y] = 1;
 80006ac:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <check_State+0xf0>)
 80006ae:	799b      	ldrb	r3, [r3, #6]
 80006b0:	4619      	mov	r1, r3
 80006b2:	4b11      	ldr	r3, [pc, #68]	@ (80006f8 <check_State+0xf0>)
 80006b4:	79db      	ldrb	r3, [r3, #7]
 80006b6:	4618      	mov	r0, r3
 80006b8:	4a10      	ldr	r2, [pc, #64]	@ (80006fc <check_State+0xf4>)
 80006ba:	460b      	mov	r3, r1
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	440b      	add	r3, r1
 80006c0:	005b      	lsls	r3, r3, #1
 80006c2:	4413      	add	r3, r2
 80006c4:	4403      	add	r3, r0
 80006c6:	2201      	movs	r2, #1
 80006c8:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_2.x][object.suboriginbit_2.y] = 1;
 80006ca:	4b0b      	ldr	r3, [pc, #44]	@ (80006f8 <check_State+0xf0>)
 80006cc:	7a1b      	ldrb	r3, [r3, #8]
 80006ce:	4619      	mov	r1, r3
 80006d0:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <check_State+0xf0>)
 80006d2:	7a5b      	ldrb	r3, [r3, #9]
 80006d4:	4618      	mov	r0, r3
 80006d6:	4a09      	ldr	r2, [pc, #36]	@ (80006fc <check_State+0xf4>)
 80006d8:	460b      	mov	r3, r1
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	440b      	add	r3, r1
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	4413      	add	r3, r2
 80006e2:	4403      	add	r3, r0
 80006e4:	2201      	movs	r2, #1
 80006e6:	701a      	strb	r2, [r3, #0]
		object_Select();
 80006e8:	f000 f80a 	bl	8000700 <object_Select>
		return 1; // This means object has hit the button
 80006ec:	2301      	movs	r3, #1
 80006ee:	e000      	b.n	80006f2 <check_State+0xea>
	} else {
		return 2; // In case we want to see nothing can be done
 80006f0:	2302      	movs	r3, #2
	}
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000008c 	.word	0x2000008c
 80006fc:	20000098 	.word	0x20000098

08000700 <object_Select>:

void object_Select(void){
 8000700:	b580      	push	{r7, lr}
 8000702:	b096      	sub	sp, #88	@ 0x58
 8000704:	af00      	add	r7, sp, #0
		   while (1);
	}
	RND = RND % 7;  // Constrain the result to 0-6
	RND_NUM(RND);
	*/
	switch(randomNumber) {
 8000706:	4b4a      	ldr	r3, [pc, #296]	@ (8000830 <object_Select+0x130>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b06      	cmp	r3, #6
 800070c:	f200 808b 	bhi.w	8000826 <object_Select+0x126>
 8000710:	a201      	add	r2, pc, #4	@ (adr r2, 8000718 <object_Select+0x18>)
 8000712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000716:	bf00      	nop
 8000718:	08000735 	.word	0x08000735
 800071c:	08000759 	.word	0x08000759
 8000720:	0800077d 	.word	0x0800077d
 8000724:	080007a1 	.word	0x080007a1
 8000728:	080007c5 	.word	0x080007c5
 800072c:	080007e7 	.word	0x080007e7
 8000730:	08000809 	.word	0x08000809
		case(ORICKY):
			Object Oricky = {
 8000734:	4a3f      	ldr	r2, [pc, #252]	@ (8000834 <object_Select+0x134>)
 8000736:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800073a:	ca07      	ldmia	r2, {r0, r1, r2}
 800073c:	c303      	stmia	r3!, {r0, r1}
 800073e:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, // 1 [1] 1
				.suboriginbit_0 = {0, 0}, 
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Oricky;
 8000740:	4b3d      	ldr	r3, [pc, #244]	@ (8000838 <object_Select+0x138>)
 8000742:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8000746:	ca07      	ldmia	r2, {r0, r1, r2}
 8000748:	c303      	stmia	r3!, {r0, r1}
 800074a:	801a      	strh	r2, [r3, #0]
		    transform_rotation(Oricky.Rotation);
 800074c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8000750:	4618      	mov	r0, r3
 8000752:	f000 f87f 	bl	8000854 <transform_rotation>
			break;
 8000756:	e066      	b.n	8000826 <object_Select+0x126>

		case(BRICKY):
			Object Bricky = {
 8000758:	4a38      	ldr	r2, [pc, #224]	@ (800083c <object_Select+0x13c>)
 800075a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800075e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000760:	c303      	stmia	r3!, {r0, r1}
 8000762:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, // 1 [1] 1
				.suboriginbit_0 = {0, 0}, 
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Bricky;
 8000764:	4b34      	ldr	r3, [pc, #208]	@ (8000838 <object_Select+0x138>)
 8000766:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800076a:	ca07      	ldmia	r2, {r0, r1, r2}
 800076c:	c303      	stmia	r3!, {r0, r1}
 800076e:	801a      	strh	r2, [r3, #0]
			transform_rotation(Bricky.Rotation);
 8000770:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8000774:	4618      	mov	r0, r3
 8000776:	f000 f86d 	bl	8000854 <transform_rotation>
			break;
 800077a:	e054      	b.n	8000826 <object_Select+0x126>

		case(CLEVELAND):
			Object Cleveland = {
 800077c:	4a30      	ldr	r2, [pc, #192]	@ (8000840 <object_Select+0x140>)
 800077e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000782:	ca07      	ldmia	r2, {r0, r1, r2}
 8000784:	c303      	stmia	r3!, {r0, r1}
 8000786:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, //    [1] 1
				.suboriginbit_0 = {0, 0},  
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Cleveland;
 8000788:	4b2b      	ldr	r3, [pc, #172]	@ (8000838 <object_Select+0x138>)
 800078a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800078e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000790:	c303      	stmia	r3!, {r0, r1}
 8000792:	801a      	strh	r2, [r3, #0]
		    transform_rotation(Cleveland.Rotation);
 8000794:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8000798:	4618      	mov	r0, r3
 800079a:	f000 f85b 	bl	8000854 <transform_rotation>
			break;
 800079e:	e042      	b.n	8000826 <object_Select+0x126>

		case(RHODE):
			Object Rhode = {
 80007a0:	4a28      	ldr	r2, [pc, #160]	@ (8000844 <object_Select+0x144>)
 80007a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80007a8:	c303      	stmia	r3!, {r0, r1}
 80007aa:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, //     1 [1]
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Rhode;
 80007ac:	4b22      	ldr	r3, [pc, #136]	@ (8000838 <object_Select+0x138>)
 80007ae:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80007b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80007b4:	c303      	stmia	r3!, {r0, r1}
 80007b6:	801a      	strh	r2, [r3, #0]
			transform_rotation(Rhode.Rotation);
 80007b8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f849 	bl	8000854 <transform_rotation>
			break;
 80007c2:	e030      	b.n	8000826 <object_Select+0x126>

		case(HERO):
			Object Hero = {
 80007c4:	4a20      	ldr	r2, [pc, #128]	@ (8000848 <object_Select+0x148>)
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80007cc:	c303      	stmia	r3!, {r0, r1}
 80007ce:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, 			 //  1 1 [1] 1
				.suboriginbit_0 = {0, 0}, 
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Hero;
 80007d0:	4b19      	ldr	r3, [pc, #100]	@ (8000838 <object_Select+0x138>)
 80007d2:	f107 021c 	add.w	r2, r7, #28
 80007d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80007d8:	c303      	stmia	r3!, {r0, r1}
 80007da:	801a      	strh	r2, [r3, #0]
			transform_rotation(Hero.Rotation);
 80007dc:	7f7b      	ldrb	r3, [r7, #29]
 80007de:	4618      	mov	r0, r3
 80007e0:	f000 f838 	bl	8000854 <transform_rotation>
			break;
 80007e4:	e01f      	b.n	8000826 <object_Select+0x126>

		case(TEEWEE):
			Object Teewee = {
 80007e6:	4a19      	ldr	r2, [pc, #100]	@ (800084c <object_Select+0x14c>)
 80007e8:	f107 0310 	add.w	r3, r7, #16
 80007ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80007ee:	c303      	stmia	r3!, {r0, r1}
 80007f0:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, 			 	// 1 [1] 1
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Teewee;
 80007f2:	4b11      	ldr	r3, [pc, #68]	@ (8000838 <object_Select+0x138>)
 80007f4:	f107 0210 	add.w	r2, r7, #16
 80007f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80007fa:	c303      	stmia	r3!, {r0, r1}
 80007fc:	801a      	strh	r2, [r3, #0]
			transform_rotation(Teewee.Rotation);
 80007fe:	7c7b      	ldrb	r3, [r7, #17]
 8000800:	4618      	mov	r0, r3
 8000802:	f000 f827 	bl	8000854 <transform_rotation>
			break;
 8000806:	e00e      	b.n	8000826 <object_Select+0x126>

		case(SMASHBOY):
			Object Smashboy = {
 8000808:	4a11      	ldr	r2, [pc, #68]	@ (8000850 <object_Select+0x150>)
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	ca07      	ldmia	r2, {r0, r1, r2}
 800080e:	c303      	stmia	r3!, {r0, r1}
 8000810:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, 			 	//[1] 1
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Smashboy;
 8000812:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <object_Select+0x138>)
 8000814:	1d3a      	adds	r2, r7, #4
 8000816:	ca07      	ldmia	r2, {r0, r1, r2}
 8000818:	c303      	stmia	r3!, {r0, r1}
 800081a:	801a      	strh	r2, [r3, #0]
			transform_rotation(Smashboy.Rotation);
 800081c:	797b      	ldrb	r3, [r7, #5]
 800081e:	4618      	mov	r0, r3
 8000820:	f000 f818 	bl	8000854 <transform_rotation>
			break;
 8000824:	bf00      	nop

	}
}
 8000826:	bf00      	nop
 8000828:	3758      	adds	r7, #88	@ 0x58
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000011c 	.word	0x2000011c
 8000834:	08005c58 	.word	0x08005c58
 8000838:	2000008c 	.word	0x2000008c
 800083c:	08005c64 	.word	0x08005c64
 8000840:	08005c70 	.word	0x08005c70
 8000844:	08005c7c 	.word	0x08005c7c
 8000848:	08005c88 	.word	0x08005c88
 800084c:	08005c94 	.word	0x08005c94
 8000850:	08005ca0 	.word	0x08005ca0

08000854 <transform_rotation>:
	if(check_State()) {
		object = temp;
	}
}

void transform_rotation(rotation new_rotation){
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	71fb      	strb	r3, [r7, #7]
	Object temp = object;
 800085e:	4a9e      	ldr	r2, [pc, #632]	@ (8000ad8 <transform_rotation+0x284>)
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	ca07      	ldmia	r2, {r0, r1, r2}
 8000866:	c303      	stmia	r3!, {r0, r1}
 8000868:	801a      	strh	r2, [r3, #0]
	switch(object.name){
 800086a:	4b9b      	ldr	r3, [pc, #620]	@ (8000ad8 <transform_rotation+0x284>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	2b06      	cmp	r3, #6
 8000870:	f200 840a 	bhi.w	8001088 <transform_rotation+0x834>
 8000874:	a201      	add	r2, pc, #4	@ (adr r2, 800087c <transform_rotation+0x28>)
 8000876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800087a:	bf00      	nop
 800087c:	08000899 	.word	0x08000899
 8000880:	080009c3 	.word	0x080009c3
 8000884:	08000abb 	.word	0x08000abb
 8000888:	08000be7 	.word	0x08000be7
 800088c:	08000d0f 	.word	0x08000d0f
 8000890:	08000e2b 	.word	0x08000e2b
 8000894:	08000f43 	.word	0x08000f43
		case(ORICKY):
			switch(new_rotation) {
 8000898:	79fb      	ldrb	r3, [r7, #7]
 800089a:	2b03      	cmp	r3, #3
 800089c:	f200 83e7 	bhi.w	800106e <transform_rotation+0x81a>
 80008a0:	a201      	add	r2, pc, #4	@ (adr r2, 80008a8 <transform_rotation+0x54>)
 80008a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a6:	bf00      	nop
 80008a8:	080008b9 	.word	0x080008b9
 80008ac:	080008fb 	.word	0x080008fb
 80008b0:	0800093d 	.word	0x0800093d
 80008b4:	0800097f 	.word	0x0800097f
				case(ROTATION_0):
						//       1
						// 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;   //		 1
 80008b8:	4b87      	ldr	r3, [pc, #540]	@ (8000ad8 <transform_rotation+0x284>)
 80008ba:	789b      	ldrb	r3, [r3, #2]
 80008bc:	3b01      	subs	r3, #1
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4b85      	ldr	r3, [pc, #532]	@ (8000ad8 <transform_rotation+0x284>)
 80008c2:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		// [1] 1 1
 80008c4:	4b84      	ldr	r3, [pc, #528]	@ (8000ad8 <transform_rotation+0x284>)
 80008c6:	78da      	ldrb	r2, [r3, #3]
 80008c8:	4b83      	ldr	r3, [pc, #524]	@ (8000ad8 <transform_rotation+0x284>)
 80008ca:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;	//        1
 80008cc:	4b82      	ldr	r3, [pc, #520]	@ (8000ad8 <transform_rotation+0x284>)
 80008ce:	789b      	ldrb	r3, [r3, #2]
 80008d0:	3301      	adds	r3, #1
 80008d2:	b2da      	uxtb	r2, r3
 80008d4:	4b80      	ldr	r3, [pc, #512]	@ (8000ad8 <transform_rotation+0x284>)
 80008d6:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		//  1  1 [1]
 80008d8:	4b7f      	ldr	r3, [pc, #508]	@ (8000ad8 <transform_rotation+0x284>)
 80008da:	78da      	ldrb	r2, [r3, #3]
 80008dc:	4b7e      	ldr	r3, [pc, #504]	@ (8000ad8 <transform_rotation+0x284>)
 80008de:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	// 	  [1]
 80008e0:	4b7d      	ldr	r3, [pc, #500]	@ (8000ad8 <transform_rotation+0x284>)
 80008e2:	789b      	ldrb	r3, [r3, #2]
 80008e4:	3301      	adds	r3, #1
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	4b7b      	ldr	r3, [pc, #492]	@ (8000ad8 <transform_rotation+0x284>)
 80008ea:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	// 1 1 1
 80008ec:	4b7a      	ldr	r3, [pc, #488]	@ (8000ad8 <transform_rotation+0x284>)
 80008ee:	78db      	ldrb	r3, [r3, #3]
 80008f0:	3301      	adds	r3, #1
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b78      	ldr	r3, [pc, #480]	@ (8000ad8 <transform_rotation+0x284>)
 80008f6:	725a      	strb	r2, [r3, #9]

					break;
 80008f8:	e062      	b.n	80009c0 <transform_rotation+0x16c>
				case(ROTATION_1):
						// 1  1
						//   [1]
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 80008fa:	4b77      	ldr	r3, [pc, #476]	@ (8000ad8 <transform_rotation+0x284>)
 80008fc:	789a      	ldrb	r2, [r3, #2]
 80008fe:	4b76      	ldr	r3, [pc, #472]	@ (8000ad8 <transform_rotation+0x284>)
 8000900:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y - 1;
 8000902:	4b75      	ldr	r3, [pc, #468]	@ (8000ad8 <transform_rotation+0x284>)
 8000904:	78db      	ldrb	r3, [r3, #3]
 8000906:	3b01      	subs	r3, #1
 8000908:	b2da      	uxtb	r2, r3
 800090a:	4b73      	ldr	r3, [pc, #460]	@ (8000ad8 <transform_rotation+0x284>)
 800090c:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 800090e:	4b72      	ldr	r3, [pc, #456]	@ (8000ad8 <transform_rotation+0x284>)
 8000910:	789a      	ldrb	r2, [r3, #2]
 8000912:	4b71      	ldr	r3, [pc, #452]	@ (8000ad8 <transform_rotation+0x284>)
 8000914:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;
 8000916:	4b70      	ldr	r3, [pc, #448]	@ (8000ad8 <transform_rotation+0x284>)
 8000918:	78db      	ldrb	r3, [r3, #3]
 800091a:	3301      	adds	r3, #1
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4b6e      	ldr	r3, [pc, #440]	@ (8000ad8 <transform_rotation+0x284>)
 8000920:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 8000922:	4b6d      	ldr	r3, [pc, #436]	@ (8000ad8 <transform_rotation+0x284>)
 8000924:	789b      	ldrb	r3, [r3, #2]
 8000926:	3b01      	subs	r3, #1
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4b6b      	ldr	r3, [pc, #428]	@ (8000ad8 <transform_rotation+0x284>)
 800092c:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1;
 800092e:	4b6a      	ldr	r3, [pc, #424]	@ (8000ad8 <transform_rotation+0x284>)
 8000930:	78db      	ldrb	r3, [r3, #3]
 8000932:	3301      	adds	r3, #1
 8000934:	b2da      	uxtb	r2, r3
 8000936:	4b68      	ldr	r3, [pc, #416]	@ (8000ad8 <transform_rotation+0x284>)
 8000938:	725a      	strb	r2, [r3, #9]

					break;
 800093a:	e041      	b.n	80009c0 <transform_rotation+0x16c>
				case(ROTATION_2):
						// 1  [1]  1
						// 1
					object.suboriginbit_0.x = object.originbit.x + 1;
 800093c:	4b66      	ldr	r3, [pc, #408]	@ (8000ad8 <transform_rotation+0x284>)
 800093e:	789b      	ldrb	r3, [r3, #2]
 8000940:	3301      	adds	r3, #1
 8000942:	b2da      	uxtb	r2, r3
 8000944:	4b64      	ldr	r3, [pc, #400]	@ (8000ad8 <transform_rotation+0x284>)
 8000946:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000948:	4b63      	ldr	r3, [pc, #396]	@ (8000ad8 <transform_rotation+0x284>)
 800094a:	78da      	ldrb	r2, [r3, #3]
 800094c:	4b62      	ldr	r3, [pc, #392]	@ (8000ad8 <transform_rotation+0x284>)
 800094e:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;
 8000950:	4b61      	ldr	r3, [pc, #388]	@ (8000ad8 <transform_rotation+0x284>)
 8000952:	789b      	ldrb	r3, [r3, #2]
 8000954:	3b01      	subs	r3, #1
 8000956:	b2da      	uxtb	r2, r3
 8000958:	4b5f      	ldr	r3, [pc, #380]	@ (8000ad8 <transform_rotation+0x284>)
 800095a:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 800095c:	4b5e      	ldr	r3, [pc, #376]	@ (8000ad8 <transform_rotation+0x284>)
 800095e:	78da      	ldrb	r2, [r3, #3]
 8000960:	4b5d      	ldr	r3, [pc, #372]	@ (8000ad8 <transform_rotation+0x284>)
 8000962:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 8000964:	4b5c      	ldr	r3, [pc, #368]	@ (8000ad8 <transform_rotation+0x284>)
 8000966:	789b      	ldrb	r3, [r3, #2]
 8000968:	3b01      	subs	r3, #1
 800096a:	b2da      	uxtb	r2, r3
 800096c:	4b5a      	ldr	r3, [pc, #360]	@ (8000ad8 <transform_rotation+0x284>)
 800096e:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8000970:	4b59      	ldr	r3, [pc, #356]	@ (8000ad8 <transform_rotation+0x284>)
 8000972:	78db      	ldrb	r3, [r3, #3]
 8000974:	3b01      	subs	r3, #1
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b57      	ldr	r3, [pc, #348]	@ (8000ad8 <transform_rotation+0x284>)
 800097a:	725a      	strb	r2, [r3, #9]

					break;
 800097c:	e020      	b.n	80009c0 <transform_rotation+0x16c>
				case(ROTATION_3):
						//  1
						// [1]
						//  1 1
					object.suboriginbit_0.x = object.originbit.x;
 800097e:	4b56      	ldr	r3, [pc, #344]	@ (8000ad8 <transform_rotation+0x284>)
 8000980:	789a      	ldrb	r2, [r3, #2]
 8000982:	4b55      	ldr	r3, [pc, #340]	@ (8000ad8 <transform_rotation+0x284>)
 8000984:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 8000986:	4b54      	ldr	r3, [pc, #336]	@ (8000ad8 <transform_rotation+0x284>)
 8000988:	78db      	ldrb	r3, [r3, #3]
 800098a:	3301      	adds	r3, #1
 800098c:	b2da      	uxtb	r2, r3
 800098e:	4b52      	ldr	r3, [pc, #328]	@ (8000ad8 <transform_rotation+0x284>)
 8000990:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000992:	4b51      	ldr	r3, [pc, #324]	@ (8000ad8 <transform_rotation+0x284>)
 8000994:	789a      	ldrb	r2, [r3, #2]
 8000996:	4b50      	ldr	r3, [pc, #320]	@ (8000ad8 <transform_rotation+0x284>)
 8000998:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 800099a:	4b4f      	ldr	r3, [pc, #316]	@ (8000ad8 <transform_rotation+0x284>)
 800099c:	78db      	ldrb	r3, [r3, #3]
 800099e:	3b01      	subs	r3, #1
 80009a0:	b2da      	uxtb	r2, r3
 80009a2:	4b4d      	ldr	r3, [pc, #308]	@ (8000ad8 <transform_rotation+0x284>)
 80009a4:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;
 80009a6:	4b4c      	ldr	r3, [pc, #304]	@ (8000ad8 <transform_rotation+0x284>)
 80009a8:	789b      	ldrb	r3, [r3, #2]
 80009aa:	3301      	adds	r3, #1
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	4b4a      	ldr	r3, [pc, #296]	@ (8000ad8 <transform_rotation+0x284>)
 80009b0:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 80009b2:	4b49      	ldr	r3, [pc, #292]	@ (8000ad8 <transform_rotation+0x284>)
 80009b4:	78db      	ldrb	r3, [r3, #3]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4b47      	ldr	r3, [pc, #284]	@ (8000ad8 <transform_rotation+0x284>)
 80009bc:	725a      	strb	r2, [r3, #9]

					break;
 80009be:	bf00      	nop
			}
			break;
 80009c0:	e355      	b.n	800106e <transform_rotation+0x81a>
		case(BRICKY):
			switch(new_rotation) {
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	2b03      	cmp	r3, #3
 80009c6:	f200 8354 	bhi.w	8001072 <transform_rotation+0x81e>
 80009ca:	a201      	add	r2, pc, #4	@ (adr r2, 80009d0 <transform_rotation+0x17c>)
 80009cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d0:	080009e1 	.word	0x080009e1
 80009d4:	08000a23 	.word	0x08000a23
 80009d8:	08000a55 	.word	0x08000a55
 80009dc:	08000a87 	.word	0x08000a87
				case(ROTATION_0):
						// 1
						// 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;   //	1
 80009e0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ad8 <transform_rotation+0x284>)
 80009e2:	789b      	ldrb	r3, [r3, #2]
 80009e4:	3b01      	subs	r3, #1
 80009e6:	b2da      	uxtb	r2, r3
 80009e8:	4b3b      	ldr	r3, [pc, #236]	@ (8000ad8 <transform_rotation+0x284>)
 80009ea:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		// [1] 1 1
 80009ec:	4b3a      	ldr	r3, [pc, #232]	@ (8000ad8 <transform_rotation+0x284>)
 80009ee:	78da      	ldrb	r2, [r3, #3]
 80009f0:	4b39      	ldr	r3, [pc, #228]	@ (8000ad8 <transform_rotation+0x284>)
 80009f2:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;	//  1
 80009f4:	4b38      	ldr	r3, [pc, #224]	@ (8000ad8 <transform_rotation+0x284>)
 80009f6:	789b      	ldrb	r3, [r3, #2]
 80009f8:	3301      	adds	r3, #1
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b36      	ldr	r3, [pc, #216]	@ (8000ad8 <transform_rotation+0x284>)
 80009fe:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		//  1  1 [1]
 8000a00:	4b35      	ldr	r3, [pc, #212]	@ (8000ad8 <transform_rotation+0x284>)
 8000a02:	78da      	ldrb	r2, [r3, #3]
 8000a04:	4b34      	ldr	r3, [pc, #208]	@ (8000ad8 <transform_rotation+0x284>)
 8000a06:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;	//[1]
 8000a08:	4b33      	ldr	r3, [pc, #204]	@ (8000ad8 <transform_rotation+0x284>)
 8000a0a:	789b      	ldrb	r3, [r3, #2]
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b31      	ldr	r3, [pc, #196]	@ (8000ad8 <transform_rotation+0x284>)
 8000a12:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	// 1 1 1
 8000a14:	4b30      	ldr	r3, [pc, #192]	@ (8000ad8 <transform_rotation+0x284>)
 8000a16:	78db      	ldrb	r3, [r3, #3]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad8 <transform_rotation+0x284>)
 8000a1e:	725a      	strb	r2, [r3, #9]

					break;
 8000a20:	e04a      	b.n	8000ab8 <transform_rotation+0x264>
				case(ROTATION_1):
						// 1 1
						//[1]
						// 1
					object.suboriginbit_0.x = object.originbit.x;
 8000a22:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad8 <transform_rotation+0x284>)
 8000a24:	789a      	ldrb	r2, [r3, #2]
 8000a26:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad8 <transform_rotation+0x284>)
 8000a28:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad8 <transform_rotation+0x284>)
 8000a2c:	78da      	ldrb	r2, [r3, #3]
 8000a2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad8 <transform_rotation+0x284>)
 8000a30:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000a32:	4b29      	ldr	r3, [pc, #164]	@ (8000ad8 <transform_rotation+0x284>)
 8000a34:	789a      	ldrb	r2, [r3, #2]
 8000a36:	4b28      	ldr	r3, [pc, #160]	@ (8000ad8 <transform_rotation+0x284>)
 8000a38:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000a3a:	4b27      	ldr	r3, [pc, #156]	@ (8000ad8 <transform_rotation+0x284>)
 8000a3c:	78da      	ldrb	r2, [r3, #3]
 8000a3e:	4b26      	ldr	r3, [pc, #152]	@ (8000ad8 <transform_rotation+0x284>)
 8000a40:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000a42:	4b25      	ldr	r3, [pc, #148]	@ (8000ad8 <transform_rotation+0x284>)
 8000a44:	789a      	ldrb	r2, [r3, #2]
 8000a46:	4b24      	ldr	r3, [pc, #144]	@ (8000ad8 <transform_rotation+0x284>)
 8000a48:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 8000a4a:	4b23      	ldr	r3, [pc, #140]	@ (8000ad8 <transform_rotation+0x284>)
 8000a4c:	78da      	ldrb	r2, [r3, #3]
 8000a4e:	4b22      	ldr	r3, [pc, #136]	@ (8000ad8 <transform_rotation+0x284>)
 8000a50:	725a      	strb	r2, [r3, #9]

					break;
 8000a52:	e031      	b.n	8000ab8 <transform_rotation+0x264>
				case(ROTATION_2):
						// 1 [1] 1
						//       1
					object.suboriginbit_0.x = object.originbit.x;
 8000a54:	4b20      	ldr	r3, [pc, #128]	@ (8000ad8 <transform_rotation+0x284>)
 8000a56:	789a      	ldrb	r2, [r3, #2]
 8000a58:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad8 <transform_rotation+0x284>)
 8000a5a:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad8 <transform_rotation+0x284>)
 8000a5e:	78da      	ldrb	r2, [r3, #3]
 8000a60:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad8 <transform_rotation+0x284>)
 8000a62:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000a64:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <transform_rotation+0x284>)
 8000a66:	789a      	ldrb	r2, [r3, #2]
 8000a68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <transform_rotation+0x284>)
 8000a6a:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <transform_rotation+0x284>)
 8000a6e:	78da      	ldrb	r2, [r3, #3]
 8000a70:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <transform_rotation+0x284>)
 8000a72:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000a74:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <transform_rotation+0x284>)
 8000a76:	789a      	ldrb	r2, [r3, #2]
 8000a78:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <transform_rotation+0x284>)
 8000a7a:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	@ (8000ad8 <transform_rotation+0x284>)
 8000a7e:	78da      	ldrb	r2, [r3, #3]
 8000a80:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <transform_rotation+0x284>)
 8000a82:	725a      	strb	r2, [r3, #9]

					break;
 8000a84:	e018      	b.n	8000ab8 <transform_rotation+0x264>
				case(ROTATION_3):
						//   1
						//  [1]
						// 1 1
					object.suboriginbit_0.x = object.originbit.x;
 8000a86:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <transform_rotation+0x284>)
 8000a88:	789a      	ldrb	r2, [r3, #2]
 8000a8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <transform_rotation+0x284>)
 8000a8c:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000a8e:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <transform_rotation+0x284>)
 8000a90:	78da      	ldrb	r2, [r3, #3]
 8000a92:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <transform_rotation+0x284>)
 8000a94:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000a96:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <transform_rotation+0x284>)
 8000a98:	789a      	ldrb	r2, [r3, #2]
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <transform_rotation+0x284>)
 8000a9c:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <transform_rotation+0x284>)
 8000aa0:	78da      	ldrb	r2, [r3, #3]
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad8 <transform_rotation+0x284>)
 8000aa4:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad8 <transform_rotation+0x284>)
 8000aa8:	789a      	ldrb	r2, [r3, #2]
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad8 <transform_rotation+0x284>)
 8000aac:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 8000aae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad8 <transform_rotation+0x284>)
 8000ab0:	78da      	ldrb	r2, [r3, #3]
 8000ab2:	4b09      	ldr	r3, [pc, #36]	@ (8000ad8 <transform_rotation+0x284>)
 8000ab4:	725a      	strb	r2, [r3, #9]

					break;
 8000ab6:	bf00      	nop
			}

			break;
 8000ab8:	e2db      	b.n	8001072 <transform_rotation+0x81e>
		case(CLEVELAND):
			switch(new_rotation) {
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	2b03      	cmp	r3, #3
 8000abe:	f200 82da 	bhi.w	8001076 <transform_rotation+0x822>
 8000ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ac8 <transform_rotation+0x274>)
 8000ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ac8:	08000add 	.word	0x08000add
 8000acc:	08000b1f 	.word	0x08000b1f
 8000ad0:	08000b61 	.word	0x08000b61
 8000ad4:	08000ba3 	.word	0x08000ba3
 8000ad8:	2000008c 	.word	0x2000008c
				case(ROTATION_0):
						// 1 1
						//  [1] 1
					object.suboriginbit_0.x = object.originbit.x;			 //	1 [1]
 8000adc:	4b93      	ldr	r3, [pc, #588]	@ (8000d2c <transform_rotation+0x4d8>)
 8000ade:	789a      	ldrb	r2, [r3, #2]
 8000ae0:	4b92      	ldr	r3, [pc, #584]	@ (8000d2c <transform_rotation+0x4d8>)
 8000ae2:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;		 //    1 1
 8000ae4:	4b91      	ldr	r3, [pc, #580]	@ (8000d2c <transform_rotation+0x4d8>)
 8000ae6:	78db      	ldrb	r3, [r3, #3]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	b2da      	uxtb	r2, r3
 8000aec:	4b8f      	ldr	r3, [pc, #572]	@ (8000d2c <transform_rotation+0x4d8>)
 8000aee:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;		 // [1] 1
 8000af0:	4b8e      	ldr	r3, [pc, #568]	@ (8000d2c <transform_rotation+0x4d8>)
 8000af2:	789b      	ldrb	r3, [r3, #2]
 8000af4:	3b01      	subs	r3, #1
 8000af6:	b2da      	uxtb	r2, r3
 8000af8:	4b8c      	ldr	r3, [pc, #560]	@ (8000d2c <transform_rotation+0x4d8>)
 8000afa:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;		 //     1 1
 8000afc:	4b8b      	ldr	r3, [pc, #556]	@ (8000d2c <transform_rotation+0x4d8>)
 8000afe:	78db      	ldrb	r3, [r3, #3]
 8000b00:	3301      	adds	r3, #1
 8000b02:	b2da      	uxtb	r2, r3
 8000b04:	4b89      	ldr	r3, [pc, #548]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b06:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;		 //  1 1
 8000b08:	4b88      	ldr	r3, [pc, #544]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b0a:	789b      	ldrb	r3, [r3, #2]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	b2da      	uxtb	r2, r3
 8000b10:	4b86      	ldr	r3, [pc, #536]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b12:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y; 	     	//    1 [1]
 8000b14:	4b85      	ldr	r3, [pc, #532]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b16:	78da      	ldrb	r2, [r3, #3]
 8000b18:	4b84      	ldr	r3, [pc, #528]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b1a:	725a      	strb	r2, [r3, #9]

					break;
 8000b1c:	e062      	b.n	8000be4 <transform_rotation+0x390>
				case(ROTATION_1):
						//     1
						// [1] 1
						//  1
					object.suboriginbit_0.x = object.originbit.x+1;
 8000b1e:	4b83      	ldr	r3, [pc, #524]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b20:	789b      	ldrb	r3, [r3, #2]
 8000b22:	3301      	adds	r3, #1
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	4b81      	ldr	r3, [pc, #516]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b28:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000b2a:	4b80      	ldr	r3, [pc, #512]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b2c:	78da      	ldrb	r2, [r3, #3]
 8000b2e:	4b7f      	ldr	r3, [pc, #508]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b30:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x+1;
 8000b32:	4b7e      	ldr	r3, [pc, #504]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b34:	789b      	ldrb	r3, [r3, #2]
 8000b36:	3301      	adds	r3, #1
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4b7c      	ldr	r3, [pc, #496]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b3c:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y+1;
 8000b3e:	4b7b      	ldr	r3, [pc, #492]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b40:	78db      	ldrb	r3, [r3, #3]
 8000b42:	3301      	adds	r3, #1
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4b79      	ldr	r3, [pc, #484]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b48:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000b4a:	4b78      	ldr	r3, [pc, #480]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b4c:	789a      	ldrb	r2, [r3, #2]
 8000b4e:	4b77      	ldr	r3, [pc, #476]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b50:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y-1;
 8000b52:	4b76      	ldr	r3, [pc, #472]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b54:	78db      	ldrb	r3, [r3, #3]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	b2da      	uxtb	r2, r3
 8000b5a:	4b74      	ldr	r3, [pc, #464]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b5c:	725a      	strb	r2, [r3, #9]

					break;
 8000b5e:	e041      	b.n	8000be4 <transform_rotation+0x390>
				case(ROTATION_2):
						// 1 [1]
						//    1  1
					object.suboriginbit_0.x = object.originbit.x - 1;
 8000b60:	4b72      	ldr	r3, [pc, #456]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b62:	789b      	ldrb	r3, [r3, #2]
 8000b64:	3b01      	subs	r3, #1
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	4b70      	ldr	r3, [pc, #448]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b6a:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000b6c:	4b6f      	ldr	r3, [pc, #444]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b6e:	78da      	ldrb	r2, [r3, #3]
 8000b70:	4b6e      	ldr	r3, [pc, #440]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b72:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000b74:	4b6d      	ldr	r3, [pc, #436]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b76:	789a      	ldrb	r2, [r3, #2]
 8000b78:	4b6c      	ldr	r3, [pc, #432]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b7a:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8000b7c:	4b6b      	ldr	r3, [pc, #428]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b7e:	78db      	ldrb	r3, [r3, #3]
 8000b80:	3b01      	subs	r3, #1
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	4b69      	ldr	r3, [pc, #420]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b86:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;
 8000b88:	4b68      	ldr	r3, [pc, #416]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b8a:	789b      	ldrb	r3, [r3, #2]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	b2da      	uxtb	r2, r3
 8000b90:	4b66      	ldr	r3, [pc, #408]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b92:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8000b94:	4b65      	ldr	r3, [pc, #404]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b96:	78db      	ldrb	r3, [r3, #3]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	4b63      	ldr	r3, [pc, #396]	@ (8000d2c <transform_rotation+0x4d8>)
 8000b9e:	725a      	strb	r2, [r3, #9]

					break;
 8000ba0:	e020      	b.n	8000be4 <transform_rotation+0x390>
				case(ROTATION_3):
						//     1
						//  1 [1]
						//  1
					object.suboriginbit_0.x = object.originbit.x - 1;
 8000ba2:	4b62      	ldr	r3, [pc, #392]	@ (8000d2c <transform_rotation+0x4d8>)
 8000ba4:	789b      	ldrb	r3, [r3, #2]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4b60      	ldr	r3, [pc, #384]	@ (8000d2c <transform_rotation+0x4d8>)
 8000bac:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000bae:	4b5f      	ldr	r3, [pc, #380]	@ (8000d2c <transform_rotation+0x4d8>)
 8000bb0:	78da      	ldrb	r2, [r3, #3]
 8000bb2:	4b5e      	ldr	r3, [pc, #376]	@ (8000d2c <transform_rotation+0x4d8>)
 8000bb4:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;
 8000bb6:	4b5d      	ldr	r3, [pc, #372]	@ (8000d2c <transform_rotation+0x4d8>)
 8000bb8:	789b      	ldrb	r3, [r3, #2]
 8000bba:	3b01      	subs	r3, #1
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4b5b      	ldr	r3, [pc, #364]	@ (8000d2c <transform_rotation+0x4d8>)
 8000bc0:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8000bc2:	4b5a      	ldr	r3, [pc, #360]	@ (8000d2c <transform_rotation+0x4d8>)
 8000bc4:	78db      	ldrb	r3, [r3, #3]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4b58      	ldr	r3, [pc, #352]	@ (8000d2c <transform_rotation+0x4d8>)
 8000bcc:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000bce:	4b57      	ldr	r3, [pc, #348]	@ (8000d2c <transform_rotation+0x4d8>)
 8000bd0:	789a      	ldrb	r2, [r3, #2]
 8000bd2:	4b56      	ldr	r3, [pc, #344]	@ (8000d2c <transform_rotation+0x4d8>)
 8000bd4:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1;
 8000bd6:	4b55      	ldr	r3, [pc, #340]	@ (8000d2c <transform_rotation+0x4d8>)
 8000bd8:	78db      	ldrb	r3, [r3, #3]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4b53      	ldr	r3, [pc, #332]	@ (8000d2c <transform_rotation+0x4d8>)
 8000be0:	725a      	strb	r2, [r3, #9]

					break;
 8000be2:	bf00      	nop
			}
			break;
 8000be4:	e247      	b.n	8001076 <transform_rotation+0x822>
		case(RHODE):
			switch(new_rotation) {
 8000be6:	79fb      	ldrb	r3, [r7, #7]
 8000be8:	2b03      	cmp	r3, #3
 8000bea:	f200 8246 	bhi.w	800107a <transform_rotation+0x826>
 8000bee:	a201      	add	r2, pc, #4	@ (adr r2, 8000bf4 <transform_rotation+0x3a0>)
 8000bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf4:	08000c05 	.word	0x08000c05
 8000bf8:	08000c47 	.word	0x08000c47
 8000bfc:	08000c89 	.word	0x08000c89
 8000c00:	08000ccb 	.word	0x08000ccb
				case(ROTATION_0):
						//    1 1
						// 1 [1]
					object.suboriginbit_0.x = object.originbit.x;			 //	  [1] 1
 8000c04:	4b49      	ldr	r3, [pc, #292]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c06:	789a      	ldrb	r2, [r3, #2]
 8000c08:	4b48      	ldr	r3, [pc, #288]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c0a:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;		 //  1 1
 8000c0c:	4b47      	ldr	r3, [pc, #284]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c0e:	78db      	ldrb	r3, [r3, #3]
 8000c10:	3301      	adds	r3, #1
 8000c12:	b2da      	uxtb	r2, r3
 8000c14:	4b45      	ldr	r3, [pc, #276]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c16:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;		 //    1 [1]
 8000c18:	4b44      	ldr	r3, [pc, #272]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c1a:	789b      	ldrb	r3, [r3, #2]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	4b42      	ldr	r3, [pc, #264]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c22:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;		 //  1 1
 8000c24:	4b41      	ldr	r3, [pc, #260]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c26:	78db      	ldrb	r3, [r3, #3]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	b2da      	uxtb	r2, r3
 8000c2c:	4b3f      	ldr	r3, [pc, #252]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c2e:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;		 //     1 1
 8000c30:	4b3e      	ldr	r3, [pc, #248]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c32:	789b      	ldrb	r3, [r3, #2]
 8000c34:	3b01      	subs	r3, #1
 8000c36:	b2da      	uxtb	r2, r3
 8000c38:	4b3c      	ldr	r3, [pc, #240]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c3a:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y; 	     // [1] 1
 8000c3c:	4b3b      	ldr	r3, [pc, #236]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c3e:	78da      	ldrb	r2, [r3, #3]
 8000c40:	4b3a      	ldr	r3, [pc, #232]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c42:	725a      	strb	r2, [r3, #9]

					break;
 8000c44:	e062      	b.n	8000d0c <transform_rotation+0x4b8>
				case(ROTATION_1):
						// 1
						//[1] 1
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 8000c46:	4b39      	ldr	r3, [pc, #228]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c48:	789a      	ldrb	r2, [r3, #2]
 8000c4a:	4b38      	ldr	r3, [pc, #224]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c4c:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 8000c4e:	4b37      	ldr	r3, [pc, #220]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c50:	78db      	ldrb	r3, [r3, #3]
 8000c52:	3301      	adds	r3, #1
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4b35      	ldr	r3, [pc, #212]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c58:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;
 8000c5a:	4b34      	ldr	r3, [pc, #208]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c5c:	789b      	ldrb	r3, [r3, #2]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4b32      	ldr	r3, [pc, #200]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c64:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000c66:	4b31      	ldr	r3, [pc, #196]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c68:	78da      	ldrb	r2, [r3, #3]
 8000c6a:	4b30      	ldr	r3, [pc, #192]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c6c:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;
 8000c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c70:	789b      	ldrb	r3, [r3, #2]
 8000c72:	3301      	adds	r3, #1
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4b2d      	ldr	r3, [pc, #180]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c78:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8000c7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c7c:	78db      	ldrb	r3, [r3, #3]
 8000c7e:	3b01      	subs	r3, #1
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b2a      	ldr	r3, [pc, #168]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c84:	725a      	strb	r2, [r3, #9]

					break;
 8000c86:	e041      	b.n	8000d0c <transform_rotation+0x4b8>
				case(ROTATION_2):
						//  [1] 1
						// 1 1
					object.suboriginbit_0.x = object.originbit.x + 1;
 8000c88:	4b28      	ldr	r3, [pc, #160]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c8a:	789b      	ldrb	r3, [r3, #2]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	4b26      	ldr	r3, [pc, #152]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c92:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000c94:	4b25      	ldr	r3, [pc, #148]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c96:	78da      	ldrb	r2, [r3, #3]
 8000c98:	4b24      	ldr	r3, [pc, #144]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c9a:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000c9c:	4b23      	ldr	r3, [pc, #140]	@ (8000d2c <transform_rotation+0x4d8>)
 8000c9e:	789a      	ldrb	r2, [r3, #2]
 8000ca0:	4b22      	ldr	r3, [pc, #136]	@ (8000d2c <transform_rotation+0x4d8>)
 8000ca2:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8000ca4:	4b21      	ldr	r3, [pc, #132]	@ (8000d2c <transform_rotation+0x4d8>)
 8000ca6:	78db      	ldrb	r3, [r3, #3]
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	b2da      	uxtb	r2, r3
 8000cac:	4b1f      	ldr	r3, [pc, #124]	@ (8000d2c <transform_rotation+0x4d8>)
 8000cae:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8000d2c <transform_rotation+0x4d8>)
 8000cb2:	789b      	ldrb	r3, [r3, #2]
 8000cb4:	3b01      	subs	r3, #1
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d2c <transform_rotation+0x4d8>)
 8000cba:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8000d2c <transform_rotation+0x4d8>)
 8000cbe:	78db      	ldrb	r3, [r3, #3]
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	b2da      	uxtb	r2, r3
 8000cc4:	4b19      	ldr	r3, [pc, #100]	@ (8000d2c <transform_rotation+0x4d8>)
 8000cc6:	725a      	strb	r2, [r3, #9]

					break;
 8000cc8:	e020      	b.n	8000d0c <transform_rotation+0x4b8>
				case(ROTATION_3):
						// 1
						// 1 [1]
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 8000cca:	4b18      	ldr	r3, [pc, #96]	@ (8000d2c <transform_rotation+0x4d8>)
 8000ccc:	789a      	ldrb	r2, [r3, #2]
 8000cce:	4b17      	ldr	r3, [pc, #92]	@ (8000d2c <transform_rotation+0x4d8>)
 8000cd0:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y - 1;
 8000cd2:	4b16      	ldr	r3, [pc, #88]	@ (8000d2c <transform_rotation+0x4d8>)
 8000cd4:	78db      	ldrb	r3, [r3, #3]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	b2da      	uxtb	r2, r3
 8000cda:	4b14      	ldr	r3, [pc, #80]	@ (8000d2c <transform_rotation+0x4d8>)
 8000cdc:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;
 8000cde:	4b13      	ldr	r3, [pc, #76]	@ (8000d2c <transform_rotation+0x4d8>)
 8000ce0:	789b      	ldrb	r3, [r3, #2]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <transform_rotation+0x4d8>)
 8000ce8:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000cea:	4b10      	ldr	r3, [pc, #64]	@ (8000d2c <transform_rotation+0x4d8>)
 8000cec:	78da      	ldrb	r2, [r3, #3]
 8000cee:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <transform_rotation+0x4d8>)
 8000cf0:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000d2c <transform_rotation+0x4d8>)
 8000cf4:	789b      	ldrb	r3, [r3, #2]
 8000cf6:	3b01      	subs	r3, #1
 8000cf8:	b2da      	uxtb	r2, r3
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <transform_rotation+0x4d8>)
 8000cfc:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1;
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000d2c <transform_rotation+0x4d8>)
 8000d00:	78db      	ldrb	r3, [r3, #3]
 8000d02:	3301      	adds	r3, #1
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4b09      	ldr	r3, [pc, #36]	@ (8000d2c <transform_rotation+0x4d8>)
 8000d08:	725a      	strb	r2, [r3, #9]

					break;
 8000d0a:	bf00      	nop
			}
			break;
 8000d0c:	e1b5      	b.n	800107a <transform_rotation+0x826>
		case(HERO):
			switch(new_rotation) {
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b03      	cmp	r3, #3
 8000d12:	f200 81b4 	bhi.w	800107e <transform_rotation+0x82a>
 8000d16:	a201      	add	r2, pc, #4	@ (adr r2, 8000d1c <transform_rotation+0x4c8>)
 8000d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d1c:	08000d31 	.word	0x08000d31
 8000d20:	08000d6f 	.word	0x08000d6f
 8000d24:	08000dad 	.word	0x08000dad
 8000d28:	08000deb 	.word	0x08000deb
 8000d2c:	2000008c 	.word	0x2000008c
				case(ROTATION_0):
						// 1 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;	 //
 8000d30:	4b8b      	ldr	r3, [pc, #556]	@ (8000f60 <transform_rotation+0x70c>)
 8000d32:	789b      	ldrb	r3, [r3, #2]
 8000d34:	3b01      	subs	r3, #1
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	4b89      	ldr	r3, [pc, #548]	@ (8000f60 <transform_rotation+0x70c>)
 8000d3a:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 // 1 [1] 1 1
 8000d3c:	4b88      	ldr	r3, [pc, #544]	@ (8000f60 <transform_rotation+0x70c>)
 8000d3e:	78da      	ldrb	r2, [r3, #3]
 8000d40:	4b87      	ldr	r3, [pc, #540]	@ (8000f60 <transform_rotation+0x70c>)
 8000d42:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 2;	 //
 8000d44:	4b86      	ldr	r3, [pc, #536]	@ (8000f60 <transform_rotation+0x70c>)
 8000d46:	789b      	ldrb	r3, [r3, #2]
 8000d48:	3b02      	subs	r3, #2
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	4b84      	ldr	r3, [pc, #528]	@ (8000f60 <transform_rotation+0x70c>)
 8000d4e:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		 // [1] 1 1 1
 8000d50:	4b83      	ldr	r3, [pc, #524]	@ (8000f60 <transform_rotation+0x70c>)
 8000d52:	78da      	ldrb	r2, [r3, #3]
 8000d54:	4b82      	ldr	r3, [pc, #520]	@ (8000f60 <transform_rotation+0x70c>)
 8000d56:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //
 8000d58:	4b81      	ldr	r3, [pc, #516]	@ (8000f60 <transform_rotation+0x70c>)
 8000d5a:	789b      	ldrb	r3, [r3, #2]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	4b7f      	ldr	r3, [pc, #508]	@ (8000f60 <transform_rotation+0x70c>)
 8000d62:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y; 	     //  1 1 1 [1]
 8000d64:	4b7e      	ldr	r3, [pc, #504]	@ (8000f60 <transform_rotation+0x70c>)
 8000d66:	78da      	ldrb	r2, [r3, #3]
 8000d68:	4b7d      	ldr	r3, [pc, #500]	@ (8000f60 <transform_rotation+0x70c>)
 8000d6a:	725a      	strb	r2, [r3, #9]

					break;
 8000d6c:	e05c      	b.n	8000e28 <transform_rotation+0x5d4>
				case(ROTATION_1):
						//  1
						//  1
						// [1]
						//  1
					object.suboriginbit_0.x = object.originbit.x;
 8000d6e:	4b7c      	ldr	r3, [pc, #496]	@ (8000f60 <transform_rotation+0x70c>)
 8000d70:	789a      	ldrb	r2, [r3, #2]
 8000d72:	4b7b      	ldr	r3, [pc, #492]	@ (8000f60 <transform_rotation+0x70c>)
 8000d74:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 8000d76:	4b7a      	ldr	r3, [pc, #488]	@ (8000f60 <transform_rotation+0x70c>)
 8000d78:	78db      	ldrb	r3, [r3, #3]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	4b78      	ldr	r3, [pc, #480]	@ (8000f60 <transform_rotation+0x70c>)
 8000d80:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000d82:	4b77      	ldr	r3, [pc, #476]	@ (8000f60 <transform_rotation+0x70c>)
 8000d84:	789a      	ldrb	r2, [r3, #2]
 8000d86:	4b76      	ldr	r3, [pc, #472]	@ (8000f60 <transform_rotation+0x70c>)
 8000d88:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8000d8a:	4b75      	ldr	r3, [pc, #468]	@ (8000f60 <transform_rotation+0x70c>)
 8000d8c:	78db      	ldrb	r3, [r3, #3]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	b2da      	uxtb	r2, r3
 8000d92:	4b73      	ldr	r3, [pc, #460]	@ (8000f60 <transform_rotation+0x70c>)
 8000d94:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000d96:	4b72      	ldr	r3, [pc, #456]	@ (8000f60 <transform_rotation+0x70c>)
 8000d98:	789a      	ldrb	r2, [r3, #2]
 8000d9a:	4b71      	ldr	r3, [pc, #452]	@ (8000f60 <transform_rotation+0x70c>)
 8000d9c:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 2;
 8000d9e:	4b70      	ldr	r3, [pc, #448]	@ (8000f60 <transform_rotation+0x70c>)
 8000da0:	78db      	ldrb	r3, [r3, #3]
 8000da2:	3302      	adds	r3, #2
 8000da4:	b2da      	uxtb	r2, r3
 8000da6:	4b6e      	ldr	r3, [pc, #440]	@ (8000f60 <transform_rotation+0x70c>)
 8000da8:	725a      	strb	r2, [r3, #9]

					break;
 8000daa:	e03d      	b.n	8000e28 <transform_rotation+0x5d4>
				case(ROTATION_2):
						// 1 [1] 1 1
					object.suboriginbit_0.x = object.originbit.x - 1;
 8000dac:	4b6c      	ldr	r3, [pc, #432]	@ (8000f60 <transform_rotation+0x70c>)
 8000dae:	789b      	ldrb	r3, [r3, #2]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	b2da      	uxtb	r2, r3
 8000db4:	4b6a      	ldr	r3, [pc, #424]	@ (8000f60 <transform_rotation+0x70c>)
 8000db6:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000db8:	4b69      	ldr	r3, [pc, #420]	@ (8000f60 <transform_rotation+0x70c>)
 8000dba:	78da      	ldrb	r2, [r3, #3]
 8000dbc:	4b68      	ldr	r3, [pc, #416]	@ (8000f60 <transform_rotation+0x70c>)
 8000dbe:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;
 8000dc0:	4b67      	ldr	r3, [pc, #412]	@ (8000f60 <transform_rotation+0x70c>)
 8000dc2:	789b      	ldrb	r3, [r3, #2]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	4b65      	ldr	r3, [pc, #404]	@ (8000f60 <transform_rotation+0x70c>)
 8000dca:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000dcc:	4b64      	ldr	r3, [pc, #400]	@ (8000f60 <transform_rotation+0x70c>)
 8000dce:	78da      	ldrb	r2, [r3, #3]
 8000dd0:	4b63      	ldr	r3, [pc, #396]	@ (8000f60 <transform_rotation+0x70c>)
 8000dd2:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 2;
 8000dd4:	4b62      	ldr	r3, [pc, #392]	@ (8000f60 <transform_rotation+0x70c>)
 8000dd6:	789b      	ldrb	r3, [r3, #2]
 8000dd8:	3302      	adds	r3, #2
 8000dda:	b2da      	uxtb	r2, r3
 8000ddc:	4b60      	ldr	r3, [pc, #384]	@ (8000f60 <transform_rotation+0x70c>)
 8000dde:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 8000de0:	4b5f      	ldr	r3, [pc, #380]	@ (8000f60 <transform_rotation+0x70c>)
 8000de2:	78da      	ldrb	r2, [r3, #3]
 8000de4:	4b5e      	ldr	r3, [pc, #376]	@ (8000f60 <transform_rotation+0x70c>)
 8000de6:	725a      	strb	r2, [r3, #9]

					break;
 8000de8:	e01e      	b.n	8000e28 <transform_rotation+0x5d4>
				case(ROTATION_3):
						//  1
						// [1]
						//  1
						//  1
					object.suboriginbit_0.x = object.originbit.x;
 8000dea:	4b5d      	ldr	r3, [pc, #372]	@ (8000f60 <transform_rotation+0x70c>)
 8000dec:	789a      	ldrb	r2, [r3, #2]
 8000dee:	4b5c      	ldr	r3, [pc, #368]	@ (8000f60 <transform_rotation+0x70c>)
 8000df0:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 8000df2:	4b5b      	ldr	r3, [pc, #364]	@ (8000f60 <transform_rotation+0x70c>)
 8000df4:	78db      	ldrb	r3, [r3, #3]
 8000df6:	3301      	adds	r3, #1
 8000df8:	b2da      	uxtb	r2, r3
 8000dfa:	4b59      	ldr	r3, [pc, #356]	@ (8000f60 <transform_rotation+0x70c>)
 8000dfc:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000dfe:	4b58      	ldr	r3, [pc, #352]	@ (8000f60 <transform_rotation+0x70c>)
 8000e00:	789a      	ldrb	r2, [r3, #2]
 8000e02:	4b57      	ldr	r3, [pc, #348]	@ (8000f60 <transform_rotation+0x70c>)
 8000e04:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8000e06:	4b56      	ldr	r3, [pc, #344]	@ (8000f60 <transform_rotation+0x70c>)
 8000e08:	78db      	ldrb	r3, [r3, #3]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	b2da      	uxtb	r2, r3
 8000e0e:	4b54      	ldr	r3, [pc, #336]	@ (8000f60 <transform_rotation+0x70c>)
 8000e10:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000e12:	4b53      	ldr	r3, [pc, #332]	@ (8000f60 <transform_rotation+0x70c>)
 8000e14:	789a      	ldrb	r2, [r3, #2]
 8000e16:	4b52      	ldr	r3, [pc, #328]	@ (8000f60 <transform_rotation+0x70c>)
 8000e18:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 2;
 8000e1a:	4b51      	ldr	r3, [pc, #324]	@ (8000f60 <transform_rotation+0x70c>)
 8000e1c:	78db      	ldrb	r3, [r3, #3]
 8000e1e:	3b02      	subs	r3, #2
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4b4f      	ldr	r3, [pc, #316]	@ (8000f60 <transform_rotation+0x70c>)
 8000e24:	725a      	strb	r2, [r3, #9]

					break;
 8000e26:	bf00      	nop
			}

			break;
 8000e28:	e129      	b.n	800107e <transform_rotation+0x82a>
		case(TEEWEE):
			switch(new_rotation) {
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	2b03      	cmp	r3, #3
 8000e2e:	f200 8128 	bhi.w	8001082 <transform_rotation+0x82e>
 8000e32:	a201      	add	r2, pc, #4	@ (adr r2, 8000e38 <transform_rotation+0x5e4>)
 8000e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e38:	08000e49 	.word	0x08000e49
 8000e3c:	08000e87 	.word	0x08000e87
 8000e40:	08000ec5 	.word	0x08000ec5
 8000e44:	08000f03 	.word	0x08000f03
				case(ROTATION_0):
						//    1
						// 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;	 //     1
 8000e48:	4b45      	ldr	r3, [pc, #276]	@ (8000f60 <transform_rotation+0x70c>)
 8000e4a:	789b      	ldrb	r3, [r3, #2]
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	4b43      	ldr	r3, [pc, #268]	@ (8000f60 <transform_rotation+0x70c>)
 8000e52:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 // [1] 1 1
 8000e54:	4b42      	ldr	r3, [pc, #264]	@ (8000f60 <transform_rotation+0x70c>)
 8000e56:	78da      	ldrb	r2, [r3, #3]
 8000e58:	4b41      	ldr	r3, [pc, #260]	@ (8000f60 <transform_rotation+0x70c>)
 8000e5a:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;	 //	  1
 8000e5c:	4b40      	ldr	r3, [pc, #256]	@ (8000f60 <transform_rotation+0x70c>)
 8000e5e:	789b      	ldrb	r3, [r3, #2]
 8000e60:	3301      	adds	r3, #1
 8000e62:	b2da      	uxtb	r2, r3
 8000e64:	4b3e      	ldr	r3, [pc, #248]	@ (8000f60 <transform_rotation+0x70c>)
 8000e66:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		 // 1 1 [1]
 8000e68:	4b3d      	ldr	r3, [pc, #244]	@ (8000f60 <transform_rotation+0x70c>)
 8000e6a:	78da      	ldrb	r2, [r3, #3]
 8000e6c:	4b3c      	ldr	r3, [pc, #240]	@ (8000f60 <transform_rotation+0x70c>)
 8000e6e:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;	     //	 [1]
 8000e70:	4b3b      	ldr	r3, [pc, #236]	@ (8000f60 <transform_rotation+0x70c>)
 8000e72:	789a      	ldrb	r2, [r3, #2]
 8000e74:	4b3a      	ldr	r3, [pc, #232]	@ (8000f60 <transform_rotation+0x70c>)
 8000e76:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1 1 1
 8000e78:	4b39      	ldr	r3, [pc, #228]	@ (8000f60 <transform_rotation+0x70c>)
 8000e7a:	78db      	ldrb	r3, [r3, #3]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	4b37      	ldr	r3, [pc, #220]	@ (8000f60 <transform_rotation+0x70c>)
 8000e82:	725a      	strb	r2, [r3, #9]

					break;
 8000e84:	e05c      	b.n	8000f40 <transform_rotation+0x6ec>
				case(ROTATION_1):
						//  1
						// [1] 1
						//  1
					object.suboriginbit_0.x = object.originbit.x + 1;
 8000e86:	4b36      	ldr	r3, [pc, #216]	@ (8000f60 <transform_rotation+0x70c>)
 8000e88:	789b      	ldrb	r3, [r3, #2]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	4b34      	ldr	r3, [pc, #208]	@ (8000f60 <transform_rotation+0x70c>)
 8000e90:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000e92:	4b33      	ldr	r3, [pc, #204]	@ (8000f60 <transform_rotation+0x70c>)
 8000e94:	78da      	ldrb	r2, [r3, #3]
 8000e96:	4b32      	ldr	r3, [pc, #200]	@ (8000f60 <transform_rotation+0x70c>)
 8000e98:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000e9a:	4b31      	ldr	r3, [pc, #196]	@ (8000f60 <transform_rotation+0x70c>)
 8000e9c:	789a      	ldrb	r2, [r3, #2]
 8000e9e:	4b30      	ldr	r3, [pc, #192]	@ (8000f60 <transform_rotation+0x70c>)
 8000ea0:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;
 8000ea2:	4b2f      	ldr	r3, [pc, #188]	@ (8000f60 <transform_rotation+0x70c>)
 8000ea4:	78db      	ldrb	r3, [r3, #3]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8000f60 <transform_rotation+0x70c>)
 8000eac:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000eae:	4b2c      	ldr	r3, [pc, #176]	@ (8000f60 <transform_rotation+0x70c>)
 8000eb0:	789a      	ldrb	r2, [r3, #2]
 8000eb2:	4b2b      	ldr	r3, [pc, #172]	@ (8000f60 <transform_rotation+0x70c>)
 8000eb4:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8000eb6:	4b2a      	ldr	r3, [pc, #168]	@ (8000f60 <transform_rotation+0x70c>)
 8000eb8:	78db      	ldrb	r3, [r3, #3]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4b28      	ldr	r3, [pc, #160]	@ (8000f60 <transform_rotation+0x70c>)
 8000ec0:	725a      	strb	r2, [r3, #9]

					break;
 8000ec2:	e03d      	b.n	8000f40 <transform_rotation+0x6ec>
				case(ROTATION_2):
						// 1 [1] 1
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 8000ec4:	4b26      	ldr	r3, [pc, #152]	@ (8000f60 <transform_rotation+0x70c>)
 8000ec6:	789a      	ldrb	r2, [r3, #2]
 8000ec8:	4b25      	ldr	r3, [pc, #148]	@ (8000f60 <transform_rotation+0x70c>)
 8000eca:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y - 1;
 8000ecc:	4b24      	ldr	r3, [pc, #144]	@ (8000f60 <transform_rotation+0x70c>)
 8000ece:	78db      	ldrb	r3, [r3, #3]
 8000ed0:	3b01      	subs	r3, #1
 8000ed2:	b2da      	uxtb	r2, r3
 8000ed4:	4b22      	ldr	r3, [pc, #136]	@ (8000f60 <transform_rotation+0x70c>)
 8000ed6:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;
 8000ed8:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <transform_rotation+0x70c>)
 8000eda:	789b      	ldrb	r3, [r3, #2]
 8000edc:	3301      	adds	r3, #1
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f60 <transform_rotation+0x70c>)
 8000ee2:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000ee4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f60 <transform_rotation+0x70c>)
 8000ee6:	78da      	ldrb	r2, [r3, #3]
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f60 <transform_rotation+0x70c>)
 8000eea:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 8000eec:	4b1c      	ldr	r3, [pc, #112]	@ (8000f60 <transform_rotation+0x70c>)
 8000eee:	789b      	ldrb	r3, [r3, #2]
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f60 <transform_rotation+0x70c>)
 8000ef6:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 8000ef8:	4b19      	ldr	r3, [pc, #100]	@ (8000f60 <transform_rotation+0x70c>)
 8000efa:	78da      	ldrb	r2, [r3, #3]
 8000efc:	4b18      	ldr	r3, [pc, #96]	@ (8000f60 <transform_rotation+0x70c>)
 8000efe:	725a      	strb	r2, [r3, #9]

					break;
 8000f00:	e01e      	b.n	8000f40 <transform_rotation+0x6ec>
				case(ROTATION_3):
						//    1
						// 1 [1]
						//    1
					object.suboriginbit_0.x = object.originbit.x - 1;
 8000f02:	4b17      	ldr	r3, [pc, #92]	@ (8000f60 <transform_rotation+0x70c>)
 8000f04:	789b      	ldrb	r3, [r3, #2]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <transform_rotation+0x70c>)
 8000f0c:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000f0e:	4b14      	ldr	r3, [pc, #80]	@ (8000f60 <transform_rotation+0x70c>)
 8000f10:	78da      	ldrb	r2, [r3, #3]
 8000f12:	4b13      	ldr	r3, [pc, #76]	@ (8000f60 <transform_rotation+0x70c>)
 8000f14:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000f16:	4b12      	ldr	r3, [pc, #72]	@ (8000f60 <transform_rotation+0x70c>)
 8000f18:	789a      	ldrb	r2, [r3, #2]
 8000f1a:	4b11      	ldr	r3, [pc, #68]	@ (8000f60 <transform_rotation+0x70c>)
 8000f1c:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;
 8000f1e:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <transform_rotation+0x70c>)
 8000f20:	78db      	ldrb	r3, [r3, #3]
 8000f22:	3301      	adds	r3, #1
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <transform_rotation+0x70c>)
 8000f28:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f60 <transform_rotation+0x70c>)
 8000f2c:	789a      	ldrb	r2, [r3, #2]
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f60 <transform_rotation+0x70c>)
 8000f30:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8000f32:	4b0b      	ldr	r3, [pc, #44]	@ (8000f60 <transform_rotation+0x70c>)
 8000f34:	78db      	ldrb	r3, [r3, #3]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4b09      	ldr	r3, [pc, #36]	@ (8000f60 <transform_rotation+0x70c>)
 8000f3c:	725a      	strb	r2, [r3, #9]

					break;
 8000f3e:	bf00      	nop
			}

			break;
 8000f40:	e09f      	b.n	8001082 <transform_rotation+0x82e>
		case(SMASHBOY):
			switch(new_rotation) {
 8000f42:	79fb      	ldrb	r3, [r7, #7]
 8000f44:	2b03      	cmp	r3, #3
 8000f46:	f200 809e 	bhi.w	8001086 <transform_rotation+0x832>
 8000f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f50 <transform_rotation+0x6fc>)
 8000f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f50:	08000f65 	.word	0x08000f65
 8000f54:	08000fa7 	.word	0x08000fa7
 8000f58:	08000fe9 	.word	0x08000fe9
 8000f5c:	0800102b 	.word	0x0800102b
 8000f60:	2000008c 	.word	0x2000008c
				case(ROTATION_0):
					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 8000f64:	4b50      	ldr	r3, [pc, #320]	@ (80010a8 <transform_rotation+0x854>)
 8000f66:	789b      	ldrb	r3, [r3, #2]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	4b4e      	ldr	r3, [pc, #312]	@ (80010a8 <transform_rotation+0x854>)
 8000f6e:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 8000f70:	4b4d      	ldr	r3, [pc, #308]	@ (80010a8 <transform_rotation+0x854>)
 8000f72:	78da      	ldrb	r2, [r3, #3]
 8000f74:	4b4c      	ldr	r3, [pc, #304]	@ (80010a8 <transform_rotation+0x854>)
 8000f76:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 8000f78:	4b4b      	ldr	r3, [pc, #300]	@ (80010a8 <transform_rotation+0x854>)
 8000f7a:	789a      	ldrb	r2, [r3, #2]
 8000f7c:	4b4a      	ldr	r3, [pc, #296]	@ (80010a8 <transform_rotation+0x854>)
 8000f7e:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 8000f80:	4b49      	ldr	r3, [pc, #292]	@ (80010a8 <transform_rotation+0x854>)
 8000f82:	78db      	ldrb	r3, [r3, #3]
 8000f84:	3301      	adds	r3, #1
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	4b47      	ldr	r3, [pc, #284]	@ (80010a8 <transform_rotation+0x854>)
 8000f8a:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 8000f8c:	4b46      	ldr	r3, [pc, #280]	@ (80010a8 <transform_rotation+0x854>)
 8000f8e:	789b      	ldrb	r3, [r3, #2]
 8000f90:	3301      	adds	r3, #1
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	4b44      	ldr	r3, [pc, #272]	@ (80010a8 <transform_rotation+0x854>)
 8000f96:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 8000f98:	4b43      	ldr	r3, [pc, #268]	@ (80010a8 <transform_rotation+0x854>)
 8000f9a:	78db      	ldrb	r3, [r3, #3]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	4b41      	ldr	r3, [pc, #260]	@ (80010a8 <transform_rotation+0x854>)
 8000fa2:	725a      	strb	r2, [r3, #9]

					break;
 8000fa4:	e062      	b.n	800106c <transform_rotation+0x818>
				case(ROTATION_1):

					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 8000fa6:	4b40      	ldr	r3, [pc, #256]	@ (80010a8 <transform_rotation+0x854>)
 8000fa8:	789b      	ldrb	r3, [r3, #2]
 8000faa:	3301      	adds	r3, #1
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4b3e      	ldr	r3, [pc, #248]	@ (80010a8 <transform_rotation+0x854>)
 8000fb0:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 8000fb2:	4b3d      	ldr	r3, [pc, #244]	@ (80010a8 <transform_rotation+0x854>)
 8000fb4:	78da      	ldrb	r2, [r3, #3]
 8000fb6:	4b3c      	ldr	r3, [pc, #240]	@ (80010a8 <transform_rotation+0x854>)
 8000fb8:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 8000fba:	4b3b      	ldr	r3, [pc, #236]	@ (80010a8 <transform_rotation+0x854>)
 8000fbc:	789a      	ldrb	r2, [r3, #2]
 8000fbe:	4b3a      	ldr	r3, [pc, #232]	@ (80010a8 <transform_rotation+0x854>)
 8000fc0:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 8000fc2:	4b39      	ldr	r3, [pc, #228]	@ (80010a8 <transform_rotation+0x854>)
 8000fc4:	78db      	ldrb	r3, [r3, #3]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b37      	ldr	r3, [pc, #220]	@ (80010a8 <transform_rotation+0x854>)
 8000fcc:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 8000fce:	4b36      	ldr	r3, [pc, #216]	@ (80010a8 <transform_rotation+0x854>)
 8000fd0:	789b      	ldrb	r3, [r3, #2]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4b34      	ldr	r3, [pc, #208]	@ (80010a8 <transform_rotation+0x854>)
 8000fd8:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 8000fda:	4b33      	ldr	r3, [pc, #204]	@ (80010a8 <transform_rotation+0x854>)
 8000fdc:	78db      	ldrb	r3, [r3, #3]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4b31      	ldr	r3, [pc, #196]	@ (80010a8 <transform_rotation+0x854>)
 8000fe4:	725a      	strb	r2, [r3, #9]

					break;
 8000fe6:	e041      	b.n	800106c <transform_rotation+0x818>
				case(ROTATION_2):
					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 8000fe8:	4b2f      	ldr	r3, [pc, #188]	@ (80010a8 <transform_rotation+0x854>)
 8000fea:	789b      	ldrb	r3, [r3, #2]
 8000fec:	3301      	adds	r3, #1
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80010a8 <transform_rotation+0x854>)
 8000ff2:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 8000ff4:	4b2c      	ldr	r3, [pc, #176]	@ (80010a8 <transform_rotation+0x854>)
 8000ff6:	78da      	ldrb	r2, [r3, #3]
 8000ff8:	4b2b      	ldr	r3, [pc, #172]	@ (80010a8 <transform_rotation+0x854>)
 8000ffa:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 8000ffc:	4b2a      	ldr	r3, [pc, #168]	@ (80010a8 <transform_rotation+0x854>)
 8000ffe:	789a      	ldrb	r2, [r3, #2]
 8001000:	4b29      	ldr	r3, [pc, #164]	@ (80010a8 <transform_rotation+0x854>)
 8001002:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 8001004:	4b28      	ldr	r3, [pc, #160]	@ (80010a8 <transform_rotation+0x854>)
 8001006:	78db      	ldrb	r3, [r3, #3]
 8001008:	3301      	adds	r3, #1
 800100a:	b2da      	uxtb	r2, r3
 800100c:	4b26      	ldr	r3, [pc, #152]	@ (80010a8 <transform_rotation+0x854>)
 800100e:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 8001010:	4b25      	ldr	r3, [pc, #148]	@ (80010a8 <transform_rotation+0x854>)
 8001012:	789b      	ldrb	r3, [r3, #2]
 8001014:	3301      	adds	r3, #1
 8001016:	b2da      	uxtb	r2, r3
 8001018:	4b23      	ldr	r3, [pc, #140]	@ (80010a8 <transform_rotation+0x854>)
 800101a:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 800101c:	4b22      	ldr	r3, [pc, #136]	@ (80010a8 <transform_rotation+0x854>)
 800101e:	78db      	ldrb	r3, [r3, #3]
 8001020:	3301      	adds	r3, #1
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b20      	ldr	r3, [pc, #128]	@ (80010a8 <transform_rotation+0x854>)
 8001026:	725a      	strb	r2, [r3, #9]

					break;
 8001028:	e020      	b.n	800106c <transform_rotation+0x818>
				case(ROTATION_3):

					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 800102a:	4b1f      	ldr	r3, [pc, #124]	@ (80010a8 <transform_rotation+0x854>)
 800102c:	789b      	ldrb	r3, [r3, #2]
 800102e:	3301      	adds	r3, #1
 8001030:	b2da      	uxtb	r2, r3
 8001032:	4b1d      	ldr	r3, [pc, #116]	@ (80010a8 <transform_rotation+0x854>)
 8001034:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 8001036:	4b1c      	ldr	r3, [pc, #112]	@ (80010a8 <transform_rotation+0x854>)
 8001038:	78da      	ldrb	r2, [r3, #3]
 800103a:	4b1b      	ldr	r3, [pc, #108]	@ (80010a8 <transform_rotation+0x854>)
 800103c:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 800103e:	4b1a      	ldr	r3, [pc, #104]	@ (80010a8 <transform_rotation+0x854>)
 8001040:	789a      	ldrb	r2, [r3, #2]
 8001042:	4b19      	ldr	r3, [pc, #100]	@ (80010a8 <transform_rotation+0x854>)
 8001044:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 8001046:	4b18      	ldr	r3, [pc, #96]	@ (80010a8 <transform_rotation+0x854>)
 8001048:	78db      	ldrb	r3, [r3, #3]
 800104a:	3301      	adds	r3, #1
 800104c:	b2da      	uxtb	r2, r3
 800104e:	4b16      	ldr	r3, [pc, #88]	@ (80010a8 <transform_rotation+0x854>)
 8001050:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 8001052:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <transform_rotation+0x854>)
 8001054:	789b      	ldrb	r3, [r3, #2]
 8001056:	3301      	adds	r3, #1
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4b13      	ldr	r3, [pc, #76]	@ (80010a8 <transform_rotation+0x854>)
 800105c:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 800105e:	4b12      	ldr	r3, [pc, #72]	@ (80010a8 <transform_rotation+0x854>)
 8001060:	78db      	ldrb	r3, [r3, #3]
 8001062:	3301      	adds	r3, #1
 8001064:	b2da      	uxtb	r2, r3
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <transform_rotation+0x854>)
 8001068:	725a      	strb	r2, [r3, #9]

					break;
 800106a:	bf00      	nop
			}
		break;
 800106c:	e00b      	b.n	8001086 <transform_rotation+0x832>
			break;
 800106e:	bf00      	nop
 8001070:	e00a      	b.n	8001088 <transform_rotation+0x834>
			break;
 8001072:	bf00      	nop
 8001074:	e008      	b.n	8001088 <transform_rotation+0x834>
			break;
 8001076:	bf00      	nop
 8001078:	e006      	b.n	8001088 <transform_rotation+0x834>
			break;
 800107a:	bf00      	nop
 800107c:	e004      	b.n	8001088 <transform_rotation+0x834>
			break;
 800107e:	bf00      	nop
 8001080:	e002      	b.n	8001088 <transform_rotation+0x834>
			break;
 8001082:	bf00      	nop
 8001084:	e000      	b.n	8001088 <transform_rotation+0x834>
		break;
 8001086:	bf00      	nop
	}



	if (check_State() == 0) {
 8001088:	f7ff fabe 	bl	8000608 <check_State>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d105      	bne.n	800109e <transform_rotation+0x84a>
		object = temp;
 8001092:	4b05      	ldr	r3, [pc, #20]	@ (80010a8 <transform_rotation+0x854>)
 8001094:	f107 020c 	add.w	r2, r7, #12
 8001098:	ca07      	ldmia	r2, {r0, r1, r2}
 800109a:	c303      	stmia	r3!, {r0, r1}
 800109c:	801a      	strh	r2, [r3, #0]
	}

}
 800109e:	bf00      	nop
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000008c 	.word	0x2000008c

080010ac <update_Matrix>:

void update_Matrix(void){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
	dummyTable[object.originbit.y][object.originbit.x] = 1;
 80010b2:	4b48      	ldr	r3, [pc, #288]	@ (80011d4 <update_Matrix+0x128>)
 80010b4:	78db      	ldrb	r3, [r3, #3]
 80010b6:	4619      	mov	r1, r3
 80010b8:	4b46      	ldr	r3, [pc, #280]	@ (80011d4 <update_Matrix+0x128>)
 80010ba:	789b      	ldrb	r3, [r3, #2]
 80010bc:	4618      	mov	r0, r3
 80010be:	4a46      	ldr	r2, [pc, #280]	@ (80011d8 <update_Matrix+0x12c>)
 80010c0:	460b      	mov	r3, r1
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	4403      	add	r3, r0
 80010cc:	2201      	movs	r2, #1
 80010ce:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_0.y][object.suboriginbit_0.x] = 1;
 80010d0:	4b40      	ldr	r3, [pc, #256]	@ (80011d4 <update_Matrix+0x128>)
 80010d2:	795b      	ldrb	r3, [r3, #5]
 80010d4:	4619      	mov	r1, r3
 80010d6:	4b3f      	ldr	r3, [pc, #252]	@ (80011d4 <update_Matrix+0x128>)
 80010d8:	791b      	ldrb	r3, [r3, #4]
 80010da:	4618      	mov	r0, r3
 80010dc:	4a3e      	ldr	r2, [pc, #248]	@ (80011d8 <update_Matrix+0x12c>)
 80010de:	460b      	mov	r3, r1
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	440b      	add	r3, r1
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	4413      	add	r3, r2
 80010e8:	4403      	add	r3, r0
 80010ea:	2201      	movs	r2, #1
 80010ec:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_1.y][object.suboriginbit_1.x] = 1;
 80010ee:	4b39      	ldr	r3, [pc, #228]	@ (80011d4 <update_Matrix+0x128>)
 80010f0:	79db      	ldrb	r3, [r3, #7]
 80010f2:	4619      	mov	r1, r3
 80010f4:	4b37      	ldr	r3, [pc, #220]	@ (80011d4 <update_Matrix+0x128>)
 80010f6:	799b      	ldrb	r3, [r3, #6]
 80010f8:	4618      	mov	r0, r3
 80010fa:	4a37      	ldr	r2, [pc, #220]	@ (80011d8 <update_Matrix+0x12c>)
 80010fc:	460b      	mov	r3, r1
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	440b      	add	r3, r1
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	4413      	add	r3, r2
 8001106:	4403      	add	r3, r0
 8001108:	2201      	movs	r2, #1
 800110a:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_2.y][object.suboriginbit_2.x] = 1;
 800110c:	4b31      	ldr	r3, [pc, #196]	@ (80011d4 <update_Matrix+0x128>)
 800110e:	7a5b      	ldrb	r3, [r3, #9]
 8001110:	4619      	mov	r1, r3
 8001112:	4b30      	ldr	r3, [pc, #192]	@ (80011d4 <update_Matrix+0x128>)
 8001114:	7a1b      	ldrb	r3, [r3, #8]
 8001116:	4618      	mov	r0, r3
 8001118:	4a2f      	ldr	r2, [pc, #188]	@ (80011d8 <update_Matrix+0x12c>)
 800111a:	460b      	mov	r3, r1
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	440b      	add	r3, r1
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	4413      	add	r3, r2
 8001124:	4403      	add	r3, r0
 8001126:	2201      	movs	r2, #1
 8001128:	701a      	strb	r2, [r3, #0]

#if MATRIX_LCD == 1
	// Connect to the LCD screen and update that

#elif MATRIX_LCD == 0
	printf("Matrix Representation:\n");
 800112a:	482c      	ldr	r0, [pc, #176]	@ (80011dc <update_Matrix+0x130>)
 800112c:	f003 fef2 	bl	8004f14 <puts>

	for (int i = 0; i < ROWS; i++) {
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	e020      	b.n	8001178 <update_Matrix+0xcc>
		printf("%3d|", i);
 8001136:	68f9      	ldr	r1, [r7, #12]
 8001138:	4829      	ldr	r0, [pc, #164]	@ (80011e0 <update_Matrix+0x134>)
 800113a:	f003 fe7b 	bl	8004e34 <iprintf>
		for (int j = 0; j < COLS; j++) {
 800113e:	2300      	movs	r3, #0
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	e010      	b.n	8001166 <update_Matrix+0xba>
			printf("%5d", dummyTable[i][j]);
 8001144:	4924      	ldr	r1, [pc, #144]	@ (80011d8 <update_Matrix+0x12c>)
 8001146:	68fa      	ldr	r2, [r7, #12]
 8001148:	4613      	mov	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4413      	add	r3, r2
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	18ca      	adds	r2, r1, r3
 8001152:	68bb      	ldr	r3, [r7, #8]
 8001154:	4413      	add	r3, r2
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4619      	mov	r1, r3
 800115a:	4822      	ldr	r0, [pc, #136]	@ (80011e4 <update_Matrix+0x138>)
 800115c:	f003 fe6a 	bl	8004e34 <iprintf>
		for (int j = 0; j < COLS; j++) {
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	3301      	adds	r3, #1
 8001164:	60bb      	str	r3, [r7, #8]
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	2b09      	cmp	r3, #9
 800116a:	ddeb      	ble.n	8001144 <update_Matrix+0x98>
		}
		printf("\n");
 800116c:	200a      	movs	r0, #10
 800116e:	f003 fe73 	bl	8004e58 <putchar>
	for (int i = 0; i < ROWS; i++) {
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	3301      	adds	r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2b0c      	cmp	r3, #12
 800117c:	dddb      	ble.n	8001136 <update_Matrix+0x8a>
	}

	printf("   +");
 800117e:	481a      	ldr	r0, [pc, #104]	@ (80011e8 <update_Matrix+0x13c>)
 8001180:	f003 fe58 	bl	8004e34 <iprintf>
	for (int j = 0; j < COLS; j++) {
 8001184:	2300      	movs	r3, #0
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	e005      	b.n	8001196 <update_Matrix+0xea>
		printf("-----");
 800118a:	4818      	ldr	r0, [pc, #96]	@ (80011ec <update_Matrix+0x140>)
 800118c:	f003 fe52 	bl	8004e34 <iprintf>
	for (int j = 0; j < COLS; j++) {
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3301      	adds	r3, #1
 8001194:	607b      	str	r3, [r7, #4]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2b09      	cmp	r3, #9
 800119a:	ddf6      	ble.n	800118a <update_Matrix+0xde>
	}
	printf("\n");
 800119c:	200a      	movs	r0, #10
 800119e:	f003 fe5b 	bl	8004e58 <putchar>

	printf("%5s", " ");
 80011a2:	4913      	ldr	r1, [pc, #76]	@ (80011f0 <update_Matrix+0x144>)
 80011a4:	4813      	ldr	r0, [pc, #76]	@ (80011f4 <update_Matrix+0x148>)
 80011a6:	f003 fe45 	bl	8004e34 <iprintf>
	for (int i = 0; i < COLS; i++) {
 80011aa:	2300      	movs	r3, #0
 80011ac:	603b      	str	r3, [r7, #0]
 80011ae:	e006      	b.n	80011be <update_Matrix+0x112>
		printf("%5d", i);
 80011b0:	6839      	ldr	r1, [r7, #0]
 80011b2:	480c      	ldr	r0, [pc, #48]	@ (80011e4 <update_Matrix+0x138>)
 80011b4:	f003 fe3e 	bl	8004e34 <iprintf>
	for (int i = 0; i < COLS; i++) {
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	3301      	adds	r3, #1
 80011bc:	603b      	str	r3, [r7, #0]
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	2b09      	cmp	r3, #9
 80011c2:	ddf5      	ble.n	80011b0 <update_Matrix+0x104>
	}
	printf("\n");
 80011c4:	200a      	movs	r0, #10
 80011c6:	f003 fe47 	bl	8004e58 <putchar>

#endif

}
 80011ca:	bf00      	nop
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	2000008c 	.word	0x2000008c
 80011d8:	20000098 	.word	0x20000098
 80011dc:	08005cac 	.word	0x08005cac
 80011e0:	08005cc4 	.word	0x08005cc4
 80011e4:	08005ccc 	.word	0x08005ccc
 80011e8:	08005cd0 	.word	0x08005cd0
 80011ec:	08005cd8 	.word	0x08005cd8
 80011f0:	08005ce0 	.word	0x08005ce0
 80011f4:	08005ce4 	.word	0x08005ce4

080011f8 <getScheduledEvents>:
 */
#include "Scheduler.h"

static uint32_t scheduledEvents;

uint32_t getScheduledEvents(){
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
	uint32_t returnVal = scheduledEvents;
 80011fe:	4b05      	ldr	r3, [pc, #20]	@ (8001214 <getScheduledEvents+0x1c>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	607b      	str	r3, [r7, #4]
	return returnVal;
 8001204:	687b      	ldr	r3, [r7, #4]
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	20000120 	.word	0x20000120

08001218 <addScheduledEvent>:

void addScheduledEvent(uint32_t event){
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	scheduledEvents |= (event);
 8001220:	4b05      	ldr	r3, [pc, #20]	@ (8001238 <addScheduledEvent+0x20>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4313      	orrs	r3, r2
 8001228:	4a03      	ldr	r2, [pc, #12]	@ (8001238 <addScheduledEvent+0x20>)
 800122a:	6013      	str	r3, [r2, #0]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	20000120 	.word	0x20000120

0800123c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 8001242:	f003 fcb7 	bl	8004bb4 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001246:	f000 ff83 	bl	8002150 <HAL_Init>

  /* USER CODE BEGIN Init */
  applicationInit();
 800124a:	f7ff f9a1 	bl	8000590 <applicationInit>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124e:	f000 f817 	bl	8001280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001252:	f000 f9fd 	bl	8001650 <MX_GPIO_Init>
  MX_LTDC_Init();
 8001256:	f000 f8bf 	bl	80013d8 <MX_LTDC_Init>
  MX_I2C3_Init();
 800125a:	f000 f87d 	bl	8001358 <MX_I2C3_Init>
  MX_RNG_Init();
 800125e:	f000 f96d 	bl	800153c <MX_RNG_Init>
  MX_TIM2_Init();
 8001262:	f000 f9a7 	bl	80015b4 <MX_TIM2_Init>
  MX_SPI5_Init();
 8001266:	f000 f96f 	bl	8001548 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  uint32_t eventsToRun;
  object_Select();
 800126a:	f7ff fa49 	bl	8000700 <object_Select>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 eventsToRun = getScheduledEvents();
 800126e:	f7ff ffc3 	bl	80011f8 <getScheduledEvents>
 8001272:	6078      	str	r0, [r7, #4]
	 if(eventsToRun && MATRIX_UPDATE_EVENT) {update_Matrix();}
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f9      	beq.n	800126e <main+0x32>
 800127a:	f7ff ff17 	bl	80010ac <update_Matrix>
	 eventsToRun = getScheduledEvents();
 800127e:	e7f6      	b.n	800126e <main+0x32>

08001280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b094      	sub	sp, #80	@ 0x50
 8001284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	2230      	movs	r2, #48	@ 0x30
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f003 fe48 	bl	8004f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001294:	f107 030c 	add.w	r3, r7, #12
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a4:	2300      	movs	r3, #0
 80012a6:	60bb      	str	r3, [r7, #8]
 80012a8:	4b29      	ldr	r3, [pc, #164]	@ (8001350 <SystemClock_Config+0xd0>)
 80012aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ac:	4a28      	ldr	r2, [pc, #160]	@ (8001350 <SystemClock_Config+0xd0>)
 80012ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b4:	4b26      	ldr	r3, [pc, #152]	@ (8001350 <SystemClock_Config+0xd0>)
 80012b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012bc:	60bb      	str	r3, [r7, #8]
 80012be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012c0:	2300      	movs	r3, #0
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	4b23      	ldr	r3, [pc, #140]	@ (8001354 <SystemClock_Config+0xd4>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012cc:	4a21      	ldr	r2, [pc, #132]	@ (8001354 <SystemClock_Config+0xd4>)
 80012ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001354 <SystemClock_Config+0xd4>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e0:	2302      	movs	r3, #2
 80012e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e4:	2301      	movs	r3, #1
 80012e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012e8:	2310      	movs	r3, #16
 80012ea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ec:	2302      	movs	r3, #2
 80012ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012f0:	2300      	movs	r3, #0
 80012f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012f4:	2308      	movs	r3, #8
 80012f6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80012f8:	2332      	movs	r3, #50	@ 0x32
 80012fa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80012fc:	2304      	movs	r3, #4
 80012fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001300:	2307      	movs	r3, #7
 8001302:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001304:	f107 0320 	add.w	r3, r7, #32
 8001308:	4618      	mov	r0, r3
 800130a:	f001 fee9 	bl	80030e0 <HAL_RCC_OscConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001314:	f000 fb60 	bl	80019d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001318:	230f      	movs	r3, #15
 800131a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800131c:	2302      	movs	r3, #2
 800131e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001324:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001328:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800132a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800132e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f002 f94a 	bl	80035d0 <HAL_RCC_ClockConfig>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001342:	f000 fb49 	bl	80019d8 <Error_Handler>
  }
}
 8001346:	bf00      	nop
 8001348:	3750      	adds	r7, #80	@ 0x50
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	40007000 	.word	0x40007000

08001358 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800135c:	4b1b      	ldr	r3, [pc, #108]	@ (80013cc <MX_I2C3_Init+0x74>)
 800135e:	4a1c      	ldr	r2, [pc, #112]	@ (80013d0 <MX_I2C3_Init+0x78>)
 8001360:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001362:	4b1a      	ldr	r3, [pc, #104]	@ (80013cc <MX_I2C3_Init+0x74>)
 8001364:	4a1b      	ldr	r2, [pc, #108]	@ (80013d4 <MX_I2C3_Init+0x7c>)
 8001366:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001368:	4b18      	ldr	r3, [pc, #96]	@ (80013cc <MX_I2C3_Init+0x74>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800136e:	4b17      	ldr	r3, [pc, #92]	@ (80013cc <MX_I2C3_Init+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001374:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <MX_I2C3_Init+0x74>)
 8001376:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800137a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800137c:	4b13      	ldr	r3, [pc, #76]	@ (80013cc <MX_I2C3_Init+0x74>)
 800137e:	2200      	movs	r2, #0
 8001380:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001382:	4b12      	ldr	r3, [pc, #72]	@ (80013cc <MX_I2C3_Init+0x74>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001388:	4b10      	ldr	r3, [pc, #64]	@ (80013cc <MX_I2C3_Init+0x74>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800138e:	4b0f      	ldr	r3, [pc, #60]	@ (80013cc <MX_I2C3_Init+0x74>)
 8001390:	2200      	movs	r2, #0
 8001392:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001394:	480d      	ldr	r0, [pc, #52]	@ (80013cc <MX_I2C3_Init+0x74>)
 8001396:	f001 fa3d 	bl	8002814 <HAL_I2C_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80013a0:	f000 fb1a 	bl	80019d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013a4:	2100      	movs	r1, #0
 80013a6:	4809      	ldr	r0, [pc, #36]	@ (80013cc <MX_I2C3_Init+0x74>)
 80013a8:	f001 fb78 	bl	8002a9c <HAL_I2CEx_ConfigAnalogFilter>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80013b2:	f000 fb11 	bl	80019d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80013b6:	2100      	movs	r1, #0
 80013b8:	4804      	ldr	r0, [pc, #16]	@ (80013cc <MX_I2C3_Init+0x74>)
 80013ba:	f001 fbab 	bl	8002b14 <HAL_I2CEx_ConfigDigitalFilter>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80013c4:	f000 fb08 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000124 	.word	0x20000124
 80013d0:	40005c00 	.word	0x40005c00
 80013d4:	000186a0 	.word	0x000186a0

080013d8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b09a      	sub	sp, #104	@ 0x68
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80013de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013e2:	2234      	movs	r2, #52	@ 0x34
 80013e4:	2100      	movs	r1, #0
 80013e6:	4618      	mov	r0, r3
 80013e8:	f003 fd9c 	bl	8004f24 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80013ec:	463b      	mov	r3, r7
 80013ee:	2234      	movs	r2, #52	@ 0x34
 80013f0:	2100      	movs	r1, #0
 80013f2:	4618      	mov	r0, r3
 80013f4:	f003 fd96 	bl	8004f24 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80013f8:	4b4e      	ldr	r3, [pc, #312]	@ (8001534 <MX_LTDC_Init+0x15c>)
 80013fa:	4a4f      	ldr	r2, [pc, #316]	@ (8001538 <MX_LTDC_Init+0x160>)
 80013fc:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80013fe:	4b4d      	ldr	r3, [pc, #308]	@ (8001534 <MX_LTDC_Init+0x15c>)
 8001400:	2200      	movs	r2, #0
 8001402:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001404:	4b4b      	ldr	r3, [pc, #300]	@ (8001534 <MX_LTDC_Init+0x15c>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800140a:	4b4a      	ldr	r3, [pc, #296]	@ (8001534 <MX_LTDC_Init+0x15c>)
 800140c:	2200      	movs	r2, #0
 800140e:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001410:	4b48      	ldr	r3, [pc, #288]	@ (8001534 <MX_LTDC_Init+0x15c>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8001416:	4b47      	ldr	r3, [pc, #284]	@ (8001534 <MX_LTDC_Init+0x15c>)
 8001418:	2207      	movs	r2, #7
 800141a:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 800141c:	4b45      	ldr	r3, [pc, #276]	@ (8001534 <MX_LTDC_Init+0x15c>)
 800141e:	2203      	movs	r2, #3
 8001420:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8001422:	4b44      	ldr	r3, [pc, #272]	@ (8001534 <MX_LTDC_Init+0x15c>)
 8001424:	220e      	movs	r2, #14
 8001426:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8001428:	4b42      	ldr	r3, [pc, #264]	@ (8001534 <MX_LTDC_Init+0x15c>)
 800142a:	2205      	movs	r2, #5
 800142c:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 800142e:	4b41      	ldr	r3, [pc, #260]	@ (8001534 <MX_LTDC_Init+0x15c>)
 8001430:	f240 228e 	movw	r2, #654	@ 0x28e
 8001434:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8001436:	4b3f      	ldr	r3, [pc, #252]	@ (8001534 <MX_LTDC_Init+0x15c>)
 8001438:	f240 12e5 	movw	r2, #485	@ 0x1e5
 800143c:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 800143e:	4b3d      	ldr	r3, [pc, #244]	@ (8001534 <MX_LTDC_Init+0x15c>)
 8001440:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001444:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 8001446:	4b3b      	ldr	r3, [pc, #236]	@ (8001534 <MX_LTDC_Init+0x15c>)
 8001448:	f240 12e7 	movw	r2, #487	@ 0x1e7
 800144c:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800144e:	4b39      	ldr	r3, [pc, #228]	@ (8001534 <MX_LTDC_Init+0x15c>)
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001456:	4b37      	ldr	r3, [pc, #220]	@ (8001534 <MX_LTDC_Init+0x15c>)
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800145e:	4b35      	ldr	r3, [pc, #212]	@ (8001534 <MX_LTDC_Init+0x15c>)
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001466:	4833      	ldr	r0, [pc, #204]	@ (8001534 <MX_LTDC_Init+0x15c>)
 8001468:	f001 fb94 	bl	8002b94 <HAL_LTDC_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8001472:	f000 fab1 	bl	80019d8 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001486:	2300      	movs	r3, #0
 8001488:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8001492:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001496:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001498:	2305      	movs	r3, #5
 800149a:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 80014ae:	2300      	movs	r3, #0
 80014b0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80014ba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014be:	2200      	movs	r2, #0
 80014c0:	4619      	mov	r1, r3
 80014c2:	481c      	ldr	r0, [pc, #112]	@ (8001534 <MX_LTDC_Init+0x15c>)
 80014c4:	f001 fc36 	bl	8002d34 <HAL_LTDC_ConfigLayer>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80014ce:	f000 fa83 	bl	80019d8 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80014d2:	2300      	movs	r3, #0
 80014d4:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80014ea:	2300      	movs	r3, #0
 80014ec:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80014ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014f2:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80014f4:	2305      	movs	r3, #5
 80014f6:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8001504:	2300      	movs	r3, #0
 8001506:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8001516:	463b      	mov	r3, r7
 8001518:	2201      	movs	r2, #1
 800151a:	4619      	mov	r1, r3
 800151c:	4805      	ldr	r0, [pc, #20]	@ (8001534 <MX_LTDC_Init+0x15c>)
 800151e:	f001 fc09 	bl	8002d34 <HAL_LTDC_ConfigLayer>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8001528:	f000 fa56 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800152c:	bf00      	nop
 800152e:	3768      	adds	r7, #104	@ 0x68
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000178 	.word	0x20000178
 8001538:	40016800 	.word	0x40016800

0800153c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */

  /* USER CODE BEGIN RNG_Init 2 */
   RND_NUM();
 8001540:	f7ff f82e 	bl	80005a0 <RND_NUM>

  /* USER CODE END RNG_Init 2 */

}
 8001544:	bf00      	nop
 8001546:	bd80      	pop	{r7, pc}

08001548 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800154c:	4b17      	ldr	r3, [pc, #92]	@ (80015ac <MX_SPI5_Init+0x64>)
 800154e:	4a18      	ldr	r2, [pc, #96]	@ (80015b0 <MX_SPI5_Init+0x68>)
 8001550:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001552:	4b16      	ldr	r3, [pc, #88]	@ (80015ac <MX_SPI5_Init+0x64>)
 8001554:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001558:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800155a:	4b14      	ldr	r3, [pc, #80]	@ (80015ac <MX_SPI5_Init+0x64>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001560:	4b12      	ldr	r3, [pc, #72]	@ (80015ac <MX_SPI5_Init+0x64>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001566:	4b11      	ldr	r3, [pc, #68]	@ (80015ac <MX_SPI5_Init+0x64>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800156c:	4b0f      	ldr	r3, [pc, #60]	@ (80015ac <MX_SPI5_Init+0x64>)
 800156e:	2200      	movs	r2, #0
 8001570:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001572:	4b0e      	ldr	r3, [pc, #56]	@ (80015ac <MX_SPI5_Init+0x64>)
 8001574:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001578:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800157a:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <MX_SPI5_Init+0x64>)
 800157c:	2200      	movs	r2, #0
 800157e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001580:	4b0a      	ldr	r3, [pc, #40]	@ (80015ac <MX_SPI5_Init+0x64>)
 8001582:	2200      	movs	r2, #0
 8001584:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001586:	4b09      	ldr	r3, [pc, #36]	@ (80015ac <MX_SPI5_Init+0x64>)
 8001588:	2200      	movs	r2, #0
 800158a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800158c:	4b07      	ldr	r3, [pc, #28]	@ (80015ac <MX_SPI5_Init+0x64>)
 800158e:	2200      	movs	r2, #0
 8001590:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001592:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <MX_SPI5_Init+0x64>)
 8001594:	220a      	movs	r2, #10
 8001596:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001598:	4804      	ldr	r0, [pc, #16]	@ (80015ac <MX_SPI5_Init+0x64>)
 800159a:	f002 fc65 	bl	8003e68 <HAL_SPI_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80015a4:	f000 fa18 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000220 	.word	0x20000220
 80015b0:	40015000 	.word	0x40015000

080015b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ba:	f107 0308 	add.w	r3, r7, #8
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c8:	463b      	mov	r3, r7
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001648 <MX_TIM2_Init+0x94>)
 80015d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80015d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001648 <MX_TIM2_Init+0x94>)
 80015da:	2200      	movs	r2, #0
 80015dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80015de:	4b1a      	ldr	r3, [pc, #104]	@ (8001648 <MX_TIM2_Init+0x94>)
 80015e0:	2210      	movs	r2, #16
 80015e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 15999999;
 80015e4:	4b18      	ldr	r3, [pc, #96]	@ (8001648 <MX_TIM2_Init+0x94>)
 80015e6:	4a19      	ldr	r2, [pc, #100]	@ (800164c <MX_TIM2_Init+0x98>)
 80015e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ea:	4b17      	ldr	r3, [pc, #92]	@ (8001648 <MX_TIM2_Init+0x94>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f0:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <MX_TIM2_Init+0x94>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015f6:	4814      	ldr	r0, [pc, #80]	@ (8001648 <MX_TIM2_Init+0x94>)
 80015f8:	f002 fcbf 	bl	8003f7a <HAL_TIM_Base_Init>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001602:	f000 f9e9 	bl	80019d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001606:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800160a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800160c:	f107 0308 	add.w	r3, r7, #8
 8001610:	4619      	mov	r1, r3
 8001612:	480d      	ldr	r0, [pc, #52]	@ (8001648 <MX_TIM2_Init+0x94>)
 8001614:	f002 fdf0 	bl	80041f8 <HAL_TIM_ConfigClockSource>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800161e:	f000 f9db 	bl	80019d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001622:	2300      	movs	r3, #0
 8001624:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800162a:	463b      	mov	r3, r7
 800162c:	4619      	mov	r1, r3
 800162e:	4806      	ldr	r0, [pc, #24]	@ (8001648 <MX_TIM2_Init+0x94>)
 8001630:	f003 f818 	bl	8004664 <HAL_TIMEx_MasterConfigSynchronization>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800163a:	f000 f9cd 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800163e:	bf00      	nop
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000278 	.word	0x20000278
 800164c:	00f423ff 	.word	0x00f423ff

08001650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b08e      	sub	sp, #56	@ 0x38
 8001654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001656:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	623b      	str	r3, [r7, #32]
 800166a:	4bb3      	ldr	r3, [pc, #716]	@ (8001938 <MX_GPIO_Init+0x2e8>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	4ab2      	ldr	r2, [pc, #712]	@ (8001938 <MX_GPIO_Init+0x2e8>)
 8001670:	f043 0304 	orr.w	r3, r3, #4
 8001674:	6313      	str	r3, [r2, #48]	@ 0x30
 8001676:	4bb0      	ldr	r3, [pc, #704]	@ (8001938 <MX_GPIO_Init+0x2e8>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	623b      	str	r3, [r7, #32]
 8001680:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
 8001686:	4bac      	ldr	r3, [pc, #688]	@ (8001938 <MX_GPIO_Init+0x2e8>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	4aab      	ldr	r2, [pc, #684]	@ (8001938 <MX_GPIO_Init+0x2e8>)
 800168c:	f043 0320 	orr.w	r3, r3, #32
 8001690:	6313      	str	r3, [r2, #48]	@ 0x30
 8001692:	4ba9      	ldr	r3, [pc, #676]	@ (8001938 <MX_GPIO_Init+0x2e8>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	f003 0320 	and.w	r3, r3, #32
 800169a:	61fb      	str	r3, [r7, #28]
 800169c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	61bb      	str	r3, [r7, #24]
 80016a2:	4ba5      	ldr	r3, [pc, #660]	@ (8001938 <MX_GPIO_Init+0x2e8>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	4aa4      	ldr	r2, [pc, #656]	@ (8001938 <MX_GPIO_Init+0x2e8>)
 80016a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ae:	4ba2      	ldr	r3, [pc, #648]	@ (8001938 <MX_GPIO_Init+0x2e8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016b6:	61bb      	str	r3, [r7, #24]
 80016b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	4b9e      	ldr	r3, [pc, #632]	@ (8001938 <MX_GPIO_Init+0x2e8>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016c2:	4a9d      	ldr	r2, [pc, #628]	@ (8001938 <MX_GPIO_Init+0x2e8>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ca:	4b9b      	ldr	r3, [pc, #620]	@ (8001938 <MX_GPIO_Init+0x2e8>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	4b97      	ldr	r3, [pc, #604]	@ (8001938 <MX_GPIO_Init+0x2e8>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016de:	4a96      	ldr	r2, [pc, #600]	@ (8001938 <MX_GPIO_Init+0x2e8>)
 80016e0:	f043 0302 	orr.w	r3, r3, #2
 80016e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e6:	4b94      	ldr	r3, [pc, #592]	@ (8001938 <MX_GPIO_Init+0x2e8>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	4b90      	ldr	r3, [pc, #576]	@ (8001938 <MX_GPIO_Init+0x2e8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fa:	4a8f      	ldr	r2, [pc, #572]	@ (8001938 <MX_GPIO_Init+0x2e8>)
 80016fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001700:	6313      	str	r3, [r2, #48]	@ 0x30
 8001702:	4b8d      	ldr	r3, [pc, #564]	@ (8001938 <MX_GPIO_Init+0x2e8>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	4b89      	ldr	r3, [pc, #548]	@ (8001938 <MX_GPIO_Init+0x2e8>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001716:	4a88      	ldr	r2, [pc, #544]	@ (8001938 <MX_GPIO_Init+0x2e8>)
 8001718:	f043 0310 	orr.w	r3, r3, #16
 800171c:	6313      	str	r3, [r2, #48]	@ 0x30
 800171e:	4b86      	ldr	r3, [pc, #536]	@ (8001938 <MX_GPIO_Init+0x2e8>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	f003 0310 	and.w	r3, r3, #16
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800172a:	2300      	movs	r3, #0
 800172c:	607b      	str	r3, [r7, #4]
 800172e:	4b82      	ldr	r3, [pc, #520]	@ (8001938 <MX_GPIO_Init+0x2e8>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	4a81      	ldr	r2, [pc, #516]	@ (8001938 <MX_GPIO_Init+0x2e8>)
 8001734:	f043 0308 	orr.w	r3, r3, #8
 8001738:	6313      	str	r3, [r2, #48]	@ 0x30
 800173a:	4b7f      	ldr	r3, [pc, #508]	@ (8001938 <MX_GPIO_Init+0x2e8>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001746:	2200      	movs	r2, #0
 8001748:	2116      	movs	r1, #22
 800174a:	487c      	ldr	r0, [pc, #496]	@ (800193c <MX_GPIO_Init+0x2ec>)
 800174c:	f001 f830 	bl	80027b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	2180      	movs	r1, #128	@ 0x80
 8001754:	487a      	ldr	r0, [pc, #488]	@ (8001940 <MX_GPIO_Init+0x2f0>)
 8001756:	f001 f82b 	bl	80027b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001760:	4878      	ldr	r0, [pc, #480]	@ (8001944 <MX_GPIO_Init+0x2f4>)
 8001762:	f001 f825 	bl	80027b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001766:	2200      	movs	r2, #0
 8001768:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 800176c:	4876      	ldr	r0, [pc, #472]	@ (8001948 <MX_GPIO_Init+0x2f8>)
 800176e:	f001 f81f 	bl	80027b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001772:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001780:	2303      	movs	r3, #3
 8001782:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001784:	230c      	movs	r3, #12
 8001786:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001788:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800178c:	4619      	mov	r1, r3
 800178e:	486f      	ldr	r0, [pc, #444]	@ (800194c <MX_GPIO_Init+0x2fc>)
 8001790:	f000 fe62 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001794:	2301      	movs	r3, #1
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001798:	2302      	movs	r3, #2
 800179a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a0:	2303      	movs	r3, #3
 80017a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80017a4:	230c      	movs	r3, #12
 80017a6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80017a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ac:	4619      	mov	r1, r3
 80017ae:	4863      	ldr	r0, [pc, #396]	@ (800193c <MX_GPIO_Init+0x2ec>)
 80017b0:	f000 fe52 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80017b4:	2316      	movs	r3, #22
 80017b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b8:	2301      	movs	r3, #1
 80017ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017bc:	2300      	movs	r3, #0
 80017be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c0:	2300      	movs	r3, #0
 80017c2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017c8:	4619      	mov	r1, r3
 80017ca:	485c      	ldr	r0, [pc, #368]	@ (800193c <MX_GPIO_Init+0x2ec>)
 80017cc:	f000 fe44 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017d0:	2301      	movs	r3, #1
 80017d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017d4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80017d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017e2:	4619      	mov	r1, r3
 80017e4:	4856      	ldr	r0, [pc, #344]	@ (8001940 <MX_GPIO_Init+0x2f0>)
 80017e6:	f000 fe37 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80017ea:	f248 0306 	movw	r3, #32774	@ 0x8006
 80017ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017f0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80017f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017fe:	4619      	mov	r1, r3
 8001800:	484f      	ldr	r0, [pc, #316]	@ (8001940 <MX_GPIO_Init+0x2f0>)
 8001802:	f000 fe29 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001806:	2380      	movs	r3, #128	@ 0x80
 8001808:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800180a:	2301      	movs	r3, #1
 800180c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001812:	2300      	movs	r3, #0
 8001814:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001816:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800181a:	4619      	mov	r1, r3
 800181c:	4848      	ldr	r0, [pc, #288]	@ (8001940 <MX_GPIO_Init+0x2f0>)
 800181e:	f000 fe1b 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001822:	2320      	movs	r3, #32
 8001824:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001826:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800182a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001830:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001834:	4619      	mov	r1, r3
 8001836:	4841      	ldr	r0, [pc, #260]	@ (800193c <MX_GPIO_Init+0x2ec>)
 8001838:	f000 fe0e 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800183c:	2304      	movs	r3, #4
 800183e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001840:	2300      	movs	r3, #0
 8001842:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001844:	2300      	movs	r3, #0
 8001846:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001848:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800184c:	4619      	mov	r1, r3
 800184e:	4840      	ldr	r0, [pc, #256]	@ (8001950 <MX_GPIO_Init+0x300>)
 8001850:	f000 fe02 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001854:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001858:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185e:	2300      	movs	r3, #0
 8001860:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001862:	2303      	movs	r3, #3
 8001864:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001866:	230c      	movs	r3, #12
 8001868:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800186a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800186e:	4619      	mov	r1, r3
 8001870:	4835      	ldr	r0, [pc, #212]	@ (8001948 <MX_GPIO_Init+0x2f8>)
 8001872:	f000 fdf1 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001876:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800187a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001888:	230c      	movs	r3, #12
 800188a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800188c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001890:	4619      	mov	r1, r3
 8001892:	4830      	ldr	r0, [pc, #192]	@ (8001954 <MX_GPIO_Init+0x304>)
 8001894:	f000 fde0 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001898:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800189c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a6:	2300      	movs	r3, #0
 80018a8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80018aa:	230c      	movs	r3, #12
 80018ac:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b2:	4619      	mov	r1, r3
 80018b4:	4826      	ldr	r0, [pc, #152]	@ (8001950 <MX_GPIO_Init+0x300>)
 80018b6:	f000 fdcf 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80018ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018be:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c0:	2300      	movs	r3, #0
 80018c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80018c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018cc:	4619      	mov	r1, r3
 80018ce:	4820      	ldr	r0, [pc, #128]	@ (8001950 <MX_GPIO_Init+0x300>)
 80018d0:	f000 fdc2 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80018d4:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80018d8:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018e6:	230c      	movs	r3, #12
 80018e8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ee:	4619      	mov	r1, r3
 80018f0:	4814      	ldr	r0, [pc, #80]	@ (8001944 <MX_GPIO_Init+0x2f4>)
 80018f2:	f000 fdb1 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80018f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80018fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018fc:	2300      	movs	r3, #0
 80018fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001904:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001908:	4619      	mov	r1, r3
 800190a:	480e      	ldr	r0, [pc, #56]	@ (8001944 <MX_GPIO_Init+0x2f4>)
 800190c:	f000 fda4 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001910:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001914:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001916:	2301      	movs	r3, #1
 8001918:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001926:	4619      	mov	r1, r3
 8001928:	4806      	ldr	r0, [pc, #24]	@ (8001944 <MX_GPIO_Init+0x2f4>)
 800192a:	f000 fd95 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800192e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001932:	627b      	str	r3, [r7, #36]	@ 0x24
 8001934:	e010      	b.n	8001958 <MX_GPIO_Init+0x308>
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800
 800193c:	40020800 	.word	0x40020800
 8001940:	40020000 	.word	0x40020000
 8001944:	40020c00 	.word	0x40020c00
 8001948:	40021800 	.word	0x40021800
 800194c:	40021400 	.word	0x40021400
 8001950:	40020400 	.word	0x40020400
 8001954:	40021000 	.word	0x40021000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001960:	2303      	movs	r3, #3
 8001962:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001964:	2307      	movs	r3, #7
 8001966:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001968:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800196c:	4619      	mov	r1, r3
 800196e:	4817      	ldr	r0, [pc, #92]	@ (80019cc <MX_GPIO_Init+0x37c>)
 8001970:	f000 fd72 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001974:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001978:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197a:	2301      	movs	r3, #1
 800197c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001986:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800198a:	4619      	mov	r1, r3
 800198c:	4810      	ldr	r0, [pc, #64]	@ (80019d0 <MX_GPIO_Init+0x380>)
 800198e:	f000 fd63 	bl	8002458 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001992:	2360      	movs	r3, #96	@ 0x60
 8001994:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001996:	2302      	movs	r3, #2
 8001998:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199e:	2303      	movs	r3, #3
 80019a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019a2:	230c      	movs	r3, #12
 80019a4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019aa:	4619      	mov	r1, r3
 80019ac:	4809      	ldr	r0, [pc, #36]	@ (80019d4 <MX_GPIO_Init+0x384>)
 80019ae:	f000 fd53 	bl	8002458 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	2100      	movs	r1, #0
 80019b6:	2006      	movs	r0, #6
 80019b8:	f000 fd17 	bl	80023ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80019bc:	2006      	movs	r0, #6
 80019be:	f000 fd30 	bl	8002422 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80019c2:	bf00      	nop
 80019c4:	3738      	adds	r7, #56	@ 0x38
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	40020000 	.word	0x40020000
 80019d0:	40021800 	.word	0x40021800
 80019d4:	40020400 	.word	0x40020400

080019d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019dc:	b672      	cpsid	i
}
 80019de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e0:	bf00      	nop
 80019e2:	e7fd      	b.n	80019e0 <Error_Handler+0x8>

080019e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	607b      	str	r3, [r7, #4]
 80019ee:	4b10      	ldr	r3, [pc, #64]	@ (8001a30 <HAL_MspInit+0x4c>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001a30 <HAL_MspInit+0x4c>)
 80019f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80019fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001a30 <HAL_MspInit+0x4c>)
 80019fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a02:	607b      	str	r3, [r7, #4]
 8001a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	603b      	str	r3, [r7, #0]
 8001a0a:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <HAL_MspInit+0x4c>)
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	4a08      	ldr	r2, [pc, #32]	@ (8001a30 <HAL_MspInit+0x4c>)
 8001a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a16:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_MspInit+0x4c>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a1e:	603b      	str	r3, [r7, #0]
 8001a20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a22:	2007      	movs	r0, #7
 8001a24:	f000 fcd6 	bl	80023d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40023800 	.word	0x40023800

08001a34 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	@ 0x28
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	2200      	movs	r2, #0
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	605a      	str	r2, [r3, #4]
 8001a46:	609a      	str	r2, [r3, #8]
 8001a48:	60da      	str	r2, [r3, #12]
 8001a4a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a29      	ldr	r2, [pc, #164]	@ (8001af8 <HAL_I2C_MspInit+0xc4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d14b      	bne.n	8001aee <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	4b28      	ldr	r3, [pc, #160]	@ (8001afc <HAL_I2C_MspInit+0xc8>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	4a27      	ldr	r2, [pc, #156]	@ (8001afc <HAL_I2C_MspInit+0xc8>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a66:	4b25      	ldr	r3, [pc, #148]	@ (8001afc <HAL_I2C_MspInit+0xc8>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	f003 0304 	and.w	r3, r3, #4
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	4b21      	ldr	r3, [pc, #132]	@ (8001afc <HAL_I2C_MspInit+0xc8>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	4a20      	ldr	r2, [pc, #128]	@ (8001afc <HAL_I2C_MspInit+0xc8>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a82:	4b1e      	ldr	r3, [pc, #120]	@ (8001afc <HAL_I2C_MspInit+0xc8>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001a8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a94:	2312      	movs	r3, #18
 8001a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001aa0:	2304      	movs	r3, #4
 8001aa2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001aa4:	f107 0314 	add.w	r3, r7, #20
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4815      	ldr	r0, [pc, #84]	@ (8001b00 <HAL_I2C_MspInit+0xcc>)
 8001aac:	f000 fcd4 	bl	8002458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001ab0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ab4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ab6:	2312      	movs	r3, #18
 8001ab8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001ac2:	2304      	movs	r3, #4
 8001ac4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001ac6:	f107 0314 	add.w	r3, r7, #20
 8001aca:	4619      	mov	r1, r3
 8001acc:	480d      	ldr	r0, [pc, #52]	@ (8001b04 <HAL_I2C_MspInit+0xd0>)
 8001ace:	f000 fcc3 	bl	8002458 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60bb      	str	r3, [r7, #8]
 8001ad6:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <HAL_I2C_MspInit+0xc8>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ada:	4a08      	ldr	r2, [pc, #32]	@ (8001afc <HAL_I2C_MspInit+0xc8>)
 8001adc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001ae0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ae2:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <HAL_I2C_MspInit+0xc8>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001aee:	bf00      	nop
 8001af0:	3728      	adds	r7, #40	@ 0x28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40005c00 	.word	0x40005c00
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40020800 	.word	0x40020800
 8001b04:	40020000 	.word	0x40020000

08001b08 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b09a      	sub	sp, #104	@ 0x68
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b24:	2230      	movs	r2, #48	@ 0x30
 8001b26:	2100      	movs	r1, #0
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f003 f9fb 	bl	8004f24 <memset>
  if(hltdc->Instance==LTDC)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a81      	ldr	r2, [pc, #516]	@ (8001d38 <HAL_LTDC_MspInit+0x230>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	f040 80fa 	bne.w	8001d2e <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001b3a:	2308      	movs	r3, #8
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001b3e:	2332      	movs	r3, #50	@ 0x32
 8001b40:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001b42:	2302      	movs	r3, #2
 8001b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001b46:	2300      	movs	r3, #0
 8001b48:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f001 ff4a 	bl	80039e8 <HAL_RCCEx_PeriphCLKConfig>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001b5a:	f7ff ff3d 	bl	80019d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	623b      	str	r3, [r7, #32]
 8001b62:	4b76      	ldr	r3, [pc, #472]	@ (8001d3c <HAL_LTDC_MspInit+0x234>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b66:	4a75      	ldr	r2, [pc, #468]	@ (8001d3c <HAL_LTDC_MspInit+0x234>)
 8001b68:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001b6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b6e:	4b73      	ldr	r3, [pc, #460]	@ (8001d3c <HAL_LTDC_MspInit+0x234>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001b76:	623b      	str	r3, [r7, #32]
 8001b78:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	4b6f      	ldr	r3, [pc, #444]	@ (8001d3c <HAL_LTDC_MspInit+0x234>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b82:	4a6e      	ldr	r2, [pc, #440]	@ (8001d3c <HAL_LTDC_MspInit+0x234>)
 8001b84:	f043 0320 	orr.w	r3, r3, #32
 8001b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8a:	4b6c      	ldr	r3, [pc, #432]	@ (8001d3c <HAL_LTDC_MspInit+0x234>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8e:	f003 0320 	and.w	r3, r3, #32
 8001b92:	61fb      	str	r3, [r7, #28]
 8001b94:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	61bb      	str	r3, [r7, #24]
 8001b9a:	4b68      	ldr	r3, [pc, #416]	@ (8001d3c <HAL_LTDC_MspInit+0x234>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9e:	4a67      	ldr	r2, [pc, #412]	@ (8001d3c <HAL_LTDC_MspInit+0x234>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba6:	4b65      	ldr	r3, [pc, #404]	@ (8001d3c <HAL_LTDC_MspInit+0x234>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	61bb      	str	r3, [r7, #24]
 8001bb0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
 8001bb6:	4b61      	ldr	r3, [pc, #388]	@ (8001d3c <HAL_LTDC_MspInit+0x234>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bba:	4a60      	ldr	r2, [pc, #384]	@ (8001d3c <HAL_LTDC_MspInit+0x234>)
 8001bbc:	f043 0302 	orr.w	r3, r3, #2
 8001bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc2:	4b5e      	ldr	r3, [pc, #376]	@ (8001d3c <HAL_LTDC_MspInit+0x234>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
 8001bd2:	4b5a      	ldr	r3, [pc, #360]	@ (8001d3c <HAL_LTDC_MspInit+0x234>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	4a59      	ldr	r2, [pc, #356]	@ (8001d3c <HAL_LTDC_MspInit+0x234>)
 8001bd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bde:	4b57      	ldr	r3, [pc, #348]	@ (8001d3c <HAL_LTDC_MspInit+0x234>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b53      	ldr	r3, [pc, #332]	@ (8001d3c <HAL_LTDC_MspInit+0x234>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf2:	4a52      	ldr	r2, [pc, #328]	@ (8001d3c <HAL_LTDC_MspInit+0x234>)
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bfa:	4b50      	ldr	r3, [pc, #320]	@ (8001d3c <HAL_LTDC_MspInit+0x234>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60bb      	str	r3, [r7, #8]
 8001c0a:	4b4c      	ldr	r3, [pc, #304]	@ (8001d3c <HAL_LTDC_MspInit+0x234>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	4a4b      	ldr	r2, [pc, #300]	@ (8001d3c <HAL_LTDC_MspInit+0x234>)
 8001c10:	f043 0308 	orr.w	r3, r3, #8
 8001c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c16:	4b49      	ldr	r3, [pc, #292]	@ (8001d3c <HAL_LTDC_MspInit+0x234>)
 8001c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	60bb      	str	r3, [r7, #8]
 8001c20:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001c22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c26:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	2300      	movs	r3, #0
 8001c32:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c34:	230e      	movs	r3, #14
 8001c36:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001c38:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4840      	ldr	r0, [pc, #256]	@ (8001d40 <HAL_LTDC_MspInit+0x238>)
 8001c40:	f000 fc0a 	bl	8002458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001c44:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001c48:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c52:	2300      	movs	r3, #0
 8001c54:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c56:	230e      	movs	r3, #14
 8001c58:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4838      	ldr	r0, [pc, #224]	@ (8001d44 <HAL_LTDC_MspInit+0x23c>)
 8001c62:	f000 fbf9 	bl	8002458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001c66:	2303      	movs	r3, #3
 8001c68:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c72:	2300      	movs	r3, #0
 8001c74:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001c76:	2309      	movs	r3, #9
 8001c78:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c7a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4831      	ldr	r0, [pc, #196]	@ (8001d48 <HAL_LTDC_MspInit+0x240>)
 8001c82:	f000 fbe9 	bl	8002458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001c86:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001c8a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2300      	movs	r3, #0
 8001c96:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001c98:	230e      	movs	r3, #14
 8001c9a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4829      	ldr	r0, [pc, #164]	@ (8001d48 <HAL_LTDC_MspInit+0x240>)
 8001ca4:	f000 fbd8 	bl	8002458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001ca8:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001cac:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cba:	230e      	movs	r3, #14
 8001cbc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cbe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4821      	ldr	r0, [pc, #132]	@ (8001d4c <HAL_LTDC_MspInit+0x244>)
 8001cc6:	f000 fbc7 	bl	8002458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001cca:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001cce:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cdc:	230e      	movs	r3, #14
 8001cde:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ce0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	481a      	ldr	r0, [pc, #104]	@ (8001d50 <HAL_LTDC_MspInit+0x248>)
 8001ce8:	f000 fbb6 	bl	8002458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001cec:	2348      	movs	r3, #72	@ 0x48
 8001cee:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001cfc:	230e      	movs	r3, #14
 8001cfe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d00:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d04:	4619      	mov	r1, r3
 8001d06:	4813      	ldr	r0, [pc, #76]	@ (8001d54 <HAL_LTDC_MspInit+0x24c>)
 8001d08:	f000 fba6 	bl	8002458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001d0c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d10:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d12:	2302      	movs	r3, #2
 8001d14:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d16:	2300      	movs	r3, #0
 8001d18:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001d1e:	2309      	movs	r3, #9
 8001d20:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d22:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001d26:	4619      	mov	r1, r3
 8001d28:	4808      	ldr	r0, [pc, #32]	@ (8001d4c <HAL_LTDC_MspInit+0x244>)
 8001d2a:	f000 fb95 	bl	8002458 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001d2e:	bf00      	nop
 8001d30:	3768      	adds	r7, #104	@ 0x68
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40016800 	.word	0x40016800
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40021400 	.word	0x40021400
 8001d44:	40020000 	.word	0x40020000
 8001d48:	40020400 	.word	0x40020400
 8001d4c:	40021800 	.word	0x40021800
 8001d50:	40020800 	.word	0x40020800
 8001d54:	40020c00 	.word	0x40020c00

08001d58 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0b      	ldr	r2, [pc, #44]	@ (8001d94 <HAL_RNG_MspInit+0x3c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d10d      	bne.n	8001d86 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d98 <HAL_RNG_MspInit+0x40>)
 8001d70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d72:	4a09      	ldr	r2, [pc, #36]	@ (8001d98 <HAL_RNG_MspInit+0x40>)
 8001d74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d78:	6353      	str	r3, [r2, #52]	@ 0x34
 8001d7a:	4b07      	ldr	r3, [pc, #28]	@ (8001d98 <HAL_RNG_MspInit+0x40>)
 8001d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001d86:	bf00      	nop
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	50060800 	.word	0x50060800
 8001d98:	40023800 	.word	0x40023800

08001d9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08a      	sub	sp, #40	@ 0x28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a19      	ldr	r2, [pc, #100]	@ (8001e20 <HAL_SPI_MspInit+0x84>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d12c      	bne.n	8001e18 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	4b18      	ldr	r3, [pc, #96]	@ (8001e24 <HAL_SPI_MspInit+0x88>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc6:	4a17      	ldr	r2, [pc, #92]	@ (8001e24 <HAL_SPI_MspInit+0x88>)
 8001dc8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001dcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dce:	4b15      	ldr	r3, [pc, #84]	@ (8001e24 <HAL_SPI_MspInit+0x88>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dd6:	613b      	str	r3, [r7, #16]
 8001dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	60fb      	str	r3, [r7, #12]
 8001dde:	4b11      	ldr	r3, [pc, #68]	@ (8001e24 <HAL_SPI_MspInit+0x88>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	4a10      	ldr	r2, [pc, #64]	@ (8001e24 <HAL_SPI_MspInit+0x88>)
 8001de4:	f043 0320 	orr.w	r3, r3, #32
 8001de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dea:	4b0e      	ldr	r3, [pc, #56]	@ (8001e24 <HAL_SPI_MspInit+0x88>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	f003 0320 	and.w	r3, r3, #32
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001df6:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e04:	2300      	movs	r3, #0
 8001e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001e08:	2305      	movs	r3, #5
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	4619      	mov	r1, r3
 8001e12:	4805      	ldr	r0, [pc, #20]	@ (8001e28 <HAL_SPI_MspInit+0x8c>)
 8001e14:	f000 fb20 	bl	8002458 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001e18:	bf00      	nop
 8001e1a:	3728      	adds	r7, #40	@ 0x28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40015000 	.word	0x40015000
 8001e24:	40023800 	.word	0x40023800
 8001e28:	40021400 	.word	0x40021400

08001e2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e3c:	d115      	bne.n	8001e6a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	4b0c      	ldr	r3, [pc, #48]	@ (8001e74 <HAL_TIM_Base_MspInit+0x48>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e46:	4a0b      	ldr	r2, [pc, #44]	@ (8001e74 <HAL_TIM_Base_MspInit+0x48>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e4e:	4b09      	ldr	r3, [pc, #36]	@ (8001e74 <HAL_TIM_Base_MspInit+0x48>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	201c      	movs	r0, #28
 8001e60:	f000 fac3 	bl	80023ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e64:	201c      	movs	r0, #28
 8001e66:	f000 fadc 	bl	8002422 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001e6a:	bf00      	nop
 8001e6c:	3710      	adds	r7, #16
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40023800 	.word	0x40023800

08001e78 <HAL_GPIO_EXTI_Callback>:

}

/* USER CODE BEGIN 1 */
// Interrupt callback function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) {  // Button pin
 8001e82:	88fb      	ldrh	r3, [r7, #6]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d107      	bne.n	8001e98 <HAL_GPIO_EXTI_Callback+0x20>
    	// Send flag to rotate stuff
    	rotation new_rotation = object.Rotation + 1;
 8001e88:	4b05      	ldr	r3, [pc, #20]	@ (8001ea0 <HAL_GPIO_EXTI_Callback+0x28>)
 8001e8a:	785b      	ldrb	r3, [r3, #1]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	73fb      	strb	r3, [r7, #15]
    	transform_rotation(new_rotation);
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe fcde 	bl	8000854 <transform_rotation>
    }
}
 8001e98:	bf00      	nop
 8001e9a:	3710      	adds	r7, #16
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	200002c0 	.word	0x200002c0

08001ea4 <HAL_TIM_PeriodElapsedCallback>:

// Interrupt callback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eb4:	f040 8090 	bne.w	8001fd8 <HAL_TIM_PeriodElapsedCallback+0x134>
        // erase the previous state
    	dummyTable[object.originbit.y][object.originbit.x] = 0;
 8001eb8:	4b4a      	ldr	r3, [pc, #296]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001eba:	78db      	ldrb	r3, [r3, #3]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4b49      	ldr	r3, [pc, #292]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001ec0:	789b      	ldrb	r3, [r3, #2]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	4a48      	ldr	r2, [pc, #288]	@ (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001ec6:	460b      	mov	r3, r1
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	4403      	add	r3, r0
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_0.y][object.suboriginbit_0.x] = 0;
 8001ed6:	4b43      	ldr	r3, [pc, #268]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001ed8:	795b      	ldrb	r3, [r3, #5]
 8001eda:	4619      	mov	r1, r3
 8001edc:	4b41      	ldr	r3, [pc, #260]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001ede:	791b      	ldrb	r3, [r3, #4]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	4a41      	ldr	r2, [pc, #260]	@ (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	440b      	add	r3, r1
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	4413      	add	r3, r2
 8001eee:	4403      	add	r3, r0
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_1.y][object.suboriginbit_1.x] = 0;
 8001ef4:	4b3b      	ldr	r3, [pc, #236]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001ef6:	79db      	ldrb	r3, [r3, #7]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4b3a      	ldr	r3, [pc, #232]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001efc:	799b      	ldrb	r3, [r3, #6]
 8001efe:	4618      	mov	r0, r3
 8001f00:	4a39      	ldr	r2, [pc, #228]	@ (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001f02:	460b      	mov	r3, r1
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	4413      	add	r3, r2
 8001f0c:	4403      	add	r3, r0
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_2.y][object.suboriginbit_2.x] = 0;
 8001f12:	4b34      	ldr	r3, [pc, #208]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f14:	7a5b      	ldrb	r3, [r3, #9]
 8001f16:	4619      	mov	r1, r3
 8001f18:	4b32      	ldr	r3, [pc, #200]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f1a:	7a1b      	ldrb	r3, [r3, #8]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	4a32      	ldr	r2, [pc, #200]	@ (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001f20:	460b      	mov	r3, r1
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	005b      	lsls	r3, r3, #1
 8001f28:	4413      	add	r3, r2
 8001f2a:	4403      	add	r3, r0
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
		// create the new object location
    	object.originbit.y -= 1;
 8001f30:	4b2c      	ldr	r3, [pc, #176]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f32:	78db      	ldrb	r3, [r3, #3]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	4b2a      	ldr	r3, [pc, #168]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f3a:	70da      	strb	r2, [r3, #3]
    	object.suboriginbit_0.y -= 1;
 8001f3c:	4b29      	ldr	r3, [pc, #164]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f3e:	795b      	ldrb	r3, [r3, #5]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	4b27      	ldr	r3, [pc, #156]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f46:	715a      	strb	r2, [r3, #5]
    	object.suboriginbit_1.y -= 1;
 8001f48:	4b26      	ldr	r3, [pc, #152]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f4a:	79db      	ldrb	r3, [r3, #7]
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	4b24      	ldr	r3, [pc, #144]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f52:	71da      	strb	r2, [r3, #7]
    	object.suboriginbit_2.y -= 1;
 8001f54:	4b23      	ldr	r3, [pc, #140]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f56:	7a5b      	ldrb	r3, [r3, #9]
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	4b21      	ldr	r3, [pc, #132]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f5e:	725a      	strb	r2, [r3, #9]
    	// draw the new state
    	dummyTable[object.originbit.y][object.originbit.x] = 1;
 8001f60:	4b20      	ldr	r3, [pc, #128]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f62:	78db      	ldrb	r3, [r3, #3]
 8001f64:	4619      	mov	r1, r3
 8001f66:	4b1f      	ldr	r3, [pc, #124]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f68:	789b      	ldrb	r3, [r3, #2]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	4a1e      	ldr	r2, [pc, #120]	@ (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001f6e:	460b      	mov	r3, r1
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	4413      	add	r3, r2
 8001f78:	4403      	add	r3, r0
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
    	dummyTable[object.suboriginbit_0.y][object.suboriginbit_0.x] = 1;
 8001f7e:	4b19      	ldr	r3, [pc, #100]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f80:	795b      	ldrb	r3, [r3, #5]
 8001f82:	4619      	mov	r1, r3
 8001f84:	4b17      	ldr	r3, [pc, #92]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f86:	791b      	ldrb	r3, [r3, #4]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	4a17      	ldr	r2, [pc, #92]	@ (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	4403      	add	r3, r0
 8001f98:	2201      	movs	r2, #1
 8001f9a:	701a      	strb	r2, [r3, #0]
    	dummyTable[object.suboriginbit_1.y][object.suboriginbit_1.x] = 1;
 8001f9c:	4b11      	ldr	r3, [pc, #68]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001f9e:	79db      	ldrb	r3, [r3, #7]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	4b10      	ldr	r3, [pc, #64]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001fa4:	799b      	ldrb	r3, [r3, #6]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001faa:	460b      	mov	r3, r1
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	440b      	add	r3, r1
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	4413      	add	r3, r2
 8001fb4:	4403      	add	r3, r0
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	701a      	strb	r2, [r3, #0]
    	dummyTable[object.suboriginbit_2.y][object.suboriginbit_2.x] = 1;
 8001fba:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001fbc:	7a5b      	ldrb	r3, [r3, #9]
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4b08      	ldr	r3, [pc, #32]	@ (8001fe4 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001fc2:	7a1b      	ldrb	r3, [r3, #8]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	4a08      	ldr	r2, [pc, #32]	@ (8001fe8 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001fc8:	460b      	mov	r3, r1
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4413      	add	r3, r2
 8001fd2:	4403      	add	r3, r0
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	701a      	strb	r2, [r3, #0]
    }
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	200002c0 	.word	0x200002c0
 8001fe8:	200002cc 	.word	0x200002cc

08001fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ff0:	bf00      	nop
 8001ff2:	e7fd      	b.n	8001ff0 <NMI_Handler+0x4>

08001ff4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff8:	bf00      	nop
 8001ffa:	e7fd      	b.n	8001ff8 <HardFault_Handler+0x4>

08001ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002000:	bf00      	nop
 8002002:	e7fd      	b.n	8002000 <MemManage_Handler+0x4>

08002004 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002008:	bf00      	nop
 800200a:	e7fd      	b.n	8002008 <BusFault_Handler+0x4>

0800200c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002010:	bf00      	nop
 8002012:	e7fd      	b.n	8002010 <UsageFault_Handler+0x4>

08002014 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr

08002022 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002042:	f000 f8d7 	bl	80021f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}

0800204a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800204e:	2001      	movs	r0, #1
 8002050:	f000 fbc8 	bl	80027e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002054:	bf00      	nop
 8002056:	bd80      	pop	{r7, pc}

08002058 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800205c:	4802      	ldr	r0, [pc, #8]	@ (8002068 <TIM2_IRQHandler+0x10>)
 800205e:	f001 ffdb 	bl	8004018 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000278 	.word	0x20000278

0800206c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002074:	4a14      	ldr	r2, [pc, #80]	@ (80020c8 <_sbrk+0x5c>)
 8002076:	4b15      	ldr	r3, [pc, #84]	@ (80020cc <_sbrk+0x60>)
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002080:	4b13      	ldr	r3, [pc, #76]	@ (80020d0 <_sbrk+0x64>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d102      	bne.n	800208e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002088:	4b11      	ldr	r3, [pc, #68]	@ (80020d0 <_sbrk+0x64>)
 800208a:	4a12      	ldr	r2, [pc, #72]	@ (80020d4 <_sbrk+0x68>)
 800208c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800208e:	4b10      	ldr	r3, [pc, #64]	@ (80020d0 <_sbrk+0x64>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4413      	add	r3, r2
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	429a      	cmp	r2, r3
 800209a:	d207      	bcs.n	80020ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800209c:	f002 ff4a 	bl	8004f34 <__errno>
 80020a0:	4603      	mov	r3, r0
 80020a2:	220c      	movs	r2, #12
 80020a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020aa:	e009      	b.n	80020c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020ac:	4b08      	ldr	r3, [pc, #32]	@ (80020d0 <_sbrk+0x64>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020b2:	4b07      	ldr	r3, [pc, #28]	@ (80020d0 <_sbrk+0x64>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	4a05      	ldr	r2, [pc, #20]	@ (80020d0 <_sbrk+0x64>)
 80020bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020be:	68fb      	ldr	r3, [r7, #12]
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3718      	adds	r7, #24
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	20030000 	.word	0x20030000
 80020cc:	00000400 	.word	0x00000400
 80020d0:	20000350 	.word	0x20000350
 80020d4:	20000550 	.word	0x20000550

080020d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020dc:	4b06      	ldr	r3, [pc, #24]	@ (80020f8 <SystemInit+0x20>)
 80020de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020e2:	4a05      	ldr	r2, [pc, #20]	@ (80020f8 <SystemInit+0x20>)
 80020e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
 80020f6:	bf00      	nop
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80020fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002134 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002100:	f7ff ffea 	bl	80020d8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002104:	480c      	ldr	r0, [pc, #48]	@ (8002138 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002106:	490d      	ldr	r1, [pc, #52]	@ (800213c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002108:	4a0d      	ldr	r2, [pc, #52]	@ (8002140 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800210a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800210c:	e002      	b.n	8002114 <LoopCopyDataInit>

0800210e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800210e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002110:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002112:	3304      	adds	r3, #4

08002114 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002114:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002116:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002118:	d3f9      	bcc.n	800210e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800211a:	4a0a      	ldr	r2, [pc, #40]	@ (8002144 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800211c:	4c0a      	ldr	r4, [pc, #40]	@ (8002148 <LoopFillZerobss+0x22>)
  movs r3, #0
 800211e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002120:	e001      	b.n	8002126 <LoopFillZerobss>

08002122 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002122:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002124:	3204      	adds	r2, #4

08002126 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002126:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002128:	d3fb      	bcc.n	8002122 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800212a:	f002 ff09 	bl	8004f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800212e:	f7ff f885 	bl	800123c <main>
  bx  lr    
 8002132:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002134:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002138:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800213c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002140:	08005d60 	.word	0x08005d60
  ldr r2, =_sbss
 8002144:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002148:	20000550 	.word	0x20000550

0800214c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800214c:	e7fe      	b.n	800214c <ADC_IRQHandler>
	...

08002150 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002154:	4b0e      	ldr	r3, [pc, #56]	@ (8002190 <HAL_Init+0x40>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a0d      	ldr	r2, [pc, #52]	@ (8002190 <HAL_Init+0x40>)
 800215a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800215e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002160:	4b0b      	ldr	r3, [pc, #44]	@ (8002190 <HAL_Init+0x40>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a0a      	ldr	r2, [pc, #40]	@ (8002190 <HAL_Init+0x40>)
 8002166:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800216a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800216c:	4b08      	ldr	r3, [pc, #32]	@ (8002190 <HAL_Init+0x40>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a07      	ldr	r2, [pc, #28]	@ (8002190 <HAL_Init+0x40>)
 8002172:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002176:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002178:	2003      	movs	r0, #3
 800217a:	f000 f92b 	bl	80023d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800217e:	2000      	movs	r0, #0
 8002180:	f000 f808 	bl	8002194 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002184:	f7ff fc2e 	bl	80019e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40023c00 	.word	0x40023c00

08002194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800219c:	4b12      	ldr	r3, [pc, #72]	@ (80021e8 <HAL_InitTick+0x54>)
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b12      	ldr	r3, [pc, #72]	@ (80021ec <HAL_InitTick+0x58>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	4619      	mov	r1, r3
 80021a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 f943 	bl	800243e <HAL_SYSTICK_Config>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e00e      	b.n	80021e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b0f      	cmp	r3, #15
 80021c6:	d80a      	bhi.n	80021de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021c8:	2200      	movs	r2, #0
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80021d0:	f000 f90b 	bl	80023ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d4:	4a06      	ldr	r2, [pc, #24]	@ (80021f0 <HAL_InitTick+0x5c>)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	e000      	b.n	80021e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000000 	.word	0x20000000
 80021ec:	20000008 	.word	0x20000008
 80021f0:	20000004 	.word	0x20000004

080021f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021f8:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <HAL_IncTick+0x20>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	4b06      	ldr	r3, [pc, #24]	@ (8002218 <HAL_IncTick+0x24>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4413      	add	r3, r2
 8002204:	4a04      	ldr	r2, [pc, #16]	@ (8002218 <HAL_IncTick+0x24>)
 8002206:	6013      	str	r3, [r2, #0]
}
 8002208:	bf00      	nop
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	20000008 	.word	0x20000008
 8002218:	20000354 	.word	0x20000354

0800221c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  return uwTick;
 8002220:	4b03      	ldr	r3, [pc, #12]	@ (8002230 <HAL_GetTick+0x14>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	4618      	mov	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	20000354 	.word	0x20000354

08002234 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002244:	4b0c      	ldr	r3, [pc, #48]	@ (8002278 <__NVIC_SetPriorityGrouping+0x44>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002250:	4013      	ands	r3, r2
 8002252:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800225c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002264:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002266:	4a04      	ldr	r2, [pc, #16]	@ (8002278 <__NVIC_SetPriorityGrouping+0x44>)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	60d3      	str	r3, [r2, #12]
}
 800226c:	bf00      	nop
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002280:	4b04      	ldr	r3, [pc, #16]	@ (8002294 <__NVIC_GetPriorityGrouping+0x18>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	0a1b      	lsrs	r3, r3, #8
 8002286:	f003 0307 	and.w	r3, r3, #7
}
 800228a:	4618      	mov	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	e000ed00 	.word	0xe000ed00

08002298 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	db0b      	blt.n	80022c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022aa:	79fb      	ldrb	r3, [r7, #7]
 80022ac:	f003 021f 	and.w	r2, r3, #31
 80022b0:	4907      	ldr	r1, [pc, #28]	@ (80022d0 <__NVIC_EnableIRQ+0x38>)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	095b      	lsrs	r3, r3, #5
 80022b8:	2001      	movs	r0, #1
 80022ba:	fa00 f202 	lsl.w	r2, r0, r2
 80022be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	e000e100 	.word	0xe000e100

080022d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	6039      	str	r1, [r7, #0]
 80022de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	db0a      	blt.n	80022fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	b2da      	uxtb	r2, r3
 80022ec:	490c      	ldr	r1, [pc, #48]	@ (8002320 <__NVIC_SetPriority+0x4c>)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	0112      	lsls	r2, r2, #4
 80022f4:	b2d2      	uxtb	r2, r2
 80022f6:	440b      	add	r3, r1
 80022f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022fc:	e00a      	b.n	8002314 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4908      	ldr	r1, [pc, #32]	@ (8002324 <__NVIC_SetPriority+0x50>)
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	3b04      	subs	r3, #4
 800230c:	0112      	lsls	r2, r2, #4
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	440b      	add	r3, r1
 8002312:	761a      	strb	r2, [r3, #24]
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr
 8002320:	e000e100 	.word	0xe000e100
 8002324:	e000ed00 	.word	0xe000ed00

08002328 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002328:	b480      	push	{r7}
 800232a:	b089      	sub	sp, #36	@ 0x24
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	f1c3 0307 	rsb	r3, r3, #7
 8002342:	2b04      	cmp	r3, #4
 8002344:	bf28      	it	cs
 8002346:	2304      	movcs	r3, #4
 8002348:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800234a:	69fb      	ldr	r3, [r7, #28]
 800234c:	3304      	adds	r3, #4
 800234e:	2b06      	cmp	r3, #6
 8002350:	d902      	bls.n	8002358 <NVIC_EncodePriority+0x30>
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	3b03      	subs	r3, #3
 8002356:	e000      	b.n	800235a <NVIC_EncodePriority+0x32>
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	43da      	mvns	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	401a      	ands	r2, r3
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002370:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	fa01 f303 	lsl.w	r3, r1, r3
 800237a:	43d9      	mvns	r1, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002380:	4313      	orrs	r3, r2
         );
}
 8002382:	4618      	mov	r0, r3
 8002384:	3724      	adds	r7, #36	@ 0x24
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
	...

08002390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3b01      	subs	r3, #1
 800239c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023a0:	d301      	bcc.n	80023a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023a2:	2301      	movs	r3, #1
 80023a4:	e00f      	b.n	80023c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a6:	4a0a      	ldr	r2, [pc, #40]	@ (80023d0 <SysTick_Config+0x40>)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ae:	210f      	movs	r1, #15
 80023b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80023b4:	f7ff ff8e 	bl	80022d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b8:	4b05      	ldr	r3, [pc, #20]	@ (80023d0 <SysTick_Config+0x40>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023be:	4b04      	ldr	r3, [pc, #16]	@ (80023d0 <SysTick_Config+0x40>)
 80023c0:	2207      	movs	r2, #7
 80023c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	e000e010 	.word	0xe000e010

080023d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff ff29 	bl	8002234 <__NVIC_SetPriorityGrouping>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b086      	sub	sp, #24
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	4603      	mov	r3, r0
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023fc:	f7ff ff3e 	bl	800227c <__NVIC_GetPriorityGrouping>
 8002400:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68b9      	ldr	r1, [r7, #8]
 8002406:	6978      	ldr	r0, [r7, #20]
 8002408:	f7ff ff8e 	bl	8002328 <NVIC_EncodePriority>
 800240c:	4602      	mov	r2, r0
 800240e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff5d 	bl	80022d4 <__NVIC_SetPriority>
}
 800241a:	bf00      	nop
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800242c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff31 	bl	8002298 <__NVIC_EnableIRQ>
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff ffa2 	bl	8002390 <SysTick_Config>
 800244c:	4603      	mov	r3, r0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002458:	b480      	push	{r7}
 800245a:	b089      	sub	sp, #36	@ 0x24
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002462:	2300      	movs	r3, #0
 8002464:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002466:	2300      	movs	r3, #0
 8002468:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800246e:	2300      	movs	r3, #0
 8002470:	61fb      	str	r3, [r7, #28]
 8002472:	e177      	b.n	8002764 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002474:	2201      	movs	r2, #1
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	4013      	ands	r3, r2
 8002486:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002488:	693a      	ldr	r2, [r7, #16]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	429a      	cmp	r2, r3
 800248e:	f040 8166 	bne.w	800275e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	2b01      	cmp	r3, #1
 800249c:	d005      	beq.n	80024aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d130      	bne.n	800250c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	005b      	lsls	r3, r3, #1
 80024b4:	2203      	movs	r2, #3
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43db      	mvns	r3, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4013      	ands	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68da      	ldr	r2, [r3, #12]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024e0:	2201      	movs	r2, #1
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	43db      	mvns	r3, r3
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4013      	ands	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 0201 	and.w	r2, r3, #1
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b03      	cmp	r3, #3
 8002516:	d017      	beq.n	8002548 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	2203      	movs	r2, #3
 8002524:	fa02 f303 	lsl.w	r3, r2, r3
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	005b      	lsls	r3, r3, #1
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	4313      	orrs	r3, r2
 8002540:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d123      	bne.n	800259c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	08da      	lsrs	r2, r3, #3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	3208      	adds	r2, #8
 800255c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	220f      	movs	r2, #15
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	691a      	ldr	r2, [r3, #16]
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	08da      	lsrs	r2, r3, #3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3208      	adds	r2, #8
 8002596:	69b9      	ldr	r1, [r7, #24]
 8002598:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0203 	and.w	r2, r3, #3
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 80c0 	beq.w	800275e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
 80025e2:	4b66      	ldr	r3, [pc, #408]	@ (800277c <HAL_GPIO_Init+0x324>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e6:	4a65      	ldr	r2, [pc, #404]	@ (800277c <HAL_GPIO_Init+0x324>)
 80025e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ee:	4b63      	ldr	r3, [pc, #396]	@ (800277c <HAL_GPIO_Init+0x324>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025fa:	4a61      	ldr	r2, [pc, #388]	@ (8002780 <HAL_GPIO_Init+0x328>)
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	089b      	lsrs	r3, r3, #2
 8002600:	3302      	adds	r3, #2
 8002602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002606:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	220f      	movs	r2, #15
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	69ba      	ldr	r2, [r7, #24]
 800261a:	4013      	ands	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a58      	ldr	r2, [pc, #352]	@ (8002784 <HAL_GPIO_Init+0x32c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d037      	beq.n	8002696 <HAL_GPIO_Init+0x23e>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a57      	ldr	r2, [pc, #348]	@ (8002788 <HAL_GPIO_Init+0x330>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d031      	beq.n	8002692 <HAL_GPIO_Init+0x23a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a56      	ldr	r2, [pc, #344]	@ (800278c <HAL_GPIO_Init+0x334>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d02b      	beq.n	800268e <HAL_GPIO_Init+0x236>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a55      	ldr	r2, [pc, #340]	@ (8002790 <HAL_GPIO_Init+0x338>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d025      	beq.n	800268a <HAL_GPIO_Init+0x232>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a54      	ldr	r2, [pc, #336]	@ (8002794 <HAL_GPIO_Init+0x33c>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d01f      	beq.n	8002686 <HAL_GPIO_Init+0x22e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a53      	ldr	r2, [pc, #332]	@ (8002798 <HAL_GPIO_Init+0x340>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d019      	beq.n	8002682 <HAL_GPIO_Init+0x22a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a52      	ldr	r2, [pc, #328]	@ (800279c <HAL_GPIO_Init+0x344>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d013      	beq.n	800267e <HAL_GPIO_Init+0x226>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a51      	ldr	r2, [pc, #324]	@ (80027a0 <HAL_GPIO_Init+0x348>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00d      	beq.n	800267a <HAL_GPIO_Init+0x222>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a50      	ldr	r2, [pc, #320]	@ (80027a4 <HAL_GPIO_Init+0x34c>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d007      	beq.n	8002676 <HAL_GPIO_Init+0x21e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4f      	ldr	r2, [pc, #316]	@ (80027a8 <HAL_GPIO_Init+0x350>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d101      	bne.n	8002672 <HAL_GPIO_Init+0x21a>
 800266e:	2309      	movs	r3, #9
 8002670:	e012      	b.n	8002698 <HAL_GPIO_Init+0x240>
 8002672:	230a      	movs	r3, #10
 8002674:	e010      	b.n	8002698 <HAL_GPIO_Init+0x240>
 8002676:	2308      	movs	r3, #8
 8002678:	e00e      	b.n	8002698 <HAL_GPIO_Init+0x240>
 800267a:	2307      	movs	r3, #7
 800267c:	e00c      	b.n	8002698 <HAL_GPIO_Init+0x240>
 800267e:	2306      	movs	r3, #6
 8002680:	e00a      	b.n	8002698 <HAL_GPIO_Init+0x240>
 8002682:	2305      	movs	r3, #5
 8002684:	e008      	b.n	8002698 <HAL_GPIO_Init+0x240>
 8002686:	2304      	movs	r3, #4
 8002688:	e006      	b.n	8002698 <HAL_GPIO_Init+0x240>
 800268a:	2303      	movs	r3, #3
 800268c:	e004      	b.n	8002698 <HAL_GPIO_Init+0x240>
 800268e:	2302      	movs	r3, #2
 8002690:	e002      	b.n	8002698 <HAL_GPIO_Init+0x240>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <HAL_GPIO_Init+0x240>
 8002696:	2300      	movs	r3, #0
 8002698:	69fa      	ldr	r2, [r7, #28]
 800269a:	f002 0203 	and.w	r2, r2, #3
 800269e:	0092      	lsls	r2, r2, #2
 80026a0:	4093      	lsls	r3, r2
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026a8:	4935      	ldr	r1, [pc, #212]	@ (8002780 <HAL_GPIO_Init+0x328>)
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	089b      	lsrs	r3, r3, #2
 80026ae:	3302      	adds	r3, #2
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026b6:	4b3d      	ldr	r3, [pc, #244]	@ (80027ac <HAL_GPIO_Init+0x354>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026da:	4a34      	ldr	r2, [pc, #208]	@ (80027ac <HAL_GPIO_Init+0x354>)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026e0:	4b32      	ldr	r3, [pc, #200]	@ (80027ac <HAL_GPIO_Init+0x354>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002704:	4a29      	ldr	r2, [pc, #164]	@ (80027ac <HAL_GPIO_Init+0x354>)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800270a:	4b28      	ldr	r3, [pc, #160]	@ (80027ac <HAL_GPIO_Init+0x354>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	43db      	mvns	r3, r3
 8002714:	69ba      	ldr	r2, [r7, #24]
 8002716:	4013      	ands	r3, r2
 8002718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d003      	beq.n	800272e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4313      	orrs	r3, r2
 800272c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800272e:	4a1f      	ldr	r2, [pc, #124]	@ (80027ac <HAL_GPIO_Init+0x354>)
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002734:	4b1d      	ldr	r3, [pc, #116]	@ (80027ac <HAL_GPIO_Init+0x354>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d003      	beq.n	8002758 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	4313      	orrs	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002758:	4a14      	ldr	r2, [pc, #80]	@ (80027ac <HAL_GPIO_Init+0x354>)
 800275a:	69bb      	ldr	r3, [r7, #24]
 800275c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3301      	adds	r3, #1
 8002762:	61fb      	str	r3, [r7, #28]
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	2b0f      	cmp	r3, #15
 8002768:	f67f ae84 	bls.w	8002474 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800276c:	bf00      	nop
 800276e:	bf00      	nop
 8002770:	3724      	adds	r7, #36	@ 0x24
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	40023800 	.word	0x40023800
 8002780:	40013800 	.word	0x40013800
 8002784:	40020000 	.word	0x40020000
 8002788:	40020400 	.word	0x40020400
 800278c:	40020800 	.word	0x40020800
 8002790:	40020c00 	.word	0x40020c00
 8002794:	40021000 	.word	0x40021000
 8002798:	40021400 	.word	0x40021400
 800279c:	40021800 	.word	0x40021800
 80027a0:	40021c00 	.word	0x40021c00
 80027a4:	40022000 	.word	0x40022000
 80027a8:	40022400 	.word	0x40022400
 80027ac:	40013c00 	.word	0x40013c00

080027b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	807b      	strh	r3, [r7, #2]
 80027bc:	4613      	mov	r3, r2
 80027be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027c0:	787b      	ldrb	r3, [r7, #1]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027c6:	887a      	ldrh	r2, [r7, #2]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027cc:	e003      	b.n	80027d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027ce:	887b      	ldrh	r3, [r7, #2]
 80027d0:	041a      	lsls	r2, r3, #16
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	619a      	str	r2, [r3, #24]
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
	...

080027e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80027ee:	4b08      	ldr	r3, [pc, #32]	@ (8002810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027f0:	695a      	ldr	r2, [r3, #20]
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d006      	beq.n	8002808 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80027fa:	4a05      	ldr	r2, [pc, #20]	@ (8002810 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80027fc:	88fb      	ldrh	r3, [r7, #6]
 80027fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002800:	88fb      	ldrh	r3, [r7, #6]
 8002802:	4618      	mov	r0, r3
 8002804:	f7ff fb38 	bl	8001e78 <HAL_GPIO_EXTI_Callback>
  }
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40013c00 	.word	0x40013c00

08002814 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e12b      	b.n	8002a7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d106      	bne.n	8002840 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f7ff f8fa 	bl	8001a34 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2224      	movs	r2, #36	@ 0x24
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0201 	bic.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002866:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002876:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002878:	f001 f8a2 	bl	80039c0 <HAL_RCC_GetPCLK1Freq>
 800287c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	4a81      	ldr	r2, [pc, #516]	@ (8002a88 <HAL_I2C_Init+0x274>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d807      	bhi.n	8002898 <HAL_I2C_Init+0x84>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4a80      	ldr	r2, [pc, #512]	@ (8002a8c <HAL_I2C_Init+0x278>)
 800288c:	4293      	cmp	r3, r2
 800288e:	bf94      	ite	ls
 8002890:	2301      	movls	r3, #1
 8002892:	2300      	movhi	r3, #0
 8002894:	b2db      	uxtb	r3, r3
 8002896:	e006      	b.n	80028a6 <HAL_I2C_Init+0x92>
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4a7d      	ldr	r2, [pc, #500]	@ (8002a90 <HAL_I2C_Init+0x27c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	bf94      	ite	ls
 80028a0:	2301      	movls	r3, #1
 80028a2:	2300      	movhi	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e0e7      	b.n	8002a7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	4a78      	ldr	r2, [pc, #480]	@ (8002a94 <HAL_I2C_Init+0x280>)
 80028b2:	fba2 2303 	umull	r2, r3, r2, r3
 80028b6:	0c9b      	lsrs	r3, r3, #18
 80028b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	4a6a      	ldr	r2, [pc, #424]	@ (8002a88 <HAL_I2C_Init+0x274>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d802      	bhi.n	80028e8 <HAL_I2C_Init+0xd4>
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	3301      	adds	r3, #1
 80028e6:	e009      	b.n	80028fc <HAL_I2C_Init+0xe8>
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028ee:	fb02 f303 	mul.w	r3, r2, r3
 80028f2:	4a69      	ldr	r2, [pc, #420]	@ (8002a98 <HAL_I2C_Init+0x284>)
 80028f4:	fba2 2303 	umull	r2, r3, r2, r3
 80028f8:	099b      	lsrs	r3, r3, #6
 80028fa:	3301      	adds	r3, #1
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	430b      	orrs	r3, r1
 8002902:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	69db      	ldr	r3, [r3, #28]
 800290a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800290e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	495c      	ldr	r1, [pc, #368]	@ (8002a88 <HAL_I2C_Init+0x274>)
 8002918:	428b      	cmp	r3, r1
 800291a:	d819      	bhi.n	8002950 <HAL_I2C_Init+0x13c>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	1e59      	subs	r1, r3, #1
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	fbb1 f3f3 	udiv	r3, r1, r3
 800292a:	1c59      	adds	r1, r3, #1
 800292c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002930:	400b      	ands	r3, r1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HAL_I2C_Init+0x138>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1e59      	subs	r1, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fbb1 f3f3 	udiv	r3, r1, r3
 8002944:	3301      	adds	r3, #1
 8002946:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800294a:	e051      	b.n	80029f0 <HAL_I2C_Init+0x1dc>
 800294c:	2304      	movs	r3, #4
 800294e:	e04f      	b.n	80029f0 <HAL_I2C_Init+0x1dc>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d111      	bne.n	800297c <HAL_I2C_Init+0x168>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	1e58      	subs	r0, r3, #1
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6859      	ldr	r1, [r3, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	440b      	add	r3, r1
 8002966:	fbb0 f3f3 	udiv	r3, r0, r3
 800296a:	3301      	adds	r3, #1
 800296c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002970:	2b00      	cmp	r3, #0
 8002972:	bf0c      	ite	eq
 8002974:	2301      	moveq	r3, #1
 8002976:	2300      	movne	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	e012      	b.n	80029a2 <HAL_I2C_Init+0x18e>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	1e58      	subs	r0, r3, #1
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6859      	ldr	r1, [r3, #4]
 8002984:	460b      	mov	r3, r1
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	0099      	lsls	r1, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002992:	3301      	adds	r3, #1
 8002994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002998:	2b00      	cmp	r3, #0
 800299a:	bf0c      	ite	eq
 800299c:	2301      	moveq	r3, #1
 800299e:	2300      	movne	r3, #0
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_I2C_Init+0x196>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e022      	b.n	80029f0 <HAL_I2C_Init+0x1dc>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d10e      	bne.n	80029d0 <HAL_I2C_Init+0x1bc>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	1e58      	subs	r0, r3, #1
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6859      	ldr	r1, [r3, #4]
 80029ba:	460b      	mov	r3, r1
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	440b      	add	r3, r1
 80029c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c4:	3301      	adds	r3, #1
 80029c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029ce:	e00f      	b.n	80029f0 <HAL_I2C_Init+0x1dc>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	1e58      	subs	r0, r3, #1
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6859      	ldr	r1, [r3, #4]
 80029d8:	460b      	mov	r3, r1
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	0099      	lsls	r1, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029e6:	3301      	adds	r3, #1
 80029e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	6809      	ldr	r1, [r1, #0]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	69da      	ldr	r2, [r3, #28]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	430a      	orrs	r2, r1
 8002a12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002a1e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	6911      	ldr	r1, [r2, #16]
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68d2      	ldr	r2, [r2, #12]
 8002a2a:	4311      	orrs	r1, r2
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	430b      	orrs	r3, r1
 8002a32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695a      	ldr	r2, [r3, #20]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	431a      	orrs	r2, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0201 	orr.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	000186a0 	.word	0x000186a0
 8002a8c:	001e847f 	.word	0x001e847f
 8002a90:	003d08ff 	.word	0x003d08ff
 8002a94:	431bde83 	.word	0x431bde83
 8002a98:	10624dd3 	.word	0x10624dd3

08002a9c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b20      	cmp	r3, #32
 8002ab0:	d129      	bne.n	8002b06 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2224      	movs	r2, #36	@ 0x24
 8002ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0201 	bic.w	r2, r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 0210 	bic.w	r2, r2, #16
 8002ad8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f042 0201 	orr.w	r2, r2, #1
 8002af8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2220      	movs	r2, #32
 8002afe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e000      	b.n	8002b08 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002b06:	2302      	movs	r3, #2
  }
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	d12a      	bne.n	8002b84 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2224      	movs	r2, #36	@ 0x24
 8002b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0201 	bic.w	r2, r2, #1
 8002b44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002b4e:	89fb      	ldrh	r3, [r7, #14]
 8002b50:	f023 030f 	bic.w	r3, r3, #15
 8002b54:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	89fb      	ldrh	r3, [r7, #14]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	89fa      	ldrh	r2, [r7, #14]
 8002b66:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0201 	orr.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002b80:	2300      	movs	r3, #0
 8002b82:	e000      	b.n	8002b86 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002b84:	2302      	movs	r3, #2
  }
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3714      	adds	r7, #20
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
	...

08002b94 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b084      	sub	sp, #16
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e0bf      	b.n	8002d26 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d106      	bne.n	8002bc0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7fe ffa4 	bl	8001b08 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699a      	ldr	r2, [r3, #24]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002bd6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	6999      	ldr	r1, [r3, #24]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002bec:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6899      	ldr	r1, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	4b4a      	ldr	r3, [pc, #296]	@ (8002d30 <HAL_LTDC_Init+0x19c>)
 8002c08:	400b      	ands	r3, r1
 8002c0a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	041b      	lsls	r3, r3, #16
 8002c12:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6899      	ldr	r1, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	431a      	orrs	r2, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68d9      	ldr	r1, [r3, #12]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4b3e      	ldr	r3, [pc, #248]	@ (8002d30 <HAL_LTDC_Init+0x19c>)
 8002c36:	400b      	ands	r3, r1
 8002c38:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	69db      	ldr	r3, [r3, #28]
 8002c3e:	041b      	lsls	r3, r3, #16
 8002c40:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68d9      	ldr	r1, [r3, #12]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6a1a      	ldr	r2, [r3, #32]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6919      	ldr	r1, [r3, #16]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	4b33      	ldr	r3, [pc, #204]	@ (8002d30 <HAL_LTDC_Init+0x19c>)
 8002c64:	400b      	ands	r3, r1
 8002c66:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	041b      	lsls	r3, r3, #16
 8002c6e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6919      	ldr	r1, [r3, #16]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6959      	ldr	r1, [r3, #20]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	4b27      	ldr	r3, [pc, #156]	@ (8002d30 <HAL_LTDC_Init+0x19c>)
 8002c92:	400b      	ands	r3, r1
 8002c94:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9a:	041b      	lsls	r3, r3, #16
 8002c9c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6959      	ldr	r1, [r3, #20]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002cba:	021b      	lsls	r3, r3, #8
 8002cbc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002cc4:	041b      	lsls	r3, r3, #16
 8002cc6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f042 0206 	orr.w	r2, r2, #6
 8002d02:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699a      	ldr	r2, [r3, #24]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f042 0201 	orr.w	r2, r2, #1
 8002d12:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	f000f800 	.word	0xf000f800

08002d34 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002d34:	b5b0      	push	{r4, r5, r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d101      	bne.n	8002d4e <HAL_LTDC_ConfigLayer+0x1a>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	e02c      	b.n	8002da8 <HAL_LTDC_ConfigLayer+0x74>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2134      	movs	r1, #52	@ 0x34
 8002d64:	fb01 f303 	mul.w	r3, r1, r3
 8002d68:	4413      	add	r3, r2
 8002d6a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	4614      	mov	r4, r2
 8002d72:	461d      	mov	r5, r3
 8002d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d80:	682b      	ldr	r3, [r5, #0]
 8002d82:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	68b9      	ldr	r1, [r7, #8]
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f811 	bl	8002db0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2201      	movs	r2, #1
 8002d94:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2201      	movs	r2, #1
 8002d9a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bdb0      	pop	{r4, r5, r7, pc}

08002db0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b089      	sub	sp, #36	@ 0x24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	0c1b      	lsrs	r3, r3, #16
 8002dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dcc:	4413      	add	r3, r2
 8002dce:	041b      	lsls	r3, r3, #16
 8002dd0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	01db      	lsls	r3, r3, #7
 8002ddc:	4413      	add	r3, r2
 8002dde:	3384      	adds	r3, #132	@ 0x84
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	6812      	ldr	r2, [r2, #0]
 8002de6:	4611      	mov	r1, r2
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	01d2      	lsls	r2, r2, #7
 8002dec:	440a      	add	r2, r1
 8002dee:	3284      	adds	r2, #132	@ 0x84
 8002df0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002df4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	0c1b      	lsrs	r3, r3, #16
 8002e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002e06:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002e08:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4619      	mov	r1, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	01db      	lsls	r3, r3, #7
 8002e14:	440b      	add	r3, r1
 8002e16:	3384      	adds	r3, #132	@ 0x84
 8002e18:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002e1e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e2e:	4413      	add	r3, r2
 8002e30:	041b      	lsls	r3, r3, #16
 8002e32:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	01db      	lsls	r3, r3, #7
 8002e3e:	4413      	add	r3, r2
 8002e40:	3384      	adds	r3, #132	@ 0x84
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	4611      	mov	r1, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	01d2      	lsls	r2, r2, #7
 8002e4e:	440a      	add	r2, r1
 8002e50:	3284      	adds	r2, #132	@ 0x84
 8002e52:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002e56:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e66:	4413      	add	r3, r2
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4619      	mov	r1, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	01db      	lsls	r3, r3, #7
 8002e74:	440b      	add	r3, r1
 8002e76:	3384      	adds	r3, #132	@ 0x84
 8002e78:	4619      	mov	r1, r3
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	461a      	mov	r2, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	01db      	lsls	r3, r3, #7
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3384      	adds	r3, #132	@ 0x84
 8002e8e:	691b      	ldr	r3, [r3, #16]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	4611      	mov	r1, r2
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	01d2      	lsls	r2, r2, #7
 8002e9a:	440a      	add	r2, r1
 8002e9c:	3284      	adds	r2, #132	@ 0x84
 8002e9e:	f023 0307 	bic.w	r3, r3, #7
 8002ea2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	01db      	lsls	r3, r3, #7
 8002eae:	4413      	add	r3, r2
 8002eb0:	3384      	adds	r3, #132	@ 0x84
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	691b      	ldr	r3, [r3, #16]
 8002eb8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002ec0:	021b      	lsls	r3, r3, #8
 8002ec2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002eca:	041b      	lsls	r3, r3, #16
 8002ecc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	061b      	lsls	r3, r3, #24
 8002ed4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	461a      	mov	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	01db      	lsls	r3, r3, #7
 8002ee0:	4413      	add	r3, r2
 8002ee2:	3384      	adds	r3, #132	@ 0x84
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	01db      	lsls	r3, r3, #7
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3384      	adds	r3, #132	@ 0x84
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f00:	461a      	mov	r2, r3
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	431a      	orrs	r2, r3
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4619      	mov	r1, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	01db      	lsls	r3, r3, #7
 8002f14:	440b      	add	r3, r1
 8002f16:	3384      	adds	r3, #132	@ 0x84
 8002f18:	4619      	mov	r1, r3
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	461a      	mov	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	01db      	lsls	r3, r3, #7
 8002f2a:	4413      	add	r3, r2
 8002f2c:	3384      	adds	r3, #132	@ 0x84
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	4611      	mov	r1, r2
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	01d2      	lsls	r2, r2, #7
 8002f3a:	440a      	add	r2, r1
 8002f3c:	3284      	adds	r2, #132	@ 0x84
 8002f3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002f42:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	01db      	lsls	r3, r3, #7
 8002f4e:	4413      	add	r3, r2
 8002f50:	3384      	adds	r3, #132	@ 0x84
 8002f52:	461a      	mov	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	01db      	lsls	r3, r3, #7
 8002f64:	4413      	add	r3, r2
 8002f66:	3384      	adds	r3, #132	@ 0x84
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	4611      	mov	r1, r2
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	01d2      	lsls	r2, r2, #7
 8002f74:	440a      	add	r2, r1
 8002f76:	3284      	adds	r2, #132	@ 0x84
 8002f78:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002f7c:	f023 0307 	bic.w	r3, r3, #7
 8002f80:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	69da      	ldr	r2, [r3, #28]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
 8002f8a:	68f9      	ldr	r1, [r7, #12]
 8002f8c:	6809      	ldr	r1, [r1, #0]
 8002f8e:	4608      	mov	r0, r1
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	01c9      	lsls	r1, r1, #7
 8002f94:	4401      	add	r1, r0
 8002f96:	3184      	adds	r1, #132	@ 0x84
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	01db      	lsls	r3, r3, #7
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3384      	adds	r3, #132	@ 0x84
 8002faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	01db      	lsls	r3, r3, #7
 8002fb6:	4413      	add	r3, r2
 8002fb8:	3384      	adds	r3, #132	@ 0x84
 8002fba:	461a      	mov	r2, r3
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	01db      	lsls	r3, r3, #7
 8002fca:	4413      	add	r3, r2
 8002fcc:	3384      	adds	r3, #132	@ 0x84
 8002fce:	461a      	mov	r2, r3
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd4:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d102      	bne.n	8002fe4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8002fde:	2304      	movs	r3, #4
 8002fe0:	61fb      	str	r3, [r7, #28]
 8002fe2:	e01b      	b.n	800301c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d102      	bne.n	8002ff2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8002fec:	2303      	movs	r3, #3
 8002fee:	61fb      	str	r3, [r7, #28]
 8002ff0:	e014      	b.n	800301c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	2b04      	cmp	r3, #4
 8002ff8:	d00b      	beq.n	8003012 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d007      	beq.n	8003012 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003006:	2b03      	cmp	r3, #3
 8003008:	d003      	beq.n	8003012 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800300e:	2b07      	cmp	r3, #7
 8003010:	d102      	bne.n	8003018 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003012:	2302      	movs	r3, #2
 8003014:	61fb      	str	r3, [r7, #28]
 8003016:	e001      	b.n	800301c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003018:	2301      	movs	r3, #1
 800301a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	461a      	mov	r2, r3
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	01db      	lsls	r3, r3, #7
 8003026:	4413      	add	r3, r2
 8003028:	3384      	adds	r3, #132	@ 0x84
 800302a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	6812      	ldr	r2, [r2, #0]
 8003030:	4611      	mov	r1, r2
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	01d2      	lsls	r2, r2, #7
 8003036:	440a      	add	r2, r1
 8003038:	3284      	adds	r2, #132	@ 0x84
 800303a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800303e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003044:	69fa      	ldr	r2, [r7, #28]
 8003046:	fb02 f303 	mul.w	r3, r2, r3
 800304a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	6859      	ldr	r1, [r3, #4]
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	1acb      	subs	r3, r1, r3
 8003056:	69f9      	ldr	r1, [r7, #28]
 8003058:	fb01 f303 	mul.w	r3, r1, r3
 800305c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800305e:	68f9      	ldr	r1, [r7, #12]
 8003060:	6809      	ldr	r1, [r1, #0]
 8003062:	4608      	mov	r0, r1
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	01c9      	lsls	r1, r1, #7
 8003068:	4401      	add	r1, r0
 800306a:	3184      	adds	r1, #132	@ 0x84
 800306c:	4313      	orrs	r3, r2
 800306e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	461a      	mov	r2, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	01db      	lsls	r3, r3, #7
 800307a:	4413      	add	r3, r2
 800307c:	3384      	adds	r3, #132	@ 0x84
 800307e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003080:	68fa      	ldr	r2, [r7, #12]
 8003082:	6812      	ldr	r2, [r2, #0]
 8003084:	4611      	mov	r1, r2
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	01d2      	lsls	r2, r2, #7
 800308a:	440a      	add	r2, r1
 800308c:	3284      	adds	r2, #132	@ 0x84
 800308e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003092:	f023 0307 	bic.w	r3, r3, #7
 8003096:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	01db      	lsls	r3, r3, #7
 80030a2:	4413      	add	r3, r2
 80030a4:	3384      	adds	r3, #132	@ 0x84
 80030a6:	461a      	mov	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ac:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	461a      	mov	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	01db      	lsls	r3, r3, #7
 80030b8:	4413      	add	r3, r2
 80030ba:	3384      	adds	r3, #132	@ 0x84
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	6812      	ldr	r2, [r2, #0]
 80030c2:	4611      	mov	r1, r2
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	01d2      	lsls	r2, r2, #7
 80030c8:	440a      	add	r2, r1
 80030ca:	3284      	adds	r2, #132	@ 0x84
 80030cc:	f043 0301 	orr.w	r3, r3, #1
 80030d0:	6013      	str	r3, [r2, #0]
}
 80030d2:	bf00      	nop
 80030d4:	3724      	adds	r7, #36	@ 0x24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
	...

080030e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b086      	sub	sp, #24
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e267      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d075      	beq.n	80031ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80030fe:	4b88      	ldr	r3, [pc, #544]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b04      	cmp	r3, #4
 8003108:	d00c      	beq.n	8003124 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800310a:	4b85      	ldr	r3, [pc, #532]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003112:	2b08      	cmp	r3, #8
 8003114:	d112      	bne.n	800313c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003116:	4b82      	ldr	r3, [pc, #520]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800311e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003122:	d10b      	bne.n	800313c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003124:	4b7e      	ldr	r3, [pc, #504]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312c:	2b00      	cmp	r3, #0
 800312e:	d05b      	beq.n	80031e8 <HAL_RCC_OscConfig+0x108>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d157      	bne.n	80031e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e242      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003144:	d106      	bne.n	8003154 <HAL_RCC_OscConfig+0x74>
 8003146:	4b76      	ldr	r3, [pc, #472]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a75      	ldr	r2, [pc, #468]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 800314c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	e01d      	b.n	8003190 <HAL_RCC_OscConfig+0xb0>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800315c:	d10c      	bne.n	8003178 <HAL_RCC_OscConfig+0x98>
 800315e:	4b70      	ldr	r3, [pc, #448]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a6f      	ldr	r2, [pc, #444]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 8003164:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	4b6d      	ldr	r3, [pc, #436]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a6c      	ldr	r2, [pc, #432]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 8003170:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	e00b      	b.n	8003190 <HAL_RCC_OscConfig+0xb0>
 8003178:	4b69      	ldr	r3, [pc, #420]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a68      	ldr	r2, [pc, #416]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 800317e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003182:	6013      	str	r3, [r2, #0]
 8003184:	4b66      	ldr	r3, [pc, #408]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a65      	ldr	r2, [pc, #404]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 800318a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800318e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d013      	beq.n	80031c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7ff f840 	bl	800221c <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031a0:	f7ff f83c 	bl	800221c <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b64      	cmp	r3, #100	@ 0x64
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e207      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031b2:	4b5b      	ldr	r3, [pc, #364]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0f0      	beq.n	80031a0 <HAL_RCC_OscConfig+0xc0>
 80031be:	e014      	b.n	80031ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c0:	f7ff f82c 	bl	800221c <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c8:	f7ff f828 	bl	800221c <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b64      	cmp	r3, #100	@ 0x64
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e1f3      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031da:	4b51      	ldr	r3, [pc, #324]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f0      	bne.n	80031c8 <HAL_RCC_OscConfig+0xe8>
 80031e6:	e000      	b.n	80031ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d063      	beq.n	80032be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80031f6:	4b4a      	ldr	r3, [pc, #296]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f003 030c 	and.w	r3, r3, #12
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00b      	beq.n	800321a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003202:	4b47      	ldr	r3, [pc, #284]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800320a:	2b08      	cmp	r3, #8
 800320c:	d11c      	bne.n	8003248 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800320e:	4b44      	ldr	r3, [pc, #272]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d116      	bne.n	8003248 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800321a:	4b41      	ldr	r3, [pc, #260]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_RCC_OscConfig+0x152>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d001      	beq.n	8003232 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e1c7      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003232:	4b3b      	ldr	r3, [pc, #236]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4937      	ldr	r1, [pc, #220]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 8003242:	4313      	orrs	r3, r2
 8003244:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003246:	e03a      	b.n	80032be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d020      	beq.n	8003292 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003250:	4b34      	ldr	r3, [pc, #208]	@ (8003324 <HAL_RCC_OscConfig+0x244>)
 8003252:	2201      	movs	r2, #1
 8003254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003256:	f7fe ffe1 	bl	800221c <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325c:	e008      	b.n	8003270 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800325e:	f7fe ffdd 	bl	800221c <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d901      	bls.n	8003270 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e1a8      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003270:	4b2b      	ldr	r3, [pc, #172]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0f0      	beq.n	800325e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800327c:	4b28      	ldr	r3, [pc, #160]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691b      	ldr	r3, [r3, #16]
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	4925      	ldr	r1, [pc, #148]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 800328c:	4313      	orrs	r3, r2
 800328e:	600b      	str	r3, [r1, #0]
 8003290:	e015      	b.n	80032be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003292:	4b24      	ldr	r3, [pc, #144]	@ (8003324 <HAL_RCC_OscConfig+0x244>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003298:	f7fe ffc0 	bl	800221c <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032a0:	f7fe ffbc 	bl	800221c <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e187      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1f0      	bne.n	80032a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d036      	beq.n	8003338 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	695b      	ldr	r3, [r3, #20]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d016      	beq.n	8003300 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032d2:	4b15      	ldr	r3, [pc, #84]	@ (8003328 <HAL_RCC_OscConfig+0x248>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032d8:	f7fe ffa0 	bl	800221c <HAL_GetTick>
 80032dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032de:	e008      	b.n	80032f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032e0:	f7fe ff9c 	bl	800221c <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e167      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003320 <HAL_RCC_OscConfig+0x240>)
 80032f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0f0      	beq.n	80032e0 <HAL_RCC_OscConfig+0x200>
 80032fe:	e01b      	b.n	8003338 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003300:	4b09      	ldr	r3, [pc, #36]	@ (8003328 <HAL_RCC_OscConfig+0x248>)
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003306:	f7fe ff89 	bl	800221c <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800330c:	e00e      	b.n	800332c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800330e:	f7fe ff85 	bl	800221c <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d907      	bls.n	800332c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e150      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
 8003320:	40023800 	.word	0x40023800
 8003324:	42470000 	.word	0x42470000
 8003328:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800332c:	4b88      	ldr	r3, [pc, #544]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 800332e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d1ea      	bne.n	800330e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	2b00      	cmp	r3, #0
 8003342:	f000 8097 	beq.w	8003474 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003346:	2300      	movs	r3, #0
 8003348:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800334a:	4b81      	ldr	r3, [pc, #516]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10f      	bne.n	8003376 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	4b7d      	ldr	r3, [pc, #500]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335e:	4a7c      	ldr	r2, [pc, #496]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 8003360:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003364:	6413      	str	r3, [r2, #64]	@ 0x40
 8003366:	4b7a      	ldr	r3, [pc, #488]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800336e:	60bb      	str	r3, [r7, #8]
 8003370:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003372:	2301      	movs	r3, #1
 8003374:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003376:	4b77      	ldr	r3, [pc, #476]	@ (8003554 <HAL_RCC_OscConfig+0x474>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800337e:	2b00      	cmp	r3, #0
 8003380:	d118      	bne.n	80033b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003382:	4b74      	ldr	r3, [pc, #464]	@ (8003554 <HAL_RCC_OscConfig+0x474>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a73      	ldr	r2, [pc, #460]	@ (8003554 <HAL_RCC_OscConfig+0x474>)
 8003388:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800338c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800338e:	f7fe ff45 	bl	800221c <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003396:	f7fe ff41 	bl	800221c <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e10c      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003554 <HAL_RCC_OscConfig+0x474>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0f0      	beq.n	8003396 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	d106      	bne.n	80033ca <HAL_RCC_OscConfig+0x2ea>
 80033bc:	4b64      	ldr	r3, [pc, #400]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c0:	4a63      	ldr	r2, [pc, #396]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 80033c2:	f043 0301 	orr.w	r3, r3, #1
 80033c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80033c8:	e01c      	b.n	8003404 <HAL_RCC_OscConfig+0x324>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b05      	cmp	r3, #5
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0x30c>
 80033d2:	4b5f      	ldr	r3, [pc, #380]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 80033d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d6:	4a5e      	ldr	r2, [pc, #376]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 80033d8:	f043 0304 	orr.w	r3, r3, #4
 80033dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80033de:	4b5c      	ldr	r3, [pc, #368]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 80033e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033e2:	4a5b      	ldr	r2, [pc, #364]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ea:	e00b      	b.n	8003404 <HAL_RCC_OscConfig+0x324>
 80033ec:	4b58      	ldr	r3, [pc, #352]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 80033ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f0:	4a57      	ldr	r2, [pc, #348]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 80033f2:	f023 0301 	bic.w	r3, r3, #1
 80033f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80033f8:	4b55      	ldr	r3, [pc, #340]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 80033fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033fc:	4a54      	ldr	r2, [pc, #336]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 80033fe:	f023 0304 	bic.w	r3, r3, #4
 8003402:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d015      	beq.n	8003438 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340c:	f7fe ff06 	bl	800221c <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003412:	e00a      	b.n	800342a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003414:	f7fe ff02 	bl	800221c <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003422:	4293      	cmp	r3, r2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e0cb      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800342a:	4b49      	ldr	r3, [pc, #292]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 800342c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0ee      	beq.n	8003414 <HAL_RCC_OscConfig+0x334>
 8003436:	e014      	b.n	8003462 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003438:	f7fe fef0 	bl	800221c <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800343e:	e00a      	b.n	8003456 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003440:	f7fe feec 	bl	800221c <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800344e:	4293      	cmp	r3, r2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e0b5      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003456:	4b3e      	ldr	r3, [pc, #248]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1ee      	bne.n	8003440 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003462:	7dfb      	ldrb	r3, [r7, #23]
 8003464:	2b01      	cmp	r3, #1
 8003466:	d105      	bne.n	8003474 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003468:	4b39      	ldr	r3, [pc, #228]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 800346a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346c:	4a38      	ldr	r2, [pc, #224]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 800346e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003472:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699b      	ldr	r3, [r3, #24]
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80a1 	beq.w	80035c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800347e:	4b34      	ldr	r3, [pc, #208]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 030c 	and.w	r3, r3, #12
 8003486:	2b08      	cmp	r3, #8
 8003488:	d05c      	beq.n	8003544 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	699b      	ldr	r3, [r3, #24]
 800348e:	2b02      	cmp	r3, #2
 8003490:	d141      	bne.n	8003516 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003492:	4b31      	ldr	r3, [pc, #196]	@ (8003558 <HAL_RCC_OscConfig+0x478>)
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003498:	f7fe fec0 	bl	800221c <HAL_GetTick>
 800349c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800349e:	e008      	b.n	80034b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034a0:	f7fe febc 	bl	800221c <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d901      	bls.n	80034b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034ae:	2303      	movs	r3, #3
 80034b0:	e087      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b2:	4b27      	ldr	r3, [pc, #156]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f0      	bne.n	80034a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69da      	ldr	r2, [r3, #28]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	431a      	orrs	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034cc:	019b      	lsls	r3, r3, #6
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034d4:	085b      	lsrs	r3, r3, #1
 80034d6:	3b01      	subs	r3, #1
 80034d8:	041b      	lsls	r3, r3, #16
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e0:	061b      	lsls	r3, r3, #24
 80034e2:	491b      	ldr	r1, [pc, #108]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003558 <HAL_RCC_OscConfig+0x478>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ee:	f7fe fe95 	bl	800221c <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f6:	f7fe fe91 	bl	800221c <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e05c      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003508:	4b11      	ldr	r3, [pc, #68]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x416>
 8003514:	e054      	b.n	80035c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003516:	4b10      	ldr	r3, [pc, #64]	@ (8003558 <HAL_RCC_OscConfig+0x478>)
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351c:	f7fe fe7e 	bl	800221c <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003524:	f7fe fe7a 	bl	800221c <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e045      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003536:	4b06      	ldr	r3, [pc, #24]	@ (8003550 <HAL_RCC_OscConfig+0x470>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f0      	bne.n	8003524 <HAL_RCC_OscConfig+0x444>
 8003542:	e03d      	b.n	80035c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d107      	bne.n	800355c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e038      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
 8003550:	40023800 	.word	0x40023800
 8003554:	40007000 	.word	0x40007000
 8003558:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800355c:	4b1b      	ldr	r3, [pc, #108]	@ (80035cc <HAL_RCC_OscConfig+0x4ec>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	2b01      	cmp	r3, #1
 8003568:	d028      	beq.n	80035bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003574:	429a      	cmp	r2, r3
 8003576:	d121      	bne.n	80035bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003582:	429a      	cmp	r2, r3
 8003584:	d11a      	bne.n	80035bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800358c:	4013      	ands	r3, r2
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003592:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003594:	4293      	cmp	r3, r2
 8003596:	d111      	bne.n	80035bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a2:	085b      	lsrs	r3, r3, #1
 80035a4:	3b01      	subs	r3, #1
 80035a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d107      	bne.n	80035bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d001      	beq.n	80035c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e000      	b.n	80035c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	40023800 	.word	0x40023800

080035d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d101      	bne.n	80035e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e0cc      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035e4:	4b68      	ldr	r3, [pc, #416]	@ (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d90c      	bls.n	800360c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b65      	ldr	r3, [pc, #404]	@ (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	4b63      	ldr	r3, [pc, #396]	@ (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 030f 	and.w	r3, r3, #15
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0b8      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d020      	beq.n	800365a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b00      	cmp	r3, #0
 8003622:	d005      	beq.n	8003630 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003624:	4b59      	ldr	r3, [pc, #356]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	4a58      	ldr	r2, [pc, #352]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800362a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800362e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0308 	and.w	r3, r3, #8
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800363c:	4b53      	ldr	r3, [pc, #332]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	4a52      	ldr	r2, [pc, #328]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003646:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003648:	4b50      	ldr	r3, [pc, #320]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	494d      	ldr	r1, [pc, #308]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	4313      	orrs	r3, r2
 8003658:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d044      	beq.n	80036f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d107      	bne.n	800367e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800366e:	4b47      	ldr	r3, [pc, #284]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d119      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e07f      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d003      	beq.n	800368e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800368a:	2b03      	cmp	r3, #3
 800368c:	d107      	bne.n	800369e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368e:	4b3f      	ldr	r3, [pc, #252]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d109      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e06f      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800369e:	4b3b      	ldr	r3, [pc, #236]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e067      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ae:	4b37      	ldr	r3, [pc, #220]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f023 0203 	bic.w	r2, r3, #3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4934      	ldr	r1, [pc, #208]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036c0:	f7fe fdac 	bl	800221c <HAL_GetTick>
 80036c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036c6:	e00a      	b.n	80036de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036c8:	f7fe fda8 	bl	800221c <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d901      	bls.n	80036de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e04f      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036de:	4b2b      	ldr	r3, [pc, #172]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 020c 	and.w	r2, r3, #12
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d1eb      	bne.n	80036c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036f0:	4b25      	ldr	r3, [pc, #148]	@ (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 030f 	and.w	r3, r3, #15
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d20c      	bcs.n	8003718 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fe:	4b22      	ldr	r3, [pc, #136]	@ (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	b2d2      	uxtb	r2, r2
 8003704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003706:	4b20      	ldr	r3, [pc, #128]	@ (8003788 <HAL_RCC_ClockConfig+0x1b8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	683a      	ldr	r2, [r7, #0]
 8003710:	429a      	cmp	r2, r3
 8003712:	d001      	beq.n	8003718 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e032      	b.n	800377e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003724:	4b19      	ldr	r3, [pc, #100]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4916      	ldr	r1, [pc, #88]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	4313      	orrs	r3, r2
 8003734:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0308 	and.w	r3, r3, #8
 800373e:	2b00      	cmp	r3, #0
 8003740:	d009      	beq.n	8003756 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003742:	4b12      	ldr	r3, [pc, #72]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	490e      	ldr	r1, [pc, #56]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	4313      	orrs	r3, r2
 8003754:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003756:	f000 f821 	bl	800379c <HAL_RCC_GetSysClockFreq>
 800375a:	4602      	mov	r2, r0
 800375c:	4b0b      	ldr	r3, [pc, #44]	@ (800378c <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	091b      	lsrs	r3, r3, #4
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	490a      	ldr	r1, [pc, #40]	@ (8003790 <HAL_RCC_ClockConfig+0x1c0>)
 8003768:	5ccb      	ldrb	r3, [r1, r3]
 800376a:	fa22 f303 	lsr.w	r3, r2, r3
 800376e:	4a09      	ldr	r2, [pc, #36]	@ (8003794 <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003772:	4b09      	ldr	r3, [pc, #36]	@ (8003798 <HAL_RCC_ClockConfig+0x1c8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4618      	mov	r0, r3
 8003778:	f7fe fd0c 	bl	8002194 <HAL_InitTick>

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3710      	adds	r7, #16
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40023c00 	.word	0x40023c00
 800378c:	40023800 	.word	0x40023800
 8003790:	08005ce8 	.word	0x08005ce8
 8003794:	20000000 	.word	0x20000000
 8003798:	20000004 	.word	0x20000004

0800379c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800379c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037a0:	b094      	sub	sp, #80	@ 0x50
 80037a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80037ac:	2300      	movs	r3, #0
 80037ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80037b0:	2300      	movs	r3, #0
 80037b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037b4:	4b79      	ldr	r3, [pc, #484]	@ (800399c <HAL_RCC_GetSysClockFreq+0x200>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 030c 	and.w	r3, r3, #12
 80037bc:	2b08      	cmp	r3, #8
 80037be:	d00d      	beq.n	80037dc <HAL_RCC_GetSysClockFreq+0x40>
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	f200 80e1 	bhi.w	8003988 <HAL_RCC_GetSysClockFreq+0x1ec>
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d002      	beq.n	80037d0 <HAL_RCC_GetSysClockFreq+0x34>
 80037ca:	2b04      	cmp	r3, #4
 80037cc:	d003      	beq.n	80037d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80037ce:	e0db      	b.n	8003988 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037d0:	4b73      	ldr	r3, [pc, #460]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80037d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037d4:	e0db      	b.n	800398e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037d6:	4b73      	ldr	r3, [pc, #460]	@ (80039a4 <HAL_RCC_GetSysClockFreq+0x208>)
 80037d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037da:	e0d8      	b.n	800398e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037dc:	4b6f      	ldr	r3, [pc, #444]	@ (800399c <HAL_RCC_GetSysClockFreq+0x200>)
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80037e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037e6:	4b6d      	ldr	r3, [pc, #436]	@ (800399c <HAL_RCC_GetSysClockFreq+0x200>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d063      	beq.n	80038ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f2:	4b6a      	ldr	r3, [pc, #424]	@ (800399c <HAL_RCC_GetSysClockFreq+0x200>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	099b      	lsrs	r3, r3, #6
 80037f8:	2200      	movs	r2, #0
 80037fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80037fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80037fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003800:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003804:	633b      	str	r3, [r7, #48]	@ 0x30
 8003806:	2300      	movs	r3, #0
 8003808:	637b      	str	r3, [r7, #52]	@ 0x34
 800380a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800380e:	4622      	mov	r2, r4
 8003810:	462b      	mov	r3, r5
 8003812:	f04f 0000 	mov.w	r0, #0
 8003816:	f04f 0100 	mov.w	r1, #0
 800381a:	0159      	lsls	r1, r3, #5
 800381c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003820:	0150      	lsls	r0, r2, #5
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	4621      	mov	r1, r4
 8003828:	1a51      	subs	r1, r2, r1
 800382a:	6139      	str	r1, [r7, #16]
 800382c:	4629      	mov	r1, r5
 800382e:	eb63 0301 	sbc.w	r3, r3, r1
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	f04f 0200 	mov.w	r2, #0
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003840:	4659      	mov	r1, fp
 8003842:	018b      	lsls	r3, r1, #6
 8003844:	4651      	mov	r1, sl
 8003846:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800384a:	4651      	mov	r1, sl
 800384c:	018a      	lsls	r2, r1, #6
 800384e:	4651      	mov	r1, sl
 8003850:	ebb2 0801 	subs.w	r8, r2, r1
 8003854:	4659      	mov	r1, fp
 8003856:	eb63 0901 	sbc.w	r9, r3, r1
 800385a:	f04f 0200 	mov.w	r2, #0
 800385e:	f04f 0300 	mov.w	r3, #0
 8003862:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003866:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800386a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800386e:	4690      	mov	r8, r2
 8003870:	4699      	mov	r9, r3
 8003872:	4623      	mov	r3, r4
 8003874:	eb18 0303 	adds.w	r3, r8, r3
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	462b      	mov	r3, r5
 800387c:	eb49 0303 	adc.w	r3, r9, r3
 8003880:	60fb      	str	r3, [r7, #12]
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800388e:	4629      	mov	r1, r5
 8003890:	024b      	lsls	r3, r1, #9
 8003892:	4621      	mov	r1, r4
 8003894:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003898:	4621      	mov	r1, r4
 800389a:	024a      	lsls	r2, r1, #9
 800389c:	4610      	mov	r0, r2
 800389e:	4619      	mov	r1, r3
 80038a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038a2:	2200      	movs	r2, #0
 80038a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80038a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80038ac:	f7fc fcf8 	bl	80002a0 <__aeabi_uldivmod>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4613      	mov	r3, r2
 80038b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038b8:	e058      	b.n	800396c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ba:	4b38      	ldr	r3, [pc, #224]	@ (800399c <HAL_RCC_GetSysClockFreq+0x200>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	099b      	lsrs	r3, r3, #6
 80038c0:	2200      	movs	r2, #0
 80038c2:	4618      	mov	r0, r3
 80038c4:	4611      	mov	r1, r2
 80038c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80038ca:	623b      	str	r3, [r7, #32]
 80038cc:	2300      	movs	r3, #0
 80038ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80038d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80038d4:	4642      	mov	r2, r8
 80038d6:	464b      	mov	r3, r9
 80038d8:	f04f 0000 	mov.w	r0, #0
 80038dc:	f04f 0100 	mov.w	r1, #0
 80038e0:	0159      	lsls	r1, r3, #5
 80038e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038e6:	0150      	lsls	r0, r2, #5
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4641      	mov	r1, r8
 80038ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80038f2:	4649      	mov	r1, r9
 80038f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80038f8:	f04f 0200 	mov.w	r2, #0
 80038fc:	f04f 0300 	mov.w	r3, #0
 8003900:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003904:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003908:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800390c:	ebb2 040a 	subs.w	r4, r2, sl
 8003910:	eb63 050b 	sbc.w	r5, r3, fp
 8003914:	f04f 0200 	mov.w	r2, #0
 8003918:	f04f 0300 	mov.w	r3, #0
 800391c:	00eb      	lsls	r3, r5, #3
 800391e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003922:	00e2      	lsls	r2, r4, #3
 8003924:	4614      	mov	r4, r2
 8003926:	461d      	mov	r5, r3
 8003928:	4643      	mov	r3, r8
 800392a:	18e3      	adds	r3, r4, r3
 800392c:	603b      	str	r3, [r7, #0]
 800392e:	464b      	mov	r3, r9
 8003930:	eb45 0303 	adc.w	r3, r5, r3
 8003934:	607b      	str	r3, [r7, #4]
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003942:	4629      	mov	r1, r5
 8003944:	028b      	lsls	r3, r1, #10
 8003946:	4621      	mov	r1, r4
 8003948:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800394c:	4621      	mov	r1, r4
 800394e:	028a      	lsls	r2, r1, #10
 8003950:	4610      	mov	r0, r2
 8003952:	4619      	mov	r1, r3
 8003954:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003956:	2200      	movs	r2, #0
 8003958:	61bb      	str	r3, [r7, #24]
 800395a:	61fa      	str	r2, [r7, #28]
 800395c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003960:	f7fc fc9e 	bl	80002a0 <__aeabi_uldivmod>
 8003964:	4602      	mov	r2, r0
 8003966:	460b      	mov	r3, r1
 8003968:	4613      	mov	r3, r2
 800396a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800396c:	4b0b      	ldr	r3, [pc, #44]	@ (800399c <HAL_RCC_GetSysClockFreq+0x200>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	0c1b      	lsrs	r3, r3, #16
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	3301      	adds	r3, #1
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800397c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800397e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003980:	fbb2 f3f3 	udiv	r3, r2, r3
 8003984:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003986:	e002      	b.n	800398e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003988:	4b05      	ldr	r3, [pc, #20]	@ (80039a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800398a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800398c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800398e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003990:	4618      	mov	r0, r3
 8003992:	3750      	adds	r7, #80	@ 0x50
 8003994:	46bd      	mov	sp, r7
 8003996:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800399a:	bf00      	nop
 800399c:	40023800 	.word	0x40023800
 80039a0:	00f42400 	.word	0x00f42400
 80039a4:	007a1200 	.word	0x007a1200

080039a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039ac:	4b03      	ldr	r3, [pc, #12]	@ (80039bc <HAL_RCC_GetHCLKFreq+0x14>)
 80039ae:	681b      	ldr	r3, [r3, #0]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	20000000 	.word	0x20000000

080039c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039c4:	f7ff fff0 	bl	80039a8 <HAL_RCC_GetHCLKFreq>
 80039c8:	4602      	mov	r2, r0
 80039ca:	4b05      	ldr	r3, [pc, #20]	@ (80039e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	0a9b      	lsrs	r3, r3, #10
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	4903      	ldr	r1, [pc, #12]	@ (80039e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039d6:	5ccb      	ldrb	r3, [r1, r3]
 80039d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039dc:	4618      	mov	r0, r3
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40023800 	.word	0x40023800
 80039e4:	08005cf8 	.word	0x08005cf8

080039e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10b      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d105      	bne.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d075      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a1c:	4b91      	ldr	r3, [pc, #580]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003a22:	f7fe fbfb 	bl	800221c <HAL_GetTick>
 8003a26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a28:	e008      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a2a:	f7fe fbf7 	bl	800221c <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e189      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a3c:	4b8a      	ldr	r3, [pc, #552]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1f0      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d009      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	019a      	lsls	r2, r3, #6
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	071b      	lsls	r3, r3, #28
 8003a60:	4981      	ldr	r1, [pc, #516]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d01f      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a74:	4b7c      	ldr	r3, [pc, #496]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a7a:	0f1b      	lsrs	r3, r3, #28
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	019a      	lsls	r2, r3, #6
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	061b      	lsls	r3, r3, #24
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	071b      	lsls	r3, r3, #28
 8003a94:	4974      	ldr	r1, [pc, #464]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003a9c:	4b72      	ldr	r3, [pc, #456]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003aa2:	f023 021f 	bic.w	r2, r3, #31
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	69db      	ldr	r3, [r3, #28]
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	496e      	ldr	r1, [pc, #440]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00d      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	019a      	lsls	r2, r3, #6
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	061b      	lsls	r3, r3, #24
 8003acc:	431a      	orrs	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	071b      	lsls	r3, r3, #28
 8003ad4:	4964      	ldr	r1, [pc, #400]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003adc:	4b61      	ldr	r3, [pc, #388]	@ (8003c64 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003ade:	2201      	movs	r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ae2:	f7fe fb9b 	bl	800221c <HAL_GetTick>
 8003ae6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ae8:	e008      	b.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003aea:	f7fe fb97 	bl	800221c <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e129      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003afc:	4b5a      	ldr	r3, [pc, #360]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0f0      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d105      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d079      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003b20:	4b52      	ldr	r3, [pc, #328]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b26:	f7fe fb79 	bl	800221c <HAL_GetTick>
 8003b2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003b2e:	f7fe fb75 	bl	800221c <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e107      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003b40:	4b49      	ldr	r3, [pc, #292]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b4c:	d0ef      	beq.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0304 	and.w	r3, r3, #4
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d020      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b5a:	4b43      	ldr	r3, [pc, #268]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b60:	0f1b      	lsrs	r3, r3, #28
 8003b62:	f003 0307 	and.w	r3, r3, #7
 8003b66:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	019a      	lsls	r2, r3, #6
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	695b      	ldr	r3, [r3, #20]
 8003b72:	061b      	lsls	r3, r3, #24
 8003b74:	431a      	orrs	r2, r3
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	071b      	lsls	r3, r3, #28
 8003b7a:	493b      	ldr	r1, [pc, #236]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b82:	4b39      	ldr	r3, [pc, #228]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b88:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
 8003b90:	3b01      	subs	r3, #1
 8003b92:	021b      	lsls	r3, r3, #8
 8003b94:	4934      	ldr	r1, [pc, #208]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d01e      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ba8:	4b2f      	ldr	r3, [pc, #188]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bae:	0e1b      	lsrs	r3, r3, #24
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	019a      	lsls	r2, r3, #6
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	061b      	lsls	r3, r3, #24
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	071b      	lsls	r3, r3, #28
 8003bc8:	4927      	ldr	r1, [pc, #156]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003bd0:	4b25      	ldr	r3, [pc, #148]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003bd6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bde:	4922      	ldr	r1, [pc, #136]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003be0:	4313      	orrs	r3, r2
 8003be2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003be6:	4b21      	ldr	r3, [pc, #132]	@ (8003c6c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003be8:	2201      	movs	r2, #1
 8003bea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bec:	f7fe fb16 	bl	800221c <HAL_GetTick>
 8003bf0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bf4:	f7fe fb12 	bl	800221c <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e0a4      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c06:	4b18      	ldr	r3, [pc, #96]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c12:	d1ef      	bne.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0320 	and.w	r3, r3, #32
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 808b 	beq.w	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	4b10      	ldr	r3, [pc, #64]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2a:	4a0f      	ldr	r2, [pc, #60]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c32:	4b0d      	ldr	r3, [pc, #52]	@ (8003c68 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a0b      	ldr	r2, [pc, #44]	@ (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003c44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c48:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003c4a:	f7fe fae7 	bl	800221c <HAL_GetTick>
 8003c4e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003c50:	e010      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c52:	f7fe fae3 	bl	800221c <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d909      	bls.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e075      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003c64:	42470068 	.word	0x42470068
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	42470070 	.word	0x42470070
 8003c70:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003c74:	4b38      	ldr	r3, [pc, #224]	@ (8003d58 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d0e8      	beq.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c80:	4b36      	ldr	r3, [pc, #216]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c88:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d02f      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c94:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	d028      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ca6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ca8:	4b2d      	ldr	r3, [pc, #180]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003cae:	4b2c      	ldr	r3, [pc, #176]	@ (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003cb4:	4a29      	ldr	r2, [pc, #164]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cba:	4b28      	ldr	r3, [pc, #160]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d114      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003cc6:	f7fe faa9 	bl	800221c <HAL_GetTick>
 8003cca:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ccc:	e00a      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cce:	f7fe faa5 	bl	800221c <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	1ad3      	subs	r3, r2, r3
 8003cd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e035      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003ce6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0ee      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cf8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cfc:	d10d      	bne.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003cfe:	4b17      	ldr	r3, [pc, #92]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003d0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d12:	4912      	ldr	r1, [pc, #72]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d14:	4313      	orrs	r3, r2
 8003d16:	608b      	str	r3, [r1, #8]
 8003d18:	e005      	b.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003d1a:	4b10      	ldr	r3, [pc, #64]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	4a0f      	ldr	r2, [pc, #60]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d20:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003d24:	6093      	str	r3, [r2, #8]
 8003d26:	4b0d      	ldr	r3, [pc, #52]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d28:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d32:	490a      	ldr	r1, [pc, #40]	@ (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0310 	and.w	r3, r3, #16
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d004      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8003d4a:	4b06      	ldr	r3, [pc, #24]	@ (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003d4c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40007000 	.word	0x40007000
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	42470e40 	.word	0x42470e40
 8003d64:	424711e0 	.word	0x424711e0

08003d68 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e01c      	b.n	8003db4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	795b      	ldrb	r3, [r3, #5]
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d105      	bne.n	8003d90 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f7fd ffe4 	bl	8001d58 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2202      	movs	r2, #2
 8003d94:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0204 	orr.w	r2, r2, #4
 8003da4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2200      	movs	r2, #0
 8003db0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3708      	adds	r7, #8
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	791b      	ldrb	r3, [r3, #4]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d101      	bne.n	8003dd6 <HAL_RNG_GenerateRandomNumber+0x1a>
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	e044      	b.n	8003e60 <HAL_RNG_GenerateRandomNumber+0xa4>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2201      	movs	r2, #1
 8003dda:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	795b      	ldrb	r3, [r3, #5]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d133      	bne.n	8003e4e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2202      	movs	r2, #2
 8003dea:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003dec:	f7fe fa16 	bl	800221c <HAL_GetTick>
 8003df0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003df2:	e018      	b.n	8003e26 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003df4:	f7fe fa12 	bl	800221c <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d911      	bls.n	8003e26 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d00a      	beq.n	8003e26 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2202      	movs	r2, #2
 8003e1a:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e01c      	b.n	8003e60 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d1df      	bne.n	8003df4 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	715a      	strb	r2, [r3, #5]
 8003e4c:	e004      	b.n	8003e58 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2204      	movs	r2, #4
 8003e52:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	711a      	strb	r2, [r3, #4]

  return status;
 8003e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3710      	adds	r7, #16
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e07b      	b.n	8003f72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d108      	bne.n	8003e94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e8a:	d009      	beq.n	8003ea0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	61da      	str	r2, [r3, #28]
 8003e92:	e005      	b.n	8003ea0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fd ff6e 	bl	8001d9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2202      	movs	r2, #2
 8003ec4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ed6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	431a      	orrs	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f10:	431a      	orrs	r2, r3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	69db      	ldr	r3, [r3, #28]
 8003f16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f24:	ea42 0103 	orr.w	r1, r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	0c1b      	lsrs	r3, r3, #16
 8003f3e:	f003 0104 	and.w	r1, r3, #4
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f46:	f003 0210 	and.w	r2, r3, #16
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	430a      	orrs	r2, r1
 8003f50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69da      	ldr	r2, [r3, #28]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e041      	b.n	8004010 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d106      	bne.n	8003fa6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7fd ff43 	bl	8001e2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2202      	movs	r2, #2
 8003faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	4610      	mov	r0, r2
 8003fba:	f000 fa0d 	bl	80043d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800400e:	2300      	movs	r3, #0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	691b      	ldr	r3, [r3, #16]
 800402e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d020      	beq.n	800407c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f003 0302 	and.w	r3, r3, #2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01b      	beq.n	800407c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f06f 0202 	mvn.w	r2, #2
 800404c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2201      	movs	r2, #1
 8004052:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699b      	ldr	r3, [r3, #24]
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f999 	bl	800439a <HAL_TIM_IC_CaptureCallback>
 8004068:	e005      	b.n	8004076 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f98b 	bl	8004386 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f000 f99c 	bl	80043ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f003 0304 	and.w	r3, r3, #4
 8004082:	2b00      	cmp	r3, #0
 8004084:	d020      	beq.n	80040c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	d01b      	beq.n	80040c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0204 	mvn.w	r2, #4
 8004098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2202      	movs	r2, #2
 800409e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f973 	bl	800439a <HAL_TIM_IC_CaptureCallback>
 80040b4:	e005      	b.n	80040c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f965 	bl	8004386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f976 	bl	80043ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d020      	beq.n	8004114 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d01b      	beq.n	8004114 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0208 	mvn.w	r2, #8
 80040e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2204      	movs	r2, #4
 80040ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	f003 0303 	and.w	r3, r3, #3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f94d 	bl	800439a <HAL_TIM_IC_CaptureCallback>
 8004100:	e005      	b.n	800410e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f93f 	bl	8004386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f950 	bl	80043ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f003 0310 	and.w	r3, r3, #16
 800411a:	2b00      	cmp	r3, #0
 800411c:	d020      	beq.n	8004160 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f003 0310 	and.w	r3, r3, #16
 8004124:	2b00      	cmp	r3, #0
 8004126:	d01b      	beq.n	8004160 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f06f 0210 	mvn.w	r2, #16
 8004130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2208      	movs	r2, #8
 8004136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f927 	bl	800439a <HAL_TIM_IC_CaptureCallback>
 800414c:	e005      	b.n	800415a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f919 	bl	8004386 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f92a 	bl	80043ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00c      	beq.n	8004184 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d007      	beq.n	8004184 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0201 	mvn.w	r2, #1
 800417c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7fd fe90 	bl	8001ea4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00c      	beq.n	80041a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004194:	2b00      	cmp	r3, #0
 8004196:	d007      	beq.n	80041a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80041a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 fae4 	bl	8004770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00c      	beq.n	80041cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d007      	beq.n	80041cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80041c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f8fb 	bl	80043c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00c      	beq.n	80041f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f003 0320 	and.w	r3, r3, #32
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d007      	beq.n	80041f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0220 	mvn.w	r2, #32
 80041e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fab6 	bl	800475c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80041f0:	bf00      	nop
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004202:	2300      	movs	r3, #0
 8004204:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_TIM_ConfigClockSource+0x1c>
 8004210:	2302      	movs	r3, #2
 8004212:	e0b4      	b.n	800437e <HAL_TIM_ConfigClockSource+0x186>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2202      	movs	r2, #2
 8004220:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004232:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800423a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800424c:	d03e      	beq.n	80042cc <HAL_TIM_ConfigClockSource+0xd4>
 800424e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004252:	f200 8087 	bhi.w	8004364 <HAL_TIM_ConfigClockSource+0x16c>
 8004256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800425a:	f000 8086 	beq.w	800436a <HAL_TIM_ConfigClockSource+0x172>
 800425e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004262:	d87f      	bhi.n	8004364 <HAL_TIM_ConfigClockSource+0x16c>
 8004264:	2b70      	cmp	r3, #112	@ 0x70
 8004266:	d01a      	beq.n	800429e <HAL_TIM_ConfigClockSource+0xa6>
 8004268:	2b70      	cmp	r3, #112	@ 0x70
 800426a:	d87b      	bhi.n	8004364 <HAL_TIM_ConfigClockSource+0x16c>
 800426c:	2b60      	cmp	r3, #96	@ 0x60
 800426e:	d050      	beq.n	8004312 <HAL_TIM_ConfigClockSource+0x11a>
 8004270:	2b60      	cmp	r3, #96	@ 0x60
 8004272:	d877      	bhi.n	8004364 <HAL_TIM_ConfigClockSource+0x16c>
 8004274:	2b50      	cmp	r3, #80	@ 0x50
 8004276:	d03c      	beq.n	80042f2 <HAL_TIM_ConfigClockSource+0xfa>
 8004278:	2b50      	cmp	r3, #80	@ 0x50
 800427a:	d873      	bhi.n	8004364 <HAL_TIM_ConfigClockSource+0x16c>
 800427c:	2b40      	cmp	r3, #64	@ 0x40
 800427e:	d058      	beq.n	8004332 <HAL_TIM_ConfigClockSource+0x13a>
 8004280:	2b40      	cmp	r3, #64	@ 0x40
 8004282:	d86f      	bhi.n	8004364 <HAL_TIM_ConfigClockSource+0x16c>
 8004284:	2b30      	cmp	r3, #48	@ 0x30
 8004286:	d064      	beq.n	8004352 <HAL_TIM_ConfigClockSource+0x15a>
 8004288:	2b30      	cmp	r3, #48	@ 0x30
 800428a:	d86b      	bhi.n	8004364 <HAL_TIM_ConfigClockSource+0x16c>
 800428c:	2b20      	cmp	r3, #32
 800428e:	d060      	beq.n	8004352 <HAL_TIM_ConfigClockSource+0x15a>
 8004290:	2b20      	cmp	r3, #32
 8004292:	d867      	bhi.n	8004364 <HAL_TIM_ConfigClockSource+0x16c>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d05c      	beq.n	8004352 <HAL_TIM_ConfigClockSource+0x15a>
 8004298:	2b10      	cmp	r3, #16
 800429a:	d05a      	beq.n	8004352 <HAL_TIM_ConfigClockSource+0x15a>
 800429c:	e062      	b.n	8004364 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042ae:	f000 f9b9 	bl	8004624 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	689b      	ldr	r3, [r3, #8]
 80042b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80042c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68ba      	ldr	r2, [r7, #8]
 80042c8:	609a      	str	r2, [r3, #8]
      break;
 80042ca:	e04f      	b.n	800436c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042dc:	f000 f9a2 	bl	8004624 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689a      	ldr	r2, [r3, #8]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042ee:	609a      	str	r2, [r3, #8]
      break;
 80042f0:	e03c      	b.n	800436c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042fe:	461a      	mov	r2, r3
 8004300:	f000 f916 	bl	8004530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2150      	movs	r1, #80	@ 0x50
 800430a:	4618      	mov	r0, r3
 800430c:	f000 f96f 	bl	80045ee <TIM_ITRx_SetConfig>
      break;
 8004310:	e02c      	b.n	800436c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800431e:	461a      	mov	r2, r3
 8004320:	f000 f935 	bl	800458e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2160      	movs	r1, #96	@ 0x60
 800432a:	4618      	mov	r0, r3
 800432c:	f000 f95f 	bl	80045ee <TIM_ITRx_SetConfig>
      break;
 8004330:	e01c      	b.n	800436c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800433e:	461a      	mov	r2, r3
 8004340:	f000 f8f6 	bl	8004530 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2140      	movs	r1, #64	@ 0x40
 800434a:	4618      	mov	r0, r3
 800434c:	f000 f94f 	bl	80045ee <TIM_ITRx_SetConfig>
      break;
 8004350:	e00c      	b.n	800436c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4619      	mov	r1, r3
 800435c:	4610      	mov	r0, r2
 800435e:	f000 f946 	bl	80045ee <TIM_ITRx_SetConfig>
      break;
 8004362:	e003      	b.n	800436c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	73fb      	strb	r3, [r7, #15]
      break;
 8004368:	e000      	b.n	800436c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800436a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800437c:	7bfb      	ldrb	r3, [r7, #15]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3710      	adds	r7, #16
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004386:	b480      	push	{r7}
 8004388:	b083      	sub	sp, #12
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800438e:	bf00      	nop
 8004390:	370c      	adds	r7, #12
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043a2:	bf00      	nop
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b083      	sub	sp, #12
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043ca:	bf00      	nop
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
	...

080043d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a46      	ldr	r2, [pc, #280]	@ (8004504 <TIM_Base_SetConfig+0x12c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d013      	beq.n	8004418 <TIM_Base_SetConfig+0x40>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043f6:	d00f      	beq.n	8004418 <TIM_Base_SetConfig+0x40>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a43      	ldr	r2, [pc, #268]	@ (8004508 <TIM_Base_SetConfig+0x130>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d00b      	beq.n	8004418 <TIM_Base_SetConfig+0x40>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a42      	ldr	r2, [pc, #264]	@ (800450c <TIM_Base_SetConfig+0x134>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d007      	beq.n	8004418 <TIM_Base_SetConfig+0x40>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a41      	ldr	r2, [pc, #260]	@ (8004510 <TIM_Base_SetConfig+0x138>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d003      	beq.n	8004418 <TIM_Base_SetConfig+0x40>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a40      	ldr	r2, [pc, #256]	@ (8004514 <TIM_Base_SetConfig+0x13c>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d108      	bne.n	800442a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800441e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	4313      	orrs	r3, r2
 8004428:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a35      	ldr	r2, [pc, #212]	@ (8004504 <TIM_Base_SetConfig+0x12c>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d02b      	beq.n	800448a <TIM_Base_SetConfig+0xb2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004438:	d027      	beq.n	800448a <TIM_Base_SetConfig+0xb2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a32      	ldr	r2, [pc, #200]	@ (8004508 <TIM_Base_SetConfig+0x130>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d023      	beq.n	800448a <TIM_Base_SetConfig+0xb2>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a31      	ldr	r2, [pc, #196]	@ (800450c <TIM_Base_SetConfig+0x134>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d01f      	beq.n	800448a <TIM_Base_SetConfig+0xb2>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a30      	ldr	r2, [pc, #192]	@ (8004510 <TIM_Base_SetConfig+0x138>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d01b      	beq.n	800448a <TIM_Base_SetConfig+0xb2>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a2f      	ldr	r2, [pc, #188]	@ (8004514 <TIM_Base_SetConfig+0x13c>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d017      	beq.n	800448a <TIM_Base_SetConfig+0xb2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a2e      	ldr	r2, [pc, #184]	@ (8004518 <TIM_Base_SetConfig+0x140>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d013      	beq.n	800448a <TIM_Base_SetConfig+0xb2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a2d      	ldr	r2, [pc, #180]	@ (800451c <TIM_Base_SetConfig+0x144>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d00f      	beq.n	800448a <TIM_Base_SetConfig+0xb2>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a2c      	ldr	r2, [pc, #176]	@ (8004520 <TIM_Base_SetConfig+0x148>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d00b      	beq.n	800448a <TIM_Base_SetConfig+0xb2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a2b      	ldr	r2, [pc, #172]	@ (8004524 <TIM_Base_SetConfig+0x14c>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d007      	beq.n	800448a <TIM_Base_SetConfig+0xb2>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a2a      	ldr	r2, [pc, #168]	@ (8004528 <TIM_Base_SetConfig+0x150>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d003      	beq.n	800448a <TIM_Base_SetConfig+0xb2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a29      	ldr	r2, [pc, #164]	@ (800452c <TIM_Base_SetConfig+0x154>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d108      	bne.n	800449c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004490:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	695b      	ldr	r3, [r3, #20]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a10      	ldr	r2, [pc, #64]	@ (8004504 <TIM_Base_SetConfig+0x12c>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d003      	beq.n	80044d0 <TIM_Base_SetConfig+0xf8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a12      	ldr	r2, [pc, #72]	@ (8004514 <TIM_Base_SetConfig+0x13c>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d103      	bne.n	80044d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	691a      	ldr	r2, [r3, #16]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d105      	bne.n	80044f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f023 0201 	bic.w	r2, r3, #1
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	611a      	str	r2, [r3, #16]
  }
}
 80044f6:	bf00      	nop
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40010000 	.word	0x40010000
 8004508:	40000400 	.word	0x40000400
 800450c:	40000800 	.word	0x40000800
 8004510:	40000c00 	.word	0x40000c00
 8004514:	40010400 	.word	0x40010400
 8004518:	40014000 	.word	0x40014000
 800451c:	40014400 	.word	0x40014400
 8004520:	40014800 	.word	0x40014800
 8004524:	40001800 	.word	0x40001800
 8004528:	40001c00 	.word	0x40001c00
 800452c:	40002000 	.word	0x40002000

08004530 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004530:	b480      	push	{r7}
 8004532:	b087      	sub	sp, #28
 8004534:	af00      	add	r7, sp, #0
 8004536:	60f8      	str	r0, [r7, #12]
 8004538:	60b9      	str	r1, [r7, #8]
 800453a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	f023 0201 	bic.w	r2, r3, #1
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800455a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	011b      	lsls	r3, r3, #4
 8004560:	693a      	ldr	r2, [r7, #16]
 8004562:	4313      	orrs	r3, r2
 8004564:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	f023 030a 	bic.w	r3, r3, #10
 800456c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	4313      	orrs	r3, r2
 8004574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	697a      	ldr	r2, [r7, #20]
 8004580:	621a      	str	r2, [r3, #32]
}
 8004582:	bf00      	nop
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800458e:	b480      	push	{r7}
 8004590:	b087      	sub	sp, #28
 8004592:	af00      	add	r7, sp, #0
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	f023 0210 	bic.w	r2, r3, #16
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	031b      	lsls	r3, r3, #12
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045ca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	621a      	str	r2, [r3, #32]
}
 80045e2:	bf00      	nop
 80045e4:	371c      	adds	r7, #28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045ee:	b480      	push	{r7}
 80045f0:	b085      	sub	sp, #20
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004604:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4313      	orrs	r3, r2
 800460c:	f043 0307 	orr.w	r3, r3, #7
 8004610:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	68fa      	ldr	r2, [r7, #12]
 8004616:	609a      	str	r2, [r3, #8]
}
 8004618:	bf00      	nop
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004624:	b480      	push	{r7}
 8004626:	b087      	sub	sp, #28
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800463e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	021a      	lsls	r2, r3, #8
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	431a      	orrs	r2, r3
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	4313      	orrs	r3, r2
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	4313      	orrs	r3, r2
 8004650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	609a      	str	r2, [r3, #8]
}
 8004658:	bf00      	nop
 800465a:	371c      	adds	r7, #28
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004678:	2302      	movs	r3, #2
 800467a:	e05a      	b.n	8004732 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a21      	ldr	r2, [pc, #132]	@ (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d022      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046c8:	d01d      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a1d      	ldr	r2, [pc, #116]	@ (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d018      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004748 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d013      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a1a      	ldr	r2, [pc, #104]	@ (800474c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d00e      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a18      	ldr	r2, [pc, #96]	@ (8004750 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d009      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a17      	ldr	r2, [pc, #92]	@ (8004754 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d004      	beq.n	8004706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a15      	ldr	r2, [pc, #84]	@ (8004758 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d10c      	bne.n	8004720 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800470c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	4313      	orrs	r3, r2
 8004716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68ba      	ldr	r2, [r7, #8]
 800471e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	40010000 	.word	0x40010000
 8004744:	40000400 	.word	0x40000400
 8004748:	40000800 	.word	0x40000800
 800474c:	40000c00 	.word	0x40000c00
 8004750:	40010400 	.word	0x40010400
 8004754:	40014000 	.word	0x40014000
 8004758:	40001800 	.word	0x40001800

0800475c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <findslot>:
 8004784:	4b0a      	ldr	r3, [pc, #40]	@ (80047b0 <findslot+0x2c>)
 8004786:	b510      	push	{r4, lr}
 8004788:	4604      	mov	r4, r0
 800478a:	6818      	ldr	r0, [r3, #0]
 800478c:	b118      	cbz	r0, 8004796 <findslot+0x12>
 800478e:	6a03      	ldr	r3, [r0, #32]
 8004790:	b90b      	cbnz	r3, 8004796 <findslot+0x12>
 8004792:	f000 fb19 	bl	8004dc8 <__sinit>
 8004796:	2c13      	cmp	r4, #19
 8004798:	d807      	bhi.n	80047aa <findslot+0x26>
 800479a:	4806      	ldr	r0, [pc, #24]	@ (80047b4 <findslot+0x30>)
 800479c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 80047a0:	3201      	adds	r2, #1
 80047a2:	d002      	beq.n	80047aa <findslot+0x26>
 80047a4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 80047a8:	bd10      	pop	{r4, pc}
 80047aa:	2000      	movs	r0, #0
 80047ac:	e7fc      	b.n	80047a8 <findslot+0x24>
 80047ae:	bf00      	nop
 80047b0:	20000020 	.word	0x20000020
 80047b4:	20000364 	.word	0x20000364

080047b8 <error>:
 80047b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ba:	4604      	mov	r4, r0
 80047bc:	f000 fbba 	bl	8004f34 <__errno>
 80047c0:	2613      	movs	r6, #19
 80047c2:	4605      	mov	r5, r0
 80047c4:	2700      	movs	r7, #0
 80047c6:	4630      	mov	r0, r6
 80047c8:	4639      	mov	r1, r7
 80047ca:	beab      	bkpt	0x00ab
 80047cc:	4606      	mov	r6, r0
 80047ce:	602e      	str	r6, [r5, #0]
 80047d0:	4620      	mov	r0, r4
 80047d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080047d4 <checkerror>:
 80047d4:	1c43      	adds	r3, r0, #1
 80047d6:	d101      	bne.n	80047dc <checkerror+0x8>
 80047d8:	f7ff bfee 	b.w	80047b8 <error>
 80047dc:	4770      	bx	lr

080047de <_swiread>:
 80047de:	b530      	push	{r4, r5, lr}
 80047e0:	b085      	sub	sp, #20
 80047e2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80047e6:	9203      	str	r2, [sp, #12]
 80047e8:	2406      	movs	r4, #6
 80047ea:	ad01      	add	r5, sp, #4
 80047ec:	4620      	mov	r0, r4
 80047ee:	4629      	mov	r1, r5
 80047f0:	beab      	bkpt	0x00ab
 80047f2:	4604      	mov	r4, r0
 80047f4:	4620      	mov	r0, r4
 80047f6:	f7ff ffed 	bl	80047d4 <checkerror>
 80047fa:	b005      	add	sp, #20
 80047fc:	bd30      	pop	{r4, r5, pc}

080047fe <_read>:
 80047fe:	b570      	push	{r4, r5, r6, lr}
 8004800:	460e      	mov	r6, r1
 8004802:	4614      	mov	r4, r2
 8004804:	f7ff ffbe 	bl	8004784 <findslot>
 8004808:	4605      	mov	r5, r0
 800480a:	b930      	cbnz	r0, 800481a <_read+0x1c>
 800480c:	f000 fb92 	bl	8004f34 <__errno>
 8004810:	2309      	movs	r3, #9
 8004812:	6003      	str	r3, [r0, #0]
 8004814:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004818:	bd70      	pop	{r4, r5, r6, pc}
 800481a:	6800      	ldr	r0, [r0, #0]
 800481c:	4622      	mov	r2, r4
 800481e:	4631      	mov	r1, r6
 8004820:	f7ff ffdd 	bl	80047de <_swiread>
 8004824:	1c43      	adds	r3, r0, #1
 8004826:	d0f5      	beq.n	8004814 <_read+0x16>
 8004828:	686b      	ldr	r3, [r5, #4]
 800482a:	1a20      	subs	r0, r4, r0
 800482c:	4403      	add	r3, r0
 800482e:	606b      	str	r3, [r5, #4]
 8004830:	e7f2      	b.n	8004818 <_read+0x1a>

08004832 <_swilseek>:
 8004832:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004834:	460c      	mov	r4, r1
 8004836:	4616      	mov	r6, r2
 8004838:	f7ff ffa4 	bl	8004784 <findslot>
 800483c:	4605      	mov	r5, r0
 800483e:	b940      	cbnz	r0, 8004852 <_swilseek+0x20>
 8004840:	f000 fb78 	bl	8004f34 <__errno>
 8004844:	2309      	movs	r3, #9
 8004846:	6003      	str	r3, [r0, #0]
 8004848:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800484c:	4620      	mov	r0, r4
 800484e:	b003      	add	sp, #12
 8004850:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004852:	2e02      	cmp	r6, #2
 8004854:	d903      	bls.n	800485e <_swilseek+0x2c>
 8004856:	f000 fb6d 	bl	8004f34 <__errno>
 800485a:	2316      	movs	r3, #22
 800485c:	e7f3      	b.n	8004846 <_swilseek+0x14>
 800485e:	2e01      	cmp	r6, #1
 8004860:	d112      	bne.n	8004888 <_swilseek+0x56>
 8004862:	6843      	ldr	r3, [r0, #4]
 8004864:	18e4      	adds	r4, r4, r3
 8004866:	d4f6      	bmi.n	8004856 <_swilseek+0x24>
 8004868:	682b      	ldr	r3, [r5, #0]
 800486a:	260a      	movs	r6, #10
 800486c:	e9cd 3400 	strd	r3, r4, [sp]
 8004870:	466f      	mov	r7, sp
 8004872:	4630      	mov	r0, r6
 8004874:	4639      	mov	r1, r7
 8004876:	beab      	bkpt	0x00ab
 8004878:	4606      	mov	r6, r0
 800487a:	4630      	mov	r0, r6
 800487c:	f7ff ffaa 	bl	80047d4 <checkerror>
 8004880:	2800      	cmp	r0, #0
 8004882:	dbe1      	blt.n	8004848 <_swilseek+0x16>
 8004884:	606c      	str	r4, [r5, #4]
 8004886:	e7e1      	b.n	800484c <_swilseek+0x1a>
 8004888:	2e02      	cmp	r6, #2
 800488a:	6803      	ldr	r3, [r0, #0]
 800488c:	d1ec      	bne.n	8004868 <_swilseek+0x36>
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	260c      	movs	r6, #12
 8004892:	466f      	mov	r7, sp
 8004894:	4630      	mov	r0, r6
 8004896:	4639      	mov	r1, r7
 8004898:	beab      	bkpt	0x00ab
 800489a:	4606      	mov	r6, r0
 800489c:	4630      	mov	r0, r6
 800489e:	f7ff ff99 	bl	80047d4 <checkerror>
 80048a2:	1c43      	adds	r3, r0, #1
 80048a4:	d0d0      	beq.n	8004848 <_swilseek+0x16>
 80048a6:	4404      	add	r4, r0
 80048a8:	e7de      	b.n	8004868 <_swilseek+0x36>

080048aa <_lseek>:
 80048aa:	f7ff bfc2 	b.w	8004832 <_swilseek>

080048ae <_swiwrite>:
 80048ae:	b530      	push	{r4, r5, lr}
 80048b0:	b085      	sub	sp, #20
 80048b2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80048b6:	9203      	str	r2, [sp, #12]
 80048b8:	2405      	movs	r4, #5
 80048ba:	ad01      	add	r5, sp, #4
 80048bc:	4620      	mov	r0, r4
 80048be:	4629      	mov	r1, r5
 80048c0:	beab      	bkpt	0x00ab
 80048c2:	4604      	mov	r4, r0
 80048c4:	4620      	mov	r0, r4
 80048c6:	f7ff ff85 	bl	80047d4 <checkerror>
 80048ca:	b005      	add	sp, #20
 80048cc:	bd30      	pop	{r4, r5, pc}

080048ce <_write>:
 80048ce:	b570      	push	{r4, r5, r6, lr}
 80048d0:	460e      	mov	r6, r1
 80048d2:	4615      	mov	r5, r2
 80048d4:	f7ff ff56 	bl	8004784 <findslot>
 80048d8:	4604      	mov	r4, r0
 80048da:	b930      	cbnz	r0, 80048ea <_write+0x1c>
 80048dc:	f000 fb2a 	bl	8004f34 <__errno>
 80048e0:	2309      	movs	r3, #9
 80048e2:	6003      	str	r3, [r0, #0]
 80048e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80048e8:	bd70      	pop	{r4, r5, r6, pc}
 80048ea:	6800      	ldr	r0, [r0, #0]
 80048ec:	462a      	mov	r2, r5
 80048ee:	4631      	mov	r1, r6
 80048f0:	f7ff ffdd 	bl	80048ae <_swiwrite>
 80048f4:	1e03      	subs	r3, r0, #0
 80048f6:	dbf5      	blt.n	80048e4 <_write+0x16>
 80048f8:	6862      	ldr	r2, [r4, #4]
 80048fa:	1ae8      	subs	r0, r5, r3
 80048fc:	4402      	add	r2, r0
 80048fe:	42ab      	cmp	r3, r5
 8004900:	6062      	str	r2, [r4, #4]
 8004902:	d1f1      	bne.n	80048e8 <_write+0x1a>
 8004904:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004908:	2000      	movs	r0, #0
 800490a:	f7ff bf55 	b.w	80047b8 <error>

0800490e <_swiclose>:
 800490e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004910:	2402      	movs	r4, #2
 8004912:	9001      	str	r0, [sp, #4]
 8004914:	ad01      	add	r5, sp, #4
 8004916:	4620      	mov	r0, r4
 8004918:	4629      	mov	r1, r5
 800491a:	beab      	bkpt	0x00ab
 800491c:	4604      	mov	r4, r0
 800491e:	4620      	mov	r0, r4
 8004920:	f7ff ff58 	bl	80047d4 <checkerror>
 8004924:	b003      	add	sp, #12
 8004926:	bd30      	pop	{r4, r5, pc}

08004928 <_close>:
 8004928:	b538      	push	{r3, r4, r5, lr}
 800492a:	4605      	mov	r5, r0
 800492c:	f7ff ff2a 	bl	8004784 <findslot>
 8004930:	4604      	mov	r4, r0
 8004932:	b930      	cbnz	r0, 8004942 <_close+0x1a>
 8004934:	f000 fafe 	bl	8004f34 <__errno>
 8004938:	2309      	movs	r3, #9
 800493a:	6003      	str	r3, [r0, #0]
 800493c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004940:	bd38      	pop	{r3, r4, r5, pc}
 8004942:	3d01      	subs	r5, #1
 8004944:	2d01      	cmp	r5, #1
 8004946:	d809      	bhi.n	800495c <_close+0x34>
 8004948:	4b07      	ldr	r3, [pc, #28]	@ (8004968 <_close+0x40>)
 800494a:	689a      	ldr	r2, [r3, #8]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	429a      	cmp	r2, r3
 8004950:	d104      	bne.n	800495c <_close+0x34>
 8004952:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004956:	6023      	str	r3, [r4, #0]
 8004958:	2000      	movs	r0, #0
 800495a:	e7f1      	b.n	8004940 <_close+0x18>
 800495c:	6820      	ldr	r0, [r4, #0]
 800495e:	f7ff ffd6 	bl	800490e <_swiclose>
 8004962:	2800      	cmp	r0, #0
 8004964:	d0f5      	beq.n	8004952 <_close+0x2a>
 8004966:	e7eb      	b.n	8004940 <_close+0x18>
 8004968:	20000364 	.word	0x20000364

0800496c <_swistat>:
 800496c:	b570      	push	{r4, r5, r6, lr}
 800496e:	460c      	mov	r4, r1
 8004970:	f7ff ff08 	bl	8004784 <findslot>
 8004974:	4605      	mov	r5, r0
 8004976:	b930      	cbnz	r0, 8004986 <_swistat+0x1a>
 8004978:	f000 fadc 	bl	8004f34 <__errno>
 800497c:	2309      	movs	r3, #9
 800497e:	6003      	str	r3, [r0, #0]
 8004980:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004984:	bd70      	pop	{r4, r5, r6, pc}
 8004986:	6863      	ldr	r3, [r4, #4]
 8004988:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800498c:	6063      	str	r3, [r4, #4]
 800498e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004992:	64a3      	str	r3, [r4, #72]	@ 0x48
 8004994:	260c      	movs	r6, #12
 8004996:	4630      	mov	r0, r6
 8004998:	4629      	mov	r1, r5
 800499a:	beab      	bkpt	0x00ab
 800499c:	4605      	mov	r5, r0
 800499e:	4628      	mov	r0, r5
 80049a0:	f7ff ff18 	bl	80047d4 <checkerror>
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	d0eb      	beq.n	8004980 <_swistat+0x14>
 80049a8:	6120      	str	r0, [r4, #16]
 80049aa:	2000      	movs	r0, #0
 80049ac:	e7ea      	b.n	8004984 <_swistat+0x18>

080049ae <_fstat>:
 80049ae:	460b      	mov	r3, r1
 80049b0:	b510      	push	{r4, lr}
 80049b2:	2100      	movs	r1, #0
 80049b4:	4604      	mov	r4, r0
 80049b6:	2258      	movs	r2, #88	@ 0x58
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 fab3 	bl	8004f24 <memset>
 80049be:	4601      	mov	r1, r0
 80049c0:	4620      	mov	r0, r4
 80049c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049c6:	f7ff bfd1 	b.w	800496c <_swistat>

080049ca <_stat>:
 80049ca:	b538      	push	{r3, r4, r5, lr}
 80049cc:	460d      	mov	r5, r1
 80049ce:	4604      	mov	r4, r0
 80049d0:	2258      	movs	r2, #88	@ 0x58
 80049d2:	2100      	movs	r1, #0
 80049d4:	4628      	mov	r0, r5
 80049d6:	f000 faa5 	bl	8004f24 <memset>
 80049da:	4620      	mov	r0, r4
 80049dc:	2100      	movs	r1, #0
 80049de:	f000 f811 	bl	8004a04 <_swiopen>
 80049e2:	1c43      	adds	r3, r0, #1
 80049e4:	4604      	mov	r4, r0
 80049e6:	d00b      	beq.n	8004a00 <_stat+0x36>
 80049e8:	686b      	ldr	r3, [r5, #4]
 80049ea:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80049ee:	606b      	str	r3, [r5, #4]
 80049f0:	4629      	mov	r1, r5
 80049f2:	f7ff ffbb 	bl	800496c <_swistat>
 80049f6:	4605      	mov	r5, r0
 80049f8:	4620      	mov	r0, r4
 80049fa:	f7ff ff95 	bl	8004928 <_close>
 80049fe:	462c      	mov	r4, r5
 8004a00:	4620      	mov	r0, r4
 8004a02:	bd38      	pop	{r3, r4, r5, pc}

08004a04 <_swiopen>:
 8004a04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a08:	4f29      	ldr	r7, [pc, #164]	@ (8004ab0 <_swiopen+0xac>)
 8004a0a:	b096      	sub	sp, #88	@ 0x58
 8004a0c:	4682      	mov	sl, r0
 8004a0e:	460e      	mov	r6, r1
 8004a10:	2400      	movs	r4, #0
 8004a12:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8004a16:	3301      	adds	r3, #1
 8004a18:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8004a1c:	d00c      	beq.n	8004a38 <_swiopen+0x34>
 8004a1e:	3401      	adds	r4, #1
 8004a20:	2c14      	cmp	r4, #20
 8004a22:	d1f6      	bne.n	8004a12 <_swiopen+0xe>
 8004a24:	f000 fa86 	bl	8004f34 <__errno>
 8004a28:	2318      	movs	r3, #24
 8004a2a:	6003      	str	r3, [r0, #0]
 8004a2c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004a30:	4620      	mov	r0, r4
 8004a32:	b016      	add	sp, #88	@ 0x58
 8004a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a38:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8004a3c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004a40:	46e9      	mov	r9, sp
 8004a42:	d109      	bne.n	8004a58 <_swiopen+0x54>
 8004a44:	4649      	mov	r1, r9
 8004a46:	4650      	mov	r0, sl
 8004a48:	f7ff ffbf 	bl	80049ca <_stat>
 8004a4c:	3001      	adds	r0, #1
 8004a4e:	d003      	beq.n	8004a58 <_swiopen+0x54>
 8004a50:	f000 fa70 	bl	8004f34 <__errno>
 8004a54:	2311      	movs	r3, #17
 8004a56:	e7e8      	b.n	8004a2a <_swiopen+0x26>
 8004a58:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8004a5c:	f240 6301 	movw	r3, #1537	@ 0x601
 8004a60:	07b2      	lsls	r2, r6, #30
 8004a62:	bf48      	it	mi
 8004a64:	f045 0502 	orrmi.w	r5, r5, #2
 8004a68:	421e      	tst	r6, r3
 8004a6a:	bf18      	it	ne
 8004a6c:	f045 0504 	orrne.w	r5, r5, #4
 8004a70:	0733      	lsls	r3, r6, #28
 8004a72:	bf48      	it	mi
 8004a74:	f025 0504 	bicmi.w	r5, r5, #4
 8004a78:	4650      	mov	r0, sl
 8004a7a:	bf48      	it	mi
 8004a7c:	f045 0508 	orrmi.w	r5, r5, #8
 8004a80:	f8cd a000 	str.w	sl, [sp]
 8004a84:	f7fb fbb4 	bl	80001f0 <strlen>
 8004a88:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8004a8c:	2501      	movs	r5, #1
 8004a8e:	4628      	mov	r0, r5
 8004a90:	4649      	mov	r1, r9
 8004a92:	beab      	bkpt	0x00ab
 8004a94:	4605      	mov	r5, r0
 8004a96:	2d00      	cmp	r5, #0
 8004a98:	db05      	blt.n	8004aa6 <_swiopen+0xa2>
 8004a9a:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8004a9e:	4447      	add	r7, r8
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	607b      	str	r3, [r7, #4]
 8004aa4:	e7c4      	b.n	8004a30 <_swiopen+0x2c>
 8004aa6:	4628      	mov	r0, r5
 8004aa8:	f7ff fe86 	bl	80047b8 <error>
 8004aac:	4604      	mov	r4, r0
 8004aae:	e7bf      	b.n	8004a30 <_swiopen+0x2c>
 8004ab0:	20000364 	.word	0x20000364

08004ab4 <_get_semihosting_exts>:
 8004ab4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004ab8:	4606      	mov	r6, r0
 8004aba:	460f      	mov	r7, r1
 8004abc:	4829      	ldr	r0, [pc, #164]	@ (8004b64 <_get_semihosting_exts+0xb0>)
 8004abe:	2100      	movs	r1, #0
 8004ac0:	4615      	mov	r5, r2
 8004ac2:	f7ff ff9f 	bl	8004a04 <_swiopen>
 8004ac6:	462a      	mov	r2, r5
 8004ac8:	4604      	mov	r4, r0
 8004aca:	2100      	movs	r1, #0
 8004acc:	4630      	mov	r0, r6
 8004ace:	f000 fa29 	bl	8004f24 <memset>
 8004ad2:	1c63      	adds	r3, r4, #1
 8004ad4:	d014      	beq.n	8004b00 <_get_semihosting_exts+0x4c>
 8004ad6:	4620      	mov	r0, r4
 8004ad8:	f7ff fe54 	bl	8004784 <findslot>
 8004adc:	f04f 080c 	mov.w	r8, #12
 8004ae0:	4681      	mov	r9, r0
 8004ae2:	4640      	mov	r0, r8
 8004ae4:	4649      	mov	r1, r9
 8004ae6:	beab      	bkpt	0x00ab
 8004ae8:	4680      	mov	r8, r0
 8004aea:	4640      	mov	r0, r8
 8004aec:	f7ff fe72 	bl	80047d4 <checkerror>
 8004af0:	2803      	cmp	r0, #3
 8004af2:	dd02      	ble.n	8004afa <_get_semihosting_exts+0x46>
 8004af4:	1ec3      	subs	r3, r0, #3
 8004af6:	42ab      	cmp	r3, r5
 8004af8:	dc07      	bgt.n	8004b0a <_get_semihosting_exts+0x56>
 8004afa:	4620      	mov	r0, r4
 8004afc:	f7ff ff14 	bl	8004928 <_close>
 8004b00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b04:	b003      	add	sp, #12
 8004b06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004b0a:	2204      	movs	r2, #4
 8004b0c:	eb0d 0102 	add.w	r1, sp, r2
 8004b10:	4620      	mov	r0, r4
 8004b12:	f7ff fe74 	bl	80047fe <_read>
 8004b16:	2803      	cmp	r0, #3
 8004b18:	ddef      	ble.n	8004afa <_get_semihosting_exts+0x46>
 8004b1a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004b1e:	2b53      	cmp	r3, #83	@ 0x53
 8004b20:	d1eb      	bne.n	8004afa <_get_semihosting_exts+0x46>
 8004b22:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004b26:	2b48      	cmp	r3, #72	@ 0x48
 8004b28:	d1e7      	bne.n	8004afa <_get_semihosting_exts+0x46>
 8004b2a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004b2e:	2b46      	cmp	r3, #70	@ 0x46
 8004b30:	d1e3      	bne.n	8004afa <_get_semihosting_exts+0x46>
 8004b32:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004b36:	2b42      	cmp	r3, #66	@ 0x42
 8004b38:	d1df      	bne.n	8004afa <_get_semihosting_exts+0x46>
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	4639      	mov	r1, r7
 8004b3e:	4620      	mov	r0, r4
 8004b40:	f7ff fe77 	bl	8004832 <_swilseek>
 8004b44:	2800      	cmp	r0, #0
 8004b46:	dbd8      	blt.n	8004afa <_get_semihosting_exts+0x46>
 8004b48:	462a      	mov	r2, r5
 8004b4a:	4631      	mov	r1, r6
 8004b4c:	4620      	mov	r0, r4
 8004b4e:	f7ff fe56 	bl	80047fe <_read>
 8004b52:	4605      	mov	r5, r0
 8004b54:	4620      	mov	r0, r4
 8004b56:	f7ff fee7 	bl	8004928 <_close>
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	f7ff fe3a 	bl	80047d4 <checkerror>
 8004b60:	e7d0      	b.n	8004b04 <_get_semihosting_exts+0x50>
 8004b62:	bf00      	nop
 8004b64:	08005d00 	.word	0x08005d00

08004b68 <initialise_semihosting_exts>:
 8004b68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004b6a:	4d0a      	ldr	r5, [pc, #40]	@ (8004b94 <initialise_semihosting_exts+0x2c>)
 8004b6c:	4c0a      	ldr	r4, [pc, #40]	@ (8004b98 <initialise_semihosting_exts+0x30>)
 8004b6e:	2100      	movs	r1, #0
 8004b70:	2201      	movs	r2, #1
 8004b72:	a801      	add	r0, sp, #4
 8004b74:	6029      	str	r1, [r5, #0]
 8004b76:	6022      	str	r2, [r4, #0]
 8004b78:	f7ff ff9c 	bl	8004ab4 <_get_semihosting_exts>
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	dd07      	ble.n	8004b90 <initialise_semihosting_exts+0x28>
 8004b80:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004b84:	f003 0201 	and.w	r2, r3, #1
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	602a      	str	r2, [r5, #0]
 8004b8e:	6023      	str	r3, [r4, #0]
 8004b90:	b003      	add	sp, #12
 8004b92:	bd30      	pop	{r4, r5, pc}
 8004b94:	20000010 	.word	0x20000010
 8004b98:	2000000c 	.word	0x2000000c

08004b9c <_has_ext_stdout_stderr>:
 8004b9c:	b510      	push	{r4, lr}
 8004b9e:	4c04      	ldr	r4, [pc, #16]	@ (8004bb0 <_has_ext_stdout_stderr+0x14>)
 8004ba0:	6823      	ldr	r3, [r4, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	da01      	bge.n	8004baa <_has_ext_stdout_stderr+0xe>
 8004ba6:	f7ff ffdf 	bl	8004b68 <initialise_semihosting_exts>
 8004baa:	6820      	ldr	r0, [r4, #0]
 8004bac:	bd10      	pop	{r4, pc}
 8004bae:	bf00      	nop
 8004bb0:	2000000c 	.word	0x2000000c

08004bb4 <initialise_monitor_handles>:
 8004bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bb8:	b085      	sub	sp, #20
 8004bba:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8004c6c <initialise_monitor_handles+0xb8>
 8004bbe:	f8cd 9004 	str.w	r9, [sp, #4]
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	2400      	movs	r4, #0
 8004bc6:	9303      	str	r3, [sp, #12]
 8004bc8:	af01      	add	r7, sp, #4
 8004bca:	9402      	str	r4, [sp, #8]
 8004bcc:	2501      	movs	r5, #1
 8004bce:	4628      	mov	r0, r5
 8004bd0:	4639      	mov	r1, r7
 8004bd2:	beab      	bkpt	0x00ab
 8004bd4:	4605      	mov	r5, r0
 8004bd6:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8004c70 <initialise_monitor_handles+0xbc>
 8004bda:	4623      	mov	r3, r4
 8004bdc:	4c20      	ldr	r4, [pc, #128]	@ (8004c60 <initialise_monitor_handles+0xac>)
 8004bde:	f8c8 5000 	str.w	r5, [r8]
 8004be2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004be6:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8004bea:	3301      	adds	r3, #1
 8004bec:	2b14      	cmp	r3, #20
 8004bee:	d1fa      	bne.n	8004be6 <initialise_monitor_handles+0x32>
 8004bf0:	f7ff ffd4 	bl	8004b9c <_has_ext_stdout_stderr>
 8004bf4:	4d1b      	ldr	r5, [pc, #108]	@ (8004c64 <initialise_monitor_handles+0xb0>)
 8004bf6:	b1d0      	cbz	r0, 8004c2e <initialise_monitor_handles+0x7a>
 8004bf8:	f04f 0a03 	mov.w	sl, #3
 8004bfc:	2304      	movs	r3, #4
 8004bfe:	f8cd 9004 	str.w	r9, [sp, #4]
 8004c02:	2601      	movs	r6, #1
 8004c04:	f8cd a00c 	str.w	sl, [sp, #12]
 8004c08:	9302      	str	r3, [sp, #8]
 8004c0a:	4630      	mov	r0, r6
 8004c0c:	4639      	mov	r1, r7
 8004c0e:	beab      	bkpt	0x00ab
 8004c10:	4683      	mov	fp, r0
 8004c12:	4b15      	ldr	r3, [pc, #84]	@ (8004c68 <initialise_monitor_handles+0xb4>)
 8004c14:	f8cd 9004 	str.w	r9, [sp, #4]
 8004c18:	f8c3 b000 	str.w	fp, [r3]
 8004c1c:	2308      	movs	r3, #8
 8004c1e:	f8cd a00c 	str.w	sl, [sp, #12]
 8004c22:	9302      	str	r3, [sp, #8]
 8004c24:	4630      	mov	r0, r6
 8004c26:	4639      	mov	r1, r7
 8004c28:	beab      	bkpt	0x00ab
 8004c2a:	4606      	mov	r6, r0
 8004c2c:	602e      	str	r6, [r5, #0]
 8004c2e:	682b      	ldr	r3, [r5, #0]
 8004c30:	3301      	adds	r3, #1
 8004c32:	bf02      	ittt	eq
 8004c34:	4b0c      	ldreq	r3, [pc, #48]	@ (8004c68 <initialise_monitor_handles+0xb4>)
 8004c36:	681b      	ldreq	r3, [r3, #0]
 8004c38:	602b      	streq	r3, [r5, #0]
 8004c3a:	2600      	movs	r6, #0
 8004c3c:	f8d8 3000 	ldr.w	r3, [r8]
 8004c40:	6023      	str	r3, [r4, #0]
 8004c42:	6066      	str	r6, [r4, #4]
 8004c44:	f7ff ffaa 	bl	8004b9c <_has_ext_stdout_stderr>
 8004c48:	b130      	cbz	r0, 8004c58 <initialise_monitor_handles+0xa4>
 8004c4a:	4b07      	ldr	r3, [pc, #28]	@ (8004c68 <initialise_monitor_handles+0xb4>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8004c52:	682b      	ldr	r3, [r5, #0]
 8004c54:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8004c58:	b005      	add	sp, #20
 8004c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c5e:	bf00      	nop
 8004c60:	20000364 	.word	0x20000364
 8004c64:	20000358 	.word	0x20000358
 8004c68:	2000035c 	.word	0x2000035c
 8004c6c:	08005d16 	.word	0x08005d16
 8004c70:	20000360 	.word	0x20000360

08004c74 <_isatty>:
 8004c74:	b570      	push	{r4, r5, r6, lr}
 8004c76:	f7ff fd85 	bl	8004784 <findslot>
 8004c7a:	2409      	movs	r4, #9
 8004c7c:	4605      	mov	r5, r0
 8004c7e:	b920      	cbnz	r0, 8004c8a <_isatty+0x16>
 8004c80:	f000 f958 	bl	8004f34 <__errno>
 8004c84:	6004      	str	r4, [r0, #0]
 8004c86:	2000      	movs	r0, #0
 8004c88:	bd70      	pop	{r4, r5, r6, pc}
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	4629      	mov	r1, r5
 8004c8e:	beab      	bkpt	0x00ab
 8004c90:	4604      	mov	r4, r0
 8004c92:	2c01      	cmp	r4, #1
 8004c94:	4620      	mov	r0, r4
 8004c96:	d0f7      	beq.n	8004c88 <_isatty+0x14>
 8004c98:	f000 f94c 	bl	8004f34 <__errno>
 8004c9c:	2513      	movs	r5, #19
 8004c9e:	4604      	mov	r4, r0
 8004ca0:	2600      	movs	r6, #0
 8004ca2:	4628      	mov	r0, r5
 8004ca4:	4631      	mov	r1, r6
 8004ca6:	beab      	bkpt	0x00ab
 8004ca8:	4605      	mov	r5, r0
 8004caa:	6025      	str	r5, [r4, #0]
 8004cac:	e7eb      	b.n	8004c86 <_isatty+0x12>
	...

08004cb0 <std>:
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	b510      	push	{r4, lr}
 8004cb4:	4604      	mov	r4, r0
 8004cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8004cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cbe:	6083      	str	r3, [r0, #8]
 8004cc0:	8181      	strh	r1, [r0, #12]
 8004cc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004cc4:	81c2      	strh	r2, [r0, #14]
 8004cc6:	6183      	str	r3, [r0, #24]
 8004cc8:	4619      	mov	r1, r3
 8004cca:	2208      	movs	r2, #8
 8004ccc:	305c      	adds	r0, #92	@ 0x5c
 8004cce:	f000 f929 	bl	8004f24 <memset>
 8004cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004d08 <std+0x58>)
 8004cd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8004cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8004d0c <std+0x5c>)
 8004cd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004cda:	4b0d      	ldr	r3, [pc, #52]	@ (8004d10 <std+0x60>)
 8004cdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004cde:	4b0d      	ldr	r3, [pc, #52]	@ (8004d14 <std+0x64>)
 8004ce0:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8004d18 <std+0x68>)
 8004ce4:	6224      	str	r4, [r4, #32]
 8004ce6:	429c      	cmp	r4, r3
 8004ce8:	d006      	beq.n	8004cf8 <std+0x48>
 8004cea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004cee:	4294      	cmp	r4, r2
 8004cf0:	d002      	beq.n	8004cf8 <std+0x48>
 8004cf2:	33d0      	adds	r3, #208	@ 0xd0
 8004cf4:	429c      	cmp	r4, r3
 8004cf6:	d105      	bne.n	8004d04 <std+0x54>
 8004cf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d00:	f000 b942 	b.w	8004f88 <__retarget_lock_init_recursive>
 8004d04:	bd10      	pop	{r4, pc}
 8004d06:	bf00      	nop
 8004d08:	080057e1 	.word	0x080057e1
 8004d0c:	08005803 	.word	0x08005803
 8004d10:	0800583b 	.word	0x0800583b
 8004d14:	0800585f 	.word	0x0800585f
 8004d18:	20000404 	.word	0x20000404

08004d1c <stdio_exit_handler>:
 8004d1c:	4a02      	ldr	r2, [pc, #8]	@ (8004d28 <stdio_exit_handler+0xc>)
 8004d1e:	4903      	ldr	r1, [pc, #12]	@ (8004d2c <stdio_exit_handler+0x10>)
 8004d20:	4803      	ldr	r0, [pc, #12]	@ (8004d30 <stdio_exit_handler+0x14>)
 8004d22:	f000 b869 	b.w	8004df8 <_fwalk_sglue>
 8004d26:	bf00      	nop
 8004d28:	20000014 	.word	0x20000014
 8004d2c:	08005779 	.word	0x08005779
 8004d30:	20000024 	.word	0x20000024

08004d34 <cleanup_stdio>:
 8004d34:	6841      	ldr	r1, [r0, #4]
 8004d36:	4b0c      	ldr	r3, [pc, #48]	@ (8004d68 <cleanup_stdio+0x34>)
 8004d38:	4299      	cmp	r1, r3
 8004d3a:	b510      	push	{r4, lr}
 8004d3c:	4604      	mov	r4, r0
 8004d3e:	d001      	beq.n	8004d44 <cleanup_stdio+0x10>
 8004d40:	f000 fd1a 	bl	8005778 <_fflush_r>
 8004d44:	68a1      	ldr	r1, [r4, #8]
 8004d46:	4b09      	ldr	r3, [pc, #36]	@ (8004d6c <cleanup_stdio+0x38>)
 8004d48:	4299      	cmp	r1, r3
 8004d4a:	d002      	beq.n	8004d52 <cleanup_stdio+0x1e>
 8004d4c:	4620      	mov	r0, r4
 8004d4e:	f000 fd13 	bl	8005778 <_fflush_r>
 8004d52:	68e1      	ldr	r1, [r4, #12]
 8004d54:	4b06      	ldr	r3, [pc, #24]	@ (8004d70 <cleanup_stdio+0x3c>)
 8004d56:	4299      	cmp	r1, r3
 8004d58:	d004      	beq.n	8004d64 <cleanup_stdio+0x30>
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d60:	f000 bd0a 	b.w	8005778 <_fflush_r>
 8004d64:	bd10      	pop	{r4, pc}
 8004d66:	bf00      	nop
 8004d68:	20000404 	.word	0x20000404
 8004d6c:	2000046c 	.word	0x2000046c
 8004d70:	200004d4 	.word	0x200004d4

08004d74 <global_stdio_init.part.0>:
 8004d74:	b510      	push	{r4, lr}
 8004d76:	4b0b      	ldr	r3, [pc, #44]	@ (8004da4 <global_stdio_init.part.0+0x30>)
 8004d78:	4c0b      	ldr	r4, [pc, #44]	@ (8004da8 <global_stdio_init.part.0+0x34>)
 8004d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8004dac <global_stdio_init.part.0+0x38>)
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	4620      	mov	r0, r4
 8004d80:	2200      	movs	r2, #0
 8004d82:	2104      	movs	r1, #4
 8004d84:	f7ff ff94 	bl	8004cb0 <std>
 8004d88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	2109      	movs	r1, #9
 8004d90:	f7ff ff8e 	bl	8004cb0 <std>
 8004d94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004d98:	2202      	movs	r2, #2
 8004d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d9e:	2112      	movs	r1, #18
 8004da0:	f7ff bf86 	b.w	8004cb0 <std>
 8004da4:	2000053c 	.word	0x2000053c
 8004da8:	20000404 	.word	0x20000404
 8004dac:	08004d1d 	.word	0x08004d1d

08004db0 <__sfp_lock_acquire>:
 8004db0:	4801      	ldr	r0, [pc, #4]	@ (8004db8 <__sfp_lock_acquire+0x8>)
 8004db2:	f000 b8ea 	b.w	8004f8a <__retarget_lock_acquire_recursive>
 8004db6:	bf00      	nop
 8004db8:	20000541 	.word	0x20000541

08004dbc <__sfp_lock_release>:
 8004dbc:	4801      	ldr	r0, [pc, #4]	@ (8004dc4 <__sfp_lock_release+0x8>)
 8004dbe:	f000 b8e5 	b.w	8004f8c <__retarget_lock_release_recursive>
 8004dc2:	bf00      	nop
 8004dc4:	20000541 	.word	0x20000541

08004dc8 <__sinit>:
 8004dc8:	b510      	push	{r4, lr}
 8004dca:	4604      	mov	r4, r0
 8004dcc:	f7ff fff0 	bl	8004db0 <__sfp_lock_acquire>
 8004dd0:	6a23      	ldr	r3, [r4, #32]
 8004dd2:	b11b      	cbz	r3, 8004ddc <__sinit+0x14>
 8004dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004dd8:	f7ff bff0 	b.w	8004dbc <__sfp_lock_release>
 8004ddc:	4b04      	ldr	r3, [pc, #16]	@ (8004df0 <__sinit+0x28>)
 8004dde:	6223      	str	r3, [r4, #32]
 8004de0:	4b04      	ldr	r3, [pc, #16]	@ (8004df4 <__sinit+0x2c>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1f5      	bne.n	8004dd4 <__sinit+0xc>
 8004de8:	f7ff ffc4 	bl	8004d74 <global_stdio_init.part.0>
 8004dec:	e7f2      	b.n	8004dd4 <__sinit+0xc>
 8004dee:	bf00      	nop
 8004df0:	08004d35 	.word	0x08004d35
 8004df4:	2000053c 	.word	0x2000053c

08004df8 <_fwalk_sglue>:
 8004df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004dfc:	4607      	mov	r7, r0
 8004dfe:	4688      	mov	r8, r1
 8004e00:	4614      	mov	r4, r2
 8004e02:	2600      	movs	r6, #0
 8004e04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e08:	f1b9 0901 	subs.w	r9, r9, #1
 8004e0c:	d505      	bpl.n	8004e1a <_fwalk_sglue+0x22>
 8004e0e:	6824      	ldr	r4, [r4, #0]
 8004e10:	2c00      	cmp	r4, #0
 8004e12:	d1f7      	bne.n	8004e04 <_fwalk_sglue+0xc>
 8004e14:	4630      	mov	r0, r6
 8004e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e1a:	89ab      	ldrh	r3, [r5, #12]
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d907      	bls.n	8004e30 <_fwalk_sglue+0x38>
 8004e20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e24:	3301      	adds	r3, #1
 8004e26:	d003      	beq.n	8004e30 <_fwalk_sglue+0x38>
 8004e28:	4629      	mov	r1, r5
 8004e2a:	4638      	mov	r0, r7
 8004e2c:	47c0      	blx	r8
 8004e2e:	4306      	orrs	r6, r0
 8004e30:	3568      	adds	r5, #104	@ 0x68
 8004e32:	e7e9      	b.n	8004e08 <_fwalk_sglue+0x10>

08004e34 <iprintf>:
 8004e34:	b40f      	push	{r0, r1, r2, r3}
 8004e36:	b507      	push	{r0, r1, r2, lr}
 8004e38:	4906      	ldr	r1, [pc, #24]	@ (8004e54 <iprintf+0x20>)
 8004e3a:	ab04      	add	r3, sp, #16
 8004e3c:	6808      	ldr	r0, [r1, #0]
 8004e3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e42:	6881      	ldr	r1, [r0, #8]
 8004e44:	9301      	str	r3, [sp, #4]
 8004e46:	f000 f8cb 	bl	8004fe0 <_vfiprintf_r>
 8004e4a:	b003      	add	sp, #12
 8004e4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e50:	b004      	add	sp, #16
 8004e52:	4770      	bx	lr
 8004e54:	20000020 	.word	0x20000020

08004e58 <putchar>:
 8004e58:	4b02      	ldr	r3, [pc, #8]	@ (8004e64 <putchar+0xc>)
 8004e5a:	4601      	mov	r1, r0
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	6882      	ldr	r2, [r0, #8]
 8004e60:	f000 bdf8 	b.w	8005a54 <_putc_r>
 8004e64:	20000020 	.word	0x20000020

08004e68 <_puts_r>:
 8004e68:	6a03      	ldr	r3, [r0, #32]
 8004e6a:	b570      	push	{r4, r5, r6, lr}
 8004e6c:	6884      	ldr	r4, [r0, #8]
 8004e6e:	4605      	mov	r5, r0
 8004e70:	460e      	mov	r6, r1
 8004e72:	b90b      	cbnz	r3, 8004e78 <_puts_r+0x10>
 8004e74:	f7ff ffa8 	bl	8004dc8 <__sinit>
 8004e78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004e7a:	07db      	lsls	r3, r3, #31
 8004e7c:	d405      	bmi.n	8004e8a <_puts_r+0x22>
 8004e7e:	89a3      	ldrh	r3, [r4, #12]
 8004e80:	0598      	lsls	r0, r3, #22
 8004e82:	d402      	bmi.n	8004e8a <_puts_r+0x22>
 8004e84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004e86:	f000 f880 	bl	8004f8a <__retarget_lock_acquire_recursive>
 8004e8a:	89a3      	ldrh	r3, [r4, #12]
 8004e8c:	0719      	lsls	r1, r3, #28
 8004e8e:	d502      	bpl.n	8004e96 <_puts_r+0x2e>
 8004e90:	6923      	ldr	r3, [r4, #16]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d135      	bne.n	8004f02 <_puts_r+0x9a>
 8004e96:	4621      	mov	r1, r4
 8004e98:	4628      	mov	r0, r5
 8004e9a:	f000 fd23 	bl	80058e4 <__swsetup_r>
 8004e9e:	b380      	cbz	r0, 8004f02 <_puts_r+0x9a>
 8004ea0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004ea4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004ea6:	07da      	lsls	r2, r3, #31
 8004ea8:	d405      	bmi.n	8004eb6 <_puts_r+0x4e>
 8004eaa:	89a3      	ldrh	r3, [r4, #12]
 8004eac:	059b      	lsls	r3, r3, #22
 8004eae:	d402      	bmi.n	8004eb6 <_puts_r+0x4e>
 8004eb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004eb2:	f000 f86b 	bl	8004f8c <__retarget_lock_release_recursive>
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	bd70      	pop	{r4, r5, r6, pc}
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	da04      	bge.n	8004ec8 <_puts_r+0x60>
 8004ebe:	69a2      	ldr	r2, [r4, #24]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	dc17      	bgt.n	8004ef4 <_puts_r+0x8c>
 8004ec4:	290a      	cmp	r1, #10
 8004ec6:	d015      	beq.n	8004ef4 <_puts_r+0x8c>
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	6022      	str	r2, [r4, #0]
 8004ece:	7019      	strb	r1, [r3, #0]
 8004ed0:	68a3      	ldr	r3, [r4, #8]
 8004ed2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	60a3      	str	r3, [r4, #8]
 8004eda:	2900      	cmp	r1, #0
 8004edc:	d1ed      	bne.n	8004eba <_puts_r+0x52>
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	da11      	bge.n	8004f06 <_puts_r+0x9e>
 8004ee2:	4622      	mov	r2, r4
 8004ee4:	210a      	movs	r1, #10
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	f000 fcbd 	bl	8005866 <__swbuf_r>
 8004eec:	3001      	adds	r0, #1
 8004eee:	d0d7      	beq.n	8004ea0 <_puts_r+0x38>
 8004ef0:	250a      	movs	r5, #10
 8004ef2:	e7d7      	b.n	8004ea4 <_puts_r+0x3c>
 8004ef4:	4622      	mov	r2, r4
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	f000 fcb5 	bl	8005866 <__swbuf_r>
 8004efc:	3001      	adds	r0, #1
 8004efe:	d1e7      	bne.n	8004ed0 <_puts_r+0x68>
 8004f00:	e7ce      	b.n	8004ea0 <_puts_r+0x38>
 8004f02:	3e01      	subs	r6, #1
 8004f04:	e7e4      	b.n	8004ed0 <_puts_r+0x68>
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	1c5a      	adds	r2, r3, #1
 8004f0a:	6022      	str	r2, [r4, #0]
 8004f0c:	220a      	movs	r2, #10
 8004f0e:	701a      	strb	r2, [r3, #0]
 8004f10:	e7ee      	b.n	8004ef0 <_puts_r+0x88>
	...

08004f14 <puts>:
 8004f14:	4b02      	ldr	r3, [pc, #8]	@ (8004f20 <puts+0xc>)
 8004f16:	4601      	mov	r1, r0
 8004f18:	6818      	ldr	r0, [r3, #0]
 8004f1a:	f7ff bfa5 	b.w	8004e68 <_puts_r>
 8004f1e:	bf00      	nop
 8004f20:	20000020 	.word	0x20000020

08004f24 <memset>:
 8004f24:	4402      	add	r2, r0
 8004f26:	4603      	mov	r3, r0
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d100      	bne.n	8004f2e <memset+0xa>
 8004f2c:	4770      	bx	lr
 8004f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8004f32:	e7f9      	b.n	8004f28 <memset+0x4>

08004f34 <__errno>:
 8004f34:	4b01      	ldr	r3, [pc, #4]	@ (8004f3c <__errno+0x8>)
 8004f36:	6818      	ldr	r0, [r3, #0]
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	20000020 	.word	0x20000020

08004f40 <__libc_init_array>:
 8004f40:	b570      	push	{r4, r5, r6, lr}
 8004f42:	4d0d      	ldr	r5, [pc, #52]	@ (8004f78 <__libc_init_array+0x38>)
 8004f44:	4c0d      	ldr	r4, [pc, #52]	@ (8004f7c <__libc_init_array+0x3c>)
 8004f46:	1b64      	subs	r4, r4, r5
 8004f48:	10a4      	asrs	r4, r4, #2
 8004f4a:	2600      	movs	r6, #0
 8004f4c:	42a6      	cmp	r6, r4
 8004f4e:	d109      	bne.n	8004f64 <__libc_init_array+0x24>
 8004f50:	4d0b      	ldr	r5, [pc, #44]	@ (8004f80 <__libc_init_array+0x40>)
 8004f52:	4c0c      	ldr	r4, [pc, #48]	@ (8004f84 <__libc_init_array+0x44>)
 8004f54:	f000 fe74 	bl	8005c40 <_init>
 8004f58:	1b64      	subs	r4, r4, r5
 8004f5a:	10a4      	asrs	r4, r4, #2
 8004f5c:	2600      	movs	r6, #0
 8004f5e:	42a6      	cmp	r6, r4
 8004f60:	d105      	bne.n	8004f6e <__libc_init_array+0x2e>
 8004f62:	bd70      	pop	{r4, r5, r6, pc}
 8004f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f68:	4798      	blx	r3
 8004f6a:	3601      	adds	r6, #1
 8004f6c:	e7ee      	b.n	8004f4c <__libc_init_array+0xc>
 8004f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f72:	4798      	blx	r3
 8004f74:	3601      	adds	r6, #1
 8004f76:	e7f2      	b.n	8004f5e <__libc_init_array+0x1e>
 8004f78:	08005d58 	.word	0x08005d58
 8004f7c:	08005d58 	.word	0x08005d58
 8004f80:	08005d58 	.word	0x08005d58
 8004f84:	08005d5c 	.word	0x08005d5c

08004f88 <__retarget_lock_init_recursive>:
 8004f88:	4770      	bx	lr

08004f8a <__retarget_lock_acquire_recursive>:
 8004f8a:	4770      	bx	lr

08004f8c <__retarget_lock_release_recursive>:
 8004f8c:	4770      	bx	lr

08004f8e <__sfputc_r>:
 8004f8e:	6893      	ldr	r3, [r2, #8]
 8004f90:	3b01      	subs	r3, #1
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	b410      	push	{r4}
 8004f96:	6093      	str	r3, [r2, #8]
 8004f98:	da08      	bge.n	8004fac <__sfputc_r+0x1e>
 8004f9a:	6994      	ldr	r4, [r2, #24]
 8004f9c:	42a3      	cmp	r3, r4
 8004f9e:	db01      	blt.n	8004fa4 <__sfputc_r+0x16>
 8004fa0:	290a      	cmp	r1, #10
 8004fa2:	d103      	bne.n	8004fac <__sfputc_r+0x1e>
 8004fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fa8:	f000 bc5d 	b.w	8005866 <__swbuf_r>
 8004fac:	6813      	ldr	r3, [r2, #0]
 8004fae:	1c58      	adds	r0, r3, #1
 8004fb0:	6010      	str	r0, [r2, #0]
 8004fb2:	7019      	strb	r1, [r3, #0]
 8004fb4:	4608      	mov	r0, r1
 8004fb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <__sfputs_r>:
 8004fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fbe:	4606      	mov	r6, r0
 8004fc0:	460f      	mov	r7, r1
 8004fc2:	4614      	mov	r4, r2
 8004fc4:	18d5      	adds	r5, r2, r3
 8004fc6:	42ac      	cmp	r4, r5
 8004fc8:	d101      	bne.n	8004fce <__sfputs_r+0x12>
 8004fca:	2000      	movs	r0, #0
 8004fcc:	e007      	b.n	8004fde <__sfputs_r+0x22>
 8004fce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fd2:	463a      	mov	r2, r7
 8004fd4:	4630      	mov	r0, r6
 8004fd6:	f7ff ffda 	bl	8004f8e <__sfputc_r>
 8004fda:	1c43      	adds	r3, r0, #1
 8004fdc:	d1f3      	bne.n	8004fc6 <__sfputs_r+0xa>
 8004fde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004fe0 <_vfiprintf_r>:
 8004fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe4:	460d      	mov	r5, r1
 8004fe6:	b09d      	sub	sp, #116	@ 0x74
 8004fe8:	4614      	mov	r4, r2
 8004fea:	4698      	mov	r8, r3
 8004fec:	4606      	mov	r6, r0
 8004fee:	b118      	cbz	r0, 8004ff8 <_vfiprintf_r+0x18>
 8004ff0:	6a03      	ldr	r3, [r0, #32]
 8004ff2:	b90b      	cbnz	r3, 8004ff8 <_vfiprintf_r+0x18>
 8004ff4:	f7ff fee8 	bl	8004dc8 <__sinit>
 8004ff8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ffa:	07d9      	lsls	r1, r3, #31
 8004ffc:	d405      	bmi.n	800500a <_vfiprintf_r+0x2a>
 8004ffe:	89ab      	ldrh	r3, [r5, #12]
 8005000:	059a      	lsls	r2, r3, #22
 8005002:	d402      	bmi.n	800500a <_vfiprintf_r+0x2a>
 8005004:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005006:	f7ff ffc0 	bl	8004f8a <__retarget_lock_acquire_recursive>
 800500a:	89ab      	ldrh	r3, [r5, #12]
 800500c:	071b      	lsls	r3, r3, #28
 800500e:	d501      	bpl.n	8005014 <_vfiprintf_r+0x34>
 8005010:	692b      	ldr	r3, [r5, #16]
 8005012:	b99b      	cbnz	r3, 800503c <_vfiprintf_r+0x5c>
 8005014:	4629      	mov	r1, r5
 8005016:	4630      	mov	r0, r6
 8005018:	f000 fc64 	bl	80058e4 <__swsetup_r>
 800501c:	b170      	cbz	r0, 800503c <_vfiprintf_r+0x5c>
 800501e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005020:	07dc      	lsls	r4, r3, #31
 8005022:	d504      	bpl.n	800502e <_vfiprintf_r+0x4e>
 8005024:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005028:	b01d      	add	sp, #116	@ 0x74
 800502a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800502e:	89ab      	ldrh	r3, [r5, #12]
 8005030:	0598      	lsls	r0, r3, #22
 8005032:	d4f7      	bmi.n	8005024 <_vfiprintf_r+0x44>
 8005034:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005036:	f7ff ffa9 	bl	8004f8c <__retarget_lock_release_recursive>
 800503a:	e7f3      	b.n	8005024 <_vfiprintf_r+0x44>
 800503c:	2300      	movs	r3, #0
 800503e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005040:	2320      	movs	r3, #32
 8005042:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005046:	f8cd 800c 	str.w	r8, [sp, #12]
 800504a:	2330      	movs	r3, #48	@ 0x30
 800504c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80051fc <_vfiprintf_r+0x21c>
 8005050:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005054:	f04f 0901 	mov.w	r9, #1
 8005058:	4623      	mov	r3, r4
 800505a:	469a      	mov	sl, r3
 800505c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005060:	b10a      	cbz	r2, 8005066 <_vfiprintf_r+0x86>
 8005062:	2a25      	cmp	r2, #37	@ 0x25
 8005064:	d1f9      	bne.n	800505a <_vfiprintf_r+0x7a>
 8005066:	ebba 0b04 	subs.w	fp, sl, r4
 800506a:	d00b      	beq.n	8005084 <_vfiprintf_r+0xa4>
 800506c:	465b      	mov	r3, fp
 800506e:	4622      	mov	r2, r4
 8005070:	4629      	mov	r1, r5
 8005072:	4630      	mov	r0, r6
 8005074:	f7ff ffa2 	bl	8004fbc <__sfputs_r>
 8005078:	3001      	adds	r0, #1
 800507a:	f000 80a7 	beq.w	80051cc <_vfiprintf_r+0x1ec>
 800507e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005080:	445a      	add	r2, fp
 8005082:	9209      	str	r2, [sp, #36]	@ 0x24
 8005084:	f89a 3000 	ldrb.w	r3, [sl]
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 809f 	beq.w	80051cc <_vfiprintf_r+0x1ec>
 800508e:	2300      	movs	r3, #0
 8005090:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005094:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005098:	f10a 0a01 	add.w	sl, sl, #1
 800509c:	9304      	str	r3, [sp, #16]
 800509e:	9307      	str	r3, [sp, #28]
 80050a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80050a4:	931a      	str	r3, [sp, #104]	@ 0x68
 80050a6:	4654      	mov	r4, sl
 80050a8:	2205      	movs	r2, #5
 80050aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050ae:	4853      	ldr	r0, [pc, #332]	@ (80051fc <_vfiprintf_r+0x21c>)
 80050b0:	f7fb f8a6 	bl	8000200 <memchr>
 80050b4:	9a04      	ldr	r2, [sp, #16]
 80050b6:	b9d8      	cbnz	r0, 80050f0 <_vfiprintf_r+0x110>
 80050b8:	06d1      	lsls	r1, r2, #27
 80050ba:	bf44      	itt	mi
 80050bc:	2320      	movmi	r3, #32
 80050be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050c2:	0713      	lsls	r3, r2, #28
 80050c4:	bf44      	itt	mi
 80050c6:	232b      	movmi	r3, #43	@ 0x2b
 80050c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80050cc:	f89a 3000 	ldrb.w	r3, [sl]
 80050d0:	2b2a      	cmp	r3, #42	@ 0x2a
 80050d2:	d015      	beq.n	8005100 <_vfiprintf_r+0x120>
 80050d4:	9a07      	ldr	r2, [sp, #28]
 80050d6:	4654      	mov	r4, sl
 80050d8:	2000      	movs	r0, #0
 80050da:	f04f 0c0a 	mov.w	ip, #10
 80050de:	4621      	mov	r1, r4
 80050e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050e4:	3b30      	subs	r3, #48	@ 0x30
 80050e6:	2b09      	cmp	r3, #9
 80050e8:	d94b      	bls.n	8005182 <_vfiprintf_r+0x1a2>
 80050ea:	b1b0      	cbz	r0, 800511a <_vfiprintf_r+0x13a>
 80050ec:	9207      	str	r2, [sp, #28]
 80050ee:	e014      	b.n	800511a <_vfiprintf_r+0x13a>
 80050f0:	eba0 0308 	sub.w	r3, r0, r8
 80050f4:	fa09 f303 	lsl.w	r3, r9, r3
 80050f8:	4313      	orrs	r3, r2
 80050fa:	9304      	str	r3, [sp, #16]
 80050fc:	46a2      	mov	sl, r4
 80050fe:	e7d2      	b.n	80050a6 <_vfiprintf_r+0xc6>
 8005100:	9b03      	ldr	r3, [sp, #12]
 8005102:	1d19      	adds	r1, r3, #4
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	9103      	str	r1, [sp, #12]
 8005108:	2b00      	cmp	r3, #0
 800510a:	bfbb      	ittet	lt
 800510c:	425b      	neglt	r3, r3
 800510e:	f042 0202 	orrlt.w	r2, r2, #2
 8005112:	9307      	strge	r3, [sp, #28]
 8005114:	9307      	strlt	r3, [sp, #28]
 8005116:	bfb8      	it	lt
 8005118:	9204      	strlt	r2, [sp, #16]
 800511a:	7823      	ldrb	r3, [r4, #0]
 800511c:	2b2e      	cmp	r3, #46	@ 0x2e
 800511e:	d10a      	bne.n	8005136 <_vfiprintf_r+0x156>
 8005120:	7863      	ldrb	r3, [r4, #1]
 8005122:	2b2a      	cmp	r3, #42	@ 0x2a
 8005124:	d132      	bne.n	800518c <_vfiprintf_r+0x1ac>
 8005126:	9b03      	ldr	r3, [sp, #12]
 8005128:	1d1a      	adds	r2, r3, #4
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	9203      	str	r2, [sp, #12]
 800512e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005132:	3402      	adds	r4, #2
 8005134:	9305      	str	r3, [sp, #20]
 8005136:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800520c <_vfiprintf_r+0x22c>
 800513a:	7821      	ldrb	r1, [r4, #0]
 800513c:	2203      	movs	r2, #3
 800513e:	4650      	mov	r0, sl
 8005140:	f7fb f85e 	bl	8000200 <memchr>
 8005144:	b138      	cbz	r0, 8005156 <_vfiprintf_r+0x176>
 8005146:	9b04      	ldr	r3, [sp, #16]
 8005148:	eba0 000a 	sub.w	r0, r0, sl
 800514c:	2240      	movs	r2, #64	@ 0x40
 800514e:	4082      	lsls	r2, r0
 8005150:	4313      	orrs	r3, r2
 8005152:	3401      	adds	r4, #1
 8005154:	9304      	str	r3, [sp, #16]
 8005156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800515a:	4829      	ldr	r0, [pc, #164]	@ (8005200 <_vfiprintf_r+0x220>)
 800515c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005160:	2206      	movs	r2, #6
 8005162:	f7fb f84d 	bl	8000200 <memchr>
 8005166:	2800      	cmp	r0, #0
 8005168:	d03f      	beq.n	80051ea <_vfiprintf_r+0x20a>
 800516a:	4b26      	ldr	r3, [pc, #152]	@ (8005204 <_vfiprintf_r+0x224>)
 800516c:	bb1b      	cbnz	r3, 80051b6 <_vfiprintf_r+0x1d6>
 800516e:	9b03      	ldr	r3, [sp, #12]
 8005170:	3307      	adds	r3, #7
 8005172:	f023 0307 	bic.w	r3, r3, #7
 8005176:	3308      	adds	r3, #8
 8005178:	9303      	str	r3, [sp, #12]
 800517a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800517c:	443b      	add	r3, r7
 800517e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005180:	e76a      	b.n	8005058 <_vfiprintf_r+0x78>
 8005182:	fb0c 3202 	mla	r2, ip, r2, r3
 8005186:	460c      	mov	r4, r1
 8005188:	2001      	movs	r0, #1
 800518a:	e7a8      	b.n	80050de <_vfiprintf_r+0xfe>
 800518c:	2300      	movs	r3, #0
 800518e:	3401      	adds	r4, #1
 8005190:	9305      	str	r3, [sp, #20]
 8005192:	4619      	mov	r1, r3
 8005194:	f04f 0c0a 	mov.w	ip, #10
 8005198:	4620      	mov	r0, r4
 800519a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800519e:	3a30      	subs	r2, #48	@ 0x30
 80051a0:	2a09      	cmp	r2, #9
 80051a2:	d903      	bls.n	80051ac <_vfiprintf_r+0x1cc>
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d0c6      	beq.n	8005136 <_vfiprintf_r+0x156>
 80051a8:	9105      	str	r1, [sp, #20]
 80051aa:	e7c4      	b.n	8005136 <_vfiprintf_r+0x156>
 80051ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80051b0:	4604      	mov	r4, r0
 80051b2:	2301      	movs	r3, #1
 80051b4:	e7f0      	b.n	8005198 <_vfiprintf_r+0x1b8>
 80051b6:	ab03      	add	r3, sp, #12
 80051b8:	9300      	str	r3, [sp, #0]
 80051ba:	462a      	mov	r2, r5
 80051bc:	4b12      	ldr	r3, [pc, #72]	@ (8005208 <_vfiprintf_r+0x228>)
 80051be:	a904      	add	r1, sp, #16
 80051c0:	4630      	mov	r0, r6
 80051c2:	f3af 8000 	nop.w
 80051c6:	4607      	mov	r7, r0
 80051c8:	1c78      	adds	r0, r7, #1
 80051ca:	d1d6      	bne.n	800517a <_vfiprintf_r+0x19a>
 80051cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051ce:	07d9      	lsls	r1, r3, #31
 80051d0:	d405      	bmi.n	80051de <_vfiprintf_r+0x1fe>
 80051d2:	89ab      	ldrh	r3, [r5, #12]
 80051d4:	059a      	lsls	r2, r3, #22
 80051d6:	d402      	bmi.n	80051de <_vfiprintf_r+0x1fe>
 80051d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051da:	f7ff fed7 	bl	8004f8c <__retarget_lock_release_recursive>
 80051de:	89ab      	ldrh	r3, [r5, #12]
 80051e0:	065b      	lsls	r3, r3, #25
 80051e2:	f53f af1f 	bmi.w	8005024 <_vfiprintf_r+0x44>
 80051e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80051e8:	e71e      	b.n	8005028 <_vfiprintf_r+0x48>
 80051ea:	ab03      	add	r3, sp, #12
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	462a      	mov	r2, r5
 80051f0:	4b05      	ldr	r3, [pc, #20]	@ (8005208 <_vfiprintf_r+0x228>)
 80051f2:	a904      	add	r1, sp, #16
 80051f4:	4630      	mov	r0, r6
 80051f6:	f000 f91b 	bl	8005430 <_printf_i>
 80051fa:	e7e4      	b.n	80051c6 <_vfiprintf_r+0x1e6>
 80051fc:	08005d1a 	.word	0x08005d1a
 8005200:	08005d24 	.word	0x08005d24
 8005204:	00000000 	.word	0x00000000
 8005208:	08004fbd 	.word	0x08004fbd
 800520c:	08005d20 	.word	0x08005d20

08005210 <sbrk_aligned>:
 8005210:	b570      	push	{r4, r5, r6, lr}
 8005212:	4e0f      	ldr	r6, [pc, #60]	@ (8005250 <sbrk_aligned+0x40>)
 8005214:	460c      	mov	r4, r1
 8005216:	6831      	ldr	r1, [r6, #0]
 8005218:	4605      	mov	r5, r0
 800521a:	b911      	cbnz	r1, 8005222 <sbrk_aligned+0x12>
 800521c:	f000 fca4 	bl	8005b68 <_sbrk_r>
 8005220:	6030      	str	r0, [r6, #0]
 8005222:	4621      	mov	r1, r4
 8005224:	4628      	mov	r0, r5
 8005226:	f000 fc9f 	bl	8005b68 <_sbrk_r>
 800522a:	1c43      	adds	r3, r0, #1
 800522c:	d103      	bne.n	8005236 <sbrk_aligned+0x26>
 800522e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8005232:	4620      	mov	r0, r4
 8005234:	bd70      	pop	{r4, r5, r6, pc}
 8005236:	1cc4      	adds	r4, r0, #3
 8005238:	f024 0403 	bic.w	r4, r4, #3
 800523c:	42a0      	cmp	r0, r4
 800523e:	d0f8      	beq.n	8005232 <sbrk_aligned+0x22>
 8005240:	1a21      	subs	r1, r4, r0
 8005242:	4628      	mov	r0, r5
 8005244:	f000 fc90 	bl	8005b68 <_sbrk_r>
 8005248:	3001      	adds	r0, #1
 800524a:	d1f2      	bne.n	8005232 <sbrk_aligned+0x22>
 800524c:	e7ef      	b.n	800522e <sbrk_aligned+0x1e>
 800524e:	bf00      	nop
 8005250:	20000544 	.word	0x20000544

08005254 <_malloc_r>:
 8005254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005258:	1ccd      	adds	r5, r1, #3
 800525a:	f025 0503 	bic.w	r5, r5, #3
 800525e:	3508      	adds	r5, #8
 8005260:	2d0c      	cmp	r5, #12
 8005262:	bf38      	it	cc
 8005264:	250c      	movcc	r5, #12
 8005266:	2d00      	cmp	r5, #0
 8005268:	4606      	mov	r6, r0
 800526a:	db01      	blt.n	8005270 <_malloc_r+0x1c>
 800526c:	42a9      	cmp	r1, r5
 800526e:	d904      	bls.n	800527a <_malloc_r+0x26>
 8005270:	230c      	movs	r3, #12
 8005272:	6033      	str	r3, [r6, #0]
 8005274:	2000      	movs	r0, #0
 8005276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800527a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005350 <_malloc_r+0xfc>
 800527e:	f000 faa3 	bl	80057c8 <__malloc_lock>
 8005282:	f8d8 3000 	ldr.w	r3, [r8]
 8005286:	461c      	mov	r4, r3
 8005288:	bb44      	cbnz	r4, 80052dc <_malloc_r+0x88>
 800528a:	4629      	mov	r1, r5
 800528c:	4630      	mov	r0, r6
 800528e:	f7ff ffbf 	bl	8005210 <sbrk_aligned>
 8005292:	1c43      	adds	r3, r0, #1
 8005294:	4604      	mov	r4, r0
 8005296:	d158      	bne.n	800534a <_malloc_r+0xf6>
 8005298:	f8d8 4000 	ldr.w	r4, [r8]
 800529c:	4627      	mov	r7, r4
 800529e:	2f00      	cmp	r7, #0
 80052a0:	d143      	bne.n	800532a <_malloc_r+0xd6>
 80052a2:	2c00      	cmp	r4, #0
 80052a4:	d04b      	beq.n	800533e <_malloc_r+0xea>
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	4639      	mov	r1, r7
 80052aa:	4630      	mov	r0, r6
 80052ac:	eb04 0903 	add.w	r9, r4, r3
 80052b0:	f000 fc5a 	bl	8005b68 <_sbrk_r>
 80052b4:	4581      	cmp	r9, r0
 80052b6:	d142      	bne.n	800533e <_malloc_r+0xea>
 80052b8:	6821      	ldr	r1, [r4, #0]
 80052ba:	1a6d      	subs	r5, r5, r1
 80052bc:	4629      	mov	r1, r5
 80052be:	4630      	mov	r0, r6
 80052c0:	f7ff ffa6 	bl	8005210 <sbrk_aligned>
 80052c4:	3001      	adds	r0, #1
 80052c6:	d03a      	beq.n	800533e <_malloc_r+0xea>
 80052c8:	6823      	ldr	r3, [r4, #0]
 80052ca:	442b      	add	r3, r5
 80052cc:	6023      	str	r3, [r4, #0]
 80052ce:	f8d8 3000 	ldr.w	r3, [r8]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	bb62      	cbnz	r2, 8005330 <_malloc_r+0xdc>
 80052d6:	f8c8 7000 	str.w	r7, [r8]
 80052da:	e00f      	b.n	80052fc <_malloc_r+0xa8>
 80052dc:	6822      	ldr	r2, [r4, #0]
 80052de:	1b52      	subs	r2, r2, r5
 80052e0:	d420      	bmi.n	8005324 <_malloc_r+0xd0>
 80052e2:	2a0b      	cmp	r2, #11
 80052e4:	d917      	bls.n	8005316 <_malloc_r+0xc2>
 80052e6:	1961      	adds	r1, r4, r5
 80052e8:	42a3      	cmp	r3, r4
 80052ea:	6025      	str	r5, [r4, #0]
 80052ec:	bf18      	it	ne
 80052ee:	6059      	strne	r1, [r3, #4]
 80052f0:	6863      	ldr	r3, [r4, #4]
 80052f2:	bf08      	it	eq
 80052f4:	f8c8 1000 	streq.w	r1, [r8]
 80052f8:	5162      	str	r2, [r4, r5]
 80052fa:	604b      	str	r3, [r1, #4]
 80052fc:	4630      	mov	r0, r6
 80052fe:	f000 fa69 	bl	80057d4 <__malloc_unlock>
 8005302:	f104 000b 	add.w	r0, r4, #11
 8005306:	1d23      	adds	r3, r4, #4
 8005308:	f020 0007 	bic.w	r0, r0, #7
 800530c:	1ac2      	subs	r2, r0, r3
 800530e:	bf1c      	itt	ne
 8005310:	1a1b      	subne	r3, r3, r0
 8005312:	50a3      	strne	r3, [r4, r2]
 8005314:	e7af      	b.n	8005276 <_malloc_r+0x22>
 8005316:	6862      	ldr	r2, [r4, #4]
 8005318:	42a3      	cmp	r3, r4
 800531a:	bf0c      	ite	eq
 800531c:	f8c8 2000 	streq.w	r2, [r8]
 8005320:	605a      	strne	r2, [r3, #4]
 8005322:	e7eb      	b.n	80052fc <_malloc_r+0xa8>
 8005324:	4623      	mov	r3, r4
 8005326:	6864      	ldr	r4, [r4, #4]
 8005328:	e7ae      	b.n	8005288 <_malloc_r+0x34>
 800532a:	463c      	mov	r4, r7
 800532c:	687f      	ldr	r7, [r7, #4]
 800532e:	e7b6      	b.n	800529e <_malloc_r+0x4a>
 8005330:	461a      	mov	r2, r3
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	42a3      	cmp	r3, r4
 8005336:	d1fb      	bne.n	8005330 <_malloc_r+0xdc>
 8005338:	2300      	movs	r3, #0
 800533a:	6053      	str	r3, [r2, #4]
 800533c:	e7de      	b.n	80052fc <_malloc_r+0xa8>
 800533e:	230c      	movs	r3, #12
 8005340:	6033      	str	r3, [r6, #0]
 8005342:	4630      	mov	r0, r6
 8005344:	f000 fa46 	bl	80057d4 <__malloc_unlock>
 8005348:	e794      	b.n	8005274 <_malloc_r+0x20>
 800534a:	6005      	str	r5, [r0, #0]
 800534c:	e7d6      	b.n	80052fc <_malloc_r+0xa8>
 800534e:	bf00      	nop
 8005350:	20000548 	.word	0x20000548

08005354 <_printf_common>:
 8005354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005358:	4616      	mov	r6, r2
 800535a:	4698      	mov	r8, r3
 800535c:	688a      	ldr	r2, [r1, #8]
 800535e:	690b      	ldr	r3, [r1, #16]
 8005360:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005364:	4293      	cmp	r3, r2
 8005366:	bfb8      	it	lt
 8005368:	4613      	movlt	r3, r2
 800536a:	6033      	str	r3, [r6, #0]
 800536c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005370:	4607      	mov	r7, r0
 8005372:	460c      	mov	r4, r1
 8005374:	b10a      	cbz	r2, 800537a <_printf_common+0x26>
 8005376:	3301      	adds	r3, #1
 8005378:	6033      	str	r3, [r6, #0]
 800537a:	6823      	ldr	r3, [r4, #0]
 800537c:	0699      	lsls	r1, r3, #26
 800537e:	bf42      	ittt	mi
 8005380:	6833      	ldrmi	r3, [r6, #0]
 8005382:	3302      	addmi	r3, #2
 8005384:	6033      	strmi	r3, [r6, #0]
 8005386:	6825      	ldr	r5, [r4, #0]
 8005388:	f015 0506 	ands.w	r5, r5, #6
 800538c:	d106      	bne.n	800539c <_printf_common+0x48>
 800538e:	f104 0a19 	add.w	sl, r4, #25
 8005392:	68e3      	ldr	r3, [r4, #12]
 8005394:	6832      	ldr	r2, [r6, #0]
 8005396:	1a9b      	subs	r3, r3, r2
 8005398:	42ab      	cmp	r3, r5
 800539a:	dc26      	bgt.n	80053ea <_printf_common+0x96>
 800539c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80053a0:	6822      	ldr	r2, [r4, #0]
 80053a2:	3b00      	subs	r3, #0
 80053a4:	bf18      	it	ne
 80053a6:	2301      	movne	r3, #1
 80053a8:	0692      	lsls	r2, r2, #26
 80053aa:	d42b      	bmi.n	8005404 <_printf_common+0xb0>
 80053ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80053b0:	4641      	mov	r1, r8
 80053b2:	4638      	mov	r0, r7
 80053b4:	47c8      	blx	r9
 80053b6:	3001      	adds	r0, #1
 80053b8:	d01e      	beq.n	80053f8 <_printf_common+0xa4>
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	6922      	ldr	r2, [r4, #16]
 80053be:	f003 0306 	and.w	r3, r3, #6
 80053c2:	2b04      	cmp	r3, #4
 80053c4:	bf02      	ittt	eq
 80053c6:	68e5      	ldreq	r5, [r4, #12]
 80053c8:	6833      	ldreq	r3, [r6, #0]
 80053ca:	1aed      	subeq	r5, r5, r3
 80053cc:	68a3      	ldr	r3, [r4, #8]
 80053ce:	bf0c      	ite	eq
 80053d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053d4:	2500      	movne	r5, #0
 80053d6:	4293      	cmp	r3, r2
 80053d8:	bfc4      	itt	gt
 80053da:	1a9b      	subgt	r3, r3, r2
 80053dc:	18ed      	addgt	r5, r5, r3
 80053de:	2600      	movs	r6, #0
 80053e0:	341a      	adds	r4, #26
 80053e2:	42b5      	cmp	r5, r6
 80053e4:	d11a      	bne.n	800541c <_printf_common+0xc8>
 80053e6:	2000      	movs	r0, #0
 80053e8:	e008      	b.n	80053fc <_printf_common+0xa8>
 80053ea:	2301      	movs	r3, #1
 80053ec:	4652      	mov	r2, sl
 80053ee:	4641      	mov	r1, r8
 80053f0:	4638      	mov	r0, r7
 80053f2:	47c8      	blx	r9
 80053f4:	3001      	adds	r0, #1
 80053f6:	d103      	bne.n	8005400 <_printf_common+0xac>
 80053f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80053fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005400:	3501      	adds	r5, #1
 8005402:	e7c6      	b.n	8005392 <_printf_common+0x3e>
 8005404:	18e1      	adds	r1, r4, r3
 8005406:	1c5a      	adds	r2, r3, #1
 8005408:	2030      	movs	r0, #48	@ 0x30
 800540a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800540e:	4422      	add	r2, r4
 8005410:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005414:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005418:	3302      	adds	r3, #2
 800541a:	e7c7      	b.n	80053ac <_printf_common+0x58>
 800541c:	2301      	movs	r3, #1
 800541e:	4622      	mov	r2, r4
 8005420:	4641      	mov	r1, r8
 8005422:	4638      	mov	r0, r7
 8005424:	47c8      	blx	r9
 8005426:	3001      	adds	r0, #1
 8005428:	d0e6      	beq.n	80053f8 <_printf_common+0xa4>
 800542a:	3601      	adds	r6, #1
 800542c:	e7d9      	b.n	80053e2 <_printf_common+0x8e>
	...

08005430 <_printf_i>:
 8005430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005434:	7e0f      	ldrb	r7, [r1, #24]
 8005436:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005438:	2f78      	cmp	r7, #120	@ 0x78
 800543a:	4691      	mov	r9, r2
 800543c:	4680      	mov	r8, r0
 800543e:	460c      	mov	r4, r1
 8005440:	469a      	mov	sl, r3
 8005442:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005446:	d807      	bhi.n	8005458 <_printf_i+0x28>
 8005448:	2f62      	cmp	r7, #98	@ 0x62
 800544a:	d80a      	bhi.n	8005462 <_printf_i+0x32>
 800544c:	2f00      	cmp	r7, #0
 800544e:	f000 80d2 	beq.w	80055f6 <_printf_i+0x1c6>
 8005452:	2f58      	cmp	r7, #88	@ 0x58
 8005454:	f000 80b9 	beq.w	80055ca <_printf_i+0x19a>
 8005458:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800545c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005460:	e03a      	b.n	80054d8 <_printf_i+0xa8>
 8005462:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005466:	2b15      	cmp	r3, #21
 8005468:	d8f6      	bhi.n	8005458 <_printf_i+0x28>
 800546a:	a101      	add	r1, pc, #4	@ (adr r1, 8005470 <_printf_i+0x40>)
 800546c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005470:	080054c9 	.word	0x080054c9
 8005474:	080054dd 	.word	0x080054dd
 8005478:	08005459 	.word	0x08005459
 800547c:	08005459 	.word	0x08005459
 8005480:	08005459 	.word	0x08005459
 8005484:	08005459 	.word	0x08005459
 8005488:	080054dd 	.word	0x080054dd
 800548c:	08005459 	.word	0x08005459
 8005490:	08005459 	.word	0x08005459
 8005494:	08005459 	.word	0x08005459
 8005498:	08005459 	.word	0x08005459
 800549c:	080055dd 	.word	0x080055dd
 80054a0:	08005507 	.word	0x08005507
 80054a4:	08005597 	.word	0x08005597
 80054a8:	08005459 	.word	0x08005459
 80054ac:	08005459 	.word	0x08005459
 80054b0:	080055ff 	.word	0x080055ff
 80054b4:	08005459 	.word	0x08005459
 80054b8:	08005507 	.word	0x08005507
 80054bc:	08005459 	.word	0x08005459
 80054c0:	08005459 	.word	0x08005459
 80054c4:	0800559f 	.word	0x0800559f
 80054c8:	6833      	ldr	r3, [r6, #0]
 80054ca:	1d1a      	adds	r2, r3, #4
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	6032      	str	r2, [r6, #0]
 80054d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054d8:	2301      	movs	r3, #1
 80054da:	e09d      	b.n	8005618 <_printf_i+0x1e8>
 80054dc:	6833      	ldr	r3, [r6, #0]
 80054de:	6820      	ldr	r0, [r4, #0]
 80054e0:	1d19      	adds	r1, r3, #4
 80054e2:	6031      	str	r1, [r6, #0]
 80054e4:	0606      	lsls	r6, r0, #24
 80054e6:	d501      	bpl.n	80054ec <_printf_i+0xbc>
 80054e8:	681d      	ldr	r5, [r3, #0]
 80054ea:	e003      	b.n	80054f4 <_printf_i+0xc4>
 80054ec:	0645      	lsls	r5, r0, #25
 80054ee:	d5fb      	bpl.n	80054e8 <_printf_i+0xb8>
 80054f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054f4:	2d00      	cmp	r5, #0
 80054f6:	da03      	bge.n	8005500 <_printf_i+0xd0>
 80054f8:	232d      	movs	r3, #45	@ 0x2d
 80054fa:	426d      	negs	r5, r5
 80054fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005500:	4859      	ldr	r0, [pc, #356]	@ (8005668 <_printf_i+0x238>)
 8005502:	230a      	movs	r3, #10
 8005504:	e011      	b.n	800552a <_printf_i+0xfa>
 8005506:	6821      	ldr	r1, [r4, #0]
 8005508:	6833      	ldr	r3, [r6, #0]
 800550a:	0608      	lsls	r0, r1, #24
 800550c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005510:	d402      	bmi.n	8005518 <_printf_i+0xe8>
 8005512:	0649      	lsls	r1, r1, #25
 8005514:	bf48      	it	mi
 8005516:	b2ad      	uxthmi	r5, r5
 8005518:	2f6f      	cmp	r7, #111	@ 0x6f
 800551a:	4853      	ldr	r0, [pc, #332]	@ (8005668 <_printf_i+0x238>)
 800551c:	6033      	str	r3, [r6, #0]
 800551e:	bf14      	ite	ne
 8005520:	230a      	movne	r3, #10
 8005522:	2308      	moveq	r3, #8
 8005524:	2100      	movs	r1, #0
 8005526:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800552a:	6866      	ldr	r6, [r4, #4]
 800552c:	60a6      	str	r6, [r4, #8]
 800552e:	2e00      	cmp	r6, #0
 8005530:	bfa2      	ittt	ge
 8005532:	6821      	ldrge	r1, [r4, #0]
 8005534:	f021 0104 	bicge.w	r1, r1, #4
 8005538:	6021      	strge	r1, [r4, #0]
 800553a:	b90d      	cbnz	r5, 8005540 <_printf_i+0x110>
 800553c:	2e00      	cmp	r6, #0
 800553e:	d04b      	beq.n	80055d8 <_printf_i+0x1a8>
 8005540:	4616      	mov	r6, r2
 8005542:	fbb5 f1f3 	udiv	r1, r5, r3
 8005546:	fb03 5711 	mls	r7, r3, r1, r5
 800554a:	5dc7      	ldrb	r7, [r0, r7]
 800554c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005550:	462f      	mov	r7, r5
 8005552:	42bb      	cmp	r3, r7
 8005554:	460d      	mov	r5, r1
 8005556:	d9f4      	bls.n	8005542 <_printf_i+0x112>
 8005558:	2b08      	cmp	r3, #8
 800555a:	d10b      	bne.n	8005574 <_printf_i+0x144>
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	07df      	lsls	r7, r3, #31
 8005560:	d508      	bpl.n	8005574 <_printf_i+0x144>
 8005562:	6923      	ldr	r3, [r4, #16]
 8005564:	6861      	ldr	r1, [r4, #4]
 8005566:	4299      	cmp	r1, r3
 8005568:	bfde      	ittt	le
 800556a:	2330      	movle	r3, #48	@ 0x30
 800556c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005570:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005574:	1b92      	subs	r2, r2, r6
 8005576:	6122      	str	r2, [r4, #16]
 8005578:	f8cd a000 	str.w	sl, [sp]
 800557c:	464b      	mov	r3, r9
 800557e:	aa03      	add	r2, sp, #12
 8005580:	4621      	mov	r1, r4
 8005582:	4640      	mov	r0, r8
 8005584:	f7ff fee6 	bl	8005354 <_printf_common>
 8005588:	3001      	adds	r0, #1
 800558a:	d14a      	bne.n	8005622 <_printf_i+0x1f2>
 800558c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005590:	b004      	add	sp, #16
 8005592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	f043 0320 	orr.w	r3, r3, #32
 800559c:	6023      	str	r3, [r4, #0]
 800559e:	4833      	ldr	r0, [pc, #204]	@ (800566c <_printf_i+0x23c>)
 80055a0:	2778      	movs	r7, #120	@ 0x78
 80055a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	6831      	ldr	r1, [r6, #0]
 80055aa:	061f      	lsls	r7, r3, #24
 80055ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80055b0:	d402      	bmi.n	80055b8 <_printf_i+0x188>
 80055b2:	065f      	lsls	r7, r3, #25
 80055b4:	bf48      	it	mi
 80055b6:	b2ad      	uxthmi	r5, r5
 80055b8:	6031      	str	r1, [r6, #0]
 80055ba:	07d9      	lsls	r1, r3, #31
 80055bc:	bf44      	itt	mi
 80055be:	f043 0320 	orrmi.w	r3, r3, #32
 80055c2:	6023      	strmi	r3, [r4, #0]
 80055c4:	b11d      	cbz	r5, 80055ce <_printf_i+0x19e>
 80055c6:	2310      	movs	r3, #16
 80055c8:	e7ac      	b.n	8005524 <_printf_i+0xf4>
 80055ca:	4827      	ldr	r0, [pc, #156]	@ (8005668 <_printf_i+0x238>)
 80055cc:	e7e9      	b.n	80055a2 <_printf_i+0x172>
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	f023 0320 	bic.w	r3, r3, #32
 80055d4:	6023      	str	r3, [r4, #0]
 80055d6:	e7f6      	b.n	80055c6 <_printf_i+0x196>
 80055d8:	4616      	mov	r6, r2
 80055da:	e7bd      	b.n	8005558 <_printf_i+0x128>
 80055dc:	6833      	ldr	r3, [r6, #0]
 80055de:	6825      	ldr	r5, [r4, #0]
 80055e0:	6961      	ldr	r1, [r4, #20]
 80055e2:	1d18      	adds	r0, r3, #4
 80055e4:	6030      	str	r0, [r6, #0]
 80055e6:	062e      	lsls	r6, r5, #24
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	d501      	bpl.n	80055f0 <_printf_i+0x1c0>
 80055ec:	6019      	str	r1, [r3, #0]
 80055ee:	e002      	b.n	80055f6 <_printf_i+0x1c6>
 80055f0:	0668      	lsls	r0, r5, #25
 80055f2:	d5fb      	bpl.n	80055ec <_printf_i+0x1bc>
 80055f4:	8019      	strh	r1, [r3, #0]
 80055f6:	2300      	movs	r3, #0
 80055f8:	6123      	str	r3, [r4, #16]
 80055fa:	4616      	mov	r6, r2
 80055fc:	e7bc      	b.n	8005578 <_printf_i+0x148>
 80055fe:	6833      	ldr	r3, [r6, #0]
 8005600:	1d1a      	adds	r2, r3, #4
 8005602:	6032      	str	r2, [r6, #0]
 8005604:	681e      	ldr	r6, [r3, #0]
 8005606:	6862      	ldr	r2, [r4, #4]
 8005608:	2100      	movs	r1, #0
 800560a:	4630      	mov	r0, r6
 800560c:	f7fa fdf8 	bl	8000200 <memchr>
 8005610:	b108      	cbz	r0, 8005616 <_printf_i+0x1e6>
 8005612:	1b80      	subs	r0, r0, r6
 8005614:	6060      	str	r0, [r4, #4]
 8005616:	6863      	ldr	r3, [r4, #4]
 8005618:	6123      	str	r3, [r4, #16]
 800561a:	2300      	movs	r3, #0
 800561c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005620:	e7aa      	b.n	8005578 <_printf_i+0x148>
 8005622:	6923      	ldr	r3, [r4, #16]
 8005624:	4632      	mov	r2, r6
 8005626:	4649      	mov	r1, r9
 8005628:	4640      	mov	r0, r8
 800562a:	47d0      	blx	sl
 800562c:	3001      	adds	r0, #1
 800562e:	d0ad      	beq.n	800558c <_printf_i+0x15c>
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	079b      	lsls	r3, r3, #30
 8005634:	d413      	bmi.n	800565e <_printf_i+0x22e>
 8005636:	68e0      	ldr	r0, [r4, #12]
 8005638:	9b03      	ldr	r3, [sp, #12]
 800563a:	4298      	cmp	r0, r3
 800563c:	bfb8      	it	lt
 800563e:	4618      	movlt	r0, r3
 8005640:	e7a6      	b.n	8005590 <_printf_i+0x160>
 8005642:	2301      	movs	r3, #1
 8005644:	4632      	mov	r2, r6
 8005646:	4649      	mov	r1, r9
 8005648:	4640      	mov	r0, r8
 800564a:	47d0      	blx	sl
 800564c:	3001      	adds	r0, #1
 800564e:	d09d      	beq.n	800558c <_printf_i+0x15c>
 8005650:	3501      	adds	r5, #1
 8005652:	68e3      	ldr	r3, [r4, #12]
 8005654:	9903      	ldr	r1, [sp, #12]
 8005656:	1a5b      	subs	r3, r3, r1
 8005658:	42ab      	cmp	r3, r5
 800565a:	dcf2      	bgt.n	8005642 <_printf_i+0x212>
 800565c:	e7eb      	b.n	8005636 <_printf_i+0x206>
 800565e:	2500      	movs	r5, #0
 8005660:	f104 0619 	add.w	r6, r4, #25
 8005664:	e7f5      	b.n	8005652 <_printf_i+0x222>
 8005666:	bf00      	nop
 8005668:	08005d2b 	.word	0x08005d2b
 800566c:	08005d3c 	.word	0x08005d3c

08005670 <__sflush_r>:
 8005670:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005678:	0716      	lsls	r6, r2, #28
 800567a:	4605      	mov	r5, r0
 800567c:	460c      	mov	r4, r1
 800567e:	d454      	bmi.n	800572a <__sflush_r+0xba>
 8005680:	684b      	ldr	r3, [r1, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	dc02      	bgt.n	800568c <__sflush_r+0x1c>
 8005686:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005688:	2b00      	cmp	r3, #0
 800568a:	dd48      	ble.n	800571e <__sflush_r+0xae>
 800568c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800568e:	2e00      	cmp	r6, #0
 8005690:	d045      	beq.n	800571e <__sflush_r+0xae>
 8005692:	2300      	movs	r3, #0
 8005694:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005698:	682f      	ldr	r7, [r5, #0]
 800569a:	6a21      	ldr	r1, [r4, #32]
 800569c:	602b      	str	r3, [r5, #0]
 800569e:	d030      	beq.n	8005702 <__sflush_r+0x92>
 80056a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80056a2:	89a3      	ldrh	r3, [r4, #12]
 80056a4:	0759      	lsls	r1, r3, #29
 80056a6:	d505      	bpl.n	80056b4 <__sflush_r+0x44>
 80056a8:	6863      	ldr	r3, [r4, #4]
 80056aa:	1ad2      	subs	r2, r2, r3
 80056ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80056ae:	b10b      	cbz	r3, 80056b4 <__sflush_r+0x44>
 80056b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80056b2:	1ad2      	subs	r2, r2, r3
 80056b4:	2300      	movs	r3, #0
 80056b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80056b8:	6a21      	ldr	r1, [r4, #32]
 80056ba:	4628      	mov	r0, r5
 80056bc:	47b0      	blx	r6
 80056be:	1c43      	adds	r3, r0, #1
 80056c0:	89a3      	ldrh	r3, [r4, #12]
 80056c2:	d106      	bne.n	80056d2 <__sflush_r+0x62>
 80056c4:	6829      	ldr	r1, [r5, #0]
 80056c6:	291d      	cmp	r1, #29
 80056c8:	d82b      	bhi.n	8005722 <__sflush_r+0xb2>
 80056ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005774 <__sflush_r+0x104>)
 80056cc:	410a      	asrs	r2, r1
 80056ce:	07d6      	lsls	r6, r2, #31
 80056d0:	d427      	bmi.n	8005722 <__sflush_r+0xb2>
 80056d2:	2200      	movs	r2, #0
 80056d4:	6062      	str	r2, [r4, #4]
 80056d6:	04d9      	lsls	r1, r3, #19
 80056d8:	6922      	ldr	r2, [r4, #16]
 80056da:	6022      	str	r2, [r4, #0]
 80056dc:	d504      	bpl.n	80056e8 <__sflush_r+0x78>
 80056de:	1c42      	adds	r2, r0, #1
 80056e0:	d101      	bne.n	80056e6 <__sflush_r+0x76>
 80056e2:	682b      	ldr	r3, [r5, #0]
 80056e4:	b903      	cbnz	r3, 80056e8 <__sflush_r+0x78>
 80056e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80056e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80056ea:	602f      	str	r7, [r5, #0]
 80056ec:	b1b9      	cbz	r1, 800571e <__sflush_r+0xae>
 80056ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80056f2:	4299      	cmp	r1, r3
 80056f4:	d002      	beq.n	80056fc <__sflush_r+0x8c>
 80056f6:	4628      	mov	r0, r5
 80056f8:	f000 fa58 	bl	8005bac <_free_r>
 80056fc:	2300      	movs	r3, #0
 80056fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8005700:	e00d      	b.n	800571e <__sflush_r+0xae>
 8005702:	2301      	movs	r3, #1
 8005704:	4628      	mov	r0, r5
 8005706:	47b0      	blx	r6
 8005708:	4602      	mov	r2, r0
 800570a:	1c50      	adds	r0, r2, #1
 800570c:	d1c9      	bne.n	80056a2 <__sflush_r+0x32>
 800570e:	682b      	ldr	r3, [r5, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d0c6      	beq.n	80056a2 <__sflush_r+0x32>
 8005714:	2b1d      	cmp	r3, #29
 8005716:	d001      	beq.n	800571c <__sflush_r+0xac>
 8005718:	2b16      	cmp	r3, #22
 800571a:	d11e      	bne.n	800575a <__sflush_r+0xea>
 800571c:	602f      	str	r7, [r5, #0]
 800571e:	2000      	movs	r0, #0
 8005720:	e022      	b.n	8005768 <__sflush_r+0xf8>
 8005722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005726:	b21b      	sxth	r3, r3
 8005728:	e01b      	b.n	8005762 <__sflush_r+0xf2>
 800572a:	690f      	ldr	r7, [r1, #16]
 800572c:	2f00      	cmp	r7, #0
 800572e:	d0f6      	beq.n	800571e <__sflush_r+0xae>
 8005730:	0793      	lsls	r3, r2, #30
 8005732:	680e      	ldr	r6, [r1, #0]
 8005734:	bf08      	it	eq
 8005736:	694b      	ldreq	r3, [r1, #20]
 8005738:	600f      	str	r7, [r1, #0]
 800573a:	bf18      	it	ne
 800573c:	2300      	movne	r3, #0
 800573e:	eba6 0807 	sub.w	r8, r6, r7
 8005742:	608b      	str	r3, [r1, #8]
 8005744:	f1b8 0f00 	cmp.w	r8, #0
 8005748:	dde9      	ble.n	800571e <__sflush_r+0xae>
 800574a:	6a21      	ldr	r1, [r4, #32]
 800574c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800574e:	4643      	mov	r3, r8
 8005750:	463a      	mov	r2, r7
 8005752:	4628      	mov	r0, r5
 8005754:	47b0      	blx	r6
 8005756:	2800      	cmp	r0, #0
 8005758:	dc08      	bgt.n	800576c <__sflush_r+0xfc>
 800575a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800575e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005762:	81a3      	strh	r3, [r4, #12]
 8005764:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800576c:	4407      	add	r7, r0
 800576e:	eba8 0800 	sub.w	r8, r8, r0
 8005772:	e7e7      	b.n	8005744 <__sflush_r+0xd4>
 8005774:	dfbffffe 	.word	0xdfbffffe

08005778 <_fflush_r>:
 8005778:	b538      	push	{r3, r4, r5, lr}
 800577a:	690b      	ldr	r3, [r1, #16]
 800577c:	4605      	mov	r5, r0
 800577e:	460c      	mov	r4, r1
 8005780:	b913      	cbnz	r3, 8005788 <_fflush_r+0x10>
 8005782:	2500      	movs	r5, #0
 8005784:	4628      	mov	r0, r5
 8005786:	bd38      	pop	{r3, r4, r5, pc}
 8005788:	b118      	cbz	r0, 8005792 <_fflush_r+0x1a>
 800578a:	6a03      	ldr	r3, [r0, #32]
 800578c:	b90b      	cbnz	r3, 8005792 <_fflush_r+0x1a>
 800578e:	f7ff fb1b 	bl	8004dc8 <__sinit>
 8005792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d0f3      	beq.n	8005782 <_fflush_r+0xa>
 800579a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800579c:	07d0      	lsls	r0, r2, #31
 800579e:	d404      	bmi.n	80057aa <_fflush_r+0x32>
 80057a0:	0599      	lsls	r1, r3, #22
 80057a2:	d402      	bmi.n	80057aa <_fflush_r+0x32>
 80057a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057a6:	f7ff fbf0 	bl	8004f8a <__retarget_lock_acquire_recursive>
 80057aa:	4628      	mov	r0, r5
 80057ac:	4621      	mov	r1, r4
 80057ae:	f7ff ff5f 	bl	8005670 <__sflush_r>
 80057b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80057b4:	07da      	lsls	r2, r3, #31
 80057b6:	4605      	mov	r5, r0
 80057b8:	d4e4      	bmi.n	8005784 <_fflush_r+0xc>
 80057ba:	89a3      	ldrh	r3, [r4, #12]
 80057bc:	059b      	lsls	r3, r3, #22
 80057be:	d4e1      	bmi.n	8005784 <_fflush_r+0xc>
 80057c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80057c2:	f7ff fbe3 	bl	8004f8c <__retarget_lock_release_recursive>
 80057c6:	e7dd      	b.n	8005784 <_fflush_r+0xc>

080057c8 <__malloc_lock>:
 80057c8:	4801      	ldr	r0, [pc, #4]	@ (80057d0 <__malloc_lock+0x8>)
 80057ca:	f7ff bbde 	b.w	8004f8a <__retarget_lock_acquire_recursive>
 80057ce:	bf00      	nop
 80057d0:	20000540 	.word	0x20000540

080057d4 <__malloc_unlock>:
 80057d4:	4801      	ldr	r0, [pc, #4]	@ (80057dc <__malloc_unlock+0x8>)
 80057d6:	f7ff bbd9 	b.w	8004f8c <__retarget_lock_release_recursive>
 80057da:	bf00      	nop
 80057dc:	20000540 	.word	0x20000540

080057e0 <__sread>:
 80057e0:	b510      	push	{r4, lr}
 80057e2:	460c      	mov	r4, r1
 80057e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057e8:	f000 f9ac 	bl	8005b44 <_read_r>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	bfab      	itete	ge
 80057f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80057f2:	89a3      	ldrhlt	r3, [r4, #12]
 80057f4:	181b      	addge	r3, r3, r0
 80057f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80057fa:	bfac      	ite	ge
 80057fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80057fe:	81a3      	strhlt	r3, [r4, #12]
 8005800:	bd10      	pop	{r4, pc}

08005802 <__swrite>:
 8005802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005806:	461f      	mov	r7, r3
 8005808:	898b      	ldrh	r3, [r1, #12]
 800580a:	05db      	lsls	r3, r3, #23
 800580c:	4605      	mov	r5, r0
 800580e:	460c      	mov	r4, r1
 8005810:	4616      	mov	r6, r2
 8005812:	d505      	bpl.n	8005820 <__swrite+0x1e>
 8005814:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005818:	2302      	movs	r3, #2
 800581a:	2200      	movs	r2, #0
 800581c:	f000 f980 	bl	8005b20 <_lseek_r>
 8005820:	89a3      	ldrh	r3, [r4, #12]
 8005822:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005826:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800582a:	81a3      	strh	r3, [r4, #12]
 800582c:	4632      	mov	r2, r6
 800582e:	463b      	mov	r3, r7
 8005830:	4628      	mov	r0, r5
 8005832:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005836:	f000 b9a7 	b.w	8005b88 <_write_r>

0800583a <__sseek>:
 800583a:	b510      	push	{r4, lr}
 800583c:	460c      	mov	r4, r1
 800583e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005842:	f000 f96d 	bl	8005b20 <_lseek_r>
 8005846:	1c43      	adds	r3, r0, #1
 8005848:	89a3      	ldrh	r3, [r4, #12]
 800584a:	bf15      	itete	ne
 800584c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800584e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005852:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005856:	81a3      	strheq	r3, [r4, #12]
 8005858:	bf18      	it	ne
 800585a:	81a3      	strhne	r3, [r4, #12]
 800585c:	bd10      	pop	{r4, pc}

0800585e <__sclose>:
 800585e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005862:	f000 b92b 	b.w	8005abc <_close_r>

08005866 <__swbuf_r>:
 8005866:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005868:	460e      	mov	r6, r1
 800586a:	4614      	mov	r4, r2
 800586c:	4605      	mov	r5, r0
 800586e:	b118      	cbz	r0, 8005878 <__swbuf_r+0x12>
 8005870:	6a03      	ldr	r3, [r0, #32]
 8005872:	b90b      	cbnz	r3, 8005878 <__swbuf_r+0x12>
 8005874:	f7ff faa8 	bl	8004dc8 <__sinit>
 8005878:	69a3      	ldr	r3, [r4, #24]
 800587a:	60a3      	str	r3, [r4, #8]
 800587c:	89a3      	ldrh	r3, [r4, #12]
 800587e:	071a      	lsls	r2, r3, #28
 8005880:	d501      	bpl.n	8005886 <__swbuf_r+0x20>
 8005882:	6923      	ldr	r3, [r4, #16]
 8005884:	b943      	cbnz	r3, 8005898 <__swbuf_r+0x32>
 8005886:	4621      	mov	r1, r4
 8005888:	4628      	mov	r0, r5
 800588a:	f000 f82b 	bl	80058e4 <__swsetup_r>
 800588e:	b118      	cbz	r0, 8005898 <__swbuf_r+0x32>
 8005890:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005894:	4638      	mov	r0, r7
 8005896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	6922      	ldr	r2, [r4, #16]
 800589c:	1a98      	subs	r0, r3, r2
 800589e:	6963      	ldr	r3, [r4, #20]
 80058a0:	b2f6      	uxtb	r6, r6
 80058a2:	4283      	cmp	r3, r0
 80058a4:	4637      	mov	r7, r6
 80058a6:	dc05      	bgt.n	80058b4 <__swbuf_r+0x4e>
 80058a8:	4621      	mov	r1, r4
 80058aa:	4628      	mov	r0, r5
 80058ac:	f7ff ff64 	bl	8005778 <_fflush_r>
 80058b0:	2800      	cmp	r0, #0
 80058b2:	d1ed      	bne.n	8005890 <__swbuf_r+0x2a>
 80058b4:	68a3      	ldr	r3, [r4, #8]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	60a3      	str	r3, [r4, #8]
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	6022      	str	r2, [r4, #0]
 80058c0:	701e      	strb	r6, [r3, #0]
 80058c2:	6962      	ldr	r2, [r4, #20]
 80058c4:	1c43      	adds	r3, r0, #1
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d004      	beq.n	80058d4 <__swbuf_r+0x6e>
 80058ca:	89a3      	ldrh	r3, [r4, #12]
 80058cc:	07db      	lsls	r3, r3, #31
 80058ce:	d5e1      	bpl.n	8005894 <__swbuf_r+0x2e>
 80058d0:	2e0a      	cmp	r6, #10
 80058d2:	d1df      	bne.n	8005894 <__swbuf_r+0x2e>
 80058d4:	4621      	mov	r1, r4
 80058d6:	4628      	mov	r0, r5
 80058d8:	f7ff ff4e 	bl	8005778 <_fflush_r>
 80058dc:	2800      	cmp	r0, #0
 80058de:	d0d9      	beq.n	8005894 <__swbuf_r+0x2e>
 80058e0:	e7d6      	b.n	8005890 <__swbuf_r+0x2a>
	...

080058e4 <__swsetup_r>:
 80058e4:	b538      	push	{r3, r4, r5, lr}
 80058e6:	4b29      	ldr	r3, [pc, #164]	@ (800598c <__swsetup_r+0xa8>)
 80058e8:	4605      	mov	r5, r0
 80058ea:	6818      	ldr	r0, [r3, #0]
 80058ec:	460c      	mov	r4, r1
 80058ee:	b118      	cbz	r0, 80058f8 <__swsetup_r+0x14>
 80058f0:	6a03      	ldr	r3, [r0, #32]
 80058f2:	b90b      	cbnz	r3, 80058f8 <__swsetup_r+0x14>
 80058f4:	f7ff fa68 	bl	8004dc8 <__sinit>
 80058f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058fc:	0719      	lsls	r1, r3, #28
 80058fe:	d422      	bmi.n	8005946 <__swsetup_r+0x62>
 8005900:	06da      	lsls	r2, r3, #27
 8005902:	d407      	bmi.n	8005914 <__swsetup_r+0x30>
 8005904:	2209      	movs	r2, #9
 8005906:	602a      	str	r2, [r5, #0]
 8005908:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800590c:	81a3      	strh	r3, [r4, #12]
 800590e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005912:	e033      	b.n	800597c <__swsetup_r+0x98>
 8005914:	0758      	lsls	r0, r3, #29
 8005916:	d512      	bpl.n	800593e <__swsetup_r+0x5a>
 8005918:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800591a:	b141      	cbz	r1, 800592e <__swsetup_r+0x4a>
 800591c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005920:	4299      	cmp	r1, r3
 8005922:	d002      	beq.n	800592a <__swsetup_r+0x46>
 8005924:	4628      	mov	r0, r5
 8005926:	f000 f941 	bl	8005bac <_free_r>
 800592a:	2300      	movs	r3, #0
 800592c:	6363      	str	r3, [r4, #52]	@ 0x34
 800592e:	89a3      	ldrh	r3, [r4, #12]
 8005930:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005934:	81a3      	strh	r3, [r4, #12]
 8005936:	2300      	movs	r3, #0
 8005938:	6063      	str	r3, [r4, #4]
 800593a:	6923      	ldr	r3, [r4, #16]
 800593c:	6023      	str	r3, [r4, #0]
 800593e:	89a3      	ldrh	r3, [r4, #12]
 8005940:	f043 0308 	orr.w	r3, r3, #8
 8005944:	81a3      	strh	r3, [r4, #12]
 8005946:	6923      	ldr	r3, [r4, #16]
 8005948:	b94b      	cbnz	r3, 800595e <__swsetup_r+0x7a>
 800594a:	89a3      	ldrh	r3, [r4, #12]
 800594c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005950:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005954:	d003      	beq.n	800595e <__swsetup_r+0x7a>
 8005956:	4621      	mov	r1, r4
 8005958:	4628      	mov	r0, r5
 800595a:	f000 f83f 	bl	80059dc <__smakebuf_r>
 800595e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005962:	f013 0201 	ands.w	r2, r3, #1
 8005966:	d00a      	beq.n	800597e <__swsetup_r+0x9a>
 8005968:	2200      	movs	r2, #0
 800596a:	60a2      	str	r2, [r4, #8]
 800596c:	6962      	ldr	r2, [r4, #20]
 800596e:	4252      	negs	r2, r2
 8005970:	61a2      	str	r2, [r4, #24]
 8005972:	6922      	ldr	r2, [r4, #16]
 8005974:	b942      	cbnz	r2, 8005988 <__swsetup_r+0xa4>
 8005976:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800597a:	d1c5      	bne.n	8005908 <__swsetup_r+0x24>
 800597c:	bd38      	pop	{r3, r4, r5, pc}
 800597e:	0799      	lsls	r1, r3, #30
 8005980:	bf58      	it	pl
 8005982:	6962      	ldrpl	r2, [r4, #20]
 8005984:	60a2      	str	r2, [r4, #8]
 8005986:	e7f4      	b.n	8005972 <__swsetup_r+0x8e>
 8005988:	2000      	movs	r0, #0
 800598a:	e7f7      	b.n	800597c <__swsetup_r+0x98>
 800598c:	20000020 	.word	0x20000020

08005990 <__swhatbuf_r>:
 8005990:	b570      	push	{r4, r5, r6, lr}
 8005992:	460c      	mov	r4, r1
 8005994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005998:	2900      	cmp	r1, #0
 800599a:	b096      	sub	sp, #88	@ 0x58
 800599c:	4615      	mov	r5, r2
 800599e:	461e      	mov	r6, r3
 80059a0:	da0d      	bge.n	80059be <__swhatbuf_r+0x2e>
 80059a2:	89a3      	ldrh	r3, [r4, #12]
 80059a4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80059a8:	f04f 0100 	mov.w	r1, #0
 80059ac:	bf14      	ite	ne
 80059ae:	2340      	movne	r3, #64	@ 0x40
 80059b0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80059b4:	2000      	movs	r0, #0
 80059b6:	6031      	str	r1, [r6, #0]
 80059b8:	602b      	str	r3, [r5, #0]
 80059ba:	b016      	add	sp, #88	@ 0x58
 80059bc:	bd70      	pop	{r4, r5, r6, pc}
 80059be:	466a      	mov	r2, sp
 80059c0:	f000 f88c 	bl	8005adc <_fstat_r>
 80059c4:	2800      	cmp	r0, #0
 80059c6:	dbec      	blt.n	80059a2 <__swhatbuf_r+0x12>
 80059c8:	9901      	ldr	r1, [sp, #4]
 80059ca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80059ce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80059d2:	4259      	negs	r1, r3
 80059d4:	4159      	adcs	r1, r3
 80059d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80059da:	e7eb      	b.n	80059b4 <__swhatbuf_r+0x24>

080059dc <__smakebuf_r>:
 80059dc:	898b      	ldrh	r3, [r1, #12]
 80059de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059e0:	079d      	lsls	r5, r3, #30
 80059e2:	4606      	mov	r6, r0
 80059e4:	460c      	mov	r4, r1
 80059e6:	d507      	bpl.n	80059f8 <__smakebuf_r+0x1c>
 80059e8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80059ec:	6023      	str	r3, [r4, #0]
 80059ee:	6123      	str	r3, [r4, #16]
 80059f0:	2301      	movs	r3, #1
 80059f2:	6163      	str	r3, [r4, #20]
 80059f4:	b003      	add	sp, #12
 80059f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059f8:	ab01      	add	r3, sp, #4
 80059fa:	466a      	mov	r2, sp
 80059fc:	f7ff ffc8 	bl	8005990 <__swhatbuf_r>
 8005a00:	9f00      	ldr	r7, [sp, #0]
 8005a02:	4605      	mov	r5, r0
 8005a04:	4639      	mov	r1, r7
 8005a06:	4630      	mov	r0, r6
 8005a08:	f7ff fc24 	bl	8005254 <_malloc_r>
 8005a0c:	b948      	cbnz	r0, 8005a22 <__smakebuf_r+0x46>
 8005a0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a12:	059a      	lsls	r2, r3, #22
 8005a14:	d4ee      	bmi.n	80059f4 <__smakebuf_r+0x18>
 8005a16:	f023 0303 	bic.w	r3, r3, #3
 8005a1a:	f043 0302 	orr.w	r3, r3, #2
 8005a1e:	81a3      	strh	r3, [r4, #12]
 8005a20:	e7e2      	b.n	80059e8 <__smakebuf_r+0xc>
 8005a22:	89a3      	ldrh	r3, [r4, #12]
 8005a24:	6020      	str	r0, [r4, #0]
 8005a26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a2a:	81a3      	strh	r3, [r4, #12]
 8005a2c:	9b01      	ldr	r3, [sp, #4]
 8005a2e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005a32:	b15b      	cbz	r3, 8005a4c <__smakebuf_r+0x70>
 8005a34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a38:	4630      	mov	r0, r6
 8005a3a:	f000 f861 	bl	8005b00 <_isatty_r>
 8005a3e:	b128      	cbz	r0, 8005a4c <__smakebuf_r+0x70>
 8005a40:	89a3      	ldrh	r3, [r4, #12]
 8005a42:	f023 0303 	bic.w	r3, r3, #3
 8005a46:	f043 0301 	orr.w	r3, r3, #1
 8005a4a:	81a3      	strh	r3, [r4, #12]
 8005a4c:	89a3      	ldrh	r3, [r4, #12]
 8005a4e:	431d      	orrs	r5, r3
 8005a50:	81a5      	strh	r5, [r4, #12]
 8005a52:	e7cf      	b.n	80059f4 <__smakebuf_r+0x18>

08005a54 <_putc_r>:
 8005a54:	b570      	push	{r4, r5, r6, lr}
 8005a56:	460d      	mov	r5, r1
 8005a58:	4614      	mov	r4, r2
 8005a5a:	4606      	mov	r6, r0
 8005a5c:	b118      	cbz	r0, 8005a66 <_putc_r+0x12>
 8005a5e:	6a03      	ldr	r3, [r0, #32]
 8005a60:	b90b      	cbnz	r3, 8005a66 <_putc_r+0x12>
 8005a62:	f7ff f9b1 	bl	8004dc8 <__sinit>
 8005a66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a68:	07d8      	lsls	r0, r3, #31
 8005a6a:	d405      	bmi.n	8005a78 <_putc_r+0x24>
 8005a6c:	89a3      	ldrh	r3, [r4, #12]
 8005a6e:	0599      	lsls	r1, r3, #22
 8005a70:	d402      	bmi.n	8005a78 <_putc_r+0x24>
 8005a72:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005a74:	f7ff fa89 	bl	8004f8a <__retarget_lock_acquire_recursive>
 8005a78:	68a3      	ldr	r3, [r4, #8]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	60a3      	str	r3, [r4, #8]
 8005a80:	da05      	bge.n	8005a8e <_putc_r+0x3a>
 8005a82:	69a2      	ldr	r2, [r4, #24]
 8005a84:	4293      	cmp	r3, r2
 8005a86:	db12      	blt.n	8005aae <_putc_r+0x5a>
 8005a88:	b2eb      	uxtb	r3, r5
 8005a8a:	2b0a      	cmp	r3, #10
 8005a8c:	d00f      	beq.n	8005aae <_putc_r+0x5a>
 8005a8e:	6823      	ldr	r3, [r4, #0]
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	6022      	str	r2, [r4, #0]
 8005a94:	701d      	strb	r5, [r3, #0]
 8005a96:	b2ed      	uxtb	r5, r5
 8005a98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005a9a:	07da      	lsls	r2, r3, #31
 8005a9c:	d405      	bmi.n	8005aaa <_putc_r+0x56>
 8005a9e:	89a3      	ldrh	r3, [r4, #12]
 8005aa0:	059b      	lsls	r3, r3, #22
 8005aa2:	d402      	bmi.n	8005aaa <_putc_r+0x56>
 8005aa4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005aa6:	f7ff fa71 	bl	8004f8c <__retarget_lock_release_recursive>
 8005aaa:	4628      	mov	r0, r5
 8005aac:	bd70      	pop	{r4, r5, r6, pc}
 8005aae:	4629      	mov	r1, r5
 8005ab0:	4622      	mov	r2, r4
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	f7ff fed7 	bl	8005866 <__swbuf_r>
 8005ab8:	4605      	mov	r5, r0
 8005aba:	e7ed      	b.n	8005a98 <_putc_r+0x44>

08005abc <_close_r>:
 8005abc:	b538      	push	{r3, r4, r5, lr}
 8005abe:	4d06      	ldr	r5, [pc, #24]	@ (8005ad8 <_close_r+0x1c>)
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	4604      	mov	r4, r0
 8005ac4:	4608      	mov	r0, r1
 8005ac6:	602b      	str	r3, [r5, #0]
 8005ac8:	f7fe ff2e 	bl	8004928 <_close>
 8005acc:	1c43      	adds	r3, r0, #1
 8005ace:	d102      	bne.n	8005ad6 <_close_r+0x1a>
 8005ad0:	682b      	ldr	r3, [r5, #0]
 8005ad2:	b103      	cbz	r3, 8005ad6 <_close_r+0x1a>
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	bd38      	pop	{r3, r4, r5, pc}
 8005ad8:	2000054c 	.word	0x2000054c

08005adc <_fstat_r>:
 8005adc:	b538      	push	{r3, r4, r5, lr}
 8005ade:	4d07      	ldr	r5, [pc, #28]	@ (8005afc <_fstat_r+0x20>)
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	4604      	mov	r4, r0
 8005ae4:	4608      	mov	r0, r1
 8005ae6:	4611      	mov	r1, r2
 8005ae8:	602b      	str	r3, [r5, #0]
 8005aea:	f7fe ff60 	bl	80049ae <_fstat>
 8005aee:	1c43      	adds	r3, r0, #1
 8005af0:	d102      	bne.n	8005af8 <_fstat_r+0x1c>
 8005af2:	682b      	ldr	r3, [r5, #0]
 8005af4:	b103      	cbz	r3, 8005af8 <_fstat_r+0x1c>
 8005af6:	6023      	str	r3, [r4, #0]
 8005af8:	bd38      	pop	{r3, r4, r5, pc}
 8005afa:	bf00      	nop
 8005afc:	2000054c 	.word	0x2000054c

08005b00 <_isatty_r>:
 8005b00:	b538      	push	{r3, r4, r5, lr}
 8005b02:	4d06      	ldr	r5, [pc, #24]	@ (8005b1c <_isatty_r+0x1c>)
 8005b04:	2300      	movs	r3, #0
 8005b06:	4604      	mov	r4, r0
 8005b08:	4608      	mov	r0, r1
 8005b0a:	602b      	str	r3, [r5, #0]
 8005b0c:	f7ff f8b2 	bl	8004c74 <_isatty>
 8005b10:	1c43      	adds	r3, r0, #1
 8005b12:	d102      	bne.n	8005b1a <_isatty_r+0x1a>
 8005b14:	682b      	ldr	r3, [r5, #0]
 8005b16:	b103      	cbz	r3, 8005b1a <_isatty_r+0x1a>
 8005b18:	6023      	str	r3, [r4, #0]
 8005b1a:	bd38      	pop	{r3, r4, r5, pc}
 8005b1c:	2000054c 	.word	0x2000054c

08005b20 <_lseek_r>:
 8005b20:	b538      	push	{r3, r4, r5, lr}
 8005b22:	4d07      	ldr	r5, [pc, #28]	@ (8005b40 <_lseek_r+0x20>)
 8005b24:	4604      	mov	r4, r0
 8005b26:	4608      	mov	r0, r1
 8005b28:	4611      	mov	r1, r2
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	602a      	str	r2, [r5, #0]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	f7fe febb 	bl	80048aa <_lseek>
 8005b34:	1c43      	adds	r3, r0, #1
 8005b36:	d102      	bne.n	8005b3e <_lseek_r+0x1e>
 8005b38:	682b      	ldr	r3, [r5, #0]
 8005b3a:	b103      	cbz	r3, 8005b3e <_lseek_r+0x1e>
 8005b3c:	6023      	str	r3, [r4, #0]
 8005b3e:	bd38      	pop	{r3, r4, r5, pc}
 8005b40:	2000054c 	.word	0x2000054c

08005b44 <_read_r>:
 8005b44:	b538      	push	{r3, r4, r5, lr}
 8005b46:	4d07      	ldr	r5, [pc, #28]	@ (8005b64 <_read_r+0x20>)
 8005b48:	4604      	mov	r4, r0
 8005b4a:	4608      	mov	r0, r1
 8005b4c:	4611      	mov	r1, r2
 8005b4e:	2200      	movs	r2, #0
 8005b50:	602a      	str	r2, [r5, #0]
 8005b52:	461a      	mov	r2, r3
 8005b54:	f7fe fe53 	bl	80047fe <_read>
 8005b58:	1c43      	adds	r3, r0, #1
 8005b5a:	d102      	bne.n	8005b62 <_read_r+0x1e>
 8005b5c:	682b      	ldr	r3, [r5, #0]
 8005b5e:	b103      	cbz	r3, 8005b62 <_read_r+0x1e>
 8005b60:	6023      	str	r3, [r4, #0]
 8005b62:	bd38      	pop	{r3, r4, r5, pc}
 8005b64:	2000054c 	.word	0x2000054c

08005b68 <_sbrk_r>:
 8005b68:	b538      	push	{r3, r4, r5, lr}
 8005b6a:	4d06      	ldr	r5, [pc, #24]	@ (8005b84 <_sbrk_r+0x1c>)
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	4604      	mov	r4, r0
 8005b70:	4608      	mov	r0, r1
 8005b72:	602b      	str	r3, [r5, #0]
 8005b74:	f7fc fa7a 	bl	800206c <_sbrk>
 8005b78:	1c43      	adds	r3, r0, #1
 8005b7a:	d102      	bne.n	8005b82 <_sbrk_r+0x1a>
 8005b7c:	682b      	ldr	r3, [r5, #0]
 8005b7e:	b103      	cbz	r3, 8005b82 <_sbrk_r+0x1a>
 8005b80:	6023      	str	r3, [r4, #0]
 8005b82:	bd38      	pop	{r3, r4, r5, pc}
 8005b84:	2000054c 	.word	0x2000054c

08005b88 <_write_r>:
 8005b88:	b538      	push	{r3, r4, r5, lr}
 8005b8a:	4d07      	ldr	r5, [pc, #28]	@ (8005ba8 <_write_r+0x20>)
 8005b8c:	4604      	mov	r4, r0
 8005b8e:	4608      	mov	r0, r1
 8005b90:	4611      	mov	r1, r2
 8005b92:	2200      	movs	r2, #0
 8005b94:	602a      	str	r2, [r5, #0]
 8005b96:	461a      	mov	r2, r3
 8005b98:	f7fe fe99 	bl	80048ce <_write>
 8005b9c:	1c43      	adds	r3, r0, #1
 8005b9e:	d102      	bne.n	8005ba6 <_write_r+0x1e>
 8005ba0:	682b      	ldr	r3, [r5, #0]
 8005ba2:	b103      	cbz	r3, 8005ba6 <_write_r+0x1e>
 8005ba4:	6023      	str	r3, [r4, #0]
 8005ba6:	bd38      	pop	{r3, r4, r5, pc}
 8005ba8:	2000054c 	.word	0x2000054c

08005bac <_free_r>:
 8005bac:	b538      	push	{r3, r4, r5, lr}
 8005bae:	4605      	mov	r5, r0
 8005bb0:	2900      	cmp	r1, #0
 8005bb2:	d041      	beq.n	8005c38 <_free_r+0x8c>
 8005bb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bb8:	1f0c      	subs	r4, r1, #4
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	bfb8      	it	lt
 8005bbe:	18e4      	addlt	r4, r4, r3
 8005bc0:	f7ff fe02 	bl	80057c8 <__malloc_lock>
 8005bc4:	4a1d      	ldr	r2, [pc, #116]	@ (8005c3c <_free_r+0x90>)
 8005bc6:	6813      	ldr	r3, [r2, #0]
 8005bc8:	b933      	cbnz	r3, 8005bd8 <_free_r+0x2c>
 8005bca:	6063      	str	r3, [r4, #4]
 8005bcc:	6014      	str	r4, [r2, #0]
 8005bce:	4628      	mov	r0, r5
 8005bd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bd4:	f7ff bdfe 	b.w	80057d4 <__malloc_unlock>
 8005bd8:	42a3      	cmp	r3, r4
 8005bda:	d908      	bls.n	8005bee <_free_r+0x42>
 8005bdc:	6820      	ldr	r0, [r4, #0]
 8005bde:	1821      	adds	r1, r4, r0
 8005be0:	428b      	cmp	r3, r1
 8005be2:	bf01      	itttt	eq
 8005be4:	6819      	ldreq	r1, [r3, #0]
 8005be6:	685b      	ldreq	r3, [r3, #4]
 8005be8:	1809      	addeq	r1, r1, r0
 8005bea:	6021      	streq	r1, [r4, #0]
 8005bec:	e7ed      	b.n	8005bca <_free_r+0x1e>
 8005bee:	461a      	mov	r2, r3
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	b10b      	cbz	r3, 8005bf8 <_free_r+0x4c>
 8005bf4:	42a3      	cmp	r3, r4
 8005bf6:	d9fa      	bls.n	8005bee <_free_r+0x42>
 8005bf8:	6811      	ldr	r1, [r2, #0]
 8005bfa:	1850      	adds	r0, r2, r1
 8005bfc:	42a0      	cmp	r0, r4
 8005bfe:	d10b      	bne.n	8005c18 <_free_r+0x6c>
 8005c00:	6820      	ldr	r0, [r4, #0]
 8005c02:	4401      	add	r1, r0
 8005c04:	1850      	adds	r0, r2, r1
 8005c06:	4283      	cmp	r3, r0
 8005c08:	6011      	str	r1, [r2, #0]
 8005c0a:	d1e0      	bne.n	8005bce <_free_r+0x22>
 8005c0c:	6818      	ldr	r0, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	6053      	str	r3, [r2, #4]
 8005c12:	4408      	add	r0, r1
 8005c14:	6010      	str	r0, [r2, #0]
 8005c16:	e7da      	b.n	8005bce <_free_r+0x22>
 8005c18:	d902      	bls.n	8005c20 <_free_r+0x74>
 8005c1a:	230c      	movs	r3, #12
 8005c1c:	602b      	str	r3, [r5, #0]
 8005c1e:	e7d6      	b.n	8005bce <_free_r+0x22>
 8005c20:	6820      	ldr	r0, [r4, #0]
 8005c22:	1821      	adds	r1, r4, r0
 8005c24:	428b      	cmp	r3, r1
 8005c26:	bf04      	itt	eq
 8005c28:	6819      	ldreq	r1, [r3, #0]
 8005c2a:	685b      	ldreq	r3, [r3, #4]
 8005c2c:	6063      	str	r3, [r4, #4]
 8005c2e:	bf04      	itt	eq
 8005c30:	1809      	addeq	r1, r1, r0
 8005c32:	6021      	streq	r1, [r4, #0]
 8005c34:	6054      	str	r4, [r2, #4]
 8005c36:	e7ca      	b.n	8005bce <_free_r+0x22>
 8005c38:	bd38      	pop	{r3, r4, r5, pc}
 8005c3a:	bf00      	nop
 8005c3c:	20000548 	.word	0x20000548

08005c40 <_init>:
 8005c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c42:	bf00      	nop
 8005c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c46:	bc08      	pop	{r3}
 8005c48:	469e      	mov	lr, r3
 8005c4a:	4770      	bx	lr

08005c4c <_fini>:
 8005c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c4e:	bf00      	nop
 8005c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c52:	bc08      	pop	{r3}
 8005c54:	469e      	mov	lr, r3
 8005c56:	4770      	bx	lr
