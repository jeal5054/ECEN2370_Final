
JAllenLab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c58  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08005e08  08005e08  00006e08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f00  08005f00  00007070  2**0
                  CONTENTS
  4 .ARM          00000008  08005f00  08005f00  00006f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f08  08005f08  00007070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f08  08005f08  00006f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f0c  08005f0c  00006f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08005f10  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007070  2**0
                  CONTENTS
 10 .bss          00000450  20000070  20000070  00007070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004c0  200004c0  00007070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001132c  00000000  00000000  000070a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000281d  00000000  00000000  000183cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001198  00000000  00000000  0001abf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000db0  00000000  00000000  0001bd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000259b0  00000000  00000000  0001cb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001652e  00000000  00000000  000424e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000df9ad  00000000  00000000  00058a16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001383c3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055fc  00000000  00000000  00138408  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0013da04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005df0 	.word	0x08005df0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005df0 	.word	0x08005df0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <applicationInit>:
 */
#include "ApplicationCode.h"
#include "InterruptControl.h"
#include "Matrixdef.h"

void applicationInit(){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	//applicationInterruptInit();
	object_Select();
 8000594:	f000 f8ba 	bl	800070c <object_Select>
	addScheduledEvent(MATRIX_UPDATE_EVENT);
 8000598:	2004      	movs	r0, #4
 800059a:	f000 ff15 	bl	80013c8 <addScheduledEvent>
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
	...

080005a4 <RND_NUM>:
 */
#include "Matrixdef.h"

#define MATRIX_LCD 0

void RND_NUM(void) { // issue here
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
	uint32_t RND;
	RNG_HandleTypeDef hrng;
	hrng.Instance = RNG;
 80005aa:	4b15      	ldr	r3, [pc, #84]	@ (8000600 <RND_NUM+0x5c>)
 80005ac:	607b      	str	r3, [r7, #4]

	if (HAL_RNG_Init(&hrng) != HAL_OK)
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	4618      	mov	r0, r3
 80005b2:	f003 fc41 	bl	8003e38 <HAL_RNG_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <RND_NUM+0x1c>
	{
		while(1);
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <RND_NUM+0x18>
	}
	  /* USER CODE BEGIN RNG_Init 2 */
    if (HAL_RNG_GenerateRandomNumber(&hrng, &RND) != HAL_OK) {
 80005c0:	f107 0214 	add.w	r2, r7, #20
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	4611      	mov	r1, r2
 80005c8:	4618      	mov	r0, r3
 80005ca:	f003 fc5f 	bl	8003e8c <HAL_RNG_GenerateRandomNumber>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <RND_NUM+0x34>
    	// Handle the error (e.g., infinite loop or error logging)
	    while (1);
 80005d4:	bf00      	nop
 80005d6:	e7fd      	b.n	80005d4 <RND_NUM+0x30>
	}
	   RND = RND % 7;  // Constrain the result to 0-6
 80005d8:	6979      	ldr	r1, [r7, #20]
 80005da:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <RND_NUM+0x60>)
 80005dc:	fba3 2301 	umull	r2, r3, r3, r1
 80005e0:	1aca      	subs	r2, r1, r3
 80005e2:	0852      	lsrs	r2, r2, #1
 80005e4:	4413      	add	r3, r2
 80005e6:	089a      	lsrs	r2, r3, #2
 80005e8:	4613      	mov	r3, r2
 80005ea:	00db      	lsls	r3, r3, #3
 80005ec:	1a9b      	subs	r3, r3, r2
 80005ee:	1aca      	subs	r2, r1, r3
 80005f0:	617a      	str	r2, [r7, #20]
	   randomNumber = RND;
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	4a04      	ldr	r2, [pc, #16]	@ (8000608 <RND_NUM+0x64>)
 80005f6:	6013      	str	r3, [r2, #0]
}
 80005f8:	bf00      	nop
 80005fa:	3718      	adds	r7, #24
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	50060800 	.word	0x50060800
 8000604:	24924925 	.word	0x24924925
 8000608:	2000011c 	.word	0x2000011c

0800060c <check_State>:

uint8_t check_State(void) {
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	if(     (object.originbit.x <= 0) || (object.originbit.x >= 9) ||
 8000610:	4b3c      	ldr	r3, [pc, #240]	@ (8000704 <check_State+0xf8>)
 8000612:	789b      	ldrb	r3, [r3, #2]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d01b      	beq.n	8000650 <check_State+0x44>
 8000618:	4b3a      	ldr	r3, [pc, #232]	@ (8000704 <check_State+0xf8>)
 800061a:	789b      	ldrb	r3, [r3, #2]
 800061c:	2b08      	cmp	r3, #8
 800061e:	d817      	bhi.n	8000650 <check_State+0x44>
	   (object.suboriginbit_0.x <= 0) || (object.suboriginbit_0.x >= 9) ||
 8000620:	4b38      	ldr	r3, [pc, #224]	@ (8000704 <check_State+0xf8>)
 8000622:	791b      	ldrb	r3, [r3, #4]
	if(     (object.originbit.x <= 0) || (object.originbit.x >= 9) ||
 8000624:	2b00      	cmp	r3, #0
 8000626:	d013      	beq.n	8000650 <check_State+0x44>
	   (object.suboriginbit_0.x <= 0) || (object.suboriginbit_0.x >= 9) ||
 8000628:	4b36      	ldr	r3, [pc, #216]	@ (8000704 <check_State+0xf8>)
 800062a:	791b      	ldrb	r3, [r3, #4]
 800062c:	2b08      	cmp	r3, #8
 800062e:	d80f      	bhi.n	8000650 <check_State+0x44>
	   (object.suboriginbit_1.x <= 0) || (object.suboriginbit_1.x >= 9) ||
 8000630:	4b34      	ldr	r3, [pc, #208]	@ (8000704 <check_State+0xf8>)
 8000632:	799b      	ldrb	r3, [r3, #6]
	   (object.suboriginbit_0.x <= 0) || (object.suboriginbit_0.x >= 9) ||
 8000634:	2b00      	cmp	r3, #0
 8000636:	d00b      	beq.n	8000650 <check_State+0x44>
	   (object.suboriginbit_1.x <= 0) || (object.suboriginbit_1.x >= 9) ||
 8000638:	4b32      	ldr	r3, [pc, #200]	@ (8000704 <check_State+0xf8>)
 800063a:	799b      	ldrb	r3, [r3, #6]
 800063c:	2b08      	cmp	r3, #8
 800063e:	d807      	bhi.n	8000650 <check_State+0x44>
	   (object.suboriginbit_2.x <= 0) || (object.suboriginbit_2.x >= 9) )
 8000640:	4b30      	ldr	r3, [pc, #192]	@ (8000704 <check_State+0xf8>)
 8000642:	7a1b      	ldrb	r3, [r3, #8]
	   (object.suboriginbit_1.x <= 0) || (object.suboriginbit_1.x >= 9) ||
 8000644:	2b00      	cmp	r3, #0
 8000646:	d003      	beq.n	8000650 <check_State+0x44>
	   (object.suboriginbit_2.x <= 0) || (object.suboriginbit_2.x >= 9) )
 8000648:	4b2e      	ldr	r3, [pc, #184]	@ (8000704 <check_State+0xf8>)
 800064a:	7a1b      	ldrb	r3, [r3, #8]
 800064c:	2b08      	cmp	r3, #8
 800064e:	d901      	bls.n	8000654 <check_State+0x48>
	{
		return 0; // This means object has gone outside of the bounds
 8000650:	2300      	movs	r3, #0
 8000652:	e054      	b.n	80006fe <check_State+0xf2>
	} else if( (object.originbit.y <= 0)      || (object.suboriginbit_0.y <= 0) ||
 8000654:	4b2b      	ldr	r3, [pc, #172]	@ (8000704 <check_State+0xf8>)
 8000656:	78db      	ldrb	r3, [r3, #3]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d04b      	beq.n	80006f4 <check_State+0xe8>
 800065c:	4b29      	ldr	r3, [pc, #164]	@ (8000704 <check_State+0xf8>)
 800065e:	795b      	ldrb	r3, [r3, #5]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d047      	beq.n	80006f4 <check_State+0xe8>
			   (object.suboriginbit_1.y <= 0) || (object.suboriginbit_2.y <= 0) ||
 8000664:	4b27      	ldr	r3, [pc, #156]	@ (8000704 <check_State+0xf8>)
 8000666:	79db      	ldrb	r3, [r3, #7]
	} else if( (object.originbit.y <= 0)      || (object.suboriginbit_0.y <= 0) ||
 8000668:	2b00      	cmp	r3, #0
 800066a:	d043      	beq.n	80006f4 <check_State+0xe8>
			   (object.suboriginbit_1.y <= 0) || (object.suboriginbit_2.y <= 0) ||
 800066c:	4b25      	ldr	r3, [pc, #148]	@ (8000704 <check_State+0xf8>)
 800066e:	7a5b      	ldrb	r3, [r3, #9]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d03f      	beq.n	80006f4 <check_State+0xe8>
			   (dummyTable[object.originbit.y - 1][object.originbit.x] == 1) ||
 8000674:	4b23      	ldr	r3, [pc, #140]	@ (8000704 <check_State+0xf8>)
 8000676:	78db      	ldrb	r3, [r3, #3]
 8000678:	1e5a      	subs	r2, r3, #1
 800067a:	4b22      	ldr	r3, [pc, #136]	@ (8000704 <check_State+0xf8>)
 800067c:	789b      	ldrb	r3, [r3, #2]
 800067e:	4618      	mov	r0, r3
 8000680:	4921      	ldr	r1, [pc, #132]	@ (8000708 <check_State+0xfc>)
 8000682:	4613      	mov	r3, r2
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	4413      	add	r3, r2
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	440b      	add	r3, r1
 800068c:	4403      	add	r3, r0
 800068e:	781b      	ldrb	r3, [r3, #0]
			   (object.suboriginbit_1.y <= 0) || (object.suboriginbit_2.y <= 0) ||
 8000690:	2b01      	cmp	r3, #1
 8000692:	d02f      	beq.n	80006f4 <check_State+0xe8>
			   (dummyTable[object.suboriginbit_0.y - 1][object.suboriginbit_0.x] == 1) ||
 8000694:	4b1b      	ldr	r3, [pc, #108]	@ (8000704 <check_State+0xf8>)
 8000696:	795b      	ldrb	r3, [r3, #5]
 8000698:	1e5a      	subs	r2, r3, #1
 800069a:	4b1a      	ldr	r3, [pc, #104]	@ (8000704 <check_State+0xf8>)
 800069c:	791b      	ldrb	r3, [r3, #4]
 800069e:	4618      	mov	r0, r3
 80006a0:	4919      	ldr	r1, [pc, #100]	@ (8000708 <check_State+0xfc>)
 80006a2:	4613      	mov	r3, r2
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	4413      	add	r3, r2
 80006a8:	005b      	lsls	r3, r3, #1
 80006aa:	440b      	add	r3, r1
 80006ac:	4403      	add	r3, r0
 80006ae:	781b      	ldrb	r3, [r3, #0]
			   (dummyTable[object.originbit.y - 1][object.originbit.x] == 1) ||
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d01f      	beq.n	80006f4 <check_State+0xe8>
			   (dummyTable[object.suboriginbit_1.y - 1][object.suboriginbit_1.x] == 1) ||
 80006b4:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <check_State+0xf8>)
 80006b6:	79db      	ldrb	r3, [r3, #7]
 80006b8:	1e5a      	subs	r2, r3, #1
 80006ba:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <check_State+0xf8>)
 80006bc:	799b      	ldrb	r3, [r3, #6]
 80006be:	4618      	mov	r0, r3
 80006c0:	4911      	ldr	r1, [pc, #68]	@ (8000708 <check_State+0xfc>)
 80006c2:	4613      	mov	r3, r2
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	4413      	add	r3, r2
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	440b      	add	r3, r1
 80006cc:	4403      	add	r3, r0
 80006ce:	781b      	ldrb	r3, [r3, #0]
			   (dummyTable[object.suboriginbit_0.y - 1][object.suboriginbit_0.x] == 1) ||
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d00f      	beq.n	80006f4 <check_State+0xe8>
			   (dummyTable[object.suboriginbit_2.y - 1][object.suboriginbit_2.x] == 1))
 80006d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <check_State+0xf8>)
 80006d6:	7a5b      	ldrb	r3, [r3, #9]
 80006d8:	1e5a      	subs	r2, r3, #1
 80006da:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <check_State+0xf8>)
 80006dc:	7a1b      	ldrb	r3, [r3, #8]
 80006de:	4618      	mov	r0, r3
 80006e0:	4909      	ldr	r1, [pc, #36]	@ (8000708 <check_State+0xfc>)
 80006e2:	4613      	mov	r3, r2
 80006e4:	009b      	lsls	r3, r3, #2
 80006e6:	4413      	add	r3, r2
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	440b      	add	r3, r1
 80006ec:	4403      	add	r3, r0
 80006ee:	781b      	ldrb	r3, [r3, #0]
			   (dummyTable[object.suboriginbit_1.y - 1][object.suboriginbit_1.x] == 1) ||
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d103      	bne.n	80006fc <check_State+0xf0>
	{
		// Place the object in the matrix, generate new object
		object_Select();
 80006f4:	f000 f80a 	bl	800070c <object_Select>
		return 1; // This means object has hit the bottom
 80006f8:	2301      	movs	r3, #1
 80006fa:	e000      	b.n	80006fe <check_State+0xf2>
	} else {
		return 2; // In case we want to see nothing can be done
 80006fc:	2302      	movs	r3, #2
	}
}
 80006fe:	4618      	mov	r0, r3
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000008c 	.word	0x2000008c
 8000708:	20000098 	.word	0x20000098

0800070c <object_Select>:

void object_Select(void){
 800070c:	b580      	push	{r7, lr}
 800070e:	b096      	sub	sp, #88	@ 0x58
 8000710:	af00      	add	r7, sp, #0

	RND_NUM();
 8000712:	f7ff ff47 	bl	80005a4 <RND_NUM>
	Matrix_clear();
 8000716:	f000 fd69 	bl	80011ec <Matrix_clear>
	switch(randomNumber) {
 800071a:	4b41      	ldr	r3, [pc, #260]	@ (8000820 <object_Select+0x114>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	2b06      	cmp	r3, #6
 8000720:	d877      	bhi.n	8000812 <object_Select+0x106>
 8000722:	a201      	add	r2, pc, #4	@ (adr r2, 8000728 <object_Select+0x1c>)
 8000724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000728:	08000745 	.word	0x08000745
 800072c:	08000763 	.word	0x08000763
 8000730:	08000781 	.word	0x08000781
 8000734:	0800079f 	.word	0x0800079f
 8000738:	080007bd 	.word	0x080007bd
 800073c:	080007db 	.word	0x080007db
 8000740:	080007f9 	.word	0x080007f9
		case(ORICKY):
			Object Oricky = {
 8000744:	4a37      	ldr	r2, [pc, #220]	@ (8000824 <object_Select+0x118>)
 8000746:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800074a:	ca07      	ldmia	r2, {r0, r1, r2}
 800074c:	c303      	stmia	r3!, {r0, r1}
 800074e:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 },     // 1 [1] 1
				.suboriginbit_0 = {0, 0}, 
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Oricky;
 8000750:	4b35      	ldr	r3, [pc, #212]	@ (8000828 <object_Select+0x11c>)
 8000752:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8000756:	ca07      	ldmia	r2, {r0, r1, r2}
 8000758:	c303      	stmia	r3!, {r0, r1}
 800075a:	801a      	strh	r2, [r3, #0]
		    transform_rotation();
 800075c:	f000 f872 	bl	8000844 <transform_rotation>
			break;
 8000760:	e057      	b.n	8000812 <object_Select+0x106>

		case(BRICKY):
			Object Bricky = {
 8000762:	4a32      	ldr	r2, [pc, #200]	@ (800082c <object_Select+0x120>)
 8000764:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000768:	ca07      	ldmia	r2, {r0, r1, r2}
 800076a:	c303      	stmia	r3!, {r0, r1}
 800076c:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 },     // 1 [1] 1
				.suboriginbit_0 = {0, 0}, 
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Bricky;
 800076e:	4b2e      	ldr	r3, [pc, #184]	@ (8000828 <object_Select+0x11c>)
 8000770:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8000774:	ca07      	ldmia	r2, {r0, r1, r2}
 8000776:	c303      	stmia	r3!, {r0, r1}
 8000778:	801a      	strh	r2, [r3, #0]
			transform_rotation();
 800077a:	f000 f863 	bl	8000844 <transform_rotation>
			break;
 800077e:	e048      	b.n	8000812 <object_Select+0x106>

		case(CLEVELAND):
			Object Cleveland = {
 8000780:	4a2b      	ldr	r2, [pc, #172]	@ (8000830 <object_Select+0x124>)
 8000782:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000786:	ca07      	ldmia	r2, {r0, r1, r2}
 8000788:	c303      	stmia	r3!, {r0, r1}
 800078a:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, 	  //    [1] 1
				.suboriginbit_0 = {0, 0},  
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Cleveland;
 800078c:	4b26      	ldr	r3, [pc, #152]	@ (8000828 <object_Select+0x11c>)
 800078e:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8000792:	ca07      	ldmia	r2, {r0, r1, r2}
 8000794:	c303      	stmia	r3!, {r0, r1}
 8000796:	801a      	strh	r2, [r3, #0]
		    transform_rotation();
 8000798:	f000 f854 	bl	8000844 <transform_rotation>
			break;
 800079c:	e039      	b.n	8000812 <object_Select+0x106>

		case(RHODE):
			Object Rhode = {
 800079e:	4a25      	ldr	r2, [pc, #148]	@ (8000834 <object_Select+0x128>)
 80007a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80007a6:	c303      	stmia	r3!, {r0, r1}
 80007a8:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 },     //     1 [1]
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Rhode;
 80007aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000828 <object_Select+0x11c>)
 80007ac:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80007b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80007b2:	c303      	stmia	r3!, {r0, r1}
 80007b4:	801a      	strh	r2, [r3, #0]
			transform_rotation();
 80007b6:	f000 f845 	bl	8000844 <transform_rotation>
			break;
 80007ba:	e02a      	b.n	8000812 <object_Select+0x106>

		case(HERO):
			Object Hero = {
 80007bc:	4a1e      	ldr	r2, [pc, #120]	@ (8000838 <object_Select+0x12c>)
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80007c4:	c303      	stmia	r3!, {r0, r1}
 80007c6:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, 			 //  1 1 [1] 1
				.suboriginbit_0 = {0, 0}, 
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Hero;
 80007c8:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <object_Select+0x11c>)
 80007ca:	f107 021c 	add.w	r2, r7, #28
 80007ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80007d0:	c303      	stmia	r3!, {r0, r1}
 80007d2:	801a      	strh	r2, [r3, #0]
			transform_rotation();
 80007d4:	f000 f836 	bl	8000844 <transform_rotation>
			break;
 80007d8:	e01b      	b.n	8000812 <object_Select+0x106>

		case(TEEWEE):
			Object Teewee = {
 80007da:	4a18      	ldr	r2, [pc, #96]	@ (800083c <object_Select+0x130>)
 80007dc:	f107 0310 	add.w	r3, r7, #16
 80007e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80007e2:	c303      	stmia	r3!, {r0, r1}
 80007e4:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, 			 	// 1 [1] 1
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Teewee;
 80007e6:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <object_Select+0x11c>)
 80007e8:	f107 0210 	add.w	r2, r7, #16
 80007ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80007ee:	c303      	stmia	r3!, {r0, r1}
 80007f0:	801a      	strh	r2, [r3, #0]
			transform_rotation();
 80007f2:	f000 f827 	bl	8000844 <transform_rotation>
			break;
 80007f6:	e00c      	b.n	8000812 <object_Select+0x106>

		case(SMASHBOY):
			Object Smashboy = {
 80007f8:	4a11      	ldr	r2, [pc, #68]	@ (8000840 <object_Select+0x134>)
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80007fe:	c303      	stmia	r3!, {r0, r1}
 8000800:	801a      	strh	r2, [r3, #0]
				.originbit = { .x = 5, .y = 12 }, 			 	//[1] 1
				.suboriginbit_0 = {0, 0},
				.suboriginbit_1 = {0, 0},
				.suboriginbit_2 = {0, 0}
			};
			object = Smashboy;
 8000802:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <object_Select+0x11c>)
 8000804:	1d3a      	adds	r2, r7, #4
 8000806:	ca07      	ldmia	r2, {r0, r1, r2}
 8000808:	c303      	stmia	r3!, {r0, r1}
 800080a:	801a      	strh	r2, [r3, #0]
			transform_rotation();
 800080c:	f000 f81a 	bl	8000844 <transform_rotation>
			break;
 8000810:	bf00      	nop

	}
	Matrix_update();
 8000812:	f000 fd81 	bl	8001318 <Matrix_update>
}
 8000816:	bf00      	nop
 8000818:	3758      	adds	r7, #88	@ 0x58
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	2000011c 	.word	0x2000011c
 8000824:	08005e08 	.word	0x08005e08
 8000828:	2000008c 	.word	0x2000008c
 800082c:	08005e14 	.word	0x08005e14
 8000830:	08005e20 	.word	0x08005e20
 8000834:	08005e2c 	.word	0x08005e2c
 8000838:	08005e38 	.word	0x08005e38
 800083c:	08005e44 	.word	0x08005e44
 8000840:	08005e50 	.word	0x08005e50

08000844 <transform_rotation>:
	if(check_State()) {
		object = temp;
	}
}

void transform_rotation(){
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
	Matrix_clear();
 800084a:	f000 fccf 	bl	80011ec <Matrix_clear>
	Object temp = object;
 800084e:	4a91      	ldr	r2, [pc, #580]	@ (8000a94 <transform_rotation+0x250>)
 8000850:	1d3b      	adds	r3, r7, #4
 8000852:	ca07      	ldmia	r2, {r0, r1, r2}
 8000854:	c303      	stmia	r3!, {r0, r1}
 8000856:	801a      	strh	r2, [r3, #0]
	object.Rotation += 1;
 8000858:	4b8e      	ldr	r3, [pc, #568]	@ (8000a94 <transform_rotation+0x250>)
 800085a:	785b      	ldrb	r3, [r3, #1]
 800085c:	3301      	adds	r3, #1
 800085e:	b2da      	uxtb	r2, r3
 8000860:	4b8c      	ldr	r3, [pc, #560]	@ (8000a94 <transform_rotation+0x250>)
 8000862:	705a      	strb	r2, [r3, #1]
	if((object.Rotation > 3) || (object.Rotation < 0)) {
 8000864:	4b8b      	ldr	r3, [pc, #556]	@ (8000a94 <transform_rotation+0x250>)
 8000866:	785b      	ldrb	r3, [r3, #1]
 8000868:	2b03      	cmp	r3, #3
 800086a:	d902      	bls.n	8000872 <transform_rotation+0x2e>
		object.Rotation = 0;
 800086c:	4b89      	ldr	r3, [pc, #548]	@ (8000a94 <transform_rotation+0x250>)
 800086e:	2200      	movs	r2, #0
 8000870:	705a      	strb	r2, [r3, #1]
	}

	switch(object.name){
 8000872:	4b88      	ldr	r3, [pc, #544]	@ (8000a94 <transform_rotation+0x250>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	2b06      	cmp	r3, #6
 8000878:	f200 8416 	bhi.w	80010a8 <transform_rotation+0x864>
 800087c:	a201      	add	r2, pc, #4	@ (adr r2, 8000884 <transform_rotation+0x40>)
 800087e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000882:	bf00      	nop
 8000884:	080008a1 	.word	0x080008a1
 8000888:	080009cb 	.word	0x080009cb
 800088c:	08000acd 	.word	0x08000acd
 8000890:	08000bf7 	.word	0x08000bf7
 8000894:	08000d29 	.word	0x08000d29
 8000898:	08000e43 	.word	0x08000e43
 800089c:	08000f65 	.word	0x08000f65
		case(ORICKY):
			switch(object.Rotation) {
 80008a0:	4b7c      	ldr	r3, [pc, #496]	@ (8000a94 <transform_rotation+0x250>)
 80008a2:	785b      	ldrb	r3, [r3, #1]
 80008a4:	2b03      	cmp	r3, #3
 80008a6:	f200 83f2 	bhi.w	800108e <transform_rotation+0x84a>
 80008aa:	a201      	add	r2, pc, #4	@ (adr r2, 80008b0 <transform_rotation+0x6c>)
 80008ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008b0:	080008c1 	.word	0x080008c1
 80008b4:	08000903 	.word	0x08000903
 80008b8:	08000945 	.word	0x08000945
 80008bc:	08000987 	.word	0x08000987
				case(ROTATION_0):
						//       1
						// 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;   //		 1
 80008c0:	4b74      	ldr	r3, [pc, #464]	@ (8000a94 <transform_rotation+0x250>)
 80008c2:	789b      	ldrb	r3, [r3, #2]
 80008c4:	3b01      	subs	r3, #1
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	4b72      	ldr	r3, [pc, #456]	@ (8000a94 <transform_rotation+0x250>)
 80008ca:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		// [1] 1 1
 80008cc:	4b71      	ldr	r3, [pc, #452]	@ (8000a94 <transform_rotation+0x250>)
 80008ce:	78da      	ldrb	r2, [r3, #3]
 80008d0:	4b70      	ldr	r3, [pc, #448]	@ (8000a94 <transform_rotation+0x250>)
 80008d2:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;	//        1
 80008d4:	4b6f      	ldr	r3, [pc, #444]	@ (8000a94 <transform_rotation+0x250>)
 80008d6:	789b      	ldrb	r3, [r3, #2]
 80008d8:	3301      	adds	r3, #1
 80008da:	b2da      	uxtb	r2, r3
 80008dc:	4b6d      	ldr	r3, [pc, #436]	@ (8000a94 <transform_rotation+0x250>)
 80008de:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		//  1  1 [1]
 80008e0:	4b6c      	ldr	r3, [pc, #432]	@ (8000a94 <transform_rotation+0x250>)
 80008e2:	78da      	ldrb	r2, [r3, #3]
 80008e4:	4b6b      	ldr	r3, [pc, #428]	@ (8000a94 <transform_rotation+0x250>)
 80008e6:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	// 	  [1]
 80008e8:	4b6a      	ldr	r3, [pc, #424]	@ (8000a94 <transform_rotation+0x250>)
 80008ea:	789b      	ldrb	r3, [r3, #2]
 80008ec:	3301      	adds	r3, #1
 80008ee:	b2da      	uxtb	r2, r3
 80008f0:	4b68      	ldr	r3, [pc, #416]	@ (8000a94 <transform_rotation+0x250>)
 80008f2:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	// 1 1 1
 80008f4:	4b67      	ldr	r3, [pc, #412]	@ (8000a94 <transform_rotation+0x250>)
 80008f6:	78db      	ldrb	r3, [r3, #3]
 80008f8:	3301      	adds	r3, #1
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	4b65      	ldr	r3, [pc, #404]	@ (8000a94 <transform_rotation+0x250>)
 80008fe:	725a      	strb	r2, [r3, #9]

					break;
 8000900:	e062      	b.n	80009c8 <transform_rotation+0x184>
				case(ROTATION_1):
						// 1  1
						//   [1]
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 8000902:	4b64      	ldr	r3, [pc, #400]	@ (8000a94 <transform_rotation+0x250>)
 8000904:	789a      	ldrb	r2, [r3, #2]
 8000906:	4b63      	ldr	r3, [pc, #396]	@ (8000a94 <transform_rotation+0x250>)
 8000908:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y - 1;
 800090a:	4b62      	ldr	r3, [pc, #392]	@ (8000a94 <transform_rotation+0x250>)
 800090c:	78db      	ldrb	r3, [r3, #3]
 800090e:	3b01      	subs	r3, #1
 8000910:	b2da      	uxtb	r2, r3
 8000912:	4b60      	ldr	r3, [pc, #384]	@ (8000a94 <transform_rotation+0x250>)
 8000914:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000916:	4b5f      	ldr	r3, [pc, #380]	@ (8000a94 <transform_rotation+0x250>)
 8000918:	789a      	ldrb	r2, [r3, #2]
 800091a:	4b5e      	ldr	r3, [pc, #376]	@ (8000a94 <transform_rotation+0x250>)
 800091c:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;
 800091e:	4b5d      	ldr	r3, [pc, #372]	@ (8000a94 <transform_rotation+0x250>)
 8000920:	78db      	ldrb	r3, [r3, #3]
 8000922:	3301      	adds	r3, #1
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4b5b      	ldr	r3, [pc, #364]	@ (8000a94 <transform_rotation+0x250>)
 8000928:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 800092a:	4b5a      	ldr	r3, [pc, #360]	@ (8000a94 <transform_rotation+0x250>)
 800092c:	789b      	ldrb	r3, [r3, #2]
 800092e:	3b01      	subs	r3, #1
 8000930:	b2da      	uxtb	r2, r3
 8000932:	4b58      	ldr	r3, [pc, #352]	@ (8000a94 <transform_rotation+0x250>)
 8000934:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1;
 8000936:	4b57      	ldr	r3, [pc, #348]	@ (8000a94 <transform_rotation+0x250>)
 8000938:	78db      	ldrb	r3, [r3, #3]
 800093a:	3301      	adds	r3, #1
 800093c:	b2da      	uxtb	r2, r3
 800093e:	4b55      	ldr	r3, [pc, #340]	@ (8000a94 <transform_rotation+0x250>)
 8000940:	725a      	strb	r2, [r3, #9]

					break;
 8000942:	e041      	b.n	80009c8 <transform_rotation+0x184>
				case(ROTATION_2):
						// 1  [1]  1
						// 1
					object.suboriginbit_0.x = object.originbit.x + 1;
 8000944:	4b53      	ldr	r3, [pc, #332]	@ (8000a94 <transform_rotation+0x250>)
 8000946:	789b      	ldrb	r3, [r3, #2]
 8000948:	3301      	adds	r3, #1
 800094a:	b2da      	uxtb	r2, r3
 800094c:	4b51      	ldr	r3, [pc, #324]	@ (8000a94 <transform_rotation+0x250>)
 800094e:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000950:	4b50      	ldr	r3, [pc, #320]	@ (8000a94 <transform_rotation+0x250>)
 8000952:	78da      	ldrb	r2, [r3, #3]
 8000954:	4b4f      	ldr	r3, [pc, #316]	@ (8000a94 <transform_rotation+0x250>)
 8000956:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;
 8000958:	4b4e      	ldr	r3, [pc, #312]	@ (8000a94 <transform_rotation+0x250>)
 800095a:	789b      	ldrb	r3, [r3, #2]
 800095c:	3b01      	subs	r3, #1
 800095e:	b2da      	uxtb	r2, r3
 8000960:	4b4c      	ldr	r3, [pc, #304]	@ (8000a94 <transform_rotation+0x250>)
 8000962:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000964:	4b4b      	ldr	r3, [pc, #300]	@ (8000a94 <transform_rotation+0x250>)
 8000966:	78da      	ldrb	r2, [r3, #3]
 8000968:	4b4a      	ldr	r3, [pc, #296]	@ (8000a94 <transform_rotation+0x250>)
 800096a:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 800096c:	4b49      	ldr	r3, [pc, #292]	@ (8000a94 <transform_rotation+0x250>)
 800096e:	789b      	ldrb	r3, [r3, #2]
 8000970:	3b01      	subs	r3, #1
 8000972:	b2da      	uxtb	r2, r3
 8000974:	4b47      	ldr	r3, [pc, #284]	@ (8000a94 <transform_rotation+0x250>)
 8000976:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8000978:	4b46      	ldr	r3, [pc, #280]	@ (8000a94 <transform_rotation+0x250>)
 800097a:	78db      	ldrb	r3, [r3, #3]
 800097c:	3b01      	subs	r3, #1
 800097e:	b2da      	uxtb	r2, r3
 8000980:	4b44      	ldr	r3, [pc, #272]	@ (8000a94 <transform_rotation+0x250>)
 8000982:	725a      	strb	r2, [r3, #9]

					break;
 8000984:	e020      	b.n	80009c8 <transform_rotation+0x184>
				case(ROTATION_3):
						//  1
						// [1]
						//  1 1
					object.suboriginbit_0.x = object.originbit.x;
 8000986:	4b43      	ldr	r3, [pc, #268]	@ (8000a94 <transform_rotation+0x250>)
 8000988:	789a      	ldrb	r2, [r3, #2]
 800098a:	4b42      	ldr	r3, [pc, #264]	@ (8000a94 <transform_rotation+0x250>)
 800098c:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 800098e:	4b41      	ldr	r3, [pc, #260]	@ (8000a94 <transform_rotation+0x250>)
 8000990:	78db      	ldrb	r3, [r3, #3]
 8000992:	3301      	adds	r3, #1
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4b3f      	ldr	r3, [pc, #252]	@ (8000a94 <transform_rotation+0x250>)
 8000998:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 800099a:	4b3e      	ldr	r3, [pc, #248]	@ (8000a94 <transform_rotation+0x250>)
 800099c:	789a      	ldrb	r2, [r3, #2]
 800099e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a94 <transform_rotation+0x250>)
 80009a0:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 80009a2:	4b3c      	ldr	r3, [pc, #240]	@ (8000a94 <transform_rotation+0x250>)
 80009a4:	78db      	ldrb	r3, [r3, #3]
 80009a6:	3b01      	subs	r3, #1
 80009a8:	b2da      	uxtb	r2, r3
 80009aa:	4b3a      	ldr	r3, [pc, #232]	@ (8000a94 <transform_rotation+0x250>)
 80009ac:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;
 80009ae:	4b39      	ldr	r3, [pc, #228]	@ (8000a94 <transform_rotation+0x250>)
 80009b0:	789b      	ldrb	r3, [r3, #2]
 80009b2:	3301      	adds	r3, #1
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4b37      	ldr	r3, [pc, #220]	@ (8000a94 <transform_rotation+0x250>)
 80009b8:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 80009ba:	4b36      	ldr	r3, [pc, #216]	@ (8000a94 <transform_rotation+0x250>)
 80009bc:	78db      	ldrb	r3, [r3, #3]
 80009be:	3b01      	subs	r3, #1
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b34      	ldr	r3, [pc, #208]	@ (8000a94 <transform_rotation+0x250>)
 80009c4:	725a      	strb	r2, [r3, #9]

					break;
 80009c6:	bf00      	nop
			}
			break;
 80009c8:	e361      	b.n	800108e <transform_rotation+0x84a>
		case(BRICKY):
			switch(object.Rotation) {
 80009ca:	4b32      	ldr	r3, [pc, #200]	@ (8000a94 <transform_rotation+0x250>)
 80009cc:	785b      	ldrb	r3, [r3, #1]
 80009ce:	2b03      	cmp	r3, #3
 80009d0:	f200 835f 	bhi.w	8001092 <transform_rotation+0x84e>
 80009d4:	a201      	add	r2, pc, #4	@ (adr r2, 80009dc <transform_rotation+0x198>)
 80009d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009da:	bf00      	nop
 80009dc:	080009ed 	.word	0x080009ed
 80009e0:	08000a2f 	.word	0x08000a2f
 80009e4:	08000a61 	.word	0x08000a61
 80009e8:	08000a99 	.word	0x08000a99
				case(ROTATION_0):
						// 1
						// 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;   //	1
 80009ec:	4b29      	ldr	r3, [pc, #164]	@ (8000a94 <transform_rotation+0x250>)
 80009ee:	789b      	ldrb	r3, [r3, #2]
 80009f0:	3b01      	subs	r3, #1
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	4b27      	ldr	r3, [pc, #156]	@ (8000a94 <transform_rotation+0x250>)
 80009f6:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		// [1] 1 1
 80009f8:	4b26      	ldr	r3, [pc, #152]	@ (8000a94 <transform_rotation+0x250>)
 80009fa:	78da      	ldrb	r2, [r3, #3]
 80009fc:	4b25      	ldr	r3, [pc, #148]	@ (8000a94 <transform_rotation+0x250>)
 80009fe:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;	//  1
 8000a00:	4b24      	ldr	r3, [pc, #144]	@ (8000a94 <transform_rotation+0x250>)
 8000a02:	789b      	ldrb	r3, [r3, #2]
 8000a04:	3301      	adds	r3, #1
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	4b22      	ldr	r3, [pc, #136]	@ (8000a94 <transform_rotation+0x250>)
 8000a0a:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		//  1  1 [1]
 8000a0c:	4b21      	ldr	r3, [pc, #132]	@ (8000a94 <transform_rotation+0x250>)
 8000a0e:	78da      	ldrb	r2, [r3, #3]
 8000a10:	4b20      	ldr	r3, [pc, #128]	@ (8000a94 <transform_rotation+0x250>)
 8000a12:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;	//[1]
 8000a14:	4b1f      	ldr	r3, [pc, #124]	@ (8000a94 <transform_rotation+0x250>)
 8000a16:	789b      	ldrb	r3, [r3, #2]
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	b2da      	uxtb	r2, r3
 8000a1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000a94 <transform_rotation+0x250>)
 8000a1e:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	// 1 1 1
 8000a20:	4b1c      	ldr	r3, [pc, #112]	@ (8000a94 <transform_rotation+0x250>)
 8000a22:	78db      	ldrb	r3, [r3, #3]
 8000a24:	3301      	adds	r3, #1
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	4b1a      	ldr	r3, [pc, #104]	@ (8000a94 <transform_rotation+0x250>)
 8000a2a:	725a      	strb	r2, [r3, #9]

					break;
 8000a2c:	e04d      	b.n	8000aca <transform_rotation+0x286>
				case(ROTATION_1):
						// 1 1
						//[1]
						// 1
					object.suboriginbit_0.x = object.originbit.x;
 8000a2e:	4b19      	ldr	r3, [pc, #100]	@ (8000a94 <transform_rotation+0x250>)
 8000a30:	789a      	ldrb	r2, [r3, #2]
 8000a32:	4b18      	ldr	r3, [pc, #96]	@ (8000a94 <transform_rotation+0x250>)
 8000a34:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000a36:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <transform_rotation+0x250>)
 8000a38:	78da      	ldrb	r2, [r3, #3]
 8000a3a:	4b16      	ldr	r3, [pc, #88]	@ (8000a94 <transform_rotation+0x250>)
 8000a3c:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000a3e:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <transform_rotation+0x250>)
 8000a40:	789a      	ldrb	r2, [r3, #2]
 8000a42:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <transform_rotation+0x250>)
 8000a44:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000a46:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <transform_rotation+0x250>)
 8000a48:	78da      	ldrb	r2, [r3, #3]
 8000a4a:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <transform_rotation+0x250>)
 8000a4c:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	@ (8000a94 <transform_rotation+0x250>)
 8000a50:	789a      	ldrb	r2, [r3, #2]
 8000a52:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <transform_rotation+0x250>)
 8000a54:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 8000a56:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <transform_rotation+0x250>)
 8000a58:	78da      	ldrb	r2, [r3, #3]
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a94 <transform_rotation+0x250>)
 8000a5c:	725a      	strb	r2, [r3, #9]

					break;
 8000a5e:	e034      	b.n	8000aca <transform_rotation+0x286>
				case(ROTATION_2):
						// 1 [1] 1
						//       1
					object.suboriginbit_0.x = object.originbit.x;
 8000a60:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <transform_rotation+0x250>)
 8000a62:	789a      	ldrb	r2, [r3, #2]
 8000a64:	4b0b      	ldr	r3, [pc, #44]	@ (8000a94 <transform_rotation+0x250>)
 8000a66:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	@ (8000a94 <transform_rotation+0x250>)
 8000a6a:	78da      	ldrb	r2, [r3, #3]
 8000a6c:	4b09      	ldr	r3, [pc, #36]	@ (8000a94 <transform_rotation+0x250>)
 8000a6e:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000a70:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <transform_rotation+0x250>)
 8000a72:	789a      	ldrb	r2, [r3, #2]
 8000a74:	4b07      	ldr	r3, [pc, #28]	@ (8000a94 <transform_rotation+0x250>)
 8000a76:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000a78:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <transform_rotation+0x250>)
 8000a7a:	78da      	ldrb	r2, [r3, #3]
 8000a7c:	4b05      	ldr	r3, [pc, #20]	@ (8000a94 <transform_rotation+0x250>)
 8000a7e:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000a80:	4b04      	ldr	r3, [pc, #16]	@ (8000a94 <transform_rotation+0x250>)
 8000a82:	789a      	ldrb	r2, [r3, #2]
 8000a84:	4b03      	ldr	r3, [pc, #12]	@ (8000a94 <transform_rotation+0x250>)
 8000a86:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 8000a88:	4b02      	ldr	r3, [pc, #8]	@ (8000a94 <transform_rotation+0x250>)
 8000a8a:	78da      	ldrb	r2, [r3, #3]
 8000a8c:	4b01      	ldr	r3, [pc, #4]	@ (8000a94 <transform_rotation+0x250>)
 8000a8e:	725a      	strb	r2, [r3, #9]

					break;
 8000a90:	e01b      	b.n	8000aca <transform_rotation+0x286>
 8000a92:	bf00      	nop
 8000a94:	2000008c 	.word	0x2000008c
				case(ROTATION_3):
						//   1
						//  [1]
						// 1 1
					object.suboriginbit_0.x = object.originbit.x;
 8000a98:	4b91      	ldr	r3, [pc, #580]	@ (8000ce0 <transform_rotation+0x49c>)
 8000a9a:	789a      	ldrb	r2, [r3, #2]
 8000a9c:	4b90      	ldr	r3, [pc, #576]	@ (8000ce0 <transform_rotation+0x49c>)
 8000a9e:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000aa0:	4b8f      	ldr	r3, [pc, #572]	@ (8000ce0 <transform_rotation+0x49c>)
 8000aa2:	78da      	ldrb	r2, [r3, #3]
 8000aa4:	4b8e      	ldr	r3, [pc, #568]	@ (8000ce0 <transform_rotation+0x49c>)
 8000aa6:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000aa8:	4b8d      	ldr	r3, [pc, #564]	@ (8000ce0 <transform_rotation+0x49c>)
 8000aaa:	789a      	ldrb	r2, [r3, #2]
 8000aac:	4b8c      	ldr	r3, [pc, #560]	@ (8000ce0 <transform_rotation+0x49c>)
 8000aae:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000ab0:	4b8b      	ldr	r3, [pc, #556]	@ (8000ce0 <transform_rotation+0x49c>)
 8000ab2:	78da      	ldrb	r2, [r3, #3]
 8000ab4:	4b8a      	ldr	r3, [pc, #552]	@ (8000ce0 <transform_rotation+0x49c>)
 8000ab6:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000ab8:	4b89      	ldr	r3, [pc, #548]	@ (8000ce0 <transform_rotation+0x49c>)
 8000aba:	789a      	ldrb	r2, [r3, #2]
 8000abc:	4b88      	ldr	r3, [pc, #544]	@ (8000ce0 <transform_rotation+0x49c>)
 8000abe:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 8000ac0:	4b87      	ldr	r3, [pc, #540]	@ (8000ce0 <transform_rotation+0x49c>)
 8000ac2:	78da      	ldrb	r2, [r3, #3]
 8000ac4:	4b86      	ldr	r3, [pc, #536]	@ (8000ce0 <transform_rotation+0x49c>)
 8000ac6:	725a      	strb	r2, [r3, #9]

					break;
 8000ac8:	bf00      	nop
			}

			break;
 8000aca:	e2e2      	b.n	8001092 <transform_rotation+0x84e>
		case(CLEVELAND):
			switch(object.Rotation) {
 8000acc:	4b84      	ldr	r3, [pc, #528]	@ (8000ce0 <transform_rotation+0x49c>)
 8000ace:	785b      	ldrb	r3, [r3, #1]
 8000ad0:	2b03      	cmp	r3, #3
 8000ad2:	f200 82e0 	bhi.w	8001096 <transform_rotation+0x852>
 8000ad6:	a201      	add	r2, pc, #4	@ (adr r2, 8000adc <transform_rotation+0x298>)
 8000ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000adc:	08000aed 	.word	0x08000aed
 8000ae0:	08000b2f 	.word	0x08000b2f
 8000ae4:	08000b71 	.word	0x08000b71
 8000ae8:	08000bb3 	.word	0x08000bb3
				case(ROTATION_0):
						// 1 1
						//  [1] 1
					object.suboriginbit_0.x = object.originbit.x;			 //	1 [1]
 8000aec:	4b7c      	ldr	r3, [pc, #496]	@ (8000ce0 <transform_rotation+0x49c>)
 8000aee:	789a      	ldrb	r2, [r3, #2]
 8000af0:	4b7b      	ldr	r3, [pc, #492]	@ (8000ce0 <transform_rotation+0x49c>)
 8000af2:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;		 //    1 1
 8000af4:	4b7a      	ldr	r3, [pc, #488]	@ (8000ce0 <transform_rotation+0x49c>)
 8000af6:	78db      	ldrb	r3, [r3, #3]
 8000af8:	3301      	adds	r3, #1
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b78      	ldr	r3, [pc, #480]	@ (8000ce0 <transform_rotation+0x49c>)
 8000afe:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;		 // [1] 1
 8000b00:	4b77      	ldr	r3, [pc, #476]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b02:	789b      	ldrb	r3, [r3, #2]
 8000b04:	3b01      	subs	r3, #1
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	4b75      	ldr	r3, [pc, #468]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b0a:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;		 //     1 1
 8000b0c:	4b74      	ldr	r3, [pc, #464]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b0e:	78db      	ldrb	r3, [r3, #3]
 8000b10:	3301      	adds	r3, #1
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	4b72      	ldr	r3, [pc, #456]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b16:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;		 //  1 1
 8000b18:	4b71      	ldr	r3, [pc, #452]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b1a:	789b      	ldrb	r3, [r3, #2]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	b2da      	uxtb	r2, r3
 8000b20:	4b6f      	ldr	r3, [pc, #444]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b22:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y; 	     	//    1 [1]
 8000b24:	4b6e      	ldr	r3, [pc, #440]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b26:	78da      	ldrb	r2, [r3, #3]
 8000b28:	4b6d      	ldr	r3, [pc, #436]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b2a:	725a      	strb	r2, [r3, #9]

					break;
 8000b2c:	e062      	b.n	8000bf4 <transform_rotation+0x3b0>
				case(ROTATION_1):
						//     1
						// [1] 1
						//  1
					object.suboriginbit_0.x = object.originbit.x+1;
 8000b2e:	4b6c      	ldr	r3, [pc, #432]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b30:	789b      	ldrb	r3, [r3, #2]
 8000b32:	3301      	adds	r3, #1
 8000b34:	b2da      	uxtb	r2, r3
 8000b36:	4b6a      	ldr	r3, [pc, #424]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b38:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000b3a:	4b69      	ldr	r3, [pc, #420]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b3c:	78da      	ldrb	r2, [r3, #3]
 8000b3e:	4b68      	ldr	r3, [pc, #416]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b40:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x+1;
 8000b42:	4b67      	ldr	r3, [pc, #412]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b44:	789b      	ldrb	r3, [r3, #2]
 8000b46:	3301      	adds	r3, #1
 8000b48:	b2da      	uxtb	r2, r3
 8000b4a:	4b65      	ldr	r3, [pc, #404]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b4c:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y+1;
 8000b4e:	4b64      	ldr	r3, [pc, #400]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b50:	78db      	ldrb	r3, [r3, #3]
 8000b52:	3301      	adds	r3, #1
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4b62      	ldr	r3, [pc, #392]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b58:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000b5a:	4b61      	ldr	r3, [pc, #388]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b5c:	789a      	ldrb	r2, [r3, #2]
 8000b5e:	4b60      	ldr	r3, [pc, #384]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b60:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y-1;
 8000b62:	4b5f      	ldr	r3, [pc, #380]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b64:	78db      	ldrb	r3, [r3, #3]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4b5d      	ldr	r3, [pc, #372]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b6c:	725a      	strb	r2, [r3, #9]

					break;
 8000b6e:	e041      	b.n	8000bf4 <transform_rotation+0x3b0>
				case(ROTATION_2):
						// 1 [1]
						//    1  1
					object.suboriginbit_0.x = object.originbit.x - 1;
 8000b70:	4b5b      	ldr	r3, [pc, #364]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b72:	789b      	ldrb	r3, [r3, #2]
 8000b74:	3b01      	subs	r3, #1
 8000b76:	b2da      	uxtb	r2, r3
 8000b78:	4b59      	ldr	r3, [pc, #356]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b7a:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000b7c:	4b58      	ldr	r3, [pc, #352]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b7e:	78da      	ldrb	r2, [r3, #3]
 8000b80:	4b57      	ldr	r3, [pc, #348]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b82:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000b84:	4b56      	ldr	r3, [pc, #344]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b86:	789a      	ldrb	r2, [r3, #2]
 8000b88:	4b55      	ldr	r3, [pc, #340]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b8a:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8000b8c:	4b54      	ldr	r3, [pc, #336]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b8e:	78db      	ldrb	r3, [r3, #3]
 8000b90:	3b01      	subs	r3, #1
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	4b52      	ldr	r3, [pc, #328]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b96:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;
 8000b98:	4b51      	ldr	r3, [pc, #324]	@ (8000ce0 <transform_rotation+0x49c>)
 8000b9a:	789b      	ldrb	r3, [r3, #2]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	4b4f      	ldr	r3, [pc, #316]	@ (8000ce0 <transform_rotation+0x49c>)
 8000ba2:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8000ba4:	4b4e      	ldr	r3, [pc, #312]	@ (8000ce0 <transform_rotation+0x49c>)
 8000ba6:	78db      	ldrb	r3, [r3, #3]
 8000ba8:	3b01      	subs	r3, #1
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	4b4c      	ldr	r3, [pc, #304]	@ (8000ce0 <transform_rotation+0x49c>)
 8000bae:	725a      	strb	r2, [r3, #9]

					break;
 8000bb0:	e020      	b.n	8000bf4 <transform_rotation+0x3b0>
				case(ROTATION_3):
						//     1
						//  1 [1]
						//  1
					object.suboriginbit_0.x = object.originbit.x - 1;
 8000bb2:	4b4b      	ldr	r3, [pc, #300]	@ (8000ce0 <transform_rotation+0x49c>)
 8000bb4:	789b      	ldrb	r3, [r3, #2]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	b2da      	uxtb	r2, r3
 8000bba:	4b49      	ldr	r3, [pc, #292]	@ (8000ce0 <transform_rotation+0x49c>)
 8000bbc:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000bbe:	4b48      	ldr	r3, [pc, #288]	@ (8000ce0 <transform_rotation+0x49c>)
 8000bc0:	78da      	ldrb	r2, [r3, #3]
 8000bc2:	4b47      	ldr	r3, [pc, #284]	@ (8000ce0 <transform_rotation+0x49c>)
 8000bc4:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;
 8000bc6:	4b46      	ldr	r3, [pc, #280]	@ (8000ce0 <transform_rotation+0x49c>)
 8000bc8:	789b      	ldrb	r3, [r3, #2]
 8000bca:	3b01      	subs	r3, #1
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4b44      	ldr	r3, [pc, #272]	@ (8000ce0 <transform_rotation+0x49c>)
 8000bd0:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8000bd2:	4b43      	ldr	r3, [pc, #268]	@ (8000ce0 <transform_rotation+0x49c>)
 8000bd4:	78db      	ldrb	r3, [r3, #3]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	4b41      	ldr	r3, [pc, #260]	@ (8000ce0 <transform_rotation+0x49c>)
 8000bdc:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000bde:	4b40      	ldr	r3, [pc, #256]	@ (8000ce0 <transform_rotation+0x49c>)
 8000be0:	789a      	ldrb	r2, [r3, #2]
 8000be2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ce0 <transform_rotation+0x49c>)
 8000be4:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1;
 8000be6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ce0 <transform_rotation+0x49c>)
 8000be8:	78db      	ldrb	r3, [r3, #3]
 8000bea:	3301      	adds	r3, #1
 8000bec:	b2da      	uxtb	r2, r3
 8000bee:	4b3c      	ldr	r3, [pc, #240]	@ (8000ce0 <transform_rotation+0x49c>)
 8000bf0:	725a      	strb	r2, [r3, #9]

					break;
 8000bf2:	bf00      	nop
			}
			break;
 8000bf4:	e24f      	b.n	8001096 <transform_rotation+0x852>
		case(RHODE):
			switch(object.Rotation) {
 8000bf6:	4b3a      	ldr	r3, [pc, #232]	@ (8000ce0 <transform_rotation+0x49c>)
 8000bf8:	785b      	ldrb	r3, [r3, #1]
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	f200 824d 	bhi.w	800109a <transform_rotation+0x856>
 8000c00:	a201      	add	r2, pc, #4	@ (adr r2, 8000c08 <transform_rotation+0x3c4>)
 8000c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c06:	bf00      	nop
 8000c08:	08000c19 	.word	0x08000c19
 8000c0c:	08000c5b 	.word	0x08000c5b
 8000c10:	08000c9d 	.word	0x08000c9d
 8000c14:	08000ce5 	.word	0x08000ce5
				case(ROTATION_0):
						//    1 1
						// 1 [1]
					object.suboriginbit_0.x = object.originbit.x;			 //	  [1] 1
 8000c18:	4b31      	ldr	r3, [pc, #196]	@ (8000ce0 <transform_rotation+0x49c>)
 8000c1a:	789a      	ldrb	r2, [r3, #2]
 8000c1c:	4b30      	ldr	r3, [pc, #192]	@ (8000ce0 <transform_rotation+0x49c>)
 8000c1e:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;		 //  1 1
 8000c20:	4b2f      	ldr	r3, [pc, #188]	@ (8000ce0 <transform_rotation+0x49c>)
 8000c22:	78db      	ldrb	r3, [r3, #3]
 8000c24:	3301      	adds	r3, #1
 8000c26:	b2da      	uxtb	r2, r3
 8000c28:	4b2d      	ldr	r3, [pc, #180]	@ (8000ce0 <transform_rotation+0x49c>)
 8000c2a:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;		 //    1 [1]
 8000c2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce0 <transform_rotation+0x49c>)
 8000c2e:	789b      	ldrb	r3, [r3, #2]
 8000c30:	3301      	adds	r3, #1
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce0 <transform_rotation+0x49c>)
 8000c36:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;		 //  1 1
 8000c38:	4b29      	ldr	r3, [pc, #164]	@ (8000ce0 <transform_rotation+0x49c>)
 8000c3a:	78db      	ldrb	r3, [r3, #3]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	b2da      	uxtb	r2, r3
 8000c40:	4b27      	ldr	r3, [pc, #156]	@ (8000ce0 <transform_rotation+0x49c>)
 8000c42:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;		 //     1 1
 8000c44:	4b26      	ldr	r3, [pc, #152]	@ (8000ce0 <transform_rotation+0x49c>)
 8000c46:	789b      	ldrb	r3, [r3, #2]
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	b2da      	uxtb	r2, r3
 8000c4c:	4b24      	ldr	r3, [pc, #144]	@ (8000ce0 <transform_rotation+0x49c>)
 8000c4e:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y; 	     // [1] 1
 8000c50:	4b23      	ldr	r3, [pc, #140]	@ (8000ce0 <transform_rotation+0x49c>)
 8000c52:	78da      	ldrb	r2, [r3, #3]
 8000c54:	4b22      	ldr	r3, [pc, #136]	@ (8000ce0 <transform_rotation+0x49c>)
 8000c56:	725a      	strb	r2, [r3, #9]

					break;
 8000c58:	e065      	b.n	8000d26 <transform_rotation+0x4e2>
				case(ROTATION_1):
						// 1
						//[1] 1
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	@ (8000ce0 <transform_rotation+0x49c>)
 8000c5c:	789a      	ldrb	r2, [r3, #2]
 8000c5e:	4b20      	ldr	r3, [pc, #128]	@ (8000ce0 <transform_rotation+0x49c>)
 8000c60:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 8000c62:	4b1f      	ldr	r3, [pc, #124]	@ (8000ce0 <transform_rotation+0x49c>)
 8000c64:	78db      	ldrb	r3, [r3, #3]
 8000c66:	3301      	adds	r3, #1
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce0 <transform_rotation+0x49c>)
 8000c6c:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;
 8000c6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ce0 <transform_rotation+0x49c>)
 8000c70:	789b      	ldrb	r3, [r3, #2]
 8000c72:	3301      	adds	r3, #1
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce0 <transform_rotation+0x49c>)
 8000c78:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ce0 <transform_rotation+0x49c>)
 8000c7c:	78da      	ldrb	r2, [r3, #3]
 8000c7e:	4b18      	ldr	r3, [pc, #96]	@ (8000ce0 <transform_rotation+0x49c>)
 8000c80:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;
 8000c82:	4b17      	ldr	r3, [pc, #92]	@ (8000ce0 <transform_rotation+0x49c>)
 8000c84:	789b      	ldrb	r3, [r3, #2]
 8000c86:	3301      	adds	r3, #1
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ce0 <transform_rotation+0x49c>)
 8000c8c:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8000c8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ce0 <transform_rotation+0x49c>)
 8000c90:	78db      	ldrb	r3, [r3, #3]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	4b12      	ldr	r3, [pc, #72]	@ (8000ce0 <transform_rotation+0x49c>)
 8000c98:	725a      	strb	r2, [r3, #9]

					break;
 8000c9a:	e044      	b.n	8000d26 <transform_rotation+0x4e2>
				case(ROTATION_2):
						//  [1] 1
						// 1 1
					object.suboriginbit_0.x = object.originbit.x + 1;
 8000c9c:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <transform_rotation+0x49c>)
 8000c9e:	789b      	ldrb	r3, [r3, #2]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	b2da      	uxtb	r2, r3
 8000ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <transform_rotation+0x49c>)
 8000ca6:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce0 <transform_rotation+0x49c>)
 8000caa:	78da      	ldrb	r2, [r3, #3]
 8000cac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <transform_rotation+0x49c>)
 8000cae:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <transform_rotation+0x49c>)
 8000cb2:	789a      	ldrb	r2, [r3, #2]
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <transform_rotation+0x49c>)
 8000cb6:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <transform_rotation+0x49c>)
 8000cba:	78db      	ldrb	r3, [r3, #3]
 8000cbc:	3b01      	subs	r3, #1
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <transform_rotation+0x49c>)
 8000cc2:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <transform_rotation+0x49c>)
 8000cc6:	789b      	ldrb	r3, [r3, #2]
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <transform_rotation+0x49c>)
 8000cce:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	@ (8000ce0 <transform_rotation+0x49c>)
 8000cd2:	78db      	ldrb	r3, [r3, #3]
 8000cd4:	3b01      	subs	r3, #1
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b01      	ldr	r3, [pc, #4]	@ (8000ce0 <transform_rotation+0x49c>)
 8000cda:	725a      	strb	r2, [r3, #9]

					break;
 8000cdc:	e023      	b.n	8000d26 <transform_rotation+0x4e2>
 8000cde:	bf00      	nop
 8000ce0:	2000008c 	.word	0x2000008c
				case(ROTATION_3):
						// 1
						// 1 [1]
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 8000ce4:	4b8e      	ldr	r3, [pc, #568]	@ (8000f20 <transform_rotation+0x6dc>)
 8000ce6:	789a      	ldrb	r2, [r3, #2]
 8000ce8:	4b8d      	ldr	r3, [pc, #564]	@ (8000f20 <transform_rotation+0x6dc>)
 8000cea:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y - 1;
 8000cec:	4b8c      	ldr	r3, [pc, #560]	@ (8000f20 <transform_rotation+0x6dc>)
 8000cee:	78db      	ldrb	r3, [r3, #3]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	b2da      	uxtb	r2, r3
 8000cf4:	4b8a      	ldr	r3, [pc, #552]	@ (8000f20 <transform_rotation+0x6dc>)
 8000cf6:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 1;
 8000cf8:	4b89      	ldr	r3, [pc, #548]	@ (8000f20 <transform_rotation+0x6dc>)
 8000cfa:	789b      	ldrb	r3, [r3, #2]
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	4b87      	ldr	r3, [pc, #540]	@ (8000f20 <transform_rotation+0x6dc>)
 8000d02:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000d04:	4b86      	ldr	r3, [pc, #536]	@ (8000f20 <transform_rotation+0x6dc>)
 8000d06:	78da      	ldrb	r2, [r3, #3]
 8000d08:	4b85      	ldr	r3, [pc, #532]	@ (8000f20 <transform_rotation+0x6dc>)
 8000d0a:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 8000d0c:	4b84      	ldr	r3, [pc, #528]	@ (8000f20 <transform_rotation+0x6dc>)
 8000d0e:	789b      	ldrb	r3, [r3, #2]
 8000d10:	3b01      	subs	r3, #1
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	4b82      	ldr	r3, [pc, #520]	@ (8000f20 <transform_rotation+0x6dc>)
 8000d16:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1;
 8000d18:	4b81      	ldr	r3, [pc, #516]	@ (8000f20 <transform_rotation+0x6dc>)
 8000d1a:	78db      	ldrb	r3, [r3, #3]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	b2da      	uxtb	r2, r3
 8000d20:	4b7f      	ldr	r3, [pc, #508]	@ (8000f20 <transform_rotation+0x6dc>)
 8000d22:	725a      	strb	r2, [r3, #9]

					break;
 8000d24:	bf00      	nop
			}
			break;
 8000d26:	e1b8      	b.n	800109a <transform_rotation+0x856>
		case(HERO):
			switch(object.Rotation) {
 8000d28:	4b7d      	ldr	r3, [pc, #500]	@ (8000f20 <transform_rotation+0x6dc>)
 8000d2a:	785b      	ldrb	r3, [r3, #1]
 8000d2c:	2b03      	cmp	r3, #3
 8000d2e:	f200 81b6 	bhi.w	800109e <transform_rotation+0x85a>
 8000d32:	a201      	add	r2, pc, #4	@ (adr r2, 8000d38 <transform_rotation+0x4f4>)
 8000d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d38:	08000d49 	.word	0x08000d49
 8000d3c:	08000d87 	.word	0x08000d87
 8000d40:	08000dc5 	.word	0x08000dc5
 8000d44:	08000e03 	.word	0x08000e03
				case(ROTATION_0):
						// 1 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;	 //
 8000d48:	4b75      	ldr	r3, [pc, #468]	@ (8000f20 <transform_rotation+0x6dc>)
 8000d4a:	789b      	ldrb	r3, [r3, #2]
 8000d4c:	3b01      	subs	r3, #1
 8000d4e:	b2da      	uxtb	r2, r3
 8000d50:	4b73      	ldr	r3, [pc, #460]	@ (8000f20 <transform_rotation+0x6dc>)
 8000d52:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 // 1 [1] 1 1
 8000d54:	4b72      	ldr	r3, [pc, #456]	@ (8000f20 <transform_rotation+0x6dc>)
 8000d56:	78da      	ldrb	r2, [r3, #3]
 8000d58:	4b71      	ldr	r3, [pc, #452]	@ (8000f20 <transform_rotation+0x6dc>)
 8000d5a:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x - 2;	 //
 8000d5c:	4b70      	ldr	r3, [pc, #448]	@ (8000f20 <transform_rotation+0x6dc>)
 8000d5e:	789b      	ldrb	r3, [r3, #2]
 8000d60:	3b02      	subs	r3, #2
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	4b6e      	ldr	r3, [pc, #440]	@ (8000f20 <transform_rotation+0x6dc>)
 8000d66:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		 // [1] 1 1 1
 8000d68:	4b6d      	ldr	r3, [pc, #436]	@ (8000f20 <transform_rotation+0x6dc>)
 8000d6a:	78da      	ldrb	r2, [r3, #3]
 8000d6c:	4b6c      	ldr	r3, [pc, #432]	@ (8000f20 <transform_rotation+0x6dc>)
 8000d6e:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //
 8000d70:	4b6b      	ldr	r3, [pc, #428]	@ (8000f20 <transform_rotation+0x6dc>)
 8000d72:	789b      	ldrb	r3, [r3, #2]
 8000d74:	3301      	adds	r3, #1
 8000d76:	b2da      	uxtb	r2, r3
 8000d78:	4b69      	ldr	r3, [pc, #420]	@ (8000f20 <transform_rotation+0x6dc>)
 8000d7a:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y; 	     //  1 1 1 [1]
 8000d7c:	4b68      	ldr	r3, [pc, #416]	@ (8000f20 <transform_rotation+0x6dc>)
 8000d7e:	78da      	ldrb	r2, [r3, #3]
 8000d80:	4b67      	ldr	r3, [pc, #412]	@ (8000f20 <transform_rotation+0x6dc>)
 8000d82:	725a      	strb	r2, [r3, #9]

					break;
 8000d84:	e05c      	b.n	8000e40 <transform_rotation+0x5fc>
				case(ROTATION_1):
						//  1
						//  1
						// [1]
						//  1
					object.suboriginbit_0.x = object.originbit.x;
 8000d86:	4b66      	ldr	r3, [pc, #408]	@ (8000f20 <transform_rotation+0x6dc>)
 8000d88:	789a      	ldrb	r2, [r3, #2]
 8000d8a:	4b65      	ldr	r3, [pc, #404]	@ (8000f20 <transform_rotation+0x6dc>)
 8000d8c:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 8000d8e:	4b64      	ldr	r3, [pc, #400]	@ (8000f20 <transform_rotation+0x6dc>)
 8000d90:	78db      	ldrb	r3, [r3, #3]
 8000d92:	3301      	adds	r3, #1
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	4b62      	ldr	r3, [pc, #392]	@ (8000f20 <transform_rotation+0x6dc>)
 8000d98:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000d9a:	4b61      	ldr	r3, [pc, #388]	@ (8000f20 <transform_rotation+0x6dc>)
 8000d9c:	789a      	ldrb	r2, [r3, #2]
 8000d9e:	4b60      	ldr	r3, [pc, #384]	@ (8000f20 <transform_rotation+0x6dc>)
 8000da0:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8000da2:	4b5f      	ldr	r3, [pc, #380]	@ (8000f20 <transform_rotation+0x6dc>)
 8000da4:	78db      	ldrb	r3, [r3, #3]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4b5d      	ldr	r3, [pc, #372]	@ (8000f20 <transform_rotation+0x6dc>)
 8000dac:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000dae:	4b5c      	ldr	r3, [pc, #368]	@ (8000f20 <transform_rotation+0x6dc>)
 8000db0:	789a      	ldrb	r2, [r3, #2]
 8000db2:	4b5b      	ldr	r3, [pc, #364]	@ (8000f20 <transform_rotation+0x6dc>)
 8000db4:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 2;
 8000db6:	4b5a      	ldr	r3, [pc, #360]	@ (8000f20 <transform_rotation+0x6dc>)
 8000db8:	78db      	ldrb	r3, [r3, #3]
 8000dba:	3302      	adds	r3, #2
 8000dbc:	b2da      	uxtb	r2, r3
 8000dbe:	4b58      	ldr	r3, [pc, #352]	@ (8000f20 <transform_rotation+0x6dc>)
 8000dc0:	725a      	strb	r2, [r3, #9]

					break;
 8000dc2:	e03d      	b.n	8000e40 <transform_rotation+0x5fc>
				case(ROTATION_2):
						// 1 [1] 1 1
					object.suboriginbit_0.x = object.originbit.x - 1;
 8000dc4:	4b56      	ldr	r3, [pc, #344]	@ (8000f20 <transform_rotation+0x6dc>)
 8000dc6:	789b      	ldrb	r3, [r3, #2]
 8000dc8:	3b01      	subs	r3, #1
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	4b54      	ldr	r3, [pc, #336]	@ (8000f20 <transform_rotation+0x6dc>)
 8000dce:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000dd0:	4b53      	ldr	r3, [pc, #332]	@ (8000f20 <transform_rotation+0x6dc>)
 8000dd2:	78da      	ldrb	r2, [r3, #3]
 8000dd4:	4b52      	ldr	r3, [pc, #328]	@ (8000f20 <transform_rotation+0x6dc>)
 8000dd6:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;
 8000dd8:	4b51      	ldr	r3, [pc, #324]	@ (8000f20 <transform_rotation+0x6dc>)
 8000dda:	789b      	ldrb	r3, [r3, #2]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	b2da      	uxtb	r2, r3
 8000de0:	4b4f      	ldr	r3, [pc, #316]	@ (8000f20 <transform_rotation+0x6dc>)
 8000de2:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000de4:	4b4e      	ldr	r3, [pc, #312]	@ (8000f20 <transform_rotation+0x6dc>)
 8000de6:	78da      	ldrb	r2, [r3, #3]
 8000de8:	4b4d      	ldr	r3, [pc, #308]	@ (8000f20 <transform_rotation+0x6dc>)
 8000dea:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 2;
 8000dec:	4b4c      	ldr	r3, [pc, #304]	@ (8000f20 <transform_rotation+0x6dc>)
 8000dee:	789b      	ldrb	r3, [r3, #2]
 8000df0:	3302      	adds	r3, #2
 8000df2:	b2da      	uxtb	r2, r3
 8000df4:	4b4a      	ldr	r3, [pc, #296]	@ (8000f20 <transform_rotation+0x6dc>)
 8000df6:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 8000df8:	4b49      	ldr	r3, [pc, #292]	@ (8000f20 <transform_rotation+0x6dc>)
 8000dfa:	78da      	ldrb	r2, [r3, #3]
 8000dfc:	4b48      	ldr	r3, [pc, #288]	@ (8000f20 <transform_rotation+0x6dc>)
 8000dfe:	725a      	strb	r2, [r3, #9]

					break;
 8000e00:	e01e      	b.n	8000e40 <transform_rotation+0x5fc>
				case(ROTATION_3):
						//  1
						// [1]
						//  1
						//  1
					object.suboriginbit_0.x = object.originbit.x;
 8000e02:	4b47      	ldr	r3, [pc, #284]	@ (8000f20 <transform_rotation+0x6dc>)
 8000e04:	789a      	ldrb	r2, [r3, #2]
 8000e06:	4b46      	ldr	r3, [pc, #280]	@ (8000f20 <transform_rotation+0x6dc>)
 8000e08:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y + 1;
 8000e0a:	4b45      	ldr	r3, [pc, #276]	@ (8000f20 <transform_rotation+0x6dc>)
 8000e0c:	78db      	ldrb	r3, [r3, #3]
 8000e0e:	3301      	adds	r3, #1
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b43      	ldr	r3, [pc, #268]	@ (8000f20 <transform_rotation+0x6dc>)
 8000e14:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000e16:	4b42      	ldr	r3, [pc, #264]	@ (8000f20 <transform_rotation+0x6dc>)
 8000e18:	789a      	ldrb	r2, [r3, #2]
 8000e1a:	4b41      	ldr	r3, [pc, #260]	@ (8000f20 <transform_rotation+0x6dc>)
 8000e1c:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y - 1;
 8000e1e:	4b40      	ldr	r3, [pc, #256]	@ (8000f20 <transform_rotation+0x6dc>)
 8000e20:	78db      	ldrb	r3, [r3, #3]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4b3e      	ldr	r3, [pc, #248]	@ (8000f20 <transform_rotation+0x6dc>)
 8000e28:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000e2a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f20 <transform_rotation+0x6dc>)
 8000e2c:	789a      	ldrb	r2, [r3, #2]
 8000e2e:	4b3c      	ldr	r3, [pc, #240]	@ (8000f20 <transform_rotation+0x6dc>)
 8000e30:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 2;
 8000e32:	4b3b      	ldr	r3, [pc, #236]	@ (8000f20 <transform_rotation+0x6dc>)
 8000e34:	78db      	ldrb	r3, [r3, #3]
 8000e36:	3b02      	subs	r3, #2
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	4b39      	ldr	r3, [pc, #228]	@ (8000f20 <transform_rotation+0x6dc>)
 8000e3c:	725a      	strb	r2, [r3, #9]

					break;
 8000e3e:	bf00      	nop
			}

			break;
 8000e40:	e12d      	b.n	800109e <transform_rotation+0x85a>
		case(TEEWEE):
			switch(object.Rotation) {
 8000e42:	4b37      	ldr	r3, [pc, #220]	@ (8000f20 <transform_rotation+0x6dc>)
 8000e44:	785b      	ldrb	r3, [r3, #1]
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	f200 812b 	bhi.w	80010a2 <transform_rotation+0x85e>
 8000e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8000e54 <transform_rotation+0x610>)
 8000e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e52:	bf00      	nop
 8000e54:	08000e65 	.word	0x08000e65
 8000e58:	08000ea3 	.word	0x08000ea3
 8000e5c:	08000ee1 	.word	0x08000ee1
 8000e60:	08000f25 	.word	0x08000f25
				case(ROTATION_0):
						//    1
						// 1 [1] 1
					object.suboriginbit_0.x = object.originbit.x - 1;	 //     1
 8000e64:	4b2e      	ldr	r3, [pc, #184]	@ (8000f20 <transform_rotation+0x6dc>)
 8000e66:	789b      	ldrb	r3, [r3, #2]
 8000e68:	3b01      	subs	r3, #1
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	4b2c      	ldr	r3, [pc, #176]	@ (8000f20 <transform_rotation+0x6dc>)
 8000e6e:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 // [1] 1 1
 8000e70:	4b2b      	ldr	r3, [pc, #172]	@ (8000f20 <transform_rotation+0x6dc>)
 8000e72:	78da      	ldrb	r2, [r3, #3]
 8000e74:	4b2a      	ldr	r3, [pc, #168]	@ (8000f20 <transform_rotation+0x6dc>)
 8000e76:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;	 //	  1
 8000e78:	4b29      	ldr	r3, [pc, #164]	@ (8000f20 <transform_rotation+0x6dc>)
 8000e7a:	789b      	ldrb	r3, [r3, #2]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	4b27      	ldr	r3, [pc, #156]	@ (8000f20 <transform_rotation+0x6dc>)
 8000e82:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;		 // 1 1 [1]
 8000e84:	4b26      	ldr	r3, [pc, #152]	@ (8000f20 <transform_rotation+0x6dc>)
 8000e86:	78da      	ldrb	r2, [r3, #3]
 8000e88:	4b25      	ldr	r3, [pc, #148]	@ (8000f20 <transform_rotation+0x6dc>)
 8000e8a:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;	     //	 [1]
 8000e8c:	4b24      	ldr	r3, [pc, #144]	@ (8000f20 <transform_rotation+0x6dc>)
 8000e8e:	789a      	ldrb	r2, [r3, #2]
 8000e90:	4b23      	ldr	r3, [pc, #140]	@ (8000f20 <transform_rotation+0x6dc>)
 8000e92:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1 1 1
 8000e94:	4b22      	ldr	r3, [pc, #136]	@ (8000f20 <transform_rotation+0x6dc>)
 8000e96:	78db      	ldrb	r3, [r3, #3]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	b2da      	uxtb	r2, r3
 8000e9c:	4b20      	ldr	r3, [pc, #128]	@ (8000f20 <transform_rotation+0x6dc>)
 8000e9e:	725a      	strb	r2, [r3, #9]

					break;
 8000ea0:	e05f      	b.n	8000f62 <transform_rotation+0x71e>
				case(ROTATION_1):
						//  1
						// [1] 1
						//  1
					object.suboriginbit_0.x = object.originbit.x + 1;
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	@ (8000f20 <transform_rotation+0x6dc>)
 8000ea4:	789b      	ldrb	r3, [r3, #2]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	b2da      	uxtb	r2, r3
 8000eaa:	4b1d      	ldr	r3, [pc, #116]	@ (8000f20 <transform_rotation+0x6dc>)
 8000eac:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000eae:	4b1c      	ldr	r3, [pc, #112]	@ (8000f20 <transform_rotation+0x6dc>)
 8000eb0:	78da      	ldrb	r2, [r3, #3]
 8000eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8000f20 <transform_rotation+0x6dc>)
 8000eb4:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	@ (8000f20 <transform_rotation+0x6dc>)
 8000eb8:	789a      	ldrb	r2, [r3, #2]
 8000eba:	4b19      	ldr	r3, [pc, #100]	@ (8000f20 <transform_rotation+0x6dc>)
 8000ebc:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;
 8000ebe:	4b18      	ldr	r3, [pc, #96]	@ (8000f20 <transform_rotation+0x6dc>)
 8000ec0:	78db      	ldrb	r3, [r3, #3]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	4b16      	ldr	r3, [pc, #88]	@ (8000f20 <transform_rotation+0x6dc>)
 8000ec8:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000eca:	4b15      	ldr	r3, [pc, #84]	@ (8000f20 <transform_rotation+0x6dc>)
 8000ecc:	789a      	ldrb	r2, [r3, #2]
 8000ece:	4b14      	ldr	r3, [pc, #80]	@ (8000f20 <transform_rotation+0x6dc>)
 8000ed0:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <transform_rotation+0x6dc>)
 8000ed4:	78db      	ldrb	r3, [r3, #3]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <transform_rotation+0x6dc>)
 8000edc:	725a      	strb	r2, [r3, #9]

					break;
 8000ede:	e040      	b.n	8000f62 <transform_rotation+0x71e>
				case(ROTATION_2):
						// 1 [1] 1
						//    1
					object.suboriginbit_0.x = object.originbit.x;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	@ (8000f20 <transform_rotation+0x6dc>)
 8000ee2:	789a      	ldrb	r2, [r3, #2]
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <transform_rotation+0x6dc>)
 8000ee6:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y - 1;
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <transform_rotation+0x6dc>)
 8000eea:	78db      	ldrb	r3, [r3, #3]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <transform_rotation+0x6dc>)
 8000ef2:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x + 1;
 8000ef4:	4b0a      	ldr	r3, [pc, #40]	@ (8000f20 <transform_rotation+0x6dc>)
 8000ef6:	789b      	ldrb	r3, [r3, #2]
 8000ef8:	3301      	adds	r3, #1
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <transform_rotation+0x6dc>)
 8000efe:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y;
 8000f00:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <transform_rotation+0x6dc>)
 8000f02:	78da      	ldrb	r2, [r3, #3]
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <transform_rotation+0x6dc>)
 8000f06:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x - 1;
 8000f08:	4b05      	ldr	r3, [pc, #20]	@ (8000f20 <transform_rotation+0x6dc>)
 8000f0a:	789b      	ldrb	r3, [r3, #2]
 8000f0c:	3b01      	subs	r3, #1
 8000f0e:	b2da      	uxtb	r2, r3
 8000f10:	4b03      	ldr	r3, [pc, #12]	@ (8000f20 <transform_rotation+0x6dc>)
 8000f12:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y;
 8000f14:	4b02      	ldr	r3, [pc, #8]	@ (8000f20 <transform_rotation+0x6dc>)
 8000f16:	78da      	ldrb	r2, [r3, #3]
 8000f18:	4b01      	ldr	r3, [pc, #4]	@ (8000f20 <transform_rotation+0x6dc>)
 8000f1a:	725a      	strb	r2, [r3, #9]

					break;
 8000f1c:	e021      	b.n	8000f62 <transform_rotation+0x71e>
 8000f1e:	bf00      	nop
 8000f20:	2000008c 	.word	0x2000008c
				case(ROTATION_3):
						//    1
						// 1 [1]
						//    1
					object.suboriginbit_0.x = object.originbit.x - 1;
 8000f24:	4b68      	ldr	r3, [pc, #416]	@ (80010c8 <transform_rotation+0x884>)
 8000f26:	789b      	ldrb	r3, [r3, #2]
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	4b66      	ldr	r3, [pc, #408]	@ (80010c8 <transform_rotation+0x884>)
 8000f2e:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;
 8000f30:	4b65      	ldr	r3, [pc, #404]	@ (80010c8 <transform_rotation+0x884>)
 8000f32:	78da      	ldrb	r2, [r3, #3]
 8000f34:	4b64      	ldr	r3, [pc, #400]	@ (80010c8 <transform_rotation+0x884>)
 8000f36:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;
 8000f38:	4b63      	ldr	r3, [pc, #396]	@ (80010c8 <transform_rotation+0x884>)
 8000f3a:	789a      	ldrb	r2, [r3, #2]
 8000f3c:	4b62      	ldr	r3, [pc, #392]	@ (80010c8 <transform_rotation+0x884>)
 8000f3e:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;
 8000f40:	4b61      	ldr	r3, [pc, #388]	@ (80010c8 <transform_rotation+0x884>)
 8000f42:	78db      	ldrb	r3, [r3, #3]
 8000f44:	3301      	adds	r3, #1
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	4b5f      	ldr	r3, [pc, #380]	@ (80010c8 <transform_rotation+0x884>)
 8000f4a:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x;
 8000f4c:	4b5e      	ldr	r3, [pc, #376]	@ (80010c8 <transform_rotation+0x884>)
 8000f4e:	789a      	ldrb	r2, [r3, #2]
 8000f50:	4b5d      	ldr	r3, [pc, #372]	@ (80010c8 <transform_rotation+0x884>)
 8000f52:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y - 1;
 8000f54:	4b5c      	ldr	r3, [pc, #368]	@ (80010c8 <transform_rotation+0x884>)
 8000f56:	78db      	ldrb	r3, [r3, #3]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	4b5a      	ldr	r3, [pc, #360]	@ (80010c8 <transform_rotation+0x884>)
 8000f5e:	725a      	strb	r2, [r3, #9]

					break;
 8000f60:	bf00      	nop
			}

			break;
 8000f62:	e09e      	b.n	80010a2 <transform_rotation+0x85e>
		case(SMASHBOY):
			switch(object.Rotation) {
 8000f64:	4b58      	ldr	r3, [pc, #352]	@ (80010c8 <transform_rotation+0x884>)
 8000f66:	785b      	ldrb	r3, [r3, #1]
 8000f68:	2b03      	cmp	r3, #3
 8000f6a:	f200 809c 	bhi.w	80010a6 <transform_rotation+0x862>
 8000f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8000f74 <transform_rotation+0x730>)
 8000f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f74:	08000f85 	.word	0x08000f85
 8000f78:	08000fc7 	.word	0x08000fc7
 8000f7c:	08001009 	.word	0x08001009
 8000f80:	0800104b 	.word	0x0800104b
				case(ROTATION_0):
					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 8000f84:	4b50      	ldr	r3, [pc, #320]	@ (80010c8 <transform_rotation+0x884>)
 8000f86:	789b      	ldrb	r3, [r3, #2]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	b2da      	uxtb	r2, r3
 8000f8c:	4b4e      	ldr	r3, [pc, #312]	@ (80010c8 <transform_rotation+0x884>)
 8000f8e:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 8000f90:	4b4d      	ldr	r3, [pc, #308]	@ (80010c8 <transform_rotation+0x884>)
 8000f92:	78da      	ldrb	r2, [r3, #3]
 8000f94:	4b4c      	ldr	r3, [pc, #304]	@ (80010c8 <transform_rotation+0x884>)
 8000f96:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 8000f98:	4b4b      	ldr	r3, [pc, #300]	@ (80010c8 <transform_rotation+0x884>)
 8000f9a:	789a      	ldrb	r2, [r3, #2]
 8000f9c:	4b4a      	ldr	r3, [pc, #296]	@ (80010c8 <transform_rotation+0x884>)
 8000f9e:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 8000fa0:	4b49      	ldr	r3, [pc, #292]	@ (80010c8 <transform_rotation+0x884>)
 8000fa2:	78db      	ldrb	r3, [r3, #3]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	4b47      	ldr	r3, [pc, #284]	@ (80010c8 <transform_rotation+0x884>)
 8000faa:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 8000fac:	4b46      	ldr	r3, [pc, #280]	@ (80010c8 <transform_rotation+0x884>)
 8000fae:	789b      	ldrb	r3, [r3, #2]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	4b44      	ldr	r3, [pc, #272]	@ (80010c8 <transform_rotation+0x884>)
 8000fb6:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 8000fb8:	4b43      	ldr	r3, [pc, #268]	@ (80010c8 <transform_rotation+0x884>)
 8000fba:	78db      	ldrb	r3, [r3, #3]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	4b41      	ldr	r3, [pc, #260]	@ (80010c8 <transform_rotation+0x884>)
 8000fc2:	725a      	strb	r2, [r3, #9]

					break;
 8000fc4:	e062      	b.n	800108c <transform_rotation+0x848>
				case(ROTATION_1):

					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 8000fc6:	4b40      	ldr	r3, [pc, #256]	@ (80010c8 <transform_rotation+0x884>)
 8000fc8:	789b      	ldrb	r3, [r3, #2]
 8000fca:	3301      	adds	r3, #1
 8000fcc:	b2da      	uxtb	r2, r3
 8000fce:	4b3e      	ldr	r3, [pc, #248]	@ (80010c8 <transform_rotation+0x884>)
 8000fd0:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 8000fd2:	4b3d      	ldr	r3, [pc, #244]	@ (80010c8 <transform_rotation+0x884>)
 8000fd4:	78da      	ldrb	r2, [r3, #3]
 8000fd6:	4b3c      	ldr	r3, [pc, #240]	@ (80010c8 <transform_rotation+0x884>)
 8000fd8:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 8000fda:	4b3b      	ldr	r3, [pc, #236]	@ (80010c8 <transform_rotation+0x884>)
 8000fdc:	789a      	ldrb	r2, [r3, #2]
 8000fde:	4b3a      	ldr	r3, [pc, #232]	@ (80010c8 <transform_rotation+0x884>)
 8000fe0:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 8000fe2:	4b39      	ldr	r3, [pc, #228]	@ (80010c8 <transform_rotation+0x884>)
 8000fe4:	78db      	ldrb	r3, [r3, #3]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	4b37      	ldr	r3, [pc, #220]	@ (80010c8 <transform_rotation+0x884>)
 8000fec:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 8000fee:	4b36      	ldr	r3, [pc, #216]	@ (80010c8 <transform_rotation+0x884>)
 8000ff0:	789b      	ldrb	r3, [r3, #2]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b34      	ldr	r3, [pc, #208]	@ (80010c8 <transform_rotation+0x884>)
 8000ff8:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 8000ffa:	4b33      	ldr	r3, [pc, #204]	@ (80010c8 <transform_rotation+0x884>)
 8000ffc:	78db      	ldrb	r3, [r3, #3]
 8000ffe:	3301      	adds	r3, #1
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4b31      	ldr	r3, [pc, #196]	@ (80010c8 <transform_rotation+0x884>)
 8001004:	725a      	strb	r2, [r3, #9]

					break;
 8001006:	e041      	b.n	800108c <transform_rotation+0x848>
				case(ROTATION_2):
					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 8001008:	4b2f      	ldr	r3, [pc, #188]	@ (80010c8 <transform_rotation+0x884>)
 800100a:	789b      	ldrb	r3, [r3, #2]
 800100c:	3301      	adds	r3, #1
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b2d      	ldr	r3, [pc, #180]	@ (80010c8 <transform_rotation+0x884>)
 8001012:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 8001014:	4b2c      	ldr	r3, [pc, #176]	@ (80010c8 <transform_rotation+0x884>)
 8001016:	78da      	ldrb	r2, [r3, #3]
 8001018:	4b2b      	ldr	r3, [pc, #172]	@ (80010c8 <transform_rotation+0x884>)
 800101a:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 800101c:	4b2a      	ldr	r3, [pc, #168]	@ (80010c8 <transform_rotation+0x884>)
 800101e:	789a      	ldrb	r2, [r3, #2]
 8001020:	4b29      	ldr	r3, [pc, #164]	@ (80010c8 <transform_rotation+0x884>)
 8001022:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 8001024:	4b28      	ldr	r3, [pc, #160]	@ (80010c8 <transform_rotation+0x884>)
 8001026:	78db      	ldrb	r3, [r3, #3]
 8001028:	3301      	adds	r3, #1
 800102a:	b2da      	uxtb	r2, r3
 800102c:	4b26      	ldr	r3, [pc, #152]	@ (80010c8 <transform_rotation+0x884>)
 800102e:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 8001030:	4b25      	ldr	r3, [pc, #148]	@ (80010c8 <transform_rotation+0x884>)
 8001032:	789b      	ldrb	r3, [r3, #2]
 8001034:	3301      	adds	r3, #1
 8001036:	b2da      	uxtb	r2, r3
 8001038:	4b23      	ldr	r3, [pc, #140]	@ (80010c8 <transform_rotation+0x884>)
 800103a:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 800103c:	4b22      	ldr	r3, [pc, #136]	@ (80010c8 <transform_rotation+0x884>)
 800103e:	78db      	ldrb	r3, [r3, #3]
 8001040:	3301      	adds	r3, #1
 8001042:	b2da      	uxtb	r2, r3
 8001044:	4b20      	ldr	r3, [pc, #128]	@ (80010c8 <transform_rotation+0x884>)
 8001046:	725a      	strb	r2, [r3, #9]

					break;
 8001048:	e020      	b.n	800108c <transform_rotation+0x848>
				case(ROTATION_3):

					object.suboriginbit_0.x = object.originbit.x + 1;	 //  1  1
 800104a:	4b1f      	ldr	r3, [pc, #124]	@ (80010c8 <transform_rotation+0x884>)
 800104c:	789b      	ldrb	r3, [r3, #2]
 800104e:	3301      	adds	r3, #1
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4b1d      	ldr	r3, [pc, #116]	@ (80010c8 <transform_rotation+0x884>)
 8001054:	711a      	strb	r2, [r3, #4]
					object.suboriginbit_0.y = object.originbit.y;		 //  1 [1]
 8001056:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <transform_rotation+0x884>)
 8001058:	78da      	ldrb	r2, [r3, #3]
 800105a:	4b1b      	ldr	r3, [pc, #108]	@ (80010c8 <transform_rotation+0x884>)
 800105c:	715a      	strb	r2, [r3, #5]

					object.suboriginbit_1.x = object.originbit.x;		 //	[1] 1
 800105e:	4b1a      	ldr	r3, [pc, #104]	@ (80010c8 <transform_rotation+0x884>)
 8001060:	789a      	ldrb	r2, [r3, #2]
 8001062:	4b19      	ldr	r3, [pc, #100]	@ (80010c8 <transform_rotation+0x884>)
 8001064:	719a      	strb	r2, [r3, #6]
					object.suboriginbit_1.y = object.originbit.y + 1;	 //  1  1
 8001066:	4b18      	ldr	r3, [pc, #96]	@ (80010c8 <transform_rotation+0x884>)
 8001068:	78db      	ldrb	r3, [r3, #3]
 800106a:	3301      	adds	r3, #1
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b16      	ldr	r3, [pc, #88]	@ (80010c8 <transform_rotation+0x884>)
 8001070:	71da      	strb	r2, [r3, #7]

					object.suboriginbit_2.x = object.originbit.x + 1;	 //	1 [1]
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <transform_rotation+0x884>)
 8001074:	789b      	ldrb	r3, [r3, #2]
 8001076:	3301      	adds	r3, #1
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <transform_rotation+0x884>)
 800107c:	721a      	strb	r2, [r3, #8]
					object.suboriginbit_2.y = object.originbit.y + 1; 	 // 1  1
 800107e:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <transform_rotation+0x884>)
 8001080:	78db      	ldrb	r3, [r3, #3]
 8001082:	3301      	adds	r3, #1
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <transform_rotation+0x884>)
 8001088:	725a      	strb	r2, [r3, #9]

					break;
 800108a:	bf00      	nop
			}
		break;
 800108c:	e00b      	b.n	80010a6 <transform_rotation+0x862>
			break;
 800108e:	bf00      	nop
 8001090:	e00a      	b.n	80010a8 <transform_rotation+0x864>
			break;
 8001092:	bf00      	nop
 8001094:	e008      	b.n	80010a8 <transform_rotation+0x864>
			break;
 8001096:	bf00      	nop
 8001098:	e006      	b.n	80010a8 <transform_rotation+0x864>
			break;
 800109a:	bf00      	nop
 800109c:	e004      	b.n	80010a8 <transform_rotation+0x864>
			break;
 800109e:	bf00      	nop
 80010a0:	e002      	b.n	80010a8 <transform_rotation+0x864>
			break;
 80010a2:	bf00      	nop
 80010a4:	e000      	b.n	80010a8 <transform_rotation+0x864>
		break;
 80010a6:	bf00      	nop
	}

	if (check_State() == 0) {
 80010a8:	f7ff fab0 	bl	800060c <check_State>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d104      	bne.n	80010bc <transform_rotation+0x878>
		object = temp;
 80010b2:	4b05      	ldr	r3, [pc, #20]	@ (80010c8 <transform_rotation+0x884>)
 80010b4:	1d3a      	adds	r2, r7, #4
 80010b6:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b8:	c303      	stmia	r3!, {r0, r1}
 80010ba:	801a      	strh	r2, [r3, #0]
	}
	Matrix_update();
 80010bc:	f000 f92c 	bl	8001318 <Matrix_update>

}
 80010c0:	bf00      	nop
 80010c2:	3710      	adds	r7, #16
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	2000008c 	.word	0x2000008c

080010cc <tick_Matrix>:

void tick_Matrix(void){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
	 // erase the previous state
	Matrix_clear();
 80010d0:	f000 f88c 	bl	80011ec <Matrix_clear>
	// create the new object location
	object.originbit.y -= 1;
 80010d4:	4b10      	ldr	r3, [pc, #64]	@ (8001118 <tick_Matrix+0x4c>)
 80010d6:	78db      	ldrb	r3, [r3, #3]
 80010d8:	3b01      	subs	r3, #1
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001118 <tick_Matrix+0x4c>)
 80010de:	70da      	strb	r2, [r3, #3]
	object.suboriginbit_0.y -= 1;
 80010e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001118 <tick_Matrix+0x4c>)
 80010e2:	795b      	ldrb	r3, [r3, #5]
 80010e4:	3b01      	subs	r3, #1
 80010e6:	b2da      	uxtb	r2, r3
 80010e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001118 <tick_Matrix+0x4c>)
 80010ea:	715a      	strb	r2, [r3, #5]
	object.suboriginbit_1.y -= 1;
 80010ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001118 <tick_Matrix+0x4c>)
 80010ee:	79db      	ldrb	r3, [r3, #7]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <tick_Matrix+0x4c>)
 80010f6:	71da      	strb	r2, [r3, #7]
	object.suboriginbit_2.y -= 1;
 80010f8:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <tick_Matrix+0x4c>)
 80010fa:	7a5b      	ldrb	r3, [r3, #9]
 80010fc:	3b01      	subs	r3, #1
 80010fe:	b2da      	uxtb	r2, r3
 8001100:	4b05      	ldr	r3, [pc, #20]	@ (8001118 <tick_Matrix+0x4c>)
 8001102:	725a      	strb	r2, [r3, #9]
	// draw the new state
	if(check_State() == 2) {
 8001104:	f7ff fa82 	bl	800060c <check_State>
 8001108:	4603      	mov	r3, r0
 800110a:	2b02      	cmp	r3, #2
 800110c:	d101      	bne.n	8001112 <tick_Matrix+0x46>
		Matrix_update();
 800110e:	f000 f903 	bl	8001318 <Matrix_update>
	}

}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	2000008c 	.word	0x2000008c

0800111c <printMatrix>:
void printMatrix(void){
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
#if MATRIX_LCD == 1
	// Connect to the LCD screen and update that

#elif MATRIX_LCD == 0
	printf("Matrix Representation:\n");
 8001122:	482a      	ldr	r0, [pc, #168]	@ (80011cc <printMatrix+0xb0>)
 8001124:	f003 ffce 	bl	80050c4 <puts>

	for (int i = ROWS; i > -1; i--) {
 8001128:	230c      	movs	r3, #12
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	e020      	b.n	8001170 <printMatrix+0x54>
		printf("%3d|", i);
 800112e:	68f9      	ldr	r1, [r7, #12]
 8001130:	4827      	ldr	r0, [pc, #156]	@ (80011d0 <printMatrix+0xb4>)
 8001132:	f003 ff57 	bl	8004fe4 <iprintf>
		for (int j = 0; j < COLS; j++) {
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	e010      	b.n	800115e <printMatrix+0x42>
			printf("%5d", dummyTable[i][j]);
 800113c:	4925      	ldr	r1, [pc, #148]	@ (80011d4 <printMatrix+0xb8>)
 800113e:	68fa      	ldr	r2, [r7, #12]
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	18ca      	adds	r2, r1, r3
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	4413      	add	r3, r2
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	4821      	ldr	r0, [pc, #132]	@ (80011d8 <printMatrix+0xbc>)
 8001154:	f003 ff46 	bl	8004fe4 <iprintf>
		for (int j = 0; j < COLS; j++) {
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	3301      	adds	r3, #1
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	2b08      	cmp	r3, #8
 8001162:	ddeb      	ble.n	800113c <printMatrix+0x20>
		}
		printf("\n");
 8001164:	200a      	movs	r0, #10
 8001166:	f003 ff4f 	bl	8005008 <putchar>
	for (int i = ROWS; i > -1; i--) {
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	3b01      	subs	r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2b00      	cmp	r3, #0
 8001174:	dadb      	bge.n	800112e <printMatrix+0x12>
	}

	printf("   +");
 8001176:	4819      	ldr	r0, [pc, #100]	@ (80011dc <printMatrix+0xc0>)
 8001178:	f003 ff34 	bl	8004fe4 <iprintf>
	for (int j = 0; j < COLS; j++) {
 800117c:	2300      	movs	r3, #0
 800117e:	607b      	str	r3, [r7, #4]
 8001180:	e005      	b.n	800118e <printMatrix+0x72>
		printf("-----");
 8001182:	4817      	ldr	r0, [pc, #92]	@ (80011e0 <printMatrix+0xc4>)
 8001184:	f003 ff2e 	bl	8004fe4 <iprintf>
	for (int j = 0; j < COLS; j++) {
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3301      	adds	r3, #1
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2b08      	cmp	r3, #8
 8001192:	ddf6      	ble.n	8001182 <printMatrix+0x66>
	}
	printf("\n");
 8001194:	200a      	movs	r0, #10
 8001196:	f003 ff37 	bl	8005008 <putchar>

	printf("%5s", " ");
 800119a:	4912      	ldr	r1, [pc, #72]	@ (80011e4 <printMatrix+0xc8>)
 800119c:	4812      	ldr	r0, [pc, #72]	@ (80011e8 <printMatrix+0xcc>)
 800119e:	f003 ff21 	bl	8004fe4 <iprintf>
	for (int i = 0; i < COLS; i++) {
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	e006      	b.n	80011b6 <printMatrix+0x9a>
		printf("%5d", i);
 80011a8:	6839      	ldr	r1, [r7, #0]
 80011aa:	480b      	ldr	r0, [pc, #44]	@ (80011d8 <printMatrix+0xbc>)
 80011ac:	f003 ff1a 	bl	8004fe4 <iprintf>
	for (int i = 0; i < COLS; i++) {
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	3301      	adds	r3, #1
 80011b4:	603b      	str	r3, [r7, #0]
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	2b08      	cmp	r3, #8
 80011ba:	ddf5      	ble.n	80011a8 <printMatrix+0x8c>
	}
	printf("\n");
 80011bc:	200a      	movs	r0, #10
 80011be:	f003 ff23 	bl	8005008 <putchar>

#endif
}
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	08005e5c 	.word	0x08005e5c
 80011d0:	08005e74 	.word	0x08005e74
 80011d4:	20000098 	.word	0x20000098
 80011d8:	08005e7c 	.word	0x08005e7c
 80011dc:	08005e80 	.word	0x08005e80
 80011e0:	08005e88 	.word	0x08005e88
 80011e4:	08005e90 	.word	0x08005e90
 80011e8:	08005e94 	.word	0x08005e94

080011ec <Matrix_clear>:

void Matrix_clear(void) {
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
	if ((object.originbit.y == 0) || (object.suboriginbit_0.y == 0) ||
 80011f0:	4b47      	ldr	r3, [pc, #284]	@ (8001310 <Matrix_clear+0x124>)
 80011f2:	78db      	ldrb	r3, [r3, #3]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00b      	beq.n	8001210 <Matrix_clear+0x24>
 80011f8:	4b45      	ldr	r3, [pc, #276]	@ (8001310 <Matrix_clear+0x124>)
 80011fa:	795b      	ldrb	r3, [r3, #5]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d007      	beq.n	8001210 <Matrix_clear+0x24>
	    (object.suboriginbit_1.y == 0) ||(object.suboriginbit_2.y == 0))
 8001200:	4b43      	ldr	r3, [pc, #268]	@ (8001310 <Matrix_clear+0x124>)
 8001202:	79db      	ldrb	r3, [r3, #7]
	if ((object.originbit.y == 0) || (object.suboriginbit_0.y == 0) ||
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <Matrix_clear+0x24>
	    (object.suboriginbit_1.y == 0) ||(object.suboriginbit_2.y == 0))
 8001208:	4b41      	ldr	r3, [pc, #260]	@ (8001310 <Matrix_clear+0x124>)
 800120a:	7a5b      	ldrb	r3, [r3, #9]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d13c      	bne.n	800128a <Matrix_clear+0x9e>
	{
		dummyTable[object.originbit.y][object.originbit.x] = 1;
 8001210:	4b3f      	ldr	r3, [pc, #252]	@ (8001310 <Matrix_clear+0x124>)
 8001212:	78db      	ldrb	r3, [r3, #3]
 8001214:	4619      	mov	r1, r3
 8001216:	4b3e      	ldr	r3, [pc, #248]	@ (8001310 <Matrix_clear+0x124>)
 8001218:	789b      	ldrb	r3, [r3, #2]
 800121a:	4618      	mov	r0, r3
 800121c:	4a3d      	ldr	r2, [pc, #244]	@ (8001314 <Matrix_clear+0x128>)
 800121e:	460b      	mov	r3, r1
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4413      	add	r3, r2
 8001228:	4403      	add	r3, r0
 800122a:	2201      	movs	r2, #1
 800122c:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_0.y][object.suboriginbit_0.x] = 1;
 800122e:	4b38      	ldr	r3, [pc, #224]	@ (8001310 <Matrix_clear+0x124>)
 8001230:	795b      	ldrb	r3, [r3, #5]
 8001232:	4619      	mov	r1, r3
 8001234:	4b36      	ldr	r3, [pc, #216]	@ (8001310 <Matrix_clear+0x124>)
 8001236:	791b      	ldrb	r3, [r3, #4]
 8001238:	4618      	mov	r0, r3
 800123a:	4a36      	ldr	r2, [pc, #216]	@ (8001314 <Matrix_clear+0x128>)
 800123c:	460b      	mov	r3, r1
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	440b      	add	r3, r1
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	4413      	add	r3, r2
 8001246:	4403      	add	r3, r0
 8001248:	2201      	movs	r2, #1
 800124a:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_1.y][object.suboriginbit_1.x] = 1;
 800124c:	4b30      	ldr	r3, [pc, #192]	@ (8001310 <Matrix_clear+0x124>)
 800124e:	79db      	ldrb	r3, [r3, #7]
 8001250:	4619      	mov	r1, r3
 8001252:	4b2f      	ldr	r3, [pc, #188]	@ (8001310 <Matrix_clear+0x124>)
 8001254:	799b      	ldrb	r3, [r3, #6]
 8001256:	4618      	mov	r0, r3
 8001258:	4a2e      	ldr	r2, [pc, #184]	@ (8001314 <Matrix_clear+0x128>)
 800125a:	460b      	mov	r3, r1
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	440b      	add	r3, r1
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	4413      	add	r3, r2
 8001264:	4403      	add	r3, r0
 8001266:	2201      	movs	r2, #1
 8001268:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_2.y][object.suboriginbit_2.x] = 1;
 800126a:	4b29      	ldr	r3, [pc, #164]	@ (8001310 <Matrix_clear+0x124>)
 800126c:	7a5b      	ldrb	r3, [r3, #9]
 800126e:	4619      	mov	r1, r3
 8001270:	4b27      	ldr	r3, [pc, #156]	@ (8001310 <Matrix_clear+0x124>)
 8001272:	7a1b      	ldrb	r3, [r3, #8]
 8001274:	4618      	mov	r0, r3
 8001276:	4a27      	ldr	r2, [pc, #156]	@ (8001314 <Matrix_clear+0x128>)
 8001278:	460b      	mov	r3, r1
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	440b      	add	r3, r1
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	4413      	add	r3, r2
 8001282:	4403      	add	r3, r0
 8001284:	2201      	movs	r2, #1
 8001286:	701a      	strb	r2, [r3, #0]
 8001288:	e03c      	b.n	8001304 <Matrix_clear+0x118>
	}
	else {
		dummyTable[object.originbit.y][object.originbit.x] = 0;
 800128a:	4b21      	ldr	r3, [pc, #132]	@ (8001310 <Matrix_clear+0x124>)
 800128c:	78db      	ldrb	r3, [r3, #3]
 800128e:	4619      	mov	r1, r3
 8001290:	4b1f      	ldr	r3, [pc, #124]	@ (8001310 <Matrix_clear+0x124>)
 8001292:	789b      	ldrb	r3, [r3, #2]
 8001294:	4618      	mov	r0, r3
 8001296:	4a1f      	ldr	r2, [pc, #124]	@ (8001314 <Matrix_clear+0x128>)
 8001298:	460b      	mov	r3, r1
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	440b      	add	r3, r1
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	4413      	add	r3, r2
 80012a2:	4403      	add	r3, r0
 80012a4:	2200      	movs	r2, #0
 80012a6:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_0.y][object.suboriginbit_0.x] = 0;
 80012a8:	4b19      	ldr	r3, [pc, #100]	@ (8001310 <Matrix_clear+0x124>)
 80012aa:	795b      	ldrb	r3, [r3, #5]
 80012ac:	4619      	mov	r1, r3
 80012ae:	4b18      	ldr	r3, [pc, #96]	@ (8001310 <Matrix_clear+0x124>)
 80012b0:	791b      	ldrb	r3, [r3, #4]
 80012b2:	4618      	mov	r0, r3
 80012b4:	4a17      	ldr	r2, [pc, #92]	@ (8001314 <Matrix_clear+0x128>)
 80012b6:	460b      	mov	r3, r1
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	440b      	add	r3, r1
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	4403      	add	r3, r0
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_1.y][object.suboriginbit_1.x] = 0;
 80012c6:	4b12      	ldr	r3, [pc, #72]	@ (8001310 <Matrix_clear+0x124>)
 80012c8:	79db      	ldrb	r3, [r3, #7]
 80012ca:	4619      	mov	r1, r3
 80012cc:	4b10      	ldr	r3, [pc, #64]	@ (8001310 <Matrix_clear+0x124>)
 80012ce:	799b      	ldrb	r3, [r3, #6]
 80012d0:	4618      	mov	r0, r3
 80012d2:	4a10      	ldr	r2, [pc, #64]	@ (8001314 <Matrix_clear+0x128>)
 80012d4:	460b      	mov	r3, r1
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	440b      	add	r3, r1
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	4413      	add	r3, r2
 80012de:	4403      	add	r3, r0
 80012e0:	2200      	movs	r2, #0
 80012e2:	701a      	strb	r2, [r3, #0]
		dummyTable[object.suboriginbit_2.y][object.suboriginbit_2.x] = 0;
 80012e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001310 <Matrix_clear+0x124>)
 80012e6:	7a5b      	ldrb	r3, [r3, #9]
 80012e8:	4619      	mov	r1, r3
 80012ea:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <Matrix_clear+0x124>)
 80012ec:	7a1b      	ldrb	r3, [r3, #8]
 80012ee:	4618      	mov	r0, r3
 80012f0:	4a08      	ldr	r2, [pc, #32]	@ (8001314 <Matrix_clear+0x128>)
 80012f2:	460b      	mov	r3, r1
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	440b      	add	r3, r1
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	4413      	add	r3, r2
 80012fc:	4403      	add	r3, r0
 80012fe:	2200      	movs	r2, #0
 8001300:	701a      	strb	r2, [r3, #0]
	}
}
 8001302:	bf00      	nop
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	2000008c 	.word	0x2000008c
 8001314:	20000098 	.word	0x20000098

08001318 <Matrix_update>:
void Matrix_update(void){
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
	dummyTable[object.originbit.y][object.originbit.x] = 1;
 800131c:	4b20      	ldr	r3, [pc, #128]	@ (80013a0 <Matrix_update+0x88>)
 800131e:	78db      	ldrb	r3, [r3, #3]
 8001320:	4619      	mov	r1, r3
 8001322:	4b1f      	ldr	r3, [pc, #124]	@ (80013a0 <Matrix_update+0x88>)
 8001324:	789b      	ldrb	r3, [r3, #2]
 8001326:	4618      	mov	r0, r3
 8001328:	4a1e      	ldr	r2, [pc, #120]	@ (80013a4 <Matrix_update+0x8c>)
 800132a:	460b      	mov	r3, r1
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	440b      	add	r3, r1
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	4403      	add	r3, r0
 8001336:	2201      	movs	r2, #1
 8001338:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_0.y][object.suboriginbit_0.x] = 1;
 800133a:	4b19      	ldr	r3, [pc, #100]	@ (80013a0 <Matrix_update+0x88>)
 800133c:	795b      	ldrb	r3, [r3, #5]
 800133e:	4619      	mov	r1, r3
 8001340:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <Matrix_update+0x88>)
 8001342:	791b      	ldrb	r3, [r3, #4]
 8001344:	4618      	mov	r0, r3
 8001346:	4a17      	ldr	r2, [pc, #92]	@ (80013a4 <Matrix_update+0x8c>)
 8001348:	460b      	mov	r3, r1
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	440b      	add	r3, r1
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4413      	add	r3, r2
 8001352:	4403      	add	r3, r0
 8001354:	2201      	movs	r2, #1
 8001356:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_1.y][object.suboriginbit_1.x] = 1;
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <Matrix_update+0x88>)
 800135a:	79db      	ldrb	r3, [r3, #7]
 800135c:	4619      	mov	r1, r3
 800135e:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <Matrix_update+0x88>)
 8001360:	799b      	ldrb	r3, [r3, #6]
 8001362:	4618      	mov	r0, r3
 8001364:	4a0f      	ldr	r2, [pc, #60]	@ (80013a4 <Matrix_update+0x8c>)
 8001366:	460b      	mov	r3, r1
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	440b      	add	r3, r1
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4413      	add	r3, r2
 8001370:	4403      	add	r3, r0
 8001372:	2201      	movs	r2, #1
 8001374:	701a      	strb	r2, [r3, #0]
	dummyTable[object.suboriginbit_2.y][object.suboriginbit_2.x] = 1;
 8001376:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <Matrix_update+0x88>)
 8001378:	7a5b      	ldrb	r3, [r3, #9]
 800137a:	4619      	mov	r1, r3
 800137c:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <Matrix_update+0x88>)
 800137e:	7a1b      	ldrb	r3, [r3, #8]
 8001380:	4618      	mov	r0, r3
 8001382:	4a08      	ldr	r2, [pc, #32]	@ (80013a4 <Matrix_update+0x8c>)
 8001384:	460b      	mov	r3, r1
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	4413      	add	r3, r2
 800138e:	4403      	add	r3, r0
 8001390:	2201      	movs	r2, #1
 8001392:	701a      	strb	r2, [r3, #0]
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	2000008c 	.word	0x2000008c
 80013a4:	20000098 	.word	0x20000098

080013a8 <getScheduledEvents>:
 */
#include "Scheduler.h"

static uint32_t scheduledEvents;

uint32_t getScheduledEvents(){
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
	uint32_t returnVal = scheduledEvents;
 80013ae:	4b05      	ldr	r3, [pc, #20]	@ (80013c4 <getScheduledEvents+0x1c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	607b      	str	r3, [r7, #4]
	return returnVal;
 80013b4:	687b      	ldr	r3, [r7, #4]
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	370c      	adds	r7, #12
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000120 	.word	0x20000120

080013c8 <addScheduledEvent>:

void addScheduledEvent(uint32_t event){
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
	scheduledEvents |= (event);
 80013d0:	4b05      	ldr	r3, [pc, #20]	@ (80013e8 <addScheduledEvent+0x20>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	4a03      	ldr	r2, [pc, #12]	@ (80013e8 <addScheduledEvent+0x20>)
 80013da:	6013      	str	r3, [r2, #0]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	20000120 	.word	0x20000120

080013ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  initialise_monitor_handles();
 80013f2:	f003 fcb7 	bl	8004d64 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f6:	f000 fefb 	bl	80021f0 <HAL_Init>
  /* USER CODE BEGIN Init */
  //applicationInit();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013fa:	f000 f825 	bl	8001448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013fe:	f000 fa13 	bl	8001828 <MX_GPIO_Init>
  MX_LTDC_Init();
 8001402:	f000 f8cd 	bl	80015a0 <MX_LTDC_Init>
  MX_I2C3_Init();
 8001406:	f000 f88b 	bl	8001520 <MX_I2C3_Init>
  MX_RNG_Init();
 800140a:	f000 f97b 	bl	8001704 <MX_RNG_Init>
  MX_TIM2_Init();
 800140e:	f000 f9b5 	bl	800177c <MX_TIM2_Init>
  MX_SPI5_Init();
 8001412:	f000 f97d 	bl	8001710 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  applicationInit();
 8001416:	f7ff f8bb 	bl	8000590 <applicationInit>
  uint32_t eventsToRun;

  /* USER CODE END 2 */
  uint8_t BUTTON_START = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	71fb      	strb	r3, [r7, #7]
  while(!BUTTON_START) {
 800141e:	e005      	b.n	800142c <main+0x40>
	  BUTTON_START = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0); // read button by polling
 8001420:	2101      	movs	r1, #1
 8001422:	4808      	ldr	r0, [pc, #32]	@ (8001444 <main+0x58>)
 8001424:	f001 fa14 	bl	8002850 <HAL_GPIO_ReadPin>
 8001428:	4603      	mov	r3, r0
 800142a:	71fb      	strb	r3, [r7, #7]
  while(!BUTTON_START) {
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f6      	beq.n	8001420 <main+0x34>
  }
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 eventsToRun = getScheduledEvents();
 8001432:	f7ff ffb9 	bl	80013a8 <getScheduledEvents>
 8001436:	6038      	str	r0, [r7, #0]
	 if(eventsToRun && MATRIX_UPDATE_EVENT) {printMatrix();}
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0f9      	beq.n	8001432 <main+0x46>
 800143e:	f7ff fe6d 	bl	800111c <printMatrix>
	 eventsToRun = getScheduledEvents();
 8001442:	e7f6      	b.n	8001432 <main+0x46>
 8001444:	40020000 	.word	0x40020000

08001448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b094      	sub	sp, #80	@ 0x50
 800144c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144e:	f107 0320 	add.w	r3, r7, #32
 8001452:	2230      	movs	r2, #48	@ 0x30
 8001454:	2100      	movs	r1, #0
 8001456:	4618      	mov	r0, r3
 8001458:	f003 fe3c 	bl	80050d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800146c:	2300      	movs	r3, #0
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	4b29      	ldr	r3, [pc, #164]	@ (8001518 <SystemClock_Config+0xd0>)
 8001472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001474:	4a28      	ldr	r2, [pc, #160]	@ (8001518 <SystemClock_Config+0xd0>)
 8001476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800147a:	6413      	str	r3, [r2, #64]	@ 0x40
 800147c:	4b26      	ldr	r3, [pc, #152]	@ (8001518 <SystemClock_Config+0xd0>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001484:	60bb      	str	r3, [r7, #8]
 8001486:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	4b23      	ldr	r3, [pc, #140]	@ (800151c <SystemClock_Config+0xd4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001494:	4a21      	ldr	r2, [pc, #132]	@ (800151c <SystemClock_Config+0xd4>)
 8001496:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b1f      	ldr	r3, [pc, #124]	@ (800151c <SystemClock_Config+0xd4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a8:	2302      	movs	r3, #2
 80014aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ac:	2301      	movs	r3, #1
 80014ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b0:	2310      	movs	r3, #16
 80014b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b4:	2302      	movs	r3, #2
 80014b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014b8:	2300      	movs	r3, #0
 80014ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80014bc:	2308      	movs	r3, #8
 80014be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80014c0:	2332      	movs	r3, #50	@ 0x32
 80014c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80014c4:	2304      	movs	r3, #4
 80014c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014c8:	2307      	movs	r3, #7
 80014ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014cc:	f107 0320 	add.w	r3, r7, #32
 80014d0:	4618      	mov	r0, r3
 80014d2:	f001 fe6d 	bl	80031b0 <HAL_RCC_OscConfig>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80014dc:	f000 fb68 	bl	8001bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014e0:	230f      	movs	r3, #15
 80014e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e4:	2302      	movs	r3, #2
 80014e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 80014ec:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80014f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80014f2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80014f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014f8:	f107 030c 	add.w	r3, r7, #12
 80014fc:	2100      	movs	r1, #0
 80014fe:	4618      	mov	r0, r3
 8001500:	f002 f8ce 	bl	80036a0 <HAL_RCC_ClockConfig>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800150a:	f000 fb51 	bl	8001bb0 <Error_Handler>
  }
}
 800150e:	bf00      	nop
 8001510:	3750      	adds	r7, #80	@ 0x50
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	40007000 	.word	0x40007000

08001520 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001524:	4b1b      	ldr	r3, [pc, #108]	@ (8001594 <MX_I2C3_Init+0x74>)
 8001526:	4a1c      	ldr	r2, [pc, #112]	@ (8001598 <MX_I2C3_Init+0x78>)
 8001528:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800152a:	4b1a      	ldr	r3, [pc, #104]	@ (8001594 <MX_I2C3_Init+0x74>)
 800152c:	4a1b      	ldr	r2, [pc, #108]	@ (800159c <MX_I2C3_Init+0x7c>)
 800152e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001530:	4b18      	ldr	r3, [pc, #96]	@ (8001594 <MX_I2C3_Init+0x74>)
 8001532:	2200      	movs	r2, #0
 8001534:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001536:	4b17      	ldr	r3, [pc, #92]	@ (8001594 <MX_I2C3_Init+0x74>)
 8001538:	2200      	movs	r2, #0
 800153a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800153c:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <MX_I2C3_Init+0x74>)
 800153e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001542:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001544:	4b13      	ldr	r3, [pc, #76]	@ (8001594 <MX_I2C3_Init+0x74>)
 8001546:	2200      	movs	r2, #0
 8001548:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800154a:	4b12      	ldr	r3, [pc, #72]	@ (8001594 <MX_I2C3_Init+0x74>)
 800154c:	2200      	movs	r2, #0
 800154e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001550:	4b10      	ldr	r3, [pc, #64]	@ (8001594 <MX_I2C3_Init+0x74>)
 8001552:	2200      	movs	r2, #0
 8001554:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001556:	4b0f      	ldr	r3, [pc, #60]	@ (8001594 <MX_I2C3_Init+0x74>)
 8001558:	2200      	movs	r2, #0
 800155a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800155c:	480d      	ldr	r0, [pc, #52]	@ (8001594 <MX_I2C3_Init+0x74>)
 800155e:	f001 f9c1 	bl	80028e4 <HAL_I2C_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001568:	f000 fb22 	bl	8001bb0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800156c:	2100      	movs	r1, #0
 800156e:	4809      	ldr	r0, [pc, #36]	@ (8001594 <MX_I2C3_Init+0x74>)
 8001570:	f001 fafc 	bl	8002b6c <HAL_I2CEx_ConfigAnalogFilter>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800157a:	f000 fb19 	bl	8001bb0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800157e:	2100      	movs	r1, #0
 8001580:	4804      	ldr	r0, [pc, #16]	@ (8001594 <MX_I2C3_Init+0x74>)
 8001582:	f001 fb2f 	bl	8002be4 <HAL_I2CEx_ConfigDigitalFilter>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800158c:	f000 fb10 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000124 	.word	0x20000124
 8001598:	40005c00 	.word	0x40005c00
 800159c:	000186a0 	.word	0x000186a0

080015a0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b09a      	sub	sp, #104	@ 0x68
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80015a6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80015aa:	2234      	movs	r2, #52	@ 0x34
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 fd90 	bl	80050d4 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 80015b4:	463b      	mov	r3, r7
 80015b6:	2234      	movs	r2, #52	@ 0x34
 80015b8:	2100      	movs	r1, #0
 80015ba:	4618      	mov	r0, r3
 80015bc:	f003 fd8a 	bl	80050d4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80015c0:	4b4e      	ldr	r3, [pc, #312]	@ (80016fc <MX_LTDC_Init+0x15c>)
 80015c2:	4a4f      	ldr	r2, [pc, #316]	@ (8001700 <MX_LTDC_Init+0x160>)
 80015c4:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80015c6:	4b4d      	ldr	r3, [pc, #308]	@ (80016fc <MX_LTDC_Init+0x15c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80015cc:	4b4b      	ldr	r3, [pc, #300]	@ (80016fc <MX_LTDC_Init+0x15c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80015d2:	4b4a      	ldr	r3, [pc, #296]	@ (80016fc <MX_LTDC_Init+0x15c>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80015d8:	4b48      	ldr	r3, [pc, #288]	@ (80016fc <MX_LTDC_Init+0x15c>)
 80015da:	2200      	movs	r2, #0
 80015dc:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 80015de:	4b47      	ldr	r3, [pc, #284]	@ (80016fc <MX_LTDC_Init+0x15c>)
 80015e0:	2207      	movs	r2, #7
 80015e2:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 80015e4:	4b45      	ldr	r3, [pc, #276]	@ (80016fc <MX_LTDC_Init+0x15c>)
 80015e6:	2203      	movs	r2, #3
 80015e8:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 80015ea:	4b44      	ldr	r3, [pc, #272]	@ (80016fc <MX_LTDC_Init+0x15c>)
 80015ec:	220e      	movs	r2, #14
 80015ee:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 80015f0:	4b42      	ldr	r3, [pc, #264]	@ (80016fc <MX_LTDC_Init+0x15c>)
 80015f2:	2205      	movs	r2, #5
 80015f4:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 80015f6:	4b41      	ldr	r3, [pc, #260]	@ (80016fc <MX_LTDC_Init+0x15c>)
 80015f8:	f240 228e 	movw	r2, #654	@ 0x28e
 80015fc:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 80015fe:	4b3f      	ldr	r3, [pc, #252]	@ (80016fc <MX_LTDC_Init+0x15c>)
 8001600:	f240 12e5 	movw	r2, #485	@ 0x1e5
 8001604:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 660;
 8001606:	4b3d      	ldr	r3, [pc, #244]	@ (80016fc <MX_LTDC_Init+0x15c>)
 8001608:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800160c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 487;
 800160e:	4b3b      	ldr	r3, [pc, #236]	@ (80016fc <MX_LTDC_Init+0x15c>)
 8001610:	f240 12e7 	movw	r2, #487	@ 0x1e7
 8001614:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001616:	4b39      	ldr	r3, [pc, #228]	@ (80016fc <MX_LTDC_Init+0x15c>)
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800161e:	4b37      	ldr	r3, [pc, #220]	@ (80016fc <MX_LTDC_Init+0x15c>)
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001626:	4b35      	ldr	r3, [pc, #212]	@ (80016fc <MX_LTDC_Init+0x15c>)
 8001628:	2200      	movs	r2, #0
 800162a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800162e:	4833      	ldr	r0, [pc, #204]	@ (80016fc <MX_LTDC_Init+0x15c>)
 8001630:	f001 fb18 	bl	8002c64 <HAL_LTDC_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 800163a:	f000 fab9 	bl	8001bb0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800163e:	2300      	movs	r3, #0
 8001640:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.WindowX1 = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.WindowY0 = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.WindowY1 = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800164e:	2300      	movs	r3, #0
 8001650:	647b      	str	r3, [r7, #68]	@ 0x44
  pLayerCfg.Alpha = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	64bb      	str	r3, [r7, #72]	@ 0x48
  pLayerCfg.Alpha0 = 0;
 8001656:	2300      	movs	r3, #0
 8001658:	64fb      	str	r3, [r7, #76]	@ 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 800165a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800165e:	653b      	str	r3, [r7, #80]	@ 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8001660:	2305      	movs	r3, #5
 8001662:	657b      	str	r3, [r7, #84]	@ 0x54
  pLayerCfg.FBStartAdress = 0;
 8001664:	2300      	movs	r3, #0
 8001666:	65bb      	str	r3, [r7, #88]	@ 0x58
  pLayerCfg.ImageWidth = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  pLayerCfg.ImageHeight = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	663b      	str	r3, [r7, #96]	@ 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  pLayerCfg.Backcolor.Green = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
  pLayerCfg.Backcolor.Red = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001682:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001686:	2200      	movs	r2, #0
 8001688:	4619      	mov	r1, r3
 800168a:	481c      	ldr	r0, [pc, #112]	@ (80016fc <MX_LTDC_Init+0x15c>)
 800168c:	f001 fbba 	bl	8002e04 <HAL_LTDC_ConfigLayer>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8001696:	f000 fa8b 	bl	8001bb0 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 800169a:	2300      	movs	r3, #0
 800169c:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80016b2:	2300      	movs	r3, #0
 80016b4:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80016b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016ba:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80016bc:	2305      	movs	r3, #5
 80016be:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg1.ImageWidth = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg1.ImageHeight = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  pLayerCfg1.Backcolor.Green = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
  pLayerCfg1.Backcolor.Red = 0;
 80016d8:	2300      	movs	r3, #0
 80016da:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 80016de:	463b      	mov	r3, r7
 80016e0:	2201      	movs	r2, #1
 80016e2:	4619      	mov	r1, r3
 80016e4:	4805      	ldr	r0, [pc, #20]	@ (80016fc <MX_LTDC_Init+0x15c>)
 80016e6:	f001 fb8d 	bl	8002e04 <HAL_LTDC_ConfigLayer>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 80016f0:	f000 fa5e 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	3768      	adds	r7, #104	@ 0x68
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000178 	.word	0x20000178
 8001700:	40016800 	.word	0x40016800

08001704 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */

  /* USER CODE BEGIN RNG_Init 2 */
   RND_NUM();
 8001708:	f7fe ff4c 	bl	80005a4 <RND_NUM>

  /* USER CODE END RNG_Init 2 */

}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}

08001710 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001714:	4b17      	ldr	r3, [pc, #92]	@ (8001774 <MX_SPI5_Init+0x64>)
 8001716:	4a18      	ldr	r2, [pc, #96]	@ (8001778 <MX_SPI5_Init+0x68>)
 8001718:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800171a:	4b16      	ldr	r3, [pc, #88]	@ (8001774 <MX_SPI5_Init+0x64>)
 800171c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001720:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001722:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <MX_SPI5_Init+0x64>)
 8001724:	2200      	movs	r2, #0
 8001726:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <MX_SPI5_Init+0x64>)
 800172a:	2200      	movs	r2, #0
 800172c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800172e:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <MX_SPI5_Init+0x64>)
 8001730:	2200      	movs	r2, #0
 8001732:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001734:	4b0f      	ldr	r3, [pc, #60]	@ (8001774 <MX_SPI5_Init+0x64>)
 8001736:	2200      	movs	r2, #0
 8001738:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800173a:	4b0e      	ldr	r3, [pc, #56]	@ (8001774 <MX_SPI5_Init+0x64>)
 800173c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001740:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001742:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <MX_SPI5_Init+0x64>)
 8001744:	2200      	movs	r2, #0
 8001746:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001748:	4b0a      	ldr	r3, [pc, #40]	@ (8001774 <MX_SPI5_Init+0x64>)
 800174a:	2200      	movs	r2, #0
 800174c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800174e:	4b09      	ldr	r3, [pc, #36]	@ (8001774 <MX_SPI5_Init+0x64>)
 8001750:	2200      	movs	r2, #0
 8001752:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001754:	4b07      	ldr	r3, [pc, #28]	@ (8001774 <MX_SPI5_Init+0x64>)
 8001756:	2200      	movs	r2, #0
 8001758:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800175a:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <MX_SPI5_Init+0x64>)
 800175c:	220a      	movs	r2, #10
 800175e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001760:	4804      	ldr	r0, [pc, #16]	@ (8001774 <MX_SPI5_Init+0x64>)
 8001762:	f002 fbe9 	bl	8003f38 <HAL_SPI_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800176c:	f000 fa20 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20000220 	.word	0x20000220
 8001778:	40015000 	.word	0x40015000

0800177c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001790:	463b      	mov	r3, r7
 8001792:	2200      	movs	r2, #0
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001798:	4b21      	ldr	r3, [pc, #132]	@ (8001820 <MX_TIM2_Init+0xa4>)
 800179a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800179e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001820 <MX_TIM2_Init+0xa4>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80017a6:	4b1e      	ldr	r3, [pc, #120]	@ (8001820 <MX_TIM2_Init+0xa4>)
 80017a8:	2210      	movs	r2, #16
 80017aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 15999999;//47999997;//15999999;
 80017ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001820 <MX_TIM2_Init+0xa4>)
 80017ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001824 <MX_TIM2_Init+0xa8>)
 80017b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b2:	4b1b      	ldr	r3, [pc, #108]	@ (8001820 <MX_TIM2_Init+0xa4>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b8:	4b19      	ldr	r3, [pc, #100]	@ (8001820 <MX_TIM2_Init+0xa4>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017be:	4818      	ldr	r0, [pc, #96]	@ (8001820 <MX_TIM2_Init+0xa4>)
 80017c0:	f002 fc43 	bl	800404a <HAL_TIM_Base_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80017ca:	f000 f9f1 	bl	8001bb0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017ce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017d4:	f107 0308 	add.w	r3, r7, #8
 80017d8:	4619      	mov	r1, r3
 80017da:	4811      	ldr	r0, [pc, #68]	@ (8001820 <MX_TIM2_Init+0xa4>)
 80017dc:	f002 fde4 	bl	80043a8 <HAL_TIM_ConfigClockSource>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80017e6:	f000 f9e3 	bl	8001bb0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ea:	2300      	movs	r3, #0
 80017ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ee:	2300      	movs	r3, #0
 80017f0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017f2:	463b      	mov	r3, r7
 80017f4:	4619      	mov	r1, r3
 80017f6:	480a      	ldr	r0, [pc, #40]	@ (8001820 <MX_TIM2_Init+0xa4>)
 80017f8:	f003 f80c 	bl	8004814 <HAL_TIMEx_MasterConfigSynchronization>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001802:	f000 f9d5 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK) {
 8001806:	4806      	ldr	r0, [pc, #24]	@ (8001820 <MX_TIM2_Init+0xa4>)
 8001808:	f002 fc6e 	bl	80040e8 <HAL_TIM_Base_Start_IT>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <MX_TIM2_Init+0x9a>
      Error_Handler(); // Handle errors appropriately
 8001812:	f000 f9cd 	bl	8001bb0 <Error_Handler>
  }
  /* USER CODE END TIM2_Init 2 */

}
 8001816:	bf00      	nop
 8001818:	3718      	adds	r7, #24
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000278 	.word	0x20000278
 8001824:	00f423ff 	.word	0x00f423ff

08001828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08e      	sub	sp, #56	@ 0x38
 800182c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
 8001838:	609a      	str	r2, [r3, #8]
 800183a:	60da      	str	r2, [r3, #12]
 800183c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	623b      	str	r3, [r7, #32]
 8001842:	4bb3      	ldr	r3, [pc, #716]	@ (8001b10 <MX_GPIO_Init+0x2e8>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	4ab2      	ldr	r2, [pc, #712]	@ (8001b10 <MX_GPIO_Init+0x2e8>)
 8001848:	f043 0304 	orr.w	r3, r3, #4
 800184c:	6313      	str	r3, [r2, #48]	@ 0x30
 800184e:	4bb0      	ldr	r3, [pc, #704]	@ (8001b10 <MX_GPIO_Init+0x2e8>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	623b      	str	r3, [r7, #32]
 8001858:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
 800185e:	4bac      	ldr	r3, [pc, #688]	@ (8001b10 <MX_GPIO_Init+0x2e8>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	4aab      	ldr	r2, [pc, #684]	@ (8001b10 <MX_GPIO_Init+0x2e8>)
 8001864:	f043 0320 	orr.w	r3, r3, #32
 8001868:	6313      	str	r3, [r2, #48]	@ 0x30
 800186a:	4ba9      	ldr	r3, [pc, #676]	@ (8001b10 <MX_GPIO_Init+0x2e8>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	f003 0320 	and.w	r3, r3, #32
 8001872:	61fb      	str	r3, [r7, #28]
 8001874:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	4ba5      	ldr	r3, [pc, #660]	@ (8001b10 <MX_GPIO_Init+0x2e8>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	4aa4      	ldr	r2, [pc, #656]	@ (8001b10 <MX_GPIO_Init+0x2e8>)
 8001880:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001884:	6313      	str	r3, [r2, #48]	@ 0x30
 8001886:	4ba2      	ldr	r3, [pc, #648]	@ (8001b10 <MX_GPIO_Init+0x2e8>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800188e:	61bb      	str	r3, [r7, #24]
 8001890:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	4b9e      	ldr	r3, [pc, #632]	@ (8001b10 <MX_GPIO_Init+0x2e8>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	4a9d      	ldr	r2, [pc, #628]	@ (8001b10 <MX_GPIO_Init+0x2e8>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a2:	4b9b      	ldr	r3, [pc, #620]	@ (8001b10 <MX_GPIO_Init+0x2e8>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	4b97      	ldr	r3, [pc, #604]	@ (8001b10 <MX_GPIO_Init+0x2e8>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	4a96      	ldr	r2, [pc, #600]	@ (8001b10 <MX_GPIO_Init+0x2e8>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018be:	4b94      	ldr	r3, [pc, #592]	@ (8001b10 <MX_GPIO_Init+0x2e8>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	4b90      	ldr	r3, [pc, #576]	@ (8001b10 <MX_GPIO_Init+0x2e8>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	4a8f      	ldr	r2, [pc, #572]	@ (8001b10 <MX_GPIO_Init+0x2e8>)
 80018d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018da:	4b8d      	ldr	r3, [pc, #564]	@ (8001b10 <MX_GPIO_Init+0x2e8>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	4b89      	ldr	r3, [pc, #548]	@ (8001b10 <MX_GPIO_Init+0x2e8>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	4a88      	ldr	r2, [pc, #544]	@ (8001b10 <MX_GPIO_Init+0x2e8>)
 80018f0:	f043 0310 	orr.w	r3, r3, #16
 80018f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f6:	4b86      	ldr	r3, [pc, #536]	@ (8001b10 <MX_GPIO_Init+0x2e8>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	f003 0310 	and.w	r3, r3, #16
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	4b82      	ldr	r3, [pc, #520]	@ (8001b10 <MX_GPIO_Init+0x2e8>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	4a81      	ldr	r2, [pc, #516]	@ (8001b10 <MX_GPIO_Init+0x2e8>)
 800190c:	f043 0308 	orr.w	r3, r3, #8
 8001910:	6313      	str	r3, [r2, #48]	@ 0x30
 8001912:	4b7f      	ldr	r3, [pc, #508]	@ (8001b10 <MX_GPIO_Init+0x2e8>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	2116      	movs	r1, #22
 8001922:	487c      	ldr	r0, [pc, #496]	@ (8001b14 <MX_GPIO_Init+0x2ec>)
 8001924:	f000 ffac 	bl	8002880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	2180      	movs	r1, #128	@ 0x80
 800192c:	487a      	ldr	r0, [pc, #488]	@ (8001b18 <MX_GPIO_Init+0x2f0>)
 800192e:	f000 ffa7 	bl	8002880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8001938:	4878      	ldr	r0, [pc, #480]	@ (8001b1c <MX_GPIO_Init+0x2f4>)
 800193a:	f000 ffa1 	bl	8002880 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 800193e:	2200      	movs	r2, #0
 8001940:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001944:	4876      	ldr	r0, [pc, #472]	@ (8001b20 <MX_GPIO_Init+0x2f8>)
 8001946:	f000 ff9b 	bl	8002880 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800194a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800194e:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	2302      	movs	r3, #2
 8001952:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001954:	2300      	movs	r3, #0
 8001956:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001958:	2303      	movs	r3, #3
 800195a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800195c:	230c      	movs	r3, #12
 800195e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001960:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001964:	4619      	mov	r1, r3
 8001966:	486f      	ldr	r0, [pc, #444]	@ (8001b24 <MX_GPIO_Init+0x2fc>)
 8001968:	f000 fdc6 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800196c:	2301      	movs	r3, #1
 800196e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001978:	2303      	movs	r3, #3
 800197a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800197c:	230c      	movs	r3, #12
 800197e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001980:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001984:	4619      	mov	r1, r3
 8001986:	4863      	ldr	r0, [pc, #396]	@ (8001b14 <MX_GPIO_Init+0x2ec>)
 8001988:	f000 fdb6 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800198c:	2316      	movs	r3, #22
 800198e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	2301      	movs	r3, #1
 8001992:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800199c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019a0:	4619      	mov	r1, r3
 80019a2:	485c      	ldr	r0, [pc, #368]	@ (8001b14 <MX_GPIO_Init+0x2ec>)
 80019a4:	f000 fda8 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019a8:	2301      	movs	r3, #1
 80019aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019ac:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80019b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b2:	2300      	movs	r3, #0
 80019b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ba:	4619      	mov	r1, r3
 80019bc:	4856      	ldr	r0, [pc, #344]	@ (8001b18 <MX_GPIO_Init+0x2f0>)
 80019be:	f000 fd9b 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 80019c2:	f248 0306 	movw	r3, #32774	@ 0x8006
 80019c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019c8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80019cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019d6:	4619      	mov	r1, r3
 80019d8:	484f      	ldr	r0, [pc, #316]	@ (8001b18 <MX_GPIO_Init+0x2f0>)
 80019da:	f000 fd8d 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80019de:	2380      	movs	r3, #128	@ 0x80
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e2:	2301      	movs	r3, #1
 80019e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80019ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019f2:	4619      	mov	r1, r3
 80019f4:	4848      	ldr	r0, [pc, #288]	@ (8001b18 <MX_GPIO_Init+0x2f0>)
 80019f6:	f000 fd7f 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80019fa:	2320      	movs	r3, #32
 80019fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019fe:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001a08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4841      	ldr	r0, [pc, #260]	@ (8001b14 <MX_GPIO_Init+0x2ec>)
 8001a10:	f000 fd72 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001a14:	2304      	movs	r3, #4
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001a20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a24:	4619      	mov	r1, r3
 8001a26:	4840      	ldr	r0, [pc, #256]	@ (8001b28 <MX_GPIO_Init+0x300>)
 8001a28:	f000 fd66 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001a2c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a3e:	230c      	movs	r3, #12
 8001a40:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a46:	4619      	mov	r1, r3
 8001a48:	4835      	ldr	r0, [pc, #212]	@ (8001b20 <MX_GPIO_Init+0x2f8>)
 8001a4a:	f000 fd55 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001a4e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001a52:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a54:	2302      	movs	r3, #2
 8001a56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a60:	230c      	movs	r3, #12
 8001a62:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4830      	ldr	r0, [pc, #192]	@ (8001b2c <MX_GPIO_Init+0x304>)
 8001a6c:	f000 fd44 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001a70:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001a82:	230c      	movs	r3, #12
 8001a84:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4826      	ldr	r0, [pc, #152]	@ (8001b28 <MX_GPIO_Init+0x300>)
 8001a8e:	f000 fd33 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001a92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8001aa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4820      	ldr	r0, [pc, #128]	@ (8001b28 <MX_GPIO_Init+0x300>)
 8001aa8:	f000 fd26 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001aac:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aba:	2303      	movs	r3, #3
 8001abc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001abe:	230c      	movs	r3, #12
 8001ac0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4814      	ldr	r0, [pc, #80]	@ (8001b1c <MX_GPIO_Init+0x2f4>)
 8001aca:	f000 fd15 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001ace:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ad2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001adc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	480e      	ldr	r0, [pc, #56]	@ (8001b1c <MX_GPIO_Init+0x2f4>)
 8001ae4:	f000 fd08 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001ae8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001aec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aee:	2301      	movs	r3, #1
 8001af0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001afa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001afe:	4619      	mov	r1, r3
 8001b00:	4806      	ldr	r0, [pc, #24]	@ (8001b1c <MX_GPIO_Init+0x2f4>)
 8001b02:	f000 fcf9 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001b06:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b0c:	e010      	b.n	8001b30 <MX_GPIO_Init+0x308>
 8001b0e:	bf00      	nop
 8001b10:	40023800 	.word	0x40023800
 8001b14:	40020800 	.word	0x40020800
 8001b18:	40020000 	.word	0x40020000
 8001b1c:	40020c00 	.word	0x40020c00
 8001b20:	40021800 	.word	0x40021800
 8001b24:	40021400 	.word	0x40021400
 8001b28:	40020400 	.word	0x40020400
 8001b2c:	40021000 	.word	0x40021000
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b30:	2302      	movs	r3, #2
 8001b32:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b3c:	2307      	movs	r3, #7
 8001b3e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b44:	4619      	mov	r1, r3
 8001b46:	4817      	ldr	r0, [pc, #92]	@ (8001ba4 <MX_GPIO_Init+0x37c>)
 8001b48:	f000 fcd6 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001b4c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001b50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b52:	2301      	movs	r3, #1
 8001b54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b62:	4619      	mov	r1, r3
 8001b64:	4810      	ldr	r0, [pc, #64]	@ (8001ba8 <MX_GPIO_Init+0x380>)
 8001b66:	f000 fcc7 	bl	80024f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001b6a:	2360      	movs	r3, #96	@ 0x60
 8001b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b76:	2303      	movs	r3, #3
 8001b78:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b7a:	230c      	movs	r3, #12
 8001b7c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001b82:	4619      	mov	r1, r3
 8001b84:	4809      	ldr	r0, [pc, #36]	@ (8001bac <MX_GPIO_Init+0x384>)
 8001b86:	f000 fcb7 	bl	80024f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	2006      	movs	r0, #6
 8001b90:	f000 fc7b 	bl	800248a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001b94:	2006      	movs	r0, #6
 8001b96:	f000 fc94 	bl	80024c2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001b9a:	bf00      	nop
 8001b9c:	3738      	adds	r7, #56	@ 0x38
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40020000 	.word	0x40020000
 8001ba8:	40021800 	.word	0x40021800
 8001bac:	40020400 	.word	0x40020400

08001bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb4:	b672      	cpsid	i
}
 8001bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <Error_Handler+0x8>

08001bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	607b      	str	r3, [r7, #4]
 8001bc6:	4b10      	ldr	r3, [pc, #64]	@ (8001c08 <HAL_MspInit+0x4c>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bca:	4a0f      	ldr	r2, [pc, #60]	@ (8001c08 <HAL_MspInit+0x4c>)
 8001bcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001c08 <HAL_MspInit+0x4c>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	603b      	str	r3, [r7, #0]
 8001be2:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <HAL_MspInit+0x4c>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	4a08      	ldr	r2, [pc, #32]	@ (8001c08 <HAL_MspInit+0x4c>)
 8001be8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bee:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <HAL_MspInit+0x4c>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf6:	603b      	str	r3, [r7, #0]
 8001bf8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001bfa:	2007      	movs	r0, #7
 8001bfc:	f000 fc3a 	bl	8002474 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	40023800 	.word	0x40023800

08001c0c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08a      	sub	sp, #40	@ 0x28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c14:	f107 0314 	add.w	r3, r7, #20
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	609a      	str	r2, [r3, #8]
 8001c20:	60da      	str	r2, [r3, #12]
 8001c22:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a29      	ldr	r2, [pc, #164]	@ (8001cd0 <HAL_I2C_MspInit+0xc4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d14b      	bne.n	8001cc6 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
 8001c32:	4b28      	ldr	r3, [pc, #160]	@ (8001cd4 <HAL_I2C_MspInit+0xc8>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	4a27      	ldr	r2, [pc, #156]	@ (8001cd4 <HAL_I2C_MspInit+0xc8>)
 8001c38:	f043 0304 	orr.w	r3, r3, #4
 8001c3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c3e:	4b25      	ldr	r3, [pc, #148]	@ (8001cd4 <HAL_I2C_MspInit+0xc8>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	4b21      	ldr	r3, [pc, #132]	@ (8001cd4 <HAL_I2C_MspInit+0xc8>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	4a20      	ldr	r2, [pc, #128]	@ (8001cd4 <HAL_I2C_MspInit+0xc8>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001cd4 <HAL_I2C_MspInit+0xc8>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001c66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c6c:	2312      	movs	r3, #18
 8001c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2300      	movs	r3, #0
 8001c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c78:	2304      	movs	r3, #4
 8001c7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4619      	mov	r1, r3
 8001c82:	4815      	ldr	r0, [pc, #84]	@ (8001cd8 <HAL_I2C_MspInit+0xcc>)
 8001c84:	f000 fc38 	bl	80024f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001c88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c8e:	2312      	movs	r3, #18
 8001c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c96:	2300      	movs	r3, #0
 8001c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001c9e:	f107 0314 	add.w	r3, r7, #20
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	480d      	ldr	r0, [pc, #52]	@ (8001cdc <HAL_I2C_MspInit+0xd0>)
 8001ca6:	f000 fc27 	bl	80024f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60bb      	str	r3, [r7, #8]
 8001cae:	4b09      	ldr	r3, [pc, #36]	@ (8001cd4 <HAL_I2C_MspInit+0xc8>)
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	4a08      	ldr	r2, [pc, #32]	@ (8001cd4 <HAL_I2C_MspInit+0xc8>)
 8001cb4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001cb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cba:	4b06      	ldr	r3, [pc, #24]	@ (8001cd4 <HAL_I2C_MspInit+0xc8>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001cc2:	60bb      	str	r3, [r7, #8]
 8001cc4:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001cc6:	bf00      	nop
 8001cc8:	3728      	adds	r7, #40	@ 0x28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40005c00 	.word	0x40005c00
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40020800 	.word	0x40020800
 8001cdc:	40020000 	.word	0x40020000

08001ce0 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b09a      	sub	sp, #104	@ 0x68
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001cf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cfc:	2230      	movs	r2, #48	@ 0x30
 8001cfe:	2100      	movs	r1, #0
 8001d00:	4618      	mov	r0, r3
 8001d02:	f003 f9e7 	bl	80050d4 <memset>
  if(hltdc->Instance==LTDC)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a81      	ldr	r2, [pc, #516]	@ (8001f10 <HAL_LTDC_MspInit+0x230>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	f040 80fa 	bne.w	8001f06 <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001d12:	2308      	movs	r3, #8
 8001d14:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001d16:	2332      	movs	r3, #50	@ 0x32
 8001d18:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d26:	4618      	mov	r0, r3
 8001d28:	f001 fec6 	bl	8003ab8 <HAL_RCCEx_PeriphCLKConfig>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001d32:	f7ff ff3d 	bl	8001bb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	623b      	str	r3, [r7, #32]
 8001d3a:	4b76      	ldr	r3, [pc, #472]	@ (8001f14 <HAL_LTDC_MspInit+0x234>)
 8001d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3e:	4a75      	ldr	r2, [pc, #468]	@ (8001f14 <HAL_LTDC_MspInit+0x234>)
 8001d40:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001d44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d46:	4b73      	ldr	r3, [pc, #460]	@ (8001f14 <HAL_LTDC_MspInit+0x234>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d4e:	623b      	str	r3, [r7, #32]
 8001d50:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
 8001d56:	4b6f      	ldr	r3, [pc, #444]	@ (8001f14 <HAL_LTDC_MspInit+0x234>)
 8001d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5a:	4a6e      	ldr	r2, [pc, #440]	@ (8001f14 <HAL_LTDC_MspInit+0x234>)
 8001d5c:	f043 0320 	orr.w	r3, r3, #32
 8001d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d62:	4b6c      	ldr	r3, [pc, #432]	@ (8001f14 <HAL_LTDC_MspInit+0x234>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	61fb      	str	r3, [r7, #28]
 8001d6c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	4b68      	ldr	r3, [pc, #416]	@ (8001f14 <HAL_LTDC_MspInit+0x234>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d76:	4a67      	ldr	r2, [pc, #412]	@ (8001f14 <HAL_LTDC_MspInit+0x234>)
 8001d78:	f043 0301 	orr.w	r3, r3, #1
 8001d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7e:	4b65      	ldr	r3, [pc, #404]	@ (8001f14 <HAL_LTDC_MspInit+0x234>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	61bb      	str	r3, [r7, #24]
 8001d88:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	4b61      	ldr	r3, [pc, #388]	@ (8001f14 <HAL_LTDC_MspInit+0x234>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d92:	4a60      	ldr	r2, [pc, #384]	@ (8001f14 <HAL_LTDC_MspInit+0x234>)
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d9a:	4b5e      	ldr	r3, [pc, #376]	@ (8001f14 <HAL_LTDC_MspInit+0x234>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	613b      	str	r3, [r7, #16]
 8001daa:	4b5a      	ldr	r3, [pc, #360]	@ (8001f14 <HAL_LTDC_MspInit+0x234>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dae:	4a59      	ldr	r2, [pc, #356]	@ (8001f14 <HAL_LTDC_MspInit+0x234>)
 8001db0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db6:	4b57      	ldr	r3, [pc, #348]	@ (8001f14 <HAL_LTDC_MspInit+0x234>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dbe:	613b      	str	r3, [r7, #16]
 8001dc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	4b53      	ldr	r3, [pc, #332]	@ (8001f14 <HAL_LTDC_MspInit+0x234>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dca:	4a52      	ldr	r2, [pc, #328]	@ (8001f14 <HAL_LTDC_MspInit+0x234>)
 8001dcc:	f043 0304 	orr.w	r3, r3, #4
 8001dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd2:	4b50      	ldr	r3, [pc, #320]	@ (8001f14 <HAL_LTDC_MspInit+0x234>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
 8001de2:	4b4c      	ldr	r3, [pc, #304]	@ (8001f14 <HAL_LTDC_MspInit+0x234>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	4a4b      	ldr	r2, [pc, #300]	@ (8001f14 <HAL_LTDC_MspInit+0x234>)
 8001de8:	f043 0308 	orr.w	r3, r3, #8
 8001dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dee:	4b49      	ldr	r3, [pc, #292]	@ (8001f14 <HAL_LTDC_MspInit+0x234>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df2:	f003 0308 	and.w	r3, r3, #8
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001dfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dfe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e00:	2302      	movs	r3, #2
 8001e02:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e0c:	230e      	movs	r3, #14
 8001e0e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001e10:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e14:	4619      	mov	r1, r3
 8001e16:	4840      	ldr	r0, [pc, #256]	@ (8001f18 <HAL_LTDC_MspInit+0x238>)
 8001e18:	f000 fb6e 	bl	80024f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001e1c:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001e20:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e2e:	230e      	movs	r3, #14
 8001e30:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e32:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e36:	4619      	mov	r1, r3
 8001e38:	4838      	ldr	r0, [pc, #224]	@ (8001f1c <HAL_LTDC_MspInit+0x23c>)
 8001e3a:	f000 fb5d 	bl	80024f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e42:	2302      	movs	r3, #2
 8001e44:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001e4e:	2309      	movs	r3, #9
 8001e50:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e52:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e56:	4619      	mov	r1, r3
 8001e58:	4831      	ldr	r0, [pc, #196]	@ (8001f20 <HAL_LTDC_MspInit+0x240>)
 8001e5a:	f000 fb4d 	bl	80024f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001e5e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001e62:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e64:	2302      	movs	r3, #2
 8001e66:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e70:	230e      	movs	r3, #14
 8001e72:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e74:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4829      	ldr	r0, [pc, #164]	@ (8001f20 <HAL_LTDC_MspInit+0x240>)
 8001e7c:	f000 fb3c 	bl	80024f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001e80:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001e84:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001e92:	230e      	movs	r3, #14
 8001e94:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e96:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4821      	ldr	r0, [pc, #132]	@ (8001f24 <HAL_LTDC_MspInit+0x244>)
 8001e9e:	f000 fb2b 	bl	80024f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001ea2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001ea6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001eb4:	230e      	movs	r3, #14
 8001eb6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eb8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	481a      	ldr	r0, [pc, #104]	@ (8001f28 <HAL_LTDC_MspInit+0x248>)
 8001ec0:	f000 fb1a 	bl	80024f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001ec4:	2348      	movs	r3, #72	@ 0x48
 8001ec6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec8:	2302      	movs	r3, #2
 8001eca:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001ed4:	230e      	movs	r3, #14
 8001ed6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ed8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001edc:	4619      	mov	r1, r3
 8001ede:	4813      	ldr	r0, [pc, #76]	@ (8001f2c <HAL_LTDC_MspInit+0x24c>)
 8001ee0:	f000 fb0a 	bl	80024f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001ee4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ee8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eea:	2302      	movs	r3, #2
 8001eec:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001ef6:	2309      	movs	r3, #9
 8001ef8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001efa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001efe:	4619      	mov	r1, r3
 8001f00:	4808      	ldr	r0, [pc, #32]	@ (8001f24 <HAL_LTDC_MspInit+0x244>)
 8001f02:	f000 faf9 	bl	80024f8 <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001f06:	bf00      	nop
 8001f08:	3768      	adds	r7, #104	@ 0x68
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40016800 	.word	0x40016800
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40021400 	.word	0x40021400
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	40020400 	.word	0x40020400
 8001f24:	40021800 	.word	0x40021800
 8001f28:	40020800 	.word	0x40020800
 8001f2c:	40020c00 	.word	0x40020c00

08001f30 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b085      	sub	sp, #20
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f6c <HAL_RNG_MspInit+0x3c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d10d      	bne.n	8001f5e <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <HAL_RNG_MspInit+0x40>)
 8001f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f4a:	4a09      	ldr	r2, [pc, #36]	@ (8001f70 <HAL_RNG_MspInit+0x40>)
 8001f4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f50:	6353      	str	r3, [r2, #52]	@ 0x34
 8001f52:	4b07      	ldr	r3, [pc, #28]	@ (8001f70 <HAL_RNG_MspInit+0x40>)
 8001f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8001f5e:	bf00      	nop
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	50060800 	.word	0x50060800
 8001f70:	40023800 	.word	0x40023800

08001f74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	@ 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a19      	ldr	r2, [pc, #100]	@ (8001ff8 <HAL_SPI_MspInit+0x84>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d12c      	bne.n	8001ff0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	4b18      	ldr	r3, [pc, #96]	@ (8001ffc <HAL_SPI_MspInit+0x88>)
 8001f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f9e:	4a17      	ldr	r2, [pc, #92]	@ (8001ffc <HAL_SPI_MspInit+0x88>)
 8001fa0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001fa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fa6:	4b15      	ldr	r3, [pc, #84]	@ (8001ffc <HAL_SPI_MspInit+0x88>)
 8001fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001faa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b11      	ldr	r3, [pc, #68]	@ (8001ffc <HAL_SPI_MspInit+0x88>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	4a10      	ldr	r2, [pc, #64]	@ (8001ffc <HAL_SPI_MspInit+0x88>)
 8001fbc:	f043 0320 	orr.w	r3, r3, #32
 8001fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8001ffc <HAL_SPI_MspInit+0x88>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	f003 0320 	and.w	r3, r3, #32
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8001fce:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001fe0:	2305      	movs	r3, #5
 8001fe2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001fe4:	f107 0314 	add.w	r3, r7, #20
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4805      	ldr	r0, [pc, #20]	@ (8002000 <HAL_SPI_MspInit+0x8c>)
 8001fec:	f000 fa84 	bl	80024f8 <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001ff0:	bf00      	nop
 8001ff2:	3728      	adds	r7, #40	@ 0x28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}
 8001ff8:	40015000 	.word	0x40015000
 8001ffc:	40023800 	.word	0x40023800
 8002000:	40021400 	.word	0x40021400

08002004 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002014:	d115      	bne.n	8002042 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b0c      	ldr	r3, [pc, #48]	@ (800204c <HAL_TIM_Base_MspInit+0x48>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201e:	4a0b      	ldr	r2, [pc, #44]	@ (800204c <HAL_TIM_Base_MspInit+0x48>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6413      	str	r3, [r2, #64]	@ 0x40
 8002026:	4b09      	ldr	r3, [pc, #36]	@ (800204c <HAL_TIM_Base_MspInit+0x48>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	2100      	movs	r1, #0
 8002036:	201c      	movs	r0, #28
 8002038:	f000 fa27 	bl	800248a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800203c:	201c      	movs	r0, #28
 800203e:	f000 fa40 	bl	80024c2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023800 	.word	0x40023800

08002050 <HAL_GPIO_EXTI_Callback>:

}

/* USER CODE BEGIN 1 */
// Interrupt callback function
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) {  // Button pin
 800205a:	88fb      	ldrh	r3, [r7, #6]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_GPIO_EXTI_Callback+0x14>
    	// rotate stuff
    	transform_rotation();
 8002060:	f7fe fbf0 	bl	8000844 <transform_rotation>
    }
}
 8002064:	bf00      	nop
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <HAL_TIM_PeriodElapsedCallback>:

// Interrupt callback function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800207c:	d101      	bne.n	8002082 <HAL_TIM_PeriodElapsedCallback+0x16>
    	tick_Matrix();
 800207e:	f7ff f825 	bl	80010cc <tick_Matrix>
    }
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800208e:	bf00      	nop
 8002090:	e7fd      	b.n	800208e <NMI_Handler+0x4>

08002092 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002092:	b480      	push	{r7}
 8002094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002096:	bf00      	nop
 8002098:	e7fd      	b.n	8002096 <HardFault_Handler+0x4>

0800209a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800209a:	b480      	push	{r7}
 800209c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800209e:	bf00      	nop
 80020a0:	e7fd      	b.n	800209e <MemManage_Handler+0x4>

080020a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a2:	b480      	push	{r7}
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020a6:	bf00      	nop
 80020a8:	e7fd      	b.n	80020a6 <BusFault_Handler+0x4>

080020aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ae:	bf00      	nop
 80020b0:	e7fd      	b.n	80020ae <UsageFault_Handler+0x4>

080020b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b2:	b480      	push	{r7}
 80020b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020b6:	bf00      	nop
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020e0:	f000 f8d8 	bl	8002294 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80020ec:	2001      	movs	r0, #1
 80020ee:	f000 fbe1 	bl	80028b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
	...

080020f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020fc:	4802      	ldr	r0, [pc, #8]	@ (8002108 <TIM2_IRQHandler+0x10>)
 80020fe:	f002 f863 	bl	80041c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000278 	.word	0x20000278

0800210c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002114:	4a14      	ldr	r2, [pc, #80]	@ (8002168 <_sbrk+0x5c>)
 8002116:	4b15      	ldr	r3, [pc, #84]	@ (800216c <_sbrk+0x60>)
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002120:	4b13      	ldr	r3, [pc, #76]	@ (8002170 <_sbrk+0x64>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d102      	bne.n	800212e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002128:	4b11      	ldr	r3, [pc, #68]	@ (8002170 <_sbrk+0x64>)
 800212a:	4a12      	ldr	r2, [pc, #72]	@ (8002174 <_sbrk+0x68>)
 800212c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800212e:	4b10      	ldr	r3, [pc, #64]	@ (8002170 <_sbrk+0x64>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	693a      	ldr	r2, [r7, #16]
 8002138:	429a      	cmp	r2, r3
 800213a:	d207      	bcs.n	800214c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800213c:	f002 ffd2 	bl	80050e4 <__errno>
 8002140:	4603      	mov	r3, r0
 8002142:	220c      	movs	r2, #12
 8002144:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002146:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800214a:	e009      	b.n	8002160 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800214c:	4b08      	ldr	r3, [pc, #32]	@ (8002170 <_sbrk+0x64>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002152:	4b07      	ldr	r3, [pc, #28]	@ (8002170 <_sbrk+0x64>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4413      	add	r3, r2
 800215a:	4a05      	ldr	r2, [pc, #20]	@ (8002170 <_sbrk+0x64>)
 800215c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800215e:	68fb      	ldr	r3, [r7, #12]
}
 8002160:	4618      	mov	r0, r3
 8002162:	3718      	adds	r7, #24
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20030000 	.word	0x20030000
 800216c:	00000400 	.word	0x00000400
 8002170:	200002c0 	.word	0x200002c0
 8002174:	200004c0 	.word	0x200004c0

08002178 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800217c:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <SystemInit+0x20>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002182:	4a05      	ldr	r2, [pc, #20]	@ (8002198 <SystemInit+0x20>)
 8002184:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002188:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800219c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80021d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021a0:	f7ff ffea 	bl	8002178 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021a4:	480c      	ldr	r0, [pc, #48]	@ (80021d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80021a6:	490d      	ldr	r1, [pc, #52]	@ (80021dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80021a8:	4a0d      	ldr	r2, [pc, #52]	@ (80021e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80021aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021ac:	e002      	b.n	80021b4 <LoopCopyDataInit>

080021ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021b2:	3304      	adds	r3, #4

080021b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021b8:	d3f9      	bcc.n	80021ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ba:	4a0a      	ldr	r2, [pc, #40]	@ (80021e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80021bc:	4c0a      	ldr	r4, [pc, #40]	@ (80021e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80021be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021c0:	e001      	b.n	80021c6 <LoopFillZerobss>

080021c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021c4:	3204      	adds	r2, #4

080021c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021c8:	d3fb      	bcc.n	80021c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80021ca:	f002 ff91 	bl	80050f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021ce:	f7ff f90d 	bl	80013ec <main>
  bx  lr    
 80021d2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80021d4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80021d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021dc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80021e0:	08005f10 	.word	0x08005f10
  ldr r2, =_sbss
 80021e4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80021e8:	200004c0 	.word	0x200004c0

080021ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021ec:	e7fe      	b.n	80021ec <ADC_IRQHandler>
	...

080021f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002230 <HAL_Init+0x40>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002230 <HAL_Init+0x40>)
 80021fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002200:	4b0b      	ldr	r3, [pc, #44]	@ (8002230 <HAL_Init+0x40>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a0a      	ldr	r2, [pc, #40]	@ (8002230 <HAL_Init+0x40>)
 8002206:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800220a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800220c:	4b08      	ldr	r3, [pc, #32]	@ (8002230 <HAL_Init+0x40>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a07      	ldr	r2, [pc, #28]	@ (8002230 <HAL_Init+0x40>)
 8002212:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002216:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002218:	2003      	movs	r0, #3
 800221a:	f000 f92b 	bl	8002474 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800221e:	2000      	movs	r0, #0
 8002220:	f000 f808 	bl	8002234 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002224:	f7ff fcca 	bl	8001bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40023c00 	.word	0x40023c00

08002234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800223c:	4b12      	ldr	r3, [pc, #72]	@ (8002288 <HAL_InitTick+0x54>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	4b12      	ldr	r3, [pc, #72]	@ (800228c <HAL_InitTick+0x58>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	4619      	mov	r1, r3
 8002246:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800224a:	fbb3 f3f1 	udiv	r3, r3, r1
 800224e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002252:	4618      	mov	r0, r3
 8002254:	f000 f943 	bl	80024de <HAL_SYSTICK_Config>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e00e      	b.n	8002280 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2b0f      	cmp	r3, #15
 8002266:	d80a      	bhi.n	800227e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002268:	2200      	movs	r2, #0
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002270:	f000 f90b 	bl	800248a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002274:	4a06      	ldr	r2, [pc, #24]	@ (8002290 <HAL_InitTick+0x5c>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	e000      	b.n	8002280 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
}
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20000000 	.word	0x20000000
 800228c:	20000008 	.word	0x20000008
 8002290:	20000004 	.word	0x20000004

08002294 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002298:	4b06      	ldr	r3, [pc, #24]	@ (80022b4 <HAL_IncTick+0x20>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	461a      	mov	r2, r3
 800229e:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <HAL_IncTick+0x24>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4413      	add	r3, r2
 80022a4:	4a04      	ldr	r2, [pc, #16]	@ (80022b8 <HAL_IncTick+0x24>)
 80022a6:	6013      	str	r3, [r2, #0]
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	20000008 	.word	0x20000008
 80022b8:	200002c4 	.word	0x200002c4

080022bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return uwTick;
 80022c0:	4b03      	ldr	r3, [pc, #12]	@ (80022d0 <HAL_GetTick+0x14>)
 80022c2:	681b      	ldr	r3, [r3, #0]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	200002c4 	.word	0x200002c4

080022d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002318 <__NVIC_SetPriorityGrouping+0x44>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022f0:	4013      	ands	r3, r2
 80022f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002306:	4a04      	ldr	r2, [pc, #16]	@ (8002318 <__NVIC_SetPriorityGrouping+0x44>)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	60d3      	str	r3, [r2, #12]
}
 800230c:	bf00      	nop
 800230e:	3714      	adds	r7, #20
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	e000ed00 	.word	0xe000ed00

0800231c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002320:	4b04      	ldr	r3, [pc, #16]	@ (8002334 <__NVIC_GetPriorityGrouping+0x18>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	0a1b      	lsrs	r3, r3, #8
 8002326:	f003 0307 	and.w	r3, r3, #7
}
 800232a:	4618      	mov	r0, r3
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr
 8002334:	e000ed00 	.word	0xe000ed00

08002338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002346:	2b00      	cmp	r3, #0
 8002348:	db0b      	blt.n	8002362 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800234a:	79fb      	ldrb	r3, [r7, #7]
 800234c:	f003 021f 	and.w	r2, r3, #31
 8002350:	4907      	ldr	r1, [pc, #28]	@ (8002370 <__NVIC_EnableIRQ+0x38>)
 8002352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002356:	095b      	lsrs	r3, r3, #5
 8002358:	2001      	movs	r0, #1
 800235a:	fa00 f202 	lsl.w	r2, r0, r2
 800235e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	e000e100 	.word	0xe000e100

08002374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	6039      	str	r1, [r7, #0]
 800237e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002384:	2b00      	cmp	r3, #0
 8002386:	db0a      	blt.n	800239e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	b2da      	uxtb	r2, r3
 800238c:	490c      	ldr	r1, [pc, #48]	@ (80023c0 <__NVIC_SetPriority+0x4c>)
 800238e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002392:	0112      	lsls	r2, r2, #4
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	440b      	add	r3, r1
 8002398:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800239c:	e00a      	b.n	80023b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	4908      	ldr	r1, [pc, #32]	@ (80023c4 <__NVIC_SetPriority+0x50>)
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	3b04      	subs	r3, #4
 80023ac:	0112      	lsls	r2, r2, #4
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	440b      	add	r3, r1
 80023b2:	761a      	strb	r2, [r3, #24]
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000e100 	.word	0xe000e100
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b089      	sub	sp, #36	@ 0x24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	f1c3 0307 	rsb	r3, r3, #7
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	bf28      	it	cs
 80023e6:	2304      	movcs	r3, #4
 80023e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	3304      	adds	r3, #4
 80023ee:	2b06      	cmp	r3, #6
 80023f0:	d902      	bls.n	80023f8 <NVIC_EncodePriority+0x30>
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3b03      	subs	r3, #3
 80023f6:	e000      	b.n	80023fa <NVIC_EncodePriority+0x32>
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43da      	mvns	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	401a      	ands	r2, r3
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002410:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	fa01 f303 	lsl.w	r3, r1, r3
 800241a:	43d9      	mvns	r1, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002420:	4313      	orrs	r3, r2
         );
}
 8002422:	4618      	mov	r0, r3
 8002424:	3724      	adds	r7, #36	@ 0x24
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3b01      	subs	r3, #1
 800243c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002440:	d301      	bcc.n	8002446 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002442:	2301      	movs	r3, #1
 8002444:	e00f      	b.n	8002466 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002446:	4a0a      	ldr	r2, [pc, #40]	@ (8002470 <SysTick_Config+0x40>)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3b01      	subs	r3, #1
 800244c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800244e:	210f      	movs	r1, #15
 8002450:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002454:	f7ff ff8e 	bl	8002374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002458:	4b05      	ldr	r3, [pc, #20]	@ (8002470 <SysTick_Config+0x40>)
 800245a:	2200      	movs	r2, #0
 800245c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800245e:	4b04      	ldr	r3, [pc, #16]	@ (8002470 <SysTick_Config+0x40>)
 8002460:	2207      	movs	r2, #7
 8002462:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	e000e010 	.word	0xe000e010

08002474 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f7ff ff29 	bl	80022d4 <__NVIC_SetPriorityGrouping>
}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}

0800248a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800248a:	b580      	push	{r7, lr}
 800248c:	b086      	sub	sp, #24
 800248e:	af00      	add	r7, sp, #0
 8002490:	4603      	mov	r3, r0
 8002492:	60b9      	str	r1, [r7, #8]
 8002494:	607a      	str	r2, [r7, #4]
 8002496:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002498:	2300      	movs	r3, #0
 800249a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800249c:	f7ff ff3e 	bl	800231c <__NVIC_GetPriorityGrouping>
 80024a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68b9      	ldr	r1, [r7, #8]
 80024a6:	6978      	ldr	r0, [r7, #20]
 80024a8:	f7ff ff8e 	bl	80023c8 <NVIC_EncodePriority>
 80024ac:	4602      	mov	r2, r0
 80024ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b2:	4611      	mov	r1, r2
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ff5d 	bl	8002374 <__NVIC_SetPriority>
}
 80024ba:	bf00      	nop
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b082      	sub	sp, #8
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	4603      	mov	r3, r0
 80024ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff ff31 	bl	8002338 <__NVIC_EnableIRQ>
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b082      	sub	sp, #8
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff ffa2 	bl	8002430 <SysTick_Config>
 80024ec:	4603      	mov	r3, r0
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
	...

080024f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b089      	sub	sp, #36	@ 0x24
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002502:	2300      	movs	r3, #0
 8002504:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002506:	2300      	movs	r3, #0
 8002508:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800250a:	2300      	movs	r3, #0
 800250c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	e177      	b.n	8002804 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002514:	2201      	movs	r2, #1
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	4013      	ands	r3, r2
 8002526:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	429a      	cmp	r2, r3
 800252e:	f040 8166 	bne.w	80027fe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	2b01      	cmp	r3, #1
 800253c:	d005      	beq.n	800254a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002546:	2b02      	cmp	r3, #2
 8002548:	d130      	bne.n	80025ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	2203      	movs	r2, #3
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002580:	2201      	movs	r2, #1
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	091b      	lsrs	r3, r3, #4
 8002596:	f003 0201 	and.w	r2, r3, #1
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	2b03      	cmp	r3, #3
 80025b6:	d017      	beq.n	80025e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	2203      	movs	r2, #3
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	689a      	ldr	r2, [r3, #8]
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	fa02 f303 	lsl.w	r3, r2, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f003 0303 	and.w	r3, r3, #3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d123      	bne.n	800263c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	08da      	lsrs	r2, r3, #3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3208      	adds	r2, #8
 80025fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002600:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002602:	69fb      	ldr	r3, [r7, #28]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	220f      	movs	r2, #15
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	43db      	mvns	r3, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	4013      	ands	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	69fb      	ldr	r3, [r7, #28]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	08da      	lsrs	r2, r3, #3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	3208      	adds	r2, #8
 8002636:	69b9      	ldr	r1, [r7, #24]
 8002638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	2203      	movs	r2, #3
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4013      	ands	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 0203 	and.w	r2, r3, #3
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4313      	orrs	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 80c0 	beq.w	80027fe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	4b66      	ldr	r3, [pc, #408]	@ (800281c <HAL_GPIO_Init+0x324>)
 8002684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002686:	4a65      	ldr	r2, [pc, #404]	@ (800281c <HAL_GPIO_Init+0x324>)
 8002688:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800268c:	6453      	str	r3, [r2, #68]	@ 0x44
 800268e:	4b63      	ldr	r3, [pc, #396]	@ (800281c <HAL_GPIO_Init+0x324>)
 8002690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002692:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800269a:	4a61      	ldr	r2, [pc, #388]	@ (8002820 <HAL_GPIO_Init+0x328>)
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	089b      	lsrs	r3, r3, #2
 80026a0:	3302      	adds	r3, #2
 80026a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	220f      	movs	r2, #15
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	4a58      	ldr	r2, [pc, #352]	@ (8002824 <HAL_GPIO_Init+0x32c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d037      	beq.n	8002736 <HAL_GPIO_Init+0x23e>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a57      	ldr	r2, [pc, #348]	@ (8002828 <HAL_GPIO_Init+0x330>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d031      	beq.n	8002732 <HAL_GPIO_Init+0x23a>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a56      	ldr	r2, [pc, #344]	@ (800282c <HAL_GPIO_Init+0x334>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d02b      	beq.n	800272e <HAL_GPIO_Init+0x236>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a55      	ldr	r2, [pc, #340]	@ (8002830 <HAL_GPIO_Init+0x338>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d025      	beq.n	800272a <HAL_GPIO_Init+0x232>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a54      	ldr	r2, [pc, #336]	@ (8002834 <HAL_GPIO_Init+0x33c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d01f      	beq.n	8002726 <HAL_GPIO_Init+0x22e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a53      	ldr	r2, [pc, #332]	@ (8002838 <HAL_GPIO_Init+0x340>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d019      	beq.n	8002722 <HAL_GPIO_Init+0x22a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a52      	ldr	r2, [pc, #328]	@ (800283c <HAL_GPIO_Init+0x344>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d013      	beq.n	800271e <HAL_GPIO_Init+0x226>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a51      	ldr	r2, [pc, #324]	@ (8002840 <HAL_GPIO_Init+0x348>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d00d      	beq.n	800271a <HAL_GPIO_Init+0x222>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a50      	ldr	r2, [pc, #320]	@ (8002844 <HAL_GPIO_Init+0x34c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d007      	beq.n	8002716 <HAL_GPIO_Init+0x21e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a4f      	ldr	r2, [pc, #316]	@ (8002848 <HAL_GPIO_Init+0x350>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d101      	bne.n	8002712 <HAL_GPIO_Init+0x21a>
 800270e:	2309      	movs	r3, #9
 8002710:	e012      	b.n	8002738 <HAL_GPIO_Init+0x240>
 8002712:	230a      	movs	r3, #10
 8002714:	e010      	b.n	8002738 <HAL_GPIO_Init+0x240>
 8002716:	2308      	movs	r3, #8
 8002718:	e00e      	b.n	8002738 <HAL_GPIO_Init+0x240>
 800271a:	2307      	movs	r3, #7
 800271c:	e00c      	b.n	8002738 <HAL_GPIO_Init+0x240>
 800271e:	2306      	movs	r3, #6
 8002720:	e00a      	b.n	8002738 <HAL_GPIO_Init+0x240>
 8002722:	2305      	movs	r3, #5
 8002724:	e008      	b.n	8002738 <HAL_GPIO_Init+0x240>
 8002726:	2304      	movs	r3, #4
 8002728:	e006      	b.n	8002738 <HAL_GPIO_Init+0x240>
 800272a:	2303      	movs	r3, #3
 800272c:	e004      	b.n	8002738 <HAL_GPIO_Init+0x240>
 800272e:	2302      	movs	r3, #2
 8002730:	e002      	b.n	8002738 <HAL_GPIO_Init+0x240>
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <HAL_GPIO_Init+0x240>
 8002736:	2300      	movs	r3, #0
 8002738:	69fa      	ldr	r2, [r7, #28]
 800273a:	f002 0203 	and.w	r2, r2, #3
 800273e:	0092      	lsls	r2, r2, #2
 8002740:	4093      	lsls	r3, r2
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	4313      	orrs	r3, r2
 8002746:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002748:	4935      	ldr	r1, [pc, #212]	@ (8002820 <HAL_GPIO_Init+0x328>)
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	089b      	lsrs	r3, r3, #2
 800274e:	3302      	adds	r3, #2
 8002750:	69ba      	ldr	r2, [r7, #24]
 8002752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002756:	4b3d      	ldr	r3, [pc, #244]	@ (800284c <HAL_GPIO_Init+0x354>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	43db      	mvns	r3, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4013      	ands	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002772:	69ba      	ldr	r2, [r7, #24]
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800277a:	4a34      	ldr	r2, [pc, #208]	@ (800284c <HAL_GPIO_Init+0x354>)
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002780:	4b32      	ldr	r3, [pc, #200]	@ (800284c <HAL_GPIO_Init+0x354>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	43db      	mvns	r3, r3
 800278a:	69ba      	ldr	r2, [r7, #24]
 800278c:	4013      	ands	r3, r2
 800278e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d003      	beq.n	80027a4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027a4:	4a29      	ldr	r2, [pc, #164]	@ (800284c <HAL_GPIO_Init+0x354>)
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027aa:	4b28      	ldr	r3, [pc, #160]	@ (800284c <HAL_GPIO_Init+0x354>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ce:	4a1f      	ldr	r2, [pc, #124]	@ (800284c <HAL_GPIO_Init+0x354>)
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027d4:	4b1d      	ldr	r3, [pc, #116]	@ (800284c <HAL_GPIO_Init+0x354>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	43db      	mvns	r3, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4013      	ands	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027f8:	4a14      	ldr	r2, [pc, #80]	@ (800284c <HAL_GPIO_Init+0x354>)
 80027fa:	69bb      	ldr	r3, [r7, #24]
 80027fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3301      	adds	r3, #1
 8002802:	61fb      	str	r3, [r7, #28]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	2b0f      	cmp	r3, #15
 8002808:	f67f ae84 	bls.w	8002514 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800280c:	bf00      	nop
 800280e:	bf00      	nop
 8002810:	3724      	adds	r7, #36	@ 0x24
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40023800 	.word	0x40023800
 8002820:	40013800 	.word	0x40013800
 8002824:	40020000 	.word	0x40020000
 8002828:	40020400 	.word	0x40020400
 800282c:	40020800 	.word	0x40020800
 8002830:	40020c00 	.word	0x40020c00
 8002834:	40021000 	.word	0x40021000
 8002838:	40021400 	.word	0x40021400
 800283c:	40021800 	.word	0x40021800
 8002840:	40021c00 	.word	0x40021c00
 8002844:	40022000 	.word	0x40022000
 8002848:	40022400 	.word	0x40022400
 800284c:	40013c00 	.word	0x40013c00

08002850 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002850:	b480      	push	{r7}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	460b      	mov	r3, r1
 800285a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	691a      	ldr	r2, [r3, #16]
 8002860:	887b      	ldrh	r3, [r7, #2]
 8002862:	4013      	ands	r3, r2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d002      	beq.n	800286e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002868:	2301      	movs	r3, #1
 800286a:	73fb      	strb	r3, [r7, #15]
 800286c:	e001      	b.n	8002872 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800286e:	2300      	movs	r3, #0
 8002870:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002872:	7bfb      	ldrb	r3, [r7, #15]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3714      	adds	r7, #20
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	807b      	strh	r3, [r7, #2]
 800288c:	4613      	mov	r3, r2
 800288e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002890:	787b      	ldrb	r3, [r7, #1]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002896:	887a      	ldrh	r2, [r7, #2]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800289c:	e003      	b.n	80028a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800289e:	887b      	ldrh	r3, [r7, #2]
 80028a0:	041a      	lsls	r2, r3, #16
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	619a      	str	r2, [r3, #24]
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80028be:	4b08      	ldr	r3, [pc, #32]	@ (80028e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028c0:	695a      	ldr	r2, [r3, #20]
 80028c2:	88fb      	ldrh	r3, [r7, #6]
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d006      	beq.n	80028d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028ca:	4a05      	ldr	r2, [pc, #20]	@ (80028e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028cc:	88fb      	ldrh	r3, [r7, #6]
 80028ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028d0:	88fb      	ldrh	r3, [r7, #6]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f7ff fbbc 	bl	8002050 <HAL_GPIO_EXTI_Callback>
  }
}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40013c00 	.word	0x40013c00

080028e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e12b      	b.n	8002b4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d106      	bne.n	8002910 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7ff f97e 	bl	8001c0c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2224      	movs	r2, #36	@ 0x24
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 0201 	bic.w	r2, r2, #1
 8002926:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002936:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002946:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002948:	f001 f8a2 	bl	8003a90 <HAL_RCC_GetPCLK1Freq>
 800294c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	4a81      	ldr	r2, [pc, #516]	@ (8002b58 <HAL_I2C_Init+0x274>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d807      	bhi.n	8002968 <HAL_I2C_Init+0x84>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4a80      	ldr	r2, [pc, #512]	@ (8002b5c <HAL_I2C_Init+0x278>)
 800295c:	4293      	cmp	r3, r2
 800295e:	bf94      	ite	ls
 8002960:	2301      	movls	r3, #1
 8002962:	2300      	movhi	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	e006      	b.n	8002976 <HAL_I2C_Init+0x92>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	4a7d      	ldr	r2, [pc, #500]	@ (8002b60 <HAL_I2C_Init+0x27c>)
 800296c:	4293      	cmp	r3, r2
 800296e:	bf94      	ite	ls
 8002970:	2301      	movls	r3, #1
 8002972:	2300      	movhi	r3, #0
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e0e7      	b.n	8002b4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4a78      	ldr	r2, [pc, #480]	@ (8002b64 <HAL_I2C_Init+0x280>)
 8002982:	fba2 2303 	umull	r2, r3, r2, r3
 8002986:	0c9b      	lsrs	r3, r3, #18
 8002988:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68ba      	ldr	r2, [r7, #8]
 800299a:	430a      	orrs	r2, r1
 800299c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	4a6a      	ldr	r2, [pc, #424]	@ (8002b58 <HAL_I2C_Init+0x274>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d802      	bhi.n	80029b8 <HAL_I2C_Init+0xd4>
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	3301      	adds	r3, #1
 80029b6:	e009      	b.n	80029cc <HAL_I2C_Init+0xe8>
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80029be:	fb02 f303 	mul.w	r3, r2, r3
 80029c2:	4a69      	ldr	r2, [pc, #420]	@ (8002b68 <HAL_I2C_Init+0x284>)
 80029c4:	fba2 2303 	umull	r2, r3, r2, r3
 80029c8:	099b      	lsrs	r3, r3, #6
 80029ca:	3301      	adds	r3, #1
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	6812      	ldr	r2, [r2, #0]
 80029d0:	430b      	orrs	r3, r1
 80029d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	69db      	ldr	r3, [r3, #28]
 80029da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80029de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	495c      	ldr	r1, [pc, #368]	@ (8002b58 <HAL_I2C_Init+0x274>)
 80029e8:	428b      	cmp	r3, r1
 80029ea:	d819      	bhi.n	8002a20 <HAL_I2C_Init+0x13c>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	1e59      	subs	r1, r3, #1
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80029fa:	1c59      	adds	r1, r3, #1
 80029fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a00:	400b      	ands	r3, r1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00a      	beq.n	8002a1c <HAL_I2C_Init+0x138>
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1e59      	subs	r1, r3, #1
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a14:	3301      	adds	r3, #1
 8002a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a1a:	e051      	b.n	8002ac0 <HAL_I2C_Init+0x1dc>
 8002a1c:	2304      	movs	r3, #4
 8002a1e:	e04f      	b.n	8002ac0 <HAL_I2C_Init+0x1dc>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d111      	bne.n	8002a4c <HAL_I2C_Init+0x168>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1e58      	subs	r0, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6859      	ldr	r1, [r3, #4]
 8002a30:	460b      	mov	r3, r1
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	440b      	add	r3, r1
 8002a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	bf0c      	ite	eq
 8002a44:	2301      	moveq	r3, #1
 8002a46:	2300      	movne	r3, #0
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	e012      	b.n	8002a72 <HAL_I2C_Init+0x18e>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	1e58      	subs	r0, r3, #1
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6859      	ldr	r1, [r3, #4]
 8002a54:	460b      	mov	r3, r1
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	0099      	lsls	r1, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a62:	3301      	adds	r3, #1
 8002a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	bf0c      	ite	eq
 8002a6c:	2301      	moveq	r3, #1
 8002a6e:	2300      	movne	r3, #0
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d001      	beq.n	8002a7a <HAL_I2C_Init+0x196>
 8002a76:	2301      	movs	r3, #1
 8002a78:	e022      	b.n	8002ac0 <HAL_I2C_Init+0x1dc>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d10e      	bne.n	8002aa0 <HAL_I2C_Init+0x1bc>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	1e58      	subs	r0, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6859      	ldr	r1, [r3, #4]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	440b      	add	r3, r1
 8002a90:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a94:	3301      	adds	r3, #1
 8002a96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002a9e:	e00f      	b.n	8002ac0 <HAL_I2C_Init+0x1dc>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	1e58      	subs	r0, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	0099      	lsls	r1, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002abc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ac0:	6879      	ldr	r1, [r7, #4]
 8002ac2:	6809      	ldr	r1, [r1, #0]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69da      	ldr	r2, [r3, #28]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002aee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6911      	ldr	r1, [r2, #16]
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	68d2      	ldr	r2, [r2, #12]
 8002afa:	4311      	orrs	r1, r2
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	430b      	orrs	r3, r1
 8002b02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695a      	ldr	r2, [r3, #20]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	431a      	orrs	r2, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3710      	adds	r7, #16
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	000186a0 	.word	0x000186a0
 8002b5c:	001e847f 	.word	0x001e847f
 8002b60:	003d08ff 	.word	0x003d08ff
 8002b64:	431bde83 	.word	0x431bde83
 8002b68:	10624dd3 	.word	0x10624dd3

08002b6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b20      	cmp	r3, #32
 8002b80:	d129      	bne.n	8002bd6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2224      	movs	r2, #36	@ 0x24
 8002b86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0201 	bic.w	r2, r2, #1
 8002b98:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0210 	bic.w	r2, r2, #16
 8002ba8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f042 0201 	orr.w	r2, r2, #1
 8002bc8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2220      	movs	r2, #32
 8002bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	e000      	b.n	8002bd8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002bd6:	2302      	movs	r3, #2
  }
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b085      	sub	sp, #20
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
 8002bec:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	d12a      	bne.n	8002c54 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2224      	movs	r2, #36	@ 0x24
 8002c02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0201 	bic.w	r2, r2, #1
 8002c14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002c1e:	89fb      	ldrh	r3, [r7, #14]
 8002c20:	f023 030f 	bic.w	r3, r3, #15
 8002c24:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	b29a      	uxth	r2, r3
 8002c2a:	89fb      	ldrh	r3, [r7, #14]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	89fa      	ldrh	r2, [r7, #14]
 8002c36:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	e000      	b.n	8002c56 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
  }
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e0bf      	b.n	8002df6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d106      	bne.n	8002c90 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff f828 	bl	8001ce0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	699a      	ldr	r2, [r3, #24]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8002ca6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6999      	ldr	r1, [r3, #24]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002cbc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	6899      	ldr	r1, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	4b4a      	ldr	r3, [pc, #296]	@ (8002e00 <HAL_LTDC_Init+0x19c>)
 8002cd8:	400b      	ands	r3, r1
 8002cda:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	041b      	lsls	r3, r3, #16
 8002ce2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6899      	ldr	r1, [r3, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	699a      	ldr	r2, [r3, #24]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68d9      	ldr	r1, [r3, #12]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	4b3e      	ldr	r3, [pc, #248]	@ (8002e00 <HAL_LTDC_Init+0x19c>)
 8002d06:	400b      	ands	r3, r1
 8002d08:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	041b      	lsls	r3, r3, #16
 8002d10:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68d9      	ldr	r1, [r3, #12]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a1a      	ldr	r2, [r3, #32]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	430a      	orrs	r2, r1
 8002d26:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6919      	ldr	r1, [r3, #16]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	4b33      	ldr	r3, [pc, #204]	@ (8002e00 <HAL_LTDC_Init+0x19c>)
 8002d34:	400b      	ands	r3, r1
 8002d36:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3c:	041b      	lsls	r3, r3, #16
 8002d3e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6919      	ldr	r1, [r3, #16]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6959      	ldr	r1, [r3, #20]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4b27      	ldr	r3, [pc, #156]	@ (8002e00 <HAL_LTDC_Init+0x19c>)
 8002d62:	400b      	ands	r3, r1
 8002d64:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d6a:	041b      	lsls	r3, r3, #16
 8002d6c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6959      	ldr	r1, [r3, #20]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	431a      	orrs	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d8a:	021b      	lsls	r3, r3, #8
 8002d8c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8002d94:	041b      	lsls	r3, r3, #16
 8002d96:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8002da6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0206 	orr.w	r2, r2, #6
 8002dd2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699a      	ldr	r2, [r3, #24]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f042 0201 	orr.w	r2, r2, #1
 8002de2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	f000f800 	.word	0xf000f800

08002e04 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002e04:	b5b0      	push	{r4, r5, r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d101      	bne.n	8002e1e <HAL_LTDC_ConfigLayer+0x1a>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e02c      	b.n	8002e78 <HAL_LTDC_ConfigLayer+0x74>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2202      	movs	r2, #2
 8002e2a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2134      	movs	r1, #52	@ 0x34
 8002e34:	fb01 f303 	mul.w	r3, r1, r3
 8002e38:	4413      	add	r3, r2
 8002e3a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	4614      	mov	r4, r2
 8002e42:	461d      	mov	r5, r3
 8002e44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e50:	682b      	ldr	r3, [r5, #0]
 8002e52:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	68b9      	ldr	r1, [r7, #8]
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 f811 	bl	8002e80 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2201      	movs	r2, #1
 8002e64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bdb0      	pop	{r4, r5, r7, pc}

08002e80 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b089      	sub	sp, #36	@ 0x24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	685a      	ldr	r2, [r3, #4]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	0c1b      	lsrs	r3, r3, #16
 8002e98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e9c:	4413      	add	r3, r2
 8002e9e:	041b      	lsls	r3, r3, #16
 8002ea0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	01db      	lsls	r3, r3, #7
 8002eac:	4413      	add	r3, r2
 8002eae:	3384      	adds	r3, #132	@ 0x84
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	68fa      	ldr	r2, [r7, #12]
 8002eb4:	6812      	ldr	r2, [r2, #0]
 8002eb6:	4611      	mov	r1, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	01d2      	lsls	r2, r2, #7
 8002ebc:	440a      	add	r2, r1
 8002ebe:	3284      	adds	r2, #132	@ 0x84
 8002ec0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002ec4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	0c1b      	lsrs	r3, r3, #16
 8002ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002ed6:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002ed8:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4619      	mov	r1, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	01db      	lsls	r3, r3, #7
 8002ee4:	440b      	add	r3, r1
 8002ee6:	3384      	adds	r3, #132	@ 0x84
 8002ee8:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8002eee:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	68da      	ldr	r2, [r3, #12]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002efe:	4413      	add	r3, r2
 8002f00:	041b      	lsls	r3, r3, #16
 8002f02:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	461a      	mov	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	01db      	lsls	r3, r3, #7
 8002f0e:	4413      	add	r3, r2
 8002f10:	3384      	adds	r3, #132	@ 0x84
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	4611      	mov	r1, r2
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	01d2      	lsls	r2, r2, #7
 8002f1e:	440a      	add	r2, r1
 8002f20:	3284      	adds	r2, #132	@ 0x84
 8002f22:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8002f26:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f36:	4413      	add	r3, r2
 8002f38:	1c5a      	adds	r2, r3, #1
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4619      	mov	r1, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	01db      	lsls	r3, r3, #7
 8002f44:	440b      	add	r3, r1
 8002f46:	3384      	adds	r3, #132	@ 0x84
 8002f48:	4619      	mov	r1, r3
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	461a      	mov	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	01db      	lsls	r3, r3, #7
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3384      	adds	r3, #132	@ 0x84
 8002f5e:	691b      	ldr	r3, [r3, #16]
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	4611      	mov	r1, r2
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	01d2      	lsls	r2, r2, #7
 8002f6a:	440a      	add	r2, r1
 8002f6c:	3284      	adds	r2, #132	@ 0x84
 8002f6e:	f023 0307 	bic.w	r3, r3, #7
 8002f72:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	01db      	lsls	r3, r3, #7
 8002f7e:	4413      	add	r3, r2
 8002f80:	3384      	adds	r3, #132	@ 0x84
 8002f82:	461a      	mov	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8002f90:	021b      	lsls	r3, r3, #8
 8002f92:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8002f9a:	041b      	lsls	r3, r3, #16
 8002f9c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	061b      	lsls	r3, r3, #24
 8002fa4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	461a      	mov	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	01db      	lsls	r3, r3, #7
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3384      	adds	r3, #132	@ 0x84
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	01db      	lsls	r3, r3, #7
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3384      	adds	r3, #132	@ 0x84
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4619      	mov	r1, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	01db      	lsls	r3, r3, #7
 8002fe4:	440b      	add	r3, r1
 8002fe6:	3384      	adds	r3, #132	@ 0x84
 8002fe8:	4619      	mov	r1, r3
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	01db      	lsls	r3, r3, #7
 8002ffa:	4413      	add	r3, r2
 8002ffc:	3384      	adds	r3, #132	@ 0x84
 8002ffe:	695b      	ldr	r3, [r3, #20]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	6812      	ldr	r2, [r2, #0]
 8003004:	4611      	mov	r1, r2
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	01d2      	lsls	r2, r2, #7
 800300a:	440a      	add	r2, r1
 800300c:	3284      	adds	r2, #132	@ 0x84
 800300e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003012:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	01db      	lsls	r3, r3, #7
 800301e:	4413      	add	r3, r2
 8003020:	3384      	adds	r3, #132	@ 0x84
 8003022:	461a      	mov	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	461a      	mov	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	01db      	lsls	r3, r3, #7
 8003034:	4413      	add	r3, r2
 8003036:	3384      	adds	r3, #132	@ 0x84
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	4611      	mov	r1, r2
 8003040:	687a      	ldr	r2, [r7, #4]
 8003042:	01d2      	lsls	r2, r2, #7
 8003044:	440a      	add	r2, r1
 8003046:	3284      	adds	r2, #132	@ 0x84
 8003048:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800304c:	f023 0307 	bic.w	r3, r3, #7
 8003050:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	69da      	ldr	r2, [r3, #28]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	68f9      	ldr	r1, [r7, #12]
 800305c:	6809      	ldr	r1, [r1, #0]
 800305e:	4608      	mov	r0, r1
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	01c9      	lsls	r1, r1, #7
 8003064:	4401      	add	r1, r0
 8003066:	3184      	adds	r1, #132	@ 0x84
 8003068:	4313      	orrs	r3, r2
 800306a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	461a      	mov	r2, r3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	01db      	lsls	r3, r3, #7
 8003076:	4413      	add	r3, r2
 8003078:	3384      	adds	r3, #132	@ 0x84
 800307a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	461a      	mov	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	01db      	lsls	r3, r3, #7
 8003086:	4413      	add	r3, r2
 8003088:	3384      	adds	r3, #132	@ 0x84
 800308a:	461a      	mov	r2, r3
 800308c:	2300      	movs	r3, #0
 800308e:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	461a      	mov	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	01db      	lsls	r3, r3, #7
 800309a:	4413      	add	r3, r2
 800309c:	3384      	adds	r3, #132	@ 0x84
 800309e:	461a      	mov	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a4:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d102      	bne.n	80030b4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80030ae:	2304      	movs	r3, #4
 80030b0:	61fb      	str	r3, [r7, #28]
 80030b2:	e01b      	b.n	80030ec <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d102      	bne.n	80030c2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80030bc:	2303      	movs	r3, #3
 80030be:	61fb      	str	r3, [r7, #28]
 80030c0:	e014      	b.n	80030ec <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	d00b      	beq.n	80030e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d007      	beq.n	80030e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80030d6:	2b03      	cmp	r3, #3
 80030d8:	d003      	beq.n	80030e2 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80030de:	2b07      	cmp	r3, #7
 80030e0:	d102      	bne.n	80030e8 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80030e2:	2302      	movs	r3, #2
 80030e4:	61fb      	str	r3, [r7, #28]
 80030e6:	e001      	b.n	80030ec <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80030e8:	2301      	movs	r3, #1
 80030ea:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	01db      	lsls	r3, r3, #7
 80030f6:	4413      	add	r3, r2
 80030f8:	3384      	adds	r3, #132	@ 0x84
 80030fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	4611      	mov	r1, r2
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	01d2      	lsls	r2, r2, #7
 8003106:	440a      	add	r2, r1
 8003108:	3284      	adds	r2, #132	@ 0x84
 800310a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800310e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003114:	69fa      	ldr	r2, [r7, #28]
 8003116:	fb02 f303 	mul.w	r3, r2, r3
 800311a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	6859      	ldr	r1, [r3, #4]
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	1acb      	subs	r3, r1, r3
 8003126:	69f9      	ldr	r1, [r7, #28]
 8003128:	fb01 f303 	mul.w	r3, r1, r3
 800312c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800312e:	68f9      	ldr	r1, [r7, #12]
 8003130:	6809      	ldr	r1, [r1, #0]
 8003132:	4608      	mov	r0, r1
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	01c9      	lsls	r1, r1, #7
 8003138:	4401      	add	r1, r0
 800313a:	3184      	adds	r1, #132	@ 0x84
 800313c:	4313      	orrs	r3, r2
 800313e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	461a      	mov	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	01db      	lsls	r3, r3, #7
 800314a:	4413      	add	r3, r2
 800314c:	3384      	adds	r3, #132	@ 0x84
 800314e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	6812      	ldr	r2, [r2, #0]
 8003154:	4611      	mov	r1, r2
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	01d2      	lsls	r2, r2, #7
 800315a:	440a      	add	r2, r1
 800315c:	3284      	adds	r2, #132	@ 0x84
 800315e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003162:	f023 0307 	bic.w	r3, r3, #7
 8003166:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	461a      	mov	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	01db      	lsls	r3, r3, #7
 8003172:	4413      	add	r3, r2
 8003174:	3384      	adds	r3, #132	@ 0x84
 8003176:	461a      	mov	r2, r3
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317c:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	461a      	mov	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	01db      	lsls	r3, r3, #7
 8003188:	4413      	add	r3, r2
 800318a:	3384      	adds	r3, #132	@ 0x84
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	4611      	mov	r1, r2
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	01d2      	lsls	r2, r2, #7
 8003198:	440a      	add	r2, r1
 800319a:	3284      	adds	r2, #132	@ 0x84
 800319c:	f043 0301 	orr.w	r3, r3, #1
 80031a0:	6013      	str	r3, [r2, #0]
}
 80031a2:	bf00      	nop
 80031a4:	3724      	adds	r7, #36	@ 0x24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
	...

080031b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d101      	bne.n	80031c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e267      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d075      	beq.n	80032ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031ce:	4b88      	ldr	r3, [pc, #544]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 030c 	and.w	r3, r3, #12
 80031d6:	2b04      	cmp	r3, #4
 80031d8:	d00c      	beq.n	80031f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031da:	4b85      	ldr	r3, [pc, #532]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80031e2:	2b08      	cmp	r3, #8
 80031e4:	d112      	bne.n	800320c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031e6:	4b82      	ldr	r3, [pc, #520]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80031f2:	d10b      	bne.n	800320c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f4:	4b7e      	ldr	r3, [pc, #504]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d05b      	beq.n	80032b8 <HAL_RCC_OscConfig+0x108>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d157      	bne.n	80032b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e242      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003214:	d106      	bne.n	8003224 <HAL_RCC_OscConfig+0x74>
 8003216:	4b76      	ldr	r3, [pc, #472]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a75      	ldr	r2, [pc, #468]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 800321c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	e01d      	b.n	8003260 <HAL_RCC_OscConfig+0xb0>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800322c:	d10c      	bne.n	8003248 <HAL_RCC_OscConfig+0x98>
 800322e:	4b70      	ldr	r3, [pc, #448]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a6f      	ldr	r2, [pc, #444]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 8003234:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	4b6d      	ldr	r3, [pc, #436]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a6c      	ldr	r2, [pc, #432]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 8003240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	e00b      	b.n	8003260 <HAL_RCC_OscConfig+0xb0>
 8003248:	4b69      	ldr	r3, [pc, #420]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a68      	ldr	r2, [pc, #416]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 800324e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	4b66      	ldr	r3, [pc, #408]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a65      	ldr	r2, [pc, #404]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 800325a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800325e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d013      	beq.n	8003290 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003268:	f7ff f828 	bl	80022bc <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003270:	f7ff f824 	bl	80022bc <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b64      	cmp	r3, #100	@ 0x64
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e207      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003282:	4b5b      	ldr	r3, [pc, #364]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d0f0      	beq.n	8003270 <HAL_RCC_OscConfig+0xc0>
 800328e:	e014      	b.n	80032ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003290:	f7ff f814 	bl	80022bc <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003298:	f7ff f810 	bl	80022bc <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b64      	cmp	r3, #100	@ 0x64
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e1f3      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032aa:	4b51      	ldr	r3, [pc, #324]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0xe8>
 80032b6:	e000      	b.n	80032ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d063      	beq.n	800338e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032c6:	4b4a      	ldr	r3, [pc, #296]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00b      	beq.n	80032ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032d2:	4b47      	ldr	r3, [pc, #284]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80032da:	2b08      	cmp	r3, #8
 80032dc:	d11c      	bne.n	8003318 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032de:	4b44      	ldr	r3, [pc, #272]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d116      	bne.n	8003318 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ea:	4b41      	ldr	r3, [pc, #260]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d005      	beq.n	8003302 <HAL_RCC_OscConfig+0x152>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d001      	beq.n	8003302 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e1c7      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003302:	4b3b      	ldr	r3, [pc, #236]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	00db      	lsls	r3, r3, #3
 8003310:	4937      	ldr	r1, [pc, #220]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 8003312:	4313      	orrs	r3, r2
 8003314:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003316:	e03a      	b.n	800338e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d020      	beq.n	8003362 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003320:	4b34      	ldr	r3, [pc, #208]	@ (80033f4 <HAL_RCC_OscConfig+0x244>)
 8003322:	2201      	movs	r2, #1
 8003324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003326:	f7fe ffc9 	bl	80022bc <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800332e:	f7fe ffc5 	bl	80022bc <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e1a8      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003340:	4b2b      	ldr	r3, [pc, #172]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0f0      	beq.n	800332e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334c:	4b28      	ldr	r3, [pc, #160]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4925      	ldr	r1, [pc, #148]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 800335c:	4313      	orrs	r3, r2
 800335e:	600b      	str	r3, [r1, #0]
 8003360:	e015      	b.n	800338e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003362:	4b24      	ldr	r3, [pc, #144]	@ (80033f4 <HAL_RCC_OscConfig+0x244>)
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fe ffa8 	bl	80022bc <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800336e:	e008      	b.n	8003382 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003370:	f7fe ffa4 	bl	80022bc <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b02      	cmp	r3, #2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e187      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003382:	4b1b      	ldr	r3, [pc, #108]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1f0      	bne.n	8003370 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d036      	beq.n	8003408 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d016      	beq.n	80033d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a2:	4b15      	ldr	r3, [pc, #84]	@ (80033f8 <HAL_RCC_OscConfig+0x248>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033a8:	f7fe ff88 	bl	80022bc <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b0:	f7fe ff84 	bl	80022bc <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e167      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c2:	4b0b      	ldr	r3, [pc, #44]	@ (80033f0 <HAL_RCC_OscConfig+0x240>)
 80033c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033c6:	f003 0302 	and.w	r3, r3, #2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d0f0      	beq.n	80033b0 <HAL_RCC_OscConfig+0x200>
 80033ce:	e01b      	b.n	8003408 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d0:	4b09      	ldr	r3, [pc, #36]	@ (80033f8 <HAL_RCC_OscConfig+0x248>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033d6:	f7fe ff71 	bl	80022bc <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033dc:	e00e      	b.n	80033fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033de:	f7fe ff6d 	bl	80022bc <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d907      	bls.n	80033fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e150      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
 80033f0:	40023800 	.word	0x40023800
 80033f4:	42470000 	.word	0x42470000
 80033f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033fc:	4b88      	ldr	r3, [pc, #544]	@ (8003620 <HAL_RCC_OscConfig+0x470>)
 80033fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003400:	f003 0302 	and.w	r3, r3, #2
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1ea      	bne.n	80033de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 8097 	beq.w	8003544 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003416:	2300      	movs	r3, #0
 8003418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800341a:	4b81      	ldr	r3, [pc, #516]	@ (8003620 <HAL_RCC_OscConfig+0x470>)
 800341c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10f      	bne.n	8003446 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003426:	2300      	movs	r3, #0
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	4b7d      	ldr	r3, [pc, #500]	@ (8003620 <HAL_RCC_OscConfig+0x470>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	4a7c      	ldr	r2, [pc, #496]	@ (8003620 <HAL_RCC_OscConfig+0x470>)
 8003430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003434:	6413      	str	r3, [r2, #64]	@ 0x40
 8003436:	4b7a      	ldr	r3, [pc, #488]	@ (8003620 <HAL_RCC_OscConfig+0x470>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003442:	2301      	movs	r3, #1
 8003444:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003446:	4b77      	ldr	r3, [pc, #476]	@ (8003624 <HAL_RCC_OscConfig+0x474>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344e:	2b00      	cmp	r3, #0
 8003450:	d118      	bne.n	8003484 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003452:	4b74      	ldr	r3, [pc, #464]	@ (8003624 <HAL_RCC_OscConfig+0x474>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a73      	ldr	r2, [pc, #460]	@ (8003624 <HAL_RCC_OscConfig+0x474>)
 8003458:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800345c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800345e:	f7fe ff2d 	bl	80022bc <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003466:	f7fe ff29 	bl	80022bc <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e10c      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003478:	4b6a      	ldr	r3, [pc, #424]	@ (8003624 <HAL_RCC_OscConfig+0x474>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d106      	bne.n	800349a <HAL_RCC_OscConfig+0x2ea>
 800348c:	4b64      	ldr	r3, [pc, #400]	@ (8003620 <HAL_RCC_OscConfig+0x470>)
 800348e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003490:	4a63      	ldr	r2, [pc, #396]	@ (8003620 <HAL_RCC_OscConfig+0x470>)
 8003492:	f043 0301 	orr.w	r3, r3, #1
 8003496:	6713      	str	r3, [r2, #112]	@ 0x70
 8003498:	e01c      	b.n	80034d4 <HAL_RCC_OscConfig+0x324>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b05      	cmp	r3, #5
 80034a0:	d10c      	bne.n	80034bc <HAL_RCC_OscConfig+0x30c>
 80034a2:	4b5f      	ldr	r3, [pc, #380]	@ (8003620 <HAL_RCC_OscConfig+0x470>)
 80034a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a6:	4a5e      	ldr	r2, [pc, #376]	@ (8003620 <HAL_RCC_OscConfig+0x470>)
 80034a8:	f043 0304 	orr.w	r3, r3, #4
 80034ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ae:	4b5c      	ldr	r3, [pc, #368]	@ (8003620 <HAL_RCC_OscConfig+0x470>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034b2:	4a5b      	ldr	r2, [pc, #364]	@ (8003620 <HAL_RCC_OscConfig+0x470>)
 80034b4:	f043 0301 	orr.w	r3, r3, #1
 80034b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80034ba:	e00b      	b.n	80034d4 <HAL_RCC_OscConfig+0x324>
 80034bc:	4b58      	ldr	r3, [pc, #352]	@ (8003620 <HAL_RCC_OscConfig+0x470>)
 80034be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034c0:	4a57      	ldr	r2, [pc, #348]	@ (8003620 <HAL_RCC_OscConfig+0x470>)
 80034c2:	f023 0301 	bic.w	r3, r3, #1
 80034c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80034c8:	4b55      	ldr	r3, [pc, #340]	@ (8003620 <HAL_RCC_OscConfig+0x470>)
 80034ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034cc:	4a54      	ldr	r2, [pc, #336]	@ (8003620 <HAL_RCC_OscConfig+0x470>)
 80034ce:	f023 0304 	bic.w	r3, r3, #4
 80034d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d015      	beq.n	8003508 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034dc:	f7fe feee 	bl	80022bc <HAL_GetTick>
 80034e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e2:	e00a      	b.n	80034fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e4:	f7fe feea 	bl	80022bc <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e0cb      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fa:	4b49      	ldr	r3, [pc, #292]	@ (8003620 <HAL_RCC_OscConfig+0x470>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0ee      	beq.n	80034e4 <HAL_RCC_OscConfig+0x334>
 8003506:	e014      	b.n	8003532 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003508:	f7fe fed8 	bl	80022bc <HAL_GetTick>
 800350c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800350e:	e00a      	b.n	8003526 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003510:	f7fe fed4 	bl	80022bc <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800351e:	4293      	cmp	r3, r2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e0b5      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003526:	4b3e      	ldr	r3, [pc, #248]	@ (8003620 <HAL_RCC_OscConfig+0x470>)
 8003528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1ee      	bne.n	8003510 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003532:	7dfb      	ldrb	r3, [r7, #23]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d105      	bne.n	8003544 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003538:	4b39      	ldr	r3, [pc, #228]	@ (8003620 <HAL_RCC_OscConfig+0x470>)
 800353a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800353c:	4a38      	ldr	r2, [pc, #224]	@ (8003620 <HAL_RCC_OscConfig+0x470>)
 800353e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003542:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 80a1 	beq.w	8003690 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800354e:	4b34      	ldr	r3, [pc, #208]	@ (8003620 <HAL_RCC_OscConfig+0x470>)
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 030c 	and.w	r3, r3, #12
 8003556:	2b08      	cmp	r3, #8
 8003558:	d05c      	beq.n	8003614 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d141      	bne.n	80035e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003562:	4b31      	ldr	r3, [pc, #196]	@ (8003628 <HAL_RCC_OscConfig+0x478>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003568:	f7fe fea8 	bl	80022bc <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800356e:	e008      	b.n	8003582 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003570:	f7fe fea4 	bl	80022bc <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e087      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003582:	4b27      	ldr	r3, [pc, #156]	@ (8003620 <HAL_RCC_OscConfig+0x470>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f0      	bne.n	8003570 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69da      	ldr	r2, [r3, #28]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800359c:	019b      	lsls	r3, r3, #6
 800359e:	431a      	orrs	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a4:	085b      	lsrs	r3, r3, #1
 80035a6:	3b01      	subs	r3, #1
 80035a8:	041b      	lsls	r3, r3, #16
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b0:	061b      	lsls	r3, r3, #24
 80035b2:	491b      	ldr	r1, [pc, #108]	@ (8003620 <HAL_RCC_OscConfig+0x470>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035b8:	4b1b      	ldr	r3, [pc, #108]	@ (8003628 <HAL_RCC_OscConfig+0x478>)
 80035ba:	2201      	movs	r2, #1
 80035bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035be:	f7fe fe7d 	bl	80022bc <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035c6:	f7fe fe79 	bl	80022bc <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e05c      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d8:	4b11      	ldr	r3, [pc, #68]	@ (8003620 <HAL_RCC_OscConfig+0x470>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0f0      	beq.n	80035c6 <HAL_RCC_OscConfig+0x416>
 80035e4:	e054      	b.n	8003690 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035e6:	4b10      	ldr	r3, [pc, #64]	@ (8003628 <HAL_RCC_OscConfig+0x478>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ec:	f7fe fe66 	bl	80022bc <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035f4:	f7fe fe62 	bl	80022bc <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e045      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003606:	4b06      	ldr	r3, [pc, #24]	@ (8003620 <HAL_RCC_OscConfig+0x470>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f0      	bne.n	80035f4 <HAL_RCC_OscConfig+0x444>
 8003612:	e03d      	b.n	8003690 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d107      	bne.n	800362c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e038      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
 8003620:	40023800 	.word	0x40023800
 8003624:	40007000 	.word	0x40007000
 8003628:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800362c:	4b1b      	ldr	r3, [pc, #108]	@ (800369c <HAL_RCC_OscConfig+0x4ec>)
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	699b      	ldr	r3, [r3, #24]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d028      	beq.n	800368c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003644:	429a      	cmp	r2, r3
 8003646:	d121      	bne.n	800368c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003652:	429a      	cmp	r2, r3
 8003654:	d11a      	bne.n	800368c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800365c:	4013      	ands	r3, r2
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003662:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003664:	4293      	cmp	r3, r2
 8003666:	d111      	bne.n	800368c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003672:	085b      	lsrs	r3, r3, #1
 8003674:	3b01      	subs	r3, #1
 8003676:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003678:	429a      	cmp	r2, r3
 800367a:	d107      	bne.n	800368c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003686:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003688:	429a      	cmp	r2, r3
 800368a:	d001      	beq.n	8003690 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40023800 	.word	0x40023800

080036a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0cc      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036b4:	4b68      	ldr	r3, [pc, #416]	@ (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 030f 	and.w	r3, r3, #15
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d90c      	bls.n	80036dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c2:	4b65      	ldr	r3, [pc, #404]	@ (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ca:	4b63      	ldr	r3, [pc, #396]	@ (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d001      	beq.n	80036dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0b8      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d020      	beq.n	800372a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f4:	4b59      	ldr	r3, [pc, #356]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	4a58      	ldr	r2, [pc, #352]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80036fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800370c:	4b53      	ldr	r3, [pc, #332]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4a52      	ldr	r2, [pc, #328]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003716:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003718:	4b50      	ldr	r3, [pc, #320]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	494d      	ldr	r1, [pc, #308]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	4313      	orrs	r3, r2
 8003728:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d044      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d107      	bne.n	800374e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373e:	4b47      	ldr	r3, [pc, #284]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d119      	bne.n	800377e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e07f      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d003      	beq.n	800375e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800375a:	2b03      	cmp	r3, #3
 800375c:	d107      	bne.n	800376e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375e:	4b3f      	ldr	r3, [pc, #252]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d109      	bne.n	800377e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e06f      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376e:	4b3b      	ldr	r3, [pc, #236]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e067      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800377e:	4b37      	ldr	r3, [pc, #220]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f023 0203 	bic.w	r2, r3, #3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	4934      	ldr	r1, [pc, #208]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	4313      	orrs	r3, r2
 800378e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003790:	f7fe fd94 	bl	80022bc <HAL_GetTick>
 8003794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003796:	e00a      	b.n	80037ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003798:	f7fe fd90 	bl	80022bc <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e04f      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ae:	4b2b      	ldr	r3, [pc, #172]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 020c 	and.w	r2, r3, #12
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	429a      	cmp	r2, r3
 80037be:	d1eb      	bne.n	8003798 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037c0:	4b25      	ldr	r3, [pc, #148]	@ (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d20c      	bcs.n	80037e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ce:	4b22      	ldr	r3, [pc, #136]	@ (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d6:	4b20      	ldr	r3, [pc, #128]	@ (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e032      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f4:	4b19      	ldr	r3, [pc, #100]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	4916      	ldr	r1, [pc, #88]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d009      	beq.n	8003826 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003812:	4b12      	ldr	r3, [pc, #72]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	490e      	ldr	r1, [pc, #56]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	4313      	orrs	r3, r2
 8003824:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003826:	f000 f821 	bl	800386c <HAL_RCC_GetSysClockFreq>
 800382a:	4602      	mov	r2, r0
 800382c:	4b0b      	ldr	r3, [pc, #44]	@ (800385c <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	091b      	lsrs	r3, r3, #4
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	490a      	ldr	r1, [pc, #40]	@ (8003860 <HAL_RCC_ClockConfig+0x1c0>)
 8003838:	5ccb      	ldrb	r3, [r1, r3]
 800383a:	fa22 f303 	lsr.w	r3, r2, r3
 800383e:	4a09      	ldr	r2, [pc, #36]	@ (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003842:	4b09      	ldr	r3, [pc, #36]	@ (8003868 <HAL_RCC_ClockConfig+0x1c8>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f7fe fcf4 	bl	8002234 <HAL_InitTick>

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40023c00 	.word	0x40023c00
 800385c:	40023800 	.word	0x40023800
 8003860:	08005e98 	.word	0x08005e98
 8003864:	20000000 	.word	0x20000000
 8003868:	20000004 	.word	0x20000004

0800386c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800386c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003870:	b094      	sub	sp, #80	@ 0x50
 8003872:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003874:	2300      	movs	r3, #0
 8003876:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800387c:	2300      	movs	r3, #0
 800387e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003884:	4b79      	ldr	r3, [pc, #484]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x200>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	f003 030c 	and.w	r3, r3, #12
 800388c:	2b08      	cmp	r3, #8
 800388e:	d00d      	beq.n	80038ac <HAL_RCC_GetSysClockFreq+0x40>
 8003890:	2b08      	cmp	r3, #8
 8003892:	f200 80e1 	bhi.w	8003a58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003896:	2b00      	cmp	r3, #0
 8003898:	d002      	beq.n	80038a0 <HAL_RCC_GetSysClockFreq+0x34>
 800389a:	2b04      	cmp	r3, #4
 800389c:	d003      	beq.n	80038a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800389e:	e0db      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038a0:	4b73      	ldr	r3, [pc, #460]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0x204>)
 80038a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038a4:	e0db      	b.n	8003a5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038a6:	4b73      	ldr	r3, [pc, #460]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x208>)
 80038a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80038aa:	e0d8      	b.n	8003a5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038ac:	4b6f      	ldr	r3, [pc, #444]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x200>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80038b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038b6:	4b6d      	ldr	r3, [pc, #436]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x200>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d063      	beq.n	800398a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038c2:	4b6a      	ldr	r3, [pc, #424]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x200>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	099b      	lsrs	r3, r3, #6
 80038c8:	2200      	movs	r2, #0
 80038ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80038cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80038ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80038d6:	2300      	movs	r3, #0
 80038d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80038da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80038de:	4622      	mov	r2, r4
 80038e0:	462b      	mov	r3, r5
 80038e2:	f04f 0000 	mov.w	r0, #0
 80038e6:	f04f 0100 	mov.w	r1, #0
 80038ea:	0159      	lsls	r1, r3, #5
 80038ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80038f0:	0150      	lsls	r0, r2, #5
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	4621      	mov	r1, r4
 80038f8:	1a51      	subs	r1, r2, r1
 80038fa:	6139      	str	r1, [r7, #16]
 80038fc:	4629      	mov	r1, r5
 80038fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003910:	4659      	mov	r1, fp
 8003912:	018b      	lsls	r3, r1, #6
 8003914:	4651      	mov	r1, sl
 8003916:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800391a:	4651      	mov	r1, sl
 800391c:	018a      	lsls	r2, r1, #6
 800391e:	4651      	mov	r1, sl
 8003920:	ebb2 0801 	subs.w	r8, r2, r1
 8003924:	4659      	mov	r1, fp
 8003926:	eb63 0901 	sbc.w	r9, r3, r1
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	f04f 0300 	mov.w	r3, #0
 8003932:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003936:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800393a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800393e:	4690      	mov	r8, r2
 8003940:	4699      	mov	r9, r3
 8003942:	4623      	mov	r3, r4
 8003944:	eb18 0303 	adds.w	r3, r8, r3
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	462b      	mov	r3, r5
 800394c:	eb49 0303 	adc.w	r3, r9, r3
 8003950:	60fb      	str	r3, [r7, #12]
 8003952:	f04f 0200 	mov.w	r2, #0
 8003956:	f04f 0300 	mov.w	r3, #0
 800395a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800395e:	4629      	mov	r1, r5
 8003960:	024b      	lsls	r3, r1, #9
 8003962:	4621      	mov	r1, r4
 8003964:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003968:	4621      	mov	r1, r4
 800396a:	024a      	lsls	r2, r1, #9
 800396c:	4610      	mov	r0, r2
 800396e:	4619      	mov	r1, r3
 8003970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003972:	2200      	movs	r2, #0
 8003974:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003976:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003978:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800397c:	f7fc fc90 	bl	80002a0 <__aeabi_uldivmod>
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	4613      	mov	r3, r2
 8003986:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003988:	e058      	b.n	8003a3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800398a:	4b38      	ldr	r3, [pc, #224]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x200>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	099b      	lsrs	r3, r3, #6
 8003990:	2200      	movs	r2, #0
 8003992:	4618      	mov	r0, r3
 8003994:	4611      	mov	r1, r2
 8003996:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800399a:	623b      	str	r3, [r7, #32]
 800399c:	2300      	movs	r3, #0
 800399e:	627b      	str	r3, [r7, #36]	@ 0x24
 80039a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039a4:	4642      	mov	r2, r8
 80039a6:	464b      	mov	r3, r9
 80039a8:	f04f 0000 	mov.w	r0, #0
 80039ac:	f04f 0100 	mov.w	r1, #0
 80039b0:	0159      	lsls	r1, r3, #5
 80039b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039b6:	0150      	lsls	r0, r2, #5
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4641      	mov	r1, r8
 80039be:	ebb2 0a01 	subs.w	sl, r2, r1
 80039c2:	4649      	mov	r1, r9
 80039c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80039dc:	ebb2 040a 	subs.w	r4, r2, sl
 80039e0:	eb63 050b 	sbc.w	r5, r3, fp
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	f04f 0300 	mov.w	r3, #0
 80039ec:	00eb      	lsls	r3, r5, #3
 80039ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039f2:	00e2      	lsls	r2, r4, #3
 80039f4:	4614      	mov	r4, r2
 80039f6:	461d      	mov	r5, r3
 80039f8:	4643      	mov	r3, r8
 80039fa:	18e3      	adds	r3, r4, r3
 80039fc:	603b      	str	r3, [r7, #0]
 80039fe:	464b      	mov	r3, r9
 8003a00:	eb45 0303 	adc.w	r3, r5, r3
 8003a04:	607b      	str	r3, [r7, #4]
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a12:	4629      	mov	r1, r5
 8003a14:	028b      	lsls	r3, r1, #10
 8003a16:	4621      	mov	r1, r4
 8003a18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a1c:	4621      	mov	r1, r4
 8003a1e:	028a      	lsls	r2, r1, #10
 8003a20:	4610      	mov	r0, r2
 8003a22:	4619      	mov	r1, r3
 8003a24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a26:	2200      	movs	r2, #0
 8003a28:	61bb      	str	r3, [r7, #24]
 8003a2a:	61fa      	str	r2, [r7, #28]
 8003a2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a30:	f7fc fc36 	bl	80002a0 <__aeabi_uldivmod>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4613      	mov	r3, r2
 8003a3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x200>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	0c1b      	lsrs	r3, r3, #16
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	3301      	adds	r3, #1
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003a4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a56:	e002      	b.n	8003a5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a58:	4b05      	ldr	r3, [pc, #20]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3750      	adds	r7, #80	@ 0x50
 8003a64:	46bd      	mov	sp, r7
 8003a66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	00f42400 	.word	0x00f42400
 8003a74:	007a1200 	.word	0x007a1200

08003a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a7c:	4b03      	ldr	r3, [pc, #12]	@ (8003a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	20000000 	.word	0x20000000

08003a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a94:	f7ff fff0 	bl	8003a78 <HAL_RCC_GetHCLKFreq>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	4b05      	ldr	r3, [pc, #20]	@ (8003ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	0a9b      	lsrs	r3, r3, #10
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	4903      	ldr	r1, [pc, #12]	@ (8003ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aa6:	5ccb      	ldrb	r3, [r1, r3]
 8003aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	08005ea8 	.word	0x08005ea8

08003ab8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10b      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d105      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d075      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003aec:	4b91      	ldr	r3, [pc, #580]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003af2:	f7fe fbe3 	bl	80022bc <HAL_GetTick>
 8003af6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003af8:	e008      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003afa:	f7fe fbdf 	bl	80022bc <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e189      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b0c:	4b8a      	ldr	r3, [pc, #552]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d1f0      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d009      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	019a      	lsls	r2, r3, #6
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	071b      	lsls	r3, r3, #28
 8003b30:	4981      	ldr	r1, [pc, #516]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d01f      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b44:	4b7c      	ldr	r3, [pc, #496]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b4a:	0f1b      	lsrs	r3, r3, #28
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	019a      	lsls	r2, r3, #6
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	061b      	lsls	r3, r3, #24
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	071b      	lsls	r3, r3, #28
 8003b64:	4974      	ldr	r1, [pc, #464]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b6c:	4b72      	ldr	r3, [pc, #456]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003b72:	f023 021f 	bic.w	r2, r3, #31
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	3b01      	subs	r3, #1
 8003b7c:	496e      	ldr	r1, [pc, #440]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00d      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	019a      	lsls	r2, r3, #6
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	061b      	lsls	r3, r3, #24
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	071b      	lsls	r3, r3, #28
 8003ba4:	4964      	ldr	r1, [pc, #400]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003bac:	4b61      	ldr	r3, [pc, #388]	@ (8003d34 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8003bae:	2201      	movs	r2, #1
 8003bb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bb2:	f7fe fb83 	bl	80022bc <HAL_GetTick>
 8003bb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bb8:	e008      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bba:	f7fe fb7f 	bl	80022bc <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e129      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bcc:	4b5a      	ldr	r3, [pc, #360]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0f0      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d105      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d079      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003bf0:	4b52      	ldr	r3, [pc, #328]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bf6:	f7fe fb61 	bl	80022bc <HAL_GetTick>
 8003bfa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bfe:	f7fe fb5d 	bl	80022bc <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e107      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c10:	4b49      	ldr	r3, [pc, #292]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c1c:	d0ef      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0304 	and.w	r3, r3, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d020      	beq.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c2a:	4b43      	ldr	r3, [pc, #268]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c30:	0f1b      	lsrs	r3, r3, #28
 8003c32:	f003 0307 	and.w	r3, r3, #7
 8003c36:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	019a      	lsls	r2, r3, #6
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	061b      	lsls	r3, r3, #24
 8003c44:	431a      	orrs	r2, r3
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	071b      	lsls	r3, r3, #28
 8003c4a:	493b      	ldr	r1, [pc, #236]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c52:	4b39      	ldr	r3, [pc, #228]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c58:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	3b01      	subs	r3, #1
 8003c62:	021b      	lsls	r3, r3, #8
 8003c64:	4934      	ldr	r1, [pc, #208]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0308 	and.w	r3, r3, #8
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d01e      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c78:	4b2f      	ldr	r3, [pc, #188]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c7e:	0e1b      	lsrs	r3, r3, #24
 8003c80:	f003 030f 	and.w	r3, r3, #15
 8003c84:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	691b      	ldr	r3, [r3, #16]
 8003c8a:	019a      	lsls	r2, r3, #6
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	061b      	lsls	r3, r3, #24
 8003c90:	431a      	orrs	r2, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	071b      	lsls	r3, r3, #28
 8003c98:	4927      	ldr	r1, [pc, #156]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ca0:	4b25      	ldr	r3, [pc, #148]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ca2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ca6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cae:	4922      	ldr	r1, [pc, #136]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cb6:	4b21      	ldr	r3, [pc, #132]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cbc:	f7fe fafe 	bl	80022bc <HAL_GetTick>
 8003cc0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cc4:	f7fe fafa 	bl	80022bc <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e0a4      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cd6:	4b18      	ldr	r3, [pc, #96]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ce2:	d1ef      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f000 808b 	beq.w	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60fb      	str	r3, [r7, #12]
 8003cf6:	4b10      	ldr	r3, [pc, #64]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cfa:	4a0f      	ldr	r2, [pc, #60]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003cfc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d00:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d02:	4b0d      	ldr	r3, [pc, #52]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a0b      	ldr	r2, [pc, #44]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8003d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d18:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d1a:	f7fe facf 	bl	80022bc <HAL_GetTick>
 8003d1e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003d20:	e010      	b.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d22:	f7fe facb 	bl	80022bc <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	d909      	bls.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e075      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8003d34:	42470068 	.word	0x42470068
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	42470070 	.word	0x42470070
 8003d40:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003d44:	4b38      	ldr	r3, [pc, #224]	@ (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0e8      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d50:	4b36      	ldr	r3, [pc, #216]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d58:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d02f      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d028      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d76:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d78:	4b2d      	ldr	r3, [pc, #180]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d7e:	4b2c      	ldr	r3, [pc, #176]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003d84:	4a29      	ldr	r2, [pc, #164]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003d8a:	4b28      	ldr	r3, [pc, #160]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d114      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003d96:	f7fe fa91 	bl	80022bc <HAL_GetTick>
 8003d9a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9c:	e00a      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9e:	f7fe fa8d 	bl	80022bc <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e035      	b.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db4:	4b1d      	ldr	r3, [pc, #116]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003db6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0ee      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dc8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dcc:	d10d      	bne.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003dce:	4b17      	ldr	r3, [pc, #92]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dda:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003dde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003de2:	4912      	ldr	r1, [pc, #72]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	608b      	str	r3, [r1, #8]
 8003de8:	e005      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8003dea:	4b10      	ldr	r3, [pc, #64]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	4a0f      	ldr	r2, [pc, #60]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003df0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003df4:	6093      	str	r3, [r2, #8]
 8003df6:	4b0d      	ldr	r3, [pc, #52]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003df8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e02:	490a      	ldr	r1, [pc, #40]	@ (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0310 	and.w	r3, r3, #16
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d004      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8003e1a:	4b06      	ldr	r3, [pc, #24]	@ (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8003e1c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3718      	adds	r7, #24
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40007000 	.word	0x40007000
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	42470e40 	.word	0x42470e40
 8003e34:	424711e0 	.word	0x424711e0

08003e38 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b082      	sub	sp, #8
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e01c      	b.n	8003e84 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	795b      	ldrb	r3, [r3, #5]
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d105      	bne.n	8003e60 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fe f868 	bl	8001f30 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f042 0204 	orr.w	r2, r2, #4
 8003e74:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e96:	2300      	movs	r3, #0
 8003e98:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	791b      	ldrb	r3, [r3, #4]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d101      	bne.n	8003ea6 <HAL_RNG_GenerateRandomNumber+0x1a>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e044      	b.n	8003f30 <HAL_RNG_GenerateRandomNumber+0xa4>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	795b      	ldrb	r3, [r3, #5]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d133      	bne.n	8003f1e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2202      	movs	r2, #2
 8003eba:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ebc:	f7fe f9fe 	bl	80022bc <HAL_GetTick>
 8003ec0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003ec2:	e018      	b.n	8003ef6 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8003ec4:	f7fe f9fa 	bl	80022bc <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d911      	bls.n	8003ef6 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d00a      	beq.n	8003ef6 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2202      	movs	r2, #2
 8003eea:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e01c      	b.n	8003f30 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d1df      	bne.n	8003ec4 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689a      	ldr	r2, [r3, #8]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	715a      	strb	r2, [r3, #5]
 8003f1c:	e004      	b.n	8003f28 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2204      	movs	r2, #4
 8003f22:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	711a      	strb	r2, [r3, #4]

  return status;
 8003f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3710      	adds	r7, #16
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}

08003f38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e07b      	b.n	8004042 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d108      	bne.n	8003f64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f5a:	d009      	beq.n	8003f70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	61da      	str	r2, [r3, #28]
 8003f62:	e005      	b.n	8003f70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	f7fd fff2 	bl	8001f74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2202      	movs	r2, #2
 8003f94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fa6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	691b      	ldr	r3, [r3, #16]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	69db      	ldr	r3, [r3, #28]
 8003fe6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a1b      	ldr	r3, [r3, #32]
 8003ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff4:	ea42 0103 	orr.w	r1, r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	0c1b      	lsrs	r3, r3, #16
 800400e:	f003 0104 	and.w	r1, r3, #4
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004016:	f003 0210 	and.w	r2, r3, #16
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	69da      	ldr	r2, [r3, #28]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004030:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b082      	sub	sp, #8
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e041      	b.n	80040e0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004062:	b2db      	uxtb	r3, r3
 8004064:	2b00      	cmp	r3, #0
 8004066:	d106      	bne.n	8004076 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7fd ffc7 	bl	8002004 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2202      	movs	r2, #2
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3304      	adds	r3, #4
 8004086:	4619      	mov	r1, r3
 8004088:	4610      	mov	r0, r2
 800408a:	f000 fa7d 	bl	8004588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2201      	movs	r2, #1
 80040ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2201      	movs	r2, #1
 80040da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d001      	beq.n	8004100 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e04e      	b.n	800419e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2202      	movs	r2, #2
 8004104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68da      	ldr	r2, [r3, #12]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a23      	ldr	r2, [pc, #140]	@ (80041ac <HAL_TIM_Base_Start_IT+0xc4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d022      	beq.n	8004168 <HAL_TIM_Base_Start_IT+0x80>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800412a:	d01d      	beq.n	8004168 <HAL_TIM_Base_Start_IT+0x80>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a1f      	ldr	r2, [pc, #124]	@ (80041b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d018      	beq.n	8004168 <HAL_TIM_Base_Start_IT+0x80>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a1e      	ldr	r2, [pc, #120]	@ (80041b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d013      	beq.n	8004168 <HAL_TIM_Base_Start_IT+0x80>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a1c      	ldr	r2, [pc, #112]	@ (80041b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d00e      	beq.n	8004168 <HAL_TIM_Base_Start_IT+0x80>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4a1b      	ldr	r2, [pc, #108]	@ (80041bc <HAL_TIM_Base_Start_IT+0xd4>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d009      	beq.n	8004168 <HAL_TIM_Base_Start_IT+0x80>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a19      	ldr	r2, [pc, #100]	@ (80041c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d004      	beq.n	8004168 <HAL_TIM_Base_Start_IT+0x80>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a18      	ldr	r2, [pc, #96]	@ (80041c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d111      	bne.n	800418c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f003 0307 	and.w	r3, r3, #7
 8004172:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2b06      	cmp	r3, #6
 8004178:	d010      	beq.n	800419c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f042 0201 	orr.w	r2, r2, #1
 8004188:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418a:	e007      	b.n	800419c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr
 80041aa:	bf00      	nop
 80041ac:	40010000 	.word	0x40010000
 80041b0:	40000400 	.word	0x40000400
 80041b4:	40000800 	.word	0x40000800
 80041b8:	40000c00 	.word	0x40000c00
 80041bc:	40010400 	.word	0x40010400
 80041c0:	40014000 	.word	0x40014000
 80041c4:	40001800 	.word	0x40001800

080041c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b084      	sub	sp, #16
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68db      	ldr	r3, [r3, #12]
 80041d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d020      	beq.n	800422c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d01b      	beq.n	800422c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0202 	mvn.w	r2, #2
 80041fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f999 	bl	800454a <HAL_TIM_IC_CaptureCallback>
 8004218:	e005      	b.n	8004226 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f98b 	bl	8004536 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f99c 	bl	800455e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	f003 0304 	and.w	r3, r3, #4
 8004232:	2b00      	cmp	r3, #0
 8004234:	d020      	beq.n	8004278 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f003 0304 	and.w	r3, r3, #4
 800423c:	2b00      	cmp	r3, #0
 800423e:	d01b      	beq.n	8004278 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f06f 0204 	mvn.w	r2, #4
 8004248:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2202      	movs	r2, #2
 800424e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800425a:	2b00      	cmp	r3, #0
 800425c:	d003      	beq.n	8004266 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 f973 	bl	800454a <HAL_TIM_IC_CaptureCallback>
 8004264:	e005      	b.n	8004272 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f965 	bl	8004536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f976 	bl	800455e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	2b00      	cmp	r3, #0
 8004280:	d020      	beq.n	80042c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f003 0308 	and.w	r3, r3, #8
 8004288:	2b00      	cmp	r3, #0
 800428a:	d01b      	beq.n	80042c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f06f 0208 	mvn.w	r2, #8
 8004294:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2204      	movs	r2, #4
 800429a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	69db      	ldr	r3, [r3, #28]
 80042a2:	f003 0303 	and.w	r3, r3, #3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f94d 	bl	800454a <HAL_TIM_IC_CaptureCallback>
 80042b0:	e005      	b.n	80042be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 f93f 	bl	8004536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f950 	bl	800455e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f003 0310 	and.w	r3, r3, #16
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d020      	beq.n	8004310 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f003 0310 	and.w	r3, r3, #16
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d01b      	beq.n	8004310 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f06f 0210 	mvn.w	r2, #16
 80042e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2208      	movs	r2, #8
 80042e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f000 f927 	bl	800454a <HAL_TIM_IC_CaptureCallback>
 80042fc:	e005      	b.n	800430a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f919 	bl	8004536 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f000 f92a 	bl	800455e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00c      	beq.n	8004334 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d007      	beq.n	8004334 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f06f 0201 	mvn.w	r2, #1
 800432c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7fd fe9c 	bl	800206c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00c      	beq.n	8004358 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004344:	2b00      	cmp	r3, #0
 8004346:	d007      	beq.n	8004358 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fae4 	bl	8004920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00c      	beq.n	800437c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004368:	2b00      	cmp	r3, #0
 800436a:	d007      	beq.n	800437c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004374:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f8fb 	bl	8004572 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	f003 0320 	and.w	r3, r3, #32
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00c      	beq.n	80043a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f003 0320 	and.w	r3, r3, #32
 800438c:	2b00      	cmp	r3, #0
 800438e:	d007      	beq.n	80043a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f06f 0220 	mvn.w	r2, #32
 8004398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fab6 	bl	800490c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80043a0:	bf00      	nop
 80043a2:	3710      	adds	r7, #16
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd80      	pop	{r7, pc}

080043a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b084      	sub	sp, #16
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043b2:	2300      	movs	r3, #0
 80043b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d101      	bne.n	80043c4 <HAL_TIM_ConfigClockSource+0x1c>
 80043c0:	2302      	movs	r3, #2
 80043c2:	e0b4      	b.n	800452e <HAL_TIM_ConfigClockSource+0x186>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2201      	movs	r2, #1
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80043e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68ba      	ldr	r2, [r7, #8]
 80043f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043fc:	d03e      	beq.n	800447c <HAL_TIM_ConfigClockSource+0xd4>
 80043fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004402:	f200 8087 	bhi.w	8004514 <HAL_TIM_ConfigClockSource+0x16c>
 8004406:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800440a:	f000 8086 	beq.w	800451a <HAL_TIM_ConfigClockSource+0x172>
 800440e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004412:	d87f      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x16c>
 8004414:	2b70      	cmp	r3, #112	@ 0x70
 8004416:	d01a      	beq.n	800444e <HAL_TIM_ConfigClockSource+0xa6>
 8004418:	2b70      	cmp	r3, #112	@ 0x70
 800441a:	d87b      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x16c>
 800441c:	2b60      	cmp	r3, #96	@ 0x60
 800441e:	d050      	beq.n	80044c2 <HAL_TIM_ConfigClockSource+0x11a>
 8004420:	2b60      	cmp	r3, #96	@ 0x60
 8004422:	d877      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x16c>
 8004424:	2b50      	cmp	r3, #80	@ 0x50
 8004426:	d03c      	beq.n	80044a2 <HAL_TIM_ConfigClockSource+0xfa>
 8004428:	2b50      	cmp	r3, #80	@ 0x50
 800442a:	d873      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x16c>
 800442c:	2b40      	cmp	r3, #64	@ 0x40
 800442e:	d058      	beq.n	80044e2 <HAL_TIM_ConfigClockSource+0x13a>
 8004430:	2b40      	cmp	r3, #64	@ 0x40
 8004432:	d86f      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x16c>
 8004434:	2b30      	cmp	r3, #48	@ 0x30
 8004436:	d064      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0x15a>
 8004438:	2b30      	cmp	r3, #48	@ 0x30
 800443a:	d86b      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x16c>
 800443c:	2b20      	cmp	r3, #32
 800443e:	d060      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0x15a>
 8004440:	2b20      	cmp	r3, #32
 8004442:	d867      	bhi.n	8004514 <HAL_TIM_ConfigClockSource+0x16c>
 8004444:	2b00      	cmp	r3, #0
 8004446:	d05c      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0x15a>
 8004448:	2b10      	cmp	r3, #16
 800444a:	d05a      	beq.n	8004502 <HAL_TIM_ConfigClockSource+0x15a>
 800444c:	e062      	b.n	8004514 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800445e:	f000 f9b9 	bl	80047d4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004470:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	609a      	str	r2, [r3, #8]
      break;
 800447a:	e04f      	b.n	800451c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800448c:	f000 f9a2 	bl	80047d4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800449e:	609a      	str	r2, [r3, #8]
      break;
 80044a0:	e03c      	b.n	800451c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ae:	461a      	mov	r2, r3
 80044b0:	f000 f916 	bl	80046e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2150      	movs	r1, #80	@ 0x50
 80044ba:	4618      	mov	r0, r3
 80044bc:	f000 f96f 	bl	800479e <TIM_ITRx_SetConfig>
      break;
 80044c0:	e02c      	b.n	800451c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80044ce:	461a      	mov	r2, r3
 80044d0:	f000 f935 	bl	800473e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2160      	movs	r1, #96	@ 0x60
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 f95f 	bl	800479e <TIM_ITRx_SetConfig>
      break;
 80044e0:	e01c      	b.n	800451c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80044ee:	461a      	mov	r2, r3
 80044f0:	f000 f8f6 	bl	80046e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2140      	movs	r1, #64	@ 0x40
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 f94f 	bl	800479e <TIM_ITRx_SetConfig>
      break;
 8004500:	e00c      	b.n	800451c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4619      	mov	r1, r3
 800450c:	4610      	mov	r0, r2
 800450e:	f000 f946 	bl	800479e <TIM_ITRx_SetConfig>
      break;
 8004512:	e003      	b.n	800451c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	73fb      	strb	r3, [r7, #15]
      break;
 8004518:	e000      	b.n	800451c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800451a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800452c:	7bfb      	ldrb	r3, [r7, #15]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3710      	adds	r7, #16
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004536:	b480      	push	{r7}
 8004538:	b083      	sub	sp, #12
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800454a:	b480      	push	{r7}
 800454c:	b083      	sub	sp, #12
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004552:	bf00      	nop
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800455e:	b480      	push	{r7}
 8004560:	b083      	sub	sp, #12
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004566:	bf00      	nop
 8004568:	370c      	adds	r7, #12
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
	...

08004588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a46      	ldr	r2, [pc, #280]	@ (80046b4 <TIM_Base_SetConfig+0x12c>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d013      	beq.n	80045c8 <TIM_Base_SetConfig+0x40>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045a6:	d00f      	beq.n	80045c8 <TIM_Base_SetConfig+0x40>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a43      	ldr	r2, [pc, #268]	@ (80046b8 <TIM_Base_SetConfig+0x130>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d00b      	beq.n	80045c8 <TIM_Base_SetConfig+0x40>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	4a42      	ldr	r2, [pc, #264]	@ (80046bc <TIM_Base_SetConfig+0x134>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d007      	beq.n	80045c8 <TIM_Base_SetConfig+0x40>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4a41      	ldr	r2, [pc, #260]	@ (80046c0 <TIM_Base_SetConfig+0x138>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d003      	beq.n	80045c8 <TIM_Base_SetConfig+0x40>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a40      	ldr	r2, [pc, #256]	@ (80046c4 <TIM_Base_SetConfig+0x13c>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d108      	bne.n	80045da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a35      	ldr	r2, [pc, #212]	@ (80046b4 <TIM_Base_SetConfig+0x12c>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d02b      	beq.n	800463a <TIM_Base_SetConfig+0xb2>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045e8:	d027      	beq.n	800463a <TIM_Base_SetConfig+0xb2>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a32      	ldr	r2, [pc, #200]	@ (80046b8 <TIM_Base_SetConfig+0x130>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d023      	beq.n	800463a <TIM_Base_SetConfig+0xb2>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a31      	ldr	r2, [pc, #196]	@ (80046bc <TIM_Base_SetConfig+0x134>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d01f      	beq.n	800463a <TIM_Base_SetConfig+0xb2>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a30      	ldr	r2, [pc, #192]	@ (80046c0 <TIM_Base_SetConfig+0x138>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d01b      	beq.n	800463a <TIM_Base_SetConfig+0xb2>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a2f      	ldr	r2, [pc, #188]	@ (80046c4 <TIM_Base_SetConfig+0x13c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d017      	beq.n	800463a <TIM_Base_SetConfig+0xb2>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a2e      	ldr	r2, [pc, #184]	@ (80046c8 <TIM_Base_SetConfig+0x140>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d013      	beq.n	800463a <TIM_Base_SetConfig+0xb2>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4a2d      	ldr	r2, [pc, #180]	@ (80046cc <TIM_Base_SetConfig+0x144>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d00f      	beq.n	800463a <TIM_Base_SetConfig+0xb2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a2c      	ldr	r2, [pc, #176]	@ (80046d0 <TIM_Base_SetConfig+0x148>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d00b      	beq.n	800463a <TIM_Base_SetConfig+0xb2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a2b      	ldr	r2, [pc, #172]	@ (80046d4 <TIM_Base_SetConfig+0x14c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d007      	beq.n	800463a <TIM_Base_SetConfig+0xb2>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a2a      	ldr	r2, [pc, #168]	@ (80046d8 <TIM_Base_SetConfig+0x150>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d003      	beq.n	800463a <TIM_Base_SetConfig+0xb2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a29      	ldr	r2, [pc, #164]	@ (80046dc <TIM_Base_SetConfig+0x154>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d108      	bne.n	800464c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004640:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	4313      	orrs	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	695b      	ldr	r3, [r3, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	689a      	ldr	r2, [r3, #8]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a10      	ldr	r2, [pc, #64]	@ (80046b4 <TIM_Base_SetConfig+0x12c>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d003      	beq.n	8004680 <TIM_Base_SetConfig+0xf8>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a12      	ldr	r2, [pc, #72]	@ (80046c4 <TIM_Base_SetConfig+0x13c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d103      	bne.n	8004688 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	691a      	ldr	r2, [r3, #16]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b01      	cmp	r3, #1
 8004698:	d105      	bne.n	80046a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	f023 0201 	bic.w	r2, r3, #1
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	611a      	str	r2, [r3, #16]
  }
}
 80046a6:	bf00      	nop
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	40010000 	.word	0x40010000
 80046b8:	40000400 	.word	0x40000400
 80046bc:	40000800 	.word	0x40000800
 80046c0:	40000c00 	.word	0x40000c00
 80046c4:	40010400 	.word	0x40010400
 80046c8:	40014000 	.word	0x40014000
 80046cc:	40014400 	.word	0x40014400
 80046d0:	40014800 	.word	0x40014800
 80046d4:	40001800 	.word	0x40001800
 80046d8:	40001c00 	.word	0x40001c00
 80046dc:	40002000 	.word	0x40002000

080046e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b087      	sub	sp, #28
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	f023 0201 	bic.w	r2, r3, #1
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800470a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	011b      	lsls	r3, r3, #4
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4313      	orrs	r3, r2
 8004714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f023 030a 	bic.w	r3, r3, #10
 800471c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	621a      	str	r2, [r3, #32]
}
 8004732:	bf00      	nop
 8004734:	371c      	adds	r7, #28
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr

0800473e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800473e:	b480      	push	{r7}
 8004740:	b087      	sub	sp, #28
 8004742:	af00      	add	r7, sp, #0
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	f023 0210 	bic.w	r2, r3, #16
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004768:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	031b      	lsls	r3, r3, #12
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	4313      	orrs	r3, r2
 8004772:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800477a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	693a      	ldr	r2, [r7, #16]
 800478a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	621a      	str	r2, [r3, #32]
}
 8004792:	bf00      	nop
 8004794:	371c      	adds	r7, #28
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800479e:	b480      	push	{r7}
 80047a0:	b085      	sub	sp, #20
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f043 0307 	orr.w	r3, r3, #7
 80047c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	68fa      	ldr	r2, [r7, #12]
 80047c6:	609a      	str	r2, [r3, #8]
}
 80047c8:	bf00      	nop
 80047ca:	3714      	adds	r7, #20
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80047ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	021a      	lsls	r2, r3, #8
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	431a      	orrs	r2, r3
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	4313      	orrs	r3, r2
 8004800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	609a      	str	r2, [r3, #8]
}
 8004808:	bf00      	nop
 800480a:	371c      	adds	r7, #28
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004824:	2b01      	cmp	r3, #1
 8004826:	d101      	bne.n	800482c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004828:	2302      	movs	r3, #2
 800482a:	e05a      	b.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004852:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a21      	ldr	r2, [pc, #132]	@ (80048f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d022      	beq.n	80048b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004878:	d01d      	beq.n	80048b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a1d      	ldr	r2, [pc, #116]	@ (80048f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d018      	beq.n	80048b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a1b      	ldr	r2, [pc, #108]	@ (80048f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d013      	beq.n	80048b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a1a      	ldr	r2, [pc, #104]	@ (80048fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d00e      	beq.n	80048b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a18      	ldr	r2, [pc, #96]	@ (8004900 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d009      	beq.n	80048b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a17      	ldr	r2, [pc, #92]	@ (8004904 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d004      	beq.n	80048b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a15      	ldr	r2, [pc, #84]	@ (8004908 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d10c      	bne.n	80048d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3714      	adds	r7, #20
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	40010000 	.word	0x40010000
 80048f4:	40000400 	.word	0x40000400
 80048f8:	40000800 	.word	0x40000800
 80048fc:	40000c00 	.word	0x40000c00
 8004900:	40010400 	.word	0x40010400
 8004904:	40014000 	.word	0x40014000
 8004908:	40001800 	.word	0x40001800

0800490c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <findslot>:
 8004934:	4b0a      	ldr	r3, [pc, #40]	@ (8004960 <findslot+0x2c>)
 8004936:	b510      	push	{r4, lr}
 8004938:	4604      	mov	r4, r0
 800493a:	6818      	ldr	r0, [r3, #0]
 800493c:	b118      	cbz	r0, 8004946 <findslot+0x12>
 800493e:	6a03      	ldr	r3, [r0, #32]
 8004940:	b90b      	cbnz	r3, 8004946 <findslot+0x12>
 8004942:	f000 fb19 	bl	8004f78 <__sinit>
 8004946:	2c13      	cmp	r4, #19
 8004948:	d807      	bhi.n	800495a <findslot+0x26>
 800494a:	4806      	ldr	r0, [pc, #24]	@ (8004964 <findslot+0x30>)
 800494c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8004950:	3201      	adds	r2, #1
 8004952:	d002      	beq.n	800495a <findslot+0x26>
 8004954:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8004958:	bd10      	pop	{r4, pc}
 800495a:	2000      	movs	r0, #0
 800495c:	e7fc      	b.n	8004958 <findslot+0x24>
 800495e:	bf00      	nop
 8004960:	20000020 	.word	0x20000020
 8004964:	200002d4 	.word	0x200002d4

08004968 <error>:
 8004968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800496a:	4604      	mov	r4, r0
 800496c:	f000 fbba 	bl	80050e4 <__errno>
 8004970:	2613      	movs	r6, #19
 8004972:	4605      	mov	r5, r0
 8004974:	2700      	movs	r7, #0
 8004976:	4630      	mov	r0, r6
 8004978:	4639      	mov	r1, r7
 800497a:	beab      	bkpt	0x00ab
 800497c:	4606      	mov	r6, r0
 800497e:	602e      	str	r6, [r5, #0]
 8004980:	4620      	mov	r0, r4
 8004982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004984 <checkerror>:
 8004984:	1c43      	adds	r3, r0, #1
 8004986:	d101      	bne.n	800498c <checkerror+0x8>
 8004988:	f7ff bfee 	b.w	8004968 <error>
 800498c:	4770      	bx	lr

0800498e <_swiread>:
 800498e:	b530      	push	{r4, r5, lr}
 8004990:	b085      	sub	sp, #20
 8004992:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004996:	9203      	str	r2, [sp, #12]
 8004998:	2406      	movs	r4, #6
 800499a:	ad01      	add	r5, sp, #4
 800499c:	4620      	mov	r0, r4
 800499e:	4629      	mov	r1, r5
 80049a0:	beab      	bkpt	0x00ab
 80049a2:	4604      	mov	r4, r0
 80049a4:	4620      	mov	r0, r4
 80049a6:	f7ff ffed 	bl	8004984 <checkerror>
 80049aa:	b005      	add	sp, #20
 80049ac:	bd30      	pop	{r4, r5, pc}

080049ae <_read>:
 80049ae:	b570      	push	{r4, r5, r6, lr}
 80049b0:	460e      	mov	r6, r1
 80049b2:	4614      	mov	r4, r2
 80049b4:	f7ff ffbe 	bl	8004934 <findslot>
 80049b8:	4605      	mov	r5, r0
 80049ba:	b930      	cbnz	r0, 80049ca <_read+0x1c>
 80049bc:	f000 fb92 	bl	80050e4 <__errno>
 80049c0:	2309      	movs	r3, #9
 80049c2:	6003      	str	r3, [r0, #0]
 80049c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80049c8:	bd70      	pop	{r4, r5, r6, pc}
 80049ca:	6800      	ldr	r0, [r0, #0]
 80049cc:	4622      	mov	r2, r4
 80049ce:	4631      	mov	r1, r6
 80049d0:	f7ff ffdd 	bl	800498e <_swiread>
 80049d4:	1c43      	adds	r3, r0, #1
 80049d6:	d0f5      	beq.n	80049c4 <_read+0x16>
 80049d8:	686b      	ldr	r3, [r5, #4]
 80049da:	1a20      	subs	r0, r4, r0
 80049dc:	4403      	add	r3, r0
 80049de:	606b      	str	r3, [r5, #4]
 80049e0:	e7f2      	b.n	80049c8 <_read+0x1a>

080049e2 <_swilseek>:
 80049e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049e4:	460c      	mov	r4, r1
 80049e6:	4616      	mov	r6, r2
 80049e8:	f7ff ffa4 	bl	8004934 <findslot>
 80049ec:	4605      	mov	r5, r0
 80049ee:	b940      	cbnz	r0, 8004a02 <_swilseek+0x20>
 80049f0:	f000 fb78 	bl	80050e4 <__errno>
 80049f4:	2309      	movs	r3, #9
 80049f6:	6003      	str	r3, [r0, #0]
 80049f8:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80049fc:	4620      	mov	r0, r4
 80049fe:	b003      	add	sp, #12
 8004a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a02:	2e02      	cmp	r6, #2
 8004a04:	d903      	bls.n	8004a0e <_swilseek+0x2c>
 8004a06:	f000 fb6d 	bl	80050e4 <__errno>
 8004a0a:	2316      	movs	r3, #22
 8004a0c:	e7f3      	b.n	80049f6 <_swilseek+0x14>
 8004a0e:	2e01      	cmp	r6, #1
 8004a10:	d112      	bne.n	8004a38 <_swilseek+0x56>
 8004a12:	6843      	ldr	r3, [r0, #4]
 8004a14:	18e4      	adds	r4, r4, r3
 8004a16:	d4f6      	bmi.n	8004a06 <_swilseek+0x24>
 8004a18:	682b      	ldr	r3, [r5, #0]
 8004a1a:	260a      	movs	r6, #10
 8004a1c:	e9cd 3400 	strd	r3, r4, [sp]
 8004a20:	466f      	mov	r7, sp
 8004a22:	4630      	mov	r0, r6
 8004a24:	4639      	mov	r1, r7
 8004a26:	beab      	bkpt	0x00ab
 8004a28:	4606      	mov	r6, r0
 8004a2a:	4630      	mov	r0, r6
 8004a2c:	f7ff ffaa 	bl	8004984 <checkerror>
 8004a30:	2800      	cmp	r0, #0
 8004a32:	dbe1      	blt.n	80049f8 <_swilseek+0x16>
 8004a34:	606c      	str	r4, [r5, #4]
 8004a36:	e7e1      	b.n	80049fc <_swilseek+0x1a>
 8004a38:	2e02      	cmp	r6, #2
 8004a3a:	6803      	ldr	r3, [r0, #0]
 8004a3c:	d1ec      	bne.n	8004a18 <_swilseek+0x36>
 8004a3e:	9300      	str	r3, [sp, #0]
 8004a40:	260c      	movs	r6, #12
 8004a42:	466f      	mov	r7, sp
 8004a44:	4630      	mov	r0, r6
 8004a46:	4639      	mov	r1, r7
 8004a48:	beab      	bkpt	0x00ab
 8004a4a:	4606      	mov	r6, r0
 8004a4c:	4630      	mov	r0, r6
 8004a4e:	f7ff ff99 	bl	8004984 <checkerror>
 8004a52:	1c43      	adds	r3, r0, #1
 8004a54:	d0d0      	beq.n	80049f8 <_swilseek+0x16>
 8004a56:	4404      	add	r4, r0
 8004a58:	e7de      	b.n	8004a18 <_swilseek+0x36>

08004a5a <_lseek>:
 8004a5a:	f7ff bfc2 	b.w	80049e2 <_swilseek>

08004a5e <_swiwrite>:
 8004a5e:	b530      	push	{r4, r5, lr}
 8004a60:	b085      	sub	sp, #20
 8004a62:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004a66:	9203      	str	r2, [sp, #12]
 8004a68:	2405      	movs	r4, #5
 8004a6a:	ad01      	add	r5, sp, #4
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	4629      	mov	r1, r5
 8004a70:	beab      	bkpt	0x00ab
 8004a72:	4604      	mov	r4, r0
 8004a74:	4620      	mov	r0, r4
 8004a76:	f7ff ff85 	bl	8004984 <checkerror>
 8004a7a:	b005      	add	sp, #20
 8004a7c:	bd30      	pop	{r4, r5, pc}

08004a7e <_write>:
 8004a7e:	b570      	push	{r4, r5, r6, lr}
 8004a80:	460e      	mov	r6, r1
 8004a82:	4615      	mov	r5, r2
 8004a84:	f7ff ff56 	bl	8004934 <findslot>
 8004a88:	4604      	mov	r4, r0
 8004a8a:	b930      	cbnz	r0, 8004a9a <_write+0x1c>
 8004a8c:	f000 fb2a 	bl	80050e4 <__errno>
 8004a90:	2309      	movs	r3, #9
 8004a92:	6003      	str	r3, [r0, #0]
 8004a94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a98:	bd70      	pop	{r4, r5, r6, pc}
 8004a9a:	6800      	ldr	r0, [r0, #0]
 8004a9c:	462a      	mov	r2, r5
 8004a9e:	4631      	mov	r1, r6
 8004aa0:	f7ff ffdd 	bl	8004a5e <_swiwrite>
 8004aa4:	1e03      	subs	r3, r0, #0
 8004aa6:	dbf5      	blt.n	8004a94 <_write+0x16>
 8004aa8:	6862      	ldr	r2, [r4, #4]
 8004aaa:	1ae8      	subs	r0, r5, r3
 8004aac:	4402      	add	r2, r0
 8004aae:	42ab      	cmp	r3, r5
 8004ab0:	6062      	str	r2, [r4, #4]
 8004ab2:	d1f1      	bne.n	8004a98 <_write+0x1a>
 8004ab4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004ab8:	2000      	movs	r0, #0
 8004aba:	f7ff bf55 	b.w	8004968 <error>

08004abe <_swiclose>:
 8004abe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ac0:	2402      	movs	r4, #2
 8004ac2:	9001      	str	r0, [sp, #4]
 8004ac4:	ad01      	add	r5, sp, #4
 8004ac6:	4620      	mov	r0, r4
 8004ac8:	4629      	mov	r1, r5
 8004aca:	beab      	bkpt	0x00ab
 8004acc:	4604      	mov	r4, r0
 8004ace:	4620      	mov	r0, r4
 8004ad0:	f7ff ff58 	bl	8004984 <checkerror>
 8004ad4:	b003      	add	sp, #12
 8004ad6:	bd30      	pop	{r4, r5, pc}

08004ad8 <_close>:
 8004ad8:	b538      	push	{r3, r4, r5, lr}
 8004ada:	4605      	mov	r5, r0
 8004adc:	f7ff ff2a 	bl	8004934 <findslot>
 8004ae0:	4604      	mov	r4, r0
 8004ae2:	b930      	cbnz	r0, 8004af2 <_close+0x1a>
 8004ae4:	f000 fafe 	bl	80050e4 <__errno>
 8004ae8:	2309      	movs	r3, #9
 8004aea:	6003      	str	r3, [r0, #0]
 8004aec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004af0:	bd38      	pop	{r3, r4, r5, pc}
 8004af2:	3d01      	subs	r5, #1
 8004af4:	2d01      	cmp	r5, #1
 8004af6:	d809      	bhi.n	8004b0c <_close+0x34>
 8004af8:	4b07      	ldr	r3, [pc, #28]	@ (8004b18 <_close+0x40>)
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d104      	bne.n	8004b0c <_close+0x34>
 8004b02:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004b06:	6023      	str	r3, [r4, #0]
 8004b08:	2000      	movs	r0, #0
 8004b0a:	e7f1      	b.n	8004af0 <_close+0x18>
 8004b0c:	6820      	ldr	r0, [r4, #0]
 8004b0e:	f7ff ffd6 	bl	8004abe <_swiclose>
 8004b12:	2800      	cmp	r0, #0
 8004b14:	d0f5      	beq.n	8004b02 <_close+0x2a>
 8004b16:	e7eb      	b.n	8004af0 <_close+0x18>
 8004b18:	200002d4 	.word	0x200002d4

08004b1c <_swistat>:
 8004b1c:	b570      	push	{r4, r5, r6, lr}
 8004b1e:	460c      	mov	r4, r1
 8004b20:	f7ff ff08 	bl	8004934 <findslot>
 8004b24:	4605      	mov	r5, r0
 8004b26:	b930      	cbnz	r0, 8004b36 <_swistat+0x1a>
 8004b28:	f000 fadc 	bl	80050e4 <__errno>
 8004b2c:	2309      	movs	r3, #9
 8004b2e:	6003      	str	r3, [r0, #0]
 8004b30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004b34:	bd70      	pop	{r4, r5, r6, pc}
 8004b36:	6863      	ldr	r3, [r4, #4]
 8004b38:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004b3c:	6063      	str	r3, [r4, #4]
 8004b3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b42:	64a3      	str	r3, [r4, #72]	@ 0x48
 8004b44:	260c      	movs	r6, #12
 8004b46:	4630      	mov	r0, r6
 8004b48:	4629      	mov	r1, r5
 8004b4a:	beab      	bkpt	0x00ab
 8004b4c:	4605      	mov	r5, r0
 8004b4e:	4628      	mov	r0, r5
 8004b50:	f7ff ff18 	bl	8004984 <checkerror>
 8004b54:	1c43      	adds	r3, r0, #1
 8004b56:	d0eb      	beq.n	8004b30 <_swistat+0x14>
 8004b58:	6120      	str	r0, [r4, #16]
 8004b5a:	2000      	movs	r0, #0
 8004b5c:	e7ea      	b.n	8004b34 <_swistat+0x18>

08004b5e <_fstat>:
 8004b5e:	460b      	mov	r3, r1
 8004b60:	b510      	push	{r4, lr}
 8004b62:	2100      	movs	r1, #0
 8004b64:	4604      	mov	r4, r0
 8004b66:	2258      	movs	r2, #88	@ 0x58
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 fab3 	bl	80050d4 <memset>
 8004b6e:	4601      	mov	r1, r0
 8004b70:	4620      	mov	r0, r4
 8004b72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b76:	f7ff bfd1 	b.w	8004b1c <_swistat>

08004b7a <_stat>:
 8004b7a:	b538      	push	{r3, r4, r5, lr}
 8004b7c:	460d      	mov	r5, r1
 8004b7e:	4604      	mov	r4, r0
 8004b80:	2258      	movs	r2, #88	@ 0x58
 8004b82:	2100      	movs	r1, #0
 8004b84:	4628      	mov	r0, r5
 8004b86:	f000 faa5 	bl	80050d4 <memset>
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	f000 f811 	bl	8004bb4 <_swiopen>
 8004b92:	1c43      	adds	r3, r0, #1
 8004b94:	4604      	mov	r4, r0
 8004b96:	d00b      	beq.n	8004bb0 <_stat+0x36>
 8004b98:	686b      	ldr	r3, [r5, #4]
 8004b9a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8004b9e:	606b      	str	r3, [r5, #4]
 8004ba0:	4629      	mov	r1, r5
 8004ba2:	f7ff ffbb 	bl	8004b1c <_swistat>
 8004ba6:	4605      	mov	r5, r0
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f7ff ff95 	bl	8004ad8 <_close>
 8004bae:	462c      	mov	r4, r5
 8004bb0:	4620      	mov	r0, r4
 8004bb2:	bd38      	pop	{r3, r4, r5, pc}

08004bb4 <_swiopen>:
 8004bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bb8:	4f29      	ldr	r7, [pc, #164]	@ (8004c60 <_swiopen+0xac>)
 8004bba:	b096      	sub	sp, #88	@ 0x58
 8004bbc:	4682      	mov	sl, r0
 8004bbe:	460e      	mov	r6, r1
 8004bc0:	2400      	movs	r4, #0
 8004bc2:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8004bcc:	d00c      	beq.n	8004be8 <_swiopen+0x34>
 8004bce:	3401      	adds	r4, #1
 8004bd0:	2c14      	cmp	r4, #20
 8004bd2:	d1f6      	bne.n	8004bc2 <_swiopen+0xe>
 8004bd4:	f000 fa86 	bl	80050e4 <__errno>
 8004bd8:	2318      	movs	r3, #24
 8004bda:	6003      	str	r3, [r0, #0]
 8004bdc:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004be0:	4620      	mov	r0, r4
 8004be2:	b016      	add	sp, #88	@ 0x58
 8004be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004be8:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8004bec:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8004bf0:	46e9      	mov	r9, sp
 8004bf2:	d109      	bne.n	8004c08 <_swiopen+0x54>
 8004bf4:	4649      	mov	r1, r9
 8004bf6:	4650      	mov	r0, sl
 8004bf8:	f7ff ffbf 	bl	8004b7a <_stat>
 8004bfc:	3001      	adds	r0, #1
 8004bfe:	d003      	beq.n	8004c08 <_swiopen+0x54>
 8004c00:	f000 fa70 	bl	80050e4 <__errno>
 8004c04:	2311      	movs	r3, #17
 8004c06:	e7e8      	b.n	8004bda <_swiopen+0x26>
 8004c08:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8004c0c:	f240 6301 	movw	r3, #1537	@ 0x601
 8004c10:	07b2      	lsls	r2, r6, #30
 8004c12:	bf48      	it	mi
 8004c14:	f045 0502 	orrmi.w	r5, r5, #2
 8004c18:	421e      	tst	r6, r3
 8004c1a:	bf18      	it	ne
 8004c1c:	f045 0504 	orrne.w	r5, r5, #4
 8004c20:	0733      	lsls	r3, r6, #28
 8004c22:	bf48      	it	mi
 8004c24:	f025 0504 	bicmi.w	r5, r5, #4
 8004c28:	4650      	mov	r0, sl
 8004c2a:	bf48      	it	mi
 8004c2c:	f045 0508 	orrmi.w	r5, r5, #8
 8004c30:	f8cd a000 	str.w	sl, [sp]
 8004c34:	f7fb fadc 	bl	80001f0 <strlen>
 8004c38:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8004c3c:	2501      	movs	r5, #1
 8004c3e:	4628      	mov	r0, r5
 8004c40:	4649      	mov	r1, r9
 8004c42:	beab      	bkpt	0x00ab
 8004c44:	4605      	mov	r5, r0
 8004c46:	2d00      	cmp	r5, #0
 8004c48:	db05      	blt.n	8004c56 <_swiopen+0xa2>
 8004c4a:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8004c4e:	4447      	add	r7, r8
 8004c50:	2300      	movs	r3, #0
 8004c52:	607b      	str	r3, [r7, #4]
 8004c54:	e7c4      	b.n	8004be0 <_swiopen+0x2c>
 8004c56:	4628      	mov	r0, r5
 8004c58:	f7ff fe86 	bl	8004968 <error>
 8004c5c:	4604      	mov	r4, r0
 8004c5e:	e7bf      	b.n	8004be0 <_swiopen+0x2c>
 8004c60:	200002d4 	.word	0x200002d4

08004c64 <_get_semihosting_exts>:
 8004c64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004c68:	4606      	mov	r6, r0
 8004c6a:	460f      	mov	r7, r1
 8004c6c:	4829      	ldr	r0, [pc, #164]	@ (8004d14 <_get_semihosting_exts+0xb0>)
 8004c6e:	2100      	movs	r1, #0
 8004c70:	4615      	mov	r5, r2
 8004c72:	f7ff ff9f 	bl	8004bb4 <_swiopen>
 8004c76:	462a      	mov	r2, r5
 8004c78:	4604      	mov	r4, r0
 8004c7a:	2100      	movs	r1, #0
 8004c7c:	4630      	mov	r0, r6
 8004c7e:	f000 fa29 	bl	80050d4 <memset>
 8004c82:	1c63      	adds	r3, r4, #1
 8004c84:	d014      	beq.n	8004cb0 <_get_semihosting_exts+0x4c>
 8004c86:	4620      	mov	r0, r4
 8004c88:	f7ff fe54 	bl	8004934 <findslot>
 8004c8c:	f04f 080c 	mov.w	r8, #12
 8004c90:	4681      	mov	r9, r0
 8004c92:	4640      	mov	r0, r8
 8004c94:	4649      	mov	r1, r9
 8004c96:	beab      	bkpt	0x00ab
 8004c98:	4680      	mov	r8, r0
 8004c9a:	4640      	mov	r0, r8
 8004c9c:	f7ff fe72 	bl	8004984 <checkerror>
 8004ca0:	2803      	cmp	r0, #3
 8004ca2:	dd02      	ble.n	8004caa <_get_semihosting_exts+0x46>
 8004ca4:	1ec3      	subs	r3, r0, #3
 8004ca6:	42ab      	cmp	r3, r5
 8004ca8:	dc07      	bgt.n	8004cba <_get_semihosting_exts+0x56>
 8004caa:	4620      	mov	r0, r4
 8004cac:	f7ff ff14 	bl	8004ad8 <_close>
 8004cb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004cb4:	b003      	add	sp, #12
 8004cb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004cba:	2204      	movs	r2, #4
 8004cbc:	eb0d 0102 	add.w	r1, sp, r2
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	f7ff fe74 	bl	80049ae <_read>
 8004cc6:	2803      	cmp	r0, #3
 8004cc8:	ddef      	ble.n	8004caa <_get_semihosting_exts+0x46>
 8004cca:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004cce:	2b53      	cmp	r3, #83	@ 0x53
 8004cd0:	d1eb      	bne.n	8004caa <_get_semihosting_exts+0x46>
 8004cd2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8004cd6:	2b48      	cmp	r3, #72	@ 0x48
 8004cd8:	d1e7      	bne.n	8004caa <_get_semihosting_exts+0x46>
 8004cda:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004cde:	2b46      	cmp	r3, #70	@ 0x46
 8004ce0:	d1e3      	bne.n	8004caa <_get_semihosting_exts+0x46>
 8004ce2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004ce6:	2b42      	cmp	r3, #66	@ 0x42
 8004ce8:	d1df      	bne.n	8004caa <_get_semihosting_exts+0x46>
 8004cea:	2201      	movs	r2, #1
 8004cec:	4639      	mov	r1, r7
 8004cee:	4620      	mov	r0, r4
 8004cf0:	f7ff fe77 	bl	80049e2 <_swilseek>
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	dbd8      	blt.n	8004caa <_get_semihosting_exts+0x46>
 8004cf8:	462a      	mov	r2, r5
 8004cfa:	4631      	mov	r1, r6
 8004cfc:	4620      	mov	r0, r4
 8004cfe:	f7ff fe56 	bl	80049ae <_read>
 8004d02:	4605      	mov	r5, r0
 8004d04:	4620      	mov	r0, r4
 8004d06:	f7ff fee7 	bl	8004ad8 <_close>
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f7ff fe3a 	bl	8004984 <checkerror>
 8004d10:	e7d0      	b.n	8004cb4 <_get_semihosting_exts+0x50>
 8004d12:	bf00      	nop
 8004d14:	08005eb0 	.word	0x08005eb0

08004d18 <initialise_semihosting_exts>:
 8004d18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004d1a:	4d0a      	ldr	r5, [pc, #40]	@ (8004d44 <initialise_semihosting_exts+0x2c>)
 8004d1c:	4c0a      	ldr	r4, [pc, #40]	@ (8004d48 <initialise_semihosting_exts+0x30>)
 8004d1e:	2100      	movs	r1, #0
 8004d20:	2201      	movs	r2, #1
 8004d22:	a801      	add	r0, sp, #4
 8004d24:	6029      	str	r1, [r5, #0]
 8004d26:	6022      	str	r2, [r4, #0]
 8004d28:	f7ff ff9c 	bl	8004c64 <_get_semihosting_exts>
 8004d2c:	2800      	cmp	r0, #0
 8004d2e:	dd07      	ble.n	8004d40 <initialise_semihosting_exts+0x28>
 8004d30:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004d34:	f003 0201 	and.w	r2, r3, #1
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	602a      	str	r2, [r5, #0]
 8004d3e:	6023      	str	r3, [r4, #0]
 8004d40:	b003      	add	sp, #12
 8004d42:	bd30      	pop	{r4, r5, pc}
 8004d44:	20000010 	.word	0x20000010
 8004d48:	2000000c 	.word	0x2000000c

08004d4c <_has_ext_stdout_stderr>:
 8004d4c:	b510      	push	{r4, lr}
 8004d4e:	4c04      	ldr	r4, [pc, #16]	@ (8004d60 <_has_ext_stdout_stderr+0x14>)
 8004d50:	6823      	ldr	r3, [r4, #0]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	da01      	bge.n	8004d5a <_has_ext_stdout_stderr+0xe>
 8004d56:	f7ff ffdf 	bl	8004d18 <initialise_semihosting_exts>
 8004d5a:	6820      	ldr	r0, [r4, #0]
 8004d5c:	bd10      	pop	{r4, pc}
 8004d5e:	bf00      	nop
 8004d60:	2000000c 	.word	0x2000000c

08004d64 <initialise_monitor_handles>:
 8004d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d68:	b085      	sub	sp, #20
 8004d6a:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8004e1c <initialise_monitor_handles+0xb8>
 8004d6e:	f8cd 9004 	str.w	r9, [sp, #4]
 8004d72:	2303      	movs	r3, #3
 8004d74:	2400      	movs	r4, #0
 8004d76:	9303      	str	r3, [sp, #12]
 8004d78:	af01      	add	r7, sp, #4
 8004d7a:	9402      	str	r4, [sp, #8]
 8004d7c:	2501      	movs	r5, #1
 8004d7e:	4628      	mov	r0, r5
 8004d80:	4639      	mov	r1, r7
 8004d82:	beab      	bkpt	0x00ab
 8004d84:	4605      	mov	r5, r0
 8004d86:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8004e20 <initialise_monitor_handles+0xbc>
 8004d8a:	4623      	mov	r3, r4
 8004d8c:	4c20      	ldr	r4, [pc, #128]	@ (8004e10 <initialise_monitor_handles+0xac>)
 8004d8e:	f8c8 5000 	str.w	r5, [r8]
 8004d92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d96:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	2b14      	cmp	r3, #20
 8004d9e:	d1fa      	bne.n	8004d96 <initialise_monitor_handles+0x32>
 8004da0:	f7ff ffd4 	bl	8004d4c <_has_ext_stdout_stderr>
 8004da4:	4d1b      	ldr	r5, [pc, #108]	@ (8004e14 <initialise_monitor_handles+0xb0>)
 8004da6:	b1d0      	cbz	r0, 8004dde <initialise_monitor_handles+0x7a>
 8004da8:	f04f 0a03 	mov.w	sl, #3
 8004dac:	2304      	movs	r3, #4
 8004dae:	f8cd 9004 	str.w	r9, [sp, #4]
 8004db2:	2601      	movs	r6, #1
 8004db4:	f8cd a00c 	str.w	sl, [sp, #12]
 8004db8:	9302      	str	r3, [sp, #8]
 8004dba:	4630      	mov	r0, r6
 8004dbc:	4639      	mov	r1, r7
 8004dbe:	beab      	bkpt	0x00ab
 8004dc0:	4683      	mov	fp, r0
 8004dc2:	4b15      	ldr	r3, [pc, #84]	@ (8004e18 <initialise_monitor_handles+0xb4>)
 8004dc4:	f8cd 9004 	str.w	r9, [sp, #4]
 8004dc8:	f8c3 b000 	str.w	fp, [r3]
 8004dcc:	2308      	movs	r3, #8
 8004dce:	f8cd a00c 	str.w	sl, [sp, #12]
 8004dd2:	9302      	str	r3, [sp, #8]
 8004dd4:	4630      	mov	r0, r6
 8004dd6:	4639      	mov	r1, r7
 8004dd8:	beab      	bkpt	0x00ab
 8004dda:	4606      	mov	r6, r0
 8004ddc:	602e      	str	r6, [r5, #0]
 8004dde:	682b      	ldr	r3, [r5, #0]
 8004de0:	3301      	adds	r3, #1
 8004de2:	bf02      	ittt	eq
 8004de4:	4b0c      	ldreq	r3, [pc, #48]	@ (8004e18 <initialise_monitor_handles+0xb4>)
 8004de6:	681b      	ldreq	r3, [r3, #0]
 8004de8:	602b      	streq	r3, [r5, #0]
 8004dea:	2600      	movs	r6, #0
 8004dec:	f8d8 3000 	ldr.w	r3, [r8]
 8004df0:	6023      	str	r3, [r4, #0]
 8004df2:	6066      	str	r6, [r4, #4]
 8004df4:	f7ff ffaa 	bl	8004d4c <_has_ext_stdout_stderr>
 8004df8:	b130      	cbz	r0, 8004e08 <initialise_monitor_handles+0xa4>
 8004dfa:	4b07      	ldr	r3, [pc, #28]	@ (8004e18 <initialise_monitor_handles+0xb4>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8004e02:	682b      	ldr	r3, [r5, #0]
 8004e04:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8004e08:	b005      	add	sp, #20
 8004e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e0e:	bf00      	nop
 8004e10:	200002d4 	.word	0x200002d4
 8004e14:	200002c8 	.word	0x200002c8
 8004e18:	200002cc 	.word	0x200002cc
 8004e1c:	08005ec6 	.word	0x08005ec6
 8004e20:	200002d0 	.word	0x200002d0

08004e24 <_isatty>:
 8004e24:	b570      	push	{r4, r5, r6, lr}
 8004e26:	f7ff fd85 	bl	8004934 <findslot>
 8004e2a:	2409      	movs	r4, #9
 8004e2c:	4605      	mov	r5, r0
 8004e2e:	b920      	cbnz	r0, 8004e3a <_isatty+0x16>
 8004e30:	f000 f958 	bl	80050e4 <__errno>
 8004e34:	6004      	str	r4, [r0, #0]
 8004e36:	2000      	movs	r0, #0
 8004e38:	bd70      	pop	{r4, r5, r6, pc}
 8004e3a:	4620      	mov	r0, r4
 8004e3c:	4629      	mov	r1, r5
 8004e3e:	beab      	bkpt	0x00ab
 8004e40:	4604      	mov	r4, r0
 8004e42:	2c01      	cmp	r4, #1
 8004e44:	4620      	mov	r0, r4
 8004e46:	d0f7      	beq.n	8004e38 <_isatty+0x14>
 8004e48:	f000 f94c 	bl	80050e4 <__errno>
 8004e4c:	2513      	movs	r5, #19
 8004e4e:	4604      	mov	r4, r0
 8004e50:	2600      	movs	r6, #0
 8004e52:	4628      	mov	r0, r5
 8004e54:	4631      	mov	r1, r6
 8004e56:	beab      	bkpt	0x00ab
 8004e58:	4605      	mov	r5, r0
 8004e5a:	6025      	str	r5, [r4, #0]
 8004e5c:	e7eb      	b.n	8004e36 <_isatty+0x12>
	...

08004e60 <std>:
 8004e60:	2300      	movs	r3, #0
 8004e62:	b510      	push	{r4, lr}
 8004e64:	4604      	mov	r4, r0
 8004e66:	e9c0 3300 	strd	r3, r3, [r0]
 8004e6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e6e:	6083      	str	r3, [r0, #8]
 8004e70:	8181      	strh	r1, [r0, #12]
 8004e72:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e74:	81c2      	strh	r2, [r0, #14]
 8004e76:	6183      	str	r3, [r0, #24]
 8004e78:	4619      	mov	r1, r3
 8004e7a:	2208      	movs	r2, #8
 8004e7c:	305c      	adds	r0, #92	@ 0x5c
 8004e7e:	f000 f929 	bl	80050d4 <memset>
 8004e82:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb8 <std+0x58>)
 8004e84:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e86:	4b0d      	ldr	r3, [pc, #52]	@ (8004ebc <std+0x5c>)
 8004e88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec0 <std+0x60>)
 8004e8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec4 <std+0x64>)
 8004e90:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e92:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec8 <std+0x68>)
 8004e94:	6224      	str	r4, [r4, #32]
 8004e96:	429c      	cmp	r4, r3
 8004e98:	d006      	beq.n	8004ea8 <std+0x48>
 8004e9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e9e:	4294      	cmp	r4, r2
 8004ea0:	d002      	beq.n	8004ea8 <std+0x48>
 8004ea2:	33d0      	adds	r3, #208	@ 0xd0
 8004ea4:	429c      	cmp	r4, r3
 8004ea6:	d105      	bne.n	8004eb4 <std+0x54>
 8004ea8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004eac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eb0:	f000 b942 	b.w	8005138 <__retarget_lock_init_recursive>
 8004eb4:	bd10      	pop	{r4, pc}
 8004eb6:	bf00      	nop
 8004eb8:	08005991 	.word	0x08005991
 8004ebc:	080059b3 	.word	0x080059b3
 8004ec0:	080059eb 	.word	0x080059eb
 8004ec4:	08005a0f 	.word	0x08005a0f
 8004ec8:	20000374 	.word	0x20000374

08004ecc <stdio_exit_handler>:
 8004ecc:	4a02      	ldr	r2, [pc, #8]	@ (8004ed8 <stdio_exit_handler+0xc>)
 8004ece:	4903      	ldr	r1, [pc, #12]	@ (8004edc <stdio_exit_handler+0x10>)
 8004ed0:	4803      	ldr	r0, [pc, #12]	@ (8004ee0 <stdio_exit_handler+0x14>)
 8004ed2:	f000 b869 	b.w	8004fa8 <_fwalk_sglue>
 8004ed6:	bf00      	nop
 8004ed8:	20000014 	.word	0x20000014
 8004edc:	08005929 	.word	0x08005929
 8004ee0:	20000024 	.word	0x20000024

08004ee4 <cleanup_stdio>:
 8004ee4:	6841      	ldr	r1, [r0, #4]
 8004ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8004f18 <cleanup_stdio+0x34>)
 8004ee8:	4299      	cmp	r1, r3
 8004eea:	b510      	push	{r4, lr}
 8004eec:	4604      	mov	r4, r0
 8004eee:	d001      	beq.n	8004ef4 <cleanup_stdio+0x10>
 8004ef0:	f000 fd1a 	bl	8005928 <_fflush_r>
 8004ef4:	68a1      	ldr	r1, [r4, #8]
 8004ef6:	4b09      	ldr	r3, [pc, #36]	@ (8004f1c <cleanup_stdio+0x38>)
 8004ef8:	4299      	cmp	r1, r3
 8004efa:	d002      	beq.n	8004f02 <cleanup_stdio+0x1e>
 8004efc:	4620      	mov	r0, r4
 8004efe:	f000 fd13 	bl	8005928 <_fflush_r>
 8004f02:	68e1      	ldr	r1, [r4, #12]
 8004f04:	4b06      	ldr	r3, [pc, #24]	@ (8004f20 <cleanup_stdio+0x3c>)
 8004f06:	4299      	cmp	r1, r3
 8004f08:	d004      	beq.n	8004f14 <cleanup_stdio+0x30>
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f10:	f000 bd0a 	b.w	8005928 <_fflush_r>
 8004f14:	bd10      	pop	{r4, pc}
 8004f16:	bf00      	nop
 8004f18:	20000374 	.word	0x20000374
 8004f1c:	200003dc 	.word	0x200003dc
 8004f20:	20000444 	.word	0x20000444

08004f24 <global_stdio_init.part.0>:
 8004f24:	b510      	push	{r4, lr}
 8004f26:	4b0b      	ldr	r3, [pc, #44]	@ (8004f54 <global_stdio_init.part.0+0x30>)
 8004f28:	4c0b      	ldr	r4, [pc, #44]	@ (8004f58 <global_stdio_init.part.0+0x34>)
 8004f2a:	4a0c      	ldr	r2, [pc, #48]	@ (8004f5c <global_stdio_init.part.0+0x38>)
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	4620      	mov	r0, r4
 8004f30:	2200      	movs	r2, #0
 8004f32:	2104      	movs	r1, #4
 8004f34:	f7ff ff94 	bl	8004e60 <std>
 8004f38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	2109      	movs	r1, #9
 8004f40:	f7ff ff8e 	bl	8004e60 <std>
 8004f44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f48:	2202      	movs	r2, #2
 8004f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f4e:	2112      	movs	r1, #18
 8004f50:	f7ff bf86 	b.w	8004e60 <std>
 8004f54:	200004ac 	.word	0x200004ac
 8004f58:	20000374 	.word	0x20000374
 8004f5c:	08004ecd 	.word	0x08004ecd

08004f60 <__sfp_lock_acquire>:
 8004f60:	4801      	ldr	r0, [pc, #4]	@ (8004f68 <__sfp_lock_acquire+0x8>)
 8004f62:	f000 b8ea 	b.w	800513a <__retarget_lock_acquire_recursive>
 8004f66:	bf00      	nop
 8004f68:	200004b1 	.word	0x200004b1

08004f6c <__sfp_lock_release>:
 8004f6c:	4801      	ldr	r0, [pc, #4]	@ (8004f74 <__sfp_lock_release+0x8>)
 8004f6e:	f000 b8e5 	b.w	800513c <__retarget_lock_release_recursive>
 8004f72:	bf00      	nop
 8004f74:	200004b1 	.word	0x200004b1

08004f78 <__sinit>:
 8004f78:	b510      	push	{r4, lr}
 8004f7a:	4604      	mov	r4, r0
 8004f7c:	f7ff fff0 	bl	8004f60 <__sfp_lock_acquire>
 8004f80:	6a23      	ldr	r3, [r4, #32]
 8004f82:	b11b      	cbz	r3, 8004f8c <__sinit+0x14>
 8004f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f88:	f7ff bff0 	b.w	8004f6c <__sfp_lock_release>
 8004f8c:	4b04      	ldr	r3, [pc, #16]	@ (8004fa0 <__sinit+0x28>)
 8004f8e:	6223      	str	r3, [r4, #32]
 8004f90:	4b04      	ldr	r3, [pc, #16]	@ (8004fa4 <__sinit+0x2c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1f5      	bne.n	8004f84 <__sinit+0xc>
 8004f98:	f7ff ffc4 	bl	8004f24 <global_stdio_init.part.0>
 8004f9c:	e7f2      	b.n	8004f84 <__sinit+0xc>
 8004f9e:	bf00      	nop
 8004fa0:	08004ee5 	.word	0x08004ee5
 8004fa4:	200004ac 	.word	0x200004ac

08004fa8 <_fwalk_sglue>:
 8004fa8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fac:	4607      	mov	r7, r0
 8004fae:	4688      	mov	r8, r1
 8004fb0:	4614      	mov	r4, r2
 8004fb2:	2600      	movs	r6, #0
 8004fb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004fb8:	f1b9 0901 	subs.w	r9, r9, #1
 8004fbc:	d505      	bpl.n	8004fca <_fwalk_sglue+0x22>
 8004fbe:	6824      	ldr	r4, [r4, #0]
 8004fc0:	2c00      	cmp	r4, #0
 8004fc2:	d1f7      	bne.n	8004fb4 <_fwalk_sglue+0xc>
 8004fc4:	4630      	mov	r0, r6
 8004fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fca:	89ab      	ldrh	r3, [r5, #12]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d907      	bls.n	8004fe0 <_fwalk_sglue+0x38>
 8004fd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	d003      	beq.n	8004fe0 <_fwalk_sglue+0x38>
 8004fd8:	4629      	mov	r1, r5
 8004fda:	4638      	mov	r0, r7
 8004fdc:	47c0      	blx	r8
 8004fde:	4306      	orrs	r6, r0
 8004fe0:	3568      	adds	r5, #104	@ 0x68
 8004fe2:	e7e9      	b.n	8004fb8 <_fwalk_sglue+0x10>

08004fe4 <iprintf>:
 8004fe4:	b40f      	push	{r0, r1, r2, r3}
 8004fe6:	b507      	push	{r0, r1, r2, lr}
 8004fe8:	4906      	ldr	r1, [pc, #24]	@ (8005004 <iprintf+0x20>)
 8004fea:	ab04      	add	r3, sp, #16
 8004fec:	6808      	ldr	r0, [r1, #0]
 8004fee:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ff2:	6881      	ldr	r1, [r0, #8]
 8004ff4:	9301      	str	r3, [sp, #4]
 8004ff6:	f000 f8cb 	bl	8005190 <_vfiprintf_r>
 8004ffa:	b003      	add	sp, #12
 8004ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005000:	b004      	add	sp, #16
 8005002:	4770      	bx	lr
 8005004:	20000020 	.word	0x20000020

08005008 <putchar>:
 8005008:	4b02      	ldr	r3, [pc, #8]	@ (8005014 <putchar+0xc>)
 800500a:	4601      	mov	r1, r0
 800500c:	6818      	ldr	r0, [r3, #0]
 800500e:	6882      	ldr	r2, [r0, #8]
 8005010:	f000 bdf8 	b.w	8005c04 <_putc_r>
 8005014:	20000020 	.word	0x20000020

08005018 <_puts_r>:
 8005018:	6a03      	ldr	r3, [r0, #32]
 800501a:	b570      	push	{r4, r5, r6, lr}
 800501c:	6884      	ldr	r4, [r0, #8]
 800501e:	4605      	mov	r5, r0
 8005020:	460e      	mov	r6, r1
 8005022:	b90b      	cbnz	r3, 8005028 <_puts_r+0x10>
 8005024:	f7ff ffa8 	bl	8004f78 <__sinit>
 8005028:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800502a:	07db      	lsls	r3, r3, #31
 800502c:	d405      	bmi.n	800503a <_puts_r+0x22>
 800502e:	89a3      	ldrh	r3, [r4, #12]
 8005030:	0598      	lsls	r0, r3, #22
 8005032:	d402      	bmi.n	800503a <_puts_r+0x22>
 8005034:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005036:	f000 f880 	bl	800513a <__retarget_lock_acquire_recursive>
 800503a:	89a3      	ldrh	r3, [r4, #12]
 800503c:	0719      	lsls	r1, r3, #28
 800503e:	d502      	bpl.n	8005046 <_puts_r+0x2e>
 8005040:	6923      	ldr	r3, [r4, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d135      	bne.n	80050b2 <_puts_r+0x9a>
 8005046:	4621      	mov	r1, r4
 8005048:	4628      	mov	r0, r5
 800504a:	f000 fd23 	bl	8005a94 <__swsetup_r>
 800504e:	b380      	cbz	r0, 80050b2 <_puts_r+0x9a>
 8005050:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005054:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005056:	07da      	lsls	r2, r3, #31
 8005058:	d405      	bmi.n	8005066 <_puts_r+0x4e>
 800505a:	89a3      	ldrh	r3, [r4, #12]
 800505c:	059b      	lsls	r3, r3, #22
 800505e:	d402      	bmi.n	8005066 <_puts_r+0x4e>
 8005060:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005062:	f000 f86b 	bl	800513c <__retarget_lock_release_recursive>
 8005066:	4628      	mov	r0, r5
 8005068:	bd70      	pop	{r4, r5, r6, pc}
 800506a:	2b00      	cmp	r3, #0
 800506c:	da04      	bge.n	8005078 <_puts_r+0x60>
 800506e:	69a2      	ldr	r2, [r4, #24]
 8005070:	429a      	cmp	r2, r3
 8005072:	dc17      	bgt.n	80050a4 <_puts_r+0x8c>
 8005074:	290a      	cmp	r1, #10
 8005076:	d015      	beq.n	80050a4 <_puts_r+0x8c>
 8005078:	6823      	ldr	r3, [r4, #0]
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	6022      	str	r2, [r4, #0]
 800507e:	7019      	strb	r1, [r3, #0]
 8005080:	68a3      	ldr	r3, [r4, #8]
 8005082:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005086:	3b01      	subs	r3, #1
 8005088:	60a3      	str	r3, [r4, #8]
 800508a:	2900      	cmp	r1, #0
 800508c:	d1ed      	bne.n	800506a <_puts_r+0x52>
 800508e:	2b00      	cmp	r3, #0
 8005090:	da11      	bge.n	80050b6 <_puts_r+0x9e>
 8005092:	4622      	mov	r2, r4
 8005094:	210a      	movs	r1, #10
 8005096:	4628      	mov	r0, r5
 8005098:	f000 fcbd 	bl	8005a16 <__swbuf_r>
 800509c:	3001      	adds	r0, #1
 800509e:	d0d7      	beq.n	8005050 <_puts_r+0x38>
 80050a0:	250a      	movs	r5, #10
 80050a2:	e7d7      	b.n	8005054 <_puts_r+0x3c>
 80050a4:	4622      	mov	r2, r4
 80050a6:	4628      	mov	r0, r5
 80050a8:	f000 fcb5 	bl	8005a16 <__swbuf_r>
 80050ac:	3001      	adds	r0, #1
 80050ae:	d1e7      	bne.n	8005080 <_puts_r+0x68>
 80050b0:	e7ce      	b.n	8005050 <_puts_r+0x38>
 80050b2:	3e01      	subs	r6, #1
 80050b4:	e7e4      	b.n	8005080 <_puts_r+0x68>
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	6022      	str	r2, [r4, #0]
 80050bc:	220a      	movs	r2, #10
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	e7ee      	b.n	80050a0 <_puts_r+0x88>
	...

080050c4 <puts>:
 80050c4:	4b02      	ldr	r3, [pc, #8]	@ (80050d0 <puts+0xc>)
 80050c6:	4601      	mov	r1, r0
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	f7ff bfa5 	b.w	8005018 <_puts_r>
 80050ce:	bf00      	nop
 80050d0:	20000020 	.word	0x20000020

080050d4 <memset>:
 80050d4:	4402      	add	r2, r0
 80050d6:	4603      	mov	r3, r0
 80050d8:	4293      	cmp	r3, r2
 80050da:	d100      	bne.n	80050de <memset+0xa>
 80050dc:	4770      	bx	lr
 80050de:	f803 1b01 	strb.w	r1, [r3], #1
 80050e2:	e7f9      	b.n	80050d8 <memset+0x4>

080050e4 <__errno>:
 80050e4:	4b01      	ldr	r3, [pc, #4]	@ (80050ec <__errno+0x8>)
 80050e6:	6818      	ldr	r0, [r3, #0]
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	20000020 	.word	0x20000020

080050f0 <__libc_init_array>:
 80050f0:	b570      	push	{r4, r5, r6, lr}
 80050f2:	4d0d      	ldr	r5, [pc, #52]	@ (8005128 <__libc_init_array+0x38>)
 80050f4:	4c0d      	ldr	r4, [pc, #52]	@ (800512c <__libc_init_array+0x3c>)
 80050f6:	1b64      	subs	r4, r4, r5
 80050f8:	10a4      	asrs	r4, r4, #2
 80050fa:	2600      	movs	r6, #0
 80050fc:	42a6      	cmp	r6, r4
 80050fe:	d109      	bne.n	8005114 <__libc_init_array+0x24>
 8005100:	4d0b      	ldr	r5, [pc, #44]	@ (8005130 <__libc_init_array+0x40>)
 8005102:	4c0c      	ldr	r4, [pc, #48]	@ (8005134 <__libc_init_array+0x44>)
 8005104:	f000 fe74 	bl	8005df0 <_init>
 8005108:	1b64      	subs	r4, r4, r5
 800510a:	10a4      	asrs	r4, r4, #2
 800510c:	2600      	movs	r6, #0
 800510e:	42a6      	cmp	r6, r4
 8005110:	d105      	bne.n	800511e <__libc_init_array+0x2e>
 8005112:	bd70      	pop	{r4, r5, r6, pc}
 8005114:	f855 3b04 	ldr.w	r3, [r5], #4
 8005118:	4798      	blx	r3
 800511a:	3601      	adds	r6, #1
 800511c:	e7ee      	b.n	80050fc <__libc_init_array+0xc>
 800511e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005122:	4798      	blx	r3
 8005124:	3601      	adds	r6, #1
 8005126:	e7f2      	b.n	800510e <__libc_init_array+0x1e>
 8005128:	08005f08 	.word	0x08005f08
 800512c:	08005f08 	.word	0x08005f08
 8005130:	08005f08 	.word	0x08005f08
 8005134:	08005f0c 	.word	0x08005f0c

08005138 <__retarget_lock_init_recursive>:
 8005138:	4770      	bx	lr

0800513a <__retarget_lock_acquire_recursive>:
 800513a:	4770      	bx	lr

0800513c <__retarget_lock_release_recursive>:
 800513c:	4770      	bx	lr

0800513e <__sfputc_r>:
 800513e:	6893      	ldr	r3, [r2, #8]
 8005140:	3b01      	subs	r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	b410      	push	{r4}
 8005146:	6093      	str	r3, [r2, #8]
 8005148:	da08      	bge.n	800515c <__sfputc_r+0x1e>
 800514a:	6994      	ldr	r4, [r2, #24]
 800514c:	42a3      	cmp	r3, r4
 800514e:	db01      	blt.n	8005154 <__sfputc_r+0x16>
 8005150:	290a      	cmp	r1, #10
 8005152:	d103      	bne.n	800515c <__sfputc_r+0x1e>
 8005154:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005158:	f000 bc5d 	b.w	8005a16 <__swbuf_r>
 800515c:	6813      	ldr	r3, [r2, #0]
 800515e:	1c58      	adds	r0, r3, #1
 8005160:	6010      	str	r0, [r2, #0]
 8005162:	7019      	strb	r1, [r3, #0]
 8005164:	4608      	mov	r0, r1
 8005166:	f85d 4b04 	ldr.w	r4, [sp], #4
 800516a:	4770      	bx	lr

0800516c <__sfputs_r>:
 800516c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800516e:	4606      	mov	r6, r0
 8005170:	460f      	mov	r7, r1
 8005172:	4614      	mov	r4, r2
 8005174:	18d5      	adds	r5, r2, r3
 8005176:	42ac      	cmp	r4, r5
 8005178:	d101      	bne.n	800517e <__sfputs_r+0x12>
 800517a:	2000      	movs	r0, #0
 800517c:	e007      	b.n	800518e <__sfputs_r+0x22>
 800517e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005182:	463a      	mov	r2, r7
 8005184:	4630      	mov	r0, r6
 8005186:	f7ff ffda 	bl	800513e <__sfputc_r>
 800518a:	1c43      	adds	r3, r0, #1
 800518c:	d1f3      	bne.n	8005176 <__sfputs_r+0xa>
 800518e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005190 <_vfiprintf_r>:
 8005190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005194:	460d      	mov	r5, r1
 8005196:	b09d      	sub	sp, #116	@ 0x74
 8005198:	4614      	mov	r4, r2
 800519a:	4698      	mov	r8, r3
 800519c:	4606      	mov	r6, r0
 800519e:	b118      	cbz	r0, 80051a8 <_vfiprintf_r+0x18>
 80051a0:	6a03      	ldr	r3, [r0, #32]
 80051a2:	b90b      	cbnz	r3, 80051a8 <_vfiprintf_r+0x18>
 80051a4:	f7ff fee8 	bl	8004f78 <__sinit>
 80051a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051aa:	07d9      	lsls	r1, r3, #31
 80051ac:	d405      	bmi.n	80051ba <_vfiprintf_r+0x2a>
 80051ae:	89ab      	ldrh	r3, [r5, #12]
 80051b0:	059a      	lsls	r2, r3, #22
 80051b2:	d402      	bmi.n	80051ba <_vfiprintf_r+0x2a>
 80051b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051b6:	f7ff ffc0 	bl	800513a <__retarget_lock_acquire_recursive>
 80051ba:	89ab      	ldrh	r3, [r5, #12]
 80051bc:	071b      	lsls	r3, r3, #28
 80051be:	d501      	bpl.n	80051c4 <_vfiprintf_r+0x34>
 80051c0:	692b      	ldr	r3, [r5, #16]
 80051c2:	b99b      	cbnz	r3, 80051ec <_vfiprintf_r+0x5c>
 80051c4:	4629      	mov	r1, r5
 80051c6:	4630      	mov	r0, r6
 80051c8:	f000 fc64 	bl	8005a94 <__swsetup_r>
 80051cc:	b170      	cbz	r0, 80051ec <_vfiprintf_r+0x5c>
 80051ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80051d0:	07dc      	lsls	r4, r3, #31
 80051d2:	d504      	bpl.n	80051de <_vfiprintf_r+0x4e>
 80051d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80051d8:	b01d      	add	sp, #116	@ 0x74
 80051da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051de:	89ab      	ldrh	r3, [r5, #12]
 80051e0:	0598      	lsls	r0, r3, #22
 80051e2:	d4f7      	bmi.n	80051d4 <_vfiprintf_r+0x44>
 80051e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80051e6:	f7ff ffa9 	bl	800513c <__retarget_lock_release_recursive>
 80051ea:	e7f3      	b.n	80051d4 <_vfiprintf_r+0x44>
 80051ec:	2300      	movs	r3, #0
 80051ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80051f0:	2320      	movs	r3, #32
 80051f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80051f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80051fa:	2330      	movs	r3, #48	@ 0x30
 80051fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80053ac <_vfiprintf_r+0x21c>
 8005200:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005204:	f04f 0901 	mov.w	r9, #1
 8005208:	4623      	mov	r3, r4
 800520a:	469a      	mov	sl, r3
 800520c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005210:	b10a      	cbz	r2, 8005216 <_vfiprintf_r+0x86>
 8005212:	2a25      	cmp	r2, #37	@ 0x25
 8005214:	d1f9      	bne.n	800520a <_vfiprintf_r+0x7a>
 8005216:	ebba 0b04 	subs.w	fp, sl, r4
 800521a:	d00b      	beq.n	8005234 <_vfiprintf_r+0xa4>
 800521c:	465b      	mov	r3, fp
 800521e:	4622      	mov	r2, r4
 8005220:	4629      	mov	r1, r5
 8005222:	4630      	mov	r0, r6
 8005224:	f7ff ffa2 	bl	800516c <__sfputs_r>
 8005228:	3001      	adds	r0, #1
 800522a:	f000 80a7 	beq.w	800537c <_vfiprintf_r+0x1ec>
 800522e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005230:	445a      	add	r2, fp
 8005232:	9209      	str	r2, [sp, #36]	@ 0x24
 8005234:	f89a 3000 	ldrb.w	r3, [sl]
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 809f 	beq.w	800537c <_vfiprintf_r+0x1ec>
 800523e:	2300      	movs	r3, #0
 8005240:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005244:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005248:	f10a 0a01 	add.w	sl, sl, #1
 800524c:	9304      	str	r3, [sp, #16]
 800524e:	9307      	str	r3, [sp, #28]
 8005250:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005254:	931a      	str	r3, [sp, #104]	@ 0x68
 8005256:	4654      	mov	r4, sl
 8005258:	2205      	movs	r2, #5
 800525a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800525e:	4853      	ldr	r0, [pc, #332]	@ (80053ac <_vfiprintf_r+0x21c>)
 8005260:	f7fa ffce 	bl	8000200 <memchr>
 8005264:	9a04      	ldr	r2, [sp, #16]
 8005266:	b9d8      	cbnz	r0, 80052a0 <_vfiprintf_r+0x110>
 8005268:	06d1      	lsls	r1, r2, #27
 800526a:	bf44      	itt	mi
 800526c:	2320      	movmi	r3, #32
 800526e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005272:	0713      	lsls	r3, r2, #28
 8005274:	bf44      	itt	mi
 8005276:	232b      	movmi	r3, #43	@ 0x2b
 8005278:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800527c:	f89a 3000 	ldrb.w	r3, [sl]
 8005280:	2b2a      	cmp	r3, #42	@ 0x2a
 8005282:	d015      	beq.n	80052b0 <_vfiprintf_r+0x120>
 8005284:	9a07      	ldr	r2, [sp, #28]
 8005286:	4654      	mov	r4, sl
 8005288:	2000      	movs	r0, #0
 800528a:	f04f 0c0a 	mov.w	ip, #10
 800528e:	4621      	mov	r1, r4
 8005290:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005294:	3b30      	subs	r3, #48	@ 0x30
 8005296:	2b09      	cmp	r3, #9
 8005298:	d94b      	bls.n	8005332 <_vfiprintf_r+0x1a2>
 800529a:	b1b0      	cbz	r0, 80052ca <_vfiprintf_r+0x13a>
 800529c:	9207      	str	r2, [sp, #28]
 800529e:	e014      	b.n	80052ca <_vfiprintf_r+0x13a>
 80052a0:	eba0 0308 	sub.w	r3, r0, r8
 80052a4:	fa09 f303 	lsl.w	r3, r9, r3
 80052a8:	4313      	orrs	r3, r2
 80052aa:	9304      	str	r3, [sp, #16]
 80052ac:	46a2      	mov	sl, r4
 80052ae:	e7d2      	b.n	8005256 <_vfiprintf_r+0xc6>
 80052b0:	9b03      	ldr	r3, [sp, #12]
 80052b2:	1d19      	adds	r1, r3, #4
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	9103      	str	r1, [sp, #12]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	bfbb      	ittet	lt
 80052bc:	425b      	neglt	r3, r3
 80052be:	f042 0202 	orrlt.w	r2, r2, #2
 80052c2:	9307      	strge	r3, [sp, #28]
 80052c4:	9307      	strlt	r3, [sp, #28]
 80052c6:	bfb8      	it	lt
 80052c8:	9204      	strlt	r2, [sp, #16]
 80052ca:	7823      	ldrb	r3, [r4, #0]
 80052cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80052ce:	d10a      	bne.n	80052e6 <_vfiprintf_r+0x156>
 80052d0:	7863      	ldrb	r3, [r4, #1]
 80052d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80052d4:	d132      	bne.n	800533c <_vfiprintf_r+0x1ac>
 80052d6:	9b03      	ldr	r3, [sp, #12]
 80052d8:	1d1a      	adds	r2, r3, #4
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	9203      	str	r2, [sp, #12]
 80052de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80052e2:	3402      	adds	r4, #2
 80052e4:	9305      	str	r3, [sp, #20]
 80052e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80053bc <_vfiprintf_r+0x22c>
 80052ea:	7821      	ldrb	r1, [r4, #0]
 80052ec:	2203      	movs	r2, #3
 80052ee:	4650      	mov	r0, sl
 80052f0:	f7fa ff86 	bl	8000200 <memchr>
 80052f4:	b138      	cbz	r0, 8005306 <_vfiprintf_r+0x176>
 80052f6:	9b04      	ldr	r3, [sp, #16]
 80052f8:	eba0 000a 	sub.w	r0, r0, sl
 80052fc:	2240      	movs	r2, #64	@ 0x40
 80052fe:	4082      	lsls	r2, r0
 8005300:	4313      	orrs	r3, r2
 8005302:	3401      	adds	r4, #1
 8005304:	9304      	str	r3, [sp, #16]
 8005306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800530a:	4829      	ldr	r0, [pc, #164]	@ (80053b0 <_vfiprintf_r+0x220>)
 800530c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005310:	2206      	movs	r2, #6
 8005312:	f7fa ff75 	bl	8000200 <memchr>
 8005316:	2800      	cmp	r0, #0
 8005318:	d03f      	beq.n	800539a <_vfiprintf_r+0x20a>
 800531a:	4b26      	ldr	r3, [pc, #152]	@ (80053b4 <_vfiprintf_r+0x224>)
 800531c:	bb1b      	cbnz	r3, 8005366 <_vfiprintf_r+0x1d6>
 800531e:	9b03      	ldr	r3, [sp, #12]
 8005320:	3307      	adds	r3, #7
 8005322:	f023 0307 	bic.w	r3, r3, #7
 8005326:	3308      	adds	r3, #8
 8005328:	9303      	str	r3, [sp, #12]
 800532a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800532c:	443b      	add	r3, r7
 800532e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005330:	e76a      	b.n	8005208 <_vfiprintf_r+0x78>
 8005332:	fb0c 3202 	mla	r2, ip, r2, r3
 8005336:	460c      	mov	r4, r1
 8005338:	2001      	movs	r0, #1
 800533a:	e7a8      	b.n	800528e <_vfiprintf_r+0xfe>
 800533c:	2300      	movs	r3, #0
 800533e:	3401      	adds	r4, #1
 8005340:	9305      	str	r3, [sp, #20]
 8005342:	4619      	mov	r1, r3
 8005344:	f04f 0c0a 	mov.w	ip, #10
 8005348:	4620      	mov	r0, r4
 800534a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800534e:	3a30      	subs	r2, #48	@ 0x30
 8005350:	2a09      	cmp	r2, #9
 8005352:	d903      	bls.n	800535c <_vfiprintf_r+0x1cc>
 8005354:	2b00      	cmp	r3, #0
 8005356:	d0c6      	beq.n	80052e6 <_vfiprintf_r+0x156>
 8005358:	9105      	str	r1, [sp, #20]
 800535a:	e7c4      	b.n	80052e6 <_vfiprintf_r+0x156>
 800535c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005360:	4604      	mov	r4, r0
 8005362:	2301      	movs	r3, #1
 8005364:	e7f0      	b.n	8005348 <_vfiprintf_r+0x1b8>
 8005366:	ab03      	add	r3, sp, #12
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	462a      	mov	r2, r5
 800536c:	4b12      	ldr	r3, [pc, #72]	@ (80053b8 <_vfiprintf_r+0x228>)
 800536e:	a904      	add	r1, sp, #16
 8005370:	4630      	mov	r0, r6
 8005372:	f3af 8000 	nop.w
 8005376:	4607      	mov	r7, r0
 8005378:	1c78      	adds	r0, r7, #1
 800537a:	d1d6      	bne.n	800532a <_vfiprintf_r+0x19a>
 800537c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800537e:	07d9      	lsls	r1, r3, #31
 8005380:	d405      	bmi.n	800538e <_vfiprintf_r+0x1fe>
 8005382:	89ab      	ldrh	r3, [r5, #12]
 8005384:	059a      	lsls	r2, r3, #22
 8005386:	d402      	bmi.n	800538e <_vfiprintf_r+0x1fe>
 8005388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800538a:	f7ff fed7 	bl	800513c <__retarget_lock_release_recursive>
 800538e:	89ab      	ldrh	r3, [r5, #12]
 8005390:	065b      	lsls	r3, r3, #25
 8005392:	f53f af1f 	bmi.w	80051d4 <_vfiprintf_r+0x44>
 8005396:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005398:	e71e      	b.n	80051d8 <_vfiprintf_r+0x48>
 800539a:	ab03      	add	r3, sp, #12
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	462a      	mov	r2, r5
 80053a0:	4b05      	ldr	r3, [pc, #20]	@ (80053b8 <_vfiprintf_r+0x228>)
 80053a2:	a904      	add	r1, sp, #16
 80053a4:	4630      	mov	r0, r6
 80053a6:	f000 f91b 	bl	80055e0 <_printf_i>
 80053aa:	e7e4      	b.n	8005376 <_vfiprintf_r+0x1e6>
 80053ac:	08005eca 	.word	0x08005eca
 80053b0:	08005ed4 	.word	0x08005ed4
 80053b4:	00000000 	.word	0x00000000
 80053b8:	0800516d 	.word	0x0800516d
 80053bc:	08005ed0 	.word	0x08005ed0

080053c0 <sbrk_aligned>:
 80053c0:	b570      	push	{r4, r5, r6, lr}
 80053c2:	4e0f      	ldr	r6, [pc, #60]	@ (8005400 <sbrk_aligned+0x40>)
 80053c4:	460c      	mov	r4, r1
 80053c6:	6831      	ldr	r1, [r6, #0]
 80053c8:	4605      	mov	r5, r0
 80053ca:	b911      	cbnz	r1, 80053d2 <sbrk_aligned+0x12>
 80053cc:	f000 fca4 	bl	8005d18 <_sbrk_r>
 80053d0:	6030      	str	r0, [r6, #0]
 80053d2:	4621      	mov	r1, r4
 80053d4:	4628      	mov	r0, r5
 80053d6:	f000 fc9f 	bl	8005d18 <_sbrk_r>
 80053da:	1c43      	adds	r3, r0, #1
 80053dc:	d103      	bne.n	80053e6 <sbrk_aligned+0x26>
 80053de:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80053e2:	4620      	mov	r0, r4
 80053e4:	bd70      	pop	{r4, r5, r6, pc}
 80053e6:	1cc4      	adds	r4, r0, #3
 80053e8:	f024 0403 	bic.w	r4, r4, #3
 80053ec:	42a0      	cmp	r0, r4
 80053ee:	d0f8      	beq.n	80053e2 <sbrk_aligned+0x22>
 80053f0:	1a21      	subs	r1, r4, r0
 80053f2:	4628      	mov	r0, r5
 80053f4:	f000 fc90 	bl	8005d18 <_sbrk_r>
 80053f8:	3001      	adds	r0, #1
 80053fa:	d1f2      	bne.n	80053e2 <sbrk_aligned+0x22>
 80053fc:	e7ef      	b.n	80053de <sbrk_aligned+0x1e>
 80053fe:	bf00      	nop
 8005400:	200004b4 	.word	0x200004b4

08005404 <_malloc_r>:
 8005404:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005408:	1ccd      	adds	r5, r1, #3
 800540a:	f025 0503 	bic.w	r5, r5, #3
 800540e:	3508      	adds	r5, #8
 8005410:	2d0c      	cmp	r5, #12
 8005412:	bf38      	it	cc
 8005414:	250c      	movcc	r5, #12
 8005416:	2d00      	cmp	r5, #0
 8005418:	4606      	mov	r6, r0
 800541a:	db01      	blt.n	8005420 <_malloc_r+0x1c>
 800541c:	42a9      	cmp	r1, r5
 800541e:	d904      	bls.n	800542a <_malloc_r+0x26>
 8005420:	230c      	movs	r3, #12
 8005422:	6033      	str	r3, [r6, #0]
 8005424:	2000      	movs	r0, #0
 8005426:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800542a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005500 <_malloc_r+0xfc>
 800542e:	f000 faa3 	bl	8005978 <__malloc_lock>
 8005432:	f8d8 3000 	ldr.w	r3, [r8]
 8005436:	461c      	mov	r4, r3
 8005438:	bb44      	cbnz	r4, 800548c <_malloc_r+0x88>
 800543a:	4629      	mov	r1, r5
 800543c:	4630      	mov	r0, r6
 800543e:	f7ff ffbf 	bl	80053c0 <sbrk_aligned>
 8005442:	1c43      	adds	r3, r0, #1
 8005444:	4604      	mov	r4, r0
 8005446:	d158      	bne.n	80054fa <_malloc_r+0xf6>
 8005448:	f8d8 4000 	ldr.w	r4, [r8]
 800544c:	4627      	mov	r7, r4
 800544e:	2f00      	cmp	r7, #0
 8005450:	d143      	bne.n	80054da <_malloc_r+0xd6>
 8005452:	2c00      	cmp	r4, #0
 8005454:	d04b      	beq.n	80054ee <_malloc_r+0xea>
 8005456:	6823      	ldr	r3, [r4, #0]
 8005458:	4639      	mov	r1, r7
 800545a:	4630      	mov	r0, r6
 800545c:	eb04 0903 	add.w	r9, r4, r3
 8005460:	f000 fc5a 	bl	8005d18 <_sbrk_r>
 8005464:	4581      	cmp	r9, r0
 8005466:	d142      	bne.n	80054ee <_malloc_r+0xea>
 8005468:	6821      	ldr	r1, [r4, #0]
 800546a:	1a6d      	subs	r5, r5, r1
 800546c:	4629      	mov	r1, r5
 800546e:	4630      	mov	r0, r6
 8005470:	f7ff ffa6 	bl	80053c0 <sbrk_aligned>
 8005474:	3001      	adds	r0, #1
 8005476:	d03a      	beq.n	80054ee <_malloc_r+0xea>
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	442b      	add	r3, r5
 800547c:	6023      	str	r3, [r4, #0]
 800547e:	f8d8 3000 	ldr.w	r3, [r8]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	bb62      	cbnz	r2, 80054e0 <_malloc_r+0xdc>
 8005486:	f8c8 7000 	str.w	r7, [r8]
 800548a:	e00f      	b.n	80054ac <_malloc_r+0xa8>
 800548c:	6822      	ldr	r2, [r4, #0]
 800548e:	1b52      	subs	r2, r2, r5
 8005490:	d420      	bmi.n	80054d4 <_malloc_r+0xd0>
 8005492:	2a0b      	cmp	r2, #11
 8005494:	d917      	bls.n	80054c6 <_malloc_r+0xc2>
 8005496:	1961      	adds	r1, r4, r5
 8005498:	42a3      	cmp	r3, r4
 800549a:	6025      	str	r5, [r4, #0]
 800549c:	bf18      	it	ne
 800549e:	6059      	strne	r1, [r3, #4]
 80054a0:	6863      	ldr	r3, [r4, #4]
 80054a2:	bf08      	it	eq
 80054a4:	f8c8 1000 	streq.w	r1, [r8]
 80054a8:	5162      	str	r2, [r4, r5]
 80054aa:	604b      	str	r3, [r1, #4]
 80054ac:	4630      	mov	r0, r6
 80054ae:	f000 fa69 	bl	8005984 <__malloc_unlock>
 80054b2:	f104 000b 	add.w	r0, r4, #11
 80054b6:	1d23      	adds	r3, r4, #4
 80054b8:	f020 0007 	bic.w	r0, r0, #7
 80054bc:	1ac2      	subs	r2, r0, r3
 80054be:	bf1c      	itt	ne
 80054c0:	1a1b      	subne	r3, r3, r0
 80054c2:	50a3      	strne	r3, [r4, r2]
 80054c4:	e7af      	b.n	8005426 <_malloc_r+0x22>
 80054c6:	6862      	ldr	r2, [r4, #4]
 80054c8:	42a3      	cmp	r3, r4
 80054ca:	bf0c      	ite	eq
 80054cc:	f8c8 2000 	streq.w	r2, [r8]
 80054d0:	605a      	strne	r2, [r3, #4]
 80054d2:	e7eb      	b.n	80054ac <_malloc_r+0xa8>
 80054d4:	4623      	mov	r3, r4
 80054d6:	6864      	ldr	r4, [r4, #4]
 80054d8:	e7ae      	b.n	8005438 <_malloc_r+0x34>
 80054da:	463c      	mov	r4, r7
 80054dc:	687f      	ldr	r7, [r7, #4]
 80054de:	e7b6      	b.n	800544e <_malloc_r+0x4a>
 80054e0:	461a      	mov	r2, r3
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	42a3      	cmp	r3, r4
 80054e6:	d1fb      	bne.n	80054e0 <_malloc_r+0xdc>
 80054e8:	2300      	movs	r3, #0
 80054ea:	6053      	str	r3, [r2, #4]
 80054ec:	e7de      	b.n	80054ac <_malloc_r+0xa8>
 80054ee:	230c      	movs	r3, #12
 80054f0:	6033      	str	r3, [r6, #0]
 80054f2:	4630      	mov	r0, r6
 80054f4:	f000 fa46 	bl	8005984 <__malloc_unlock>
 80054f8:	e794      	b.n	8005424 <_malloc_r+0x20>
 80054fa:	6005      	str	r5, [r0, #0]
 80054fc:	e7d6      	b.n	80054ac <_malloc_r+0xa8>
 80054fe:	bf00      	nop
 8005500:	200004b8 	.word	0x200004b8

08005504 <_printf_common>:
 8005504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005508:	4616      	mov	r6, r2
 800550a:	4698      	mov	r8, r3
 800550c:	688a      	ldr	r2, [r1, #8]
 800550e:	690b      	ldr	r3, [r1, #16]
 8005510:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005514:	4293      	cmp	r3, r2
 8005516:	bfb8      	it	lt
 8005518:	4613      	movlt	r3, r2
 800551a:	6033      	str	r3, [r6, #0]
 800551c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005520:	4607      	mov	r7, r0
 8005522:	460c      	mov	r4, r1
 8005524:	b10a      	cbz	r2, 800552a <_printf_common+0x26>
 8005526:	3301      	adds	r3, #1
 8005528:	6033      	str	r3, [r6, #0]
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	0699      	lsls	r1, r3, #26
 800552e:	bf42      	ittt	mi
 8005530:	6833      	ldrmi	r3, [r6, #0]
 8005532:	3302      	addmi	r3, #2
 8005534:	6033      	strmi	r3, [r6, #0]
 8005536:	6825      	ldr	r5, [r4, #0]
 8005538:	f015 0506 	ands.w	r5, r5, #6
 800553c:	d106      	bne.n	800554c <_printf_common+0x48>
 800553e:	f104 0a19 	add.w	sl, r4, #25
 8005542:	68e3      	ldr	r3, [r4, #12]
 8005544:	6832      	ldr	r2, [r6, #0]
 8005546:	1a9b      	subs	r3, r3, r2
 8005548:	42ab      	cmp	r3, r5
 800554a:	dc26      	bgt.n	800559a <_printf_common+0x96>
 800554c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005550:	6822      	ldr	r2, [r4, #0]
 8005552:	3b00      	subs	r3, #0
 8005554:	bf18      	it	ne
 8005556:	2301      	movne	r3, #1
 8005558:	0692      	lsls	r2, r2, #26
 800555a:	d42b      	bmi.n	80055b4 <_printf_common+0xb0>
 800555c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005560:	4641      	mov	r1, r8
 8005562:	4638      	mov	r0, r7
 8005564:	47c8      	blx	r9
 8005566:	3001      	adds	r0, #1
 8005568:	d01e      	beq.n	80055a8 <_printf_common+0xa4>
 800556a:	6823      	ldr	r3, [r4, #0]
 800556c:	6922      	ldr	r2, [r4, #16]
 800556e:	f003 0306 	and.w	r3, r3, #6
 8005572:	2b04      	cmp	r3, #4
 8005574:	bf02      	ittt	eq
 8005576:	68e5      	ldreq	r5, [r4, #12]
 8005578:	6833      	ldreq	r3, [r6, #0]
 800557a:	1aed      	subeq	r5, r5, r3
 800557c:	68a3      	ldr	r3, [r4, #8]
 800557e:	bf0c      	ite	eq
 8005580:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005584:	2500      	movne	r5, #0
 8005586:	4293      	cmp	r3, r2
 8005588:	bfc4      	itt	gt
 800558a:	1a9b      	subgt	r3, r3, r2
 800558c:	18ed      	addgt	r5, r5, r3
 800558e:	2600      	movs	r6, #0
 8005590:	341a      	adds	r4, #26
 8005592:	42b5      	cmp	r5, r6
 8005594:	d11a      	bne.n	80055cc <_printf_common+0xc8>
 8005596:	2000      	movs	r0, #0
 8005598:	e008      	b.n	80055ac <_printf_common+0xa8>
 800559a:	2301      	movs	r3, #1
 800559c:	4652      	mov	r2, sl
 800559e:	4641      	mov	r1, r8
 80055a0:	4638      	mov	r0, r7
 80055a2:	47c8      	blx	r9
 80055a4:	3001      	adds	r0, #1
 80055a6:	d103      	bne.n	80055b0 <_printf_common+0xac>
 80055a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80055ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055b0:	3501      	adds	r5, #1
 80055b2:	e7c6      	b.n	8005542 <_printf_common+0x3e>
 80055b4:	18e1      	adds	r1, r4, r3
 80055b6:	1c5a      	adds	r2, r3, #1
 80055b8:	2030      	movs	r0, #48	@ 0x30
 80055ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80055be:	4422      	add	r2, r4
 80055c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80055c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80055c8:	3302      	adds	r3, #2
 80055ca:	e7c7      	b.n	800555c <_printf_common+0x58>
 80055cc:	2301      	movs	r3, #1
 80055ce:	4622      	mov	r2, r4
 80055d0:	4641      	mov	r1, r8
 80055d2:	4638      	mov	r0, r7
 80055d4:	47c8      	blx	r9
 80055d6:	3001      	adds	r0, #1
 80055d8:	d0e6      	beq.n	80055a8 <_printf_common+0xa4>
 80055da:	3601      	adds	r6, #1
 80055dc:	e7d9      	b.n	8005592 <_printf_common+0x8e>
	...

080055e0 <_printf_i>:
 80055e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80055e4:	7e0f      	ldrb	r7, [r1, #24]
 80055e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80055e8:	2f78      	cmp	r7, #120	@ 0x78
 80055ea:	4691      	mov	r9, r2
 80055ec:	4680      	mov	r8, r0
 80055ee:	460c      	mov	r4, r1
 80055f0:	469a      	mov	sl, r3
 80055f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80055f6:	d807      	bhi.n	8005608 <_printf_i+0x28>
 80055f8:	2f62      	cmp	r7, #98	@ 0x62
 80055fa:	d80a      	bhi.n	8005612 <_printf_i+0x32>
 80055fc:	2f00      	cmp	r7, #0
 80055fe:	f000 80d2 	beq.w	80057a6 <_printf_i+0x1c6>
 8005602:	2f58      	cmp	r7, #88	@ 0x58
 8005604:	f000 80b9 	beq.w	800577a <_printf_i+0x19a>
 8005608:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800560c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005610:	e03a      	b.n	8005688 <_printf_i+0xa8>
 8005612:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005616:	2b15      	cmp	r3, #21
 8005618:	d8f6      	bhi.n	8005608 <_printf_i+0x28>
 800561a:	a101      	add	r1, pc, #4	@ (adr r1, 8005620 <_printf_i+0x40>)
 800561c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005620:	08005679 	.word	0x08005679
 8005624:	0800568d 	.word	0x0800568d
 8005628:	08005609 	.word	0x08005609
 800562c:	08005609 	.word	0x08005609
 8005630:	08005609 	.word	0x08005609
 8005634:	08005609 	.word	0x08005609
 8005638:	0800568d 	.word	0x0800568d
 800563c:	08005609 	.word	0x08005609
 8005640:	08005609 	.word	0x08005609
 8005644:	08005609 	.word	0x08005609
 8005648:	08005609 	.word	0x08005609
 800564c:	0800578d 	.word	0x0800578d
 8005650:	080056b7 	.word	0x080056b7
 8005654:	08005747 	.word	0x08005747
 8005658:	08005609 	.word	0x08005609
 800565c:	08005609 	.word	0x08005609
 8005660:	080057af 	.word	0x080057af
 8005664:	08005609 	.word	0x08005609
 8005668:	080056b7 	.word	0x080056b7
 800566c:	08005609 	.word	0x08005609
 8005670:	08005609 	.word	0x08005609
 8005674:	0800574f 	.word	0x0800574f
 8005678:	6833      	ldr	r3, [r6, #0]
 800567a:	1d1a      	adds	r2, r3, #4
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	6032      	str	r2, [r6, #0]
 8005680:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005684:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005688:	2301      	movs	r3, #1
 800568a:	e09d      	b.n	80057c8 <_printf_i+0x1e8>
 800568c:	6833      	ldr	r3, [r6, #0]
 800568e:	6820      	ldr	r0, [r4, #0]
 8005690:	1d19      	adds	r1, r3, #4
 8005692:	6031      	str	r1, [r6, #0]
 8005694:	0606      	lsls	r6, r0, #24
 8005696:	d501      	bpl.n	800569c <_printf_i+0xbc>
 8005698:	681d      	ldr	r5, [r3, #0]
 800569a:	e003      	b.n	80056a4 <_printf_i+0xc4>
 800569c:	0645      	lsls	r5, r0, #25
 800569e:	d5fb      	bpl.n	8005698 <_printf_i+0xb8>
 80056a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80056a4:	2d00      	cmp	r5, #0
 80056a6:	da03      	bge.n	80056b0 <_printf_i+0xd0>
 80056a8:	232d      	movs	r3, #45	@ 0x2d
 80056aa:	426d      	negs	r5, r5
 80056ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056b0:	4859      	ldr	r0, [pc, #356]	@ (8005818 <_printf_i+0x238>)
 80056b2:	230a      	movs	r3, #10
 80056b4:	e011      	b.n	80056da <_printf_i+0xfa>
 80056b6:	6821      	ldr	r1, [r4, #0]
 80056b8:	6833      	ldr	r3, [r6, #0]
 80056ba:	0608      	lsls	r0, r1, #24
 80056bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80056c0:	d402      	bmi.n	80056c8 <_printf_i+0xe8>
 80056c2:	0649      	lsls	r1, r1, #25
 80056c4:	bf48      	it	mi
 80056c6:	b2ad      	uxthmi	r5, r5
 80056c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80056ca:	4853      	ldr	r0, [pc, #332]	@ (8005818 <_printf_i+0x238>)
 80056cc:	6033      	str	r3, [r6, #0]
 80056ce:	bf14      	ite	ne
 80056d0:	230a      	movne	r3, #10
 80056d2:	2308      	moveq	r3, #8
 80056d4:	2100      	movs	r1, #0
 80056d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80056da:	6866      	ldr	r6, [r4, #4]
 80056dc:	60a6      	str	r6, [r4, #8]
 80056de:	2e00      	cmp	r6, #0
 80056e0:	bfa2      	ittt	ge
 80056e2:	6821      	ldrge	r1, [r4, #0]
 80056e4:	f021 0104 	bicge.w	r1, r1, #4
 80056e8:	6021      	strge	r1, [r4, #0]
 80056ea:	b90d      	cbnz	r5, 80056f0 <_printf_i+0x110>
 80056ec:	2e00      	cmp	r6, #0
 80056ee:	d04b      	beq.n	8005788 <_printf_i+0x1a8>
 80056f0:	4616      	mov	r6, r2
 80056f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80056f6:	fb03 5711 	mls	r7, r3, r1, r5
 80056fa:	5dc7      	ldrb	r7, [r0, r7]
 80056fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005700:	462f      	mov	r7, r5
 8005702:	42bb      	cmp	r3, r7
 8005704:	460d      	mov	r5, r1
 8005706:	d9f4      	bls.n	80056f2 <_printf_i+0x112>
 8005708:	2b08      	cmp	r3, #8
 800570a:	d10b      	bne.n	8005724 <_printf_i+0x144>
 800570c:	6823      	ldr	r3, [r4, #0]
 800570e:	07df      	lsls	r7, r3, #31
 8005710:	d508      	bpl.n	8005724 <_printf_i+0x144>
 8005712:	6923      	ldr	r3, [r4, #16]
 8005714:	6861      	ldr	r1, [r4, #4]
 8005716:	4299      	cmp	r1, r3
 8005718:	bfde      	ittt	le
 800571a:	2330      	movle	r3, #48	@ 0x30
 800571c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005720:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005724:	1b92      	subs	r2, r2, r6
 8005726:	6122      	str	r2, [r4, #16]
 8005728:	f8cd a000 	str.w	sl, [sp]
 800572c:	464b      	mov	r3, r9
 800572e:	aa03      	add	r2, sp, #12
 8005730:	4621      	mov	r1, r4
 8005732:	4640      	mov	r0, r8
 8005734:	f7ff fee6 	bl	8005504 <_printf_common>
 8005738:	3001      	adds	r0, #1
 800573a:	d14a      	bne.n	80057d2 <_printf_i+0x1f2>
 800573c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005740:	b004      	add	sp, #16
 8005742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	f043 0320 	orr.w	r3, r3, #32
 800574c:	6023      	str	r3, [r4, #0]
 800574e:	4833      	ldr	r0, [pc, #204]	@ (800581c <_printf_i+0x23c>)
 8005750:	2778      	movs	r7, #120	@ 0x78
 8005752:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005756:	6823      	ldr	r3, [r4, #0]
 8005758:	6831      	ldr	r1, [r6, #0]
 800575a:	061f      	lsls	r7, r3, #24
 800575c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005760:	d402      	bmi.n	8005768 <_printf_i+0x188>
 8005762:	065f      	lsls	r7, r3, #25
 8005764:	bf48      	it	mi
 8005766:	b2ad      	uxthmi	r5, r5
 8005768:	6031      	str	r1, [r6, #0]
 800576a:	07d9      	lsls	r1, r3, #31
 800576c:	bf44      	itt	mi
 800576e:	f043 0320 	orrmi.w	r3, r3, #32
 8005772:	6023      	strmi	r3, [r4, #0]
 8005774:	b11d      	cbz	r5, 800577e <_printf_i+0x19e>
 8005776:	2310      	movs	r3, #16
 8005778:	e7ac      	b.n	80056d4 <_printf_i+0xf4>
 800577a:	4827      	ldr	r0, [pc, #156]	@ (8005818 <_printf_i+0x238>)
 800577c:	e7e9      	b.n	8005752 <_printf_i+0x172>
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	f023 0320 	bic.w	r3, r3, #32
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	e7f6      	b.n	8005776 <_printf_i+0x196>
 8005788:	4616      	mov	r6, r2
 800578a:	e7bd      	b.n	8005708 <_printf_i+0x128>
 800578c:	6833      	ldr	r3, [r6, #0]
 800578e:	6825      	ldr	r5, [r4, #0]
 8005790:	6961      	ldr	r1, [r4, #20]
 8005792:	1d18      	adds	r0, r3, #4
 8005794:	6030      	str	r0, [r6, #0]
 8005796:	062e      	lsls	r6, r5, #24
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	d501      	bpl.n	80057a0 <_printf_i+0x1c0>
 800579c:	6019      	str	r1, [r3, #0]
 800579e:	e002      	b.n	80057a6 <_printf_i+0x1c6>
 80057a0:	0668      	lsls	r0, r5, #25
 80057a2:	d5fb      	bpl.n	800579c <_printf_i+0x1bc>
 80057a4:	8019      	strh	r1, [r3, #0]
 80057a6:	2300      	movs	r3, #0
 80057a8:	6123      	str	r3, [r4, #16]
 80057aa:	4616      	mov	r6, r2
 80057ac:	e7bc      	b.n	8005728 <_printf_i+0x148>
 80057ae:	6833      	ldr	r3, [r6, #0]
 80057b0:	1d1a      	adds	r2, r3, #4
 80057b2:	6032      	str	r2, [r6, #0]
 80057b4:	681e      	ldr	r6, [r3, #0]
 80057b6:	6862      	ldr	r2, [r4, #4]
 80057b8:	2100      	movs	r1, #0
 80057ba:	4630      	mov	r0, r6
 80057bc:	f7fa fd20 	bl	8000200 <memchr>
 80057c0:	b108      	cbz	r0, 80057c6 <_printf_i+0x1e6>
 80057c2:	1b80      	subs	r0, r0, r6
 80057c4:	6060      	str	r0, [r4, #4]
 80057c6:	6863      	ldr	r3, [r4, #4]
 80057c8:	6123      	str	r3, [r4, #16]
 80057ca:	2300      	movs	r3, #0
 80057cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057d0:	e7aa      	b.n	8005728 <_printf_i+0x148>
 80057d2:	6923      	ldr	r3, [r4, #16]
 80057d4:	4632      	mov	r2, r6
 80057d6:	4649      	mov	r1, r9
 80057d8:	4640      	mov	r0, r8
 80057da:	47d0      	blx	sl
 80057dc:	3001      	adds	r0, #1
 80057de:	d0ad      	beq.n	800573c <_printf_i+0x15c>
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	079b      	lsls	r3, r3, #30
 80057e4:	d413      	bmi.n	800580e <_printf_i+0x22e>
 80057e6:	68e0      	ldr	r0, [r4, #12]
 80057e8:	9b03      	ldr	r3, [sp, #12]
 80057ea:	4298      	cmp	r0, r3
 80057ec:	bfb8      	it	lt
 80057ee:	4618      	movlt	r0, r3
 80057f0:	e7a6      	b.n	8005740 <_printf_i+0x160>
 80057f2:	2301      	movs	r3, #1
 80057f4:	4632      	mov	r2, r6
 80057f6:	4649      	mov	r1, r9
 80057f8:	4640      	mov	r0, r8
 80057fa:	47d0      	blx	sl
 80057fc:	3001      	adds	r0, #1
 80057fe:	d09d      	beq.n	800573c <_printf_i+0x15c>
 8005800:	3501      	adds	r5, #1
 8005802:	68e3      	ldr	r3, [r4, #12]
 8005804:	9903      	ldr	r1, [sp, #12]
 8005806:	1a5b      	subs	r3, r3, r1
 8005808:	42ab      	cmp	r3, r5
 800580a:	dcf2      	bgt.n	80057f2 <_printf_i+0x212>
 800580c:	e7eb      	b.n	80057e6 <_printf_i+0x206>
 800580e:	2500      	movs	r5, #0
 8005810:	f104 0619 	add.w	r6, r4, #25
 8005814:	e7f5      	b.n	8005802 <_printf_i+0x222>
 8005816:	bf00      	nop
 8005818:	08005edb 	.word	0x08005edb
 800581c:	08005eec 	.word	0x08005eec

08005820 <__sflush_r>:
 8005820:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005828:	0716      	lsls	r6, r2, #28
 800582a:	4605      	mov	r5, r0
 800582c:	460c      	mov	r4, r1
 800582e:	d454      	bmi.n	80058da <__sflush_r+0xba>
 8005830:	684b      	ldr	r3, [r1, #4]
 8005832:	2b00      	cmp	r3, #0
 8005834:	dc02      	bgt.n	800583c <__sflush_r+0x1c>
 8005836:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005838:	2b00      	cmp	r3, #0
 800583a:	dd48      	ble.n	80058ce <__sflush_r+0xae>
 800583c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800583e:	2e00      	cmp	r6, #0
 8005840:	d045      	beq.n	80058ce <__sflush_r+0xae>
 8005842:	2300      	movs	r3, #0
 8005844:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005848:	682f      	ldr	r7, [r5, #0]
 800584a:	6a21      	ldr	r1, [r4, #32]
 800584c:	602b      	str	r3, [r5, #0]
 800584e:	d030      	beq.n	80058b2 <__sflush_r+0x92>
 8005850:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005852:	89a3      	ldrh	r3, [r4, #12]
 8005854:	0759      	lsls	r1, r3, #29
 8005856:	d505      	bpl.n	8005864 <__sflush_r+0x44>
 8005858:	6863      	ldr	r3, [r4, #4]
 800585a:	1ad2      	subs	r2, r2, r3
 800585c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800585e:	b10b      	cbz	r3, 8005864 <__sflush_r+0x44>
 8005860:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005862:	1ad2      	subs	r2, r2, r3
 8005864:	2300      	movs	r3, #0
 8005866:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005868:	6a21      	ldr	r1, [r4, #32]
 800586a:	4628      	mov	r0, r5
 800586c:	47b0      	blx	r6
 800586e:	1c43      	adds	r3, r0, #1
 8005870:	89a3      	ldrh	r3, [r4, #12]
 8005872:	d106      	bne.n	8005882 <__sflush_r+0x62>
 8005874:	6829      	ldr	r1, [r5, #0]
 8005876:	291d      	cmp	r1, #29
 8005878:	d82b      	bhi.n	80058d2 <__sflush_r+0xb2>
 800587a:	4a2a      	ldr	r2, [pc, #168]	@ (8005924 <__sflush_r+0x104>)
 800587c:	410a      	asrs	r2, r1
 800587e:	07d6      	lsls	r6, r2, #31
 8005880:	d427      	bmi.n	80058d2 <__sflush_r+0xb2>
 8005882:	2200      	movs	r2, #0
 8005884:	6062      	str	r2, [r4, #4]
 8005886:	04d9      	lsls	r1, r3, #19
 8005888:	6922      	ldr	r2, [r4, #16]
 800588a:	6022      	str	r2, [r4, #0]
 800588c:	d504      	bpl.n	8005898 <__sflush_r+0x78>
 800588e:	1c42      	adds	r2, r0, #1
 8005890:	d101      	bne.n	8005896 <__sflush_r+0x76>
 8005892:	682b      	ldr	r3, [r5, #0]
 8005894:	b903      	cbnz	r3, 8005898 <__sflush_r+0x78>
 8005896:	6560      	str	r0, [r4, #84]	@ 0x54
 8005898:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800589a:	602f      	str	r7, [r5, #0]
 800589c:	b1b9      	cbz	r1, 80058ce <__sflush_r+0xae>
 800589e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058a2:	4299      	cmp	r1, r3
 80058a4:	d002      	beq.n	80058ac <__sflush_r+0x8c>
 80058a6:	4628      	mov	r0, r5
 80058a8:	f000 fa58 	bl	8005d5c <_free_r>
 80058ac:	2300      	movs	r3, #0
 80058ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80058b0:	e00d      	b.n	80058ce <__sflush_r+0xae>
 80058b2:	2301      	movs	r3, #1
 80058b4:	4628      	mov	r0, r5
 80058b6:	47b0      	blx	r6
 80058b8:	4602      	mov	r2, r0
 80058ba:	1c50      	adds	r0, r2, #1
 80058bc:	d1c9      	bne.n	8005852 <__sflush_r+0x32>
 80058be:	682b      	ldr	r3, [r5, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0c6      	beq.n	8005852 <__sflush_r+0x32>
 80058c4:	2b1d      	cmp	r3, #29
 80058c6:	d001      	beq.n	80058cc <__sflush_r+0xac>
 80058c8:	2b16      	cmp	r3, #22
 80058ca:	d11e      	bne.n	800590a <__sflush_r+0xea>
 80058cc:	602f      	str	r7, [r5, #0]
 80058ce:	2000      	movs	r0, #0
 80058d0:	e022      	b.n	8005918 <__sflush_r+0xf8>
 80058d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058d6:	b21b      	sxth	r3, r3
 80058d8:	e01b      	b.n	8005912 <__sflush_r+0xf2>
 80058da:	690f      	ldr	r7, [r1, #16]
 80058dc:	2f00      	cmp	r7, #0
 80058de:	d0f6      	beq.n	80058ce <__sflush_r+0xae>
 80058e0:	0793      	lsls	r3, r2, #30
 80058e2:	680e      	ldr	r6, [r1, #0]
 80058e4:	bf08      	it	eq
 80058e6:	694b      	ldreq	r3, [r1, #20]
 80058e8:	600f      	str	r7, [r1, #0]
 80058ea:	bf18      	it	ne
 80058ec:	2300      	movne	r3, #0
 80058ee:	eba6 0807 	sub.w	r8, r6, r7
 80058f2:	608b      	str	r3, [r1, #8]
 80058f4:	f1b8 0f00 	cmp.w	r8, #0
 80058f8:	dde9      	ble.n	80058ce <__sflush_r+0xae>
 80058fa:	6a21      	ldr	r1, [r4, #32]
 80058fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80058fe:	4643      	mov	r3, r8
 8005900:	463a      	mov	r2, r7
 8005902:	4628      	mov	r0, r5
 8005904:	47b0      	blx	r6
 8005906:	2800      	cmp	r0, #0
 8005908:	dc08      	bgt.n	800591c <__sflush_r+0xfc>
 800590a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800590e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005912:	81a3      	strh	r3, [r4, #12]
 8005914:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800591c:	4407      	add	r7, r0
 800591e:	eba8 0800 	sub.w	r8, r8, r0
 8005922:	e7e7      	b.n	80058f4 <__sflush_r+0xd4>
 8005924:	dfbffffe 	.word	0xdfbffffe

08005928 <_fflush_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	690b      	ldr	r3, [r1, #16]
 800592c:	4605      	mov	r5, r0
 800592e:	460c      	mov	r4, r1
 8005930:	b913      	cbnz	r3, 8005938 <_fflush_r+0x10>
 8005932:	2500      	movs	r5, #0
 8005934:	4628      	mov	r0, r5
 8005936:	bd38      	pop	{r3, r4, r5, pc}
 8005938:	b118      	cbz	r0, 8005942 <_fflush_r+0x1a>
 800593a:	6a03      	ldr	r3, [r0, #32]
 800593c:	b90b      	cbnz	r3, 8005942 <_fflush_r+0x1a>
 800593e:	f7ff fb1b 	bl	8004f78 <__sinit>
 8005942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0f3      	beq.n	8005932 <_fflush_r+0xa>
 800594a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800594c:	07d0      	lsls	r0, r2, #31
 800594e:	d404      	bmi.n	800595a <_fflush_r+0x32>
 8005950:	0599      	lsls	r1, r3, #22
 8005952:	d402      	bmi.n	800595a <_fflush_r+0x32>
 8005954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005956:	f7ff fbf0 	bl	800513a <__retarget_lock_acquire_recursive>
 800595a:	4628      	mov	r0, r5
 800595c:	4621      	mov	r1, r4
 800595e:	f7ff ff5f 	bl	8005820 <__sflush_r>
 8005962:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005964:	07da      	lsls	r2, r3, #31
 8005966:	4605      	mov	r5, r0
 8005968:	d4e4      	bmi.n	8005934 <_fflush_r+0xc>
 800596a:	89a3      	ldrh	r3, [r4, #12]
 800596c:	059b      	lsls	r3, r3, #22
 800596e:	d4e1      	bmi.n	8005934 <_fflush_r+0xc>
 8005970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005972:	f7ff fbe3 	bl	800513c <__retarget_lock_release_recursive>
 8005976:	e7dd      	b.n	8005934 <_fflush_r+0xc>

08005978 <__malloc_lock>:
 8005978:	4801      	ldr	r0, [pc, #4]	@ (8005980 <__malloc_lock+0x8>)
 800597a:	f7ff bbde 	b.w	800513a <__retarget_lock_acquire_recursive>
 800597e:	bf00      	nop
 8005980:	200004b0 	.word	0x200004b0

08005984 <__malloc_unlock>:
 8005984:	4801      	ldr	r0, [pc, #4]	@ (800598c <__malloc_unlock+0x8>)
 8005986:	f7ff bbd9 	b.w	800513c <__retarget_lock_release_recursive>
 800598a:	bf00      	nop
 800598c:	200004b0 	.word	0x200004b0

08005990 <__sread>:
 8005990:	b510      	push	{r4, lr}
 8005992:	460c      	mov	r4, r1
 8005994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005998:	f000 f9ac 	bl	8005cf4 <_read_r>
 800599c:	2800      	cmp	r0, #0
 800599e:	bfab      	itete	ge
 80059a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80059a2:	89a3      	ldrhlt	r3, [r4, #12]
 80059a4:	181b      	addge	r3, r3, r0
 80059a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80059aa:	bfac      	ite	ge
 80059ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80059ae:	81a3      	strhlt	r3, [r4, #12]
 80059b0:	bd10      	pop	{r4, pc}

080059b2 <__swrite>:
 80059b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059b6:	461f      	mov	r7, r3
 80059b8:	898b      	ldrh	r3, [r1, #12]
 80059ba:	05db      	lsls	r3, r3, #23
 80059bc:	4605      	mov	r5, r0
 80059be:	460c      	mov	r4, r1
 80059c0:	4616      	mov	r6, r2
 80059c2:	d505      	bpl.n	80059d0 <__swrite+0x1e>
 80059c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059c8:	2302      	movs	r3, #2
 80059ca:	2200      	movs	r2, #0
 80059cc:	f000 f980 	bl	8005cd0 <_lseek_r>
 80059d0:	89a3      	ldrh	r3, [r4, #12]
 80059d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80059da:	81a3      	strh	r3, [r4, #12]
 80059dc:	4632      	mov	r2, r6
 80059de:	463b      	mov	r3, r7
 80059e0:	4628      	mov	r0, r5
 80059e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059e6:	f000 b9a7 	b.w	8005d38 <_write_r>

080059ea <__sseek>:
 80059ea:	b510      	push	{r4, lr}
 80059ec:	460c      	mov	r4, r1
 80059ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059f2:	f000 f96d 	bl	8005cd0 <_lseek_r>
 80059f6:	1c43      	adds	r3, r0, #1
 80059f8:	89a3      	ldrh	r3, [r4, #12]
 80059fa:	bf15      	itete	ne
 80059fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80059fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005a02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005a06:	81a3      	strheq	r3, [r4, #12]
 8005a08:	bf18      	it	ne
 8005a0a:	81a3      	strhne	r3, [r4, #12]
 8005a0c:	bd10      	pop	{r4, pc}

08005a0e <__sclose>:
 8005a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a12:	f000 b92b 	b.w	8005c6c <_close_r>

08005a16 <__swbuf_r>:
 8005a16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a18:	460e      	mov	r6, r1
 8005a1a:	4614      	mov	r4, r2
 8005a1c:	4605      	mov	r5, r0
 8005a1e:	b118      	cbz	r0, 8005a28 <__swbuf_r+0x12>
 8005a20:	6a03      	ldr	r3, [r0, #32]
 8005a22:	b90b      	cbnz	r3, 8005a28 <__swbuf_r+0x12>
 8005a24:	f7ff faa8 	bl	8004f78 <__sinit>
 8005a28:	69a3      	ldr	r3, [r4, #24]
 8005a2a:	60a3      	str	r3, [r4, #8]
 8005a2c:	89a3      	ldrh	r3, [r4, #12]
 8005a2e:	071a      	lsls	r2, r3, #28
 8005a30:	d501      	bpl.n	8005a36 <__swbuf_r+0x20>
 8005a32:	6923      	ldr	r3, [r4, #16]
 8005a34:	b943      	cbnz	r3, 8005a48 <__swbuf_r+0x32>
 8005a36:	4621      	mov	r1, r4
 8005a38:	4628      	mov	r0, r5
 8005a3a:	f000 f82b 	bl	8005a94 <__swsetup_r>
 8005a3e:	b118      	cbz	r0, 8005a48 <__swbuf_r+0x32>
 8005a40:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8005a44:	4638      	mov	r0, r7
 8005a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a48:	6823      	ldr	r3, [r4, #0]
 8005a4a:	6922      	ldr	r2, [r4, #16]
 8005a4c:	1a98      	subs	r0, r3, r2
 8005a4e:	6963      	ldr	r3, [r4, #20]
 8005a50:	b2f6      	uxtb	r6, r6
 8005a52:	4283      	cmp	r3, r0
 8005a54:	4637      	mov	r7, r6
 8005a56:	dc05      	bgt.n	8005a64 <__swbuf_r+0x4e>
 8005a58:	4621      	mov	r1, r4
 8005a5a:	4628      	mov	r0, r5
 8005a5c:	f7ff ff64 	bl	8005928 <_fflush_r>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d1ed      	bne.n	8005a40 <__swbuf_r+0x2a>
 8005a64:	68a3      	ldr	r3, [r4, #8]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	60a3      	str	r3, [r4, #8]
 8005a6a:	6823      	ldr	r3, [r4, #0]
 8005a6c:	1c5a      	adds	r2, r3, #1
 8005a6e:	6022      	str	r2, [r4, #0]
 8005a70:	701e      	strb	r6, [r3, #0]
 8005a72:	6962      	ldr	r2, [r4, #20]
 8005a74:	1c43      	adds	r3, r0, #1
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d004      	beq.n	8005a84 <__swbuf_r+0x6e>
 8005a7a:	89a3      	ldrh	r3, [r4, #12]
 8005a7c:	07db      	lsls	r3, r3, #31
 8005a7e:	d5e1      	bpl.n	8005a44 <__swbuf_r+0x2e>
 8005a80:	2e0a      	cmp	r6, #10
 8005a82:	d1df      	bne.n	8005a44 <__swbuf_r+0x2e>
 8005a84:	4621      	mov	r1, r4
 8005a86:	4628      	mov	r0, r5
 8005a88:	f7ff ff4e 	bl	8005928 <_fflush_r>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	d0d9      	beq.n	8005a44 <__swbuf_r+0x2e>
 8005a90:	e7d6      	b.n	8005a40 <__swbuf_r+0x2a>
	...

08005a94 <__swsetup_r>:
 8005a94:	b538      	push	{r3, r4, r5, lr}
 8005a96:	4b29      	ldr	r3, [pc, #164]	@ (8005b3c <__swsetup_r+0xa8>)
 8005a98:	4605      	mov	r5, r0
 8005a9a:	6818      	ldr	r0, [r3, #0]
 8005a9c:	460c      	mov	r4, r1
 8005a9e:	b118      	cbz	r0, 8005aa8 <__swsetup_r+0x14>
 8005aa0:	6a03      	ldr	r3, [r0, #32]
 8005aa2:	b90b      	cbnz	r3, 8005aa8 <__swsetup_r+0x14>
 8005aa4:	f7ff fa68 	bl	8004f78 <__sinit>
 8005aa8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aac:	0719      	lsls	r1, r3, #28
 8005aae:	d422      	bmi.n	8005af6 <__swsetup_r+0x62>
 8005ab0:	06da      	lsls	r2, r3, #27
 8005ab2:	d407      	bmi.n	8005ac4 <__swsetup_r+0x30>
 8005ab4:	2209      	movs	r2, #9
 8005ab6:	602a      	str	r2, [r5, #0]
 8005ab8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005abc:	81a3      	strh	r3, [r4, #12]
 8005abe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ac2:	e033      	b.n	8005b2c <__swsetup_r+0x98>
 8005ac4:	0758      	lsls	r0, r3, #29
 8005ac6:	d512      	bpl.n	8005aee <__swsetup_r+0x5a>
 8005ac8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005aca:	b141      	cbz	r1, 8005ade <__swsetup_r+0x4a>
 8005acc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ad0:	4299      	cmp	r1, r3
 8005ad2:	d002      	beq.n	8005ada <__swsetup_r+0x46>
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	f000 f941 	bl	8005d5c <_free_r>
 8005ada:	2300      	movs	r3, #0
 8005adc:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ade:	89a3      	ldrh	r3, [r4, #12]
 8005ae0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005ae4:	81a3      	strh	r3, [r4, #12]
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	6063      	str	r3, [r4, #4]
 8005aea:	6923      	ldr	r3, [r4, #16]
 8005aec:	6023      	str	r3, [r4, #0]
 8005aee:	89a3      	ldrh	r3, [r4, #12]
 8005af0:	f043 0308 	orr.w	r3, r3, #8
 8005af4:	81a3      	strh	r3, [r4, #12]
 8005af6:	6923      	ldr	r3, [r4, #16]
 8005af8:	b94b      	cbnz	r3, 8005b0e <__swsetup_r+0x7a>
 8005afa:	89a3      	ldrh	r3, [r4, #12]
 8005afc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005b00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b04:	d003      	beq.n	8005b0e <__swsetup_r+0x7a>
 8005b06:	4621      	mov	r1, r4
 8005b08:	4628      	mov	r0, r5
 8005b0a:	f000 f83f 	bl	8005b8c <__smakebuf_r>
 8005b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b12:	f013 0201 	ands.w	r2, r3, #1
 8005b16:	d00a      	beq.n	8005b2e <__swsetup_r+0x9a>
 8005b18:	2200      	movs	r2, #0
 8005b1a:	60a2      	str	r2, [r4, #8]
 8005b1c:	6962      	ldr	r2, [r4, #20]
 8005b1e:	4252      	negs	r2, r2
 8005b20:	61a2      	str	r2, [r4, #24]
 8005b22:	6922      	ldr	r2, [r4, #16]
 8005b24:	b942      	cbnz	r2, 8005b38 <__swsetup_r+0xa4>
 8005b26:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005b2a:	d1c5      	bne.n	8005ab8 <__swsetup_r+0x24>
 8005b2c:	bd38      	pop	{r3, r4, r5, pc}
 8005b2e:	0799      	lsls	r1, r3, #30
 8005b30:	bf58      	it	pl
 8005b32:	6962      	ldrpl	r2, [r4, #20]
 8005b34:	60a2      	str	r2, [r4, #8]
 8005b36:	e7f4      	b.n	8005b22 <__swsetup_r+0x8e>
 8005b38:	2000      	movs	r0, #0
 8005b3a:	e7f7      	b.n	8005b2c <__swsetup_r+0x98>
 8005b3c:	20000020 	.word	0x20000020

08005b40 <__swhatbuf_r>:
 8005b40:	b570      	push	{r4, r5, r6, lr}
 8005b42:	460c      	mov	r4, r1
 8005b44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b48:	2900      	cmp	r1, #0
 8005b4a:	b096      	sub	sp, #88	@ 0x58
 8005b4c:	4615      	mov	r5, r2
 8005b4e:	461e      	mov	r6, r3
 8005b50:	da0d      	bge.n	8005b6e <__swhatbuf_r+0x2e>
 8005b52:	89a3      	ldrh	r3, [r4, #12]
 8005b54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005b58:	f04f 0100 	mov.w	r1, #0
 8005b5c:	bf14      	ite	ne
 8005b5e:	2340      	movne	r3, #64	@ 0x40
 8005b60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005b64:	2000      	movs	r0, #0
 8005b66:	6031      	str	r1, [r6, #0]
 8005b68:	602b      	str	r3, [r5, #0]
 8005b6a:	b016      	add	sp, #88	@ 0x58
 8005b6c:	bd70      	pop	{r4, r5, r6, pc}
 8005b6e:	466a      	mov	r2, sp
 8005b70:	f000 f88c 	bl	8005c8c <_fstat_r>
 8005b74:	2800      	cmp	r0, #0
 8005b76:	dbec      	blt.n	8005b52 <__swhatbuf_r+0x12>
 8005b78:	9901      	ldr	r1, [sp, #4]
 8005b7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005b7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005b82:	4259      	negs	r1, r3
 8005b84:	4159      	adcs	r1, r3
 8005b86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005b8a:	e7eb      	b.n	8005b64 <__swhatbuf_r+0x24>

08005b8c <__smakebuf_r>:
 8005b8c:	898b      	ldrh	r3, [r1, #12]
 8005b8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b90:	079d      	lsls	r5, r3, #30
 8005b92:	4606      	mov	r6, r0
 8005b94:	460c      	mov	r4, r1
 8005b96:	d507      	bpl.n	8005ba8 <__smakebuf_r+0x1c>
 8005b98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005b9c:	6023      	str	r3, [r4, #0]
 8005b9e:	6123      	str	r3, [r4, #16]
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	6163      	str	r3, [r4, #20]
 8005ba4:	b003      	add	sp, #12
 8005ba6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ba8:	ab01      	add	r3, sp, #4
 8005baa:	466a      	mov	r2, sp
 8005bac:	f7ff ffc8 	bl	8005b40 <__swhatbuf_r>
 8005bb0:	9f00      	ldr	r7, [sp, #0]
 8005bb2:	4605      	mov	r5, r0
 8005bb4:	4639      	mov	r1, r7
 8005bb6:	4630      	mov	r0, r6
 8005bb8:	f7ff fc24 	bl	8005404 <_malloc_r>
 8005bbc:	b948      	cbnz	r0, 8005bd2 <__smakebuf_r+0x46>
 8005bbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bc2:	059a      	lsls	r2, r3, #22
 8005bc4:	d4ee      	bmi.n	8005ba4 <__smakebuf_r+0x18>
 8005bc6:	f023 0303 	bic.w	r3, r3, #3
 8005bca:	f043 0302 	orr.w	r3, r3, #2
 8005bce:	81a3      	strh	r3, [r4, #12]
 8005bd0:	e7e2      	b.n	8005b98 <__smakebuf_r+0xc>
 8005bd2:	89a3      	ldrh	r3, [r4, #12]
 8005bd4:	6020      	str	r0, [r4, #0]
 8005bd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bda:	81a3      	strh	r3, [r4, #12]
 8005bdc:	9b01      	ldr	r3, [sp, #4]
 8005bde:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005be2:	b15b      	cbz	r3, 8005bfc <__smakebuf_r+0x70>
 8005be4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005be8:	4630      	mov	r0, r6
 8005bea:	f000 f861 	bl	8005cb0 <_isatty_r>
 8005bee:	b128      	cbz	r0, 8005bfc <__smakebuf_r+0x70>
 8005bf0:	89a3      	ldrh	r3, [r4, #12]
 8005bf2:	f023 0303 	bic.w	r3, r3, #3
 8005bf6:	f043 0301 	orr.w	r3, r3, #1
 8005bfa:	81a3      	strh	r3, [r4, #12]
 8005bfc:	89a3      	ldrh	r3, [r4, #12]
 8005bfe:	431d      	orrs	r5, r3
 8005c00:	81a5      	strh	r5, [r4, #12]
 8005c02:	e7cf      	b.n	8005ba4 <__smakebuf_r+0x18>

08005c04 <_putc_r>:
 8005c04:	b570      	push	{r4, r5, r6, lr}
 8005c06:	460d      	mov	r5, r1
 8005c08:	4614      	mov	r4, r2
 8005c0a:	4606      	mov	r6, r0
 8005c0c:	b118      	cbz	r0, 8005c16 <_putc_r+0x12>
 8005c0e:	6a03      	ldr	r3, [r0, #32]
 8005c10:	b90b      	cbnz	r3, 8005c16 <_putc_r+0x12>
 8005c12:	f7ff f9b1 	bl	8004f78 <__sinit>
 8005c16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c18:	07d8      	lsls	r0, r3, #31
 8005c1a:	d405      	bmi.n	8005c28 <_putc_r+0x24>
 8005c1c:	89a3      	ldrh	r3, [r4, #12]
 8005c1e:	0599      	lsls	r1, r3, #22
 8005c20:	d402      	bmi.n	8005c28 <_putc_r+0x24>
 8005c22:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c24:	f7ff fa89 	bl	800513a <__retarget_lock_acquire_recursive>
 8005c28:	68a3      	ldr	r3, [r4, #8]
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	60a3      	str	r3, [r4, #8]
 8005c30:	da05      	bge.n	8005c3e <_putc_r+0x3a>
 8005c32:	69a2      	ldr	r2, [r4, #24]
 8005c34:	4293      	cmp	r3, r2
 8005c36:	db12      	blt.n	8005c5e <_putc_r+0x5a>
 8005c38:	b2eb      	uxtb	r3, r5
 8005c3a:	2b0a      	cmp	r3, #10
 8005c3c:	d00f      	beq.n	8005c5e <_putc_r+0x5a>
 8005c3e:	6823      	ldr	r3, [r4, #0]
 8005c40:	1c5a      	adds	r2, r3, #1
 8005c42:	6022      	str	r2, [r4, #0]
 8005c44:	701d      	strb	r5, [r3, #0]
 8005c46:	b2ed      	uxtb	r5, r5
 8005c48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c4a:	07da      	lsls	r2, r3, #31
 8005c4c:	d405      	bmi.n	8005c5a <_putc_r+0x56>
 8005c4e:	89a3      	ldrh	r3, [r4, #12]
 8005c50:	059b      	lsls	r3, r3, #22
 8005c52:	d402      	bmi.n	8005c5a <_putc_r+0x56>
 8005c54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c56:	f7ff fa71 	bl	800513c <__retarget_lock_release_recursive>
 8005c5a:	4628      	mov	r0, r5
 8005c5c:	bd70      	pop	{r4, r5, r6, pc}
 8005c5e:	4629      	mov	r1, r5
 8005c60:	4622      	mov	r2, r4
 8005c62:	4630      	mov	r0, r6
 8005c64:	f7ff fed7 	bl	8005a16 <__swbuf_r>
 8005c68:	4605      	mov	r5, r0
 8005c6a:	e7ed      	b.n	8005c48 <_putc_r+0x44>

08005c6c <_close_r>:
 8005c6c:	b538      	push	{r3, r4, r5, lr}
 8005c6e:	4d06      	ldr	r5, [pc, #24]	@ (8005c88 <_close_r+0x1c>)
 8005c70:	2300      	movs	r3, #0
 8005c72:	4604      	mov	r4, r0
 8005c74:	4608      	mov	r0, r1
 8005c76:	602b      	str	r3, [r5, #0]
 8005c78:	f7fe ff2e 	bl	8004ad8 <_close>
 8005c7c:	1c43      	adds	r3, r0, #1
 8005c7e:	d102      	bne.n	8005c86 <_close_r+0x1a>
 8005c80:	682b      	ldr	r3, [r5, #0]
 8005c82:	b103      	cbz	r3, 8005c86 <_close_r+0x1a>
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	bd38      	pop	{r3, r4, r5, pc}
 8005c88:	200004bc 	.word	0x200004bc

08005c8c <_fstat_r>:
 8005c8c:	b538      	push	{r3, r4, r5, lr}
 8005c8e:	4d07      	ldr	r5, [pc, #28]	@ (8005cac <_fstat_r+0x20>)
 8005c90:	2300      	movs	r3, #0
 8005c92:	4604      	mov	r4, r0
 8005c94:	4608      	mov	r0, r1
 8005c96:	4611      	mov	r1, r2
 8005c98:	602b      	str	r3, [r5, #0]
 8005c9a:	f7fe ff60 	bl	8004b5e <_fstat>
 8005c9e:	1c43      	adds	r3, r0, #1
 8005ca0:	d102      	bne.n	8005ca8 <_fstat_r+0x1c>
 8005ca2:	682b      	ldr	r3, [r5, #0]
 8005ca4:	b103      	cbz	r3, 8005ca8 <_fstat_r+0x1c>
 8005ca6:	6023      	str	r3, [r4, #0]
 8005ca8:	bd38      	pop	{r3, r4, r5, pc}
 8005caa:	bf00      	nop
 8005cac:	200004bc 	.word	0x200004bc

08005cb0 <_isatty_r>:
 8005cb0:	b538      	push	{r3, r4, r5, lr}
 8005cb2:	4d06      	ldr	r5, [pc, #24]	@ (8005ccc <_isatty_r+0x1c>)
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	4604      	mov	r4, r0
 8005cb8:	4608      	mov	r0, r1
 8005cba:	602b      	str	r3, [r5, #0]
 8005cbc:	f7ff f8b2 	bl	8004e24 <_isatty>
 8005cc0:	1c43      	adds	r3, r0, #1
 8005cc2:	d102      	bne.n	8005cca <_isatty_r+0x1a>
 8005cc4:	682b      	ldr	r3, [r5, #0]
 8005cc6:	b103      	cbz	r3, 8005cca <_isatty_r+0x1a>
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	bd38      	pop	{r3, r4, r5, pc}
 8005ccc:	200004bc 	.word	0x200004bc

08005cd0 <_lseek_r>:
 8005cd0:	b538      	push	{r3, r4, r5, lr}
 8005cd2:	4d07      	ldr	r5, [pc, #28]	@ (8005cf0 <_lseek_r+0x20>)
 8005cd4:	4604      	mov	r4, r0
 8005cd6:	4608      	mov	r0, r1
 8005cd8:	4611      	mov	r1, r2
 8005cda:	2200      	movs	r2, #0
 8005cdc:	602a      	str	r2, [r5, #0]
 8005cde:	461a      	mov	r2, r3
 8005ce0:	f7fe febb 	bl	8004a5a <_lseek>
 8005ce4:	1c43      	adds	r3, r0, #1
 8005ce6:	d102      	bne.n	8005cee <_lseek_r+0x1e>
 8005ce8:	682b      	ldr	r3, [r5, #0]
 8005cea:	b103      	cbz	r3, 8005cee <_lseek_r+0x1e>
 8005cec:	6023      	str	r3, [r4, #0]
 8005cee:	bd38      	pop	{r3, r4, r5, pc}
 8005cf0:	200004bc 	.word	0x200004bc

08005cf4 <_read_r>:
 8005cf4:	b538      	push	{r3, r4, r5, lr}
 8005cf6:	4d07      	ldr	r5, [pc, #28]	@ (8005d14 <_read_r+0x20>)
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	4608      	mov	r0, r1
 8005cfc:	4611      	mov	r1, r2
 8005cfe:	2200      	movs	r2, #0
 8005d00:	602a      	str	r2, [r5, #0]
 8005d02:	461a      	mov	r2, r3
 8005d04:	f7fe fe53 	bl	80049ae <_read>
 8005d08:	1c43      	adds	r3, r0, #1
 8005d0a:	d102      	bne.n	8005d12 <_read_r+0x1e>
 8005d0c:	682b      	ldr	r3, [r5, #0]
 8005d0e:	b103      	cbz	r3, 8005d12 <_read_r+0x1e>
 8005d10:	6023      	str	r3, [r4, #0]
 8005d12:	bd38      	pop	{r3, r4, r5, pc}
 8005d14:	200004bc 	.word	0x200004bc

08005d18 <_sbrk_r>:
 8005d18:	b538      	push	{r3, r4, r5, lr}
 8005d1a:	4d06      	ldr	r5, [pc, #24]	@ (8005d34 <_sbrk_r+0x1c>)
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	4604      	mov	r4, r0
 8005d20:	4608      	mov	r0, r1
 8005d22:	602b      	str	r3, [r5, #0]
 8005d24:	f7fc f9f2 	bl	800210c <_sbrk>
 8005d28:	1c43      	adds	r3, r0, #1
 8005d2a:	d102      	bne.n	8005d32 <_sbrk_r+0x1a>
 8005d2c:	682b      	ldr	r3, [r5, #0]
 8005d2e:	b103      	cbz	r3, 8005d32 <_sbrk_r+0x1a>
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	bd38      	pop	{r3, r4, r5, pc}
 8005d34:	200004bc 	.word	0x200004bc

08005d38 <_write_r>:
 8005d38:	b538      	push	{r3, r4, r5, lr}
 8005d3a:	4d07      	ldr	r5, [pc, #28]	@ (8005d58 <_write_r+0x20>)
 8005d3c:	4604      	mov	r4, r0
 8005d3e:	4608      	mov	r0, r1
 8005d40:	4611      	mov	r1, r2
 8005d42:	2200      	movs	r2, #0
 8005d44:	602a      	str	r2, [r5, #0]
 8005d46:	461a      	mov	r2, r3
 8005d48:	f7fe fe99 	bl	8004a7e <_write>
 8005d4c:	1c43      	adds	r3, r0, #1
 8005d4e:	d102      	bne.n	8005d56 <_write_r+0x1e>
 8005d50:	682b      	ldr	r3, [r5, #0]
 8005d52:	b103      	cbz	r3, 8005d56 <_write_r+0x1e>
 8005d54:	6023      	str	r3, [r4, #0]
 8005d56:	bd38      	pop	{r3, r4, r5, pc}
 8005d58:	200004bc 	.word	0x200004bc

08005d5c <_free_r>:
 8005d5c:	b538      	push	{r3, r4, r5, lr}
 8005d5e:	4605      	mov	r5, r0
 8005d60:	2900      	cmp	r1, #0
 8005d62:	d041      	beq.n	8005de8 <_free_r+0x8c>
 8005d64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d68:	1f0c      	subs	r4, r1, #4
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	bfb8      	it	lt
 8005d6e:	18e4      	addlt	r4, r4, r3
 8005d70:	f7ff fe02 	bl	8005978 <__malloc_lock>
 8005d74:	4a1d      	ldr	r2, [pc, #116]	@ (8005dec <_free_r+0x90>)
 8005d76:	6813      	ldr	r3, [r2, #0]
 8005d78:	b933      	cbnz	r3, 8005d88 <_free_r+0x2c>
 8005d7a:	6063      	str	r3, [r4, #4]
 8005d7c:	6014      	str	r4, [r2, #0]
 8005d7e:	4628      	mov	r0, r5
 8005d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d84:	f7ff bdfe 	b.w	8005984 <__malloc_unlock>
 8005d88:	42a3      	cmp	r3, r4
 8005d8a:	d908      	bls.n	8005d9e <_free_r+0x42>
 8005d8c:	6820      	ldr	r0, [r4, #0]
 8005d8e:	1821      	adds	r1, r4, r0
 8005d90:	428b      	cmp	r3, r1
 8005d92:	bf01      	itttt	eq
 8005d94:	6819      	ldreq	r1, [r3, #0]
 8005d96:	685b      	ldreq	r3, [r3, #4]
 8005d98:	1809      	addeq	r1, r1, r0
 8005d9a:	6021      	streq	r1, [r4, #0]
 8005d9c:	e7ed      	b.n	8005d7a <_free_r+0x1e>
 8005d9e:	461a      	mov	r2, r3
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	b10b      	cbz	r3, 8005da8 <_free_r+0x4c>
 8005da4:	42a3      	cmp	r3, r4
 8005da6:	d9fa      	bls.n	8005d9e <_free_r+0x42>
 8005da8:	6811      	ldr	r1, [r2, #0]
 8005daa:	1850      	adds	r0, r2, r1
 8005dac:	42a0      	cmp	r0, r4
 8005dae:	d10b      	bne.n	8005dc8 <_free_r+0x6c>
 8005db0:	6820      	ldr	r0, [r4, #0]
 8005db2:	4401      	add	r1, r0
 8005db4:	1850      	adds	r0, r2, r1
 8005db6:	4283      	cmp	r3, r0
 8005db8:	6011      	str	r1, [r2, #0]
 8005dba:	d1e0      	bne.n	8005d7e <_free_r+0x22>
 8005dbc:	6818      	ldr	r0, [r3, #0]
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	6053      	str	r3, [r2, #4]
 8005dc2:	4408      	add	r0, r1
 8005dc4:	6010      	str	r0, [r2, #0]
 8005dc6:	e7da      	b.n	8005d7e <_free_r+0x22>
 8005dc8:	d902      	bls.n	8005dd0 <_free_r+0x74>
 8005dca:	230c      	movs	r3, #12
 8005dcc:	602b      	str	r3, [r5, #0]
 8005dce:	e7d6      	b.n	8005d7e <_free_r+0x22>
 8005dd0:	6820      	ldr	r0, [r4, #0]
 8005dd2:	1821      	adds	r1, r4, r0
 8005dd4:	428b      	cmp	r3, r1
 8005dd6:	bf04      	itt	eq
 8005dd8:	6819      	ldreq	r1, [r3, #0]
 8005dda:	685b      	ldreq	r3, [r3, #4]
 8005ddc:	6063      	str	r3, [r4, #4]
 8005dde:	bf04      	itt	eq
 8005de0:	1809      	addeq	r1, r1, r0
 8005de2:	6021      	streq	r1, [r4, #0]
 8005de4:	6054      	str	r4, [r2, #4]
 8005de6:	e7ca      	b.n	8005d7e <_free_r+0x22>
 8005de8:	bd38      	pop	{r3, r4, r5, pc}
 8005dea:	bf00      	nop
 8005dec:	200004b8 	.word	0x200004b8

08005df0 <_init>:
 8005df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df2:	bf00      	nop
 8005df4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005df6:	bc08      	pop	{r3}
 8005df8:	469e      	mov	lr, r3
 8005dfa:	4770      	bx	lr

08005dfc <_fini>:
 8005dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfe:	bf00      	nop
 8005e00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e02:	bc08      	pop	{r3}
 8005e04:	469e      	mov	lr, r3
 8005e06:	4770      	bx	lr
